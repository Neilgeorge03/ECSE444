
Lab 3 - 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  00005090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003ca8  08003ca8  00005090  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003ca8  08003ca8  00005090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cac  08003cac  00004cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08003cb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000090  08003d40  00005090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003d40  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101a4  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e5  00000000  00000000  00015264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00017550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a55  00000000  00000000  000182f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a65c  00000000  00000000  00018d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e640  00000000  00000000  000433a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106dc3  00000000  00000000  000519e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001587ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ec  00000000  00000000  00158864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0015c0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0015c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000090 	.word	0x20000090
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800344c 	.word	0x0800344c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000094 	.word	0x20000094
 80001f8:	0800344c 	.word	0x0800344c

080001fc <HAL_GPIO_EXTI_Callback>:
    generate_sine_wave(C6, sine_wave_C6, 22);
    generate_sine_wave(E6, sine_wave_E6, 17);
    generate_sine_wave(G6, sine_wave_G6, 15);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af02      	add	r7, sp, #8
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800020c:	d127      	bne.n	800025e <HAL_GPIO_EXTI_Callback+0x62>
    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000212:	4815      	ldr	r0, [pc, #84]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000214:	f001 fc60 	bl	8001ad8 <HAL_GPIO_TogglePin>


        wave_index = (wave_index + 1) % 3;
 8000218:	4b14      	ldr	r3, [pc, #80]	@ (800026c <HAL_GPIO_EXTI_Callback+0x70>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	1c5a      	adds	r2, r3, #1
 800021e:	4b14      	ldr	r3, [pc, #80]	@ (8000270 <HAL_GPIO_EXTI_Callback+0x74>)
 8000220:	fb83 3102 	smull	r3, r1, r3, r2
 8000224:	17d3      	asrs	r3, r2, #31
 8000226:	1ac9      	subs	r1, r1, r3
 8000228:	460b      	mov	r3, r1
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	440b      	add	r3, r1
 800022e:	1ad1      	subs	r1, r2, r3
 8000230:	b2ca      	uxtb	r2, r1
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <HAL_GPIO_EXTI_Callback+0x70>)
 8000234:	701a      	strb	r2, [r3, #0]
//        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//        HAL_Delay(2); // Prevent glitches
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, waveforms[wave_index], sample_sizes[wave_index], DAC_ALIGN_12B_R);
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <HAL_GPIO_EXTI_Callback+0x70>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	461a      	mov	r2, r3
 800023c:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <HAL_GPIO_EXTI_Callback+0x78>)
 800023e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000242:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <HAL_GPIO_EXTI_Callback+0x70>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	4619      	mov	r1, r3
 8000248:	4b0b      	ldr	r3, [pc, #44]	@ (8000278 <HAL_GPIO_EXTI_Callback+0x7c>)
 800024a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800024e:	4619      	mov	r1, r3
 8000250:	2300      	movs	r3, #0
 8000252:	9300      	str	r3, [sp, #0]
 8000254:	460b      	mov	r3, r1
 8000256:	2100      	movs	r1, #0
 8000258:	4808      	ldr	r0, [pc, #32]	@ (800027c <HAL_GPIO_EXTI_Callback+0x80>)
 800025a:	f000 fd61 	bl	8000d20 <HAL_DAC_Start_DMA>
    }
}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	48000400 	.word	0x48000400
 800026c:	2000016c 	.word	0x2000016c
 8000270:	55555556 	.word	0x55555556
 8000274:	20000070 	.word	0x20000070
 8000278:	2000007c 	.word	0x2000007c
 800027c:	200000ac 	.word	0x200000ac

08000280 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
//    {
//        // Assuming sine_wave is an array of DAC values
//        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sinusoid_wave[TIMindex]);
//        TIMindex = (TIMindex + 1) % (WAVE_SAMPLES); // 4 % 5 -> 4 ; 5 % 5 -> 0
//    }
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

//	generate_waves();
	wave_index = 0;
 800029a:	4b54      	ldr	r3, [pc, #336]	@ (80003ec <main+0x158>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
    TIMindex = 0;  // Static index to keep track of the sine wave sample
 80002a0:	4b53      	ldr	r3, [pc, #332]	@ (80003f0 <main+0x15c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 fb6e 	bl	8000986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f8b9 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f000 f9c3 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 80002b2:	f000 f997 	bl	80005e4 <MX_DMA_Init>
  MX_DAC1_Init();
 80002b6:	f000 f905 	bl	80004c4 <MX_DAC1_Init>
  MX_TIM2_Init();
 80002ba:	f000 f945 	bl	8000548 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  for (int i = 0; i < WAVE_SAMPLES; i++) {
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	e07d      	b.n	80003c0 <main+0x12c>
	  // 7 and 3 are picked because largest values mapped to 255
	  // smallest multiplier (0) mapped to 0 in dac output
	  sawtooth_wave[i] = 255 * ((float) i) / WAVE_SAMPLES;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	ee07 3a90 	vmov	s15, r3
 80002ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ce:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80003f4 <main+0x160>
 80002d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80003f8 <main+0x164>
 80002da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80002e6:	793b      	ldrb	r3, [r7, #4]
 80002e8:	b2d9      	uxtb	r1, r3
 80002ea:	4a44      	ldr	r2, [pc, #272]	@ (80003fc <main+0x168>)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	4413      	add	r3, r2
 80002f0:	460a      	mov	r2, r1
 80002f2:	701a      	strb	r2, [r3, #0]
	  if (i <= (WAVE_SAMPLES/2)){
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2b32      	cmp	r3, #50	@ 0x32
 80002f8:	dc18      	bgt.n	800032c <main+0x98>
		  triangle_wave[i] = 255 * ((float) i) / WAVE_SAMPLES;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	ee07 3a90 	vmov	s15, r3
 8000300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000304:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80003f4 <main+0x160>
 8000308:	ee27 7a87 	vmul.f32	s14, s15, s14
 800030c:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80003f8 <main+0x164>
 8000310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000318:	edc7 7a01 	vstr	s15, [r7, #4]
 800031c:	793b      	ldrb	r3, [r7, #4]
 800031e:	b2d9      	uxtb	r1, r3
 8000320:	4a37      	ldr	r2, [pc, #220]	@ (8000400 <main+0x16c>)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	4413      	add	r3, r2
 8000326:	460a      	mov	r2, r1
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e019      	b.n	8000360 <main+0xcc>
	  } else {
		  triangle_wave[i] = 255 * ((float) (WAVE_SAMPLES - i)) / WAVE_SAMPLES;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000332:	ee07 3a90 	vmov	s15, r3
 8000336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800033a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80003f4 <main+0x160>
 800033e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000342:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80003f8 <main+0x164>
 8000346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800034a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800034e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000352:	793b      	ldrb	r3, [r7, #4]
 8000354:	b2d9      	uxtb	r1, r3
 8000356:	4a2a      	ldr	r2, [pc, #168]	@ (8000400 <main+0x16c>)
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	4413      	add	r3, r2
 800035c:	460a      	mov	r2, r1
 800035e:	701a      	strb	r2, [r3, #0]
	  }

	  sinusoid_wave[i] = (uint8_t)((arm_sin_f32(2 * PI * ((float) i) / WAVE_SAMPLES) + 1) * 100) * 2/3;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	ee07 3a90 	vmov	s15, r3
 8000366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800036a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000404 <main+0x170>
 800036e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000372:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80003f8 <main+0x164>
 8000376:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800037a:	eeb0 0a47 	vmov.f32	s0, s14
 800037e:	f002 fff3 	bl	8003368 <arm_sin_f32>
 8000382:	eef0 7a40 	vmov.f32	s15, s0
 8000386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800038a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800038e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80003f8 <main+0x164>
 8000392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800039a:	edc7 7a01 	vstr	s15, [r7, #4]
 800039e:	793b      	ldrb	r3, [r7, #4]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4a18      	ldr	r2, [pc, #96]	@ (8000408 <main+0x174>)
 80003a6:	fb82 1203 	smull	r1, r2, r2, r3
 80003aa:	17db      	asrs	r3, r3, #31
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	b2d9      	uxtb	r1, r3
 80003b0:	4a16      	ldr	r2, [pc, #88]	@ (800040c <main+0x178>)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	4413      	add	r3, r2
 80003b6:	460a      	mov	r2, r1
 80003b8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < WAVE_SAMPLES; i++) {
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3301      	adds	r3, #1
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b63      	cmp	r3, #99	@ 0x63
 80003c4:	f77f af7e 	ble.w	80002c4 <main+0x30>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Timer here
  HAL_TIM_Base_Start_IT(&htim2);
 80003c8:	4811      	ldr	r0, [pc, #68]	@ (8000410 <main+0x17c>)
 80003ca:	f002 fb7f 	bl	8002acc <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, waveforms[2], sample_sizes[2], DAC_ALIGN_12B_R);
 80003ce:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <main+0x180>)
 80003d0:	689a      	ldr	r2, [r3, #8]
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <main+0x184>)
 80003d4:	889b      	ldrh	r3, [r3, #4]
 80003d6:	4619      	mov	r1, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	460b      	mov	r3, r1
 80003de:	2100      	movs	r1, #0
 80003e0:	480e      	ldr	r0, [pc, #56]	@ (800041c <main+0x188>)
 80003e2:	f000 fc9d 	bl	8000d20 <HAL_DAC_Start_DMA>
//  start_waveform();
//    int i = 0;
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

  while (1)
 80003e6:	bf00      	nop
 80003e8:	e7fd      	b.n	80003e6 <main+0x152>
 80003ea:	bf00      	nop
 80003ec:	2000016c 	.word	0x2000016c
 80003f0:	2000029c 	.word	0x2000029c
 80003f4:	437f0000 	.word	0x437f0000
 80003f8:	42c80000 	.word	0x42c80000
 80003fc:	200001d4 	.word	0x200001d4
 8000400:	20000170 	.word	0x20000170
 8000404:	40c90fdb 	.word	0x40c90fdb
 8000408:	55555556 	.word	0x55555556
 800040c:	20000238 	.word	0x20000238
 8000410:	20000120 	.word	0x20000120
 8000414:	20000070 	.word	0x20000070
 8000418:	2000007c 	.word	0x2000007c
 800041c:	200000ac 	.word	0x200000ac

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b096      	sub	sp, #88	@ 0x58
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	2244      	movs	r2, #68	@ 0x44
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f002 ffe0 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000442:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000446:	f001 fb99 	bl	8001b7c <HAL_PWREx_ControlVoltageScaling>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000450:	f000 f956 	bl	8000700 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000454:	2310      	movs	r3, #16
 8000456:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000460:	2360      	movs	r3, #96	@ 0x60
 8000462:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000464:	2302      	movs	r3, #2
 8000466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000468:	2301      	movs	r3, #1
 800046a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800046c:	2301      	movs	r3, #1
 800046e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000470:	2328      	movs	r3, #40	@ 0x28
 8000472:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000474:	2302      	movs	r3, #2
 8000476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000478:	2302      	movs	r3, #2
 800047a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800047c:	2302      	movs	r3, #2
 800047e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4618      	mov	r0, r3
 8000486:	f001 fc1d 	bl	8001cc4 <HAL_RCC_OscConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000490:	f000 f936 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	230f      	movs	r3, #15
 8000496:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000498:	2303      	movs	r3, #3
 800049a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	2103      	movs	r1, #3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f002 f823 	bl	80024f8 <HAL_RCC_ClockConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004b8:	f000 f922 	bl	8000700 <Error_Handler>
  }
}
 80004bc:	bf00      	nop
 80004be:	3758      	adds	r7, #88	@ 0x58
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2228      	movs	r2, #40	@ 0x28
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 ff8f 	bl	80033f4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <MX_DAC1_Init+0x7c>)
 80004d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000544 <MX_DAC1_Init+0x80>)
 80004da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004dc:	4818      	ldr	r0, [pc, #96]	@ (8000540 <MX_DAC1_Init+0x7c>)
 80004de:	f000 fbfc 	bl	8000cda <HAL_DAC_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004e8:	f000 f90a 	bl	8000700 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80004f0:	230a      	movs	r3, #10
 80004f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80004f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004f8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	4619      	mov	r1, r3
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <MX_DAC1_Init+0x7c>)
 800050e:	f000 fcf1 	bl	8000ef4 <HAL_DAC_ConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000518:	f000 f8f2 	bl	8000700 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	2210      	movs	r2, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4806      	ldr	r0, [pc, #24]	@ (8000540 <MX_DAC1_Init+0x7c>)
 8000528:	f000 fce4 	bl	8000ef4 <HAL_DAC_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8000532:	f000 f8e5 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	3728      	adds	r7, #40	@ 0x28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000ac 	.word	0x200000ac
 8000544:	40007400 	.word	0x40007400

08000548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800056c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2720;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_TIM2_Init+0x98>)
 800057c:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <MX_TIM2_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800058e:	4814      	ldr	r0, [pc, #80]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000590:	f002 fa44 	bl	8002a1c <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800059a:	f000 f8b1 	bl	8000700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <MX_TIM2_Init+0x98>)
 80005ac:	f002 fc05 	bl	8002dba <HAL_TIM_ConfigClockSource>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005b6:	f000 f8a3 	bl	8000700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <MX_TIM2_Init+0x98>)
 80005c8:	f002 fe28 	bl	800321c <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005d2:	f000 f895 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000120 	.word	0x20000120

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_DMA_Init+0x50>)
 80005ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ee:	4a11      	ldr	r2, [pc, #68]	@ (8000634 <MX_DMA_Init+0x50>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_DMA_Init+0x50>)
 80005f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_DMA_Init+0x50>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000606:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <MX_DMA_Init+0x50>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6493      	str	r3, [r2, #72]	@ 0x48
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_DMA_Init+0x50>)
 8000610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200b      	movs	r0, #11
 8000620:	f000 fb25 	bl	8000c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000624:	200b      	movs	r0, #11
 8000626:	f000 fb3e 	bl	8000ca6 <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a22      	ldr	r2, [pc, #136]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800069c:	4816      	ldr	r0, [pc, #88]	@ (80006f8 <MX_GPIO_Init+0xc0>)
 800069e:	f001 fa03 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80006a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	4810      	ldr	r0, [pc, #64]	@ (80006fc <MX_GPIO_Init+0xc4>)
 80006ba:	f001 f863 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80006be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <MX_GPIO_Init+0xc0>)
 80006d8:	f001 f854 	bl	8001784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2028      	movs	r0, #40	@ 0x28
 80006e2:	f000 fac4 	bl	8000c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e6:	2028      	movs	r0, #40	@ 0x28
 80006e8:	f000 fadd 	bl	8000ca6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <Error_Handler+0x8>

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6613      	str	r3, [r2, #96]	@ 0x60
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <HAL_MspInit+0x44>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000734:	6593      	str	r3, [r2, #88]	@ 0x58
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_MspInit+0x44>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <HAL_DAC_MspInit+0xcc>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d14f      	bne.n	8000816 <HAL_DAC_MspInit+0xc2>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000776:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <HAL_DAC_MspInit+0xd0>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077a:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <HAL_DAC_MspInit+0xd0>)
 800077c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000780:	6593      	str	r3, [r2, #88]	@ 0x58
 8000782:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <HAL_DAC_MspInit+0xd0>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <HAL_DAC_MspInit+0xd0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a24      	ldr	r2, [pc, #144]	@ (8000824 <HAL_DAC_MspInit+0xd0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <HAL_DAC_MspInit+0xd0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a6:	2310      	movs	r3, #16
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007bc:	f000 ffe2 	bl	8001784 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007c2:	4a1a      	ldr	r2, [pc, #104]	@ (800082c <HAL_DAC_MspInit+0xd8>)
 80007c4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007c8:	2206      	movs	r2, #6
 80007ca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007ce:	2210      	movs	r2, #16
 80007d0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007da:	2280      	movs	r2, #128	@ 0x80
 80007dc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007e4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007ec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007f0:	2220      	movs	r2, #32
 80007f2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80007fa:	480b      	ldr	r0, [pc, #44]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 80007fc:	f000 fd50 	bl	80012a0 <HAL_DMA_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000806:	f7ff ff7b 	bl	8000700 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a06      	ldr	r2, [pc, #24]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <HAL_DAC_MspInit+0xd4>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	@ 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40007400 	.word	0x40007400
 8000824:	40021000 	.word	0x40021000
 8000828:	200000c0 	.word	0x200000c0
 800082c:	40020008 	.word	0x40020008

08000830 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000840:	d113      	bne.n	800086a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_TIM_Base_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <HAL_TIM_Base_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6593      	str	r3, [r2, #88]	@ 0x58
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_TIM_Base_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	201c      	movs	r0, #28
 8000860:	f000 fa05 	bl	8000c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000864:	201c      	movs	r0, #28
 8000866:	f000 fa1e 	bl	8000ca6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f8af 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <DMA1_Channel1_IRQHandler+0x10>)
 80008de:	f000 fe02 	bl	80014e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000c0 	.word	0x200000c0

080008ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <TIM2_IRQHandler+0x10>)
 80008f2:	f002 f95b 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000120 	.word	0x20000120

08000900 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_Pin);
 8000904:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000908:	f001 f900 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800096c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000938:	f7ff ffea 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f002 fd4f 	bl	8003404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000966:	f7ff fc95 	bl	8000294 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800096c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000978:	08003cb0 	.word	0x08003cb0
  ldr r2, =_sbss
 800097c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000980:	200002a4 	.word	0x200002a4

08000984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_IRQHandler>

08000986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f961 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f80e 	bl	80009b8 <HAL_InitTick>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	e001      	b.n	80009ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a8:	f7ff feb0 	bl	800070c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <HAL_InitTick+0x6c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d023      	beq.n	8000a14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <HAL_InitTick+0x70>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <HAL_InitTick+0x6c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f96d 	bl	8000cc2 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10f      	bne.n	8000a0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d809      	bhi.n	8000a08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009fc:	f000 f937 	bl	8000c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_InitTick+0x74>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e007      	b.n	8000a18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e004      	b.n	8000a18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e001      	b.n	8000a18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000008c 	.word	0x2000008c
 8000a28:	20000084 	.word	0x20000084
 8000a2c:	20000088 	.word	0x20000088

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	200002a0 	.word	0x200002a0

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200002a0 	.word	0x200002a0

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff ffee 	bl	8000a58 <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a88:	d005      	beq.n	8000a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_Delay+0x44>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a96:	bf00      	nop
 8000a98:	f7ff ffde 	bl	8000a58 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f7      	bhi.n	8000a98 <HAL_Delay+0x28>
  {
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000008c 	.word	0x2000008c

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4907      	ldr	r1, [pc, #28]	@ (8000b54 <__NVIC_EnableIRQ+0x38>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	@ (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	@ 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c38:	f7ff ff8e 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff29 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff3e 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff8e 	bl	8000bac <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5d 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff31 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffa2 	bl	8000c14 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e014      	b.n	8000d16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fd29 	bl	8000754 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2202      	movs	r2, #2
 8000d06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	795b      	ldrb	r3, [r3, #5]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_DAC_Start_DMA+0x1e>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e0ab      	b.n	8000e96 <HAL_DAC_Start_DMA+0x176>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2201      	movs	r2, #1
 8000d42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2202      	movs	r2, #2
 8000d48:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d12f      	bne.n	8000db0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4a52      	ldr	r2, [pc, #328]	@ (8000ea0 <HAL_DAC_Start_DMA+0x180>)
 8000d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4a51      	ldr	r2, [pc, #324]	@ (8000ea4 <HAL_DAC_Start_DMA+0x184>)
 8000d5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	4a50      	ldr	r2, [pc, #320]	@ (8000ea8 <HAL_DAC_Start_DMA+0x188>)
 8000d66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d76:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d013      	beq.n	8000da6 <HAL_DAC_Start_DMA+0x86>
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d845      	bhi.n	8000e10 <HAL_DAC_Start_DMA+0xf0>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_DAC_Start_DMA+0x72>
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d005      	beq.n	8000d9c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000d90:	e03e      	b.n	8000e10 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3308      	adds	r3, #8
 8000d98:	613b      	str	r3, [r7, #16]
        break;
 8000d9a:	e03c      	b.n	8000e16 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	330c      	adds	r3, #12
 8000da2:	613b      	str	r3, [r7, #16]
        break;
 8000da4:	e037      	b.n	8000e16 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3310      	adds	r3, #16
 8000dac:	613b      	str	r3, [r7, #16]
        break;
 8000dae:	e032      	b.n	8000e16 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a3d      	ldr	r2, [pc, #244]	@ (8000eac <HAL_DAC_Start_DMA+0x18c>)
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8000eb0 <HAL_DAC_Start_DMA+0x190>)
 8000dbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	@ (8000eb4 <HAL_DAC_Start_DMA+0x194>)
 8000dc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000dd6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d013      	beq.n	8000e06 <HAL_DAC_Start_DMA+0xe6>
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d817      	bhi.n	8000e14 <HAL_DAC_Start_DMA+0xf4>
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_DAC_Start_DMA+0xd2>
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d005      	beq.n	8000dfc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000df0:	e010      	b.n	8000e14 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3314      	adds	r3, #20
 8000df8:	613b      	str	r3, [r7, #16]
        break;
 8000dfa:	e00c      	b.n	8000e16 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3318      	adds	r3, #24
 8000e02:	613b      	str	r3, [r7, #16]
        break;
 8000e04:	e007      	b.n	8000e16 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	331c      	adds	r3, #28
 8000e0c:	613b      	str	r3, [r7, #16]
        break;
 8000e0e:	e002      	b.n	8000e16 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000e14:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d111      	bne.n	8000e40 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6898      	ldr	r0, [r3, #8]
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	f000 fadb 	bl	80013f0 <HAL_DMA_Start_IT>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	75fb      	strb	r3, [r7, #23]
 8000e3e:	e010      	b.n	8000e62 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	68d8      	ldr	r0, [r3, #12]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	f000 fac9 	bl	80013f0 <HAL_DMA_Start_IT>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e005      	b.n	8000e94 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	f043 0204 	orr.w	r2, r3, #4
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	0800118d 	.word	0x0800118d
 8000ea4:	080011af 	.word	0x080011af
 8000ea8:	080011cb 	.word	0x080011cb
 8000eac:	08001235 	.word	0x08001235
 8000eb0:	08001257 	.word	0x08001257
 8000eb4:	08001273 	.word	0x08001273

08000eb8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	795b      	ldrb	r3, [r3, #5]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <HAL_DAC_ConfigChannel+0x1c>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e137      	b.n	8001180 <HAL_DAC_ConfigChannel+0x28c>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2201      	movs	r2, #1
 8000f14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	f040 8081 	bne.w	8001028 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f26:	f7ff fd97 	bl	8000a58 <HAL_GetTick>
 8000f2a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d140      	bne.n	8000fb4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f32:	e018      	b.n	8000f66 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f34:	f7ff fd90 	bl	8000a58 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d911      	bls.n	8000f66 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00a      	beq.n	8000f66 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	f043 0208 	orr.w	r2, r3, #8
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e10c      	b.n	8001180 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1df      	bne.n	8000f34 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fd7b 	bl	8000a70 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	69d2      	ldr	r2, [r2, #28]
 8000f82:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f84:	e023      	b.n	8000fce <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f86:	f7ff fd67 	bl	8000a58 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d90f      	bls.n	8000fb4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da0a      	bge.n	8000fb4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	f043 0208 	orr.w	r2, r3, #8
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2203      	movs	r2, #3
 8000fae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e0e5      	b.n	8001180 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dbe3      	blt.n	8000f86 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff fd56 	bl	8000a70 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	69d2      	ldr	r2, [r2, #28]
 8000fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	ea02 0103 	and.w	r1, r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	6a1a      	ldr	r2, [r3, #32]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	21ff      	movs	r1, #255	@ 0xff
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	ea02 0103 	and.w	r1, r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	409a      	lsls	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d11d      	bne.n	800106c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001036:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	4313      	orrs	r3, r2
 8001062:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001072:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2207      	movs	r2, #7
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	4013      	ands	r3, r2
 8001086:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	431a      	orrs	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43da      	mvns	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	400a      	ands	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4313      	orrs	r3, r2
 8001106:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001110:	d104      	bne.n	800111c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e018      	b.n	800114e <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	e00f      	b.n	800114e <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800112e:	f001 fba9 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 8001132:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <HAL_DAC_ConfigChannel+0x294>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d904      	bls.n	8001146 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	e003      	b.n	800114e <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800114c:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	22c0      	movs	r2, #192	@ 0xc0
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43da      	mvns	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	400a      	ands	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	04c4b400 	.word	0x04c4b400

0800118c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff fe8c 	bl	8000eb8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	711a      	strb	r2, [r3, #4]
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff fe85 	bl	8000ecc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	f043 0204 	orr.w	r2, r3, #4
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7ff fe7b 	bl	8000ee0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2201      	movs	r2, #1
 80011ee:	711a      	strb	r2, [r3, #4]
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001240:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff ffd8 	bl	80011f8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	711a      	strb	r2, [r3, #4]
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001262:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff ffd1 	bl	800120c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	f043 0204 	orr.w	r2, r3, #4
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff ffc7 	bl	8001220 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	711a      	strb	r2, [r3, #4]
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e08d      	b.n	80013ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b47      	ldr	r3, [pc, #284]	@ (80013d8 <HAL_DMA_Init+0x138>)
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d80f      	bhi.n	80012de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b45      	ldr	r3, [pc, #276]	@ (80013dc <HAL_DMA_Init+0x13c>)
 80012c6:	4413      	add	r3, r2
 80012c8:	4a45      	ldr	r2, [pc, #276]	@ (80013e0 <HAL_DMA_Init+0x140>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	009a      	lsls	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a42      	ldr	r2, [pc, #264]	@ (80013e4 <HAL_DMA_Init+0x144>)
 80012da:	641a      	str	r2, [r3, #64]	@ 0x40
 80012dc:	e00e      	b.n	80012fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b40      	ldr	r3, [pc, #256]	@ (80013e8 <HAL_DMA_Init+0x148>)
 80012e6:	4413      	add	r3, r2
 80012e8:	4a3d      	ldr	r2, [pc, #244]	@ (80013e0 <HAL_DMA_Init+0x140>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	009a      	lsls	r2, r3, #2
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a3c      	ldr	r2, [pc, #240]	@ (80013ec <HAL_DMA_Init+0x14c>)
 80012fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001316:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f9b6 	bl	80016c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800135c:	d102      	bne.n	8001364 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001378:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <HAL_DMA_Init+0x104>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d80c      	bhi.n	80013a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f9d6 	bl	800173c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	e008      	b.n	80013b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40020407 	.word	0x40020407
 80013dc:	bffdfff8 	.word	0xbffdfff8
 80013e0:	cccccccd 	.word	0xcccccccd
 80013e4:	40020000 	.word	0x40020000
 80013e8:	bffdfbf8 	.word	0xbffdfbf8
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Start_IT+0x20>
 800140c:	2302      	movs	r3, #2
 800140e:	e066      	b.n	80014de <HAL_DMA_Start_IT+0xee>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d155      	bne.n	80014d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 f8fb 	bl	8001644 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 020e 	orr.w	r2, r2, #14
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e00f      	b.n	8001488 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 020a 	orr.w	r2, r2, #10
 8001486:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014bc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e005      	b.n	80014dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014d8:	2302      	movs	r3, #2
 80014da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f003 031c 	and.w	r3, r3, #28
 8001506:	2204      	movs	r2, #4
 8001508:	409a      	lsls	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d026      	beq.n	8001560 <HAL_DMA_IRQHandler+0x7a>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d021      	beq.n	8001560 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0204 	bic.w	r2, r2, #4
 8001538:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f003 021c 	and.w	r2, r3, #28
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2104      	movs	r1, #4
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	2b00      	cmp	r3, #0
 8001554:	d071      	beq.n	800163a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800155e:	e06c      	b.n	800163a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001564:	f003 031c 	and.w	r3, r3, #28
 8001568:	2202      	movs	r2, #2
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02e      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xec>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d029      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10b      	bne.n	80015a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020a 	bic.w	r2, r2, #10
 800159a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a8:	f003 021c 	and.w	r2, r3, #28
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	2102      	movs	r1, #2
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d038      	beq.n	800163a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015d0:	e033      	b.n	800163a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f003 031c 	and.w	r3, r3, #28
 80015da:	2208      	movs	r2, #8
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d02a      	beq.n	800163c <HAL_DMA_IRQHandler+0x156>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d025      	beq.n	800163c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020e 	bic.w	r2, r2, #14
 80015fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001604:	f003 021c 	and.w	r2, r3, #28
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800163a:	bf00      	nop
 800163c:	bf00      	nop
}
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800165a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800166c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f003 021c 	and.w	r2, r3, #28
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b10      	cmp	r3, #16
 8001690:	d108      	bne.n	80016a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016a2:	e007      	b.n	80016b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	60da      	str	r2, [r3, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b17      	ldr	r3, [pc, #92]	@ (800172c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d80a      	bhi.n	80016ea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016e0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6493      	str	r3, [r2, #72]	@ 0x48
 80016e8:	e007      	b.n	80016fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	009a      	lsls	r2, r3, #2
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016f4:	4413      	add	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3b08      	subs	r3, #8
 8001702:	4a0c      	ldr	r2, [pc, #48]	@ (8001734 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001710:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	2201      	movs	r2, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40020407 	.word	0x40020407
 8001730:	4002081c 	.word	0x4002081c
 8001734:	cccccccd 	.word	0xcccccccd
 8001738:	40020880 	.word	0x40020880

0800173c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	461a      	mov	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800175e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3b01      	subs	r3, #1
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2201      	movs	r2, #1
 800176a:	409a      	lsls	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	1000823f 	.word	0x1000823f
 8001780:	40020940 	.word	0x40020940

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	e166      	b.n	8001a62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8158 	beq.w	8001a5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d005      	beq.n	80017c4 <HAL_GPIO_Init+0x40>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d130      	bne.n	8001826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fa:	2201      	movs	r2, #1
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 0201 	and.w	r2, r3, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b03      	cmp	r3, #3
 8001830:	d017      	beq.n	8001862 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d123      	bne.n	80018b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0203 	and.w	r2, r3, #3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80b2 	beq.w	8001a5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f8:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <HAL_GPIO_Init+0x2fc>)
 80018fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fc:	4a60      	ldr	r2, [pc, #384]	@ (8001a80 <HAL_GPIO_Init+0x2fc>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6613      	str	r3, [r2, #96]	@ 0x60
 8001904:	4b5e      	ldr	r3, [pc, #376]	@ (8001a80 <HAL_GPIO_Init+0x2fc>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001910:	4a5c      	ldr	r2, [pc, #368]	@ (8001a84 <HAL_GPIO_Init+0x300>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800193a:	d02b      	beq.n	8001994 <HAL_GPIO_Init+0x210>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d025      	beq.n	8001990 <HAL_GPIO_Init+0x20c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a51      	ldr	r2, [pc, #324]	@ (8001a8c <HAL_GPIO_Init+0x308>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d01f      	beq.n	800198c <HAL_GPIO_Init+0x208>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a50      	ldr	r2, [pc, #320]	@ (8001a90 <HAL_GPIO_Init+0x30c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d019      	beq.n	8001988 <HAL_GPIO_Init+0x204>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a4f      	ldr	r2, [pc, #316]	@ (8001a94 <HAL_GPIO_Init+0x310>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_GPIO_Init+0x200>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a4e      	ldr	r2, [pc, #312]	@ (8001a98 <HAL_GPIO_Init+0x314>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00d      	beq.n	8001980 <HAL_GPIO_Init+0x1fc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4d      	ldr	r2, [pc, #308]	@ (8001a9c <HAL_GPIO_Init+0x318>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d007      	beq.n	800197c <HAL_GPIO_Init+0x1f8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa0 <HAL_GPIO_Init+0x31c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_Init+0x1f4>
 8001974:	2307      	movs	r3, #7
 8001976:	e00e      	b.n	8001996 <HAL_GPIO_Init+0x212>
 8001978:	2308      	movs	r3, #8
 800197a:	e00c      	b.n	8001996 <HAL_GPIO_Init+0x212>
 800197c:	2306      	movs	r3, #6
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x212>
 8001980:	2305      	movs	r3, #5
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x212>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x212>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x212>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x212>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x212>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	@ (8001a84 <HAL_GPIO_Init+0x300>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b4:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019d8:	4a32      	ldr	r2, [pc, #200]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019de:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a02:	4a28      	ldr	r2, [pc, #160]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a08:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a56:	4a13      	ldr	r2, [pc, #76]	@ (8001aa4 <HAL_GPIO_Init+0x320>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae91 	bne.w	8001794 <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48001000 	.word	0x48001000
 8001a98:	48001400 	.word	0x48001400
 8001a9c:	48001800 	.word	0x48001800
 8001aa0:	48001c00 	.word	0x48001c00
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43d9      	mvns	r1, r3
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	400b      	ands	r3, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fb66 	bl	80001fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b40:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4c:	d102      	bne.n	8001b54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b52:	e00b      	b.n	8001b6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b62:	d102      	bne.n	8001b6a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b68:	e000      	b.n	8001b6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001b6a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40007000 	.word	0x40007000

08001b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d141      	bne.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b96:	d131      	bne.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b98:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b9e:	4a46      	ldr	r2, [pc, #280]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba8:	4b43      	ldr	r3, [pc, #268]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bb0:	4a41      	ldr	r2, [pc, #260]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001bb8:	4b40      	ldr	r3, [pc, #256]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2232      	movs	r2, #50	@ 0x32
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	0c9b      	lsrs	r3, r3, #18
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bce:	e002      	b.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be2:	d102      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f2      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bea:	4b33      	ldr	r3, [pc, #204]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf6:	d158      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e057      	b.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c02:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c0c:	e04d      	b.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c14:	d141      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c16:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c22:	d131      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c24:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c2a:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2232      	movs	r2, #50	@ 0x32
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	0c9b      	lsrs	r3, r3, #18
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5a:	e002      	b.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6e:	d102      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f2      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c82:	d112      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e011      	b.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c98:	e007      	b.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	20000084 	.word	0x20000084
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f000 bc08 	b.w	80024e8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd8:	4b96      	ldr	r3, [pc, #600]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce2:	4b94      	ldr	r3, [pc, #592]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80e4 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4c>
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	f040 808b 	bne.w	8001e1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	f040 8087 	bne.w	8001e1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d10:	4b88      	ldr	r3, [pc, #544]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x64>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e3df      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	4b81      	ldr	r3, [pc, #516]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_RCC_OscConfig+0x7e>
 8001d38:	4b7e      	ldr	r3, [pc, #504]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d40:	e005      	b.n	8001d4e <HAL_RCC_OscConfig+0x8a>
 8001d42:	4b7c      	ldr	r3, [pc, #496]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d223      	bcs.n	8001d9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fda0 	bl	800289c <RCC_SetFlashLatencyFromMSIRange>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e3c0      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d66:	4b73      	ldr	r3, [pc, #460]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a72      	ldr	r2, [pc, #456]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b70      	ldr	r3, [pc, #448]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	496d      	ldr	r1, [pc, #436]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d84:	4b6b      	ldr	r3, [pc, #428]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	4968      	ldr	r1, [pc, #416]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	e025      	b.n	8001de6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9a:	4b66      	ldr	r3, [pc, #408]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a65      	ldr	r2, [pc, #404]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b63      	ldr	r3, [pc, #396]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4960      	ldr	r1, [pc, #384]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	495b      	ldr	r1, [pc, #364]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fd60 	bl	800289c <RCC_SetFlashLatencyFromMSIRange>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e380      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001de6:	f000 fcc1 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b51      	ldr	r3, [pc, #324]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4950      	ldr	r1, [pc, #320]	@ (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001e02:	4a4e      	ldr	r2, [pc, #312]	@ (8001f3c <HAL_RCC_OscConfig+0x278>)
 8001e04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e06:	4b4e      	ldr	r3, [pc, #312]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fdd4 	bl	80009b8 <HAL_InitTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d052      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	e364      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d032      	beq.n	8001e8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e26:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a42      	ldr	r2, [pc, #264]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e32:	f7fe fe11 	bl	8000a58 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3a:	f7fe fe0d 	bl	8000a58 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e34d      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e4c:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e58:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a35      	ldr	r2, [pc, #212]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4930      	ldr	r1, [pc, #192]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e76:	4b2f      	ldr	r3, [pc, #188]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	492b      	ldr	r1, [pc, #172]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
 8001e8a:	e01a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e8c:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a28      	ldr	r2, [pc, #160]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fdde 	bl	8000a58 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fdda 	bl	8000a58 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e31a      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1dc>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d073      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x21c>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d063      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d15f      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e2f7      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x24c>
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e025      	b.n	8001f5c <HAL_RCC_OscConfig+0x298>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f18:	d114      	bne.n	8001f44 <HAL_RCC_OscConfig+0x280>
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a02      	ldr	r2, [pc, #8]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e013      	b.n	8001f5c <HAL_RCC_OscConfig+0x298>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08003464 	.word	0x08003464
 8001f3c:	20000084 	.word	0x20000084
 8001f40:	20000088 	.word	0x20000088
 8001f44:	4ba0      	ldr	r3, [pc, #640]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a9f      	ldr	r2, [pc, #636]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b9d      	ldr	r3, [pc, #628]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a9c      	ldr	r2, [pc, #624]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe fd78 	bl	8000a58 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fd74 	bl	8000a58 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e2b4      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7e:	4b92      	ldr	r3, [pc, #584]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x2a8>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fd64 	bl	8000a58 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7fe fd60 	bl	8000a58 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	@ 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e2a0      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa6:	4b88      	ldr	r3, [pc, #544]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2d0>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d060      	beq.n	8002084 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x310>
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d119      	bne.n	8002002 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d116      	bne.n	8002002 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_OscConfig+0x328>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e27d      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b76      	ldr	r3, [pc, #472]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	4973      	ldr	r1, [pc, #460]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002000:	e040      	b.n	8002084 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d023      	beq.n	8002052 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200a:	4b6f      	ldr	r3, [pc, #444]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6e      	ldr	r2, [pc, #440]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe fd1f 	bl	8000a58 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201e:	f7fe fd1b 	bl	8000a58 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e25b      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002030:	4b65      	ldr	r3, [pc, #404]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b62      	ldr	r3, [pc, #392]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	495f      	ldr	r1, [pc, #380]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
 8002050:	e018      	b.n	8002084 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b5d      	ldr	r3, [pc, #372]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a5c      	ldr	r2, [pc, #368]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8002058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7fe fcfb 	bl	8000a58 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002066:	f7fe fcf7 	bl	8000a58 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e237      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002078:	4b53      	ldr	r3, [pc, #332]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d03c      	beq.n	800210a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002098:	4b4b      	ldr	r3, [pc, #300]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800209a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800209e:	4a4a      	ldr	r2, [pc, #296]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe fcd6 	bl	8000a58 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fcd2 	bl	8000a58 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e212      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c2:	4b41      	ldr	r3, [pc, #260]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ef      	beq.n	80020b0 <HAL_RCC_OscConfig+0x3ec>
 80020d0:	e01b      	b.n	800210a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d2:	4b3d      	ldr	r3, [pc, #244]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d8:	4a3b      	ldr	r2, [pc, #236]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7fe fcb9 	bl	8000a58 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ea:	f7fe fcb5 	bl	8000a58 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e1f5      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fc:	4b32      	ldr	r3, [pc, #200]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ef      	bne.n	80020ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80a6 	beq.w	8002264 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800211c:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002132:	6593      	str	r3, [r2, #88]	@ 0x58
 8002134:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_RCC_OscConfig+0x508>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d118      	bne.n	8002182 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002150:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <HAL_RCC_OscConfig+0x508>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_RCC_OscConfig+0x508>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215c:	f7fe fc7c 	bl	8000a58 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe fc78 	bl	8000a58 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1b8      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <HAL_RCC_OscConfig+0x508>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d108      	bne.n	800219c <HAL_RCC_OscConfig+0x4d8>
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800219a:	e029      	b.n	80021f0 <HAL_RCC_OscConfig+0x52c>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d115      	bne.n	80021d0 <HAL_RCC_OscConfig+0x50c>
 80021a4:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021aa:	4a07      	ldr	r2, [pc, #28]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a03      	ldr	r2, [pc, #12]	@ (80021c8 <HAL_RCC_OscConfig+0x504>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c4:	e014      	b.n	80021f0 <HAL_RCC_OscConfig+0x52c>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
 80021d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d6:	4a9c      	ldr	r2, [pc, #624]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e0:	4b99      	ldr	r3, [pc, #612]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	4a98      	ldr	r2, [pc, #608]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d016      	beq.n	8002226 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe fc2e 	bl	8000a58 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe fc2a 	bl	8000a58 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e168      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002216:	4b8c      	ldr	r3, [pc, #560]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ed      	beq.n	8002200 <HAL_RCC_OscConfig+0x53c>
 8002224:	e015      	b.n	8002252 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7fe fc17 	bl	8000a58 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe fc13 	bl	8000a58 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e151      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002244:	4b80      	ldr	r3, [pc, #512]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ed      	bne.n	800222e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002252:	7ffb      	ldrb	r3, [r7, #31]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002258:	4b7b      	ldr	r3, [pc, #492]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	4a7a      	ldr	r2, [pc, #488]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 800225e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002262:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d03c      	beq.n	80022ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002278:	4b73      	ldr	r3, [pc, #460]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 800227a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800227e:	4a72      	ldr	r2, [pc, #456]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe fbe6 	bl	8000a58 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002290:	f7fe fbe2 	bl	8000a58 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e122      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022a2:	4b69      	ldr	r3, [pc, #420]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80022a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ef      	beq.n	8002290 <HAL_RCC_OscConfig+0x5cc>
 80022b0:	e01b      	b.n	80022ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022b2:	4b65      	ldr	r3, [pc, #404]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80022b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022b8:	4a63      	ldr	r2, [pc, #396]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe fbc9 	bl	8000a58 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ca:	f7fe fbc5 	bl	8000a58 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e105      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80022de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ef      	bne.n	80022ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80f9 	beq.w	80024e6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	f040 80cf 	bne.w	800249c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022fe:	4b52      	ldr	r3, [pc, #328]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	429a      	cmp	r2, r3
 8002310:	d12c      	bne.n	800236c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	3b01      	subs	r3, #1
 800231e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d123      	bne.n	800236c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d11b      	bne.n	800236c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d113      	bne.n	800236c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234e:	085b      	lsrs	r3, r3, #1
 8002350:	3b01      	subs	r3, #1
 8002352:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d109      	bne.n	800236c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d071      	beq.n	8002450 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d068      	beq.n	8002444 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002372:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800237e:	4b32      	ldr	r3, [pc, #200]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0ac      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2d      	ldr	r2, [pc, #180]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002394:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002398:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800239a:	f7fe fb5d 	bl	8000a58 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe fb59 	bl	8000a58 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e099      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b4:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c0:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	4b21      	ldr	r3, [pc, #132]	@ (800244c <HAL_RCC_OscConfig+0x788>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023d0:	3a01      	subs	r2, #1
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023da:	0212      	lsls	r2, r2, #8
 80023dc:	4311      	orrs	r1, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023e2:	0852      	lsrs	r2, r2, #1
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0552      	lsls	r2, r2, #21
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023ee:	0852      	lsrs	r2, r2, #1
 80023f0:	3a01      	subs	r2, #1
 80023f2:	0652      	lsls	r2, r2, #25
 80023f4:	4311      	orrs	r1, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023fa:	06d2      	lsls	r2, r2, #27
 80023fc:	430a      	orrs	r2, r1
 80023fe:	4912      	ldr	r1, [pc, #72]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002400:	4313      	orrs	r3, r2
 8002402:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002404:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800240e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a0c      	ldr	r2, [pc, #48]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800241c:	f7fe fb1c 	bl	8000a58 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fb18 	bl	8000a58 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e058      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <HAL_RCC_OscConfig+0x784>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002442:	e050      	b.n	80024e6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e04f      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
 8002448:	40021000 	.word	0x40021000
 800244c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002450:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d144      	bne.n	80024e6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800245c:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a23      	ldr	r2, [pc, #140]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002468:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002474:	f7fe faf0 	bl	8000a58 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe faec 	bl	8000a58 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e02c      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x7b8>
 800249a:	e024      	b.n	80024e6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d01f      	beq.n	80024e2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 80024a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fad3 	bl	8000a58 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe facf 	bl	8000a58 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e00f      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c8:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	4905      	ldr	r1, [pc, #20]	@ (80024f0 <HAL_RCC_OscConfig+0x82c>)
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_RCC_OscConfig+0x830>)
 80024dc:	4013      	ands	r3, r2
 80024de:	60cb      	str	r3, [r1, #12]
 80024e0:	e001      	b.n	80024e6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	feeefffc 	.word	0xfeeefffc

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e11d      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b90      	ldr	r3, [pc, #576]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b8d      	ldr	r3, [pc, #564]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 020f 	bic.w	r2, r3, #15
 8002526:	498b      	ldr	r1, [pc, #556]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b89      	ldr	r3, [pc, #548]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e105      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002558:	429a      	cmp	r2, r3
 800255a:	d908      	bls.n	800256e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b7e      	ldr	r3, [pc, #504]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	497b      	ldr	r1, [pc, #492]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d079      	beq.n	800266e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d11e      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	4b75      	ldr	r3, [pc, #468]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0dc      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002592:	f000 f9dd 	bl	8002950 <RCC_GetSysClockFreqFromPLLSource>
 8002596:	4603      	mov	r3, r0
 8002598:	4a70      	ldr	r2, [pc, #448]	@ (800275c <HAL_RCC_ClockConfig+0x264>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d946      	bls.n	800262c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800259e:	4b6e      	ldr	r3, [pc, #440]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d140      	bne.n	800262c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025b2:	4a69      	ldr	r2, [pc, #420]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025ba:	2380      	movs	r3, #128	@ 0x80
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e035      	b.n	800262c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c8:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d115      	bne.n	8002600 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b9      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0ad      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f0:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0a5      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002600:	f000 f8b4 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8002604:	4603      	mov	r3, r0
 8002606:	4a55      	ldr	r2, [pc, #340]	@ (800275c <HAL_RCC_ClockConfig+0x264>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d90f      	bls.n	800262c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800260c:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002618:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002620:	4a4d      	ldr	r2, [pc, #308]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002626:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800262c:	4b4a      	ldr	r3, [pc, #296]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 0203 	bic.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4947      	ldr	r1, [pc, #284]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263e:	f7fe fa0b 	bl	8000a58 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	e00a      	b.n	800265c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002646:	f7fe fa07 	bl	8000a58 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e077      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265c:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 020c 	and.w	r2, r3, #12
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	429a      	cmp	r2, r3
 800266c:	d1eb      	bne.n	8002646 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b80      	cmp	r3, #128	@ 0x80
 8002672:	d105      	bne.n	8002680 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002674:	4b38      	ldr	r3, [pc, #224]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a37      	ldr	r2, [pc, #220]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800267a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800267e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002698:	429a      	cmp	r2, r3
 800269a:	d208      	bcs.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b2e      	ldr	r3, [pc, #184]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	492b      	ldr	r1, [pc, #172]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ae:	4b29      	ldr	r3, [pc, #164]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d210      	bcs.n	80026de <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026bc:	4b25      	ldr	r3, [pc, #148]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 020f 	bic.w	r2, r3, #15
 80026c4:	4923      	ldr	r1, [pc, #140]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026cc:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <HAL_RCC_ClockConfig+0x25c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d001      	beq.n	80026de <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e036      	b.n	800274c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4918      	ldr	r1, [pc, #96]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4910      	ldr	r1, [pc, #64]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800271c:	f000 f826 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	490c      	ldr	r1, [pc, #48]	@ (8002760 <HAL_RCC_ClockConfig+0x268>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <HAL_RCC_ClockConfig+0x26c>)
 800273a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_RCC_ClockConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe f939 	bl	80009b8 <HAL_InitTick>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]

  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	04c4b400 	.word	0x04c4b400
 8002760:	08003464 	.word	0x08003464
 8002764:	20000084 	.word	0x20000084
 8002768:	20000088 	.word	0x20000088

0800276c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002784:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d121      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d11e      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027a0:	4b34      	ldr	r3, [pc, #208]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027ac:	4b31      	ldr	r3, [pc, #196]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e005      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <HAL_RCC_GetSysClockFreq+0x110>)
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	e004      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027f0:	4b23      	ldr	r3, [pc, #140]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x114>)
 80027f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d134      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d003      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0xa6>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d003      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0xac>
 8002810:	e005      	b.n	800281e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002812:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HAL_RCC_GetSysClockFreq+0x110>)
 8002814:	617b      	str	r3, [r7, #20]
      break;
 8002816:	e005      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x114>)
 800281a:	617b      	str	r3, [r7, #20]
      break;
 800281c:	e002      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	617b      	str	r3, [r7, #20]
      break;
 8002822:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002824:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3301      	adds	r3, #1
 8002830:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002832:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	fb03 f202 	mul.w	r2, r3, r2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x108>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	0e5b      	lsrs	r3, r3, #25
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	3301      	adds	r3, #1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002864:	69bb      	ldr	r3, [r7, #24]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	08003474 	.word	0x08003474
 800287c:	00f42400 	.word	0x00f42400
 8002880:	007a1200 	.word	0x007a1200

08002884 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000084 	.word	0x20000084

0800289c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028b4:	f7ff f942 	bl	8001b3c <HAL_PWREx_GetVoltageRange>
 80028b8:	6178      	str	r0, [r7, #20]
 80028ba:	e014      	b.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	4a21      	ldr	r2, [pc, #132]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028d4:	f7ff f932 	bl	8001b3c <HAL_PWREx_GetVoltageRange>
 80028d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ec:	d10b      	bne.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b80      	cmp	r3, #128	@ 0x80
 80028f2:	d913      	bls.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80028f8:	d902      	bls.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028fa:	2302      	movs	r3, #2
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e00d      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002900:	2301      	movs	r3, #1
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e00a      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b7f      	cmp	r3, #127	@ 0x7f
 800290a:	d902      	bls.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e004      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b70      	cmp	r3, #112	@ 0x70
 8002916:	d101      	bne.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 020f 	bic.w	r2, r3, #15
 8002924:	4909      	ldr	r1, [pc, #36]	@ (800294c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800292c:	4b07      	ldr	r3, [pc, #28]	@ (800294c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	40022000 	.word	0x40022000

08002950 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d00b      	beq.n	800297e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d825      	bhi.n	80029b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d008      	beq.n	8002984 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d11f      	bne.n	80029b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800297a:	613b      	str	r3, [r7, #16]
    break;
 800297c:	e01f      	b.n	80029be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800297e:	4b25      	ldr	r3, [pc, #148]	@ (8002a14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002980:	613b      	str	r3, [r7, #16]
    break;
 8002982:	e01c      	b.n	80029be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e005      	b.n	80029ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80029ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	613b      	str	r3, [r7, #16]
    break;
 80029b6:	e002      	b.n	80029be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
    break;
 80029bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029be:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	3301      	adds	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	fb03 f202 	mul.w	r2, r3, r2
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0e5b      	lsrs	r3, r3, #25
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80029fe:	683b      	ldr	r3, [r7, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200
 8002a18:	08003474 	.word	0x08003474

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e049      	b.n	8002ac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd fef4 	bl	8000830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fa9e 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d001      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e04f      	b.n	8002b84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x76>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0e:	d018      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x76>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x76>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x76>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1c      	ldr	r2, [pc, #112]	@ (8002b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x76>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x76>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d115      	bne.n	8002b6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b17      	ldr	r3, [pc, #92]	@ (8002ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d015      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0xb4>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5a:	d011      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	e008      	b.n	8002b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e000      	b.n	8002b82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40013400 	.word	0x40013400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	00010007 	.word	0x00010007

08002bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d020      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01b      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0202 	mvn.w	r2, #2
 8002be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9b2 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9a4 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f9b5 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d020      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01b      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0204 	mvn.w	r2, #4
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f98c 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f97e 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f98f 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d020      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01b      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0208 	mvn.w	r2, #8
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f966 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f958 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f969 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d020      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01b      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0210 	mvn.w	r2, #16
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f940 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f932 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f943 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00c      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0201 	mvn.w	r2, #1
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fab4 	bl	8000280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fafd 	bl	8003340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00c      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 faf5 	bl	8003354 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8fd 	bl	8002f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00c      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0220 	mvn.w	r2, #32
 8002daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fabd 	bl	800332c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_ConfigClockSource+0x1c>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e0b6      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x18a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002df8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e12:	d03e      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0xd8>
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e18:	f200 8087 	bhi.w	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e20:	f000 8086 	beq.w	8002f30 <HAL_TIM_ConfigClockSource+0x176>
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e28:	d87f      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e2a:	2b70      	cmp	r3, #112	@ 0x70
 8002e2c:	d01a      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0xaa>
 8002e2e:	2b70      	cmp	r3, #112	@ 0x70
 8002e30:	d87b      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e32:	2b60      	cmp	r3, #96	@ 0x60
 8002e34:	d050      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x11e>
 8002e36:	2b60      	cmp	r3, #96	@ 0x60
 8002e38:	d877      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e3a:	2b50      	cmp	r3, #80	@ 0x50
 8002e3c:	d03c      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0xfe>
 8002e3e:	2b50      	cmp	r3, #80	@ 0x50
 8002e40:	d873      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e42:	2b40      	cmp	r3, #64	@ 0x40
 8002e44:	d058      	beq.n	8002ef8 <HAL_TIM_ConfigClockSource+0x13e>
 8002e46:	2b40      	cmp	r3, #64	@ 0x40
 8002e48:	d86f      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e4a:	2b30      	cmp	r3, #48	@ 0x30
 8002e4c:	d064      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x15e>
 8002e4e:	2b30      	cmp	r3, #48	@ 0x30
 8002e50:	d86b      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d060      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x15e>
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d867      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d05c      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x15e>
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d05a      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x15e>
 8002e62:	e062      	b.n	8002f2a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e74:	f000 f9b2 	bl	80031dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
      break;
 8002e90:	e04f      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea2:	f000 f99b 	bl	80031dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eb4:	609a      	str	r2, [r3, #8]
      break;
 8002eb6:	e03c      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f000 f90f 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2150      	movs	r1, #80	@ 0x50
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f968 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002ed6:	e02c      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f000 f92e 	bl	8003146 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2160      	movs	r1, #96	@ 0x60
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f958 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002ef6:	e01c      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f04:	461a      	mov	r2, r3
 8002f06:	f000 f8ef 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2140      	movs	r1, #64	@ 0x40
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f948 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f16:	e00c      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f000 f93f 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f28:	e003      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2e:	e000      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a46      	ldr	r2, [pc, #280]	@ (80030c8 <TIM_Base_SetConfig+0x12c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fba:	d00f      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a43      	ldr	r2, [pc, #268]	@ (80030cc <TIM_Base_SetConfig+0x130>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a42      	ldr	r2, [pc, #264]	@ (80030d0 <TIM_Base_SetConfig+0x134>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a41      	ldr	r2, [pc, #260]	@ (80030d4 <TIM_Base_SetConfig+0x138>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a40      	ldr	r2, [pc, #256]	@ (80030d8 <TIM_Base_SetConfig+0x13c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a35      	ldr	r2, [pc, #212]	@ (80030c8 <TIM_Base_SetConfig+0x12c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01f      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffc:	d01b      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a32      	ldr	r2, [pc, #200]	@ (80030cc <TIM_Base_SetConfig+0x130>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d017      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a31      	ldr	r2, [pc, #196]	@ (80030d0 <TIM_Base_SetConfig+0x134>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a30      	ldr	r2, [pc, #192]	@ (80030d4 <TIM_Base_SetConfig+0x138>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00f      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2f      	ldr	r2, [pc, #188]	@ (80030d8 <TIM_Base_SetConfig+0x13c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00b      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a2e      	ldr	r2, [pc, #184]	@ (80030dc <TIM_Base_SetConfig+0x140>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a2d      	ldr	r2, [pc, #180]	@ (80030e0 <TIM_Base_SetConfig+0x144>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <TIM_Base_SetConfig+0x9a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a2c      	ldr	r2, [pc, #176]	@ (80030e4 <TIM_Base_SetConfig+0x148>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d108      	bne.n	8003048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800303c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a16      	ldr	r2, [pc, #88]	@ (80030c8 <TIM_Base_SetConfig+0x12c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00f      	beq.n	8003094 <TIM_Base_SetConfig+0xf8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <TIM_Base_SetConfig+0x13c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00b      	beq.n	8003094 <TIM_Base_SetConfig+0xf8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a17      	ldr	r2, [pc, #92]	@ (80030dc <TIM_Base_SetConfig+0x140>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <TIM_Base_SetConfig+0xf8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a16      	ldr	r2, [pc, #88]	@ (80030e0 <TIM_Base_SetConfig+0x144>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_Base_SetConfig+0xf8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a15      	ldr	r2, [pc, #84]	@ (80030e4 <TIM_Base_SetConfig+0x148>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]
  }
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40013400 	.word	0x40013400
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40014400 	.word	0x40014400
 80030e4:	40014800 	.word	0x40014800

080030e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 030a 	bic.w	r3, r3, #10
 8003124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003146:	b480      	push	{r7}
 8003148:	b087      	sub	sp, #28
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f023 0210 	bic.w	r2, r3, #16
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	031b      	lsls	r3, r3, #12
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003182:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f043 0307 	orr.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	021a      	lsls	r2, r3, #8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	431a      	orrs	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003230:	2302      	movs	r3, #2
 8003232:	e068      	b.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2e      	ldr	r2, [pc, #184]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2d      	ldr	r2, [pc, #180]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800326e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003280:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a6:	d018      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003320 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a18      	ldr	r2, [pc, #96]	@ (8003324 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a14      	ldr	r2, [pc, #80]	@ (8003328 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10c      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40013400 	.word	0x40013400
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40014000 	.word	0x40014000

0800332c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <arm_sin_f32>:
 8003368:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80033e8 <arm_sin_f32+0x80>
 800336c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003370:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800337c:	d504      	bpl.n	8003388 <arm_sin_f32+0x20>
 800337e:	ee17 3a90 	vmov	r3, s15
 8003382:	3b01      	subs	r3, #1
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800338c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80033ec <arm_sin_f32+0x84>
 8003390:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003394:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003398:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800339c:	ee17 3a90 	vmov	r3, s15
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a6:	d21a      	bcs.n	80033de <arm_sin_f32+0x76>
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b0:	1c59      	adds	r1, r3, #1
 80033b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80033b6:	4a0e      	ldr	r2, [pc, #56]	@ (80033f0 <arm_sin_f32+0x88>)
 80033b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80033bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80033c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80033c4:	ed93 7a00 	vldr	s14, [r3]
 80033c8:	edd2 6a00 	vldr	s13, [r2]
 80033cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80033d0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80033d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80033dc:	4770      	bx	lr
 80033de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80033e2:	2101      	movs	r1, #1
 80033e4:	2300      	movs	r3, #0
 80033e6:	e7e6      	b.n	80033b6 <arm_sin_f32+0x4e>
 80033e8:	3e22f983 	.word	0x3e22f983
 80033ec:	44000000 	.word	0x44000000
 80033f0:	080034a4 	.word	0x080034a4

080033f4 <memset>:
 80033f4:	4402      	add	r2, r0
 80033f6:	4603      	mov	r3, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <__libc_init_array>:
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	4d0d      	ldr	r5, [pc, #52]	@ (800343c <__libc_init_array+0x38>)
 8003408:	4c0d      	ldr	r4, [pc, #52]	@ (8003440 <__libc_init_array+0x3c>)
 800340a:	1b64      	subs	r4, r4, r5
 800340c:	10a4      	asrs	r4, r4, #2
 800340e:	2600      	movs	r6, #0
 8003410:	42a6      	cmp	r6, r4
 8003412:	d109      	bne.n	8003428 <__libc_init_array+0x24>
 8003414:	4d0b      	ldr	r5, [pc, #44]	@ (8003444 <__libc_init_array+0x40>)
 8003416:	4c0c      	ldr	r4, [pc, #48]	@ (8003448 <__libc_init_array+0x44>)
 8003418:	f000 f818 	bl	800344c <_init>
 800341c:	1b64      	subs	r4, r4, r5
 800341e:	10a4      	asrs	r4, r4, #2
 8003420:	2600      	movs	r6, #0
 8003422:	42a6      	cmp	r6, r4
 8003424:	d105      	bne.n	8003432 <__libc_init_array+0x2e>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	f855 3b04 	ldr.w	r3, [r5], #4
 800342c:	4798      	blx	r3
 800342e:	3601      	adds	r6, #1
 8003430:	e7ee      	b.n	8003410 <__libc_init_array+0xc>
 8003432:	f855 3b04 	ldr.w	r3, [r5], #4
 8003436:	4798      	blx	r3
 8003438:	3601      	adds	r6, #1
 800343a:	e7f2      	b.n	8003422 <__libc_init_array+0x1e>
 800343c:	08003ca8 	.word	0x08003ca8
 8003440:	08003ca8 	.word	0x08003ca8
 8003444:	08003ca8 	.word	0x08003ca8
 8003448:	08003cac 	.word	0x08003cac

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr
