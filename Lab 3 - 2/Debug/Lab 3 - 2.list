
Lab 3 - 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08004a08  08004a08  00005a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c50  08004c50  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c50  08004c50  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c54  08004c54  00005c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c58  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  08004c64  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004c64  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfaa  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecf  00000000  00000000  00012fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00014eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3b  00000000  00000000  00015c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a625  00000000  00000000  00016643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e06b  00000000  00000000  00040c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001060bc  00000000  00000000  0004ecd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  00154dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001588f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080049f0 	.word	0x080049f0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080049f0 	.word	0x080049f0

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr
 8000b3c:	0000      	movs	r0, r0
	...

08000b40 <generate_sine_wave>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generate_sine_wave(float frequency)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < SIN_SAMPLES; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	e047      	b.n	8000be0 <generate_sine_wave+0xa0>
    {
        // Calculate the sine wave value for each sample
        // sine_wave[i] = sin(2 * pi * frequency * i / sampling_rate)
        sine_wave[i] = (sin(2 * M_PI * frequency * i / SAMPLING_RATE) + 1) * 127;  // Scaled for 8-bit DAC
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fcb9 	bl	80004c8 <__aeabi_f2d>
 8000b56:	a32c      	add	r3, pc, #176	@ (adr r3, 8000c08 <generate_sine_wave+0xc8>)
 8000b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5c:	f7ff fd0c 	bl	8000578 <__aeabi_dmul>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	4614      	mov	r4, r2
 8000b66:	461d      	mov	r5, r3
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f7ff fc9b 	bl	80004a4 <__aeabi_i2d>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4620      	mov	r0, r4
 8000b74:	4629      	mov	r1, r5
 8000b76:	f7ff fcff 	bl	8000578 <__aeabi_dmul>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4610      	mov	r0, r2
 8000b80:	4619      	mov	r1, r3
 8000b82:	a323      	add	r3, pc, #140	@ (adr r3, 8000c10 <generate_sine_wave+0xd0>)
 8000b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b88:	f7ff fe20 	bl	80007cc <__aeabi_ddiv>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
 8000b90:	ec43 2b17 	vmov	d7, r2, r3
 8000b94:	eeb0 0a47 	vmov.f32	s0, s14
 8000b98:	eef0 0a67 	vmov.f32	s1, s15
 8000b9c:	f002 ff04 	bl	80039a8 <sin>
 8000ba0:	ec51 0b10 	vmov	r0, r1, d0
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <generate_sine_wave+0xc0>)
 8000baa:	f7ff fb2f 	bl	800020c <__adddf3>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	a310      	add	r3, pc, #64	@ (adr r3, 8000bf8 <generate_sine_wave+0xb8>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fcdc 	bl	8000578 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff ff98 	bl	8000afc <__aeabi_d2uiz>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b2d9      	uxtb	r1, r3
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <generate_sine_wave+0xc4>)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SIN_SAMPLES; i++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8000be6:	ddb3      	ble.n	8000b50 <generate_sine_wave+0x10>
    }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	00000000 	.word	0x00000000
 8000bfc:	405fc000 	.word	0x405fc000
 8000c00:	3ff00000 	.word	0x3ff00000
 8000c04:	200000a4 	.word	0x200000a4
 8000c08:	54442d18 	.word	0x54442d18
 8000c0c:	401921fb 	.word	0x401921fb
 8000c10:	00000000 	.word	0x00000000
 8000c14:	40e58880 	.word	0x40e58880

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b094      	sub	sp, #80	@ 0x50
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	wave_index = 0;
 8000c1e:	4b61      	ldr	r3, [pc, #388]	@ (8000da4 <main+0x18c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
    TIMindex = 0;  // Static index to keep track of the sine wave sample
 8000c24:	4b60      	ldr	r3, [pc, #384]	@ (8000da8 <main+0x190>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2a:	f000 fb64 	bl	80012f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2e:	f000 f8cf 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 f9a1 	bl	8000f78 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000c36:	f000 f91d 	bl	8000e74 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000c3a:	f000 f94f 	bl	8000edc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Using 8-bit waves -> Max DAC Output = 2^8 - 1 = 255
  uint8_t sawtooth_multipliers[8] = {0, 1, 2, 3, 4, 5, 6, 7};
 8000c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8000dac <main+0x194>)
 8000c40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c48:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t triangle_multipliers[8] = {0, 1, 2, 3, 3, 2, 1, 0};
 8000c4c:	4a58      	ldr	r2, [pc, #352]	@ (8000db0 <main+0x198>)
 8000c4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c56:	e883 0003 	stmia.w	r3, {r0, r1}
  float   sinusoid_multiplier[8]  = {0.0f, 0.707f, 1.0f, 0.707f, 0.0f, -0.707f, -1.0f, -0.707f};
 8000c5a:	4b56      	ldr	r3, [pc, #344]	@ (8000db4 <main+0x19c>)
 8000c5c:	f107 040c 	add.w	r4, r7, #12
 8000c60:	461d      	mov	r5, r3
 8000c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (int i = 0; i < 8; i++) {
 8000c6e:	2300      	movs	r3, #0
 8000c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c72:	e047      	b.n	8000d04 <main+0xec>
	  // 7 and 3 are picked because largest values mapped to 255
	  // smallest multiplier (0) mapped to 0 in dac output
	  sawtooth_wave[i] = 255 * sawtooth_multipliers[i] / 7;
 8000c74:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4613      	mov	r3, r2
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	1a9b      	subs	r3, r3, r2
 8000c86:	4a4c      	ldr	r2, [pc, #304]	@ (8000db8 <main+0x1a0>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	441a      	add	r2, r3
 8000c8e:	1092      	asrs	r2, r2, #2
 8000c90:	17db      	asrs	r3, r3, #31
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	4a49      	ldr	r2, [pc, #292]	@ (8000dbc <main+0x1a4>)
 8000c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c9a:	4413      	add	r3, r2
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
	  triangle_wave[i] = 255 * triangle_multipliers[i] / 3;
 8000ca0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	0111      	lsls	r1, r2, #4
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4413      	add	r3, r2
 8000cba:	b2d9      	uxtb	r1, r3
 8000cbc:	4a40      	ldr	r2, [pc, #256]	@ (8000dc0 <main+0x1a8>)
 8000cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cc0:	4413      	add	r3, r2
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
	  // By adding 1, we make the wave oscillate between [0, 2] instead of [-1,1]
	  // then we multiply and scale. Since 255 is largest, we divide everything
	  // by 2 which is equivalent to multiplying by half of 255
	  sinusoid_wave[i] = (uint8_t)((sinusoid_multiplier[i] + 1.0f) * 127.5f);
 8000cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	3348      	adds	r3, #72	@ 0x48
 8000ccc:	f107 0208 	add.w	r2, r7, #8
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3b44      	subs	r3, #68	@ 0x44
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ce0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000dc4 <main+0x1ac>
 8000ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cec:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cf0:	793b      	ldrb	r3, [r7, #4]
 8000cf2:	b2d9      	uxtb	r1, r3
 8000cf4:	4a34      	ldr	r2, [pc, #208]	@ (8000dc8 <main+0x1b0>)
 8000cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	460a      	mov	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; i++) {
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d00:	3301      	adds	r3, #1
 8000d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	ddb4      	ble.n	8000c74 <main+0x5c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int i = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	482e      	ldr	r0, [pc, #184]	@ (8000dcc <main+0x1b4>)
 8000d12:	f000 fcbc 	bl	800168e <HAL_DAC_Start>
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000d16:	2110      	movs	r1, #16
 8000d18:	482c      	ldr	r0, [pc, #176]	@ (8000dcc <main+0x1b4>)
 8000d1a:	f000 fcb8 	bl	800168e <HAL_DAC_Start>

	  for (int j = 0; j < 3000; j++){
 8000d1e:	2300      	movs	r3, #0
 8000d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8000d22:	e02f      	b.n	8000d84 <main+0x16c>
		  dac_triangle = triangle_wave[i];
 8000d24:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <main+0x1a8>)
 8000d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  	  dac_sawtooth = sawtooth_wave[i];
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <main+0x1a4>)
 8000d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	  	  dac_sinusoid = sinusoid_wave[i];
 8000d3c:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <main+0x1b0>)
 8000d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	  	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, dac_sinusoid);
 8000d48:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	2100      	movs	r1, #0
 8000d50:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <main+0x1b4>)
 8000d52:	f000 fdd7 	bl	8001904 <HAL_DAC_SetValue>
	  	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, dac_triangle);
 8000d56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	481b      	ldr	r0, [pc, #108]	@ (8000dcc <main+0x1b4>)
 8000d60:	f000 fdd0 	bl	8001904 <HAL_DAC_SetValue>
	  	  // index for next value but mod 8 -> wrap around saw/tri wave arrays
	  	  i = (i + 1) % 8;
 8000d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d66:	3301      	adds	r3, #1
 8000d68:	425a      	negs	r2, r3
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	f002 0207 	and.w	r2, r2, #7
 8000d72:	bf58      	it	pl
 8000d74:	4253      	negpl	r3, r2
 8000d76:	64bb      	str	r3, [r7, #72]	@ 0x48
	  	  // to have 65Hz -> 15ms per period
	  	  // delay between each increment must be around 2ms
	  	  // because 8 data points for each period, and each period = 15ms
	  	  // -> 15/8 ~= 2ms
	  	  HAL_Delay(2);
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f000 fb31 	bl	80013e0 <HAL_Delay>
	  for (int j = 0; j < 3000; j++){
 8000d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d80:	3301      	adds	r3, #1
 8000d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8000d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d86:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	ddca      	ble.n	8000d24 <main+0x10c>
	  }
	  HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <main+0x1b4>)
 8000d92:	f000 fcce 	bl	8001732 <HAL_DAC_Stop>
	  HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
 8000d96:	2110      	movs	r1, #16
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <main+0x1b4>)
 8000d9a:	f000 fcca 	bl	8001732 <HAL_DAC_Stop>

	  int breakpoint = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	@ 0x40
  {
 8000da2:	e7b2      	b.n	8000d0a <main+0xf2>
 8000da4:	20000088 	.word	0x20000088
 8000da8:	20000260 	.word	0x20000260
 8000dac:	08004a08 	.word	0x08004a08
 8000db0:	08004a10 	.word	0x08004a10
 8000db4:	08004a18 	.word	0x08004a18
 8000db8:	92492493 	.word	0x92492493
 8000dbc:	20000094 	.word	0x20000094
 8000dc0:	2000008c 	.word	0x2000008c
 8000dc4:	42ff0000 	.word	0x42ff0000
 8000dc8:	2000009c 	.word	0x2000009c
 8000dcc:	20000028 	.word	0x20000028

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b096      	sub	sp, #88	@ 0x58
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2244      	movs	r2, #68	@ 0x44
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fdb4 	bl	800394c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000df2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000df6:	f001 fa23 	bl	8002240 <HAL_PWREx_ControlVoltageScaling>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e00:	f000 f970 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e04:	2310      	movs	r3, #16
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e10:	2360      	movs	r3, #96	@ 0x60
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e20:	2328      	movs	r3, #40	@ 0x28
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 faa7 	bl	8002388 <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e40:	f000 f950 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	230f      	movs	r3, #15
 8000e46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fead 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e68:	f000 f93c 	bl	80010e4 <Error_Handler>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3758      	adds	r7, #88	@ 0x58
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2228      	movs	r2, #40	@ 0x28
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fd63 	bl	800394c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <MX_DAC1_Init+0x60>)
 8000e88:	4a13      	ldr	r2, [pc, #76]	@ (8000ed8 <MX_DAC1_Init+0x64>)
 8000e8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e8c:	4811      	ldr	r0, [pc, #68]	@ (8000ed4 <MX_DAC1_Init+0x60>)
 8000e8e:	f000 fbdc 	bl	800164a <HAL_DAC_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e98:	f000 f924 	bl	80010e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_DAC1_Init+0x60>)
 8000ebe:	f000 fd65 	bl	800198c <HAL_DAC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000ec8:	f000 f90c 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	@ 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000028 	.word	0x20000028
 8000ed8:	40007400 	.word	0x40007400

08000edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000efc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f10:	f240 7216 	movw	r2, #1814	@ 0x716
 8000f14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f22:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f24:	f002 f8dc 	bl	80030e0 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f2e:	f000 f8d9 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f40:	f002 fa2c 	bl	800339c <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f4a:	f000 f8cb 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f5c:	f002 fc50 	bl	8003800 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f66:	f000 f8bd 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000003c 	.word	0x2000003c

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_GPIO_Init+0x7c>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <MX_GPIO_Init+0x7c>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <MX_GPIO_Init+0x7c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_GPIO_Init+0x7c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <MX_GPIO_Init+0x7c>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_GPIO_Init+0x7c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_GPIO_Init+0x80>)
 8000fd6:	f000 ff69 	bl	8001eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2028      	movs	r0, #40	@ 0x28
 8000fe0:	f000 fafd 	bl	80015de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe4:	2028      	movs	r0, #40	@ 0x28
 8000fe6:	f000 fb16 	bl	8001616 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000800 	.word	0x48000800

08000ffc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800100c:	d12b      	bne.n	8001066 <HAL_GPIO_EXTI_Callback+0x6a>
		switch (wave_index){
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x74>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d016      	beq.n	8001044 <HAL_GPIO_EXTI_Callback+0x48>
 8001016:	2b02      	cmp	r3, #2
 8001018:	dc1c      	bgt.n	8001054 <HAL_GPIO_EXTI_Callback+0x58>
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <HAL_GPIO_EXTI_Callback+0x28>
 800101e:	2b01      	cmp	r3, #1
 8001020:	d008      	beq.n	8001034 <HAL_GPIO_EXTI_Callback+0x38>
 8001022:	e017      	b.n	8001054 <HAL_GPIO_EXTI_Callback+0x58>
            case 0:
                generate_sine_wave(C6);  // Generate sine wave for C6
 8001024:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001074 <HAL_GPIO_EXTI_Callback+0x78>
 8001028:	f7ff fd8a 	bl	8000b40 <generate_sine_wave>
                wave_index = 1;
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x74>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
                break;
 8001032:	e00f      	b.n	8001054 <HAL_GPIO_EXTI_Callback+0x58>
            case 1:
                generate_sine_wave(E6);  // Generate sine wave for E6
 8001034:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001078 <HAL_GPIO_EXTI_Callback+0x7c>
 8001038:	f7ff fd82 	bl	8000b40 <generate_sine_wave>
                wave_index = 2;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x74>)
 800103e:	2202      	movs	r2, #2
 8001040:	701a      	strb	r2, [r3, #0]
                break;
 8001042:	e007      	b.n	8001054 <HAL_GPIO_EXTI_Callback+0x58>
            case 2:
                generate_sine_wave(G6);  // Generate sine wave for G6
 8001044:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800107c <HAL_GPIO_EXTI_Callback+0x80>
 8001048:	f7ff fd7a 	bl	8000b40 <generate_sine_wave>
                wave_index = 0;
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
                break;
 8001052:	bf00      	nop
	}
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sine_wave, SIN_SAMPLES, DAC_ALIGN_8B_R);
 8001054:	2308      	movs	r3, #8
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	f240 13b9 	movw	r3, #441	@ 0x1b9
 800105c:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <HAL_GPIO_EXTI_Callback+0x84>)
 800105e:	2100      	movs	r1, #0
 8001060:	4808      	ldr	r0, [pc, #32]	@ (8001084 <HAL_GPIO_EXTI_Callback+0x88>)
 8001062:	f000 fb83 	bl	800176c <HAL_DAC_Start_DMA>


	}
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000088 	.word	0x20000088
 8001074:	4482d000 	.word	0x4482d000
 8001078:	44a4d052 	.word	0x44a4d052
 800107c:	44c3ff5c 	.word	0x44c3ff5c
 8001080:	200000a4 	.word	0x200000a4
 8001084:	20000028 	.word	0x20000028

08001088 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001098:	d117      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x42>
    {
        // Assuming sine_wave is an array of DAC values
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sine_wave[TIMindex]);
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	2208      	movs	r2, #8
 80010a4:	2100      	movs	r1, #0
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010a8:	f000 fc2c 	bl	8001904 <HAL_DAC_SetValue>
        TIMindex = (TIMindex + 1) % (SIN_SAMPLES);
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	1c59      	adds	r1, r3, #1
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010b4:	fba3 2301 	umull	r2, r3, r3, r1
 80010b8:	09da      	lsrs	r2, r3, #7
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	019a      	lsls	r2, r3, #6
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	1a8a      	subs	r2, r1, r2
 80010c6:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80010c8:	601a      	str	r2, [r3, #0]
    }
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000260 	.word	0x20000260
 80010d8:	200000a4 	.word	0x200000a4
 80010dc:	20000028 	.word	0x20000028
 80010e0:	4a4dc96f 	.word	0x4a4dc96f

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_MspInit+0x44>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <HAL_MspInit+0x44>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6613      	str	r3, [r2, #96]	@ 0x60
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <HAL_MspInit+0x44>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_MspInit+0x44>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_MspInit+0x44>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001118:	6593      	str	r3, [r2, #88]	@ 0x58
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_MspInit+0x44>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <HAL_DAC_MspInit+0x74>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d124      	bne.n	80011a4 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_DAC_MspInit+0x78>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_DAC_MspInit+0x78>)
 8001160:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001164:	6593      	str	r3, [r2, #88]	@ 0x58
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_DAC_MspInit+0x78>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_DAC_MspInit+0x78>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <HAL_DAC_MspInit+0x78>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_DAC_MspInit+0x78>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800118a:	2310      	movs	r3, #16
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a0:	f000 fe84 	bl	8001eac <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	@ 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40007400 	.word	0x40007400
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c4:	d113      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_TIM_Base_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_TIM_Base_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	201c      	movs	r0, #28
 80011e4:	f000 f9fb 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e8:	201c      	movs	r0, #28
 80011ea:	f000 fa14 	bl	8001616 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <NMI_Handler+0x4>

08001204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <UsageFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f8a5 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <TIM2_IRQHandler+0x10>)
 8001262:	f001 ff94 	bl	800318e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000003c 	.word	0x2000003c

08001270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001274:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001278:	f000 ffaa 	bl	80021d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a8:	f7ff ffea 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	@ (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	@ (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f002 fb43 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d6:	f7ff fc9f 	bl	8000c18 <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012dc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012e8:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 80012ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012f0:	20000268 	.word	0x20000268

080012f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_IRQHandler>

080012f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f961 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f80e 	bl	8001328 <HAL_InitTick>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	e001      	b.n	800131c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001318:	f7ff feea 	bl	80010f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800131c:	79fb      	ldrb	r3, [r7, #7]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_InitTick+0x6c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d023      	beq.n	8001384 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <HAL_InitTick+0x70>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_InitTick+0x6c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f96d 	bl	8001632 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d809      	bhi.n	8001378 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800136c:	f000 f937 	bl	80015de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001370:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <HAL_InitTick+0x74>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e007      	b.n	8001388 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e004      	b.n	8001388 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e001      	b.n	8001388 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000264 	.word	0x20000264

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000264 	.word	0x20000264

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff ffee 	bl	80013c8 <HAL_GetTick>
 80013ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013f8:	d005      	beq.n	8001406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_Delay+0x44>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001406:	bf00      	nop
 8001408:	f7ff ffde 	bl	80013c8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <HAL_Delay+0x28>
  {
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	@ (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	@ (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	@ (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	@ 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	@ 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff3e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff31 	bl	800148c <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e014      	b.n	8001686 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	791b      	ldrb	r3, [r3, #4]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd63 	bl	8001138 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2202      	movs	r2, #2
 8001676:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	795b      	ldrb	r3, [r3, #5]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_DAC_Start+0x16>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e040      	b.n	8001726 <HAL_DAC_Start+0x98>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2201      	movs	r2, #1
 80016be:	409a      	lsls	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10f      	bne.n	80016ee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d11d      	bne.n	8001718 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	e014      	b.n	8001718 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2102      	movs	r1, #2
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0202 	orr.w	r2, r2, #2
 8001716:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2201      	movs	r2, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	795b      	ldrb	r3, [r3, #5]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_DAC_Start_DMA+0x1e>
 8001786:	2302      	movs	r3, #2
 8001788:	e0ab      	b.n	80018e2 <HAL_DAC_Start_DMA+0x176>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2202      	movs	r2, #2
 8001794:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d12f      	bne.n	80017fc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_DAC_Start_DMA+0x180>)
 80017a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a51      	ldr	r2, [pc, #324]	@ (80018f0 <HAL_DAC_Start_DMA+0x184>)
 80017aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a50      	ldr	r2, [pc, #320]	@ (80018f4 <HAL_DAC_Start_DMA+0x188>)
 80017b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017c2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d013      	beq.n	80017f2 <HAL_DAC_Start_DMA+0x86>
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d845      	bhi.n	800185c <HAL_DAC_Start_DMA+0xf0>
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_DAC_Start_DMA+0x72>
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d005      	beq.n	80017e8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80017dc:	e03e      	b.n	800185c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3308      	adds	r3, #8
 80017e4:	613b      	str	r3, [r7, #16]
        break;
 80017e6:	e03c      	b.n	8001862 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	330c      	adds	r3, #12
 80017ee:	613b      	str	r3, [r7, #16]
        break;
 80017f0:	e037      	b.n	8001862 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3310      	adds	r3, #16
 80017f8:	613b      	str	r3, [r7, #16]
        break;
 80017fa:	e032      	b.n	8001862 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a3d      	ldr	r2, [pc, #244]	@ (80018f8 <HAL_DAC_Start_DMA+0x18c>)
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a3c      	ldr	r2, [pc, #240]	@ (80018fc <HAL_DAC_Start_DMA+0x190>)
 800180a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a3b      	ldr	r2, [pc, #236]	@ (8001900 <HAL_DAC_Start_DMA+0x194>)
 8001812:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001822:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d013      	beq.n	8001852 <HAL_DAC_Start_DMA+0xe6>
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d817      	bhi.n	8001860 <HAL_DAC_Start_DMA+0xf4>
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_DAC_Start_DMA+0xd2>
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d005      	beq.n	8001848 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800183c:	e010      	b.n	8001860 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3314      	adds	r3, #20
 8001844:	613b      	str	r3, [r7, #16]
        break;
 8001846:	e00c      	b.n	8001862 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3318      	adds	r3, #24
 800184e:	613b      	str	r3, [r7, #16]
        break;
 8001850:	e007      	b.n	8001862 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	331c      	adds	r3, #28
 8001858:	613b      	str	r3, [r7, #16]
        break;
 800185a:	e002      	b.n	8001862 <HAL_DAC_Start_DMA+0xf6>
        break;
 800185c:	bf00      	nop
 800185e:	e000      	b.n	8001862 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001860:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001876:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6898      	ldr	r0, [r3, #8]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	f000 fa59 	bl	8001d38 <HAL_DMA_Start_IT>
 8001886:	4603      	mov	r3, r0
 8001888:	75fb      	strb	r3, [r7, #23]
 800188a:	e010      	b.n	80018ae <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800189a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	68d8      	ldr	r0, [r3, #12]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	f000 fa47 	bl	8001d38 <HAL_DMA_Start_IT>
 80018aa:	4603      	mov	r3, r0
 80018ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10c      	bne.n	80018d4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6819      	ldr	r1, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2201      	movs	r2, #1
 80018c8:	409a      	lsls	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e005      	b.n	80018e0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f043 0204 	orr.w	r2, r3, #4
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	08001c25 	.word	0x08001c25
 80018f0:	08001c47 	.word	0x08001c47
 80018f4:	08001c63 	.word	0x08001c63
 80018f8:	08001ccd 	.word	0x08001ccd
 80018fc:	08001cef 	.word	0x08001cef
 8001900:	08001d0b 	.word	0x08001d0b

08001904 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d105      	bne.n	800192e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	3308      	adds	r3, #8
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e004      	b.n	8001938 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	3314      	adds	r3, #20
 8001936:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	461a      	mov	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	795b      	ldrb	r3, [r3, #5]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_DAC_ConfigChannel+0x1c>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e137      	b.n	8001c18 <HAL_DAC_ConfigChannel+0x28c>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2202      	movs	r2, #2
 80019b2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	f040 8081 	bne.w	8001ac0 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80019be:	f7ff fd03 	bl	80013c8 <HAL_GetTick>
 80019c2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d140      	bne.n	8001a4c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80019ca:	e018      	b.n	80019fe <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019cc:	f7ff fcfc 	bl	80013c8 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d911      	bls.n	80019fe <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f043 0208 	orr.w	r2, r3, #8
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2203      	movs	r2, #3
 80019f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e10c      	b.n	8001c18 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1df      	bne.n	80019cc <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff fce7 	bl	80013e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	69d2      	ldr	r2, [r2, #28]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a1c:	e023      	b.n	8001a66 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a1e:	f7ff fcd3 	bl	80013c8 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d90f      	bls.n	8001a4c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da0a      	bge.n	8001a4c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f043 0208 	orr.w	r2, r3, #8
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2203      	movs	r2, #3
 8001a46:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0e5      	b.n	8001c18 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dbe3      	blt.n	8001a1e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fcc2 	bl	80013e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	69d2      	ldr	r2, [r2, #28]
 8001a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	ea02 0103 	and.w	r1, r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	21ff      	movs	r1, #255	@ 0xff
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	ea02 0103 	and.w	r1, r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d11d      	bne.n	8001b04 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ace:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	221f      	movs	r2, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2207      	movs	r2, #7
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43da      	mvns	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	400a      	ands	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ba8:	d104      	bne.n	8001bb4 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e018      	b.n	8001be6 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	e00f      	b.n	8001be6 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001bc6:	f001 f9bf 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8001bca:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4a14      	ldr	r2, [pc, #80]	@ (8001c20 <HAL_DAC_ConfigChannel+0x294>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d904      	bls.n	8001bde <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	e003      	b.n	8001be6 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001be4:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	22c0      	movs	r2, #192	@ 0xc0
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43da      	mvns	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	400a      	ands	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	04c4b400 	.word	0x04c4b400

08001c24 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fe8b 	bl	800194e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	711a      	strb	r2, [r3, #4]
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fe84 	bl	8001962 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fe7a 	bl	8001976 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	711a      	strb	r2, [r3, #4]
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff ffd8 	bl	8001c90 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	711a      	strb	r2, [r3, #4]
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff ffd1 	bl	8001ca4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f043 0204 	orr.w	r2, r3, #4
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff ffc7 	bl	8001cb8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	711a      	strb	r2, [r3, #4]
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Start_IT+0x20>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e066      	b.n	8001e26 <HAL_DMA_Start_IT+0xee>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d155      	bne.n	8001e18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f84c 	bl	8001e2e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 020e 	orr.w	r2, r2, #14
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e00f      	b.n	8001dd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 020a 	orr.w	r2, r2, #10
 8001dce:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e04:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e005      	b.n	8001e24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e20:	2302      	movs	r3, #2
 8001e22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e44:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e56:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5c:	f003 021c 	and.w	r2, r3, #28
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b10      	cmp	r3, #16
 8001e7a:	d108      	bne.n	8001e8e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e8c:	e007      	b.n	8001e9e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	60da      	str	r2, [r3, #12]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eba:	e166      	b.n	800218a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8158 	beq.w	8002184 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d005      	beq.n	8001eec <HAL_GPIO_Init+0x40>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d017      	beq.n	8001f8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d123      	bne.n	8001fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	6939      	ldr	r1, [r7, #16]
 8001fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0203 	and.w	r2, r3, #3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80b2 	beq.w	8002184 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002020:	4b61      	ldr	r3, [pc, #388]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002024:	4a60      	ldr	r2, [pc, #384]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6613      	str	r3, [r2, #96]	@ 0x60
 800202c:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002038:	4a5c      	ldr	r2, [pc, #368]	@ (80021ac <HAL_GPIO_Init+0x300>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002062:	d02b      	beq.n	80020bc <HAL_GPIO_Init+0x210>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d025      	beq.n	80020b8 <HAL_GPIO_Init+0x20c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a51      	ldr	r2, [pc, #324]	@ (80021b4 <HAL_GPIO_Init+0x308>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_Init+0x208>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a50      	ldr	r2, [pc, #320]	@ (80021b8 <HAL_GPIO_Init+0x30c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x204>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4f      	ldr	r2, [pc, #316]	@ (80021bc <HAL_GPIO_Init+0x310>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x200>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4e      	ldr	r2, [pc, #312]	@ (80021c0 <HAL_GPIO_Init+0x314>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1fc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a4d      	ldr	r2, [pc, #308]	@ (80021c4 <HAL_GPIO_Init+0x318>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1f8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <HAL_GPIO_Init+0x31c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1f4>
 800209c:	2307      	movs	r3, #7
 800209e:	e00e      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a0:	2308      	movs	r3, #8
 80020a2:	e00c      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a4:	2306      	movs	r3, #6
 80020a6:	e00a      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a8:	2305      	movs	r3, #5
 80020aa:	e008      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e006      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e004      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020bc:	2300      	movs	r3, #0
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ce:	4937      	ldr	r1, [pc, #220]	@ (80021ac <HAL_GPIO_Init+0x300>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020dc:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_GPIO_Init+0x320>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002100:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002106:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800212a:	4a28      	ldr	r2, [pc, #160]	@ (80021cc <HAL_GPIO_Init+0x320>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002130:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_GPIO_Init+0x320>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800217e:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f ae91 	bne.w	8001ebc <HAL_GPIO_Init+0x10>
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48001000 	.word	0x48001000
 80021c0:	48001400 	.word	0x48001400
 80021c4:	48001800 	.word	0x48001800
 80021c8:	48001c00 	.word	0x48001c00
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe ff04 	bl	8000ffc <HAL_GPIO_EXTI_Callback>
  }
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40010400 	.word	0x40010400

08002200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002210:	d102      	bne.n	8002218 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002216:	e00b      	b.n	8002230 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_PWREx_GetVoltageRange+0x3c>)
 800221a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002226:	d102      	bne.n	800222e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800222c:	e000      	b.n	8002230 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800222e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d141      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800224e:	4b4b      	ldr	r3, [pc, #300]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225a:	d131      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800225c:	4b47      	ldr	r3, [pc, #284]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002262:	4a46      	ldr	r2, [pc, #280]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800226c:	4b43      	ldr	r3, [pc, #268]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002274:	4a41      	ldr	r2, [pc, #260]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800227c:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2232      	movs	r2, #50	@ 0x32
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	0c9b      	lsrs	r3, r3, #18
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002292:	e002      	b.n	800229a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3b01      	subs	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	d102      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f2      	bne.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ae:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ba:	d158      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e057      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c0:	4b2e      	ldr	r3, [pc, #184]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022c6:	4a2d      	ldr	r2, [pc, #180]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022d0:	e04d      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d8:	d141      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022da:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e6:	d131      	bne.n	800234c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e8:	4b24      	ldr	r3, [pc, #144]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ee:	4a23      	ldr	r2, [pc, #140]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f8:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002300:	4a1e      	ldr	r2, [pc, #120]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2232      	movs	r2, #50	@ 0x32
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a1c      	ldr	r2, [pc, #112]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	3301      	adds	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800231e:	e002      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002332:	d102      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f2      	bne.n	8002320 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002346:	d112      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e011      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800235c:	e007      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800235e:	4b07      	ldr	r3, [pc, #28]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002366:	4a05      	ldr	r2, [pc, #20]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40007000 	.word	0x40007000
 8002380:	20000000 	.word	0x20000000
 8002384:	431bde83 	.word	0x431bde83

08002388 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f000 bc08 	b.w	8002bac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239c:	4b96      	ldr	r3, [pc, #600]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a6:	4b94      	ldr	r3, [pc, #592]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80e4 	beq.w	8002586 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4c>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	f040 808b 	bne.w	80024e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	f040 8087 	bne.w	80024e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d4:	4b88      	ldr	r3, [pc, #544]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x64>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e3df      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	4b81      	ldr	r3, [pc, #516]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_RCC_OscConfig+0x7e>
 80023fc:	4b7e      	ldr	r3, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002404:	e005      	b.n	8002412 <HAL_RCC_OscConfig+0x8a>
 8002406:	4b7c      	ldr	r3, [pc, #496]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002412:	4293      	cmp	r3, r2
 8002414:	d223      	bcs.n	800245e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fda0 	bl	8002f60 <RCC_SetFlashLatencyFromMSIRange>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e3c0      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242a:	4b73      	ldr	r3, [pc, #460]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a72      	ldr	r2, [pc, #456]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b70      	ldr	r3, [pc, #448]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	496d      	ldr	r1, [pc, #436]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002448:	4b6b      	ldr	r3, [pc, #428]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4968      	ldr	r1, [pc, #416]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
 800245c:	e025      	b.n	80024aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245e:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4960      	ldr	r1, [pc, #384]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247c:	4b5e      	ldr	r3, [pc, #376]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	495b      	ldr	r1, [pc, #364]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd60 	bl	8002f60 <RCC_SetFlashLatencyFromMSIRange>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e380      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024aa:	f000 fcc1 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b51      	ldr	r3, [pc, #324]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	4950      	ldr	r1, [pc, #320]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a4e      	ldr	r2, [pc, #312]	@ (8002600 <HAL_RCC_OscConfig+0x278>)
 80024c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002604 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff2a 	bl	8001328 <HAL_InitTick>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d052      	beq.n	8002584 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	e364      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d032      	beq.n	8002550 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ea:	4b43      	ldr	r3, [pc, #268]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a42      	ldr	r2, [pc, #264]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f6:	f7fe ff67 	bl	80013c8 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024fe:	f7fe ff63 	bl	80013c8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e34d      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002510:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251c:	4b36      	ldr	r3, [pc, #216]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a35      	ldr	r2, [pc, #212]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4930      	ldr	r1, [pc, #192]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253a:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	492b      	ldr	r1, [pc, #172]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	e01a      	b.n	8002586 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002550:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a28      	ldr	r2, [pc, #160]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800255c:	f7fe ff34 	bl	80013c8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002564:	f7fe ff30 	bl	80013c8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e31a      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1dc>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d073      	beq.n	800267a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x21c>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d10e      	bne.n	80025bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d10b      	bne.n	80025bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d063      	beq.n	8002678 <HAL_RCC_OscConfig+0x2f0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d15f      	bne.n	8002678 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e2f7      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x24c>
 80025c6:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a0b      	ldr	r2, [pc, #44]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e025      	b.n	8002620 <HAL_RCC_OscConfig+0x298>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025dc:	d114      	bne.n	8002608 <HAL_RCC_OscConfig+0x280>
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a02      	ldr	r2, [pc, #8]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e013      	b.n	8002620 <HAL_RCC_OscConfig+0x298>
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08004a38 	.word	0x08004a38
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004
 8002608:	4ba0      	ldr	r3, [pc, #640]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a9f      	ldr	r2, [pc, #636]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b9d      	ldr	r3, [pc, #628]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a9c      	ldr	r2, [pc, #624]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fece 	bl	80013c8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe feca 	bl	80013c8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	@ 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e2b4      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002642:	4b92      	ldr	r3, [pc, #584]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x2a8>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe feba 	bl	80013c8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe feb6 	bl	80013c8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	@ 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e2a0      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266a:	4b88      	ldr	r3, [pc, #544]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x2d0>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d060      	beq.n	8002748 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d005      	beq.n	8002698 <HAL_RCC_OscConfig+0x310>
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002698:	4b7c      	ldr	r3, [pc, #496]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x328>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e27d      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b76      	ldr	r3, [pc, #472]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4973      	ldr	r1, [pc, #460]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c4:	e040      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d023      	beq.n	8002716 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ce:	4b6f      	ldr	r3, [pc, #444]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6e      	ldr	r2, [pc, #440]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fe75 	bl	80013c8 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fe71 	bl	80013c8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e25b      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f4:	4b65      	ldr	r3, [pc, #404]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b62      	ldr	r3, [pc, #392]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	495f      	ldr	r1, [pc, #380]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	e018      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b5d      	ldr	r3, [pc, #372]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5c      	ldr	r2, [pc, #368]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800271c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fe51 	bl	80013c8 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272a:	f7fe fe4d 	bl	80013c8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e237      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273c:	4b53      	ldr	r3, [pc, #332]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03c      	beq.n	80027ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275c:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002762:	4a4a      	ldr	r2, [pc, #296]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fe2c 	bl	80013c8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7fe fe28 	bl	80013c8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e212      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002786:	4b41      	ldr	r3, [pc, #260]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCC_OscConfig+0x3ec>
 8002794:	e01b      	b.n	80027ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002796:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279c:	4a3b      	ldr	r2, [pc, #236]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fe0f 	bl	80013c8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fe fe0b 	bl	80013c8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1f5      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a6 	beq.w	8002928 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027e0:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b27      	ldr	r3, [pc, #156]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	4a26      	ldr	r2, [pc, #152]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002804:	2301      	movs	r3, #1
 8002806:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d118      	bne.n	8002846 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002820:	f7fe fdd2 	bl	80013c8 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe fdce 	bl	80013c8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1b8      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x4d8>
 800284e:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800285e:	e029      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d115      	bne.n	8002894 <HAL_RCC_OscConfig+0x50c>
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002878:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	4a03      	ldr	r2, [pc, #12]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	4b9d      	ldr	r3, [pc, #628]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289a:	4a9c      	ldr	r2, [pc, #624]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a4:	4b99      	ldr	r3, [pc, #612]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	4a98      	ldr	r2, [pc, #608]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d016      	beq.n	80028ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fd84 	bl	80013c8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fd80 	bl	80013c8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e168      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	4b8c      	ldr	r3, [pc, #560]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ed      	beq.n	80028c4 <HAL_RCC_OscConfig+0x53c>
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fd6d 	bl	80013c8 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe fd69 	bl	80013c8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e151      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	4b80      	ldr	r3, [pc, #512]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ed      	bne.n	80028f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	4a7a      	ldr	r2, [pc, #488]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03c      	beq.n	80029ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800293c:	4b73      	ldr	r3, [pc, #460]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800293e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002942:	4a72      	ldr	r2, [pc, #456]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fd3c 	bl	80013c8 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002954:	f7fe fd38 	bl	80013c8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e122      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002966:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCC_OscConfig+0x5cc>
 8002974:	e01b      	b.n	80029ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002976:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800297c:	4a63      	ldr	r2, [pc, #396]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe fd1f 	bl	80013c8 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298e:	f7fe fd1b 	bl	80013c8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e105      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029a0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80029a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ef      	bne.n	800298e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80f9 	beq.w	8002baa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	2b02      	cmp	r3, #2
 80029be:	f040 80cf 	bne.w	8002b60 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029c2:	4b52      	ldr	r3, [pc, #328]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0203 	and.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d12c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	3b01      	subs	r3, #1
 80029e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d123      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d11b      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d113      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d109      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d071      	beq.n	8002b14 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d068      	beq.n	8002b08 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a36:	4b35      	ldr	r3, [pc, #212]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a42:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0ac      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a52:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2d      	ldr	r2, [pc, #180]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a5e:	f7fe fcb3 	bl	80013c8 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe fcaf 	bl	80013c8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e099      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a78:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <HAL_RCC_OscConfig+0x788>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	4311      	orrs	r1, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a9e:	0212      	lsls	r2, r2, #8
 8002aa0:	4311      	orrs	r1, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002aa6:	0852      	lsrs	r2, r2, #1
 8002aa8:	3a01      	subs	r2, #1
 8002aaa:	0552      	lsls	r2, r2, #21
 8002aac:	4311      	orrs	r1, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ab2:	0852      	lsrs	r2, r2, #1
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	0652      	lsls	r2, r2, #25
 8002ab8:	4311      	orrs	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002abe:	06d2      	lsls	r2, r2, #27
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	4912      	ldr	r1, [pc, #72]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ac8:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae0:	f7fe fc72 	bl	80013c8 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fc6e 	bl	80013c8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e058      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afa:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b06:	e050      	b.n	8002baa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e04f      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d144      	bne.n	8002baa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b2c:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a20      	ldr	r2, [pc, #128]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b38:	f7fe fc46 	bl	80013c8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fc42 	bl	80013c8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e02c      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x7b8>
 8002b5e:	e024      	b.n	8002baa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d01f      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fc29 	bl	80013c8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fc25 	bl	80013c8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e00f      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	4905      	ldr	r1, [pc, #20]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_RCC_OscConfig+0x830>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
 8002ba4:	e001      	b.n	8002baa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	feeefffc 	.word	0xfeeefffc

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e11d      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b90      	ldr	r3, [pc, #576]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	498b      	ldr	r1, [pc, #556]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b89      	ldr	r3, [pc, #548]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e105      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4b81      	ldr	r3, [pc, #516]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d908      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b7e      	ldr	r3, [pc, #504]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	497b      	ldr	r1, [pc, #492]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d079      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d11e      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	4b75      	ldr	r3, [pc, #468]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0dc      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c56:	f000 f9dd 	bl	8003014 <RCC_GetSysClockFreqFromPLLSource>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a70      	ldr	r2, [pc, #448]	@ (8002e20 <HAL_RCC_ClockConfig+0x264>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d946      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c62:	4b6e      	ldr	r3, [pc, #440]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d140      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c6e:	4b6b      	ldr	r3, [pc, #428]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c76:	4a69      	ldr	r2, [pc, #420]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e035      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8c:	4b63      	ldr	r3, [pc, #396]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d115      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b9      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0ad      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb4:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0a5      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002cc4:	f000 f8b4 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4a55      	ldr	r2, [pc, #340]	@ (8002e20 <HAL_RCC_ClockConfig+0x264>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d90f      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cd0:	4b52      	ldr	r3, [pc, #328]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 0203 	bic.w	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4947      	ldr	r1, [pc, #284]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d02:	f7fe fb61 	bl	80013c8 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0a:	f7fe fb5d 	bl	80013c8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e077      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d20:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 020c 	and.w	r2, r3, #12
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d1eb      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b80      	cmp	r3, #128	@ 0x80
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d38:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a37      	ldr	r2, [pc, #220]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d42:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d208      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b2e      	ldr	r3, [pc, #184]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	492b      	ldr	r1, [pc, #172]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d72:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d210      	bcs.n	8002da2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 020f 	bic.w	r2, r3, #15
 8002d88:	4923      	ldr	r1, [pc, #140]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d90:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e036      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dae:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	4918      	ldr	r1, [pc, #96]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4910      	ldr	r1, [pc, #64]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002de0:	f000 f826 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	490c      	ldr	r1, [pc, #48]	@ (8002e24 <HAL_RCC_ClockConfig+0x268>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e28 <HAL_RCC_ClockConfig+0x26c>)
 8002dfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_RCC_ClockConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fa8f 	bl	8001328 <HAL_InitTick>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	04c4b400 	.word	0x04c4b400
 8002e24:	08004a38 	.word	0x08004a38
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	@ 0x24
 8002e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e48:	4b3b      	ldr	r3, [pc, #236]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d11e      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e64:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e70:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e005      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ea8:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	e004      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d134      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d003      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0xac>
 8002ed4:	e005      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ed8:	617b      	str	r3, [r7, #20]
      break;
 8002eda:	e005      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ede:	617b      	str	r3, [r7, #20]
      break;
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	617b      	str	r3, [r7, #20]
      break;
 8002ee6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	fb03 f202 	mul.w	r2, r3, r2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	0e5b      	lsrs	r3, r3, #25
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f28:	69bb      	ldr	r3, [r7, #24]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	@ 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08004a48 	.word	0x08004a48
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f6c:	4b27      	ldr	r3, [pc, #156]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f78:	f7ff f942 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002f7c:	6178      	str	r0, [r7, #20]
 8002f7e:	e014      	b.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b22      	ldr	r3, [pc, #136]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	4a21      	ldr	r2, [pc, #132]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f98:	f7ff f932 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d10b      	bne.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b80      	cmp	r3, #128	@ 0x80
 8002fb6:	d913      	bls.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fbc:	d902      	bls.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e00d      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e00a      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fce:	d902      	bls.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e004      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b70      	cmp	r3, #112	@ 0x70
 8002fda:	d101      	bne.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 020f 	bic.w	r2, r3, #15
 8002fe8:	4909      	ldr	r1, [pc, #36]	@ (8003010 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ff0:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	40022000 	.word	0x40022000

08003014 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800301a:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d00b      	beq.n	8003042 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d825      	bhi.n	800307c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d008      	beq.n	8003048 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d11f      	bne.n	800307c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800303c:	4b25      	ldr	r3, [pc, #148]	@ (80030d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800303e:	613b      	str	r3, [r7, #16]
    break;
 8003040:	e01f      	b.n	8003082 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003042:	4b25      	ldr	r3, [pc, #148]	@ (80030d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003044:	613b      	str	r3, [r7, #16]
    break;
 8003046:	e01c      	b.n	8003082 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003048:	4b21      	ldr	r3, [pc, #132]	@ (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003054:	4b1e      	ldr	r3, [pc, #120]	@ (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e005      	b.n	8003070 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003064:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003070:	4a1a      	ldr	r2, [pc, #104]	@ (80030dc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	613b      	str	r3, [r7, #16]
    break;
 800307a:	e002      	b.n	8003082 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]
    break;
 8003080:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	3301      	adds	r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003090:	4b0f      	ldr	r3, [pc, #60]	@ (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	fb03 f202 	mul.w	r2, r3, r2
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0e5b      	lsrs	r3, r3, #25
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	3301      	adds	r3, #1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030c2:	683b      	ldr	r3, [r7, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40021000 	.word	0x40021000
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	08004a48 	.word	0x08004a48

080030e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e049      	b.n	8003186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe f854 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f000 fa2e 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01b      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0202 	mvn.w	r2, #2
 80031c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f9b2 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 80031de:	e005      	b.n	80031ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f9a4 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9b5 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01b      	beq.n	800323e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0204 	mvn.w	r2, #4
 800320e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f98c 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 800322a:	e005      	b.n	8003238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f97e 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f98f 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01b      	beq.n	800328a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0208 	mvn.w	r2, #8
 800325a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2204      	movs	r2, #4
 8003260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f966 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003276:	e005      	b.n	8003284 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f958 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f969 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01b      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f06f 0210 	mvn.w	r2, #16
 80032a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2208      	movs	r2, #8
 80032ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f940 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 80032c2:	e005      	b.n	80032d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f932 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f943 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0201 	mvn.w	r2, #1
 80032f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fd fec7 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fafe 	bl	8003924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 faf6 	bl	8003938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8fd 	bl	800356a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0220 	mvn.w	r2, #32
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fabe 	bl	8003910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIM_ConfigClockSource+0x1c>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e0b6      	b.n	8003526 <HAL_TIM_ConfigClockSource+0x18a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f4:	d03e      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0xd8>
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033fa:	f200 8087 	bhi.w	800350c <HAL_TIM_ConfigClockSource+0x170>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003402:	f000 8086 	beq.w	8003512 <HAL_TIM_ConfigClockSource+0x176>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800340a:	d87f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800340c:	2b70      	cmp	r3, #112	@ 0x70
 800340e:	d01a      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0xaa>
 8003410:	2b70      	cmp	r3, #112	@ 0x70
 8003412:	d87b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 8003414:	2b60      	cmp	r3, #96	@ 0x60
 8003416:	d050      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x11e>
 8003418:	2b60      	cmp	r3, #96	@ 0x60
 800341a:	d877      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800341c:	2b50      	cmp	r3, #80	@ 0x50
 800341e:	d03c      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xfe>
 8003420:	2b50      	cmp	r3, #80	@ 0x50
 8003422:	d873      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 8003424:	2b40      	cmp	r3, #64	@ 0x40
 8003426:	d058      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x13e>
 8003428:	2b40      	cmp	r3, #64	@ 0x40
 800342a:	d86f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800342c:	2b30      	cmp	r3, #48	@ 0x30
 800342e:	d064      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003430:	2b30      	cmp	r3, #48	@ 0x30
 8003432:	d86b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d060      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d867      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05c      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d05a      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003444:	e062      	b.n	800350c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003456:	f000 f9b3 	bl	80037c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
      break;
 8003472:	e04f      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003484:	f000 f99c 	bl	80037c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003496:	609a      	str	r2, [r3, #8]
      break;
 8003498:	e03c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 f910 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2150      	movs	r1, #80	@ 0x50
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f969 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 80034b8:	e02c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 f92f 	bl	800372a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2160      	movs	r1, #96	@ 0x60
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f959 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 80034d8:	e01c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 f8f0 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2140      	movs	r1, #64	@ 0x40
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f949 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 80034f8:	e00c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f000 f940 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 800350a:	e003      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e000      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a46      	ldr	r2, [pc, #280]	@ (80036ac <TIM_Base_SetConfig+0x12c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a43      	ldr	r2, [pc, #268]	@ (80036b0 <TIM_Base_SetConfig+0x130>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a42      	ldr	r2, [pc, #264]	@ (80036b4 <TIM_Base_SetConfig+0x134>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a41      	ldr	r2, [pc, #260]	@ (80036b8 <TIM_Base_SetConfig+0x138>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a40      	ldr	r2, [pc, #256]	@ (80036bc <TIM_Base_SetConfig+0x13c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a35      	ldr	r2, [pc, #212]	@ (80036ac <TIM_Base_SetConfig+0x12c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01f      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d01b      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a32      	ldr	r2, [pc, #200]	@ (80036b0 <TIM_Base_SetConfig+0x130>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d017      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <TIM_Base_SetConfig+0x134>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a30      	ldr	r2, [pc, #192]	@ (80036b8 <TIM_Base_SetConfig+0x138>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00f      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2f      	ldr	r2, [pc, #188]	@ (80036bc <TIM_Base_SetConfig+0x13c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2e      	ldr	r2, [pc, #184]	@ (80036c0 <TIM_Base_SetConfig+0x140>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2d      	ldr	r2, [pc, #180]	@ (80036c4 <TIM_Base_SetConfig+0x144>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <TIM_Base_SetConfig+0x148>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <TIM_Base_SetConfig+0x12c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <TIM_Base_SetConfig+0xf8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <TIM_Base_SetConfig+0x13c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_Base_SetConfig+0xf8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a17      	ldr	r2, [pc, #92]	@ (80036c0 <TIM_Base_SetConfig+0x140>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_Base_SetConfig+0xf8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a16      	ldr	r2, [pc, #88]	@ (80036c4 <TIM_Base_SetConfig+0x144>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_Base_SetConfig+0xf8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <TIM_Base_SetConfig+0x148>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f023 0201 	bic.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	611a      	str	r2, [r3, #16]
  }
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40013400 	.word	0x40013400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800

080036cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 030a 	bic.w	r3, r3, #10
 8003708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 0210 	bic.w	r2, r3, #16
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003766:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f043 0307 	orr.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	021a      	lsls	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003814:	2302      	movs	r3, #2
 8003816:	e068      	b.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2e      	ldr	r2, [pc, #184]	@ (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1e      	ldr	r2, [pc, #120]	@ (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388a:	d018      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1b      	ldr	r2, [pc, #108]	@ (8003900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1a      	ldr	r2, [pc, #104]	@ (8003904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a14      	ldr	r2, [pc, #80]	@ (800390c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10c      	bne.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40013400 	.word	0x40013400
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40000c00 	.word	0x40000c00
 800390c:	40014000 	.word	0x40014000

08003910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <memset>:
 800394c:	4402      	add	r2, r0
 800394e:	4603      	mov	r3, r0
 8003950:	4293      	cmp	r3, r2
 8003952:	d100      	bne.n	8003956 <memset+0xa>
 8003954:	4770      	bx	lr
 8003956:	f803 1b01 	strb.w	r1, [r3], #1
 800395a:	e7f9      	b.n	8003950 <memset+0x4>

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4d0d      	ldr	r5, [pc, #52]	@ (8003994 <__libc_init_array+0x38>)
 8003960:	4c0d      	ldr	r4, [pc, #52]	@ (8003998 <__libc_init_array+0x3c>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2600      	movs	r6, #0
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	4d0b      	ldr	r5, [pc, #44]	@ (800399c <__libc_init_array+0x40>)
 800396e:	4c0c      	ldr	r4, [pc, #48]	@ (80039a0 <__libc_init_array+0x44>)
 8003970:	f001 f83e 	bl	80049f0 <_init>
 8003974:	1b64      	subs	r4, r4, r5
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	2600      	movs	r6, #0
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	08004c50 	.word	0x08004c50
 8003998:	08004c50 	.word	0x08004c50
 800399c:	08004c50 	.word	0x08004c50
 80039a0:	08004c54 	.word	0x08004c54
 80039a4:	00000000 	.word	0x00000000

080039a8 <sin>:
 80039a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039aa:	ec53 2b10 	vmov	r2, r3, d0
 80039ae:	4826      	ldr	r0, [pc, #152]	@ (8003a48 <sin+0xa0>)
 80039b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80039b4:	4281      	cmp	r1, r0
 80039b6:	d807      	bhi.n	80039c8 <sin+0x20>
 80039b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003a40 <sin+0x98>
 80039bc:	2000      	movs	r0, #0
 80039be:	b005      	add	sp, #20
 80039c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039c4:	f000 be58 	b.w	8004678 <__kernel_sin>
 80039c8:	4820      	ldr	r0, [pc, #128]	@ (8003a4c <sin+0xa4>)
 80039ca:	4281      	cmp	r1, r0
 80039cc:	d908      	bls.n	80039e0 <sin+0x38>
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	f7fc fc19 	bl	8000208 <__aeabi_dsub>
 80039d6:	ec41 0b10 	vmov	d0, r0, r1
 80039da:	b005      	add	sp, #20
 80039dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80039e0:	4668      	mov	r0, sp
 80039e2:	f000 f835 	bl	8003a50 <__ieee754_rem_pio2>
 80039e6:	f000 0003 	and.w	r0, r0, #3
 80039ea:	2801      	cmp	r0, #1
 80039ec:	d00c      	beq.n	8003a08 <sin+0x60>
 80039ee:	2802      	cmp	r0, #2
 80039f0:	d011      	beq.n	8003a16 <sin+0x6e>
 80039f2:	b9e8      	cbnz	r0, 8003a30 <sin+0x88>
 80039f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039f8:	ed9d 0b00 	vldr	d0, [sp]
 80039fc:	2001      	movs	r0, #1
 80039fe:	f000 fe3b 	bl	8004678 <__kernel_sin>
 8003a02:	ec51 0b10 	vmov	r0, r1, d0
 8003a06:	e7e6      	b.n	80039d6 <sin+0x2e>
 8003a08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a0c:	ed9d 0b00 	vldr	d0, [sp]
 8003a10:	f000 fd6a 	bl	80044e8 <__kernel_cos>
 8003a14:	e7f5      	b.n	8003a02 <sin+0x5a>
 8003a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a1a:	ed9d 0b00 	vldr	d0, [sp]
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f000 fe2a 	bl	8004678 <__kernel_sin>
 8003a24:	ec53 2b10 	vmov	r2, r3, d0
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003a2e:	e7d2      	b.n	80039d6 <sin+0x2e>
 8003a30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a34:	ed9d 0b00 	vldr	d0, [sp]
 8003a38:	f000 fd56 	bl	80044e8 <__kernel_cos>
 8003a3c:	e7f2      	b.n	8003a24 <sin+0x7c>
 8003a3e:	bf00      	nop
	...
 8003a48:	3fe921fb 	.word	0x3fe921fb
 8003a4c:	7fefffff 	.word	0x7fefffff

08003a50 <__ieee754_rem_pio2>:
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	ec57 6b10 	vmov	r6, r7, d0
 8003a58:	4bc5      	ldr	r3, [pc, #788]	@ (8003d70 <__ieee754_rem_pio2+0x320>)
 8003a5a:	b08d      	sub	sp, #52	@ 0x34
 8003a5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003a60:	4598      	cmp	r8, r3
 8003a62:	4604      	mov	r4, r0
 8003a64:	9704      	str	r7, [sp, #16]
 8003a66:	d807      	bhi.n	8003a78 <__ieee754_rem_pio2+0x28>
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	ed80 0b00 	vstr	d0, [r0]
 8003a70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003a74:	2500      	movs	r5, #0
 8003a76:	e028      	b.n	8003aca <__ieee754_rem_pio2+0x7a>
 8003a78:	4bbe      	ldr	r3, [pc, #760]	@ (8003d74 <__ieee754_rem_pio2+0x324>)
 8003a7a:	4598      	cmp	r8, r3
 8003a7c:	d878      	bhi.n	8003b70 <__ieee754_rem_pio2+0x120>
 8003a7e:	9b04      	ldr	r3, [sp, #16]
 8003a80:	4dbd      	ldr	r5, [pc, #756]	@ (8003d78 <__ieee754_rem_pio2+0x328>)
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	4630      	mov	r0, r6
 8003a86:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003d38 <__ieee754_rem_pio2+0x2e8>)
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	dd38      	ble.n	8003b02 <__ieee754_rem_pio2+0xb2>
 8003a90:	f7fc fbba 	bl	8000208 <__aeabi_dsub>
 8003a94:	45a8      	cmp	r8, r5
 8003a96:	4606      	mov	r6, r0
 8003a98:	460f      	mov	r7, r1
 8003a9a:	d01a      	beq.n	8003ad2 <__ieee754_rem_pio2+0x82>
 8003a9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003d40 <__ieee754_rem_pio2+0x2f0>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f7fc fbb1 	bl	8000208 <__aeabi_dsub>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4680      	mov	r8, r0
 8003aac:	4689      	mov	r9, r1
 8003aae:	4630      	mov	r0, r6
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	f7fc fba9 	bl	8000208 <__aeabi_dsub>
 8003ab6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003d40 <__ieee754_rem_pio2+0x2f0>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f7fc fba4 	bl	8000208 <__aeabi_dsub>
 8003ac0:	e9c4 8900 	strd	r8, r9, [r4]
 8003ac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ac8:	2501      	movs	r5, #1
 8003aca:	4628      	mov	r0, r5
 8003acc:	b00d      	add	sp, #52	@ 0x34
 8003ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad2:	a39d      	add	r3, pc, #628	@ (adr r3, 8003d48 <__ieee754_rem_pio2+0x2f8>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fb96 	bl	8000208 <__aeabi_dsub>
 8003adc:	a39c      	add	r3, pc, #624	@ (adr r3, 8003d50 <__ieee754_rem_pio2+0x300>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	460f      	mov	r7, r1
 8003ae6:	f7fc fb8f 	bl	8000208 <__aeabi_dsub>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4680      	mov	r8, r0
 8003af0:	4689      	mov	r9, r1
 8003af2:	4630      	mov	r0, r6
 8003af4:	4639      	mov	r1, r7
 8003af6:	f7fc fb87 	bl	8000208 <__aeabi_dsub>
 8003afa:	a395      	add	r3, pc, #596	@ (adr r3, 8003d50 <__ieee754_rem_pio2+0x300>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	e7dc      	b.n	8003abc <__ieee754_rem_pio2+0x6c>
 8003b02:	f7fc fb83 	bl	800020c <__adddf3>
 8003b06:	45a8      	cmp	r8, r5
 8003b08:	4606      	mov	r6, r0
 8003b0a:	460f      	mov	r7, r1
 8003b0c:	d018      	beq.n	8003b40 <__ieee754_rem_pio2+0xf0>
 8003b0e:	a38c      	add	r3, pc, #560	@ (adr r3, 8003d40 <__ieee754_rem_pio2+0x2f0>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f7fc fb7a 	bl	800020c <__adddf3>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4680      	mov	r8, r0
 8003b1e:	4689      	mov	r9, r1
 8003b20:	4630      	mov	r0, r6
 8003b22:	4639      	mov	r1, r7
 8003b24:	f7fc fb70 	bl	8000208 <__aeabi_dsub>
 8003b28:	a385      	add	r3, pc, #532	@ (adr r3, 8003d40 <__ieee754_rem_pio2+0x2f0>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fb6d 	bl	800020c <__adddf3>
 8003b32:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003b36:	e9c4 8900 	strd	r8, r9, [r4]
 8003b3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b3e:	e7c4      	b.n	8003aca <__ieee754_rem_pio2+0x7a>
 8003b40:	a381      	add	r3, pc, #516	@ (adr r3, 8003d48 <__ieee754_rem_pio2+0x2f8>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc fb61 	bl	800020c <__adddf3>
 8003b4a:	a381      	add	r3, pc, #516	@ (adr r3, 8003d50 <__ieee754_rem_pio2+0x300>)
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	4606      	mov	r6, r0
 8003b52:	460f      	mov	r7, r1
 8003b54:	f7fc fb5a 	bl	800020c <__adddf3>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	4689      	mov	r9, r1
 8003b60:	4630      	mov	r0, r6
 8003b62:	4639      	mov	r1, r7
 8003b64:	f7fc fb50 	bl	8000208 <__aeabi_dsub>
 8003b68:	a379      	add	r3, pc, #484	@ (adr r3, 8003d50 <__ieee754_rem_pio2+0x300>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	e7de      	b.n	8003b2e <__ieee754_rem_pio2+0xde>
 8003b70:	4b82      	ldr	r3, [pc, #520]	@ (8003d7c <__ieee754_rem_pio2+0x32c>)
 8003b72:	4598      	cmp	r8, r3
 8003b74:	f200 80d1 	bhi.w	8003d1a <__ieee754_rem_pio2+0x2ca>
 8003b78:	f000 fe38 	bl	80047ec <fabs>
 8003b7c:	ec57 6b10 	vmov	r6, r7, d0
 8003b80:	a375      	add	r3, pc, #468	@ (adr r3, 8003d58 <__ieee754_rem_pio2+0x308>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	4630      	mov	r0, r6
 8003b88:	4639      	mov	r1, r7
 8003b8a:	f7fc fcf5 	bl	8000578 <__aeabi_dmul>
 8003b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d80 <__ieee754_rem_pio2+0x330>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	f7fc fb3b 	bl	800020c <__adddf3>
 8003b96:	f7fc ff89 	bl	8000aac <__aeabi_d2iz>
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	f7fc fc82 	bl	80004a4 <__aeabi_i2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ba8:	a363      	add	r3, pc, #396	@ (adr r3, 8003d38 <__ieee754_rem_pio2+0x2e8>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f7fc fce3 	bl	8000578 <__aeabi_dmul>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	4639      	mov	r1, r7
 8003bba:	f7fc fb25 	bl	8000208 <__aeabi_dsub>
 8003bbe:	a360      	add	r3, pc, #384	@ (adr r3, 8003d40 <__ieee754_rem_pio2+0x2f0>)
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	4682      	mov	sl, r0
 8003bc6:	468b      	mov	fp, r1
 8003bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bcc:	f7fc fcd4 	bl	8000578 <__aeabi_dmul>
 8003bd0:	2d1f      	cmp	r5, #31
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	460f      	mov	r7, r1
 8003bd6:	dc0c      	bgt.n	8003bf2 <__ieee754_rem_pio2+0x1a2>
 8003bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d84 <__ieee754_rem_pio2+0x334>)
 8003bda:	1e6a      	subs	r2, r5, #1
 8003bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be0:	4543      	cmp	r3, r8
 8003be2:	d006      	beq.n	8003bf2 <__ieee754_rem_pio2+0x1a2>
 8003be4:	4632      	mov	r2, r6
 8003be6:	463b      	mov	r3, r7
 8003be8:	4650      	mov	r0, sl
 8003bea:	4659      	mov	r1, fp
 8003bec:	f7fc fb0c 	bl	8000208 <__aeabi_dsub>
 8003bf0:	e00e      	b.n	8003c10 <__ieee754_rem_pio2+0x1c0>
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	4632      	mov	r2, r6
 8003bf6:	4650      	mov	r0, sl
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	f7fc fb05 	bl	8000208 <__aeabi_dsub>
 8003bfe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003c08:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	dc02      	bgt.n	8003c16 <__ieee754_rem_pio2+0x1c6>
 8003c10:	e9c4 0100 	strd	r0, r1, [r4]
 8003c14:	e039      	b.n	8003c8a <__ieee754_rem_pio2+0x23a>
 8003c16:	a34c      	add	r3, pc, #304	@ (adr r3, 8003d48 <__ieee754_rem_pio2+0x2f8>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c20:	f7fc fcaa 	bl	8000578 <__aeabi_dmul>
 8003c24:	4606      	mov	r6, r0
 8003c26:	460f      	mov	r7, r1
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4650      	mov	r0, sl
 8003c2e:	4659      	mov	r1, fp
 8003c30:	f7fc faea 	bl	8000208 <__aeabi_dsub>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4680      	mov	r8, r0
 8003c3a:	4689      	mov	r9, r1
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	4659      	mov	r1, fp
 8003c40:	f7fc fae2 	bl	8000208 <__aeabi_dsub>
 8003c44:	4632      	mov	r2, r6
 8003c46:	463b      	mov	r3, r7
 8003c48:	f7fc fade 	bl	8000208 <__aeabi_dsub>
 8003c4c:	a340      	add	r3, pc, #256	@ (adr r3, 8003d50 <__ieee754_rem_pio2+0x300>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	4606      	mov	r6, r0
 8003c54:	460f      	mov	r7, r1
 8003c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c5a:	f7fc fc8d 	bl	8000578 <__aeabi_dmul>
 8003c5e:	4632      	mov	r2, r6
 8003c60:	463b      	mov	r3, r7
 8003c62:	f7fc fad1 	bl	8000208 <__aeabi_dsub>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	460f      	mov	r7, r1
 8003c6e:	4640      	mov	r0, r8
 8003c70:	4649      	mov	r1, r9
 8003c72:	f7fc fac9 	bl	8000208 <__aeabi_dsub>
 8003c76:	9a05      	ldr	r2, [sp, #20]
 8003c78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b31      	cmp	r3, #49	@ 0x31
 8003c80:	dc20      	bgt.n	8003cc4 <__ieee754_rem_pio2+0x274>
 8003c82:	e9c4 0100 	strd	r0, r1, [r4]
 8003c86:	46c2      	mov	sl, r8
 8003c88:	46cb      	mov	fp, r9
 8003c8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003c8e:	4650      	mov	r0, sl
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	4659      	mov	r1, fp
 8003c96:	f7fc fab7 	bl	8000208 <__aeabi_dsub>
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	f7fc fab3 	bl	8000208 <__aeabi_dsub>
 8003ca2:	9b04      	ldr	r3, [sp, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003caa:	f6bf af0e 	bge.w	8003aca <__ieee754_rem_pio2+0x7a>
 8003cae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003cb2:	6063      	str	r3, [r4, #4]
 8003cb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003cb8:	f8c4 8000 	str.w	r8, [r4]
 8003cbc:	60a0      	str	r0, [r4, #8]
 8003cbe:	60e3      	str	r3, [r4, #12]
 8003cc0:	426d      	negs	r5, r5
 8003cc2:	e702      	b.n	8003aca <__ieee754_rem_pio2+0x7a>
 8003cc4:	a326      	add	r3, pc, #152	@ (adr r3, 8003d60 <__ieee754_rem_pio2+0x310>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cce:	f7fc fc53 	bl	8000578 <__aeabi_dmul>
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	460f      	mov	r7, r1
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc fa93 	bl	8000208 <__aeabi_dsub>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4682      	mov	sl, r0
 8003ce8:	468b      	mov	fp, r1
 8003cea:	4640      	mov	r0, r8
 8003cec:	4649      	mov	r1, r9
 8003cee:	f7fc fa8b 	bl	8000208 <__aeabi_dsub>
 8003cf2:	4632      	mov	r2, r6
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	f7fc fa87 	bl	8000208 <__aeabi_dsub>
 8003cfa:	a31b      	add	r3, pc, #108	@ (adr r3, 8003d68 <__ieee754_rem_pio2+0x318>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	4606      	mov	r6, r0
 8003d02:	460f      	mov	r7, r1
 8003d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d08:	f7fc fc36 	bl	8000578 <__aeabi_dmul>
 8003d0c:	4632      	mov	r2, r6
 8003d0e:	463b      	mov	r3, r7
 8003d10:	f7fc fa7a 	bl	8000208 <__aeabi_dsub>
 8003d14:	4606      	mov	r6, r0
 8003d16:	460f      	mov	r7, r1
 8003d18:	e764      	b.n	8003be4 <__ieee754_rem_pio2+0x194>
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <__ieee754_rem_pio2+0x338>)
 8003d1c:	4598      	cmp	r8, r3
 8003d1e:	d935      	bls.n	8003d8c <__ieee754_rem_pio2+0x33c>
 8003d20:	4632      	mov	r2, r6
 8003d22:	463b      	mov	r3, r7
 8003d24:	4630      	mov	r0, r6
 8003d26:	4639      	mov	r1, r7
 8003d28:	f7fc fa6e 	bl	8000208 <__aeabi_dsub>
 8003d2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d30:	e9c4 0100 	strd	r0, r1, [r4]
 8003d34:	e69e      	b.n	8003a74 <__ieee754_rem_pio2+0x24>
 8003d36:	bf00      	nop
 8003d38:	54400000 	.word	0x54400000
 8003d3c:	3ff921fb 	.word	0x3ff921fb
 8003d40:	1a626331 	.word	0x1a626331
 8003d44:	3dd0b461 	.word	0x3dd0b461
 8003d48:	1a600000 	.word	0x1a600000
 8003d4c:	3dd0b461 	.word	0x3dd0b461
 8003d50:	2e037073 	.word	0x2e037073
 8003d54:	3ba3198a 	.word	0x3ba3198a
 8003d58:	6dc9c883 	.word	0x6dc9c883
 8003d5c:	3fe45f30 	.word	0x3fe45f30
 8003d60:	2e000000 	.word	0x2e000000
 8003d64:	3ba3198a 	.word	0x3ba3198a
 8003d68:	252049c1 	.word	0x252049c1
 8003d6c:	397b839a 	.word	0x397b839a
 8003d70:	3fe921fb 	.word	0x3fe921fb
 8003d74:	4002d97b 	.word	0x4002d97b
 8003d78:	3ff921fb 	.word	0x3ff921fb
 8003d7c:	413921fb 	.word	0x413921fb
 8003d80:	3fe00000 	.word	0x3fe00000
 8003d84:	08004a78 	.word	0x08004a78
 8003d88:	7fefffff 	.word	0x7fefffff
 8003d8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003d90:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003d94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003d98:	4630      	mov	r0, r6
 8003d9a:	460f      	mov	r7, r1
 8003d9c:	f7fc fe86 	bl	8000aac <__aeabi_d2iz>
 8003da0:	f7fc fb80 	bl	80004a4 <__aeabi_i2d>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4630      	mov	r0, r6
 8003daa:	4639      	mov	r1, r7
 8003dac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003db0:	f7fc fa2a 	bl	8000208 <__aeabi_dsub>
 8003db4:	4b22      	ldr	r3, [pc, #136]	@ (8003e40 <__ieee754_rem_pio2+0x3f0>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	f7fc fbde 	bl	8000578 <__aeabi_dmul>
 8003dbc:	460f      	mov	r7, r1
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	f7fc fe74 	bl	8000aac <__aeabi_d2iz>
 8003dc4:	f7fc fb6e 	bl	80004a4 <__aeabi_i2d>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4630      	mov	r0, r6
 8003dce:	4639      	mov	r1, r7
 8003dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003dd4:	f7fc fa18 	bl	8000208 <__aeabi_dsub>
 8003dd8:	4b19      	ldr	r3, [pc, #100]	@ (8003e40 <__ieee754_rem_pio2+0x3f0>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f7fc fbcc 	bl	8000578 <__aeabi_dmul>
 8003de0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003de4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003de8:	f04f 0803 	mov.w	r8, #3
 8003dec:	2600      	movs	r6, #0
 8003dee:	2700      	movs	r7, #0
 8003df0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003df4:	4632      	mov	r2, r6
 8003df6:	463b      	mov	r3, r7
 8003df8:	46c2      	mov	sl, r8
 8003dfa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003dfe:	f7fc fe23 	bl	8000a48 <__aeabi_dcmpeq>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d1f4      	bne.n	8003df0 <__ieee754_rem_pio2+0x3a0>
 8003e06:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <__ieee754_rem_pio2+0x3f4>)
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	462a      	mov	r2, r5
 8003e10:	4653      	mov	r3, sl
 8003e12:	4621      	mov	r1, r4
 8003e14:	a806      	add	r0, sp, #24
 8003e16:	f000 f817 	bl	8003e48 <__kernel_rem_pio2>
 8003e1a:	9b04      	ldr	r3, [sp, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	4605      	mov	r5, r0
 8003e20:	f6bf ae53 	bge.w	8003aca <__ieee754_rem_pio2+0x7a>
 8003e24:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003e28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003e2c:	e9c4 2300 	strd	r2, r3, [r4]
 8003e30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003e38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003e3c:	e740      	b.n	8003cc0 <__ieee754_rem_pio2+0x270>
 8003e3e:	bf00      	nop
 8003e40:	41700000 	.word	0x41700000
 8003e44:	08004af8 	.word	0x08004af8

08003e48 <__kernel_rem_pio2>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	ed2d 8b02 	vpush	{d8}
 8003e50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003e54:	f112 0f14 	cmn.w	r2, #20
 8003e58:	9306      	str	r3, [sp, #24]
 8003e5a:	9104      	str	r1, [sp, #16]
 8003e5c:	4bc2      	ldr	r3, [pc, #776]	@ (8004168 <__kernel_rem_pio2+0x320>)
 8003e5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003e60:	9008      	str	r0, [sp, #32]
 8003e62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	9b06      	ldr	r3, [sp, #24]
 8003e6a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003e6e:	bfa8      	it	ge
 8003e70:	1ed4      	subge	r4, r2, #3
 8003e72:	9305      	str	r3, [sp, #20]
 8003e74:	bfb2      	itee	lt
 8003e76:	2400      	movlt	r4, #0
 8003e78:	2318      	movge	r3, #24
 8003e7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003e7e:	f06f 0317 	mvn.w	r3, #23
 8003e82:	fb04 3303 	mla	r3, r4, r3, r3
 8003e86:	eb03 0b02 	add.w	fp, r3, r2
 8003e8a:	9b00      	ldr	r3, [sp, #0]
 8003e8c:	9a05      	ldr	r2, [sp, #20]
 8003e8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8004158 <__kernel_rem_pio2+0x310>
 8003e92:	eb03 0802 	add.w	r8, r3, r2
 8003e96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003e98:	1aa7      	subs	r7, r4, r2
 8003e9a:	ae20      	add	r6, sp, #128	@ 0x80
 8003e9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	4545      	cmp	r5, r8
 8003ea4:	dd12      	ble.n	8003ecc <__kernel_rem_pio2+0x84>
 8003ea6:	9b06      	ldr	r3, [sp, #24]
 8003ea8:	aa20      	add	r2, sp, #128	@ 0x80
 8003eaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003eae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003eb2:	2700      	movs	r7, #0
 8003eb4:	9b00      	ldr	r3, [sp, #0]
 8003eb6:	429f      	cmp	r7, r3
 8003eb8:	dc2e      	bgt.n	8003f18 <__kernel_rem_pio2+0xd0>
 8003eba:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8004158 <__kernel_rem_pio2+0x310>
 8003ebe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ec2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ec6:	46a8      	mov	r8, r5
 8003ec8:	2600      	movs	r6, #0
 8003eca:	e01b      	b.n	8003f04 <__kernel_rem_pio2+0xbc>
 8003ecc:	42ef      	cmn	r7, r5
 8003ece:	d407      	bmi.n	8003ee0 <__kernel_rem_pio2+0x98>
 8003ed0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003ed4:	f7fc fae6 	bl	80004a4 <__aeabi_i2d>
 8003ed8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003edc:	3501      	adds	r5, #1
 8003ede:	e7e0      	b.n	8003ea2 <__kernel_rem_pio2+0x5a>
 8003ee0:	ec51 0b18 	vmov	r0, r1, d8
 8003ee4:	e7f8      	b.n	8003ed8 <__kernel_rem_pio2+0x90>
 8003ee6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8003eea:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003eee:	f7fc fb43 	bl	8000578 <__aeabi_dmul>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003efa:	f7fc f987 	bl	800020c <__adddf3>
 8003efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f02:	3601      	adds	r6, #1
 8003f04:	9b05      	ldr	r3, [sp, #20]
 8003f06:	429e      	cmp	r6, r3
 8003f08:	dded      	ble.n	8003ee6 <__kernel_rem_pio2+0x9e>
 8003f0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f0e:	3701      	adds	r7, #1
 8003f10:	ecaa 7b02 	vstmia	sl!, {d7}
 8003f14:	3508      	adds	r5, #8
 8003f16:	e7cd      	b.n	8003eb4 <__kernel_rem_pio2+0x6c>
 8003f18:	9b00      	ldr	r3, [sp, #0]
 8003f1a:	f8dd 8000 	ldr.w	r8, [sp]
 8003f1e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f26:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003f28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f2e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003f32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f34:	ab98      	add	r3, sp, #608	@ 0x260
 8003f36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003f3a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003f3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f42:	ac0c      	add	r4, sp, #48	@ 0x30
 8003f44:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003f46:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003f4a:	46a1      	mov	r9, r4
 8003f4c:	46c2      	mov	sl, r8
 8003f4e:	f1ba 0f00 	cmp.w	sl, #0
 8003f52:	dc77      	bgt.n	8004044 <__kernel_rem_pio2+0x1fc>
 8003f54:	4658      	mov	r0, fp
 8003f56:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003f5a:	f000 fc51 	bl	8004800 <scalbn>
 8003f5e:	ec57 6b10 	vmov	r6, r7, d0
 8003f62:	2200      	movs	r2, #0
 8003f64:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003f68:	4630      	mov	r0, r6
 8003f6a:	4639      	mov	r1, r7
 8003f6c:	f7fc fb04 	bl	8000578 <__aeabi_dmul>
 8003f70:	ec41 0b10 	vmov	d0, r0, r1
 8003f74:	f000 fcc0 	bl	80048f8 <floor>
 8003f78:	4b7c      	ldr	r3, [pc, #496]	@ (800416c <__kernel_rem_pio2+0x324>)
 8003f7a:	ec51 0b10 	vmov	r0, r1, d0
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f7fc fafa 	bl	8000578 <__aeabi_dmul>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc f93c 	bl	8000208 <__aeabi_dsub>
 8003f90:	460f      	mov	r7, r1
 8003f92:	4606      	mov	r6, r0
 8003f94:	f7fc fd8a 	bl	8000aac <__aeabi_d2iz>
 8003f98:	9002      	str	r0, [sp, #8]
 8003f9a:	f7fc fa83 	bl	80004a4 <__aeabi_i2d>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	f7fc f92f 	bl	8000208 <__aeabi_dsub>
 8003faa:	f1bb 0f00 	cmp.w	fp, #0
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460f      	mov	r7, r1
 8003fb2:	dd6c      	ble.n	800408e <__kernel_rem_pio2+0x246>
 8003fb4:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8003fb8:	ab0c      	add	r3, sp, #48	@ 0x30
 8003fba:	9d02      	ldr	r5, [sp, #8]
 8003fbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003fc0:	f1cb 0018 	rsb	r0, fp, #24
 8003fc4:	fa43 f200 	asr.w	r2, r3, r0
 8003fc8:	4415      	add	r5, r2
 8003fca:	4082      	lsls	r2, r0
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	aa0c      	add	r2, sp, #48	@ 0x30
 8003fd0:	9502      	str	r5, [sp, #8]
 8003fd2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003fd6:	f1cb 0217 	rsb	r2, fp, #23
 8003fda:	fa43 f902 	asr.w	r9, r3, r2
 8003fde:	f1b9 0f00 	cmp.w	r9, #0
 8003fe2:	dd64      	ble.n	80040ae <__kernel_rem_pio2+0x266>
 8003fe4:	9b02      	ldr	r3, [sp, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	3301      	adds	r3, #1
 8003fea:	9302      	str	r3, [sp, #8]
 8003fec:	4615      	mov	r5, r2
 8003fee:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003ff2:	4590      	cmp	r8, r2
 8003ff4:	f300 80a1 	bgt.w	800413a <__kernel_rem_pio2+0x2f2>
 8003ff8:	f1bb 0f00 	cmp.w	fp, #0
 8003ffc:	dd07      	ble.n	800400e <__kernel_rem_pio2+0x1c6>
 8003ffe:	f1bb 0f01 	cmp.w	fp, #1
 8004002:	f000 80c1 	beq.w	8004188 <__kernel_rem_pio2+0x340>
 8004006:	f1bb 0f02 	cmp.w	fp, #2
 800400a:	f000 80c8 	beq.w	800419e <__kernel_rem_pio2+0x356>
 800400e:	f1b9 0f02 	cmp.w	r9, #2
 8004012:	d14c      	bne.n	80040ae <__kernel_rem_pio2+0x266>
 8004014:	4632      	mov	r2, r6
 8004016:	463b      	mov	r3, r7
 8004018:	4955      	ldr	r1, [pc, #340]	@ (8004170 <__kernel_rem_pio2+0x328>)
 800401a:	2000      	movs	r0, #0
 800401c:	f7fc f8f4 	bl	8000208 <__aeabi_dsub>
 8004020:	4606      	mov	r6, r0
 8004022:	460f      	mov	r7, r1
 8004024:	2d00      	cmp	r5, #0
 8004026:	d042      	beq.n	80040ae <__kernel_rem_pio2+0x266>
 8004028:	4658      	mov	r0, fp
 800402a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8004160 <__kernel_rem_pio2+0x318>
 800402e:	f000 fbe7 	bl	8004800 <scalbn>
 8004032:	4630      	mov	r0, r6
 8004034:	4639      	mov	r1, r7
 8004036:	ec53 2b10 	vmov	r2, r3, d0
 800403a:	f7fc f8e5 	bl	8000208 <__aeabi_dsub>
 800403e:	4606      	mov	r6, r0
 8004040:	460f      	mov	r7, r1
 8004042:	e034      	b.n	80040ae <__kernel_rem_pio2+0x266>
 8004044:	4b4b      	ldr	r3, [pc, #300]	@ (8004174 <__kernel_rem_pio2+0x32c>)
 8004046:	2200      	movs	r2, #0
 8004048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800404c:	f7fc fa94 	bl	8000578 <__aeabi_dmul>
 8004050:	f7fc fd2c 	bl	8000aac <__aeabi_d2iz>
 8004054:	f7fc fa26 	bl	80004a4 <__aeabi_i2d>
 8004058:	4b47      	ldr	r3, [pc, #284]	@ (8004178 <__kernel_rem_pio2+0x330>)
 800405a:	2200      	movs	r2, #0
 800405c:	4606      	mov	r6, r0
 800405e:	460f      	mov	r7, r1
 8004060:	f7fc fa8a 	bl	8000578 <__aeabi_dmul>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800406c:	f7fc f8cc 	bl	8000208 <__aeabi_dsub>
 8004070:	f7fc fd1c 	bl	8000aac <__aeabi_d2iz>
 8004074:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004078:	f849 0b04 	str.w	r0, [r9], #4
 800407c:	4639      	mov	r1, r7
 800407e:	4630      	mov	r0, r6
 8004080:	f7fc f8c4 	bl	800020c <__adddf3>
 8004084:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800408c:	e75f      	b.n	8003f4e <__kernel_rem_pio2+0x106>
 800408e:	d107      	bne.n	80040a0 <__kernel_rem_pio2+0x258>
 8004090:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004094:	aa0c      	add	r2, sp, #48	@ 0x30
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800409e:	e79e      	b.n	8003fde <__kernel_rem_pio2+0x196>
 80040a0:	4b36      	ldr	r3, [pc, #216]	@ (800417c <__kernel_rem_pio2+0x334>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	f7fc fcee 	bl	8000a84 <__aeabi_dcmpge>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d143      	bne.n	8004134 <__kernel_rem_pio2+0x2ec>
 80040ac:	4681      	mov	r9, r0
 80040ae:	2200      	movs	r2, #0
 80040b0:	2300      	movs	r3, #0
 80040b2:	4630      	mov	r0, r6
 80040b4:	4639      	mov	r1, r7
 80040b6:	f7fc fcc7 	bl	8000a48 <__aeabi_dcmpeq>
 80040ba:	2800      	cmp	r0, #0
 80040bc:	f000 80c1 	beq.w	8004242 <__kernel_rem_pio2+0x3fa>
 80040c0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80040c4:	2200      	movs	r2, #0
 80040c6:	9900      	ldr	r1, [sp, #0]
 80040c8:	428b      	cmp	r3, r1
 80040ca:	da70      	bge.n	80041ae <__kernel_rem_pio2+0x366>
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	f000 808b 	beq.w	80041e8 <__kernel_rem_pio2+0x3a0>
 80040d2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80040d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80040d8:	f1ab 0b18 	sub.w	fp, fp, #24
 80040dc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f6      	beq.n	80040d2 <__kernel_rem_pio2+0x28a>
 80040e4:	4658      	mov	r0, fp
 80040e6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8004160 <__kernel_rem_pio2+0x318>
 80040ea:	f000 fb89 	bl	8004800 <scalbn>
 80040ee:	f108 0301 	add.w	r3, r8, #1
 80040f2:	00da      	lsls	r2, r3, #3
 80040f4:	9205      	str	r2, [sp, #20]
 80040f6:	ec55 4b10 	vmov	r4, r5, d0
 80040fa:	aa70      	add	r2, sp, #448	@ 0x1c0
 80040fc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8004174 <__kernel_rem_pio2+0x32c>
 8004100:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004104:	4646      	mov	r6, r8
 8004106:	f04f 0a00 	mov.w	sl, #0
 800410a:	2e00      	cmp	r6, #0
 800410c:	f280 80d1 	bge.w	80042b2 <__kernel_rem_pio2+0x46a>
 8004110:	4644      	mov	r4, r8
 8004112:	2c00      	cmp	r4, #0
 8004114:	f2c0 80ff 	blt.w	8004316 <__kernel_rem_pio2+0x4ce>
 8004118:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <__kernel_rem_pio2+0x338>)
 800411a:	461f      	mov	r7, r3
 800411c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800411e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004122:	9306      	str	r3, [sp, #24]
 8004124:	f04f 0a00 	mov.w	sl, #0
 8004128:	f04f 0b00 	mov.w	fp, #0
 800412c:	2600      	movs	r6, #0
 800412e:	eba8 0504 	sub.w	r5, r8, r4
 8004132:	e0e4      	b.n	80042fe <__kernel_rem_pio2+0x4b6>
 8004134:	f04f 0902 	mov.w	r9, #2
 8004138:	e754      	b.n	8003fe4 <__kernel_rem_pio2+0x19c>
 800413a:	f854 3b04 	ldr.w	r3, [r4], #4
 800413e:	bb0d      	cbnz	r5, 8004184 <__kernel_rem_pio2+0x33c>
 8004140:	b123      	cbz	r3, 800414c <__kernel_rem_pio2+0x304>
 8004142:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004146:	f844 3c04 	str.w	r3, [r4, #-4]
 800414a:	2301      	movs	r3, #1
 800414c:	3201      	adds	r2, #1
 800414e:	461d      	mov	r5, r3
 8004150:	e74f      	b.n	8003ff2 <__kernel_rem_pio2+0x1aa>
 8004152:	bf00      	nop
 8004154:	f3af 8000 	nop.w
	...
 8004164:	3ff00000 	.word	0x3ff00000
 8004168:	08004c40 	.word	0x08004c40
 800416c:	40200000 	.word	0x40200000
 8004170:	3ff00000 	.word	0x3ff00000
 8004174:	3e700000 	.word	0x3e700000
 8004178:	41700000 	.word	0x41700000
 800417c:	3fe00000 	.word	0x3fe00000
 8004180:	08004c00 	.word	0x08004c00
 8004184:	1acb      	subs	r3, r1, r3
 8004186:	e7de      	b.n	8004146 <__kernel_rem_pio2+0x2fe>
 8004188:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800418c:	ab0c      	add	r3, sp, #48	@ 0x30
 800418e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004192:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004196:	a90c      	add	r1, sp, #48	@ 0x30
 8004198:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800419c:	e737      	b.n	800400e <__kernel_rem_pio2+0x1c6>
 800419e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80041a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80041a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80041ac:	e7f3      	b.n	8004196 <__kernel_rem_pio2+0x34e>
 80041ae:	a90c      	add	r1, sp, #48	@ 0x30
 80041b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	430a      	orrs	r2, r1
 80041b8:	e785      	b.n	80040c6 <__kernel_rem_pio2+0x27e>
 80041ba:	3401      	adds	r4, #1
 80041bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80041c0:	2a00      	cmp	r2, #0
 80041c2:	d0fa      	beq.n	80041ba <__kernel_rem_pio2+0x372>
 80041c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80041ca:	eb0d 0503 	add.w	r5, sp, r3
 80041ce:	9b06      	ldr	r3, [sp, #24]
 80041d0:	aa20      	add	r2, sp, #128	@ 0x80
 80041d2:	4443      	add	r3, r8
 80041d4:	f108 0701 	add.w	r7, r8, #1
 80041d8:	3d98      	subs	r5, #152	@ 0x98
 80041da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80041de:	4444      	add	r4, r8
 80041e0:	42bc      	cmp	r4, r7
 80041e2:	da04      	bge.n	80041ee <__kernel_rem_pio2+0x3a6>
 80041e4:	46a0      	mov	r8, r4
 80041e6:	e6a2      	b.n	8003f2e <__kernel_rem_pio2+0xe6>
 80041e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041ea:	2401      	movs	r4, #1
 80041ec:	e7e6      	b.n	80041bc <__kernel_rem_pio2+0x374>
 80041ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80041f4:	f7fc f956 	bl	80004a4 <__aeabi_i2d>
 80041f8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80044b8 <__kernel_rem_pio2+0x670>
 80041fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004200:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004204:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004208:	46b2      	mov	sl, r6
 800420a:	f04f 0800 	mov.w	r8, #0
 800420e:	9b05      	ldr	r3, [sp, #20]
 8004210:	4598      	cmp	r8, r3
 8004212:	dd05      	ble.n	8004220 <__kernel_rem_pio2+0x3d8>
 8004214:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004218:	3701      	adds	r7, #1
 800421a:	eca5 7b02 	vstmia	r5!, {d7}
 800421e:	e7df      	b.n	80041e0 <__kernel_rem_pio2+0x398>
 8004220:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004224:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004228:	f7fc f9a6 	bl	8000578 <__aeabi_dmul>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004234:	f7fb ffea 	bl	800020c <__adddf3>
 8004238:	f108 0801 	add.w	r8, r8, #1
 800423c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004240:	e7e5      	b.n	800420e <__kernel_rem_pio2+0x3c6>
 8004242:	f1cb 0000 	rsb	r0, fp, #0
 8004246:	ec47 6b10 	vmov	d0, r6, r7
 800424a:	f000 fad9 	bl	8004800 <scalbn>
 800424e:	ec55 4b10 	vmov	r4, r5, d0
 8004252:	4b9b      	ldr	r3, [pc, #620]	@ (80044c0 <__kernel_rem_pio2+0x678>)
 8004254:	2200      	movs	r2, #0
 8004256:	4620      	mov	r0, r4
 8004258:	4629      	mov	r1, r5
 800425a:	f7fc fc13 	bl	8000a84 <__aeabi_dcmpge>
 800425e:	b300      	cbz	r0, 80042a2 <__kernel_rem_pio2+0x45a>
 8004260:	4b98      	ldr	r3, [pc, #608]	@ (80044c4 <__kernel_rem_pio2+0x67c>)
 8004262:	2200      	movs	r2, #0
 8004264:	4620      	mov	r0, r4
 8004266:	4629      	mov	r1, r5
 8004268:	f7fc f986 	bl	8000578 <__aeabi_dmul>
 800426c:	f7fc fc1e 	bl	8000aac <__aeabi_d2iz>
 8004270:	4606      	mov	r6, r0
 8004272:	f7fc f917 	bl	80004a4 <__aeabi_i2d>
 8004276:	4b92      	ldr	r3, [pc, #584]	@ (80044c0 <__kernel_rem_pio2+0x678>)
 8004278:	2200      	movs	r2, #0
 800427a:	f7fc f97d 	bl	8000578 <__aeabi_dmul>
 800427e:	460b      	mov	r3, r1
 8004280:	4602      	mov	r2, r0
 8004282:	4629      	mov	r1, r5
 8004284:	4620      	mov	r0, r4
 8004286:	f7fb ffbf 	bl	8000208 <__aeabi_dsub>
 800428a:	f7fc fc0f 	bl	8000aac <__aeabi_d2iz>
 800428e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004290:	f10b 0b18 	add.w	fp, fp, #24
 8004294:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004298:	f108 0801 	add.w	r8, r8, #1
 800429c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80042a0:	e720      	b.n	80040e4 <__kernel_rem_pio2+0x29c>
 80042a2:	4620      	mov	r0, r4
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc fc01 	bl	8000aac <__aeabi_d2iz>
 80042aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80042ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80042b0:	e718      	b.n	80040e4 <__kernel_rem_pio2+0x29c>
 80042b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80042b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80042b8:	f7fc f8f4 	bl	80004a4 <__aeabi_i2d>
 80042bc:	4622      	mov	r2, r4
 80042be:	462b      	mov	r3, r5
 80042c0:	f7fc f95a 	bl	8000578 <__aeabi_dmul>
 80042c4:	4652      	mov	r2, sl
 80042c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80042ca:	465b      	mov	r3, fp
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fc f952 	bl	8000578 <__aeabi_dmul>
 80042d4:	3e01      	subs	r6, #1
 80042d6:	4604      	mov	r4, r0
 80042d8:	460d      	mov	r5, r1
 80042da:	e716      	b.n	800410a <__kernel_rem_pio2+0x2c2>
 80042dc:	9906      	ldr	r1, [sp, #24]
 80042de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80042e2:	9106      	str	r1, [sp, #24]
 80042e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80042e8:	f7fc f946 	bl	8000578 <__aeabi_dmul>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4650      	mov	r0, sl
 80042f2:	4659      	mov	r1, fp
 80042f4:	f7fb ff8a 	bl	800020c <__adddf3>
 80042f8:	3601      	adds	r6, #1
 80042fa:	4682      	mov	sl, r0
 80042fc:	468b      	mov	fp, r1
 80042fe:	9b00      	ldr	r3, [sp, #0]
 8004300:	429e      	cmp	r6, r3
 8004302:	dc01      	bgt.n	8004308 <__kernel_rem_pio2+0x4c0>
 8004304:	42ae      	cmp	r6, r5
 8004306:	dde9      	ble.n	80042dc <__kernel_rem_pio2+0x494>
 8004308:	ab48      	add	r3, sp, #288	@ 0x120
 800430a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800430e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004312:	3c01      	subs	r4, #1
 8004314:	e6fd      	b.n	8004112 <__kernel_rem_pio2+0x2ca>
 8004316:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004318:	2b02      	cmp	r3, #2
 800431a:	dc0b      	bgt.n	8004334 <__kernel_rem_pio2+0x4ec>
 800431c:	2b00      	cmp	r3, #0
 800431e:	dc35      	bgt.n	800438c <__kernel_rem_pio2+0x544>
 8004320:	d059      	beq.n	80043d6 <__kernel_rem_pio2+0x58e>
 8004322:	9b02      	ldr	r3, [sp, #8]
 8004324:	f003 0007 	and.w	r0, r3, #7
 8004328:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800432c:	ecbd 8b02 	vpop	{d8}
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004336:	2b03      	cmp	r3, #3
 8004338:	d1f3      	bne.n	8004322 <__kernel_rem_pio2+0x4da>
 800433a:	9b05      	ldr	r3, [sp, #20]
 800433c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004340:	eb0d 0403 	add.w	r4, sp, r3
 8004344:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004348:	4625      	mov	r5, r4
 800434a:	46c2      	mov	sl, r8
 800434c:	f1ba 0f00 	cmp.w	sl, #0
 8004350:	dc69      	bgt.n	8004426 <__kernel_rem_pio2+0x5de>
 8004352:	4645      	mov	r5, r8
 8004354:	2d01      	cmp	r5, #1
 8004356:	f300 8087 	bgt.w	8004468 <__kernel_rem_pio2+0x620>
 800435a:	9c05      	ldr	r4, [sp, #20]
 800435c:	ab48      	add	r3, sp, #288	@ 0x120
 800435e:	441c      	add	r4, r3
 8004360:	2000      	movs	r0, #0
 8004362:	2100      	movs	r1, #0
 8004364:	f1b8 0f01 	cmp.w	r8, #1
 8004368:	f300 809c 	bgt.w	80044a4 <__kernel_rem_pio2+0x65c>
 800436c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004370:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004374:	f1b9 0f00 	cmp.w	r9, #0
 8004378:	f040 80a6 	bne.w	80044c8 <__kernel_rem_pio2+0x680>
 800437c:	9b04      	ldr	r3, [sp, #16]
 800437e:	e9c3 5600 	strd	r5, r6, [r3]
 8004382:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004386:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800438a:	e7ca      	b.n	8004322 <__kernel_rem_pio2+0x4da>
 800438c:	9d05      	ldr	r5, [sp, #20]
 800438e:	ab48      	add	r3, sp, #288	@ 0x120
 8004390:	441d      	add	r5, r3
 8004392:	4644      	mov	r4, r8
 8004394:	2000      	movs	r0, #0
 8004396:	2100      	movs	r1, #0
 8004398:	2c00      	cmp	r4, #0
 800439a:	da35      	bge.n	8004408 <__kernel_rem_pio2+0x5c0>
 800439c:	f1b9 0f00 	cmp.w	r9, #0
 80043a0:	d038      	beq.n	8004414 <__kernel_rem_pio2+0x5cc>
 80043a2:	4602      	mov	r2, r0
 80043a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80043a8:	9c04      	ldr	r4, [sp, #16]
 80043aa:	e9c4 2300 	strd	r2, r3, [r4]
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80043b6:	f7fb ff27 	bl	8000208 <__aeabi_dsub>
 80043ba:	ad4a      	add	r5, sp, #296	@ 0x128
 80043bc:	2401      	movs	r4, #1
 80043be:	45a0      	cmp	r8, r4
 80043c0:	da2b      	bge.n	800441a <__kernel_rem_pio2+0x5d2>
 80043c2:	f1b9 0f00 	cmp.w	r9, #0
 80043c6:	d002      	beq.n	80043ce <__kernel_rem_pio2+0x586>
 80043c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80043cc:	4619      	mov	r1, r3
 80043ce:	9b04      	ldr	r3, [sp, #16]
 80043d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80043d4:	e7a5      	b.n	8004322 <__kernel_rem_pio2+0x4da>
 80043d6:	9c05      	ldr	r4, [sp, #20]
 80043d8:	ab48      	add	r3, sp, #288	@ 0x120
 80043da:	441c      	add	r4, r3
 80043dc:	2000      	movs	r0, #0
 80043de:	2100      	movs	r1, #0
 80043e0:	f1b8 0f00 	cmp.w	r8, #0
 80043e4:	da09      	bge.n	80043fa <__kernel_rem_pio2+0x5b2>
 80043e6:	f1b9 0f00 	cmp.w	r9, #0
 80043ea:	d002      	beq.n	80043f2 <__kernel_rem_pio2+0x5aa>
 80043ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80043f0:	4619      	mov	r1, r3
 80043f2:	9b04      	ldr	r3, [sp, #16]
 80043f4:	e9c3 0100 	strd	r0, r1, [r3]
 80043f8:	e793      	b.n	8004322 <__kernel_rem_pio2+0x4da>
 80043fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80043fe:	f7fb ff05 	bl	800020c <__adddf3>
 8004402:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004406:	e7eb      	b.n	80043e0 <__kernel_rem_pio2+0x598>
 8004408:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800440c:	f7fb fefe 	bl	800020c <__adddf3>
 8004410:	3c01      	subs	r4, #1
 8004412:	e7c1      	b.n	8004398 <__kernel_rem_pio2+0x550>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	e7c6      	b.n	80043a8 <__kernel_rem_pio2+0x560>
 800441a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800441e:	f7fb fef5 	bl	800020c <__adddf3>
 8004422:	3401      	adds	r4, #1
 8004424:	e7cb      	b.n	80043be <__kernel_rem_pio2+0x576>
 8004426:	ed35 7b02 	vldmdb	r5!, {d7}
 800442a:	ed8d 7b00 	vstr	d7, [sp]
 800442e:	ed95 7b02 	vldr	d7, [r5, #8]
 8004432:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004436:	ec53 2b17 	vmov	r2, r3, d7
 800443a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800443e:	f7fb fee5 	bl	800020c <__adddf3>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4606      	mov	r6, r0
 8004448:	460f      	mov	r7, r1
 800444a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800444e:	f7fb fedb 	bl	8000208 <__aeabi_dsub>
 8004452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004456:	f7fb fed9 	bl	800020c <__adddf3>
 800445a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800445e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004462:	e9c5 6700 	strd	r6, r7, [r5]
 8004466:	e771      	b.n	800434c <__kernel_rem_pio2+0x504>
 8004468:	ed34 7b02 	vldmdb	r4!, {d7}
 800446c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004470:	ec51 0b17 	vmov	r0, r1, d7
 8004474:	4652      	mov	r2, sl
 8004476:	465b      	mov	r3, fp
 8004478:	ed8d 7b00 	vstr	d7, [sp]
 800447c:	f7fb fec6 	bl	800020c <__adddf3>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4606      	mov	r6, r0
 8004486:	460f      	mov	r7, r1
 8004488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800448c:	f7fb febc 	bl	8000208 <__aeabi_dsub>
 8004490:	4652      	mov	r2, sl
 8004492:	465b      	mov	r3, fp
 8004494:	f7fb feba 	bl	800020c <__adddf3>
 8004498:	3d01      	subs	r5, #1
 800449a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800449e:	e9c4 6700 	strd	r6, r7, [r4]
 80044a2:	e757      	b.n	8004354 <__kernel_rem_pio2+0x50c>
 80044a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80044a8:	f7fb feb0 	bl	800020c <__adddf3>
 80044ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80044b0:	e758      	b.n	8004364 <__kernel_rem_pio2+0x51c>
 80044b2:	bf00      	nop
 80044b4:	f3af 8000 	nop.w
	...
 80044c0:	41700000 	.word	0x41700000
 80044c4:	3e700000 	.word	0x3e700000
 80044c8:	9b04      	ldr	r3, [sp, #16]
 80044ca:	9a04      	ldr	r2, [sp, #16]
 80044cc:	601d      	str	r5, [r3, #0]
 80044ce:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80044d2:	605c      	str	r4, [r3, #4]
 80044d4:	609f      	str	r7, [r3, #8]
 80044d6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80044da:	60d3      	str	r3, [r2, #12]
 80044dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044e0:	6110      	str	r0, [r2, #16]
 80044e2:	6153      	str	r3, [r2, #20]
 80044e4:	e71d      	b.n	8004322 <__kernel_rem_pio2+0x4da>
 80044e6:	bf00      	nop

080044e8 <__kernel_cos>:
 80044e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	ec57 6b10 	vmov	r6, r7, d0
 80044f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80044f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80044f8:	ed8d 1b00 	vstr	d1, [sp]
 80044fc:	d206      	bcs.n	800450c <__kernel_cos+0x24>
 80044fe:	4630      	mov	r0, r6
 8004500:	4639      	mov	r1, r7
 8004502:	f7fc fad3 	bl	8000aac <__aeabi_d2iz>
 8004506:	2800      	cmp	r0, #0
 8004508:	f000 8088 	beq.w	800461c <__kernel_cos+0x134>
 800450c:	4632      	mov	r2, r6
 800450e:	463b      	mov	r3, r7
 8004510:	4630      	mov	r0, r6
 8004512:	4639      	mov	r1, r7
 8004514:	f7fc f830 	bl	8000578 <__aeabi_dmul>
 8004518:	4b51      	ldr	r3, [pc, #324]	@ (8004660 <__kernel_cos+0x178>)
 800451a:	2200      	movs	r2, #0
 800451c:	4604      	mov	r4, r0
 800451e:	460d      	mov	r5, r1
 8004520:	f7fc f82a 	bl	8000578 <__aeabi_dmul>
 8004524:	a340      	add	r3, pc, #256	@ (adr r3, 8004628 <__kernel_cos+0x140>)
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	4682      	mov	sl, r0
 800452c:	468b      	mov	fp, r1
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fc f821 	bl	8000578 <__aeabi_dmul>
 8004536:	a33e      	add	r3, pc, #248	@ (adr r3, 8004630 <__kernel_cos+0x148>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fb fe66 	bl	800020c <__adddf3>
 8004540:	4622      	mov	r2, r4
 8004542:	462b      	mov	r3, r5
 8004544:	f7fc f818 	bl	8000578 <__aeabi_dmul>
 8004548:	a33b      	add	r3, pc, #236	@ (adr r3, 8004638 <__kernel_cos+0x150>)
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f7fb fe5b 	bl	8000208 <__aeabi_dsub>
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	f7fc f80f 	bl	8000578 <__aeabi_dmul>
 800455a:	a339      	add	r3, pc, #228	@ (adr r3, 8004640 <__kernel_cos+0x158>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f7fb fe54 	bl	800020c <__adddf3>
 8004564:	4622      	mov	r2, r4
 8004566:	462b      	mov	r3, r5
 8004568:	f7fc f806 	bl	8000578 <__aeabi_dmul>
 800456c:	a336      	add	r3, pc, #216	@ (adr r3, 8004648 <__kernel_cos+0x160>)
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f7fb fe49 	bl	8000208 <__aeabi_dsub>
 8004576:	4622      	mov	r2, r4
 8004578:	462b      	mov	r3, r5
 800457a:	f7fb fffd 	bl	8000578 <__aeabi_dmul>
 800457e:	a334      	add	r3, pc, #208	@ (adr r3, 8004650 <__kernel_cos+0x168>)
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f7fb fe42 	bl	800020c <__adddf3>
 8004588:	4622      	mov	r2, r4
 800458a:	462b      	mov	r3, r5
 800458c:	f7fb fff4 	bl	8000578 <__aeabi_dmul>
 8004590:	4622      	mov	r2, r4
 8004592:	462b      	mov	r3, r5
 8004594:	f7fb fff0 	bl	8000578 <__aeabi_dmul>
 8004598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800459c:	4604      	mov	r4, r0
 800459e:	460d      	mov	r5, r1
 80045a0:	4630      	mov	r0, r6
 80045a2:	4639      	mov	r1, r7
 80045a4:	f7fb ffe8 	bl	8000578 <__aeabi_dmul>
 80045a8:	460b      	mov	r3, r1
 80045aa:	4602      	mov	r2, r0
 80045ac:	4629      	mov	r1, r5
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7fb fe2a 	bl	8000208 <__aeabi_dsub>
 80045b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <__kernel_cos+0x17c>)
 80045b6:	4598      	cmp	r8, r3
 80045b8:	4606      	mov	r6, r0
 80045ba:	460f      	mov	r7, r1
 80045bc:	d810      	bhi.n	80045e0 <__kernel_cos+0xf8>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4650      	mov	r0, sl
 80045c4:	4659      	mov	r1, fp
 80045c6:	f7fb fe1f 	bl	8000208 <__aeabi_dsub>
 80045ca:	460b      	mov	r3, r1
 80045cc:	4926      	ldr	r1, [pc, #152]	@ (8004668 <__kernel_cos+0x180>)
 80045ce:	4602      	mov	r2, r0
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7fb fe19 	bl	8000208 <__aeabi_dsub>
 80045d6:	ec41 0b10 	vmov	d0, r0, r1
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <__kernel_cos+0x184>)
 80045e2:	4921      	ldr	r1, [pc, #132]	@ (8004668 <__kernel_cos+0x180>)
 80045e4:	4598      	cmp	r8, r3
 80045e6:	bf8c      	ite	hi
 80045e8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004670 <__kernel_cos+0x188>)
 80045ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80045ee:	2400      	movs	r4, #0
 80045f0:	4622      	mov	r2, r4
 80045f2:	462b      	mov	r3, r5
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7fb fe07 	bl	8000208 <__aeabi_dsub>
 80045fa:	4622      	mov	r2, r4
 80045fc:	4680      	mov	r8, r0
 80045fe:	4689      	mov	r9, r1
 8004600:	462b      	mov	r3, r5
 8004602:	4650      	mov	r0, sl
 8004604:	4659      	mov	r1, fp
 8004606:	f7fb fdff 	bl	8000208 <__aeabi_dsub>
 800460a:	4632      	mov	r2, r6
 800460c:	463b      	mov	r3, r7
 800460e:	f7fb fdfb 	bl	8000208 <__aeabi_dsub>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4640      	mov	r0, r8
 8004618:	4649      	mov	r1, r9
 800461a:	e7da      	b.n	80045d2 <__kernel_cos+0xea>
 800461c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004658 <__kernel_cos+0x170>
 8004620:	e7db      	b.n	80045da <__kernel_cos+0xf2>
 8004622:	bf00      	nop
 8004624:	f3af 8000 	nop.w
 8004628:	be8838d4 	.word	0xbe8838d4
 800462c:	bda8fae9 	.word	0xbda8fae9
 8004630:	bdb4b1c4 	.word	0xbdb4b1c4
 8004634:	3e21ee9e 	.word	0x3e21ee9e
 8004638:	809c52ad 	.word	0x809c52ad
 800463c:	3e927e4f 	.word	0x3e927e4f
 8004640:	19cb1590 	.word	0x19cb1590
 8004644:	3efa01a0 	.word	0x3efa01a0
 8004648:	16c15177 	.word	0x16c15177
 800464c:	3f56c16c 	.word	0x3f56c16c
 8004650:	5555554c 	.word	0x5555554c
 8004654:	3fa55555 	.word	0x3fa55555
 8004658:	00000000 	.word	0x00000000
 800465c:	3ff00000 	.word	0x3ff00000
 8004660:	3fe00000 	.word	0x3fe00000
 8004664:	3fd33332 	.word	0x3fd33332
 8004668:	3ff00000 	.word	0x3ff00000
 800466c:	3fe90000 	.word	0x3fe90000
 8004670:	3fd20000 	.word	0x3fd20000
 8004674:	00000000 	.word	0x00000000

08004678 <__kernel_sin>:
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	ec55 4b10 	vmov	r4, r5, d0
 8004680:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004684:	b085      	sub	sp, #20
 8004686:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800468a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800468e:	4680      	mov	r8, r0
 8004690:	d205      	bcs.n	800469e <__kernel_sin+0x26>
 8004692:	4620      	mov	r0, r4
 8004694:	4629      	mov	r1, r5
 8004696:	f7fc fa09 	bl	8000aac <__aeabi_d2iz>
 800469a:	2800      	cmp	r0, #0
 800469c:	d052      	beq.n	8004744 <__kernel_sin+0xcc>
 800469e:	4622      	mov	r2, r4
 80046a0:	462b      	mov	r3, r5
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fb ff67 	bl	8000578 <__aeabi_dmul>
 80046aa:	4682      	mov	sl, r0
 80046ac:	468b      	mov	fp, r1
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4620      	mov	r0, r4
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7fb ff5f 	bl	8000578 <__aeabi_dmul>
 80046ba:	a342      	add	r3, pc, #264	@ (adr r3, 80047c4 <__kernel_sin+0x14c>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	e9cd 0100 	strd	r0, r1, [sp]
 80046c4:	4650      	mov	r0, sl
 80046c6:	4659      	mov	r1, fp
 80046c8:	f7fb ff56 	bl	8000578 <__aeabi_dmul>
 80046cc:	a33f      	add	r3, pc, #252	@ (adr r3, 80047cc <__kernel_sin+0x154>)
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f7fb fd99 	bl	8000208 <__aeabi_dsub>
 80046d6:	4652      	mov	r2, sl
 80046d8:	465b      	mov	r3, fp
 80046da:	f7fb ff4d 	bl	8000578 <__aeabi_dmul>
 80046de:	a33d      	add	r3, pc, #244	@ (adr r3, 80047d4 <__kernel_sin+0x15c>)
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f7fb fd92 	bl	800020c <__adddf3>
 80046e8:	4652      	mov	r2, sl
 80046ea:	465b      	mov	r3, fp
 80046ec:	f7fb ff44 	bl	8000578 <__aeabi_dmul>
 80046f0:	a33a      	add	r3, pc, #232	@ (adr r3, 80047dc <__kernel_sin+0x164>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb fd87 	bl	8000208 <__aeabi_dsub>
 80046fa:	4652      	mov	r2, sl
 80046fc:	465b      	mov	r3, fp
 80046fe:	f7fb ff3b 	bl	8000578 <__aeabi_dmul>
 8004702:	a338      	add	r3, pc, #224	@ (adr r3, 80047e4 <__kernel_sin+0x16c>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb fd80 	bl	800020c <__adddf3>
 800470c:	4606      	mov	r6, r0
 800470e:	460f      	mov	r7, r1
 8004710:	f1b8 0f00 	cmp.w	r8, #0
 8004714:	d11b      	bne.n	800474e <__kernel_sin+0xd6>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4650      	mov	r0, sl
 800471c:	4659      	mov	r1, fp
 800471e:	f7fb ff2b 	bl	8000578 <__aeabi_dmul>
 8004722:	a325      	add	r3, pc, #148	@ (adr r3, 80047b8 <__kernel_sin+0x140>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb fd6e 	bl	8000208 <__aeabi_dsub>
 800472c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004730:	f7fb ff22 	bl	8000578 <__aeabi_dmul>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4620      	mov	r0, r4
 800473a:	4629      	mov	r1, r5
 800473c:	f7fb fd66 	bl	800020c <__adddf3>
 8004740:	4604      	mov	r4, r0
 8004742:	460d      	mov	r5, r1
 8004744:	ec45 4b10 	vmov	d0, r4, r5
 8004748:	b005      	add	sp, #20
 800474a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004752:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <__kernel_sin+0x148>)
 8004754:	2200      	movs	r2, #0
 8004756:	f7fb ff0f 	bl	8000578 <__aeabi_dmul>
 800475a:	4632      	mov	r2, r6
 800475c:	4680      	mov	r8, r0
 800475e:	4689      	mov	r9, r1
 8004760:	463b      	mov	r3, r7
 8004762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004766:	f7fb ff07 	bl	8000578 <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4640      	mov	r0, r8
 8004770:	4649      	mov	r1, r9
 8004772:	f7fb fd49 	bl	8000208 <__aeabi_dsub>
 8004776:	4652      	mov	r2, sl
 8004778:	465b      	mov	r3, fp
 800477a:	f7fb fefd 	bl	8000578 <__aeabi_dmul>
 800477e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004782:	f7fb fd41 	bl	8000208 <__aeabi_dsub>
 8004786:	a30c      	add	r3, pc, #48	@ (adr r3, 80047b8 <__kernel_sin+0x140>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	4606      	mov	r6, r0
 800478e:	460f      	mov	r7, r1
 8004790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004794:	f7fb fef0 	bl	8000578 <__aeabi_dmul>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4630      	mov	r0, r6
 800479e:	4639      	mov	r1, r7
 80047a0:	f7fb fd34 	bl	800020c <__adddf3>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4620      	mov	r0, r4
 80047aa:	4629      	mov	r1, r5
 80047ac:	f7fb fd2c 	bl	8000208 <__aeabi_dsub>
 80047b0:	e7c6      	b.n	8004740 <__kernel_sin+0xc8>
 80047b2:	bf00      	nop
 80047b4:	f3af 8000 	nop.w
 80047b8:	55555549 	.word	0x55555549
 80047bc:	3fc55555 	.word	0x3fc55555
 80047c0:	3fe00000 	.word	0x3fe00000
 80047c4:	5acfd57c 	.word	0x5acfd57c
 80047c8:	3de5d93a 	.word	0x3de5d93a
 80047cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80047d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80047d4:	57b1fe7d 	.word	0x57b1fe7d
 80047d8:	3ec71de3 	.word	0x3ec71de3
 80047dc:	19c161d5 	.word	0x19c161d5
 80047e0:	3f2a01a0 	.word	0x3f2a01a0
 80047e4:	1110f8a6 	.word	0x1110f8a6
 80047e8:	3f811111 	.word	0x3f811111

080047ec <fabs>:
 80047ec:	ec51 0b10 	vmov	r0, r1, d0
 80047f0:	4602      	mov	r2, r0
 80047f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80047f6:	ec43 2b10 	vmov	d0, r2, r3
 80047fa:	4770      	bx	lr
 80047fc:	0000      	movs	r0, r0
	...

08004800 <scalbn>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	ec55 4b10 	vmov	r4, r5, d0
 8004806:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800480a:	4606      	mov	r6, r0
 800480c:	462b      	mov	r3, r5
 800480e:	b991      	cbnz	r1, 8004836 <scalbn+0x36>
 8004810:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004814:	4323      	orrs	r3, r4
 8004816:	d03b      	beq.n	8004890 <scalbn+0x90>
 8004818:	4b33      	ldr	r3, [pc, #204]	@ (80048e8 <scalbn+0xe8>)
 800481a:	4620      	mov	r0, r4
 800481c:	4629      	mov	r1, r5
 800481e:	2200      	movs	r2, #0
 8004820:	f7fb feaa 	bl	8000578 <__aeabi_dmul>
 8004824:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <scalbn+0xec>)
 8004826:	429e      	cmp	r6, r3
 8004828:	4604      	mov	r4, r0
 800482a:	460d      	mov	r5, r1
 800482c:	da0f      	bge.n	800484e <scalbn+0x4e>
 800482e:	a326      	add	r3, pc, #152	@ (adr r3, 80048c8 <scalbn+0xc8>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	e01e      	b.n	8004874 <scalbn+0x74>
 8004836:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800483a:	4291      	cmp	r1, r2
 800483c:	d10b      	bne.n	8004856 <scalbn+0x56>
 800483e:	4622      	mov	r2, r4
 8004840:	4620      	mov	r0, r4
 8004842:	4629      	mov	r1, r5
 8004844:	f7fb fce2 	bl	800020c <__adddf3>
 8004848:	4604      	mov	r4, r0
 800484a:	460d      	mov	r5, r1
 800484c:	e020      	b.n	8004890 <scalbn+0x90>
 800484e:	460b      	mov	r3, r1
 8004850:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004854:	3936      	subs	r1, #54	@ 0x36
 8004856:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800485a:	4296      	cmp	r6, r2
 800485c:	dd0d      	ble.n	800487a <scalbn+0x7a>
 800485e:	2d00      	cmp	r5, #0
 8004860:	a11b      	add	r1, pc, #108	@ (adr r1, 80048d0 <scalbn+0xd0>)
 8004862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004866:	da02      	bge.n	800486e <scalbn+0x6e>
 8004868:	a11b      	add	r1, pc, #108	@ (adr r1, 80048d8 <scalbn+0xd8>)
 800486a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800486e:	a318      	add	r3, pc, #96	@ (adr r3, 80048d0 <scalbn+0xd0>)
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f7fb fe80 	bl	8000578 <__aeabi_dmul>
 8004878:	e7e6      	b.n	8004848 <scalbn+0x48>
 800487a:	1872      	adds	r2, r6, r1
 800487c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004880:	428a      	cmp	r2, r1
 8004882:	dcec      	bgt.n	800485e <scalbn+0x5e>
 8004884:	2a00      	cmp	r2, #0
 8004886:	dd06      	ble.n	8004896 <scalbn+0x96>
 8004888:	f36f 531e 	bfc	r3, #20, #11
 800488c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004890:	ec45 4b10 	vmov	d0, r4, r5
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800489a:	da08      	bge.n	80048ae <scalbn+0xae>
 800489c:	2d00      	cmp	r5, #0
 800489e:	a10a      	add	r1, pc, #40	@ (adr r1, 80048c8 <scalbn+0xc8>)
 80048a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048a4:	dac3      	bge.n	800482e <scalbn+0x2e>
 80048a6:	a10e      	add	r1, pc, #56	@ (adr r1, 80048e0 <scalbn+0xe0>)
 80048a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048ac:	e7bf      	b.n	800482e <scalbn+0x2e>
 80048ae:	3236      	adds	r2, #54	@ 0x36
 80048b0:	f36f 531e 	bfc	r3, #20, #11
 80048b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80048b8:	4620      	mov	r0, r4
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <scalbn+0xf0>)
 80048bc:	4629      	mov	r1, r5
 80048be:	2200      	movs	r2, #0
 80048c0:	e7d8      	b.n	8004874 <scalbn+0x74>
 80048c2:	bf00      	nop
 80048c4:	f3af 8000 	nop.w
 80048c8:	c2f8f359 	.word	0xc2f8f359
 80048cc:	01a56e1f 	.word	0x01a56e1f
 80048d0:	8800759c 	.word	0x8800759c
 80048d4:	7e37e43c 	.word	0x7e37e43c
 80048d8:	8800759c 	.word	0x8800759c
 80048dc:	fe37e43c 	.word	0xfe37e43c
 80048e0:	c2f8f359 	.word	0xc2f8f359
 80048e4:	81a56e1f 	.word	0x81a56e1f
 80048e8:	43500000 	.word	0x43500000
 80048ec:	ffff3cb0 	.word	0xffff3cb0
 80048f0:	3c900000 	.word	0x3c900000
 80048f4:	00000000 	.word	0x00000000

080048f8 <floor>:
 80048f8:	ec51 0b10 	vmov	r0, r1, d0
 80048fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004904:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004908:	2e13      	cmp	r6, #19
 800490a:	460c      	mov	r4, r1
 800490c:	4605      	mov	r5, r0
 800490e:	4680      	mov	r8, r0
 8004910:	dc34      	bgt.n	800497c <floor+0x84>
 8004912:	2e00      	cmp	r6, #0
 8004914:	da17      	bge.n	8004946 <floor+0x4e>
 8004916:	a332      	add	r3, pc, #200	@ (adr r3, 80049e0 <floor+0xe8>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f7fb fc76 	bl	800020c <__adddf3>
 8004920:	2200      	movs	r2, #0
 8004922:	2300      	movs	r3, #0
 8004924:	f7fc f8b8 	bl	8000a98 <__aeabi_dcmpgt>
 8004928:	b150      	cbz	r0, 8004940 <floor+0x48>
 800492a:	2c00      	cmp	r4, #0
 800492c:	da55      	bge.n	80049da <floor+0xe2>
 800492e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004932:	432c      	orrs	r4, r5
 8004934:	2500      	movs	r5, #0
 8004936:	42ac      	cmp	r4, r5
 8004938:	4c2b      	ldr	r4, [pc, #172]	@ (80049e8 <floor+0xf0>)
 800493a:	bf08      	it	eq
 800493c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004940:	4621      	mov	r1, r4
 8004942:	4628      	mov	r0, r5
 8004944:	e023      	b.n	800498e <floor+0x96>
 8004946:	4f29      	ldr	r7, [pc, #164]	@ (80049ec <floor+0xf4>)
 8004948:	4137      	asrs	r7, r6
 800494a:	ea01 0307 	and.w	r3, r1, r7
 800494e:	4303      	orrs	r3, r0
 8004950:	d01d      	beq.n	800498e <floor+0x96>
 8004952:	a323      	add	r3, pc, #140	@ (adr r3, 80049e0 <floor+0xe8>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fc58 	bl	800020c <__adddf3>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	f7fc f89a 	bl	8000a98 <__aeabi_dcmpgt>
 8004964:	2800      	cmp	r0, #0
 8004966:	d0eb      	beq.n	8004940 <floor+0x48>
 8004968:	2c00      	cmp	r4, #0
 800496a:	bfbe      	ittt	lt
 800496c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004970:	4133      	asrlt	r3, r6
 8004972:	18e4      	addlt	r4, r4, r3
 8004974:	ea24 0407 	bic.w	r4, r4, r7
 8004978:	2500      	movs	r5, #0
 800497a:	e7e1      	b.n	8004940 <floor+0x48>
 800497c:	2e33      	cmp	r6, #51	@ 0x33
 800497e:	dd0a      	ble.n	8004996 <floor+0x9e>
 8004980:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004984:	d103      	bne.n	800498e <floor+0x96>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	f7fb fc3f 	bl	800020c <__adddf3>
 800498e:	ec41 0b10 	vmov	d0, r0, r1
 8004992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004996:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800499a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800499e:	40df      	lsrs	r7, r3
 80049a0:	4207      	tst	r7, r0
 80049a2:	d0f4      	beq.n	800498e <floor+0x96>
 80049a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80049e0 <floor+0xe8>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f7fb fc2f 	bl	800020c <__adddf3>
 80049ae:	2200      	movs	r2, #0
 80049b0:	2300      	movs	r3, #0
 80049b2:	f7fc f871 	bl	8000a98 <__aeabi_dcmpgt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d0c2      	beq.n	8004940 <floor+0x48>
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	da0a      	bge.n	80049d4 <floor+0xdc>
 80049be:	2e14      	cmp	r6, #20
 80049c0:	d101      	bne.n	80049c6 <floor+0xce>
 80049c2:	3401      	adds	r4, #1
 80049c4:	e006      	b.n	80049d4 <floor+0xdc>
 80049c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80049ca:	2301      	movs	r3, #1
 80049cc:	40b3      	lsls	r3, r6
 80049ce:	441d      	add	r5, r3
 80049d0:	4545      	cmp	r5, r8
 80049d2:	d3f6      	bcc.n	80049c2 <floor+0xca>
 80049d4:	ea25 0507 	bic.w	r5, r5, r7
 80049d8:	e7b2      	b.n	8004940 <floor+0x48>
 80049da:	2500      	movs	r5, #0
 80049dc:	462c      	mov	r4, r5
 80049de:	e7af      	b.n	8004940 <floor+0x48>
 80049e0:	8800759c 	.word	0x8800759c
 80049e4:	7e37e43c 	.word	0x7e37e43c
 80049e8:	bff00000 	.word	0xbff00000
 80049ec:	000fffff 	.word	0x000fffff

080049f0 <_init>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr

080049fc <_fini>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr
