
lab4_part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000790c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007acc  08007acc  00008acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c64  08007c64  000090e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007c64  08007c64  00008c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c6c  08007c6c  000090e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c6c  08007c6c  00008c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c70  08007c70  00008c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08007c74  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e4  200000e0  08007d54  000090e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013c4  08007d54  000093c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e312  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f8  00000000  00000000  00027422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  0002b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001486  00000000  00000000  0002d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec02  00000000  00000000  0002e72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000208f5  00000000  00000000  0005d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a8f4  00000000  00000000  0007dc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007254  00000000  00000000  0019855c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0019f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007ab4 	.word	0x08007ab4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000e4 	.word	0x200000e4
 80001fc:	08007ab4 	.word	0x08007ab4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200000fc 	.word	0x200000fc
 80005d0:	20000150 	.word	0x20000150

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b096      	sub	sp, #88	@ 0x58
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f001 fa83 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f86d 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f949 	bl	8000878 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005e6:	f000 f8bb 	bl	8000760 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005ea:	f000 f8f9 	bl	80007e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (BSP_HSENSOR_Init() != 0)  return ERRNO;
 80005ee:	f000 fc0d 	bl	8000e0c <BSP_HSENSOR_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <main+0x28>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e04f      	b.n	800069c <main+0xc8>

  if (BSP_MAGNETO_Init() != 0)  return ERRNO;
 80005fc:	f000 fc34 	bl	8000e68 <BSP_MAGNETO_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <main+0x36>
 8000606:	2301      	movs	r3, #1
 8000608:	e048      	b.n	800069c <main+0xc8>

  if (BSP_PSENSOR_Init() != 0)  return ERRNO;
 800060a:	f000 fc71 	bl	8000ef0 <BSP_PSENSOR_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <main+0x44>
 8000614:	2301      	movs	r3, #1
 8000616:	e041      	b.n	800069c <main+0xc8>

  if (BSP_ACCELERO_Init() != 0) return ERRNO;
 8000618:	f000 fba2 	bl	8000d60 <BSP_ACCELERO_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <main+0x52>
 8000622:	2301      	movs	r3, #1
 8000624:	e03a      	b.n	800069c <main+0xc8>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of AlternateSensor */
  osThreadDef(AlternateSensor, StartAlternateSensor, osPriorityNormal, 0, 128);
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <main+0xd0>)
 8000628:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800062c:	461d      	mov	r5, r3
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AlternateSensorHandle = osThreadCreate(osThread(AlternateSensor), NULL);
 800063a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f005 fb5a 	bl	8005cfa <osThreadCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <main+0xd4>)
 800064a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TransmitData */
  osThreadDef(TransmitData, StartTransmitData, osPriorityIdle, 0, 128);
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <main+0xd8>)
 800064e:	f107 0420 	add.w	r4, r7, #32
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitDataHandle = osThreadCreate(osThread(TransmitData), NULL);
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fb47 	bl	8005cfa <osThreadCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a10      	ldr	r2, [pc, #64]	@ (80006b0 <main+0xdc>)
 8000670:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadSensorData */
  osThreadDef(ReadSensorData, StartReadSensorData, osPriorityIdle, 0, 128);
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <main+0xe0>)
 8000674:	1d3c      	adds	r4, r7, #4
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadSensorDataHandle = osThreadCreate(osThread(ReadSensorData), NULL);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f005 fb36 	bl	8005cfa <osThreadCreate>
 800068e:	4603      	mov	r3, r0
 8000690:	4a09      	ldr	r2, [pc, #36]	@ (80006b8 <main+0xe4>)
 8000692:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000694:	f005 fb2a 	bl	8005cec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800069c:	4618      	mov	r0, r3
 800069e:	3758      	adds	r7, #88	@ 0x58
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bdb0      	pop	{r4, r5, r7, pc}
 80006a4:	08007adc 	.word	0x08007adc
 80006a8:	20000438 	.word	0x20000438
 80006ac:	08007b08 	.word	0x08007b08
 80006b0:	2000043c 	.word	0x2000043c
 80006b4:	08007b34 	.word	0x08007b34
 80006b8:	20000440 	.word	0x20000440

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b096      	sub	sp, #88	@ 0x58
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2244      	movs	r2, #68	@ 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fd72 	bl	80071b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006de:	2000      	movs	r0, #0
 80006e0:	f002 fc64 	bl	8002fac <HAL_PWREx_ControlVoltageScaling>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006ea:	f000 f9e3 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ee:	2310      	movs	r3, #16
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006fa:	2360      	movs	r3, #96	@ 0x60
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000702:	2301      	movs	r3, #1
 8000704:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800070a:	233c      	movs	r3, #60	@ 0x3c
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fce8 	bl	80030f4 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800072a:	f000 f9c3 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f003 f8ee 	bl	8003928 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000752:	f000 f9af 	bl	8000ab4 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3758      	adds	r7, #88	@ 0x58
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_I2C2_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	@ (80007d8 <MX_I2C2_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_I2C2_Init+0x74>)
 800076c:	4a1b      	ldr	r2, [pc, #108]	@ (80007dc <MX_I2C2_Init+0x7c>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_I2C2_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_I2C2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_I2C2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <MX_I2C2_Init+0x74>)
 800079c:	f001 fd93 	bl	80022c6 <HAL_I2C_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 f985 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <MX_I2C2_Init+0x74>)
 80007ae:	f002 fb45 	bl	8002e3c <HAL_I2CEx_ConfigAnalogFilter>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f97c 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_I2C2_Init+0x74>)
 80007c0:	f002 fb87 	bl	8002ed2 <HAL_I2CEx_ConfigDigitalFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f973 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000350 	.word	0x20000350
 80007d8:	40005800 	.word	0x40005800
 80007dc:	30a175ab 	.word	0x30a175ab

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 80007e6:	4a23      	ldr	r2, [pc, #140]	@ (8000874 <MX_USART1_UART_Init+0x94>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ea:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000828:	4811      	ldr	r0, [pc, #68]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 800082a:	f004 fb4b 	bl	8004ec4 <HAL_UART_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 f93e 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 800083c:	f005 f974 	bl	8005b28 <HAL_UARTEx_SetTxFifoThreshold>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000846:	f000 f935 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4808      	ldr	r0, [pc, #32]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 800084e:	f005 f9a9 	bl	8005ba4 <HAL_UARTEx_SetRxFifoThreshold>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f92c 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_USART1_UART_Init+0x90>)
 800085e:	f005 f92a 	bl	8005ab6 <HAL_UARTEx_DisableFifoMode>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000868:	f000 f924 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200003a4 	.word	0x200003a4
 8000874:	40013800 	.word	0x40013800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b23      	ldr	r3, [pc, #140]	@ (800091c <MX_GPIO_Init+0xa4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a22      	ldr	r2, [pc, #136]	@ (800091c <MX_GPIO_Init+0xa4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <MX_GPIO_Init+0xa4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_GPIO_Init+0xa4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <MX_GPIO_Init+0xa4>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_GPIO_Init+0xa4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c4:	4816      	ldr	r0, [pc, #88]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008c6:	f001 fcc3 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4810      	ldr	r0, [pc, #64]	@ (8000924 <MX_GPIO_Init+0xac>)
 80008e2:	f001 fa19 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <MX_GPIO_Init+0xa8>)
 8000900:	f001 fa0a 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2105      	movs	r1, #5
 8000908:	2028      	movs	r0, #40	@ 0x28
 800090a:	f001 f9db 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800090e:	2028      	movs	r0, #40	@ 0x28
 8000910:	f001 f9f4 	bl	8001cfc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400
 8000924:	48000800 	.word	0x48000800

08000928 <StartAlternateSensor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAlternateSensor */
void StartAlternateSensor(void const * argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(250);
 8000930:	20fa      	movs	r0, #250	@ 0xfa
 8000932:	f005 fa2e 	bl	8005d92 <osDelay>
	  if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET) {
 8000936:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093a:	4810      	ldr	r0, [pc, #64]	@ (800097c <StartAlternateSensor+0x54>)
 800093c:	f001 fc70 	bl	8002220 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d1f4      	bne.n	8000930 <StartAlternateSensor+0x8>
		  sensorIndex = (sensorIndex + 1) % 4;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <StartAlternateSensor+0x58>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3301      	adds	r3, #1
 800094e:	425a      	negs	r2, r3
 8000950:	f003 0303 	and.w	r3, r3, #3
 8000954:	f002 0203 	and.w	r2, r2, #3
 8000958:	bf58      	it	pl
 800095a:	4253      	negpl	r3, r2
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <StartAlternateSensor+0x58>)
 8000960:	701a      	strb	r2, [r3, #0]
		  while (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET) {
 8000962:	e002      	b.n	800096a <StartAlternateSensor+0x42>
			  osDelay(100);
 8000964:	2064      	movs	r0, #100	@ 0x64
 8000966:	f005 fa14 	bl	8005d92 <osDelay>
		  while (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET) {
 800096a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096e:	4803      	ldr	r0, [pc, #12]	@ (800097c <StartAlternateSensor+0x54>)
 8000970:	f001 fc56 	bl	8002220 <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d0f4      	beq.n	8000964 <StartAlternateSensor+0x3c>
	  osDelay(250);
 800097a:	e7d9      	b.n	8000930 <StartAlternateSensor+0x8>
 800097c:	48000800 	.word	0x48000800
 8000980:	200004b6 	.word	0x200004b6

08000984 <StartTransmitData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitData */
void StartTransmitData(void const * argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitData */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800098c:	2064      	movs	r0, #100	@ 0x64
 800098e:	f005 fa00 	bl	8005d92 <osDelay>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000992:	4806      	ldr	r0, [pc, #24]	@ (80009ac <StartTransmitData+0x28>)
 8000994:	f7ff fc34 	bl	8000200 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	2364      	movs	r3, #100	@ 0x64
 800099e:	4903      	ldr	r1, [pc, #12]	@ (80009ac <StartTransmitData+0x28>)
 80009a0:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <StartTransmitData+0x2c>)
 80009a2:	f004 fadf 	bl	8004f64 <HAL_UART_Transmit>
    osDelay(100);
 80009a6:	bf00      	nop
 80009a8:	e7f0      	b.n	800098c <StartTransmitData+0x8>
 80009aa:	bf00      	nop
 80009ac:	20000444 	.word	0x20000444
 80009b0:	200003a4 	.word	0x200003a4

080009b4 <StartReadSensorData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensorData */
void StartReadSensorData(void const * argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensorData */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80009bc:	2064      	movs	r0, #100	@ 0x64
 80009be:	f005 f9e8 	bl	8005d92 <osDelay>
	switch (sensorIndex) {
 80009c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a70 <StartReadSensorData+0xbc>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d8f7      	bhi.n	80009bc <StartReadSensorData+0x8>
 80009cc:	a201      	add	r2, pc, #4	@ (adr r2, 80009d4 <StartReadSensorData+0x20>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009e5 	.word	0x080009e5
 80009d8:	080009ff 	.word	0x080009ff
 80009dc:	08000a29 	.word	0x08000a29
 80009e0:	08000a43 	.word	0x08000a43
	case 0:
		sprintf(buffer, "humidity: %d\r\n", (int)BSP_HSENSOR_ReadHumidity());
 80009e4:	f000 fa32 	bl	8000e4c <BSP_HSENSOR_ReadHumidity>
 80009e8:	eef0 7a40 	vmov.f32	s15, s0
 80009ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f0:	ee17 2a90 	vmov	r2, s15
 80009f4:	491f      	ldr	r1, [pc, #124]	@ (8000a74 <StartReadSensorData+0xc0>)
 80009f6:	4820      	ldr	r0, [pc, #128]	@ (8000a78 <StartReadSensorData+0xc4>)
 80009f8:	f006 fbbc 	bl	8007174 <siprintf>
		break;
 80009fc:	e037      	b.n	8000a6e <StartReadSensorData+0xba>

	case 1:
		BSP_MAGNETO_GetXYZ(magnetoXYZ);
 80009fe:	481f      	ldr	r0, [pc, #124]	@ (8000a7c <StartReadSensorData+0xc8>)
 8000a00:	f000 fa5e 	bl	8000ec0 <BSP_MAGNETO_GetXYZ>
		sprintf(buffer, "magnetometer: X:%d, Y:%d, Z:%d\r\n", magnetoXYZ[0], magnetoXYZ[1], magnetoXYZ[2]);
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <StartReadSensorData+0xc8>)
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <StartReadSensorData+0xc8>)
 8000a0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a12:	4619      	mov	r1, r3
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <StartReadSensorData+0xc8>)
 8000a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	4918      	ldr	r1, [pc, #96]	@ (8000a80 <StartReadSensorData+0xcc>)
 8000a20:	4815      	ldr	r0, [pc, #84]	@ (8000a78 <StartReadSensorData+0xc4>)
 8000a22:	f006 fba7 	bl	8007174 <siprintf>
		break;
 8000a26:	e022      	b.n	8000a6e <StartReadSensorData+0xba>

	case 2:
		sprintf(buffer, "pressure: %d\r\n", (int)BSP_PSENSOR_ReadPressure());
 8000a28:	f000 fa82 	bl	8000f30 <BSP_PSENSOR_ReadPressure>
 8000a2c:	eef0 7a40 	vmov.f32	s15, s0
 8000a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a34:	ee17 2a90 	vmov	r2, s15
 8000a38:	4912      	ldr	r1, [pc, #72]	@ (8000a84 <StartReadSensorData+0xd0>)
 8000a3a:	480f      	ldr	r0, [pc, #60]	@ (8000a78 <StartReadSensorData+0xc4>)
 8000a3c:	f006 fb9a 	bl	8007174 <siprintf>
		break;
 8000a40:	e015      	b.n	8000a6e <StartReadSensorData+0xba>

	case 3:
		BSP_ACCELERO_AccGetXYZ(acceleroXYZ);
 8000a42:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <StartReadSensorData+0xd4>)
 8000a44:	f000 f9ca 	bl	8000ddc <BSP_ACCELERO_AccGetXYZ>
		sprintf(buffer, "accelerometer: X:%d, Y:%d, Z:%d\r\n", acceleroXYZ[0], acceleroXYZ[1], acceleroXYZ[2]);
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <StartReadSensorData+0xd4>)
 8000a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <StartReadSensorData+0xd4>)
 8000a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <StartReadSensorData+0xd4>)
 8000a5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	460b      	mov	r3, r1
 8000a62:	490a      	ldr	r1, [pc, #40]	@ (8000a8c <StartReadSensorData+0xd8>)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <StartReadSensorData+0xc4>)
 8000a66:	f006 fb85 	bl	8007174 <siprintf>
		break;
 8000a6a:	bf00      	nop
 8000a6c:	e7a6      	b.n	80009bc <StartReadSensorData+0x8>
    osDelay(100);
 8000a6e:	e7a5      	b.n	80009bc <StartReadSensorData+0x8>
 8000a70:	200004b6 	.word	0x200004b6
 8000a74:	08007b50 	.word	0x08007b50
 8000a78:	20000444 	.word	0x20000444
 8000a7c:	200004a8 	.word	0x200004a8
 8000a80:	08007b60 	.word	0x08007b60
 8000a84:	08007b84 	.word	0x08007b84
 8000a88:	200004b0 	.word	0x200004b0
 8000a8c:	08007b94 	.word	0x08007b94

08000a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa2:	f001 f837 	bl	8001b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40001000 	.word	0x40001000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a26      	ldr	r2, [pc, #152]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ae0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ae4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ae6:	2312      	movs	r3, #18
 8000ae8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000af2:	2304      	movs	r3, #4
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <I2Cx_MspInit+0xac>)
 8000afe:	f001 f90b 	bl	8001d18 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4818      	ldr	r0, [pc, #96]	@ (8000b6c <I2Cx_MspInit+0xac>)
 8000b0a:	f001 f905 	bl	8001d18 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000b14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b30:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b36:	4a0c      	ldr	r2, [pc, #48]	@ (8000b68 <I2Cx_MspInit+0xa8>)
 8000b38:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000b3c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	2021      	movs	r0, #33	@ 0x21
 8000b44:	f001 f8be 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000b48:	2021      	movs	r0, #33	@ 0x21
 8000b4a:	f001 f8d7 	bl	8001cfc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	2022      	movs	r0, #34	@ 0x22
 8000b54:	f001 f8b6 	bl	8001cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000b58:	2022      	movs	r0, #34	@ 0x22
 8000b5a:	f001 f8cf 	bl	8001cfc <HAL_NVIC_EnableIRQ>
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000400 	.word	0x48000400

08000b70 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <I2Cx_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <I2Cx_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff89 	bl	8000ac0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f001 fb89 	bl	80022c6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f002 f940 	bl	8002e3c <HAL_I2CEx_ConfigAnalogFilter>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005800 	.word	0x40005800
 8000bc8:	00702681 	.word	0x00702681

08000bcc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	4608      	mov	r0, r1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4603      	mov	r3, r0
 8000bdc:	72fb      	strb	r3, [r7, #11]
 8000bde:	460b      	mov	r3, r1
 8000be0:	813b      	strh	r3, [r7, #8]
 8000be2:	4613      	mov	r3, r2
 8000be4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000bea:	7afb      	ldrb	r3, [r7, #11]
 8000bec:	b299      	uxth	r1, r3
 8000bee:	88f8      	ldrh	r0, [r7, #6]
 8000bf0:	893a      	ldrh	r2, [r7, #8]
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	4603      	mov	r3, r0
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f001 fd3e 	bl	8002684 <HAL_I2C_Mem_Read>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000c12:	7afb      	ldrb	r3, [r7, #11]
 8000c14:	4619      	mov	r1, r3
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f000 f832 	bl	8000c80 <I2Cx_Error>
  }
  return status;
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b08a      	sub	sp, #40	@ 0x28
 8000c2a:	af04      	add	r7, sp, #16
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	4611      	mov	r1, r2
 8000c32:	461a      	mov	r2, r3
 8000c34:	4603      	mov	r3, r0
 8000c36:	72fb      	strb	r3, [r7, #11]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	813b      	strh	r3, [r7, #8]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c44:	7afb      	ldrb	r3, [r7, #11]
 8000c46:	b299      	uxth	r1, r3
 8000c48:	88f8      	ldrh	r0, [r7, #6]
 8000c4a:	893a      	ldrh	r2, [r7, #8]
 8000c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c50:	9302      	str	r3, [sp, #8]
 8000c52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f001 fbfd 	bl	800245c <HAL_I2C_Mem_Write>
 8000c62:	4603      	mov	r3, r0
 8000c64:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000c6c:	7afb      	ldrb	r3, [r7, #11]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f805 	bl	8000c80 <I2Cx_Error>
  }
  return status;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f001 fbb5 	bl	80023fc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff6c 	bl	8000b70 <I2Cx_Init>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <SENSOR_IO_Init+0x10>)
 8000ca6:	f7ff ff63 	bl	8000b70 <I2Cx_Init>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200004b8 	.word	0x200004b8

08000cb4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	79f9      	ldrb	r1, [r7, #7]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	1d7b      	adds	r3, r7, #5
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <SENSOR_IO_Write+0x30>)
 8000cd8:	f7ff ffa5 	bl	8000c26 <I2Cx_WriteMultiple>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200004b8 	.word	0x200004b8

08000ce8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	79f9      	ldrb	r1, [r7, #7]
 8000d02:	2301      	movs	r3, #1
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <SENSOR_IO_Read+0x38>)
 8000d10:	f7ff ff5c 	bl	8000bcc <I2Cx_ReadMultiple>

  return read_value;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200004b8 	.word	0x200004b8

08000d24 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	603a      	str	r2, [r7, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	460b      	mov	r3, r1
 8000d34:	71bb      	strb	r3, [r7, #6]
 8000d36:	4613      	mov	r3, r2
 8000d38:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	79f9      	ldrb	r1, [r7, #7]
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <SENSOR_IO_ReadMultiple+0x38>)
 8000d4c:	f7ff ff3e 	bl	8000bcc <I2Cx_ReadMultiple>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200004b8 	.word	0x200004b8

08000d60 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <BSP_ACCELERO_Init+0x74>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4798      	blx	r3
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b6a      	cmp	r3, #106	@ 0x6a
 8000d78:	d002      	beq.n	8000d80 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e024      	b.n	8000dca <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <BSP_ACCELERO_Init+0x78>)
 8000d82:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <BSP_ACCELERO_Init+0x74>)
 8000d84:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8000d86:	2330      	movs	r3, #48	@ 0x30
 8000d88:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000d92:	2340      	movs	r3, #64	@ 0x40
 8000d94:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8000d9e:	797a      	ldrb	r2, [r7, #5]
 8000da0:	7abb      	ldrb	r3, [r7, #10]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8000da8:	7a3b      	ldrb	r3, [r7, #8]
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <BSP_ACCELERO_Init+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	89ba      	ldrh	r2, [r7, #12]
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4798      	blx	r3
  }  

  return ret;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000050 	.word	0x20000050
 8000dd8:	2000050c 	.word	0x2000050c

08000ddc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d009      	beq.n	8000e00 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8000df6:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	4798      	blx	r3
    }
  }
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000050c 	.word	0x2000050c

08000e0c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <BSP_HSENSOR_Init+0x38>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	20be      	movs	r0, #190	@ 0xbe
 8000e18:	4798      	blx	r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2bbc      	cmp	r3, #188	@ 0xbc
 8000e1e:	d002      	beq.n	8000e26 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	e009      	b.n	8000e3a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <BSP_HSENSOR_Init+0x3c>)
 8000e28:	4a06      	ldr	r2, [pc, #24]	@ (8000e44 <BSP_HSENSOR_Init+0x38>)
 8000e2a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <BSP_HSENSOR_Init+0x3c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	20be      	movs	r0, #190	@ 0xbe
 8000e34:	4798      	blx	r3
    ret = HSENSOR_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000004 	.word	0x20000004
 8000e48:	20000510 	.word	0x20000510

08000e4c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <BSP_HSENSOR_ReadHumidity+0x18>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	20be      	movs	r0, #190	@ 0xbe
 8000e58:	4798      	blx	r3
 8000e5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000510 	.word	0x20000510

08000e68 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <BSP_MAGNETO_Init+0x50>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	4798      	blx	r3
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000e7c:	d002      	beq.n	8000e84 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e013      	b.n	8000eac <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <BSP_MAGNETO_Init+0x54>)
 8000e86:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb8 <BSP_MAGNETO_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8000e8a:	2358      	movs	r3, #88	@ 0x58
 8000e8c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8000e96:	2308      	movs	r3, #8
 8000e98:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8000e9a:	2340      	movs	r3, #64	@ 0x40
 8000e9c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <BSP_MAGNETO_Init+0x54>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	463a      	mov	r2, r7
 8000ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eaa:	4798      	blx	r3
  } 

  return ret;  
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000010 	.word	0x20000010
 8000ebc:	20000514 	.word	0x20000514

08000ec0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <BSP_MAGNETO_GetXYZ+0x2c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d009      	beq.n	8000ee4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <BSP_MAGNETO_GetXYZ+0x2c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <BSP_MAGNETO_GetXYZ+0x2c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	4798      	blx	r3
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000514 	.word	0x20000514

08000ef0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <BSP_PSENSOR_Init+0x38>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	20ba      	movs	r0, #186	@ 0xba
 8000efc:	4798      	blx	r3
 8000efe:	4603      	mov	r3, r0
 8000f00:	2bb1      	cmp	r3, #177	@ 0xb1
 8000f02:	d002      	beq.n	8000f0a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e009      	b.n	8000f1e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <BSP_PSENSOR_Init+0x3c>)
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <BSP_PSENSOR_Init+0x38>)
 8000f0e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <BSP_PSENSOR_Init+0x3c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	20ba      	movs	r0, #186	@ 0xba
 8000f18:	4798      	blx	r3
    ret = PSENSOR_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000044 	.word	0x20000044
 8000f2c:	20000518 	.word	0x20000518

08000f30 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <BSP_PSENSOR_ReadPressure+0x18>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	20ba      	movs	r0, #186	@ 0xba
 8000f3c:	4798      	blx	r3
 8000f3e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f42:	eeb0 0a67 	vmov.f32	s0, s15
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000518 	.word	0x20000518

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f56:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	210f      	movs	r1, #15
 8000f86:	f06f 0001 	mvn.w	r0, #1
 8000f8a:	f000 fe9b 	bl	8001cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2294      	movs	r2, #148	@ 0x94
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f006 f8f9 	bl	80071b4 <memset>
  if(hi2c->Instance==I2C2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a21      	ldr	r2, [pc, #132]	@ (800104c <HAL_I2C_MspInit+0xb0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d13b      	bne.n	8001044 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 ff95 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fe4:	f7ff fd66 	bl	8000ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_I2C_MspInit+0xb4>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_I2C_MspInit+0xb4>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_I2C_MspInit+0xb4>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001000:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001004:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001008:	2312      	movs	r3, #18
 800100a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800101a:	2304      	movs	r3, #4
 800101c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	@ (8001054 <HAL_I2C_MspInit+0xb8>)
 8001028:	f000 fe76 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_I2C_MspInit+0xb4>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <HAL_I2C_MspInit+0xb4>)
 8001032:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001036:	6593      	str	r3, [r2, #88]	@ 0x58
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <HAL_I2C_MspInit+0xb4>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001044:	bf00      	nop
 8001046:	37b8      	adds	r7, #184	@ 0xb8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005800 	.word	0x40005800
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_I2C_MspDeInit+0x3c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10f      	bne.n	800108a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_I2C_MspDeInit+0x40>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_I2C_MspDeInit+0x40>)
 8001070:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001074:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001076:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107a:	4808      	ldr	r0, [pc, #32]	@ (800109c <HAL_I2C_MspDeInit+0x44>)
 800107c:	f000 ffde 	bl	800203c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001080:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_I2C_MspDeInit+0x44>)
 8001086:	f000 ffd9 	bl	800203c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40005800 	.word	0x40005800
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ae      	sub	sp, #184	@ 0xb8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2294      	movs	r2, #148	@ 0x94
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f006 f877 	bl	80071b4 <memset>
  if(huart->Instance==USART1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <HAL_UART_MspInit+0xb0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d13a      	bne.n	8001146 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010d4:	2300      	movs	r3, #0
 80010d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 ff13 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f7ff fce4 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_UART_MspInit+0xb4>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f0:	4a18      	ldr	r2, [pc, #96]	@ (8001154 <HAL_UART_MspInit+0xb4>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_UART_MspInit+0xb4>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_UART_MspInit+0xb4>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <HAL_UART_MspInit+0xb4>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_UART_MspInit+0xb4>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800111c:	23c0      	movs	r3, #192	@ 0xc0
 800111e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001134:	2307      	movs	r3, #7
 8001136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_UART_MspInit+0xb8>)
 8001142:	f000 fde9 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	37b8      	adds	r7, #184	@ 0xb8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40013800 	.word	0x40013800
 8001154:	40021000 	.word	0x40021000
 8001158:	48000400 	.word	0x48000400

0800115c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	@ 0x38
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800116a:	4b34      	ldr	r3, [pc, #208]	@ (800123c <HAL_InitTick+0xe0>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116e:	4a33      	ldr	r2, [pc, #204]	@ (800123c <HAL_InitTick+0xe0>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	6593      	str	r3, [r2, #88]	@ 0x58
 8001176:	4b31      	ldr	r3, [pc, #196]	@ (800123c <HAL_InitTick+0xe0>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001182:	f107 0210 	add.w	r2, r7, #16
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fdc9 	bl	8003d24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800119c:	f002 fd96 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80011a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80011a2:	e004      	b.n	80011ae <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011a4:	f002 fd92 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80011a8:	4603      	mov	r3, r0
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b0:	4a23      	ldr	r2, [pc, #140]	@ (8001240 <HAL_InitTick+0xe4>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	3b01      	subs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <HAL_InitTick+0xe8>)
 80011be:	4a22      	ldr	r2, [pc, #136]	@ (8001248 <HAL_InitTick+0xec>)
 80011c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_InitTick+0xe8>)
 80011c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <HAL_InitTick+0xe8>)
 80011cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <HAL_InitTick+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_InitTick+0xe8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_InitTick+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011e2:	4818      	ldr	r0, [pc, #96]	@ (8001244 <HAL_InitTick+0xe8>)
 80011e4:	f003 fba8 	bl	8004938 <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d11b      	bne.n	800122e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <HAL_InitTick+0xe8>)
 80011f8:	f003 fc00 	bl	80049fc <HAL_TIM_Base_Start_IT>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001202:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001206:	2b00      	cmp	r3, #0
 8001208:	d111      	bne.n	800122e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800120a:	2036      	movs	r0, #54	@ 0x36
 800120c:	f000 fd76 	bl	8001cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	d808      	bhi.n	8001228 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001216:	2200      	movs	r2, #0
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	2036      	movs	r0, #54	@ 0x36
 800121c:	f000 fd52 	bl	8001cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <HAL_InitTick+0xf0>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e002      	b.n	800122e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800122e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001232:	4618      	mov	r0, r3
 8001234:	3738      	adds	r7, #56	@ 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
 8001240:	431bde83 	.word	0x431bde83
 8001244:	2000051c 	.word	0x2000051c
 8001248:	40001000 	.word	0x40001000
 800124c:	20000084 	.word	0x20000084

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800128a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800128e:	f000 fff7 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <TIM6_DAC_IRQHandler+0x10>)
 800129e:	f003 fc1d 	bl	8004adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000051c 	.word	0x2000051c

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f005 ff72 	bl	80071c4 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200a0000 	.word	0x200a0000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000568 	.word	0x20000568
 8001314:	200013c8 	.word	0x200013c8

08001318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001374 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001340:	f7ff ffea 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <LoopForever+0x6>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <LoopForever+0xe>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	@ (8001388 <LoopForever+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f005 ff31 	bl	80071d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136e:	f7ff f931 	bl	80005d4 <main>

08001372 <LoopForever>:

LoopForever:
    b LoopForever
 8001372:	e7fe      	b.n	8001372 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001374:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001380:	08007c74 	.word	0x08007c74
  ldr r2, =_sbss
 8001384:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001388:	200013c4 	.word	0x200013c4

0800138c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_IRQHandler>

0800138e <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2120      	movs	r1, #32
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fca2 	bl	8000ce8 <SENSOR_IO_Read>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f023 0304 	bic.w	r3, r3, #4
 80013ae:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ce:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	2120      	movs	r1, #32
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc6b 	bl	8000cb4 <SENSOR_IO_Write>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80013f4:	f7ff fc54 	bl	8000ca0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	210f      	movs	r1, #15
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fc72 	bl	8000ce8 <SENSOR_IO_Read>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	b2d8      	uxtb	r0, r3
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	2302      	movs	r3, #2
 8001428:	21b0      	movs	r1, #176	@ 0xb0
 800142a:	f7ff fc7b 	bl	8000d24 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	085b      	lsrs	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	b2d8      	uxtb	r0, r3
 8001442:	f107 020c 	add.w	r2, r7, #12
 8001446:	2302      	movs	r3, #2
 8001448:	21b6      	movs	r1, #182	@ 0xb6
 800144a:	f7ff fc6b 	bl	8000d24 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	7b3b      	ldrb	r3, [r7, #12]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	b2d8      	uxtb	r0, r3
 8001460:	f107 020c 	add.w	r2, r7, #12
 8001464:	2302      	movs	r3, #2
 8001466:	21ba      	movs	r1, #186	@ 0xba
 8001468:	f7ff fc5c 	bl	8000d24 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	7b3b      	ldrb	r3, [r7, #12]
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2d8      	uxtb	r0, r3
 800147e:	f107 020c 	add.w	r2, r7, #12
 8001482:	2302      	movs	r3, #2
 8001484:	21a8      	movs	r1, #168	@ 0xa8
 8001486:	f7ff fc4d 	bl	8000d24 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800148a:	7b7b      	ldrb	r3, [r7, #13]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b21a      	sxth	r2, r3
 8001490:	7b3b      	ldrb	r3, [r7, #12]
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800149c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014aa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80014ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80014ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80014fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80014fe:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001544 <HTS221_H_ReadHumidity+0x130>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd01      	ble.n	8001510 <HTS221_H_ReadHumidity+0xfc>
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HTS221_H_ReadHumidity+0x134>)
 800150e:	e00a      	b.n	8001526 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d502      	bpl.n	8001524 <HTS221_H_ReadHumidity+0x110>
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e000      	b.n	8001526 <HTS221_H_ReadHumidity+0x112>
 8001524:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001526:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001528:	edd7 7a04 	vldr	s15, [r7, #16]
 800152c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001534:	eef0 7a66 	vmov.f32	s15, s13
}
 8001538:	eeb0 0a67 	vmov.f32	s0, s15
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	447a0000 	.word	0x447a0000
 8001548:	447a0000 	.word	0x447a0000

0800154c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	463b      	mov	r3, r7
 8001554:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001558:	783b      	ldrb	r3, [r7, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	2120      	movs	r1, #32
 800155e:	203c      	movs	r0, #60	@ 0x3c
 8001560:	f7ff fba8 	bl	8000cb4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	461a      	mov	r2, r3
 8001568:	2121      	movs	r1, #33	@ 0x21
 800156a:	203c      	movs	r0, #60	@ 0x3c
 800156c:	f7ff fba2 	bl	8000cb4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001570:	78bb      	ldrb	r3, [r7, #2]
 8001572:	461a      	mov	r2, r3
 8001574:	2122      	movs	r1, #34	@ 0x22
 8001576:	203c      	movs	r0, #60	@ 0x3c
 8001578:	f7ff fb9c 	bl	8000cb4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	461a      	mov	r2, r3
 8001580:	2123      	movs	r1, #35	@ 0x23
 8001582:	203c      	movs	r0, #60	@ 0x3c
 8001584:	f7ff fb96 	bl	8000cb4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001588:	793b      	ldrb	r3, [r7, #4]
 800158a:	461a      	mov	r2, r3
 800158c:	2124      	movs	r1, #36	@ 0x24
 800158e:	203c      	movs	r0, #60	@ 0x3c
 8001590:	f7ff fb90 	bl	8000cb4 <SENSOR_IO_Write>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80015a6:	2122      	movs	r1, #34	@ 0x22
 80015a8:	203c      	movs	r0, #60	@ 0x3c
 80015aa:	f7ff fb9d 	bl	8000ce8 <SENSOR_IO_Read>
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f023 0303 	bic.w	r3, r3, #3
 80015b8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f043 0303 	orr.w	r3, r3, #3
 80015c0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	461a      	mov	r2, r3
 80015c6:	2122      	movs	r1, #34	@ 0x22
 80015c8:	203c      	movs	r0, #60	@ 0x3c
 80015ca:	f7ff fb73 	bl	8000cb4 <SENSOR_IO_Write>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80015da:	f7ff fb61 	bl	8000ca0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80015de:	210f      	movs	r1, #15
 80015e0:	203c      	movs	r0, #60	@ 0x3c
 80015e2:	f7ff fb81 	bl	8000ce8 <SENSOR_IO_Read>
 80015e6:	4603      	mov	r3, r0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}

080015ec <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80015fa:	2122      	movs	r1, #34	@ 0x22
 80015fc:	203c      	movs	r0, #60	@ 0x3c
 80015fe:	f7ff fb73 	bl	8000ce8 <SENSOR_IO_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	f023 0320 	bic.w	r3, r3, #32
 800160c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	f043 0320 	orr.w	r3, r3, #32
 800161a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	461a      	mov	r2, r3
 8001620:	2122      	movs	r1, #34	@ 0x22
 8001622:	203c      	movs	r0, #60	@ 0x3c
 8001624:	f7ff fb46 	bl	8000cb4 <SENSOR_IO_Write>
}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001646:	2121      	movs	r1, #33	@ 0x21
 8001648:	203c      	movs	r0, #60	@ 0x3c
 800164a:	f7ff fb4d 	bl	8000ce8 <SENSOR_IO_Read>
 800164e:	4603      	mov	r3, r0
 8001650:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001652:	f107 0208 	add.w	r2, r7, #8
 8001656:	2306      	movs	r3, #6
 8001658:	21a8      	movs	r1, #168	@ 0xa8
 800165a:	203c      	movs	r0, #60	@ 0x3c
 800165c:	f7ff fb62 	bl	8000d24 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001660:	2300      	movs	r3, #0
 8001662:	77fb      	strb	r3, [r7, #31]
 8001664:	e01a      	b.n	800169c <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	3301      	adds	r3, #1
 800166c:	3320      	adds	r3, #32
 800166e:	443b      	add	r3, r7
 8001670:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	7ffa      	ldrb	r2, [r7, #31]
 800167a:	0052      	lsls	r2, r2, #1
 800167c:	3220      	adds	r2, #32
 800167e:	443a      	add	r2, r7
 8001680:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001684:	4413      	add	r3, r2
 8001686:	b29a      	uxth	r2, r3
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	b212      	sxth	r2, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	3320      	adds	r3, #32
 8001690:	443b      	add	r3, r7
 8001692:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	3301      	adds	r3, #1
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	7ffb      	ldrb	r3, [r7, #31]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d9e1      	bls.n	8001666 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80016a8:	2b60      	cmp	r3, #96	@ 0x60
 80016aa:	d013      	beq.n	80016d4 <LIS3MDL_MagReadXYZ+0xa4>
 80016ac:	2b60      	cmp	r3, #96	@ 0x60
 80016ae:	dc14      	bgt.n	80016da <LIS3MDL_MagReadXYZ+0xaa>
 80016b0:	2b40      	cmp	r3, #64	@ 0x40
 80016b2:	d00c      	beq.n	80016ce <LIS3MDL_MagReadXYZ+0x9e>
 80016b4:	2b40      	cmp	r3, #64	@ 0x40
 80016b6:	dc10      	bgt.n	80016da <LIS3MDL_MagReadXYZ+0xaa>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <LIS3MDL_MagReadXYZ+0x92>
 80016bc:	2b20      	cmp	r3, #32
 80016be:	d003      	beq.n	80016c8 <LIS3MDL_MagReadXYZ+0x98>
 80016c0:	e00b      	b.n	80016da <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <LIS3MDL_MagReadXYZ+0xf8>)
 80016c4:	61bb      	str	r3, [r7, #24]
    break;
 80016c6:	e008      	b.n	80016da <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <LIS3MDL_MagReadXYZ+0xfc>)
 80016ca:	61bb      	str	r3, [r7, #24]
    break;
 80016cc:	e005      	b.n	80016da <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <LIS3MDL_MagReadXYZ+0x100>)
 80016d0:	61bb      	str	r3, [r7, #24]
    break;
 80016d2:	e002      	b.n	80016da <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <LIS3MDL_MagReadXYZ+0x104>)
 80016d6:	61bb      	str	r3, [r7, #24]
    break;    
 80016d8:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	77fb      	strb	r3, [r7, #31]
 80016de:	e01a      	b.n	8001716 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	3320      	adds	r3, #32
 80016e6:	443b      	add	r3, r7
 80016e8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	7ffb      	ldrb	r3, [r7, #31]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001708:	ee17 2a90 	vmov	r2, s15
 800170c:	b212      	sxth	r2, r2
 800170e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001710:	7ffb      	ldrb	r3, [r7, #31]
 8001712:	3301      	adds	r3, #1
 8001714:	77fb      	strb	r3, [r7, #31]
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d9e1      	bls.n	80016e0 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	3e0f5c29 	.word	0x3e0f5c29
 800172c:	3e947ae1 	.word	0x3e947ae1
 8001730:	3edc28f6 	.word	0x3edc28f6
 8001734:	3f147ae1 	.word	0x3f147ae1

08001738 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f879 	bl	800183c <LPS22HB_Init>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001760:	f7ff fa9e 	bl	8000ca0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	210f      	movs	r1, #15
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fabc 	bl	8000ce8 <SENSOR_IO_Read>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800178e:	2300      	movs	r3, #0
 8001790:	74fb      	strb	r3, [r7, #19]
 8001792:	e013      	b.n	80017bc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	7cfb      	ldrb	r3, [r7, #19]
 800179a:	3328      	adds	r3, #40	@ 0x28
 800179c:	b2db      	uxtb	r3, r3
 800179e:	7cfc      	ldrb	r4, [r7, #19]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7ff faa0 	bl	8000ce8 <SENSOR_IO_Read>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	f104 0318 	add.w	r3, r4, #24
 80017b0:	443b      	add	r3, r7
 80017b2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	3301      	adds	r3, #1
 80017ba:	74fb      	strb	r3, [r7, #19]
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d9e8      	bls.n	8001794 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	74fb      	strb	r3, [r7, #19]
 80017c6:	e00f      	b.n	80017e8 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80017c8:	7cfb      	ldrb	r3, [r7, #19]
 80017ca:	3318      	adds	r3, #24
 80017cc:	443b      	add	r3, r7
 80017ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017d2:	461a      	mov	r2, r3
 80017d4:	7cfb      	ldrb	r3, [r7, #19]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80017e2:	7cfb      	ldrb	r3, [r7, #19]
 80017e4:	3301      	adds	r3, #1
 80017e6:	74fb      	strb	r3, [r7, #19]
 80017e8:	7cfb      	ldrb	r3, [r7, #19]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d9ec      	bls.n	80017c8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017fe:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2264      	movs	r2, #100	@ 0x64
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	da01      	bge.n	8001814 <LPS22HB_P_ReadPressure+0x94>
 8001810:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001814:	131b      	asrs	r3, r3, #12
 8001816:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001838 <LPS22HB_P_ReadPressure+0xb8>
 8001826:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800182a:	eef0 7a66 	vmov.f32	s15, s13
}
 800182e:	eeb0 0a67 	vmov.f32	s0, s15
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	42c80000 	.word	0x42c80000

0800183c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	211a      	movs	r1, #26
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fa4b 	bl	8000ce8 <SENSOR_IO_Read>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	211a      	movs	r1, #26
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fa20 	bl	8000cb4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2110      	movs	r1, #16
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fa34 	bl	8000ce8 <SENSOR_IO_Read>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800188a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f023 0302 	bic.w	r3, r3, #2
 800189a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	2110      	movs	r1, #16
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fa01 	bl	8000cb4 <SENSOR_IO_Write>
}  
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80018c8:	2110      	movs	r1, #16
 80018ca:	20d4      	movs	r0, #212	@ 0xd4
 80018cc:	f7ff fa0c 	bl	8000ce8 <SENSOR_IO_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80018e0:	7bba      	ldrb	r2, [r7, #14]
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80018e8:	7bbb      	ldrb	r3, [r7, #14]
 80018ea:	461a      	mov	r2, r3
 80018ec:	2110      	movs	r1, #16
 80018ee:	20d4      	movs	r0, #212	@ 0xd4
 80018f0:	f7ff f9e0 	bl	8000cb4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80018f4:	2112      	movs	r1, #18
 80018f6:	20d4      	movs	r0, #212	@ 0xd4
 80018f8:	f7ff f9f6 	bl	8000ce8 <SENSOR_IO_Read>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800190e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001910:	7bba      	ldrb	r2, [r7, #14]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	4313      	orrs	r3, r2
 8001916:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	461a      	mov	r2, r3
 800191c:	2112      	movs	r1, #18
 800191e:	20d4      	movs	r0, #212	@ 0xd4
 8001920:	f7ff f9c8 	bl	8000cb4 <SENSOR_IO_Write>
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001936:	2110      	movs	r1, #16
 8001938:	20d4      	movs	r0, #212	@ 0xd4
 800193a:	f7ff f9d5 	bl	8000ce8 <SENSOR_IO_Read>
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	461a      	mov	r2, r3
 800194e:	2110      	movs	r1, #16
 8001950:	20d4      	movs	r0, #212	@ 0xd4
 8001952:	f7ff f9af 	bl	8000cb4 <SENSOR_IO_Write>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001962:	f7ff f99d 	bl	8000ca0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001966:	210f      	movs	r1, #15
 8001968:	20d4      	movs	r0, #212	@ 0xd4
 800196a:	f7ff f9bd 	bl	8000ce8 <SENSOR_IO_Read>
 800196e:	4603      	mov	r3, r0
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}

08001974 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001982:	2115      	movs	r1, #21
 8001984:	20d4      	movs	r0, #212	@ 0xd4
 8001986:	f7ff f9af 	bl	8000ce8 <SENSOR_IO_Read>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	f023 0310 	bic.w	r3, r3, #16
 8001994:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	461a      	mov	r2, r3
 80019a8:	2115      	movs	r1, #21
 80019aa:	20d4      	movs	r0, #212	@ 0xd4
 80019ac:	f7ff f982 	bl	8000cb4 <SENSOR_IO_Write>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80019ce:	2110      	movs	r1, #16
 80019d0:	20d4      	movs	r0, #212	@ 0xd4
 80019d2:	f7ff f989 	bl	8000ce8 <SENSOR_IO_Read>
 80019d6:	4603      	mov	r3, r0
 80019d8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80019da:	f107 0208 	add.w	r2, r7, #8
 80019de:	2306      	movs	r3, #6
 80019e0:	2128      	movs	r1, #40	@ 0x28
 80019e2:	20d4      	movs	r0, #212	@ 0xd4
 80019e4:	f7ff f99e 	bl	8000d24 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]
 80019ec:	e01a      	b.n	8001a24 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	3301      	adds	r3, #1
 80019f4:	3320      	adds	r3, #32
 80019f6:	443b      	add	r3, r7
 80019f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	7ffa      	ldrb	r2, [r7, #31]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	3220      	adds	r2, #32
 8001a06:	443a      	add	r2, r7
 8001a08:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	b212      	sxth	r2, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	3320      	adds	r3, #32
 8001a18:	443b      	add	r3, r7
 8001a1a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
 8001a20:	3301      	adds	r3, #1
 8001a22:	77fb      	strb	r3, [r7, #31]
 8001a24:	7ffb      	ldrb	r3, [r7, #31]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d9e1      	bls.n	80019ee <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d829      	bhi.n	8001a88 <LSM6DSL_AccReadXYZ+0xd0>
 8001a34:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <LSM6DSL_AccReadXYZ+0x84>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a71 	.word	0x08001a71
 8001a40:	08001a89 	.word	0x08001a89
 8001a44:	08001a89 	.word	0x08001a89
 8001a48:	08001a89 	.word	0x08001a89
 8001a4c:	08001a83 	.word	0x08001a83
 8001a50:	08001a89 	.word	0x08001a89
 8001a54:	08001a89 	.word	0x08001a89
 8001a58:	08001a89 	.word	0x08001a89
 8001a5c:	08001a77 	.word	0x08001a77
 8001a60:	08001a89 	.word	0x08001a89
 8001a64:	08001a89 	.word	0x08001a89
 8001a68:	08001a89 	.word	0x08001a89
 8001a6c:	08001a7d 	.word	0x08001a7d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <LSM6DSL_AccReadXYZ+0x11c>)
 8001a72:	61bb      	str	r3, [r7, #24]
    break;
 8001a74:	e008      	b.n	8001a88 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <LSM6DSL_AccReadXYZ+0x120>)
 8001a78:	61bb      	str	r3, [r7, #24]
    break;
 8001a7a:	e005      	b.n	8001a88 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <LSM6DSL_AccReadXYZ+0x124>)
 8001a7e:	61bb      	str	r3, [r7, #24]
    break;
 8001a80:	e002      	b.n	8001a88 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <LSM6DSL_AccReadXYZ+0x128>)
 8001a84:	61bb      	str	r3, [r7, #24]
    break;    
 8001a86:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	77fb      	strb	r3, [r7, #31]
 8001a8c:	e01a      	b.n	8001ac4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	3320      	adds	r3, #32
 8001a94:	443b      	add	r3, r7
 8001a96:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	7ffb      	ldrb	r3, [r7, #31]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab6:	ee17 2a90 	vmov	r2, s15
 8001aba:	b212      	sxth	r2, r2
 8001abc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	77fb      	strb	r3, [r7, #31]
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d9e1      	bls.n	8001a8e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	3d79db23 	.word	0x3d79db23
 8001ad8:	3df9db23 	.word	0x3df9db23
 8001adc:	3e79db23 	.word	0x3e79db23
 8001ae0:	3ef9db23 	.word	0x3ef9db23

08001ae4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f000 f8dd 	bl	8001cae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af4:	200f      	movs	r0, #15
 8001af6:	f7ff fb31 	bl	800115c <HAL_InitTick>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	e001      	b.n	8001b0a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b06:	f7ff fa21 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000088 	.word	0x20000088
 8001b38:	2000056c 	.word	0x2000056c

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000056c 	.word	0x2000056c

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4907      	ldr	r1, [pc, #28]	@ (8001bf0 <__NVIC_EnableIRQ+0x38>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	@ (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	@ 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	@ 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff4c 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd6:	f7ff ff61 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001cda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	6978      	ldr	r0, [r7, #20]
 8001ce2:	f7ff ffb1 	bl	8001c48 <NVIC_EncodePriority>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff80 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff54 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e166      	b.n	8001ff6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8158 	beq.w	8001ff0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x40>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d017      	beq.n	8001df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d123      	bne.n	8001e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	6939      	ldr	r1, [r7, #16]
 8001e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0203 	and.w	r2, r3, #3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80b2 	beq.w	8001ff0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8c:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <HAL_GPIO_Init+0x2fc>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e90:	4a60      	ldr	r2, [pc, #384]	@ (8002014 <HAL_GPIO_Init+0x2fc>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e98:	4b5e      	ldr	r3, [pc, #376]	@ (8002014 <HAL_GPIO_Init+0x2fc>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ea4:	4a5c      	ldr	r2, [pc, #368]	@ (8002018 <HAL_GPIO_Init+0x300>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ece:	d02b      	beq.n	8001f28 <HAL_GPIO_Init+0x210>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a52      	ldr	r2, [pc, #328]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d025      	beq.n	8001f24 <HAL_GPIO_Init+0x20c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a51      	ldr	r2, [pc, #324]	@ (8002020 <HAL_GPIO_Init+0x308>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d01f      	beq.n	8001f20 <HAL_GPIO_Init+0x208>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a50      	ldr	r2, [pc, #320]	@ (8002024 <HAL_GPIO_Init+0x30c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d019      	beq.n	8001f1c <HAL_GPIO_Init+0x204>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a4f      	ldr	r2, [pc, #316]	@ (8002028 <HAL_GPIO_Init+0x310>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x200>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a4e      	ldr	r2, [pc, #312]	@ (800202c <HAL_GPIO_Init+0x314>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1fc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4d      	ldr	r2, [pc, #308]	@ (8002030 <HAL_GPIO_Init+0x318>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1f8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4c      	ldr	r2, [pc, #304]	@ (8002034 <HAL_GPIO_Init+0x31c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1f4>
 8001f08:	2307      	movs	r3, #7
 8001f0a:	e00e      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	e00c      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f10:	2306      	movs	r3, #6
 8001f12:	e00a      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f14:	2305      	movs	r3, #5
 8001f16:	e008      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f3a:	4937      	ldr	r1, [pc, #220]	@ (8002018 <HAL_GPIO_Init+0x300>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f48:	4b3b      	ldr	r3, [pc, #236]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6c:	4a32      	ldr	r2, [pc, #200]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f72:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f96:	4a28      	ldr	r2, [pc, #160]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f9c:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fea:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	f47f ae91 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	48000400 	.word	0x48000400
 8002020:	48000800 	.word	0x48000800
 8002024:	48000c00 	.word	0x48000c00
 8002028:	48001000 	.word	0x48001000
 800202c:	48001400 	.word	0x48001400
 8002030:	48001800 	.word	0x48001800
 8002034:	48001c00 	.word	0x48001c00
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800204a:	e0c9      	b.n	80021e0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800204c:	2201      	movs	r2, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80bc 	beq.w	80021da <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002062:	4a66      	ldr	r2, [pc, #408]	@ (80021fc <HAL_GPIO_DeInit+0x1c0>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800208a:	d02b      	beq.n	80020e4 <HAL_GPIO_DeInit+0xa8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a5c      	ldr	r2, [pc, #368]	@ (8002200 <HAL_GPIO_DeInit+0x1c4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d025      	beq.n	80020e0 <HAL_GPIO_DeInit+0xa4>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a5b      	ldr	r2, [pc, #364]	@ (8002204 <HAL_GPIO_DeInit+0x1c8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d01f      	beq.n	80020dc <HAL_GPIO_DeInit+0xa0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a5a      	ldr	r2, [pc, #360]	@ (8002208 <HAL_GPIO_DeInit+0x1cc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d019      	beq.n	80020d8 <HAL_GPIO_DeInit+0x9c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a59      	ldr	r2, [pc, #356]	@ (800220c <HAL_GPIO_DeInit+0x1d0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_GPIO_DeInit+0x98>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a58      	ldr	r2, [pc, #352]	@ (8002210 <HAL_GPIO_DeInit+0x1d4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00d      	beq.n	80020d0 <HAL_GPIO_DeInit+0x94>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a57      	ldr	r2, [pc, #348]	@ (8002214 <HAL_GPIO_DeInit+0x1d8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <HAL_GPIO_DeInit+0x90>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a56      	ldr	r2, [pc, #344]	@ (8002218 <HAL_GPIO_DeInit+0x1dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_GPIO_DeInit+0x8c>
 80020c4:	2307      	movs	r3, #7
 80020c6:	e00e      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020c8:	2308      	movs	r3, #8
 80020ca:	e00c      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020cc:	2306      	movs	r3, #6
 80020ce:	e00a      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020d0:	2305      	movs	r3, #5
 80020d2:	e008      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020d4:	2304      	movs	r3, #4
 80020d6:	e006      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020d8:	2303      	movs	r3, #3
 80020da:	e004      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020dc:	2302      	movs	r3, #2
 80020de:	e002      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_GPIO_DeInit+0xaa>
 80020e4:	2300      	movs	r3, #0
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	f002 0203 	and.w	r2, r2, #3
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	4093      	lsls	r3, r2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d132      	bne.n	800215c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80020f6:	4b49      	ldr	r3, [pc, #292]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4947      	ldr	r1, [pc, #284]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 8002100:	4013      	ands	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002104:	4b45      	ldr	r3, [pc, #276]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	4943      	ldr	r1, [pc, #268]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 800210e:	4013      	ands	r3, r2
 8002110:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002112:	4b42      	ldr	r3, [pc, #264]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	4940      	ldr	r1, [pc, #256]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 800211c:	4013      	ands	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002120:	4b3e      	ldr	r3, [pc, #248]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	493c      	ldr	r1, [pc, #240]	@ (800221c <HAL_GPIO_DeInit+0x1e0>)
 800212a:	4013      	ands	r3, r2
 800212c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800213e:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <HAL_GPIO_DeInit+0x1c0>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43da      	mvns	r2, r3
 800214e:	482b      	ldr	r0, [pc, #172]	@ (80021fc <HAL_GPIO_DeInit+0x1c0>)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	400a      	ands	r2, r1
 8002156:	3302      	adds	r3, #2
 8002158:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2103      	movs	r1, #3
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	08d2      	lsrs	r2, r2, #3
 8002190:	4019      	ands	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2103      	movs	r1, #3
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	401a      	ands	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	2101      	movs	r1, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2103      	movs	r1, #3
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f af2f 	bne.w	800204c <HAL_GPIO_DeInit+0x10>
  }
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40010000 	.word	0x40010000
 8002200:	48000400 	.word	0x48000400
 8002204:	48000800 	.word	0x48000800
 8002208:	48000c00 	.word	0x48000c00
 800220c:	48001000 	.word	0x48001000
 8002210:	48001400 	.word	0x48001400
 8002214:	48001800 	.word	0x48001800
 8002218:	48001c00 	.word	0x48001c00
 800221c:	40010400 	.word	0x40010400

08002220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e001      	b.n	8002242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800226c:	e002      	b.n	8002274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002296:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f806 	bl	80022b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e08d      	b.n	80023f4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d106      	bne.n	80022f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7fe fe55 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2224      	movs	r2, #36	@ 0x24
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002316:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002326:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d107      	bne.n	8002340 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e006      	b.n	800234e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800234c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d108      	bne.n	8002368 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	e007      	b.n	8002378 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002376:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800238a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800239a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69d9      	ldr	r1, [r3, #28]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e021      	b.n	8002452 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2224      	movs	r2, #36	@ 0x24
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fe16 	bl	8001058 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4603      	mov	r3, r0
 800246c:	817b      	strh	r3, [r7, #10]
 800246e:	460b      	mov	r3, r1
 8002470:	813b      	strh	r3, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	f040 80f9 	bne.w	8002676 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_I2C_Mem_Write+0x34>
 800248a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002496:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0ed      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Mem_Write+0x4e>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e0e6      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024b2:	f7ff fb43 	bl	8001b3c <HAL_GetTick>
 80024b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2319      	movs	r3, #25
 80024be:	2201      	movs	r2, #1
 80024c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fac3 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0d1      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2221      	movs	r2, #33	@ 0x21
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fc:	88f8      	ldrh	r0, [r7, #6]
 80024fe:	893a      	ldrh	r2, [r7, #8]
 8002500:	8979      	ldrh	r1, [r7, #10]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4603      	mov	r3, r0
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f9d3 	bl	80028b8 <I2C_RequestMemoryWrite>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0a9      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2bff      	cmp	r3, #255	@ 0xff
 800252c:	d90e      	bls.n	800254c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	22ff      	movs	r2, #255	@ 0xff
 8002532:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fc47 	bl	8002dd8 <I2C_TransferConfig>
 800254a:	e00f      	b.n	800256c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	b2da      	uxtb	r2, r3
 800255c:	8979      	ldrh	r1, [r7, #10]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fc36 	bl	8002dd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fac6 	bl	8002b02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e07b      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d034      	beq.n	8002624 <HAL_I2C_Mem_Write+0x1c8>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d130      	bne.n	8002624 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	2200      	movs	r2, #0
 80025ca:	2180      	movs	r1, #128	@ 0x80
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fa3f 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e04d      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2bff      	cmp	r3, #255	@ 0xff
 80025e4:	d90e      	bls.n	8002604 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	22ff      	movs	r2, #255	@ 0xff
 80025ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	8979      	ldrh	r1, [r7, #10]
 80025f4:	2300      	movs	r3, #0
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fbeb 	bl	8002dd8 <I2C_TransferConfig>
 8002602:	e00f      	b.n	8002624 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	b2da      	uxtb	r2, r3
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	2300      	movs	r3, #0
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fbda 	bl	8002dd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d19e      	bne.n	800256c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 faac 	bl	8002b90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e01a      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2220      	movs	r2, #32
 8002648:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_I2C_Mem_Write+0x224>)
 8002656:	400b      	ands	r3, r1
 8002658:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	fe00e800 	.word	0xfe00e800

08002684 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	817b      	strh	r3, [r7, #10]
 8002696:	460b      	mov	r3, r1
 8002698:	813b      	strh	r3, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	f040 80fd 	bne.w	80028a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_I2C_Mem_Read+0x34>
 80026b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0f1      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_I2C_Mem_Read+0x4e>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e0ea      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026da:	f7ff fa2f 	bl	8001b3c <HAL_GetTick>
 80026de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2319      	movs	r3, #25
 80026e6:	2201      	movs	r2, #1
 80026e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f9af 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0d5      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2222      	movs	r2, #34	@ 0x22
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2240      	movs	r2, #64	@ 0x40
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800271c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002724:	88f8      	ldrh	r0, [r7, #6]
 8002726:	893a      	ldrh	r2, [r7, #8]
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4603      	mov	r3, r0
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f913 	bl	8002960 <I2C_RequestMemoryRead>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0ad      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2bff      	cmp	r3, #255	@ 0xff
 8002754:	d90e      	bls.n	8002774 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002760:	b2da      	uxtb	r2, r3
 8002762:	8979      	ldrh	r1, [r7, #10]
 8002764:	4b52      	ldr	r3, [pc, #328]	@ (80028b0 <HAL_I2C_Mem_Read+0x22c>)
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fb33 	bl	8002dd8 <I2C_TransferConfig>
 8002772:	e00f      	b.n	8002794 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	b2da      	uxtb	r2, r3
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	4b4a      	ldr	r3, [pc, #296]	@ (80028b0 <HAL_I2C_Mem_Read+0x22c>)
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fb22 	bl	8002dd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279a:	2200      	movs	r2, #0
 800279c:	2104      	movs	r1, #4
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f956 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07c      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d034      	beq.n	8002854 <HAL_I2C_Mem_Read+0x1d0>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d130      	bne.n	8002854 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f927 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e04d      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2bff      	cmp	r3, #255	@ 0xff
 8002814:	d90e      	bls.n	8002834 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fad3 	bl	8002dd8 <I2C_TransferConfig>
 8002832:	e00f      	b.n	8002854 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fac2 	bl	8002dd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d19a      	bne.n	8002794 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f994 	bl	8002b90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e01a      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2220      	movs	r2, #32
 8002878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <HAL_I2C_Mem_Read+0x230>)
 8002886:	400b      	ands	r3, r1
 8002888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	80002400 	.word	0x80002400
 80028b4:	fe00e800 	.word	0xfe00e800

080028b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	817b      	strh	r3, [r7, #10]
 80028ca:	460b      	mov	r3, r1
 80028cc:	813b      	strh	r3, [r7, #8]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	8979      	ldrh	r1, [r7, #10]
 80028d8:	4b20      	ldr	r3, [pc, #128]	@ (800295c <I2C_RequestMemoryWrite+0xa4>)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fa79 	bl	8002dd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f909 	bl	8002b02 <I2C_WaitOnTXISFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e02c      	b.n	8002954 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002900:	893b      	ldrh	r3, [r7, #8]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	629a      	str	r2, [r3, #40]	@ 0x28
 800290a:	e015      	b.n	8002938 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800290c:	893b      	ldrh	r3, [r7, #8]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29b      	uxth	r3, r3
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8ef 	bl	8002b02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e012      	b.n	8002954 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800292e:	893b      	ldrh	r3, [r7, #8]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2200      	movs	r2, #0
 8002940:	2180      	movs	r1, #128	@ 0x80
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f884 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	80002000 	.word	0x80002000

08002960 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	4608      	mov	r0, r1
 800296a:	4611      	mov	r1, r2
 800296c:	461a      	mov	r2, r3
 800296e:	4603      	mov	r3, r0
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	460b      	mov	r3, r1
 8002974:	813b      	strh	r3, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <I2C_RequestMemoryRead+0xa4>)
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fa26 	bl	8002dd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f8b6 	bl	8002b02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e02c      	b.n	80029fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029a6:	893b      	ldrh	r3, [r7, #8]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80029b0:	e015      	b.n	80029de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f89c 	bl	8002b02 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e012      	b.n	80029fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2140      	movs	r1, #64	@ 0x40
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f831 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	80002000 	.word	0x80002000

08002a08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d103      	bne.n	8002a26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d007      	beq.n	8002a44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	619a      	str	r2, [r3, #24]
  }
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	e03b      	b.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	6839      	ldr	r1, [r7, #0]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f8d6 	bl	8002c18 <I2C_IsErrorOccurred>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e041      	b.n	8002afa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a7c:	d02d      	beq.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f85d 	bl	8001b3c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d122      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d113      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d0b4      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b0e:	e033      	b.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f87f 	bl	8002c18 <I2C_IsErrorOccurred>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e031      	b.n	8002b88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b2a:	d025      	beq.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7ff f806 	bl	8001b3c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11a      	bne.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d013      	beq.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d1c4      	bne.n	8002b10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9c:	e02f      	b.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f838 	bl	8002c18 <I2C_IsErrorOccurred>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e02d      	b.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe ffc3 	bl	8001b3c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d11a      	bne.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d013      	beq.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d1c8      	bne.n	8002b9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d068      	beq.n	8002d16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c4c:	e049      	b.n	8002ce2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c54:	d045      	beq.n	8002ce2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7fe ff71 	bl	8001b3c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_IsErrorOccurred+0x54>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d13a      	bne.n	8002ce2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c8e:	d121      	bne.n	8002cd4 <I2C_IsErrorOccurred+0xbc>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c96:	d01d      	beq.n	8002cd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d01a      	beq.n	8002cd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cae:	f7fe ff45 	bl	8001b3c <HAL_GetTick>
 8002cb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb4:	e00e      	b.n	8002cd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cb6:	f7fe ff41 	bl	8001b3c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b19      	cmp	r3, #25
 8002cc2:	d907      	bls.n	8002cd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f043 0320 	orr.w	r3, r3, #32
 8002cca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cd2:	e006      	b.n	8002ce2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d1e9      	bne.n	8002cb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d003      	beq.n	8002cf8 <I2C_IsErrorOccurred+0xe0>
 8002cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0aa      	beq.n	8002c4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d103      	bne.n	8002d08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2220      	movs	r2, #32
 8002d06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01c      	beq.n	8002dc6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff fe3b 	bl	8002a08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <I2C_IsErrorOccurred+0x1bc>)
 8002d9e:	400b      	ands	r3, r1
 8002da0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3728      	adds	r7, #40	@ 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	fe00e800 	.word	0xfe00e800

08002dd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	4613      	mov	r3, r2
 8002de8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df0:	7a7b      	ldrb	r3, [r7, #9]
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	0d5b      	lsrs	r3, r3, #21
 8002e12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e16:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <I2C_TransferConfig+0x60>)
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	ea02 0103 	and.w	r1, r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	03ff63ff 	.word	0x03ff63ff

08002e3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d138      	bne.n	8002ec4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e032      	b.n	8002ec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	@ 0x24
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d139      	bne.n	8002f5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e033      	b.n	8002f5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2224      	movs	r2, #36	@ 0x24
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f70:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7c:	d102      	bne.n	8002f84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f82:	e00b      	b.n	8002f9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f84:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f92:	d102      	bne.n	8002f9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f98:	e000      	b.n	8002f9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40007000 	.word	0x40007000

08002fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d141      	bne.n	800303e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fba:	4b4b      	ldr	r3, [pc, #300]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc6:	d131      	bne.n	800302c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc8:	4b47      	ldr	r3, [pc, #284]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fce:	4a46      	ldr	r2, [pc, #280]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd8:	4b43      	ldr	r3, [pc, #268]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fe0:	4a41      	ldr	r2, [pc, #260]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fe8:	4b40      	ldr	r3, [pc, #256]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2232      	movs	r2, #50	@ 0x32
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	0c9b      	lsrs	r3, r3, #18
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffe:	e002      	b.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3b01      	subs	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003006:	4b38      	ldr	r3, [pc, #224]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003012:	d102      	bne.n	800301a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f2      	bne.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800301a:	4b33      	ldr	r3, [pc, #204]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	d158      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e057      	b.n	80030dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800302c:	4b2e      	ldr	r3, [pc, #184]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003032:	4a2d      	ldr	r2, [pc, #180]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800303c:	e04d      	b.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003044:	d141      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003046:	4b28      	ldr	r3, [pc, #160]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003052:	d131      	bne.n	80030b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003054:	4b24      	ldr	r3, [pc, #144]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800305a:	4a23      	ldr	r2, [pc, #140]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003064:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800306c:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2232      	movs	r2, #50	@ 0x32
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	4a1c      	ldr	r2, [pc, #112]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0c9b      	lsrs	r3, r3, #18
 8003086:	3301      	adds	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308a:	e002      	b.n	8003092 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3b01      	subs	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003092:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309e:	d102      	bne.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f2      	bne.n	800308c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b2:	d112      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e011      	b.n	80030dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030c8:	e007      	b.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ca:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030d2:	4a05      	ldr	r2, [pc, #20]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40007000 	.word	0x40007000
 80030ec:	20000000 	.word	0x20000000
 80030f0:	431bde83 	.word	0x431bde83

080030f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f000 bc08 	b.w	8003918 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003108:	4b96      	ldr	r3, [pc, #600]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003112:	4b94      	ldr	r3, [pc, #592]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80e4 	beq.w	80032f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_RCC_OscConfig+0x4c>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	f040 808b 	bne.w	800324e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b01      	cmp	r3, #1
 800313c:	f040 8087 	bne.w	800324e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003140:	4b88      	ldr	r3, [pc, #544]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_OscConfig+0x64>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e3df      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1a      	ldr	r2, [r3, #32]
 800315c:	4b81      	ldr	r3, [pc, #516]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <HAL_RCC_OscConfig+0x7e>
 8003168:	4b7e      	ldr	r3, [pc, #504]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003170:	e005      	b.n	800317e <HAL_RCC_OscConfig+0x8a>
 8003172:	4b7c      	ldr	r3, [pc, #496]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800317e:	4293      	cmp	r3, r2
 8003180:	d223      	bcs.n	80031ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fdfe 	bl	8003d88 <RCC_SetFlashLatencyFromMSIRange>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e3c0      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003196:	4b73      	ldr	r3, [pc, #460]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a72      	ldr	r2, [pc, #456]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800319c:	f043 0308 	orr.w	r3, r3, #8
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b70      	ldr	r3, [pc, #448]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	496d      	ldr	r1, [pc, #436]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	4968      	ldr	r1, [pc, #416]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
 80031c8:	e025      	b.n	8003216 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ca:	4b66      	ldr	r3, [pc, #408]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a65      	ldr	r2, [pc, #404]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4960      	ldr	r1, [pc, #384]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	495b      	ldr	r1, [pc, #364]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fdbe 	bl	8003d88 <RCC_SetFlashLatencyFromMSIRange>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e380      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003216:	f000 fcc1 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b51      	ldr	r3, [pc, #324]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	4950      	ldr	r1, [pc, #320]	@ (8003368 <HAL_RCC_OscConfig+0x274>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a4e      	ldr	r2, [pc, #312]	@ (800336c <HAL_RCC_OscConfig+0x278>)
 8003234:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003236:	4b4e      	ldr	r3, [pc, #312]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd ff8e 	bl	800115c <HAL_InitTick>
 8003240:	4603      	mov	r3, r0
 8003242:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d052      	beq.n	80032f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	e364      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d032      	beq.n	80032bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003256:	4b43      	ldr	r3, [pc, #268]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a42      	ldr	r2, [pc, #264]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003262:	f7fe fc6b 	bl	8001b3c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800326a:	f7fe fc67 	bl	8001b3c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e34d      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327c:	4b39      	ldr	r3, [pc, #228]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003288:	4b36      	ldr	r3, [pc, #216]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a35      	ldr	r2, [pc, #212]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800328e:	f043 0308 	orr.w	r3, r3, #8
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b33      	ldr	r3, [pc, #204]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4930      	ldr	r1, [pc, #192]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	492b      	ldr	r1, [pc, #172]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
 80032ba:	e01a      	b.n	80032f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032bc:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a28      	ldr	r2, [pc, #160]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c8:	f7fe fc38 	bl	8001b3c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d0:	f7fe fc34 	bl	8001b3c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e31a      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1dc>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d073      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x21c>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d10e      	bne.n	8003328 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d10b      	bne.n	8003328 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	4b14      	ldr	r3, [pc, #80]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d063      	beq.n	80033e4 <HAL_RCC_OscConfig+0x2f0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d15f      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e2f7      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x24c>
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a0b      	ldr	r2, [pc, #44]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e025      	b.n	800338c <HAL_RCC_OscConfig+0x298>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003348:	d114      	bne.n	8003374 <HAL_RCC_OscConfig+0x280>
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a05      	ldr	r2, [pc, #20]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a02      	ldr	r2, [pc, #8]	@ (8003364 <HAL_RCC_OscConfig+0x270>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e013      	b.n	800338c <HAL_RCC_OscConfig+0x298>
 8003364:	40021000 	.word	0x40021000
 8003368:	08007bc0 	.word	0x08007bc0
 800336c:	20000000 	.word	0x20000000
 8003370:	20000084 	.word	0x20000084
 8003374:	4ba0      	ldr	r3, [pc, #640]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a9f      	ldr	r2, [pc, #636]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800337a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b9d      	ldr	r3, [pc, #628]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a9c      	ldr	r2, [pc, #624]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800338a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fbd2 	bl	8001b3c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339c:	f7fe fbce 	bl	8001b3c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	@ 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e2b4      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ae:	4b92      	ldr	r3, [pc, #584]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x2a8>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fbbe 	bl	8001b3c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fe fbba 	bl	8001b3c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	@ 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e2a0      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d6:	4b88      	ldr	r3, [pc, #544]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2d0>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d060      	beq.n	80034b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_OscConfig+0x310>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d119      	bne.n	8003432 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d116      	bne.n	8003432 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003404:	4b7c      	ldr	r3, [pc, #496]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_OscConfig+0x328>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e27d      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b76      	ldr	r3, [pc, #472]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	4973      	ldr	r1, [pc, #460]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003430:	e040      	b.n	80034b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d023      	beq.n	8003482 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343a:	4b6f      	ldr	r3, [pc, #444]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6e      	ldr	r2, [pc, #440]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe fb79 	bl	8001b3c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344e:	f7fe fb75 	bl	8001b3c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e25b      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003460:	4b65      	ldr	r3, [pc, #404]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b62      	ldr	r3, [pc, #392]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	495f      	ldr	r1, [pc, #380]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
 8003480:	e018      	b.n	80034b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b5d      	ldr	r3, [pc, #372]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a5c      	ldr	r2, [pc, #368]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800348c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fe fb55 	bl	8001b3c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003496:	f7fe fb51 	bl	8001b3c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e237      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a8:	4b53      	ldr	r3, [pc, #332]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d03c      	beq.n	800353a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01c      	beq.n	8003502 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c8:	4b4b      	ldr	r3, [pc, #300]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ce:	4a4a      	ldr	r2, [pc, #296]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe fb30 	bl	8001b3c <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e0:	f7fe fb2c 	bl	8001b3c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e212      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f2:	4b41      	ldr	r3, [pc, #260]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80034f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ef      	beq.n	80034e0 <HAL_RCC_OscConfig+0x3ec>
 8003500:	e01b      	b.n	800353a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003502:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003508:	4a3b      	ldr	r2, [pc, #236]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fe fb13 	bl	8001b3c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351a:	f7fe fb0f 	bl	8001b3c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e1f5      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800352c:	4b32      	ldr	r3, [pc, #200]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ef      	bne.n	800351a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80a6 	beq.w	8003694 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800354c:	4b2a      	ldr	r3, [pc, #168]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10d      	bne.n	8003574 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b27      	ldr	r3, [pc, #156]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	4a26      	ldr	r2, [pc, #152]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6593      	str	r3, [r2, #88]	@ 0x58
 8003564:	4b24      	ldr	r3, [pc, #144]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003570:	2301      	movs	r3, #1
 8003572:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003574:	4b21      	ldr	r3, [pc, #132]	@ (80035fc <HAL_RCC_OscConfig+0x508>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d118      	bne.n	80035b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003580:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <HAL_RCC_OscConfig+0x508>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <HAL_RCC_OscConfig+0x508>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358c:	f7fe fad6 	bl	8001b3c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7fe fad2 	bl	8001b3c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1b8      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a6:	4b15      	ldr	r3, [pc, #84]	@ (80035fc <HAL_RCC_OscConfig+0x508>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d108      	bne.n	80035cc <HAL_RCC_OscConfig+0x4d8>
 80035ba:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c0:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ca:	e029      	b.n	8003620 <HAL_RCC_OscConfig+0x52c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d115      	bne.n	8003600 <HAL_RCC_OscConfig+0x50c>
 80035d4:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035da:	4a07      	ldr	r2, [pc, #28]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e4:	4b04      	ldr	r3, [pc, #16]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ea:	4a03      	ldr	r2, [pc, #12]	@ (80035f8 <HAL_RCC_OscConfig+0x504>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f4:	e014      	b.n	8003620 <HAL_RCC_OscConfig+0x52c>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
 8003600:	4b9d      	ldr	r3, [pc, #628]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003606:	4a9c      	ldr	r2, [pc, #624]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003610:	4b99      	ldr	r3, [pc, #612]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003616:	4a98      	ldr	r2, [pc, #608]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d016      	beq.n	8003656 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fa88 	bl	8001b3c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fa84 	bl	8001b3c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e168      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003646:	4b8c      	ldr	r3, [pc, #560]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ed      	beq.n	8003630 <HAL_RCC_OscConfig+0x53c>
 8003654:	e015      	b.n	8003682 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fe fa71 	bl	8001b3c <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fe fa6d 	bl	8001b3c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e151      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003674:	4b80      	ldr	r3, [pc, #512]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ed      	bne.n	800365e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b7b      	ldr	r3, [pc, #492]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	4a7a      	ldr	r2, [pc, #488]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03c      	beq.n	800371a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036a8:	4b73      	ldr	r3, [pc, #460]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80036aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ae:	4a72      	ldr	r2, [pc, #456]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fa40 	bl	8001b3c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c0:	f7fe fa3c 	bl	8001b3c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e122      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036d2:	4b69      	ldr	r3, [pc, #420]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80036d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <HAL_RCC_OscConfig+0x5cc>
 80036e0:	e01b      	b.n	800371a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036e2:	4b65      	ldr	r3, [pc, #404]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80036e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036e8:	4a63      	ldr	r2, [pc, #396]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fe fa23 	bl	8001b3c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036fa:	f7fe fa1f 	bl	8001b3c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e105      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800370c:	4b5a      	ldr	r3, [pc, #360]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 800370e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ef      	bne.n	80036fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80f9 	beq.w	8003916 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	2b02      	cmp	r3, #2
 800372a:	f040 80cf 	bne.w	80038cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800372e:	4b52      	ldr	r3, [pc, #328]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0203 	and.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	429a      	cmp	r2, r3
 8003740:	d12c      	bne.n	800379c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	3b01      	subs	r3, #1
 800374e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d123      	bne.n	800379c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d11b      	bne.n	800379c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d113      	bne.n	800379c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d109      	bne.n	800379c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	3b01      	subs	r3, #1
 8003796:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d071      	beq.n	8003880 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d068      	beq.n	8003874 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037a2:	4b35      	ldr	r3, [pc, #212]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037ae:	4b32      	ldr	r3, [pc, #200]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0ac      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037be:	4b2e      	ldr	r3, [pc, #184]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80037c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ca:	f7fe f9b7 	bl	8001b3c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fe f9b3 	bl	8001b3c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e099      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	4b24      	ldr	r3, [pc, #144]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f0:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	4b21      	ldr	r3, [pc, #132]	@ (800387c <HAL_RCC_OscConfig+0x788>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003800:	3a01      	subs	r2, #1
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800380a:	0212      	lsls	r2, r2, #8
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003812:	0852      	lsrs	r2, r2, #1
 8003814:	3a01      	subs	r2, #1
 8003816:	0552      	lsls	r2, r2, #21
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0652      	lsls	r2, r2, #25
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800382a:	06d2      	lsls	r2, r2, #27
 800382c:	430a      	orrs	r2, r1
 800382e:	4912      	ldr	r1, [pc, #72]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003830:	4313      	orrs	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003834:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a0c      	ldr	r2, [pc, #48]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800384c:	f7fe f976 	bl	8001b3c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe f972 	bl	8001b3c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e058      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <HAL_RCC_OscConfig+0x784>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003872:	e050      	b.n	8003916 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e04f      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
 8003878:	40021000 	.word	0x40021000
 800387c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003880:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d144      	bne.n	8003916 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800388c:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a23      	ldr	r2, [pc, #140]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003898:	4b21      	ldr	r3, [pc, #132]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a20      	ldr	r2, [pc, #128]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038a4:	f7fe f94a 	bl	8001b3c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fe f946 	bl	8001b3c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e02c      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	4b18      	ldr	r3, [pc, #96]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x7b8>
 80038ca:	e024      	b.n	8003916 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d01f      	beq.n	8003912 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	4b13      	ldr	r3, [pc, #76]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a12      	ldr	r2, [pc, #72]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 80038d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fe f92d 	bl	8001b3c <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fe f929 	bl	8001b3c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e00f      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f8:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	4905      	ldr	r1, [pc, #20]	@ (8003920 <HAL_RCC_OscConfig+0x82c>)
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_RCC_OscConfig+0x830>)
 800390c:	4013      	ands	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
 8003910:	e001      	b.n	8003916 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	feeefffc 	.word	0xfeeefffc

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e11d      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b90      	ldr	r3, [pc, #576]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	498b      	ldr	r1, [pc, #556]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b89      	ldr	r3, [pc, #548]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e105      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b81      	ldr	r3, [pc, #516]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003988:	429a      	cmp	r2, r3
 800398a:	d908      	bls.n	800399e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	497b      	ldr	r1, [pc, #492]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d079      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d11e      	bne.n	80039f0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	4b75      	ldr	r3, [pc, #468]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0dc      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039c2:	f000 fa3b 	bl	8003e3c <RCC_GetSysClockFreqFromPLLSource>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4a70      	ldr	r2, [pc, #448]	@ (8003b8c <HAL_RCC_ClockConfig+0x264>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d946      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d140      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039da:	4b6b      	ldr	r3, [pc, #428]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039e2:	4a69      	ldr	r2, [pc, #420]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 80039e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e035      	b.n	8003a5c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f8:	4b63      	ldr	r3, [pc, #396]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d115      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b9      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a10:	4b5d      	ldr	r3, [pc, #372]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0ad      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a20:	4b59      	ldr	r3, [pc, #356]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0a5      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a30:	f000 f8b4 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003a34:	4603      	mov	r3, r0
 8003a36:	4a55      	ldr	r2, [pc, #340]	@ (8003b8c <HAL_RCC_ClockConfig+0x264>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d90f      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a3c:	4b52      	ldr	r3, [pc, #328]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a48:	4b4f      	ldr	r3, [pc, #316]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a50:	4a4d      	ldr	r2, [pc, #308]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a56:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 0203 	bic.w	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4947      	ldr	r1, [pc, #284]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6e:	f7fe f865 	bl	8001b3c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a76:	f7fe f861 	bl	8001b3c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e077      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 020c 	and.w	r2, r3, #12
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d1eb      	bne.n	8003a76 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b80      	cmp	r3, #128	@ 0x80
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003aa4:	4b38      	ldr	r3, [pc, #224]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a37      	ldr	r2, [pc, #220]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d010      	beq.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	4b31      	ldr	r3, [pc, #196]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d208      	bcs.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b2e      	ldr	r3, [pc, #184]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	492b      	ldr	r1, [pc, #172]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ade:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d210      	bcs.n	8003b0e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aec:	4b25      	ldr	r3, [pc, #148]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 020f 	bic.w	r2, r3, #15
 8003af4:	4923      	ldr	r1, [pc, #140]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afc:	4b21      	ldr	r3, [pc, #132]	@ (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e036      	b.n	8003b7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	4918      	ldr	r1, [pc, #96]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b38:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4910      	ldr	r1, [pc, #64]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b4c:	f000 f826 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	490c      	ldr	r1, [pc, #48]	@ (8003b90 <HAL_RCC_ClockConfig+0x268>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
 8003b68:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <HAL_RCC_ClockConfig+0x26c>)
 8003b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <HAL_RCC_ClockConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd faf3 	bl	800115c <HAL_InitTick>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	04c4b400 	.word	0x04c4b400
 8003b90:	08007bc0 	.word	0x08007bc0
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000084 	.word	0x20000084

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	@ 0x24
 8003ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003baa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d121      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d11e      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bd0:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bdc:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e005      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10d      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d102      	bne.n	8003c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c14:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x110>)
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	e004      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c20:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d134      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d003      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0xac>
 8003c40:	e005      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c42:	4b1a      	ldr	r3, [pc, #104]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x110>)
 8003c44:	617b      	str	r3, [r7, #20]
      break;
 8003c46:	e005      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c4a:	617b      	str	r3, [r7, #20]
      break;
 8003c4c:	e002      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	617b      	str	r3, [r7, #20]
      break;
 8003c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c54:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	3301      	adds	r3, #1
 8003c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	0a1b      	lsrs	r3, r3, #8
 8003c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	fb03 f202 	mul.w	r2, r3, r2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	0e5b      	lsrs	r3, r3, #25
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	3301      	adds	r3, #1
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c94:	69bb      	ldr	r3, [r7, #24]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	@ 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08007bd8 	.word	0x08007bd8
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	007a1200 	.word	0x007a1200

08003cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	@ (8003cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cd0:	f7ff fff0 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4904      	ldr	r1, [pc, #16]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08007bd0 	.word	0x08007bd0

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cfc:	f7ff ffda 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0adb      	lsrs	r3, r3, #11
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4904      	ldr	r1, [pc, #16]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	08007bd0 	.word	0x08007bd0

08003d24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	220f      	movs	r2, #15
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d34:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d40:	4b0f      	ldr	r3, [pc, #60]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d58:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d66:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <HAL_RCC_GetClockConfig+0x60>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	601a      	str	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40022000 	.word	0x40022000

08003d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003da0:	f7ff f8e4 	bl	8002f6c <HAL_PWREx_GetVoltageRange>
 8003da4:	6178      	str	r0, [r7, #20]
 8003da6:	e014      	b.n	8003dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	4a21      	ldr	r2, [pc, #132]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dc0:	f7ff f8d4 	bl	8002f6c <HAL_PWREx_GetVoltageRange>
 8003dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	4a1a      	ldr	r2, [pc, #104]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd8:	d10b      	bne.n	8003df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b80      	cmp	r3, #128	@ 0x80
 8003dde:	d913      	bls.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003de4:	d902      	bls.n	8003dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003de6:	2302      	movs	r3, #2
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	e00d      	b.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dec:	2301      	movs	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	e00a      	b.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003df6:	d902      	bls.n	8003dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003df8:	2302      	movs	r3, #2
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	e004      	b.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b70      	cmp	r3, #112	@ 0x70
 8003e02:	d101      	bne.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e04:	2301      	movs	r3, #1
 8003e06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 020f 	bic.w	r2, r3, #15
 8003e10:	4909      	ldr	r1, [pc, #36]	@ (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e18:	4b07      	ldr	r3, [pc, #28]	@ (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d001      	beq.n	8003e2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40022000 	.word	0x40022000

08003e3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e42:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d00b      	beq.n	8003e6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d825      	bhi.n	8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d008      	beq.n	8003e70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11f      	bne.n	8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e64:	4b25      	ldr	r3, [pc, #148]	@ (8003efc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e66:	613b      	str	r3, [r7, #16]
    break;
 8003e68:	e01f      	b.n	8003eaa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e6a:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e6c:	613b      	str	r3, [r7, #16]
    break;
 8003e6e:	e01c      	b.n	8003eaa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e70:	4b21      	ldr	r3, [pc, #132]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e005      	b.n	8003e98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003e98:	4a1a      	ldr	r2, [pc, #104]	@ (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea0:	613b      	str	r3, [r7, #16]
    break;
 8003ea2:	e002      	b.n	8003eaa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
    break;
 8003ea8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eaa:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	fb03 f202 	mul.w	r2, r3, r2
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0e5b      	lsrs	r3, r3, #25
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003eea:	683b      	ldr	r3, [r7, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200
 8003f04:	08007bd8 	.word	0x08007bd8

08003f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f10:	2300      	movs	r3, #0
 8003f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f14:	2300      	movs	r3, #0
 8003f16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d040      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f28:	2b80      	cmp	r3, #128	@ 0x80
 8003f2a:	d02a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f2c:	2b80      	cmp	r3, #128	@ 0x80
 8003f2e:	d825      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f30:	2b60      	cmp	r3, #96	@ 0x60
 8003f32:	d026      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f34:	2b60      	cmp	r3, #96	@ 0x60
 8003f36:	d821      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d006      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003f3c:	2b40      	cmp	r3, #64	@ 0x40
 8003f3e:	d81d      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d010      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f48:	e018      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f4a:	4b89      	ldr	r3, [pc, #548]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4a88      	ldr	r2, [pc, #544]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f54:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f56:	e015      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fb02 	bl	8004568 <RCCEx_PLLSAI1_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f68:	e00c      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3320      	adds	r3, #32
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fbed 	bl	8004750 <RCCEx_PLLSAI2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	74fb      	strb	r3, [r7, #19]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f8a:	4b79      	ldr	r3, [pc, #484]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f90:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f98:	4975      	ldr	r1, [pc, #468]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003fa0:	e001      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d047      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d030      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc0:	d82a      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc6:	d02a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003fc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fcc:	d824      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd8:	d81e      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe2:	d010      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fe4:	e018      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe6:	4b62      	ldr	r3, [pc, #392]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4a61      	ldr	r2, [pc, #388]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ff2:	e015      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fab4 	bl	8004568 <RCCEx_PLLSAI1_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004004:	e00c      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3320      	adds	r3, #32
 800400a:	2100      	movs	r1, #0
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fb9f 	bl	8004750 <RCCEx_PLLSAI2_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	74fb      	strb	r3, [r7, #19]
      break;
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800401e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004026:	4b52      	ldr	r3, [pc, #328]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004028:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	494e      	ldr	r1, [pc, #312]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800403c:	e001      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 809f 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004050:	2300      	movs	r3, #0
 8004052:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004054:	4b46      	ldr	r3, [pc, #280]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	4b41      	ldr	r3, [pc, #260]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406e:	4a40      	ldr	r2, [pc, #256]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004074:	6593      	str	r3, [r2, #88]	@ 0x58
 8004076:	4b3e      	ldr	r3, [pc, #248]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004082:	2301      	movs	r3, #1
 8004084:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004086:	4b3b      	ldr	r3, [pc, #236]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a3a      	ldr	r2, [pc, #232]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004090:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004092:	f7fd fd53 	bl	8001b3c <HAL_GetTick>
 8004096:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004098:	e009      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fd fd4f 	bl	8001b3c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d902      	bls.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	74fb      	strb	r3, [r7, #19]
        break;
 80040ac:	e005      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ae:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ef      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d15b      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01f      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d019      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040de:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ea:	4b21      	ldr	r3, [pc, #132]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004100:	4a1b      	ldr	r2, [pc, #108]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800410a:	4a19      	ldr	r2, [pc, #100]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d016      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fd0e 	bl	8001b3c <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004122:	e00b      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fd fd0a 	bl	8001b3c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d902      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	74fb      	strb	r3, [r7, #19]
            break;
 800413a:	e006      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0ec      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800414a:	7cfb      	ldrb	r3, [r7, #19]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10c      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004156:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004168:	e008      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	74bb      	strb	r3, [r7, #18]
 800416e:	e005      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004170:	40021000 	.word	0x40021000
 8004174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800417c:	7c7b      	ldrb	r3, [r7, #17]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4ba0      	ldr	r3, [pc, #640]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004186:	4a9f      	ldr	r2, [pc, #636]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800418c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419a:	4b9a      	ldr	r3, [pc, #616]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f023 0203 	bic.w	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a8:	4996      	ldr	r1, [pc, #600]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041bc:	4b91      	ldr	r3, [pc, #580]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f023 020c 	bic.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	498e      	ldr	r1, [pc, #568]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041de:	4b89      	ldr	r3, [pc, #548]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ec:	4985      	ldr	r1, [pc, #532]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004200:	4b80      	ldr	r3, [pc, #512]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420e:	497d      	ldr	r1, [pc, #500]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004222:	4b78      	ldr	r3, [pc, #480]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004230:	4974      	ldr	r1, [pc, #464]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004244:	4b6f      	ldr	r3, [pc, #444]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004252:	496c      	ldr	r1, [pc, #432]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004266:	4b67      	ldr	r3, [pc, #412]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004274:	4963      	ldr	r1, [pc, #396]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004288:	4b5e      	ldr	r3, [pc, #376]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004296:	495b      	ldr	r1, [pc, #364]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042aa:	4b56      	ldr	r3, [pc, #344]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b8:	4952      	ldr	r1, [pc, #328]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	494a      	ldr	r1, [pc, #296]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ee:	4b45      	ldr	r3, [pc, #276]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fc:	4941      	ldr	r1, [pc, #260]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004310:	4b3c      	ldr	r3, [pc, #240]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004312:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431e:	4939      	ldr	r1, [pc, #228]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d028      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004332:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004338:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004340:	4930      	ldr	r1, [pc, #192]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004350:	d106      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004352:	4b2c      	ldr	r3, [pc, #176]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4a2b      	ldr	r2, [pc, #172]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004358:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800435c:	60d3      	str	r3, [r2, #12]
 800435e:	e011      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004368:	d10c      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f8f9 	bl	8004568 <RCCEx_PLLSAI1_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800437a:	7cfb      	ldrb	r3, [r7, #19]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d04d      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004398:	d108      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800439a:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043a0:	4a18      	ldr	r2, [pc, #96]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80043aa:	e012      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80043ac:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043b2:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ca:	490e      	ldr	r1, [pc, #56]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043da:	d106      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043dc:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043e6:	60d3      	str	r3, [r2, #12]
 80043e8:	e020      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043f2:	d109      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043f4:	4b03      	ldr	r3, [pc, #12]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4a02      	ldr	r2, [pc, #8]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fe:	60d3      	str	r3, [r2, #12]
 8004400:	e014      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800440c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004410:	d10c      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	2101      	movs	r1, #1
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f8a5 	bl	8004568 <RCCEx_PLLSAI1_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004422:	7cfb      	ldrb	r3, [r7, #19]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d028      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004438:	4b4a      	ldr	r3, [pc, #296]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004446:	4947      	ldr	r1, [pc, #284]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004456:	d106      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004458:	4b42      	ldr	r3, [pc, #264]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a41      	ldr	r2, [pc, #260]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004462:	60d3      	str	r3, [r2, #12]
 8004464:	e011      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800446a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800446e:	d10c      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f876 	bl	8004568 <RCCEx_PLLSAI1_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01e      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004496:	4b33      	ldr	r3, [pc, #204]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044a6:	492f      	ldr	r1, [pc, #188]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f851 	bl	8004568 <RCCEx_PLLSAI1_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e0:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044e6:	f023 0204 	bic.w	r2, r3, #4
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f0:	491c      	ldr	r1, [pc, #112]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00b      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004504:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800450a:	f023 0218 	bic.w	r2, r3, #24
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	4913      	ldr	r1, [pc, #76]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d017      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004528:	4b0e      	ldr	r3, [pc, #56]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800452e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004538:	490a      	ldr	r1, [pc, #40]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800454a:	d105      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a04      	ldr	r2, [pc, #16]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004558:	7cbb      	ldrb	r3, [r7, #18]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000

08004568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004576:	4b72      	ldr	r3, [pc, #456]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00e      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004582:	4b6f      	ldr	r3, [pc, #444]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0203 	and.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d103      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
       ||
 8004596:	2b00      	cmp	r3, #0
 8004598:	d142      	bne.n	8004620 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e03f      	b.n	8004620 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d018      	beq.n	80045da <RCCEx_PLLSAI1_Config+0x72>
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d825      	bhi.n	80045f8 <RCCEx_PLLSAI1_Config+0x90>
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d002      	beq.n	80045b6 <RCCEx_PLLSAI1_Config+0x4e>
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d009      	beq.n	80045c8 <RCCEx_PLLSAI1_Config+0x60>
 80045b4:	e020      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045b6:	4b62      	ldr	r3, [pc, #392]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11d      	bne.n	80045fe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c6:	e01a      	b.n	80045fe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e013      	b.n	8004602 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045da:	4b59      	ldr	r3, [pc, #356]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045e6:	4b56      	ldr	r3, [pc, #344]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045f6:	e006      	b.n	8004606 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e004      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004606:	bf00      	nop
    }

    if(status == HAL_OK)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800460e:	4b4c      	ldr	r3, [pc, #304]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4949      	ldr	r1, [pc, #292]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 8086 	bne.w	8004734 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004628:	4b45      	ldr	r3, [pc, #276]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a44      	ldr	r2, [pc, #272]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800462e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fd fa82 	bl	8001b3c <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800463a:	e009      	b.n	8004650 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800463c:	f7fd fa7e 	bl	8001b3c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d902      	bls.n	8004650 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	73fb      	strb	r3, [r7, #15]
        break;
 800464e:	e005      	b.n	800465c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004650:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ef      	bne.n	800463c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d168      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d113      	bne.n	8004690 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004668:	4b35      	ldr	r3, [pc, #212]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <RCCEx_PLLSAI1_Config+0x1dc>)
 800466e:	4013      	ands	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6892      	ldr	r2, [r2, #8]
 8004674:	0211      	lsls	r1, r2, #8
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68d2      	ldr	r2, [r2, #12]
 800467a:	06d2      	lsls	r2, r2, #27
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6852      	ldr	r2, [r2, #4]
 8004682:	3a01      	subs	r2, #1
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	430a      	orrs	r2, r1
 8004688:	492d      	ldr	r1, [pc, #180]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	610b      	str	r3, [r1, #16]
 800468e:	e02d      	b.n	80046ec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d115      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004696:	4b2a      	ldr	r3, [pc, #168]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	4b2b      	ldr	r3, [pc, #172]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6892      	ldr	r2, [r2, #8]
 80046a2:	0211      	lsls	r1, r2, #8
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6912      	ldr	r2, [r2, #16]
 80046a8:	0852      	lsrs	r2, r2, #1
 80046aa:	3a01      	subs	r2, #1
 80046ac:	0552      	lsls	r2, r2, #21
 80046ae:	4311      	orrs	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6852      	ldr	r2, [r2, #4]
 80046b4:	3a01      	subs	r2, #1
 80046b6:	0112      	lsls	r2, r2, #4
 80046b8:	430a      	orrs	r2, r1
 80046ba:	4921      	ldr	r1, [pc, #132]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	610b      	str	r3, [r1, #16]
 80046c0:	e014      	b.n	80046ec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	4b21      	ldr	r3, [pc, #132]	@ (800474c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6892      	ldr	r2, [r2, #8]
 80046ce:	0211      	lsls	r1, r2, #8
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6952      	ldr	r2, [r2, #20]
 80046d4:	0852      	lsrs	r2, r2, #1
 80046d6:	3a01      	subs	r2, #1
 80046d8:	0652      	lsls	r2, r2, #25
 80046da:	4311      	orrs	r1, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6852      	ldr	r2, [r2, #4]
 80046e0:	3a01      	subs	r2, #1
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	430a      	orrs	r2, r1
 80046e6:	4916      	ldr	r1, [pc, #88]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046ec:	4b14      	ldr	r3, [pc, #80]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd fa20 	bl	8001b3c <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046fe:	e009      	b.n	8004714 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004700:	f7fd fa1c 	bl	8001b3c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d902      	bls.n	8004714 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	73fb      	strb	r3, [r7, #15]
          break;
 8004712:	e005      	b.n	8004720 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004714:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ef      	beq.n	8004700 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004726:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	4904      	ldr	r1, [pc, #16]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004730:	4313      	orrs	r3, r2
 8004732:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	07ff800f 	.word	0x07ff800f
 8004748:	ff9f800f 	.word	0xff9f800f
 800474c:	f9ff800f 	.word	0xf9ff800f

08004750 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800475e:	4b72      	ldr	r3, [pc, #456]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00e      	beq.n	8004788 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800476a:	4b6f      	ldr	r3, [pc, #444]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0203 	and.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d103      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
       ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d142      	bne.n	8004808 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
 8004786:	e03f      	b.n	8004808 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d018      	beq.n	80047c2 <RCCEx_PLLSAI2_Config+0x72>
 8004790:	2b03      	cmp	r3, #3
 8004792:	d825      	bhi.n	80047e0 <RCCEx_PLLSAI2_Config+0x90>
 8004794:	2b01      	cmp	r3, #1
 8004796:	d002      	beq.n	800479e <RCCEx_PLLSAI2_Config+0x4e>
 8004798:	2b02      	cmp	r3, #2
 800479a:	d009      	beq.n	80047b0 <RCCEx_PLLSAI2_Config+0x60>
 800479c:	e020      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800479e:	4b62      	ldr	r3, [pc, #392]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11d      	bne.n	80047e6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ae:	e01a      	b.n	80047e6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c0:	e013      	b.n	80047ea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047c2:	4b59      	ldr	r3, [pc, #356]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ce:	4b56      	ldr	r3, [pc, #344]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047de:	e006      	b.n	80047ee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e004      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80047f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4949      	ldr	r1, [pc, #292]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004804:	4313      	orrs	r3, r2
 8004806:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 8086 	bne.w	800491c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004810:	4b45      	ldr	r3, [pc, #276]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a44      	ldr	r2, [pc, #272]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fd f98e 	bl	8001b3c <HAL_GetTick>
 8004820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004822:	e009      	b.n	8004838 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004824:	f7fd f98a 	bl	8001b3c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d902      	bls.n	8004838 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	73fb      	strb	r3, [r7, #15]
        break;
 8004836:	e005      	b.n	8004844 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004838:	4b3b      	ldr	r3, [pc, #236]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ef      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d168      	bne.n	800491c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d113      	bne.n	8004878 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004850:	4b35      	ldr	r3, [pc, #212]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	4b35      	ldr	r3, [pc, #212]	@ (800492c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004856:	4013      	ands	r3, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6892      	ldr	r2, [r2, #8]
 800485c:	0211      	lsls	r1, r2, #8
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	06d2      	lsls	r2, r2, #27
 8004864:	4311      	orrs	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6852      	ldr	r2, [r2, #4]
 800486a:	3a01      	subs	r2, #1
 800486c:	0112      	lsls	r2, r2, #4
 800486e:	430a      	orrs	r2, r1
 8004870:	492d      	ldr	r1, [pc, #180]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004872:	4313      	orrs	r3, r2
 8004874:	614b      	str	r3, [r1, #20]
 8004876:	e02d      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d115      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800487e:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	4b2b      	ldr	r3, [pc, #172]	@ (8004930 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	0211      	lsls	r1, r2, #8
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6912      	ldr	r2, [r2, #16]
 8004890:	0852      	lsrs	r2, r2, #1
 8004892:	3a01      	subs	r2, #1
 8004894:	0552      	lsls	r2, r2, #21
 8004896:	4311      	orrs	r1, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6852      	ldr	r2, [r2, #4]
 800489c:	3a01      	subs	r2, #1
 800489e:	0112      	lsls	r2, r2, #4
 80048a0:	430a      	orrs	r2, r1
 80048a2:	4921      	ldr	r1, [pc, #132]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	614b      	str	r3, [r1, #20]
 80048a8:	e014      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	4b21      	ldr	r3, [pc, #132]	@ (8004934 <RCCEx_PLLSAI2_Config+0x1e4>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6892      	ldr	r2, [r2, #8]
 80048b6:	0211      	lsls	r1, r2, #8
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6952      	ldr	r2, [r2, #20]
 80048bc:	0852      	lsrs	r2, r2, #1
 80048be:	3a01      	subs	r2, #1
 80048c0:	0652      	lsls	r2, r2, #25
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6852      	ldr	r2, [r2, #4]
 80048c8:	3a01      	subs	r2, #1
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	430a      	orrs	r2, r1
 80048ce:	4916      	ldr	r1, [pc, #88]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048d4:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a13      	ldr	r2, [pc, #76]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd f92c 	bl	8001b3c <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048e6:	e009      	b.n	80048fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048e8:	f7fd f928 	bl	8001b3c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d902      	bls.n	80048fc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	73fb      	strb	r3, [r7, #15]
          break;
 80048fa:	e005      	b.n	8004908 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	4904      	ldr	r1, [pc, #16]	@ (8004928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	07ff800f 	.word	0x07ff800f
 8004930:	ff9f800f 	.word	0xff9f800f
 8004934:	f9ff800f 	.word	0xf9ff800f

08004938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e049      	b.n	80049de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f841 	bl	80049e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 f9e0 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d001      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e04f      	b.n	8004ab4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a23      	ldr	r2, [pc, #140]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01d      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x76>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3e:	d018      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x76>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x76>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00e      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x76>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1c      	ldr	r2, [pc, #112]	@ (8004acc <HAL_TIM_Base_Start_IT+0xd0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x76>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0x76>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d115      	bne.n	8004a9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	4b17      	ldr	r3, [pc, #92]	@ (8004ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d015      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0xb4>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a8a:	d011      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	e008      	b.n	8004ab0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0201 	orr.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e000      	b.n	8004ab2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40000c00 	.word	0x40000c00
 8004ad0:	40013400 	.word	0x40013400
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	00010007 	.word	0x00010007

08004adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0202 	mvn.w	r2, #2
 8004b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8e9 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8db 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8ec 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0204 	mvn.w	r2, #4
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8c3 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8b5 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f8c6 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0208 	mvn.w	r2, #8
 8004ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2204      	movs	r2, #4
 8004bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f89d 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f88f 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8a0 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0210 	mvn.w	r2, #16
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f877 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f869 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f87a 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0201 	mvn.w	r2, #1
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fb ff24 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00c      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f913 	bl	8004e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f90b 	bl	8004eb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f834 	bl	8004d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0220 	mvn.w	r2, #32
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f8d3 	bl	8004e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a46      	ldr	r2, [pc, #280]	@ (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5a:	d00f      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a43      	ldr	r2, [pc, #268]	@ (8004e6c <TIM_Base_SetConfig+0x130>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a42      	ldr	r2, [pc, #264]	@ (8004e70 <TIM_Base_SetConfig+0x134>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a41      	ldr	r2, [pc, #260]	@ (8004e74 <TIM_Base_SetConfig+0x138>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a40      	ldr	r2, [pc, #256]	@ (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a35      	ldr	r2, [pc, #212]	@ (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01f      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9c:	d01b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a32      	ldr	r2, [pc, #200]	@ (8004e6c <TIM_Base_SetConfig+0x130>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d017      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a31      	ldr	r2, [pc, #196]	@ (8004e70 <TIM_Base_SetConfig+0x134>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a30      	ldr	r2, [pc, #192]	@ (8004e74 <TIM_Base_SetConfig+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e7c <TIM_Base_SetConfig+0x140>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e80 <TIM_Base_SetConfig+0x144>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0x9a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e84 <TIM_Base_SetConfig+0x148>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a16      	ldr	r2, [pc, #88]	@ (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00f      	beq.n	8004e34 <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a18      	ldr	r2, [pc, #96]	@ (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_Base_SetConfig+0xf8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	@ (8004e7c <TIM_Base_SetConfig+0x140>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0xf8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a16      	ldr	r2, [pc, #88]	@ (8004e80 <TIM_Base_SetConfig+0x144>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0xf8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	@ (8004e84 <TIM_Base_SetConfig+0x148>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d103      	bne.n	8004e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f023 0201 	bic.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	611a      	str	r2, [r3, #16]
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800

08004e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e042      	b.n	8004f5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fc f8d9 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2224      	movs	r2, #36	@ 0x24
 8004ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fbb2 	bl	8005678 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8b3 	bl	8005080 <UART_SetConfig>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e01b      	b.n	8004f5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fc31 	bl	80057bc <UART_CheckIdleState>
 8004f5a:	4603      	mov	r3, r0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	@ 0x28
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d17b      	bne.n	8005076 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_UART_Transmit+0x26>
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e074      	b.n	8005078 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2221      	movs	r2, #33	@ 0x21
 8004f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f9e:	f7fc fdcd 	bl	8001b3c <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbc:	d108      	bne.n	8004fd0 <HAL_UART_Transmit+0x6c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d104      	bne.n	8004fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	e003      	b.n	8004fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fd8:	e030      	b.n	800503c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2180      	movs	r1, #128	@ 0x80
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fc93 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03d      	b.n	8005078 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500e:	b292      	uxth	r2, r2
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	3302      	adds	r3, #2
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e007      	b.n	800502a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3301      	adds	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1c8      	bne.n	8004fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2200      	movs	r2, #0
 8005050:	2140      	movs	r1, #64	@ 0x40
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fc5c 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e006      	b.n	8005078 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005084:	b08c      	sub	sp, #48	@ 0x30
 8005086:	af00      	add	r7, sp, #0
 8005088:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	431a      	orrs	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	431a      	orrs	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4baa      	ldr	r3, [pc, #680]	@ (8005358 <UART_SetConfig+0x2d8>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a9f      	ldr	r2, [pc, #636]	@ (800535c <UART_SetConfig+0x2dc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e8:	4313      	orrs	r3, r2
 80050ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80050f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005100:	430b      	orrs	r3, r1
 8005102:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	f023 010f 	bic.w	r1, r3, #15
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a90      	ldr	r2, [pc, #576]	@ (8005360 <UART_SetConfig+0x2e0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d125      	bne.n	8005170 <UART_SetConfig+0xf0>
 8005124:	4b8f      	ldr	r3, [pc, #572]	@ (8005364 <UART_SetConfig+0x2e4>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b03      	cmp	r3, #3
 8005130:	d81a      	bhi.n	8005168 <UART_SetConfig+0xe8>
 8005132:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <UART_SetConfig+0xb8>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005149 	.word	0x08005149
 800513c:	08005159 	.word	0x08005159
 8005140:	08005151 	.word	0x08005151
 8005144:	08005161 	.word	0x08005161
 8005148:	2301      	movs	r3, #1
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514e:	e116      	b.n	800537e <UART_SetConfig+0x2fe>
 8005150:	2302      	movs	r3, #2
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005156:	e112      	b.n	800537e <UART_SetConfig+0x2fe>
 8005158:	2304      	movs	r3, #4
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515e:	e10e      	b.n	800537e <UART_SetConfig+0x2fe>
 8005160:	2308      	movs	r3, #8
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005166:	e10a      	b.n	800537e <UART_SetConfig+0x2fe>
 8005168:	2310      	movs	r3, #16
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516e:	e106      	b.n	800537e <UART_SetConfig+0x2fe>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a7c      	ldr	r2, [pc, #496]	@ (8005368 <UART_SetConfig+0x2e8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d138      	bne.n	80051ec <UART_SetConfig+0x16c>
 800517a:	4b7a      	ldr	r3, [pc, #488]	@ (8005364 <UART_SetConfig+0x2e4>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f003 030c 	and.w	r3, r3, #12
 8005184:	2b0c      	cmp	r3, #12
 8005186:	d82d      	bhi.n	80051e4 <UART_SetConfig+0x164>
 8005188:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <UART_SetConfig+0x110>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051e5 	.word	0x080051e5
 8005198:	080051e5 	.word	0x080051e5
 800519c:	080051e5 	.word	0x080051e5
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051e5 	.word	0x080051e5
 80051a8:	080051e5 	.word	0x080051e5
 80051ac:	080051e5 	.word	0x080051e5
 80051b0:	080051cd 	.word	0x080051cd
 80051b4:	080051e5 	.word	0x080051e5
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	080051e5 	.word	0x080051e5
 80051c0:	080051dd 	.word	0x080051dd
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ca:	e0d8      	b.n	800537e <UART_SetConfig+0x2fe>
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	e0d4      	b.n	800537e <UART_SetConfig+0x2fe>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051da:	e0d0      	b.n	800537e <UART_SetConfig+0x2fe>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e0cc      	b.n	800537e <UART_SetConfig+0x2fe>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e0c8      	b.n	800537e <UART_SetConfig+0x2fe>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a5e      	ldr	r2, [pc, #376]	@ (800536c <UART_SetConfig+0x2ec>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d125      	bne.n	8005242 <UART_SetConfig+0x1c2>
 80051f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005364 <UART_SetConfig+0x2e4>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005200:	2b30      	cmp	r3, #48	@ 0x30
 8005202:	d016      	beq.n	8005232 <UART_SetConfig+0x1b2>
 8005204:	2b30      	cmp	r3, #48	@ 0x30
 8005206:	d818      	bhi.n	800523a <UART_SetConfig+0x1ba>
 8005208:	2b20      	cmp	r3, #32
 800520a:	d00a      	beq.n	8005222 <UART_SetConfig+0x1a2>
 800520c:	2b20      	cmp	r3, #32
 800520e:	d814      	bhi.n	800523a <UART_SetConfig+0x1ba>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <UART_SetConfig+0x19a>
 8005214:	2b10      	cmp	r3, #16
 8005216:	d008      	beq.n	800522a <UART_SetConfig+0x1aa>
 8005218:	e00f      	b.n	800523a <UART_SetConfig+0x1ba>
 800521a:	2300      	movs	r3, #0
 800521c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005220:	e0ad      	b.n	800537e <UART_SetConfig+0x2fe>
 8005222:	2302      	movs	r3, #2
 8005224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005228:	e0a9      	b.n	800537e <UART_SetConfig+0x2fe>
 800522a:	2304      	movs	r3, #4
 800522c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005230:	e0a5      	b.n	800537e <UART_SetConfig+0x2fe>
 8005232:	2308      	movs	r3, #8
 8005234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005238:	e0a1      	b.n	800537e <UART_SetConfig+0x2fe>
 800523a:	2310      	movs	r3, #16
 800523c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005240:	e09d      	b.n	800537e <UART_SetConfig+0x2fe>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a4a      	ldr	r2, [pc, #296]	@ (8005370 <UART_SetConfig+0x2f0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d125      	bne.n	8005298 <UART_SetConfig+0x218>
 800524c:	4b45      	ldr	r3, [pc, #276]	@ (8005364 <UART_SetConfig+0x2e4>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005256:	2bc0      	cmp	r3, #192	@ 0xc0
 8005258:	d016      	beq.n	8005288 <UART_SetConfig+0x208>
 800525a:	2bc0      	cmp	r3, #192	@ 0xc0
 800525c:	d818      	bhi.n	8005290 <UART_SetConfig+0x210>
 800525e:	2b80      	cmp	r3, #128	@ 0x80
 8005260:	d00a      	beq.n	8005278 <UART_SetConfig+0x1f8>
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d814      	bhi.n	8005290 <UART_SetConfig+0x210>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <UART_SetConfig+0x1f0>
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d008      	beq.n	8005280 <UART_SetConfig+0x200>
 800526e:	e00f      	b.n	8005290 <UART_SetConfig+0x210>
 8005270:	2300      	movs	r3, #0
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005276:	e082      	b.n	800537e <UART_SetConfig+0x2fe>
 8005278:	2302      	movs	r3, #2
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527e:	e07e      	b.n	800537e <UART_SetConfig+0x2fe>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005286:	e07a      	b.n	800537e <UART_SetConfig+0x2fe>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528e:	e076      	b.n	800537e <UART_SetConfig+0x2fe>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005296:	e072      	b.n	800537e <UART_SetConfig+0x2fe>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a35      	ldr	r2, [pc, #212]	@ (8005374 <UART_SetConfig+0x2f4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d12a      	bne.n	80052f8 <UART_SetConfig+0x278>
 80052a2:	4b30      	ldr	r3, [pc, #192]	@ (8005364 <UART_SetConfig+0x2e4>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052b0:	d01a      	beq.n	80052e8 <UART_SetConfig+0x268>
 80052b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052b6:	d81b      	bhi.n	80052f0 <UART_SetConfig+0x270>
 80052b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052bc:	d00c      	beq.n	80052d8 <UART_SetConfig+0x258>
 80052be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c2:	d815      	bhi.n	80052f0 <UART_SetConfig+0x270>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <UART_SetConfig+0x250>
 80052c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052cc:	d008      	beq.n	80052e0 <UART_SetConfig+0x260>
 80052ce:	e00f      	b.n	80052f0 <UART_SetConfig+0x270>
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d6:	e052      	b.n	800537e <UART_SetConfig+0x2fe>
 80052d8:	2302      	movs	r3, #2
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e04e      	b.n	800537e <UART_SetConfig+0x2fe>
 80052e0:	2304      	movs	r3, #4
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e04a      	b.n	800537e <UART_SetConfig+0x2fe>
 80052e8:	2308      	movs	r3, #8
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e046      	b.n	800537e <UART_SetConfig+0x2fe>
 80052f0:	2310      	movs	r3, #16
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e042      	b.n	800537e <UART_SetConfig+0x2fe>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a17      	ldr	r2, [pc, #92]	@ (800535c <UART_SetConfig+0x2dc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d13a      	bne.n	8005378 <UART_SetConfig+0x2f8>
 8005302:	4b18      	ldr	r3, [pc, #96]	@ (8005364 <UART_SetConfig+0x2e4>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005308:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800530c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005310:	d01a      	beq.n	8005348 <UART_SetConfig+0x2c8>
 8005312:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005316:	d81b      	bhi.n	8005350 <UART_SetConfig+0x2d0>
 8005318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531c:	d00c      	beq.n	8005338 <UART_SetConfig+0x2b8>
 800531e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005322:	d815      	bhi.n	8005350 <UART_SetConfig+0x2d0>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <UART_SetConfig+0x2b0>
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532c:	d008      	beq.n	8005340 <UART_SetConfig+0x2c0>
 800532e:	e00f      	b.n	8005350 <UART_SetConfig+0x2d0>
 8005330:	2300      	movs	r3, #0
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005336:	e022      	b.n	800537e <UART_SetConfig+0x2fe>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533e:	e01e      	b.n	800537e <UART_SetConfig+0x2fe>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005346:	e01a      	b.n	800537e <UART_SetConfig+0x2fe>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534e:	e016      	b.n	800537e <UART_SetConfig+0x2fe>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005356:	e012      	b.n	800537e <UART_SetConfig+0x2fe>
 8005358:	cfff69f3 	.word	0xcfff69f3
 800535c:	40008000 	.word	0x40008000
 8005360:	40013800 	.word	0x40013800
 8005364:	40021000 	.word	0x40021000
 8005368:	40004400 	.word	0x40004400
 800536c:	40004800 	.word	0x40004800
 8005370:	40004c00 	.word	0x40004c00
 8005374:	40005000 	.word	0x40005000
 8005378:	2310      	movs	r3, #16
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4aae      	ldr	r2, [pc, #696]	@ (800563c <UART_SetConfig+0x5bc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	f040 8097 	bne.w	80054b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800538a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800538e:	2b08      	cmp	r3, #8
 8005390:	d823      	bhi.n	80053da <UART_SetConfig+0x35a>
 8005392:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <UART_SetConfig+0x318>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053cb 	.word	0x080053cb
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053db 	.word	0x080053db
 80053b4:	080053db 	.word	0x080053db
 80053b8:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fc86 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80053c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053c2:	e010      	b.n	80053e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b9e      	ldr	r3, [pc, #632]	@ (8005640 <UART_SetConfig+0x5c0>)
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fe fbe7 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 80053ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053d0:	e009      	b.n	80053e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053d8:	e005      	b.n	80053e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8130 	beq.w	800564e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	4a94      	ldr	r2, [pc, #592]	@ (8005644 <UART_SetConfig+0x5c4>)
 80053f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005400:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	429a      	cmp	r2, r3
 8005410:	d305      	bcc.n	800541e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	429a      	cmp	r2, r3
 800541c:	d903      	bls.n	8005426 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005424:	e113      	b.n	800564e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	2200      	movs	r2, #0
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	60fa      	str	r2, [r7, #12]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	4a84      	ldr	r2, [pc, #528]	@ (8005644 <UART_SetConfig+0x5c4>)
 8005434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005438:	b29b      	uxth	r3, r3
 800543a:	2200      	movs	r2, #0
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005448:	f7fa ff32 	bl	80002b0 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	020b      	lsls	r3, r1, #8
 800545e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005462:	0202      	lsls	r2, r0, #8
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	6849      	ldr	r1, [r1, #4]
 8005468:	0849      	lsrs	r1, r1, #1
 800546a:	2000      	movs	r0, #0
 800546c:	460c      	mov	r4, r1
 800546e:	4605      	mov	r5, r0
 8005470:	eb12 0804 	adds.w	r8, r2, r4
 8005474:	eb43 0905 	adc.w	r9, r3, r5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	469a      	mov	sl, r3
 8005480:	4693      	mov	fp, r2
 8005482:	4652      	mov	r2, sl
 8005484:	465b      	mov	r3, fp
 8005486:	4640      	mov	r0, r8
 8005488:	4649      	mov	r1, r9
 800548a:	f7fa ff11 	bl	80002b0 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4613      	mov	r3, r2
 8005494:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549c:	d308      	bcc.n	80054b0 <UART_SetConfig+0x430>
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a4:	d204      	bcs.n	80054b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	e0ce      	b.n	800564e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054b6:	e0ca      	b.n	800564e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c0:	d166      	bne.n	8005590 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80054c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d827      	bhi.n	800551a <UART_SetConfig+0x49a>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <UART_SetConfig+0x450>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	08005505 	.word	0x08005505
 80054dc:	0800551b 	.word	0x0800551b
 80054e0:	0800550b 	.word	0x0800550b
 80054e4:	0800551b 	.word	0x0800551b
 80054e8:	0800551b 	.word	0x0800551b
 80054ec:	0800551b 	.word	0x0800551b
 80054f0:	08005513 	.word	0x08005513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f4:	f7fe fbea 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80054f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054fa:	e014      	b.n	8005526 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054fc:	f7fe fbfc 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8005500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005502:	e010      	b.n	8005526 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005504:	4b4e      	ldr	r3, [pc, #312]	@ (8005640 <UART_SetConfig+0x5c0>)
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005508:	e00d      	b.n	8005526 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550a:	f7fe fb47 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 800550e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005510:	e009      	b.n	8005526 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005518:	e005      	b.n	8005526 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8090 	beq.w	800564e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	4a44      	ldr	r2, [pc, #272]	@ (8005644 <UART_SetConfig+0x5c4>)
 8005534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005538:	461a      	mov	r2, r3
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005540:	005a      	lsls	r2, r3, #1
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	441a      	add	r2, r3
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d916      	bls.n	8005588 <UART_SetConfig+0x508>
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005560:	d212      	bcs.n	8005588 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f023 030f 	bic.w	r3, r3, #15
 800556a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	b29b      	uxth	r3, r3
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	b29a      	uxth	r2, r3
 8005578:	8bfb      	ldrh	r3, [r7, #30]
 800557a:	4313      	orrs	r3, r2
 800557c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	8bfa      	ldrh	r2, [r7, #30]
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	e062      	b.n	800564e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800558e:	e05e      	b.n	800564e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005590:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005594:	2b08      	cmp	r3, #8
 8005596:	d828      	bhi.n	80055ea <UART_SetConfig+0x56a>
 8005598:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <UART_SetConfig+0x520>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	080055eb 	.word	0x080055eb
 80055b0:	080055db 	.word	0x080055db
 80055b4:	080055eb 	.word	0x080055eb
 80055b8:	080055eb 	.word	0x080055eb
 80055bc:	080055eb 	.word	0x080055eb
 80055c0:	080055e3 	.word	0x080055e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c4:	f7fe fb82 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80055c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ca:	e014      	b.n	80055f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055cc:	f7fe fb94 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 80055d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055d2:	e010      	b.n	80055f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <UART_SetConfig+0x5c0>)
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055d8:	e00d      	b.n	80055f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055da:	f7fe fadf 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 80055de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055e0:	e009      	b.n	80055f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055e8:	e005      	b.n	80055f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055f4:	bf00      	nop
    }

    if (pclk != 0U)
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d028      	beq.n	800564e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	4a10      	ldr	r2, [pc, #64]	@ (8005644 <UART_SetConfig+0x5c4>)
 8005602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005606:	461a      	mov	r2, r3
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	fbb3 f2f2 	udiv	r2, r3, r2
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	441a      	add	r2, r3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	fbb2 f3f3 	udiv	r3, r2, r3
 800561e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	2b0f      	cmp	r3, #15
 8005624:	d910      	bls.n	8005648 <UART_SetConfig+0x5c8>
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800562c:	d20c      	bcs.n	8005648 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	b29a      	uxth	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
 8005638:	e009      	b.n	800564e <UART_SetConfig+0x5ce>
 800563a:	bf00      	nop
 800563c:	40008000 	.word	0x40008000
 8005640:	00f42400 	.word	0x00f42400
 8005644:	08007c08 	.word	0x08007c08
      }
      else
      {
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2201      	movs	r2, #1
 8005652:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2201      	movs	r2, #1
 800565a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2200      	movs	r2, #0
 8005668:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800566a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800566e:	4618      	mov	r0, r3
 8005670:	3730      	adds	r7, #48	@ 0x30
 8005672:	46bd      	mov	sp, r7
 8005674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01a      	beq.n	800578e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005776:	d10a      	bne.n	800578e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b098      	sub	sp, #96	@ 0x60
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057cc:	f7fc f9b6 	bl	8001b3c <HAL_GetTick>
 80057d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d12f      	bne.n	8005840 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	2200      	movs	r2, #0
 80057ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f88e 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d022      	beq.n	8005840 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800580e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005818:	647b      	str	r3, [r7, #68]	@ 0x44
 800581a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800581e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e063      	b.n	8005908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d149      	bne.n	80058e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005856:	2200      	movs	r2, #0
 8005858:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f857 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d03c      	beq.n	80058e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	623b      	str	r3, [r7, #32]
   return(result);
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005886:	633b      	str	r3, [r7, #48]	@ 0x30
 8005888:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800588c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ba:	61fa      	str	r2, [r7, #28]
 80058bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	69b9      	ldr	r1, [r7, #24]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	617b      	str	r3, [r7, #20]
   return(result);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e012      	b.n	8005908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3758      	adds	r7, #88	@ 0x58
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005920:	e04f      	b.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005928:	d04b      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fc f907 	bl	8001b3c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <UART_WaitOnFlagUntilTimeout+0x30>
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e04e      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d037      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b80      	cmp	r3, #128	@ 0x80
 8005956:	d034      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	d031      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b08      	cmp	r3, #8
 800596a:	d110      	bne.n	800598e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2208      	movs	r2, #8
 8005972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f838 	bl	80059ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2208      	movs	r2, #8
 800597e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e029      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800599c:	d111      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f81e 	bl	80059ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e00f      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4013      	ands	r3, r2
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d0a0      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b095      	sub	sp, #84	@ 0x54
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e3      	bne.n	8005a24 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d118      	bne.n	8005a96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6979      	ldr	r1, [r7, #20]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e6      	bne.n	8005a64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005aaa:	bf00      	nop
 8005aac:	3754      	adds	r7, #84	@ 0x54
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_UARTEx_DisableFifoMode+0x16>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e027      	b.n	8005b1c <HAL_UARTEx_DisableFifoMode+0x66>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	@ 0x24
 8005ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005afa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e02d      	b.n	8005b9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	@ 0x24
 8005b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f84f 	bl	8005c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e02d      	b.n	8005c18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	@ 0x24
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f811 	bl	8005c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d108      	bne.n	8005c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c40:	e031      	b.n	8005ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c42:	2308      	movs	r3, #8
 8005c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c46:	2308      	movs	r3, #8
 8005c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	0e5b      	lsrs	r3, r3, #25
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	0f5b      	lsrs	r3, r3, #29
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	7b3a      	ldrb	r2, [r7, #12]
 8005c6e:	4911      	ldr	r1, [pc, #68]	@ (8005cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005c70:	5c8a      	ldrb	r2, [r1, r2]
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c76:	7b3a      	ldrb	r2, [r7, #12]
 8005c78:	490f      	ldr	r1, [pc, #60]	@ (8005cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	7b7a      	ldrb	r2, [r7, #13]
 8005c8c:	4909      	ldr	r1, [pc, #36]	@ (8005cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005c8e:	5c8a      	ldrb	r2, [r1, r2]
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c94:	7b7a      	ldrb	r2, [r7, #13]
 8005c96:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	08007c20 	.word	0x08007c20
 8005cb8:	08007c28 	.word	0x08007c28

08005cbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cce:	2b84      	cmp	r3, #132	@ 0x84
 8005cd0:	d005      	beq.n	8005cde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005cd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	3303      	adds	r3, #3
 8005cdc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005cf0:	f000 fae4 	bl	80062bc <vTaskStartScheduler>
  
  return osOK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfc:	b089      	sub	sp, #36	@ 0x24
 8005cfe:	af04      	add	r7, sp, #16
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <osThreadCreate+0x54>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01c      	beq.n	8005d4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685c      	ldr	r4, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691e      	ldr	r6, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff ffc8 	bl	8005cbc <makeFreeRtosPriority>
 8005d2c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d36:	9202      	str	r2, [sp, #8]
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	9100      	str	r1, [sp, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4632      	mov	r2, r6
 8005d40:	4629      	mov	r1, r5
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 f8ed 	bl	8005f22 <xTaskCreateStatic>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e01c      	b.n	8005d88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685c      	ldr	r4, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d5a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff ffaa 	bl	8005cbc <makeFreeRtosPriority>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	f107 030c 	add.w	r3, r7, #12
 8005d6e:	9301      	str	r3, [sp, #4]
 8005d70:	9200      	str	r2, [sp, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	4632      	mov	r2, r6
 8005d76:	4629      	mov	r1, r5
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 f932 	bl	8005fe2 <xTaskCreate>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d001      	beq.n	8005d88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <osDelay+0x16>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	e000      	b.n	8005daa <osDelay+0x18>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fa50 	bl	8006250 <vTaskDelay>
  
  return osOK;
 8005db0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f103 0208 	add.w	r2, r3, #8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dd2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f103 0208 	add.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f103 0208 	add.w	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e72:	d103      	bne.n	8005e7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e00c      	b.n	8005e96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e002      	b.n	8005e8a <vListInsert+0x2e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d2f6      	bcs.n	8005e84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6892      	ldr	r2, [r2, #8]
 8005ee4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6852      	ldr	r2, [r2, #4]
 8005eee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d103      	bne.n	8005f02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	1e5a      	subs	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b08e      	sub	sp, #56	@ 0x38
 8005f26:	af04      	add	r7, sp, #16
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	61fb      	str	r3, [r7, #28]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f6c:	2354      	movs	r3, #84	@ 0x54
 8005f6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b54      	cmp	r3, #84	@ 0x54
 8005f74:	d00b      	beq.n	8005f8e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	61bb      	str	r3, [r7, #24]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01e      	beq.n	8005fd4 <xTaskCreateStatic+0xb2>
 8005f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fae:	2300      	movs	r3, #0
 8005fb0:	9303      	str	r3, [sp, #12]
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	9302      	str	r3, [sp, #8]
 8005fb6:	f107 0314 	add.w	r3, r7, #20
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f850 	bl	800606c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fce:	f000 f8d5 	bl	800617c <prvAddNewTaskToReadyList>
 8005fd2:	e001      	b.n	8005fd8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fd8:	697b      	ldr	r3, [r7, #20]
	}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3728      	adds	r7, #40	@ 0x28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b08c      	sub	sp, #48	@ 0x30
 8005fe6:	af04      	add	r7, sp, #16
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fece 	bl	8006d98 <pvPortMalloc>
 8005ffc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006004:	2054      	movs	r0, #84	@ 0x54
 8006006:	f000 fec7 	bl	8006d98 <pvPortMalloc>
 800600a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
 8006018:	e005      	b.n	8006026 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800601a:	6978      	ldr	r0, [r7, #20]
 800601c:	f000 ff8a 	bl	8006f34 <vPortFree>
 8006020:	e001      	b.n	8006026 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d017      	beq.n	800605c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	2300      	movs	r3, #0
 8006038:	9303      	str	r3, [sp, #12]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	9302      	str	r3, [sp, #8]
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	9301      	str	r3, [sp, #4]
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f80e 	bl	800606c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006050:	69f8      	ldr	r0, [r7, #28]
 8006052:	f000 f893 	bl	800617c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006056:	2301      	movs	r3, #1
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	e002      	b.n	8006062 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800605c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006060:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006062:	69bb      	ldr	r3, [r7, #24]
	}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006084:	3b01      	subs	r3, #1
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f023 0307 	bic.w	r3, r3, #7
 8006092:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	617b      	str	r3, [r7, #20]
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01f      	beq.n	80060fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	e012      	b.n	80060e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	7819      	ldrb	r1, [r3, #0]
 80060ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	3334      	adds	r3, #52	@ 0x34
 80060d2:	460a      	mov	r2, r1
 80060d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d006      	beq.n	80060f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	3301      	adds	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	d9e9      	bls.n	80060c2 <prvInitialiseNewTask+0x56>
 80060ee:	e000      	b.n	80060f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80060f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060fa:	e003      	b.n	8006104 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	2b06      	cmp	r3, #6
 8006108:	d901      	bls.n	800610e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800610a:	2306      	movs	r3, #6
 800610c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006112:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006118:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	2200      	movs	r2, #0
 800611e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	3304      	adds	r3, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fe68 	bl	8005dfa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	3318      	adds	r3, #24
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fe63 	bl	8005dfa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006138:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	f1c3 0207 	rsb	r2, r3, #7
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006148:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	2200      	movs	r2, #0
 800614e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	69b8      	ldr	r0, [r7, #24]
 800615e:	f000 fc0d 	bl	800697c <pxPortInitialiseStack>
 8006162:	4602      	mov	r2, r0
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006172:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006174:	bf00      	nop
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006184:	f000 fd28 	bl	8006bd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006188:	4b2a      	ldr	r3, [pc, #168]	@ (8006234 <prvAddNewTaskToReadyList+0xb8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	4a29      	ldr	r2, [pc, #164]	@ (8006234 <prvAddNewTaskToReadyList+0xb8>)
 8006190:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006192:	4b29      	ldr	r3, [pc, #164]	@ (8006238 <prvAddNewTaskToReadyList+0xbc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800619a:	4a27      	ldr	r2, [pc, #156]	@ (8006238 <prvAddNewTaskToReadyList+0xbc>)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061a0:	4b24      	ldr	r3, [pc, #144]	@ (8006234 <prvAddNewTaskToReadyList+0xb8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d110      	bne.n	80061ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061a8:	f000 fac4 	bl	8006734 <prvInitialiseTaskLists>
 80061ac:	e00d      	b.n	80061ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061ae:	4b23      	ldr	r3, [pc, #140]	@ (800623c <prvAddNewTaskToReadyList+0xc0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061b6:	4b20      	ldr	r3, [pc, #128]	@ (8006238 <prvAddNewTaskToReadyList+0xbc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d802      	bhi.n	80061ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <prvAddNewTaskToReadyList+0xbc>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <prvAddNewTaskToReadyList+0xc4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006240 <prvAddNewTaskToReadyList+0xc4>)
 80061d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	2201      	movs	r2, #1
 80061da:	409a      	lsls	r2, r3
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <prvAddNewTaskToReadyList+0xc8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	4a18      	ldr	r2, [pc, #96]	@ (8006244 <prvAddNewTaskToReadyList+0xc8>)
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4a15      	ldr	r2, [pc, #84]	@ (8006248 <prvAddNewTaskToReadyList+0xcc>)
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7ff fe09 	bl	8005e14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006202:	f000 fd1b 	bl	8006c3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006206:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <prvAddNewTaskToReadyList+0xc0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800620e:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <prvAddNewTaskToReadyList+0xbc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006218:	429a      	cmp	r2, r3
 800621a:	d207      	bcs.n	800622c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800621c:	4b0b      	ldr	r3, [pc, #44]	@ (800624c <prvAddNewTaskToReadyList+0xd0>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000670 	.word	0x20000670
 8006238:	20000570 	.word	0x20000570
 800623c:	2000067c 	.word	0x2000067c
 8006240:	2000068c 	.word	0x2000068c
 8006244:	20000678 	.word	0x20000678
 8006248:	20000574 	.word	0x20000574
 800624c:	e000ed04 	.word	0xe000ed04

08006250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006262:	4b14      	ldr	r3, [pc, #80]	@ (80062b4 <vTaskDelay+0x64>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <vTaskDelay+0x32>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60bb      	str	r3, [r7, #8]
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	e7fd      	b.n	800627e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006282:	f000 f87d 	bl	8006380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006286:	2100      	movs	r1, #0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fb11 	bl	80068b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800628e:	f000 f885 	bl	800639c <xTaskResumeAll>
 8006292:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800629a:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <vTaskDelay+0x68>)
 800629c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000698 	.word	0x20000698
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	@ 0x28
 80062c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ca:	463a      	mov	r2, r7
 80062cc:	1d39      	adds	r1, r7, #4
 80062ce:	f107 0308 	add.w	r3, r7, #8
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fa f964 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	9202      	str	r2, [sp, #8]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	2300      	movs	r3, #0
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	2300      	movs	r3, #0
 80062e8:	460a      	mov	r2, r1
 80062ea:	491f      	ldr	r1, [pc, #124]	@ (8006368 <vTaskStartScheduler+0xac>)
 80062ec:	481f      	ldr	r0, [pc, #124]	@ (800636c <vTaskStartScheduler+0xb0>)
 80062ee:	f7ff fe18 	bl	8005f22 <xTaskCreateStatic>
 80062f2:	4603      	mov	r3, r0
 80062f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006370 <vTaskStartScheduler+0xb4>)
 80062f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006370 <vTaskStartScheduler+0xb4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006300:	2301      	movs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e001      	b.n	800630a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d116      	bne.n	800633e <vTaskStartScheduler+0x82>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006324:	4b13      	ldr	r3, [pc, #76]	@ (8006374 <vTaskStartScheduler+0xb8>)
 8006326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800632a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800632c:	4b12      	ldr	r3, [pc, #72]	@ (8006378 <vTaskStartScheduler+0xbc>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <vTaskStartScheduler+0xc0>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006338:	f000 fbaa 	bl	8006a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800633c:	e00f      	b.n	800635e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006344:	d10b      	bne.n	800635e <vTaskStartScheduler+0xa2>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60fb      	str	r3, [r7, #12]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <vTaskStartScheduler+0x9e>
}
 800635e:	bf00      	nop
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	08007bb8 	.word	0x08007bb8
 800636c:	08006705 	.word	0x08006705
 8006370:	20000694 	.word	0x20000694
 8006374:	20000690 	.word	0x20000690
 8006378:	2000067c 	.word	0x2000067c
 800637c:	20000674 	.word	0x20000674

08006380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006384:	4b04      	ldr	r3, [pc, #16]	@ (8006398 <vTaskSuspendAll+0x18>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	4a03      	ldr	r2, [pc, #12]	@ (8006398 <vTaskSuspendAll+0x18>)
 800638c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000698 	.word	0x20000698

0800639c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063aa:	4b42      	ldr	r3, [pc, #264]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <xTaskResumeAll+0x2e>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	603b      	str	r3, [r7, #0]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063ca:	f000 fc05 	bl	8006bd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063ce:	4b39      	ldr	r3, [pc, #228]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	4a37      	ldr	r2, [pc, #220]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d8:	4b36      	ldr	r3, [pc, #216]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d161      	bne.n	80064a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063e0:	4b35      	ldr	r3, [pc, #212]	@ (80064b8 <xTaskResumeAll+0x11c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d05d      	beq.n	80064a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e8:	e02e      	b.n	8006448 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ea:	4b34      	ldr	r3, [pc, #208]	@ (80064bc <xTaskResumeAll+0x120>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3318      	adds	r3, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff fd69 	bl	8005ece <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fd64 	bl	8005ece <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640a:	2201      	movs	r2, #1
 800640c:	409a      	lsls	r2, r3
 800640e:	4b2c      	ldr	r3, [pc, #176]	@ (80064c0 <xTaskResumeAll+0x124>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4313      	orrs	r3, r2
 8006414:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <xTaskResumeAll+0x124>)
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4a27      	ldr	r2, [pc, #156]	@ (80064c4 <xTaskResumeAll+0x128>)
 8006426:	441a      	add	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f7ff fcf0 	bl	8005e14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006438:	4b23      	ldr	r3, [pc, #140]	@ (80064c8 <xTaskResumeAll+0x12c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006442:	4b22      	ldr	r3, [pc, #136]	@ (80064cc <xTaskResumeAll+0x130>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006448:	4b1c      	ldr	r3, [pc, #112]	@ (80064bc <xTaskResumeAll+0x120>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1cc      	bne.n	80063ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006456:	f000 fa0b 	bl	8006870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800645a:	4b1d      	ldr	r3, [pc, #116]	@ (80064d0 <xTaskResumeAll+0x134>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d010      	beq.n	8006488 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006466:	f000 f837 	bl	80064d8 <xTaskIncrementTick>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006470:	4b16      	ldr	r3, [pc, #88]	@ (80064cc <xTaskResumeAll+0x130>)
 8006472:	2201      	movs	r2, #1
 8006474:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3b01      	subs	r3, #1
 800647a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006482:	4b13      	ldr	r3, [pc, #76]	@ (80064d0 <xTaskResumeAll+0x134>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006488:	4b10      	ldr	r3, [pc, #64]	@ (80064cc <xTaskResumeAll+0x130>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006494:	4b0f      	ldr	r3, [pc, #60]	@ (80064d4 <xTaskResumeAll+0x138>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064a4:	f000 fbca 	bl	8006c3c <vPortExitCritical>

	return xAlreadyYielded;
 80064a8:	68bb      	ldr	r3, [r7, #8]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000698 	.word	0x20000698
 80064b8:	20000670 	.word	0x20000670
 80064bc:	20000630 	.word	0x20000630
 80064c0:	20000678 	.word	0x20000678
 80064c4:	20000574 	.word	0x20000574
 80064c8:	20000570 	.word	0x20000570
 80064cc:	20000684 	.word	0x20000684
 80064d0:	20000680 	.word	0x20000680
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006620 <xTaskIncrementTick+0x148>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 808f 	bne.w	800660a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006624 <xTaskIncrementTick+0x14c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006624 <xTaskIncrementTick+0x14c>)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d121      	bne.n	8006544 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006500:	4b49      	ldr	r3, [pc, #292]	@ (8006628 <xTaskIncrementTick+0x150>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <xTaskIncrementTick+0x4a>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	603b      	str	r3, [r7, #0]
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <xTaskIncrementTick+0x46>
 8006522:	4b41      	ldr	r3, [pc, #260]	@ (8006628 <xTaskIncrementTick+0x150>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	4b40      	ldr	r3, [pc, #256]	@ (800662c <xTaskIncrementTick+0x154>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a3e      	ldr	r2, [pc, #248]	@ (8006628 <xTaskIncrementTick+0x150>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4a3e      	ldr	r2, [pc, #248]	@ (800662c <xTaskIncrementTick+0x154>)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4b3e      	ldr	r3, [pc, #248]	@ (8006630 <xTaskIncrementTick+0x158>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	4a3c      	ldr	r2, [pc, #240]	@ (8006630 <xTaskIncrementTick+0x158>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	f000 f996 	bl	8006870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006544:	4b3b      	ldr	r3, [pc, #236]	@ (8006634 <xTaskIncrementTick+0x15c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d348      	bcc.n	80065e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800654e:	4b36      	ldr	r3, [pc, #216]	@ (8006628 <xTaskIncrementTick+0x150>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006558:	4b36      	ldr	r3, [pc, #216]	@ (8006634 <xTaskIncrementTick+0x15c>)
 800655a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800655e:	601a      	str	r2, [r3, #0]
					break;
 8006560:	e03e      	b.n	80065e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006562:	4b31      	ldr	r3, [pc, #196]	@ (8006628 <xTaskIncrementTick+0x150>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d203      	bcs.n	8006582 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800657a:	4a2e      	ldr	r2, [pc, #184]	@ (8006634 <xTaskIncrementTick+0x15c>)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006580:	e02e      	b.n	80065e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	3304      	adds	r3, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fca1 	bl	8005ece <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	3318      	adds	r3, #24
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fc98 	bl	8005ece <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	2201      	movs	r2, #1
 80065a4:	409a      	lsls	r2, r3
 80065a6:	4b24      	ldr	r3, [pc, #144]	@ (8006638 <xTaskIncrementTick+0x160>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <xTaskIncrementTick+0x160>)
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4a1f      	ldr	r2, [pc, #124]	@ (800663c <xTaskIncrementTick+0x164>)
 80065be:	441a      	add	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7ff fc24 	bl	8005e14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006640 <xTaskIncrementTick+0x168>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d3b9      	bcc.n	800654e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065da:	2301      	movs	r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065de:	e7b6      	b.n	800654e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065e0:	4b17      	ldr	r3, [pc, #92]	@ (8006640 <xTaskIncrementTick+0x168>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e6:	4915      	ldr	r1, [pc, #84]	@ (800663c <xTaskIncrementTick+0x164>)
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d901      	bls.n	80065fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065f8:	2301      	movs	r3, #1
 80065fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065fc:	4b11      	ldr	r3, [pc, #68]	@ (8006644 <xTaskIncrementTick+0x16c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e004      	b.n	8006614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800660a:	4b0f      	ldr	r3, [pc, #60]	@ (8006648 <xTaskIncrementTick+0x170>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3301      	adds	r3, #1
 8006610:	4a0d      	ldr	r2, [pc, #52]	@ (8006648 <xTaskIncrementTick+0x170>)
 8006612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006614:	697b      	ldr	r3, [r7, #20]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000698 	.word	0x20000698
 8006624:	20000674 	.word	0x20000674
 8006628:	20000628 	.word	0x20000628
 800662c:	2000062c 	.word	0x2000062c
 8006630:	20000688 	.word	0x20000688
 8006634:	20000690 	.word	0x20000690
 8006638:	20000678 	.word	0x20000678
 800663c:	20000574 	.word	0x20000574
 8006640:	20000570 	.word	0x20000570
 8006644:	20000684 	.word	0x20000684
 8006648:	20000680 	.word	0x20000680

0800664c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006652:	4b27      	ldr	r3, [pc, #156]	@ (80066f0 <vTaskSwitchContext+0xa4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800665a:	4b26      	ldr	r3, [pc, #152]	@ (80066f4 <vTaskSwitchContext+0xa8>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006660:	e040      	b.n	80066e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006662:	4b24      	ldr	r3, [pc, #144]	@ (80066f4 <vTaskSwitchContext+0xa8>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006668:	4b23      	ldr	r3, [pc, #140]	@ (80066f8 <vTaskSwitchContext+0xac>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	fab3 f383 	clz	r3, r3
 8006674:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	f1c3 031f 	rsb	r3, r3, #31
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	491f      	ldr	r1, [pc, #124]	@ (80066fc <vTaskSwitchContext+0xb0>)
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <vTaskSwitchContext+0x5a>
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4a11      	ldr	r2, [pc, #68]	@ (80066fc <vTaskSwitchContext+0xb0>)
 80066b6:	4413      	add	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	605a      	str	r2, [r3, #4]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	3308      	adds	r3, #8
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d104      	bne.n	80066da <vTaskSwitchContext+0x8e>
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4a07      	ldr	r2, [pc, #28]	@ (8006700 <vTaskSwitchContext+0xb4>)
 80066e2:	6013      	str	r3, [r2, #0]
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000698 	.word	0x20000698
 80066f4:	20000684 	.word	0x20000684
 80066f8:	20000678 	.word	0x20000678
 80066fc:	20000574 	.word	0x20000574
 8006700:	20000570 	.word	0x20000570

08006704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800670c:	f000 f852 	bl	80067b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006710:	4b06      	ldr	r3, [pc, #24]	@ (800672c <prvIdleTask+0x28>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d9f9      	bls.n	800670c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006718:	4b05      	ldr	r3, [pc, #20]	@ (8006730 <prvIdleTask+0x2c>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006728:	e7f0      	b.n	800670c <prvIdleTask+0x8>
 800672a:	bf00      	nop
 800672c:	20000574 	.word	0x20000574
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	e00c      	b.n	800675a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4a12      	ldr	r2, [pc, #72]	@ (8006794 <prvInitialiseTaskLists+0x60>)
 800674c:	4413      	add	r3, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fb33 	bl	8005dba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3301      	adds	r3, #1
 8006758:	607b      	str	r3, [r7, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b06      	cmp	r3, #6
 800675e:	d9ef      	bls.n	8006740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006760:	480d      	ldr	r0, [pc, #52]	@ (8006798 <prvInitialiseTaskLists+0x64>)
 8006762:	f7ff fb2a 	bl	8005dba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006766:	480d      	ldr	r0, [pc, #52]	@ (800679c <prvInitialiseTaskLists+0x68>)
 8006768:	f7ff fb27 	bl	8005dba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800676c:	480c      	ldr	r0, [pc, #48]	@ (80067a0 <prvInitialiseTaskLists+0x6c>)
 800676e:	f7ff fb24 	bl	8005dba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006772:	480c      	ldr	r0, [pc, #48]	@ (80067a4 <prvInitialiseTaskLists+0x70>)
 8006774:	f7ff fb21 	bl	8005dba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006778:	480b      	ldr	r0, [pc, #44]	@ (80067a8 <prvInitialiseTaskLists+0x74>)
 800677a:	f7ff fb1e 	bl	8005dba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800677e:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <prvInitialiseTaskLists+0x78>)
 8006780:	4a05      	ldr	r2, [pc, #20]	@ (8006798 <prvInitialiseTaskLists+0x64>)
 8006782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006784:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <prvInitialiseTaskLists+0x7c>)
 8006786:	4a05      	ldr	r2, [pc, #20]	@ (800679c <prvInitialiseTaskLists+0x68>)
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000574 	.word	0x20000574
 8006798:	20000600 	.word	0x20000600
 800679c:	20000614 	.word	0x20000614
 80067a0:	20000630 	.word	0x20000630
 80067a4:	20000644 	.word	0x20000644
 80067a8:	2000065c 	.word	0x2000065c
 80067ac:	20000628 	.word	0x20000628
 80067b0:	2000062c 	.word	0x2000062c

080067b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ba:	e019      	b.n	80067f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067bc:	f000 fa0c 	bl	8006bd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c0:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <prvCheckTasksWaitingTermination+0x50>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fb7e 	bl	8005ece <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <prvCheckTasksWaitingTermination+0x54>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006808 <prvCheckTasksWaitingTermination+0x54>)
 80067da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067dc:	4b0b      	ldr	r3, [pc, #44]	@ (800680c <prvCheckTasksWaitingTermination+0x58>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	4a0a      	ldr	r2, [pc, #40]	@ (800680c <prvCheckTasksWaitingTermination+0x58>)
 80067e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067e6:	f000 fa29 	bl	8006c3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f810 	bl	8006810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f0:	4b06      	ldr	r3, [pc, #24]	@ (800680c <prvCheckTasksWaitingTermination+0x58>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e1      	bne.n	80067bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000644 	.word	0x20000644
 8006808:	20000670 	.word	0x20000670
 800680c:	20000658 	.word	0x20000658

08006810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800681e:	2b00      	cmp	r3, #0
 8006820:	d108      	bne.n	8006834 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fb84 	bl	8006f34 <vPortFree>
				vPortFree( pxTCB );
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb81 	bl	8006f34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006832:	e019      	b.n	8006868 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800683a:	2b01      	cmp	r3, #1
 800683c:	d103      	bne.n	8006846 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fb78 	bl	8006f34 <vPortFree>
	}
 8006844:	e010      	b.n	8006868 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800684c:	2b02      	cmp	r3, #2
 800684e:	d00b      	beq.n	8006868 <prvDeleteTCB+0x58>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <prvDeleteTCB+0x54>
	}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006876:	4b0c      	ldr	r3, [pc, #48]	@ (80068a8 <prvResetNextTaskUnblockTime+0x38>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006880:	4b0a      	ldr	r3, [pc, #40]	@ (80068ac <prvResetNextTaskUnblockTime+0x3c>)
 8006882:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006888:	e008      	b.n	800689c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688a:	4b07      	ldr	r3, [pc, #28]	@ (80068a8 <prvResetNextTaskUnblockTime+0x38>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4a04      	ldr	r2, [pc, #16]	@ (80068ac <prvResetNextTaskUnblockTime+0x3c>)
 800689a:	6013      	str	r3, [r2, #0]
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	20000628 	.word	0x20000628
 80068ac:	20000690 	.word	0x20000690

080068b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068ba:	4b29      	ldr	r3, [pc, #164]	@ (8006960 <prvAddCurrentTaskToDelayedList+0xb0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068c0:	4b28      	ldr	r3, [pc, #160]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff fb01 	bl	8005ece <uxListRemove>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80068d2:	4b24      	ldr	r3, [pc, #144]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d8:	2201      	movs	r2, #1
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43da      	mvns	r2, r3
 80068e0:	4b21      	ldr	r3, [pc, #132]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4013      	ands	r3, r2
 80068e6:	4a20      	ldr	r2, [pc, #128]	@ (8006968 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068f0:	d10a      	bne.n	8006908 <prvAddCurrentTaskToDelayedList+0x58>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4619      	mov	r1, r3
 8006900:	481a      	ldr	r0, [pc, #104]	@ (800696c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006902:	f7ff fa87 	bl	8005e14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006906:	e026      	b.n	8006956 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006910:	4b14      	ldr	r3, [pc, #80]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d209      	bcs.n	8006934 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006920:	4b13      	ldr	r3, [pc, #76]	@ (8006970 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4b0f      	ldr	r3, [pc, #60]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3304      	adds	r3, #4
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7ff fa95 	bl	8005e5c <vListInsert>
}
 8006932:	e010      	b.n	8006956 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006934:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xb4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f7ff fa8b 	bl	8005e5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006946:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	d202      	bcs.n	8006956 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006950:	4a09      	ldr	r2, [pc, #36]	@ (8006978 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	6013      	str	r3, [r2, #0]
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000674 	.word	0x20000674
 8006964:	20000570 	.word	0x20000570
 8006968:	20000678 	.word	0x20000678
 800696c:	2000065c 	.word	0x2000065c
 8006970:	2000062c 	.word	0x2000062c
 8006974:	20000628 	.word	0x20000628
 8006978:	20000690 	.word	0x20000690

0800697c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3b04      	subs	r3, #4
 800698c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3b04      	subs	r3, #4
 800699a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f023 0201 	bic.w	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3b04      	subs	r3, #4
 80069aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069ac:	4a0c      	ldr	r2, [pc, #48]	@ (80069e0 <pxPortInitialiseStack+0x64>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3b14      	subs	r3, #20
 80069b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3b04      	subs	r3, #4
 80069c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f06f 0202 	mvn.w	r2, #2
 80069ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3b20      	subs	r3, #32
 80069d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	080069e5 	.word	0x080069e5

080069e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069ee:	4b13      	ldr	r3, [pc, #76]	@ (8006a3c <prvTaskExitError+0x58>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069f6:	d00b      	beq.n	8006a10 <prvTaskExitError+0x2c>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60fb      	str	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <prvTaskExitError+0x28>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	60bb      	str	r3, [r7, #8]
}
 8006a22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a24:	bf00      	nop
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0fc      	beq.n	8006a26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	2000008c 	.word	0x2000008c

08006a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a40:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <pxCurrentTCBConst2>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f380 8809 	msr	PSP, r0
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8811 	msr	BASEPRI, r0
 8006a5a:	4770      	bx	lr
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst2>:
 8006a60:	20000570 	.word	0x20000570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a68:	4808      	ldr	r0, [pc, #32]	@ (8006a8c <prvPortStartFirstTask+0x24>)
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	6800      	ldr	r0, [r0, #0]
 8006a6e:	f380 8808 	msr	MSP, r0
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8814 	msr	CONTROL, r0
 8006a7a:	b662      	cpsie	i
 8006a7c:	b661      	cpsie	f
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	df00      	svc	0
 8006a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a8a:	bf00      	nop
 8006a8c:	e000ed08 	.word	0xe000ed08

08006a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a96:	4b47      	ldr	r3, [pc, #284]	@ (8006bb4 <xPortStartScheduler+0x124>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a47      	ldr	r2, [pc, #284]	@ (8006bb8 <xPortStartScheduler+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10b      	bne.n	8006ab8 <xPortStartScheduler+0x28>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8006bb4 <xPortStartScheduler+0x124>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a3f      	ldr	r2, [pc, #252]	@ (8006bbc <xPortStartScheduler+0x12c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d10b      	bne.n	8006ada <xPortStartScheduler+0x4a>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	60fb      	str	r3, [r7, #12]
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	e7fd      	b.n	8006ad6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ada:	4b39      	ldr	r3, [pc, #228]	@ (8006bc0 <xPortStartScheduler+0x130>)
 8006adc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	22ff      	movs	r2, #255	@ 0xff
 8006aea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	4b31      	ldr	r3, [pc, #196]	@ (8006bc4 <xPortStartScheduler+0x134>)
 8006b00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b02:	4b31      	ldr	r3, [pc, #196]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b04:	2207      	movs	r2, #7
 8006b06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b08:	e009      	b.n	8006b1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4a2d      	ldr	r2, [pc, #180]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b26:	2b80      	cmp	r3, #128	@ 0x80
 8006b28:	d0ef      	beq.n	8006b0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b2a:	4b27      	ldr	r3, [pc, #156]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1c3 0307 	rsb	r3, r3, #7
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d00b      	beq.n	8006b4e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60bb      	str	r3, [r7, #8]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b58:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b60:	4a19      	ldr	r2, [pc, #100]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b6c:	4b17      	ldr	r3, [pc, #92]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a16      	ldr	r2, [pc, #88]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b78:	4b14      	ldr	r3, [pc, #80]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a13      	ldr	r2, [pc, #76]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b84:	f000 f8da 	bl	8006d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b88:	4b11      	ldr	r3, [pc, #68]	@ (8006bd0 <xPortStartScheduler+0x140>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b8e:	f000 f8f9 	bl	8006d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b92:	4b10      	ldr	r3, [pc, #64]	@ (8006bd4 <xPortStartScheduler+0x144>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd4 <xPortStartScheduler+0x144>)
 8006b98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b9e:	f7ff ff63 	bl	8006a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ba2:	f7ff fd53 	bl	800664c <vTaskSwitchContext>
	prvTaskExitError();
 8006ba6:	f7ff ff1d 	bl	80069e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	e000ed00 	.word	0xe000ed00
 8006bb8:	410fc271 	.word	0x410fc271
 8006bbc:	410fc270 	.word	0x410fc270
 8006bc0:	e000e400 	.word	0xe000e400
 8006bc4:	2000069c 	.word	0x2000069c
 8006bc8:	200006a0 	.word	0x200006a0
 8006bcc:	e000ed20 	.word	0xe000ed20
 8006bd0:	2000008c 	.word	0x2000008c
 8006bd4:	e000ef34 	.word	0xe000ef34

08006bd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	607b      	str	r3, [r7, #4]
}
 8006bf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bf2:	4b10      	ldr	r3, [pc, #64]	@ (8006c34 <vPortEnterCritical+0x5c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8006c34 <vPortEnterCritical+0x5c>)
 8006bfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <vPortEnterCritical+0x5c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d110      	bne.n	8006c26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c04:	4b0c      	ldr	r3, [pc, #48]	@ (8006c38 <vPortEnterCritical+0x60>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	603b      	str	r3, [r7, #0]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <vPortEnterCritical+0x4a>
	}
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	2000008c 	.word	0x2000008c
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c42:	4b12      	ldr	r3, [pc, #72]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <vPortExitCritical+0x26>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	607b      	str	r3, [r7, #4]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c62:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	4a08      	ldr	r2, [pc, #32]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c6c:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <vPortExitCritical+0x44>
 8006c74:	2300      	movs	r3, #0
 8006c76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	2000008c 	.word	0x2000008c

08006c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c90:	f3ef 8009 	mrs	r0, PSP
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <pxCurrentTCBConst>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f01e 0f10 	tst.w	lr, #16
 8006ca0:	bf08      	it	eq
 8006ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006cb4:	f380 8811 	msr	BASEPRI, r0
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f7ff fcc4 	bl	800664c <vTaskSwitchContext>
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	f380 8811 	msr	BASEPRI, r0
 8006ccc:	bc09      	pop	{r0, r3}
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd6:	f01e 0f10 	tst.w	lr, #16
 8006cda:	bf08      	it	eq
 8006cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ce0:	f380 8809 	msr	PSP, r0
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst>:
 8006cf0:	20000570 	.word	0x20000570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d12:	f7ff fbe1 	bl	80064d8 <xTaskIncrementTick>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <SysTick_Handler+0x40>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d40:	4b0b      	ldr	r3, [pc, #44]	@ (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <vPortSetupTimerInterrupt+0x38>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <vPortSetupTimerInterrupt+0x3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	@ (8006d7c <vPortSetupTimerInterrupt+0x40>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	4a09      	ldr	r2, [pc, #36]	@ (8006d80 <vPortSetupTimerInterrupt+0x44>)
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d5e:	4b04      	ldr	r3, [pc, #16]	@ (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	e000e010 	.word	0xe000e010
 8006d74:	e000e018 	.word	0xe000e018
 8006d78:	20000000 	.word	0x20000000
 8006d7c:	10624dd3 	.word	0x10624dd3
 8006d80:	e000e014 	.word	0xe000e014

08006d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d94 <vPortEnableVFP+0x10>
 8006d88:	6801      	ldr	r1, [r0, #0]
 8006d8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d8e:	6001      	str	r1, [r0, #0]
 8006d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d92:	bf00      	nop
 8006d94:	e000ed88 	.word	0xe000ed88

08006d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	@ 0x28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006da4:	f7ff faec 	bl	8006380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006da8:	4b5c      	ldr	r3, [pc, #368]	@ (8006f1c <pvPortMalloc+0x184>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db0:	f000 f924 	bl	8006ffc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006db4:	4b5a      	ldr	r3, [pc, #360]	@ (8006f20 <pvPortMalloc+0x188>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 8095 	bne.w	8006eec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01e      	beq.n	8006e06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006dc8:	2208      	movs	r2, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d015      	beq.n	8006e06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	3308      	adds	r3, #8
 8006de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <pvPortMalloc+0x6e>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617b      	str	r3, [r7, #20]
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	e7fd      	b.n	8006e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d06f      	beq.n	8006eec <pvPortMalloc+0x154>
 8006e0c:	4b45      	ldr	r3, [pc, #276]	@ (8006f24 <pvPortMalloc+0x18c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d86a      	bhi.n	8006eec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e16:	4b44      	ldr	r3, [pc, #272]	@ (8006f28 <pvPortMalloc+0x190>)
 8006e18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e1a:	4b43      	ldr	r3, [pc, #268]	@ (8006f28 <pvPortMalloc+0x190>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e20:	e004      	b.n	8006e2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d903      	bls.n	8006e3e <pvPortMalloc+0xa6>
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f1      	bne.n	8006e22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e3e:	4b37      	ldr	r3, [pc, #220]	@ (8006f1c <pvPortMalloc+0x184>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d051      	beq.n	8006eec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	4413      	add	r3, r2
 8006e50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	1ad2      	subs	r2, r2, r3
 8006e62:	2308      	movs	r3, #8
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d920      	bls.n	8006eac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <pvPortMalloc+0xfc>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	613b      	str	r3, [r7, #16]
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	e7fd      	b.n	8006e90 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ea6:	69b8      	ldr	r0, [r7, #24]
 8006ea8:	f000 f90a 	bl	80070c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006eac:	4b1d      	ldr	r3, [pc, #116]	@ (8006f24 <pvPortMalloc+0x18c>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006f24 <pvPortMalloc+0x18c>)
 8006eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eba:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <pvPortMalloc+0x18c>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8006f2c <pvPortMalloc+0x194>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d203      	bcs.n	8006ece <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ec6:	4b17      	ldr	r3, [pc, #92]	@ (8006f24 <pvPortMalloc+0x18c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a18      	ldr	r2, [pc, #96]	@ (8006f2c <pvPortMalloc+0x194>)
 8006ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	4b13      	ldr	r3, [pc, #76]	@ (8006f20 <pvPortMalloc+0x188>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ee2:	4b13      	ldr	r3, [pc, #76]	@ (8006f30 <pvPortMalloc+0x198>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	4a11      	ldr	r2, [pc, #68]	@ (8006f30 <pvPortMalloc+0x198>)
 8006eea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006eec:	f7ff fa56 	bl	800639c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <pvPortMalloc+0x17a>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	60fb      	str	r3, [r7, #12]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <pvPortMalloc+0x176>
	return pvReturn;
 8006f12:	69fb      	ldr	r3, [r7, #28]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3728      	adds	r7, #40	@ 0x28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20001264 	.word	0x20001264
 8006f20:	20001278 	.word	0x20001278
 8006f24:	20001268 	.word	0x20001268
 8006f28:	2000125c 	.word	0x2000125c
 8006f2c:	2000126c 	.word	0x2000126c
 8006f30:	20001270 	.word	0x20001270

08006f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d04f      	beq.n	8006fe6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f46:	2308      	movs	r3, #8
 8006f48:	425b      	negs	r3, r3
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	4b25      	ldr	r3, [pc, #148]	@ (8006ff0 <vPortFree+0xbc>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <vPortFree+0x46>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60fb      	str	r3, [r7, #12]
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop
 8006f78:	e7fd      	b.n	8006f76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <vPortFree+0x66>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60bb      	str	r3, [r7, #8]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	4b14      	ldr	r3, [pc, #80]	@ (8006ff0 <vPortFree+0xbc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01e      	beq.n	8006fe6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d11a      	bne.n	8006fe6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff0 <vPortFree+0xbc>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	401a      	ands	r2, r3
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fc0:	f7ff f9de 	bl	8006380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <vPortFree+0xc0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4413      	add	r3, r2
 8006fce:	4a09      	ldr	r2, [pc, #36]	@ (8006ff4 <vPortFree+0xc0>)
 8006fd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fd2:	6938      	ldr	r0, [r7, #16]
 8006fd4:	f000 f874 	bl	80070c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fd8:	4b07      	ldr	r3, [pc, #28]	@ (8006ff8 <vPortFree+0xc4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	4a06      	ldr	r2, [pc, #24]	@ (8006ff8 <vPortFree+0xc4>)
 8006fe0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fe2:	f7ff f9db 	bl	800639c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fe6:	bf00      	nop
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20001278 	.word	0x20001278
 8006ff4:	20001268 	.word	0x20001268
 8006ff8:	20001274 	.word	0x20001274

08006ffc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007002:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007006:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007008:	4b27      	ldr	r3, [pc, #156]	@ (80070a8 <prvHeapInit+0xac>)
 800700a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00c      	beq.n	8007030 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3307      	adds	r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 0307 	bic.w	r3, r3, #7
 8007022:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	4a1f      	ldr	r2, [pc, #124]	@ (80070a8 <prvHeapInit+0xac>)
 800702c:	4413      	add	r3, r2
 800702e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007034:	4a1d      	ldr	r2, [pc, #116]	@ (80070ac <prvHeapInit+0xb0>)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800703a:	4b1c      	ldr	r3, [pc, #112]	@ (80070ac <prvHeapInit+0xb0>)
 800703c:	2200      	movs	r2, #0
 800703e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007048:	2208      	movs	r2, #8
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4a15      	ldr	r2, [pc, #84]	@ (80070b0 <prvHeapInit+0xb4>)
 800705c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800705e:	4b14      	ldr	r3, [pc, #80]	@ (80070b0 <prvHeapInit+0xb4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007066:	4b12      	ldr	r3, [pc, #72]	@ (80070b0 <prvHeapInit+0xb4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800707c:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <prvHeapInit+0xb4>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a0a      	ldr	r2, [pc, #40]	@ (80070b4 <prvHeapInit+0xb8>)
 800708a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4a09      	ldr	r2, [pc, #36]	@ (80070b8 <prvHeapInit+0xbc>)
 8007092:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007094:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <prvHeapInit+0xc0>)
 8007096:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800709a:	601a      	str	r2, [r3, #0]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	200006a4 	.word	0x200006a4
 80070ac:	2000125c 	.word	0x2000125c
 80070b0:	20001264 	.word	0x20001264
 80070b4:	2000126c 	.word	0x2000126c
 80070b8:	20001268 	.word	0x20001268
 80070bc:	20001278 	.word	0x20001278

080070c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070c8:	4b28      	ldr	r3, [pc, #160]	@ (800716c <prvInsertBlockIntoFreeList+0xac>)
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e002      	b.n	80070d4 <prvInsertBlockIntoFreeList+0x14>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d8f7      	bhi.n	80070ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d108      	bne.n	8007102 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	441a      	add	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	441a      	add	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d118      	bne.n	8007148 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b15      	ldr	r3, [pc, #84]	@ (8007170 <prvInsertBlockIntoFreeList+0xb0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d00d      	beq.n	800713e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	441a      	add	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	e008      	b.n	8007150 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800713e:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <prvInsertBlockIntoFreeList+0xb0>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e003      	b.n	8007150 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d002      	beq.n	800715e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	2000125c 	.word	0x2000125c
 8007170:	20001264 	.word	0x20001264

08007174 <siprintf>:
 8007174:	b40e      	push	{r1, r2, r3}
 8007176:	b500      	push	{lr}
 8007178:	b09c      	sub	sp, #112	@ 0x70
 800717a:	ab1d      	add	r3, sp, #116	@ 0x74
 800717c:	9002      	str	r0, [sp, #8]
 800717e:	9006      	str	r0, [sp, #24]
 8007180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007184:	4809      	ldr	r0, [pc, #36]	@ (80071ac <siprintf+0x38>)
 8007186:	9107      	str	r1, [sp, #28]
 8007188:	9104      	str	r1, [sp, #16]
 800718a:	4909      	ldr	r1, [pc, #36]	@ (80071b0 <siprintf+0x3c>)
 800718c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007190:	9105      	str	r1, [sp, #20]
 8007192:	6800      	ldr	r0, [r0, #0]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	a902      	add	r1, sp, #8
 8007198:	f000 f8aa 	bl	80072f0 <_svfiprintf_r>
 800719c:	9b02      	ldr	r3, [sp, #8]
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	b01c      	add	sp, #112	@ 0x70
 80071a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a8:	b003      	add	sp, #12
 80071aa:	4770      	bx	lr
 80071ac:	20000090 	.word	0x20000090
 80071b0:	ffff0208 	.word	0xffff0208

080071b4 <memset>:
 80071b4:	4402      	add	r2, r0
 80071b6:	4603      	mov	r3, r0
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d100      	bne.n	80071be <memset+0xa>
 80071bc:	4770      	bx	lr
 80071be:	f803 1b01 	strb.w	r1, [r3], #1
 80071c2:	e7f9      	b.n	80071b8 <memset+0x4>

080071c4 <__errno>:
 80071c4:	4b01      	ldr	r3, [pc, #4]	@ (80071cc <__errno+0x8>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000090 	.word	0x20000090

080071d0 <__libc_init_array>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007208 <__libc_init_array+0x38>)
 80071d4:	4c0d      	ldr	r4, [pc, #52]	@ (800720c <__libc_init_array+0x3c>)
 80071d6:	1b64      	subs	r4, r4, r5
 80071d8:	10a4      	asrs	r4, r4, #2
 80071da:	2600      	movs	r6, #0
 80071dc:	42a6      	cmp	r6, r4
 80071de:	d109      	bne.n	80071f4 <__libc_init_array+0x24>
 80071e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007210 <__libc_init_array+0x40>)
 80071e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007214 <__libc_init_array+0x44>)
 80071e4:	f000 fc66 	bl	8007ab4 <_init>
 80071e8:	1b64      	subs	r4, r4, r5
 80071ea:	10a4      	asrs	r4, r4, #2
 80071ec:	2600      	movs	r6, #0
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	d105      	bne.n	80071fe <__libc_init_array+0x2e>
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f8:	4798      	blx	r3
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7ee      	b.n	80071dc <__libc_init_array+0xc>
 80071fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007202:	4798      	blx	r3
 8007204:	3601      	adds	r6, #1
 8007206:	e7f2      	b.n	80071ee <__libc_init_array+0x1e>
 8007208:	08007c6c 	.word	0x08007c6c
 800720c:	08007c6c 	.word	0x08007c6c
 8007210:	08007c6c 	.word	0x08007c6c
 8007214:	08007c70 	.word	0x08007c70

08007218 <__retarget_lock_acquire_recursive>:
 8007218:	4770      	bx	lr

0800721a <__retarget_lock_release_recursive>:
 800721a:	4770      	bx	lr

0800721c <memcpy>:
 800721c:	440a      	add	r2, r1
 800721e:	4291      	cmp	r1, r2
 8007220:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007224:	d100      	bne.n	8007228 <memcpy+0xc>
 8007226:	4770      	bx	lr
 8007228:	b510      	push	{r4, lr}
 800722a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800722e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007232:	4291      	cmp	r1, r2
 8007234:	d1f9      	bne.n	800722a <memcpy+0xe>
 8007236:	bd10      	pop	{r4, pc}

08007238 <__ssputs_r>:
 8007238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	688e      	ldr	r6, [r1, #8]
 800723e:	461f      	mov	r7, r3
 8007240:	42be      	cmp	r6, r7
 8007242:	680b      	ldr	r3, [r1, #0]
 8007244:	4682      	mov	sl, r0
 8007246:	460c      	mov	r4, r1
 8007248:	4690      	mov	r8, r2
 800724a:	d82d      	bhi.n	80072a8 <__ssputs_r+0x70>
 800724c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007254:	d026      	beq.n	80072a4 <__ssputs_r+0x6c>
 8007256:	6965      	ldr	r5, [r4, #20]
 8007258:	6909      	ldr	r1, [r1, #16]
 800725a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800725e:	eba3 0901 	sub.w	r9, r3, r1
 8007262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007266:	1c7b      	adds	r3, r7, #1
 8007268:	444b      	add	r3, r9
 800726a:	106d      	asrs	r5, r5, #1
 800726c:	429d      	cmp	r5, r3
 800726e:	bf38      	it	cc
 8007270:	461d      	movcc	r5, r3
 8007272:	0553      	lsls	r3, r2, #21
 8007274:	d527      	bpl.n	80072c6 <__ssputs_r+0x8e>
 8007276:	4629      	mov	r1, r5
 8007278:	f000 f958 	bl	800752c <_malloc_r>
 800727c:	4606      	mov	r6, r0
 800727e:	b360      	cbz	r0, 80072da <__ssputs_r+0xa2>
 8007280:	6921      	ldr	r1, [r4, #16]
 8007282:	464a      	mov	r2, r9
 8007284:	f7ff ffca 	bl	800721c <memcpy>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800728e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	6126      	str	r6, [r4, #16]
 8007296:	6165      	str	r5, [r4, #20]
 8007298:	444e      	add	r6, r9
 800729a:	eba5 0509 	sub.w	r5, r5, r9
 800729e:	6026      	str	r6, [r4, #0]
 80072a0:	60a5      	str	r5, [r4, #8]
 80072a2:	463e      	mov	r6, r7
 80072a4:	42be      	cmp	r6, r7
 80072a6:	d900      	bls.n	80072aa <__ssputs_r+0x72>
 80072a8:	463e      	mov	r6, r7
 80072aa:	6820      	ldr	r0, [r4, #0]
 80072ac:	4632      	mov	r2, r6
 80072ae:	4641      	mov	r1, r8
 80072b0:	f000 fb84 	bl	80079bc <memmove>
 80072b4:	68a3      	ldr	r3, [r4, #8]
 80072b6:	1b9b      	subs	r3, r3, r6
 80072b8:	60a3      	str	r3, [r4, #8]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	4433      	add	r3, r6
 80072be:	6023      	str	r3, [r4, #0]
 80072c0:	2000      	movs	r0, #0
 80072c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c6:	462a      	mov	r2, r5
 80072c8:	f000 fb4a 	bl	8007960 <_realloc_r>
 80072cc:	4606      	mov	r6, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d1e0      	bne.n	8007294 <__ssputs_r+0x5c>
 80072d2:	6921      	ldr	r1, [r4, #16]
 80072d4:	4650      	mov	r0, sl
 80072d6:	f000 fb9b 	bl	8007a10 <_free_r>
 80072da:	230c      	movs	r3, #12
 80072dc:	f8ca 3000 	str.w	r3, [sl]
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072e6:	81a3      	strh	r3, [r4, #12]
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072ec:	e7e9      	b.n	80072c2 <__ssputs_r+0x8a>
	...

080072f0 <_svfiprintf_r>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	4698      	mov	r8, r3
 80072f6:	898b      	ldrh	r3, [r1, #12]
 80072f8:	061b      	lsls	r3, r3, #24
 80072fa:	b09d      	sub	sp, #116	@ 0x74
 80072fc:	4607      	mov	r7, r0
 80072fe:	460d      	mov	r5, r1
 8007300:	4614      	mov	r4, r2
 8007302:	d510      	bpl.n	8007326 <_svfiprintf_r+0x36>
 8007304:	690b      	ldr	r3, [r1, #16]
 8007306:	b973      	cbnz	r3, 8007326 <_svfiprintf_r+0x36>
 8007308:	2140      	movs	r1, #64	@ 0x40
 800730a:	f000 f90f 	bl	800752c <_malloc_r>
 800730e:	6028      	str	r0, [r5, #0]
 8007310:	6128      	str	r0, [r5, #16]
 8007312:	b930      	cbnz	r0, 8007322 <_svfiprintf_r+0x32>
 8007314:	230c      	movs	r3, #12
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800731c:	b01d      	add	sp, #116	@ 0x74
 800731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007322:	2340      	movs	r3, #64	@ 0x40
 8007324:	616b      	str	r3, [r5, #20]
 8007326:	2300      	movs	r3, #0
 8007328:	9309      	str	r3, [sp, #36]	@ 0x24
 800732a:	2320      	movs	r3, #32
 800732c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007330:	f8cd 800c 	str.w	r8, [sp, #12]
 8007334:	2330      	movs	r3, #48	@ 0x30
 8007336:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074d4 <_svfiprintf_r+0x1e4>
 800733a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800733e:	f04f 0901 	mov.w	r9, #1
 8007342:	4623      	mov	r3, r4
 8007344:	469a      	mov	sl, r3
 8007346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800734a:	b10a      	cbz	r2, 8007350 <_svfiprintf_r+0x60>
 800734c:	2a25      	cmp	r2, #37	@ 0x25
 800734e:	d1f9      	bne.n	8007344 <_svfiprintf_r+0x54>
 8007350:	ebba 0b04 	subs.w	fp, sl, r4
 8007354:	d00b      	beq.n	800736e <_svfiprintf_r+0x7e>
 8007356:	465b      	mov	r3, fp
 8007358:	4622      	mov	r2, r4
 800735a:	4629      	mov	r1, r5
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff ff6b 	bl	8007238 <__ssputs_r>
 8007362:	3001      	adds	r0, #1
 8007364:	f000 80a7 	beq.w	80074b6 <_svfiprintf_r+0x1c6>
 8007368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800736a:	445a      	add	r2, fp
 800736c:	9209      	str	r2, [sp, #36]	@ 0x24
 800736e:	f89a 3000 	ldrb.w	r3, [sl]
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 809f 	beq.w	80074b6 <_svfiprintf_r+0x1c6>
 8007378:	2300      	movs	r3, #0
 800737a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800737e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007382:	f10a 0a01 	add.w	sl, sl, #1
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	9307      	str	r3, [sp, #28]
 800738a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800738e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007390:	4654      	mov	r4, sl
 8007392:	2205      	movs	r2, #5
 8007394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007398:	484e      	ldr	r0, [pc, #312]	@ (80074d4 <_svfiprintf_r+0x1e4>)
 800739a:	f7f8 ff39 	bl	8000210 <memchr>
 800739e:	9a04      	ldr	r2, [sp, #16]
 80073a0:	b9d8      	cbnz	r0, 80073da <_svfiprintf_r+0xea>
 80073a2:	06d0      	lsls	r0, r2, #27
 80073a4:	bf44      	itt	mi
 80073a6:	2320      	movmi	r3, #32
 80073a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ac:	0711      	lsls	r1, r2, #28
 80073ae:	bf44      	itt	mi
 80073b0:	232b      	movmi	r3, #43	@ 0x2b
 80073b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073b6:	f89a 3000 	ldrb.w	r3, [sl]
 80073ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80073bc:	d015      	beq.n	80073ea <_svfiprintf_r+0xfa>
 80073be:	9a07      	ldr	r2, [sp, #28]
 80073c0:	4654      	mov	r4, sl
 80073c2:	2000      	movs	r0, #0
 80073c4:	f04f 0c0a 	mov.w	ip, #10
 80073c8:	4621      	mov	r1, r4
 80073ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ce:	3b30      	subs	r3, #48	@ 0x30
 80073d0:	2b09      	cmp	r3, #9
 80073d2:	d94b      	bls.n	800746c <_svfiprintf_r+0x17c>
 80073d4:	b1b0      	cbz	r0, 8007404 <_svfiprintf_r+0x114>
 80073d6:	9207      	str	r2, [sp, #28]
 80073d8:	e014      	b.n	8007404 <_svfiprintf_r+0x114>
 80073da:	eba0 0308 	sub.w	r3, r0, r8
 80073de:	fa09 f303 	lsl.w	r3, r9, r3
 80073e2:	4313      	orrs	r3, r2
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	46a2      	mov	sl, r4
 80073e8:	e7d2      	b.n	8007390 <_svfiprintf_r+0xa0>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	1d19      	adds	r1, r3, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	9103      	str	r1, [sp, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfbb      	ittet	lt
 80073f6:	425b      	neglt	r3, r3
 80073f8:	f042 0202 	orrlt.w	r2, r2, #2
 80073fc:	9307      	strge	r3, [sp, #28]
 80073fe:	9307      	strlt	r3, [sp, #28]
 8007400:	bfb8      	it	lt
 8007402:	9204      	strlt	r2, [sp, #16]
 8007404:	7823      	ldrb	r3, [r4, #0]
 8007406:	2b2e      	cmp	r3, #46	@ 0x2e
 8007408:	d10a      	bne.n	8007420 <_svfiprintf_r+0x130>
 800740a:	7863      	ldrb	r3, [r4, #1]
 800740c:	2b2a      	cmp	r3, #42	@ 0x2a
 800740e:	d132      	bne.n	8007476 <_svfiprintf_r+0x186>
 8007410:	9b03      	ldr	r3, [sp, #12]
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	9203      	str	r2, [sp, #12]
 8007418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800741c:	3402      	adds	r4, #2
 800741e:	9305      	str	r3, [sp, #20]
 8007420:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074e4 <_svfiprintf_r+0x1f4>
 8007424:	7821      	ldrb	r1, [r4, #0]
 8007426:	2203      	movs	r2, #3
 8007428:	4650      	mov	r0, sl
 800742a:	f7f8 fef1 	bl	8000210 <memchr>
 800742e:	b138      	cbz	r0, 8007440 <_svfiprintf_r+0x150>
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	eba0 000a 	sub.w	r0, r0, sl
 8007436:	2240      	movs	r2, #64	@ 0x40
 8007438:	4082      	lsls	r2, r0
 800743a:	4313      	orrs	r3, r2
 800743c:	3401      	adds	r4, #1
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007444:	4824      	ldr	r0, [pc, #144]	@ (80074d8 <_svfiprintf_r+0x1e8>)
 8007446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800744a:	2206      	movs	r2, #6
 800744c:	f7f8 fee0 	bl	8000210 <memchr>
 8007450:	2800      	cmp	r0, #0
 8007452:	d036      	beq.n	80074c2 <_svfiprintf_r+0x1d2>
 8007454:	4b21      	ldr	r3, [pc, #132]	@ (80074dc <_svfiprintf_r+0x1ec>)
 8007456:	bb1b      	cbnz	r3, 80074a0 <_svfiprintf_r+0x1b0>
 8007458:	9b03      	ldr	r3, [sp, #12]
 800745a:	3307      	adds	r3, #7
 800745c:	f023 0307 	bic.w	r3, r3, #7
 8007460:	3308      	adds	r3, #8
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007466:	4433      	add	r3, r6
 8007468:	9309      	str	r3, [sp, #36]	@ 0x24
 800746a:	e76a      	b.n	8007342 <_svfiprintf_r+0x52>
 800746c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007470:	460c      	mov	r4, r1
 8007472:	2001      	movs	r0, #1
 8007474:	e7a8      	b.n	80073c8 <_svfiprintf_r+0xd8>
 8007476:	2300      	movs	r3, #0
 8007478:	3401      	adds	r4, #1
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	4619      	mov	r1, r3
 800747e:	f04f 0c0a 	mov.w	ip, #10
 8007482:	4620      	mov	r0, r4
 8007484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007488:	3a30      	subs	r2, #48	@ 0x30
 800748a:	2a09      	cmp	r2, #9
 800748c:	d903      	bls.n	8007496 <_svfiprintf_r+0x1a6>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0c6      	beq.n	8007420 <_svfiprintf_r+0x130>
 8007492:	9105      	str	r1, [sp, #20]
 8007494:	e7c4      	b.n	8007420 <_svfiprintf_r+0x130>
 8007496:	fb0c 2101 	mla	r1, ip, r1, r2
 800749a:	4604      	mov	r4, r0
 800749c:	2301      	movs	r3, #1
 800749e:	e7f0      	b.n	8007482 <_svfiprintf_r+0x192>
 80074a0:	ab03      	add	r3, sp, #12
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	462a      	mov	r2, r5
 80074a6:	4b0e      	ldr	r3, [pc, #56]	@ (80074e0 <_svfiprintf_r+0x1f0>)
 80074a8:	a904      	add	r1, sp, #16
 80074aa:	4638      	mov	r0, r7
 80074ac:	f3af 8000 	nop.w
 80074b0:	1c42      	adds	r2, r0, #1
 80074b2:	4606      	mov	r6, r0
 80074b4:	d1d6      	bne.n	8007464 <_svfiprintf_r+0x174>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	065b      	lsls	r3, r3, #25
 80074ba:	f53f af2d 	bmi.w	8007318 <_svfiprintf_r+0x28>
 80074be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074c0:	e72c      	b.n	800731c <_svfiprintf_r+0x2c>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <_svfiprintf_r+0x1f0>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	4638      	mov	r0, r7
 80074ce:	f000 f91b 	bl	8007708 <_printf_i>
 80074d2:	e7ed      	b.n	80074b0 <_svfiprintf_r+0x1c0>
 80074d4:	08007c30 	.word	0x08007c30
 80074d8:	08007c3a 	.word	0x08007c3a
 80074dc:	00000000 	.word	0x00000000
 80074e0:	08007239 	.word	0x08007239
 80074e4:	08007c36 	.word	0x08007c36

080074e8 <sbrk_aligned>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007528 <sbrk_aligned+0x40>)
 80074ec:	460c      	mov	r4, r1
 80074ee:	6831      	ldr	r1, [r6, #0]
 80074f0:	4605      	mov	r5, r0
 80074f2:	b911      	cbnz	r1, 80074fa <sbrk_aligned+0x12>
 80074f4:	f000 fa7c 	bl	80079f0 <_sbrk_r>
 80074f8:	6030      	str	r0, [r6, #0]
 80074fa:	4621      	mov	r1, r4
 80074fc:	4628      	mov	r0, r5
 80074fe:	f000 fa77 	bl	80079f0 <_sbrk_r>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d103      	bne.n	800750e <sbrk_aligned+0x26>
 8007506:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800750a:	4620      	mov	r0, r4
 800750c:	bd70      	pop	{r4, r5, r6, pc}
 800750e:	1cc4      	adds	r4, r0, #3
 8007510:	f024 0403 	bic.w	r4, r4, #3
 8007514:	42a0      	cmp	r0, r4
 8007516:	d0f8      	beq.n	800750a <sbrk_aligned+0x22>
 8007518:	1a21      	subs	r1, r4, r0
 800751a:	4628      	mov	r0, r5
 800751c:	f000 fa68 	bl	80079f0 <_sbrk_r>
 8007520:	3001      	adds	r0, #1
 8007522:	d1f2      	bne.n	800750a <sbrk_aligned+0x22>
 8007524:	e7ef      	b.n	8007506 <sbrk_aligned+0x1e>
 8007526:	bf00      	nop
 8007528:	200013b8 	.word	0x200013b8

0800752c <_malloc_r>:
 800752c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007530:	1ccd      	adds	r5, r1, #3
 8007532:	f025 0503 	bic.w	r5, r5, #3
 8007536:	3508      	adds	r5, #8
 8007538:	2d0c      	cmp	r5, #12
 800753a:	bf38      	it	cc
 800753c:	250c      	movcc	r5, #12
 800753e:	2d00      	cmp	r5, #0
 8007540:	4606      	mov	r6, r0
 8007542:	db01      	blt.n	8007548 <_malloc_r+0x1c>
 8007544:	42a9      	cmp	r1, r5
 8007546:	d904      	bls.n	8007552 <_malloc_r+0x26>
 8007548:	230c      	movs	r3, #12
 800754a:	6033      	str	r3, [r6, #0]
 800754c:	2000      	movs	r0, #0
 800754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007628 <_malloc_r+0xfc>
 8007556:	f000 f9f7 	bl	8007948 <__malloc_lock>
 800755a:	f8d8 3000 	ldr.w	r3, [r8]
 800755e:	461c      	mov	r4, r3
 8007560:	bb44      	cbnz	r4, 80075b4 <_malloc_r+0x88>
 8007562:	4629      	mov	r1, r5
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff ffbf 	bl	80074e8 <sbrk_aligned>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	4604      	mov	r4, r0
 800756e:	d158      	bne.n	8007622 <_malloc_r+0xf6>
 8007570:	f8d8 4000 	ldr.w	r4, [r8]
 8007574:	4627      	mov	r7, r4
 8007576:	2f00      	cmp	r7, #0
 8007578:	d143      	bne.n	8007602 <_malloc_r+0xd6>
 800757a:	2c00      	cmp	r4, #0
 800757c:	d04b      	beq.n	8007616 <_malloc_r+0xea>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	4639      	mov	r1, r7
 8007582:	4630      	mov	r0, r6
 8007584:	eb04 0903 	add.w	r9, r4, r3
 8007588:	f000 fa32 	bl	80079f0 <_sbrk_r>
 800758c:	4581      	cmp	r9, r0
 800758e:	d142      	bne.n	8007616 <_malloc_r+0xea>
 8007590:	6821      	ldr	r1, [r4, #0]
 8007592:	1a6d      	subs	r5, r5, r1
 8007594:	4629      	mov	r1, r5
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ffa6 	bl	80074e8 <sbrk_aligned>
 800759c:	3001      	adds	r0, #1
 800759e:	d03a      	beq.n	8007616 <_malloc_r+0xea>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	442b      	add	r3, r5
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	f8d8 3000 	ldr.w	r3, [r8]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	bb62      	cbnz	r2, 8007608 <_malloc_r+0xdc>
 80075ae:	f8c8 7000 	str.w	r7, [r8]
 80075b2:	e00f      	b.n	80075d4 <_malloc_r+0xa8>
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	1b52      	subs	r2, r2, r5
 80075b8:	d420      	bmi.n	80075fc <_malloc_r+0xd0>
 80075ba:	2a0b      	cmp	r2, #11
 80075bc:	d917      	bls.n	80075ee <_malloc_r+0xc2>
 80075be:	1961      	adds	r1, r4, r5
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	6025      	str	r5, [r4, #0]
 80075c4:	bf18      	it	ne
 80075c6:	6059      	strne	r1, [r3, #4]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	bf08      	it	eq
 80075cc:	f8c8 1000 	streq.w	r1, [r8]
 80075d0:	5162      	str	r2, [r4, r5]
 80075d2:	604b      	str	r3, [r1, #4]
 80075d4:	4630      	mov	r0, r6
 80075d6:	f000 f9bd 	bl	8007954 <__malloc_unlock>
 80075da:	f104 000b 	add.w	r0, r4, #11
 80075de:	1d23      	adds	r3, r4, #4
 80075e0:	f020 0007 	bic.w	r0, r0, #7
 80075e4:	1ac2      	subs	r2, r0, r3
 80075e6:	bf1c      	itt	ne
 80075e8:	1a1b      	subne	r3, r3, r0
 80075ea:	50a3      	strne	r3, [r4, r2]
 80075ec:	e7af      	b.n	800754e <_malloc_r+0x22>
 80075ee:	6862      	ldr	r2, [r4, #4]
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	bf0c      	ite	eq
 80075f4:	f8c8 2000 	streq.w	r2, [r8]
 80075f8:	605a      	strne	r2, [r3, #4]
 80075fa:	e7eb      	b.n	80075d4 <_malloc_r+0xa8>
 80075fc:	4623      	mov	r3, r4
 80075fe:	6864      	ldr	r4, [r4, #4]
 8007600:	e7ae      	b.n	8007560 <_malloc_r+0x34>
 8007602:	463c      	mov	r4, r7
 8007604:	687f      	ldr	r7, [r7, #4]
 8007606:	e7b6      	b.n	8007576 <_malloc_r+0x4a>
 8007608:	461a      	mov	r2, r3
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	42a3      	cmp	r3, r4
 800760e:	d1fb      	bne.n	8007608 <_malloc_r+0xdc>
 8007610:	2300      	movs	r3, #0
 8007612:	6053      	str	r3, [r2, #4]
 8007614:	e7de      	b.n	80075d4 <_malloc_r+0xa8>
 8007616:	230c      	movs	r3, #12
 8007618:	6033      	str	r3, [r6, #0]
 800761a:	4630      	mov	r0, r6
 800761c:	f000 f99a 	bl	8007954 <__malloc_unlock>
 8007620:	e794      	b.n	800754c <_malloc_r+0x20>
 8007622:	6005      	str	r5, [r0, #0]
 8007624:	e7d6      	b.n	80075d4 <_malloc_r+0xa8>
 8007626:	bf00      	nop
 8007628:	200013bc 	.word	0x200013bc

0800762c <_printf_common>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	4616      	mov	r6, r2
 8007632:	4698      	mov	r8, r3
 8007634:	688a      	ldr	r2, [r1, #8]
 8007636:	690b      	ldr	r3, [r1, #16]
 8007638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800763c:	4293      	cmp	r3, r2
 800763e:	bfb8      	it	lt
 8007640:	4613      	movlt	r3, r2
 8007642:	6033      	str	r3, [r6, #0]
 8007644:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007648:	4607      	mov	r7, r0
 800764a:	460c      	mov	r4, r1
 800764c:	b10a      	cbz	r2, 8007652 <_printf_common+0x26>
 800764e:	3301      	adds	r3, #1
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	0699      	lsls	r1, r3, #26
 8007656:	bf42      	ittt	mi
 8007658:	6833      	ldrmi	r3, [r6, #0]
 800765a:	3302      	addmi	r3, #2
 800765c:	6033      	strmi	r3, [r6, #0]
 800765e:	6825      	ldr	r5, [r4, #0]
 8007660:	f015 0506 	ands.w	r5, r5, #6
 8007664:	d106      	bne.n	8007674 <_printf_common+0x48>
 8007666:	f104 0a19 	add.w	sl, r4, #25
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	6832      	ldr	r2, [r6, #0]
 800766e:	1a9b      	subs	r3, r3, r2
 8007670:	42ab      	cmp	r3, r5
 8007672:	dc26      	bgt.n	80076c2 <_printf_common+0x96>
 8007674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	3b00      	subs	r3, #0
 800767c:	bf18      	it	ne
 800767e:	2301      	movne	r3, #1
 8007680:	0692      	lsls	r2, r2, #26
 8007682:	d42b      	bmi.n	80076dc <_printf_common+0xb0>
 8007684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007688:	4641      	mov	r1, r8
 800768a:	4638      	mov	r0, r7
 800768c:	47c8      	blx	r9
 800768e:	3001      	adds	r0, #1
 8007690:	d01e      	beq.n	80076d0 <_printf_common+0xa4>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	6922      	ldr	r2, [r4, #16]
 8007696:	f003 0306 	and.w	r3, r3, #6
 800769a:	2b04      	cmp	r3, #4
 800769c:	bf02      	ittt	eq
 800769e:	68e5      	ldreq	r5, [r4, #12]
 80076a0:	6833      	ldreq	r3, [r6, #0]
 80076a2:	1aed      	subeq	r5, r5, r3
 80076a4:	68a3      	ldr	r3, [r4, #8]
 80076a6:	bf0c      	ite	eq
 80076a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076ac:	2500      	movne	r5, #0
 80076ae:	4293      	cmp	r3, r2
 80076b0:	bfc4      	itt	gt
 80076b2:	1a9b      	subgt	r3, r3, r2
 80076b4:	18ed      	addgt	r5, r5, r3
 80076b6:	2600      	movs	r6, #0
 80076b8:	341a      	adds	r4, #26
 80076ba:	42b5      	cmp	r5, r6
 80076bc:	d11a      	bne.n	80076f4 <_printf_common+0xc8>
 80076be:	2000      	movs	r0, #0
 80076c0:	e008      	b.n	80076d4 <_printf_common+0xa8>
 80076c2:	2301      	movs	r3, #1
 80076c4:	4652      	mov	r2, sl
 80076c6:	4641      	mov	r1, r8
 80076c8:	4638      	mov	r0, r7
 80076ca:	47c8      	blx	r9
 80076cc:	3001      	adds	r0, #1
 80076ce:	d103      	bne.n	80076d8 <_printf_common+0xac>
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d8:	3501      	adds	r5, #1
 80076da:	e7c6      	b.n	800766a <_printf_common+0x3e>
 80076dc:	18e1      	adds	r1, r4, r3
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	2030      	movs	r0, #48	@ 0x30
 80076e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076e6:	4422      	add	r2, r4
 80076e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076f0:	3302      	adds	r3, #2
 80076f2:	e7c7      	b.n	8007684 <_printf_common+0x58>
 80076f4:	2301      	movs	r3, #1
 80076f6:	4622      	mov	r2, r4
 80076f8:	4641      	mov	r1, r8
 80076fa:	4638      	mov	r0, r7
 80076fc:	47c8      	blx	r9
 80076fe:	3001      	adds	r0, #1
 8007700:	d0e6      	beq.n	80076d0 <_printf_common+0xa4>
 8007702:	3601      	adds	r6, #1
 8007704:	e7d9      	b.n	80076ba <_printf_common+0x8e>
	...

08007708 <_printf_i>:
 8007708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	7e0f      	ldrb	r7, [r1, #24]
 800770e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007710:	2f78      	cmp	r7, #120	@ 0x78
 8007712:	4691      	mov	r9, r2
 8007714:	4680      	mov	r8, r0
 8007716:	460c      	mov	r4, r1
 8007718:	469a      	mov	sl, r3
 800771a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800771e:	d807      	bhi.n	8007730 <_printf_i+0x28>
 8007720:	2f62      	cmp	r7, #98	@ 0x62
 8007722:	d80a      	bhi.n	800773a <_printf_i+0x32>
 8007724:	2f00      	cmp	r7, #0
 8007726:	f000 80d2 	beq.w	80078ce <_printf_i+0x1c6>
 800772a:	2f58      	cmp	r7, #88	@ 0x58
 800772c:	f000 80b9 	beq.w	80078a2 <_printf_i+0x19a>
 8007730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007738:	e03a      	b.n	80077b0 <_printf_i+0xa8>
 800773a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800773e:	2b15      	cmp	r3, #21
 8007740:	d8f6      	bhi.n	8007730 <_printf_i+0x28>
 8007742:	a101      	add	r1, pc, #4	@ (adr r1, 8007748 <_printf_i+0x40>)
 8007744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007748:	080077a1 	.word	0x080077a1
 800774c:	080077b5 	.word	0x080077b5
 8007750:	08007731 	.word	0x08007731
 8007754:	08007731 	.word	0x08007731
 8007758:	08007731 	.word	0x08007731
 800775c:	08007731 	.word	0x08007731
 8007760:	080077b5 	.word	0x080077b5
 8007764:	08007731 	.word	0x08007731
 8007768:	08007731 	.word	0x08007731
 800776c:	08007731 	.word	0x08007731
 8007770:	08007731 	.word	0x08007731
 8007774:	080078b5 	.word	0x080078b5
 8007778:	080077df 	.word	0x080077df
 800777c:	0800786f 	.word	0x0800786f
 8007780:	08007731 	.word	0x08007731
 8007784:	08007731 	.word	0x08007731
 8007788:	080078d7 	.word	0x080078d7
 800778c:	08007731 	.word	0x08007731
 8007790:	080077df 	.word	0x080077df
 8007794:	08007731 	.word	0x08007731
 8007798:	08007731 	.word	0x08007731
 800779c:	08007877 	.word	0x08007877
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6032      	str	r2, [r6, #0]
 80077a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077b0:	2301      	movs	r3, #1
 80077b2:	e09d      	b.n	80078f0 <_printf_i+0x1e8>
 80077b4:	6833      	ldr	r3, [r6, #0]
 80077b6:	6820      	ldr	r0, [r4, #0]
 80077b8:	1d19      	adds	r1, r3, #4
 80077ba:	6031      	str	r1, [r6, #0]
 80077bc:	0606      	lsls	r6, r0, #24
 80077be:	d501      	bpl.n	80077c4 <_printf_i+0xbc>
 80077c0:	681d      	ldr	r5, [r3, #0]
 80077c2:	e003      	b.n	80077cc <_printf_i+0xc4>
 80077c4:	0645      	lsls	r5, r0, #25
 80077c6:	d5fb      	bpl.n	80077c0 <_printf_i+0xb8>
 80077c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077cc:	2d00      	cmp	r5, #0
 80077ce:	da03      	bge.n	80077d8 <_printf_i+0xd0>
 80077d0:	232d      	movs	r3, #45	@ 0x2d
 80077d2:	426d      	negs	r5, r5
 80077d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077d8:	4859      	ldr	r0, [pc, #356]	@ (8007940 <_printf_i+0x238>)
 80077da:	230a      	movs	r3, #10
 80077dc:	e011      	b.n	8007802 <_printf_i+0xfa>
 80077de:	6821      	ldr	r1, [r4, #0]
 80077e0:	6833      	ldr	r3, [r6, #0]
 80077e2:	0608      	lsls	r0, r1, #24
 80077e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80077e8:	d402      	bmi.n	80077f0 <_printf_i+0xe8>
 80077ea:	0649      	lsls	r1, r1, #25
 80077ec:	bf48      	it	mi
 80077ee:	b2ad      	uxthmi	r5, r5
 80077f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80077f2:	4853      	ldr	r0, [pc, #332]	@ (8007940 <_printf_i+0x238>)
 80077f4:	6033      	str	r3, [r6, #0]
 80077f6:	bf14      	ite	ne
 80077f8:	230a      	movne	r3, #10
 80077fa:	2308      	moveq	r3, #8
 80077fc:	2100      	movs	r1, #0
 80077fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007802:	6866      	ldr	r6, [r4, #4]
 8007804:	60a6      	str	r6, [r4, #8]
 8007806:	2e00      	cmp	r6, #0
 8007808:	bfa2      	ittt	ge
 800780a:	6821      	ldrge	r1, [r4, #0]
 800780c:	f021 0104 	bicge.w	r1, r1, #4
 8007810:	6021      	strge	r1, [r4, #0]
 8007812:	b90d      	cbnz	r5, 8007818 <_printf_i+0x110>
 8007814:	2e00      	cmp	r6, #0
 8007816:	d04b      	beq.n	80078b0 <_printf_i+0x1a8>
 8007818:	4616      	mov	r6, r2
 800781a:	fbb5 f1f3 	udiv	r1, r5, r3
 800781e:	fb03 5711 	mls	r7, r3, r1, r5
 8007822:	5dc7      	ldrb	r7, [r0, r7]
 8007824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007828:	462f      	mov	r7, r5
 800782a:	42bb      	cmp	r3, r7
 800782c:	460d      	mov	r5, r1
 800782e:	d9f4      	bls.n	800781a <_printf_i+0x112>
 8007830:	2b08      	cmp	r3, #8
 8007832:	d10b      	bne.n	800784c <_printf_i+0x144>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	07df      	lsls	r7, r3, #31
 8007838:	d508      	bpl.n	800784c <_printf_i+0x144>
 800783a:	6923      	ldr	r3, [r4, #16]
 800783c:	6861      	ldr	r1, [r4, #4]
 800783e:	4299      	cmp	r1, r3
 8007840:	bfde      	ittt	le
 8007842:	2330      	movle	r3, #48	@ 0x30
 8007844:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007848:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800784c:	1b92      	subs	r2, r2, r6
 800784e:	6122      	str	r2, [r4, #16]
 8007850:	f8cd a000 	str.w	sl, [sp]
 8007854:	464b      	mov	r3, r9
 8007856:	aa03      	add	r2, sp, #12
 8007858:	4621      	mov	r1, r4
 800785a:	4640      	mov	r0, r8
 800785c:	f7ff fee6 	bl	800762c <_printf_common>
 8007860:	3001      	adds	r0, #1
 8007862:	d14a      	bne.n	80078fa <_printf_i+0x1f2>
 8007864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007868:	b004      	add	sp, #16
 800786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	f043 0320 	orr.w	r3, r3, #32
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	4833      	ldr	r0, [pc, #204]	@ (8007944 <_printf_i+0x23c>)
 8007878:	2778      	movs	r7, #120	@ 0x78
 800787a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	6831      	ldr	r1, [r6, #0]
 8007882:	061f      	lsls	r7, r3, #24
 8007884:	f851 5b04 	ldr.w	r5, [r1], #4
 8007888:	d402      	bmi.n	8007890 <_printf_i+0x188>
 800788a:	065f      	lsls	r7, r3, #25
 800788c:	bf48      	it	mi
 800788e:	b2ad      	uxthmi	r5, r5
 8007890:	6031      	str	r1, [r6, #0]
 8007892:	07d9      	lsls	r1, r3, #31
 8007894:	bf44      	itt	mi
 8007896:	f043 0320 	orrmi.w	r3, r3, #32
 800789a:	6023      	strmi	r3, [r4, #0]
 800789c:	b11d      	cbz	r5, 80078a6 <_printf_i+0x19e>
 800789e:	2310      	movs	r3, #16
 80078a0:	e7ac      	b.n	80077fc <_printf_i+0xf4>
 80078a2:	4827      	ldr	r0, [pc, #156]	@ (8007940 <_printf_i+0x238>)
 80078a4:	e7e9      	b.n	800787a <_printf_i+0x172>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	f023 0320 	bic.w	r3, r3, #32
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	e7f6      	b.n	800789e <_printf_i+0x196>
 80078b0:	4616      	mov	r6, r2
 80078b2:	e7bd      	b.n	8007830 <_printf_i+0x128>
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	6961      	ldr	r1, [r4, #20]
 80078ba:	1d18      	adds	r0, r3, #4
 80078bc:	6030      	str	r0, [r6, #0]
 80078be:	062e      	lsls	r6, r5, #24
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	d501      	bpl.n	80078c8 <_printf_i+0x1c0>
 80078c4:	6019      	str	r1, [r3, #0]
 80078c6:	e002      	b.n	80078ce <_printf_i+0x1c6>
 80078c8:	0668      	lsls	r0, r5, #25
 80078ca:	d5fb      	bpl.n	80078c4 <_printf_i+0x1bc>
 80078cc:	8019      	strh	r1, [r3, #0]
 80078ce:	2300      	movs	r3, #0
 80078d0:	6123      	str	r3, [r4, #16]
 80078d2:	4616      	mov	r6, r2
 80078d4:	e7bc      	b.n	8007850 <_printf_i+0x148>
 80078d6:	6833      	ldr	r3, [r6, #0]
 80078d8:	1d1a      	adds	r2, r3, #4
 80078da:	6032      	str	r2, [r6, #0]
 80078dc:	681e      	ldr	r6, [r3, #0]
 80078de:	6862      	ldr	r2, [r4, #4]
 80078e0:	2100      	movs	r1, #0
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7f8 fc94 	bl	8000210 <memchr>
 80078e8:	b108      	cbz	r0, 80078ee <_printf_i+0x1e6>
 80078ea:	1b80      	subs	r0, r0, r6
 80078ec:	6060      	str	r0, [r4, #4]
 80078ee:	6863      	ldr	r3, [r4, #4]
 80078f0:	6123      	str	r3, [r4, #16]
 80078f2:	2300      	movs	r3, #0
 80078f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078f8:	e7aa      	b.n	8007850 <_printf_i+0x148>
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	4632      	mov	r2, r6
 80078fe:	4649      	mov	r1, r9
 8007900:	4640      	mov	r0, r8
 8007902:	47d0      	blx	sl
 8007904:	3001      	adds	r0, #1
 8007906:	d0ad      	beq.n	8007864 <_printf_i+0x15c>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	079b      	lsls	r3, r3, #30
 800790c:	d413      	bmi.n	8007936 <_printf_i+0x22e>
 800790e:	68e0      	ldr	r0, [r4, #12]
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	4298      	cmp	r0, r3
 8007914:	bfb8      	it	lt
 8007916:	4618      	movlt	r0, r3
 8007918:	e7a6      	b.n	8007868 <_printf_i+0x160>
 800791a:	2301      	movs	r3, #1
 800791c:	4632      	mov	r2, r6
 800791e:	4649      	mov	r1, r9
 8007920:	4640      	mov	r0, r8
 8007922:	47d0      	blx	sl
 8007924:	3001      	adds	r0, #1
 8007926:	d09d      	beq.n	8007864 <_printf_i+0x15c>
 8007928:	3501      	adds	r5, #1
 800792a:	68e3      	ldr	r3, [r4, #12]
 800792c:	9903      	ldr	r1, [sp, #12]
 800792e:	1a5b      	subs	r3, r3, r1
 8007930:	42ab      	cmp	r3, r5
 8007932:	dcf2      	bgt.n	800791a <_printf_i+0x212>
 8007934:	e7eb      	b.n	800790e <_printf_i+0x206>
 8007936:	2500      	movs	r5, #0
 8007938:	f104 0619 	add.w	r6, r4, #25
 800793c:	e7f5      	b.n	800792a <_printf_i+0x222>
 800793e:	bf00      	nop
 8007940:	08007c41 	.word	0x08007c41
 8007944:	08007c52 	.word	0x08007c52

08007948 <__malloc_lock>:
 8007948:	4801      	ldr	r0, [pc, #4]	@ (8007950 <__malloc_lock+0x8>)
 800794a:	f7ff bc65 	b.w	8007218 <__retarget_lock_acquire_recursive>
 800794e:	bf00      	nop
 8007950:	200013b4 	.word	0x200013b4

08007954 <__malloc_unlock>:
 8007954:	4801      	ldr	r0, [pc, #4]	@ (800795c <__malloc_unlock+0x8>)
 8007956:	f7ff bc60 	b.w	800721a <__retarget_lock_release_recursive>
 800795a:	bf00      	nop
 800795c:	200013b4 	.word	0x200013b4

08007960 <_realloc_r>:
 8007960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007964:	4680      	mov	r8, r0
 8007966:	4615      	mov	r5, r2
 8007968:	460c      	mov	r4, r1
 800796a:	b921      	cbnz	r1, 8007976 <_realloc_r+0x16>
 800796c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007970:	4611      	mov	r1, r2
 8007972:	f7ff bddb 	b.w	800752c <_malloc_r>
 8007976:	b92a      	cbnz	r2, 8007984 <_realloc_r+0x24>
 8007978:	f000 f84a 	bl	8007a10 <_free_r>
 800797c:	2400      	movs	r4, #0
 800797e:	4620      	mov	r0, r4
 8007980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007984:	f000 f88e 	bl	8007aa4 <_malloc_usable_size_r>
 8007988:	4285      	cmp	r5, r0
 800798a:	4606      	mov	r6, r0
 800798c:	d802      	bhi.n	8007994 <_realloc_r+0x34>
 800798e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007992:	d8f4      	bhi.n	800797e <_realloc_r+0x1e>
 8007994:	4629      	mov	r1, r5
 8007996:	4640      	mov	r0, r8
 8007998:	f7ff fdc8 	bl	800752c <_malloc_r>
 800799c:	4607      	mov	r7, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	d0ec      	beq.n	800797c <_realloc_r+0x1c>
 80079a2:	42b5      	cmp	r5, r6
 80079a4:	462a      	mov	r2, r5
 80079a6:	4621      	mov	r1, r4
 80079a8:	bf28      	it	cs
 80079aa:	4632      	movcs	r2, r6
 80079ac:	f7ff fc36 	bl	800721c <memcpy>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4640      	mov	r0, r8
 80079b4:	f000 f82c 	bl	8007a10 <_free_r>
 80079b8:	463c      	mov	r4, r7
 80079ba:	e7e0      	b.n	800797e <_realloc_r+0x1e>

080079bc <memmove>:
 80079bc:	4288      	cmp	r0, r1
 80079be:	b510      	push	{r4, lr}
 80079c0:	eb01 0402 	add.w	r4, r1, r2
 80079c4:	d902      	bls.n	80079cc <memmove+0x10>
 80079c6:	4284      	cmp	r4, r0
 80079c8:	4623      	mov	r3, r4
 80079ca:	d807      	bhi.n	80079dc <memmove+0x20>
 80079cc:	1e43      	subs	r3, r0, #1
 80079ce:	42a1      	cmp	r1, r4
 80079d0:	d008      	beq.n	80079e4 <memmove+0x28>
 80079d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079da:	e7f8      	b.n	80079ce <memmove+0x12>
 80079dc:	4402      	add	r2, r0
 80079de:	4601      	mov	r1, r0
 80079e0:	428a      	cmp	r2, r1
 80079e2:	d100      	bne.n	80079e6 <memmove+0x2a>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079ee:	e7f7      	b.n	80079e0 <memmove+0x24>

080079f0 <_sbrk_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d06      	ldr	r5, [pc, #24]	@ (8007a0c <_sbrk_r+0x1c>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	f7f9 fc56 	bl	80012ac <_sbrk>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_sbrk_r+0x1a>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_sbrk_r+0x1a>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	200013c0 	.word	0x200013c0

08007a10 <_free_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4605      	mov	r5, r0
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d041      	beq.n	8007a9c <_free_r+0x8c>
 8007a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1c:	1f0c      	subs	r4, r1, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfb8      	it	lt
 8007a22:	18e4      	addlt	r4, r4, r3
 8007a24:	f7ff ff90 	bl	8007948 <__malloc_lock>
 8007a28:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <_free_r+0x90>)
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	b933      	cbnz	r3, 8007a3c <_free_r+0x2c>
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	6014      	str	r4, [r2, #0]
 8007a32:	4628      	mov	r0, r5
 8007a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a38:	f7ff bf8c 	b.w	8007954 <__malloc_unlock>
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	d908      	bls.n	8007a52 <_free_r+0x42>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	1821      	adds	r1, r4, r0
 8007a44:	428b      	cmp	r3, r1
 8007a46:	bf01      	itttt	eq
 8007a48:	6819      	ldreq	r1, [r3, #0]
 8007a4a:	685b      	ldreq	r3, [r3, #4]
 8007a4c:	1809      	addeq	r1, r1, r0
 8007a4e:	6021      	streq	r1, [r4, #0]
 8007a50:	e7ed      	b.n	8007a2e <_free_r+0x1e>
 8007a52:	461a      	mov	r2, r3
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b10b      	cbz	r3, 8007a5c <_free_r+0x4c>
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	d9fa      	bls.n	8007a52 <_free_r+0x42>
 8007a5c:	6811      	ldr	r1, [r2, #0]
 8007a5e:	1850      	adds	r0, r2, r1
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d10b      	bne.n	8007a7c <_free_r+0x6c>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	4401      	add	r1, r0
 8007a68:	1850      	adds	r0, r2, r1
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	6011      	str	r1, [r2, #0]
 8007a6e:	d1e0      	bne.n	8007a32 <_free_r+0x22>
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	6053      	str	r3, [r2, #4]
 8007a76:	4408      	add	r0, r1
 8007a78:	6010      	str	r0, [r2, #0]
 8007a7a:	e7da      	b.n	8007a32 <_free_r+0x22>
 8007a7c:	d902      	bls.n	8007a84 <_free_r+0x74>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	e7d6      	b.n	8007a32 <_free_r+0x22>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf04      	itt	eq
 8007a8c:	6819      	ldreq	r1, [r3, #0]
 8007a8e:	685b      	ldreq	r3, [r3, #4]
 8007a90:	6063      	str	r3, [r4, #4]
 8007a92:	bf04      	itt	eq
 8007a94:	1809      	addeq	r1, r1, r0
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	6054      	str	r4, [r2, #4]
 8007a9a:	e7ca      	b.n	8007a32 <_free_r+0x22>
 8007a9c:	bd38      	pop	{r3, r4, r5, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200013bc 	.word	0x200013bc

08007aa4 <_malloc_usable_size_r>:
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f18      	subs	r0, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfbc      	itt	lt
 8007aae:	580b      	ldrlt	r3, [r1, r0]
 8007ab0:	18c0      	addlt	r0, r0, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_init>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr

08007ac0 <_fini>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr
