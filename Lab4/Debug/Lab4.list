
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006688  08006688  00007688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006778  08006778  00008104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006780  08006780  00008104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006780  08006780  00007780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08006788  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000104  0800688c  00008104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800688c  000084bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137e8  00000000  00000000  00008134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d84  00000000  00000000  0001b91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c43  00000000  00000000  0001f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6e0  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001434a  00000000  00000000  0004b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106282  00000000  00000000  0005fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165f8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045cc  00000000  00000000  00165fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0016a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000104 	.word	0x20000104
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006670 	.word	0x08006670

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000108 	.word	0x20000108
 80001fc:	08006670 	.word	0x08006670

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000638:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800063c:	f000 b988 	b.w	8000950 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	468e      	mov	lr, r1
 8000660:	4604      	mov	r4, r0
 8000662:	4688      	mov	r8, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d14a      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000668:	428a      	cmp	r2, r1
 800066a:	4617      	mov	r7, r2
 800066c:	d962      	bls.n	8000734 <__udivmoddi4+0xdc>
 800066e:	fab2 f682 	clz	r6, r2
 8000672:	b14e      	cbz	r6, 8000688 <__udivmoddi4+0x30>
 8000674:	f1c6 0320 	rsb	r3, r6, #32
 8000678:	fa01 f806 	lsl.w	r8, r1, r6
 800067c:	fa20 f303 	lsr.w	r3, r0, r3
 8000680:	40b7      	lsls	r7, r6
 8000682:	ea43 0808 	orr.w	r8, r3, r8
 8000686:	40b4      	lsls	r4, r6
 8000688:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800068c:	fa1f fc87 	uxth.w	ip, r7
 8000690:	fbb8 f1fe 	udiv	r1, r8, lr
 8000694:	0c23      	lsrs	r3, r4, #16
 8000696:	fb0e 8811 	mls	r8, lr, r1, r8
 800069a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800069e:	fb01 f20c 	mul.w	r2, r1, ip
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d909      	bls.n	80006ba <__udivmoddi4+0x62>
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80006ac:	f080 80ea 	bcs.w	8000884 <__udivmoddi4+0x22c>
 80006b0:	429a      	cmp	r2, r3
 80006b2:	f240 80e7 	bls.w	8000884 <__udivmoddi4+0x22c>
 80006b6:	3902      	subs	r1, #2
 80006b8:	443b      	add	r3, r7
 80006ba:	1a9a      	subs	r2, r3, r2
 80006bc:	b2a3      	uxth	r3, r4
 80006be:	fbb2 f0fe 	udiv	r0, r2, lr
 80006c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ce:	459c      	cmp	ip, r3
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0x8e>
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80006d8:	f080 80d6 	bcs.w	8000888 <__udivmoddi4+0x230>
 80006dc:	459c      	cmp	ip, r3
 80006de:	f240 80d3 	bls.w	8000888 <__udivmoddi4+0x230>
 80006e2:	443b      	add	r3, r7
 80006e4:	3802      	subs	r0, #2
 80006e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ea:	eba3 030c 	sub.w	r3, r3, ip
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11d      	cbz	r5, 80006fa <__udivmoddi4+0xa2>
 80006f2:	40f3      	lsrs	r3, r6
 80006f4:	2200      	movs	r2, #0
 80006f6:	e9c5 3200 	strd	r3, r2, [r5]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d905      	bls.n	800070e <__udivmoddi4+0xb6>
 8000702:	b10d      	cbz	r5, 8000708 <__udivmoddi4+0xb0>
 8000704:	e9c5 0100 	strd	r0, r1, [r5]
 8000708:	2100      	movs	r1, #0
 800070a:	4608      	mov	r0, r1
 800070c:	e7f5      	b.n	80006fa <__udivmoddi4+0xa2>
 800070e:	fab3 f183 	clz	r1, r3
 8000712:	2900      	cmp	r1, #0
 8000714:	d146      	bne.n	80007a4 <__udivmoddi4+0x14c>
 8000716:	4573      	cmp	r3, lr
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xc8>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 8105 	bhi.w	800092a <__udivmoddi4+0x2d2>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb6e 0203 	sbc.w	r2, lr, r3
 8000726:	2001      	movs	r0, #1
 8000728:	4690      	mov	r8, r2
 800072a:	2d00      	cmp	r5, #0
 800072c:	d0e5      	beq.n	80006fa <__udivmoddi4+0xa2>
 800072e:	e9c5 4800 	strd	r4, r8, [r5]
 8000732:	e7e2      	b.n	80006fa <__udivmoddi4+0xa2>
 8000734:	2a00      	cmp	r2, #0
 8000736:	f000 8090 	beq.w	800085a <__udivmoddi4+0x202>
 800073a:	fab2 f682 	clz	r6, r2
 800073e:	2e00      	cmp	r6, #0
 8000740:	f040 80a4 	bne.w	800088c <__udivmoddi4+0x234>
 8000744:	1a8a      	subs	r2, r1, r2
 8000746:	0c03      	lsrs	r3, r0, #16
 8000748:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800074c:	b280      	uxth	r0, r0
 800074e:	b2bc      	uxth	r4, r7
 8000750:	2101      	movs	r1, #1
 8000752:	fbb2 fcfe 	udiv	ip, r2, lr
 8000756:	fb0e 221c 	mls	r2, lr, ip, r2
 800075a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800075e:	fb04 f20c 	mul.w	r2, r4, ip
 8000762:	429a      	cmp	r2, r3
 8000764:	d907      	bls.n	8000776 <__udivmoddi4+0x11e>
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x11c>
 800076e:	429a      	cmp	r2, r3
 8000770:	f200 80e0 	bhi.w	8000934 <__udivmoddi4+0x2dc>
 8000774:	46c4      	mov	ip, r8
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	fbb3 f2fe 	udiv	r2, r3, lr
 800077c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000780:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000784:	fb02 f404 	mul.w	r4, r2, r4
 8000788:	429c      	cmp	r4, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x144>
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x142>
 8000794:	429c      	cmp	r4, r3
 8000796:	f200 80ca 	bhi.w	800092e <__udivmoddi4+0x2d6>
 800079a:	4602      	mov	r2, r0
 800079c:	1b1b      	subs	r3, r3, r4
 800079e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007a2:	e7a5      	b.n	80006f0 <__udivmoddi4+0x98>
 80007a4:	f1c1 0620 	rsb	r6, r1, #32
 80007a8:	408b      	lsls	r3, r1
 80007aa:	fa22 f706 	lsr.w	r7, r2, r6
 80007ae:	431f      	orrs	r7, r3
 80007b0:	fa0e f401 	lsl.w	r4, lr, r1
 80007b4:	fa20 f306 	lsr.w	r3, r0, r6
 80007b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007c0:	4323      	orrs	r3, r4
 80007c2:	fa00 f801 	lsl.w	r8, r0, r1
 80007c6:	fa1f fc87 	uxth.w	ip, r7
 80007ca:	fbbe f0f9 	udiv	r0, lr, r9
 80007ce:	0c1c      	lsrs	r4, r3, #16
 80007d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007dc:	45a6      	cmp	lr, r4
 80007de:	fa02 f201 	lsl.w	r2, r2, r1
 80007e2:	d909      	bls.n	80007f8 <__udivmoddi4+0x1a0>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80007ea:	f080 809c 	bcs.w	8000926 <__udivmoddi4+0x2ce>
 80007ee:	45a6      	cmp	lr, r4
 80007f0:	f240 8099 	bls.w	8000926 <__udivmoddi4+0x2ce>
 80007f4:	3802      	subs	r0, #2
 80007f6:	443c      	add	r4, r7
 80007f8:	eba4 040e 	sub.w	r4, r4, lr
 80007fc:	fa1f fe83 	uxth.w	lr, r3
 8000800:	fbb4 f3f9 	udiv	r3, r4, r9
 8000804:	fb09 4413 	mls	r4, r9, r3, r4
 8000808:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800080c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000810:	45a4      	cmp	ip, r4
 8000812:	d908      	bls.n	8000826 <__udivmoddi4+0x1ce>
 8000814:	193c      	adds	r4, r7, r4
 8000816:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800081a:	f080 8082 	bcs.w	8000922 <__udivmoddi4+0x2ca>
 800081e:	45a4      	cmp	ip, r4
 8000820:	d97f      	bls.n	8000922 <__udivmoddi4+0x2ca>
 8000822:	3b02      	subs	r3, #2
 8000824:	443c      	add	r4, r7
 8000826:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000832:	4564      	cmp	r4, ip
 8000834:	4673      	mov	r3, lr
 8000836:	46e1      	mov	r9, ip
 8000838:	d362      	bcc.n	8000900 <__udivmoddi4+0x2a8>
 800083a:	d05f      	beq.n	80008fc <__udivmoddi4+0x2a4>
 800083c:	b15d      	cbz	r5, 8000856 <__udivmoddi4+0x1fe>
 800083e:	ebb8 0203 	subs.w	r2, r8, r3
 8000842:	eb64 0409 	sbc.w	r4, r4, r9
 8000846:	fa04 f606 	lsl.w	r6, r4, r6
 800084a:	fa22 f301 	lsr.w	r3, r2, r1
 800084e:	431e      	orrs	r6, r3
 8000850:	40cc      	lsrs	r4, r1
 8000852:	e9c5 6400 	strd	r6, r4, [r5]
 8000856:	2100      	movs	r1, #0
 8000858:	e74f      	b.n	80006fa <__udivmoddi4+0xa2>
 800085a:	fbb1 fcf2 	udiv	ip, r1, r2
 800085e:	0c01      	lsrs	r1, r0, #16
 8000860:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000864:	b280      	uxth	r0, r0
 8000866:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800086a:	463b      	mov	r3, r7
 800086c:	4638      	mov	r0, r7
 800086e:	463c      	mov	r4, r7
 8000870:	46b8      	mov	r8, r7
 8000872:	46be      	mov	lr, r7
 8000874:	2620      	movs	r6, #32
 8000876:	fbb1 f1f7 	udiv	r1, r1, r7
 800087a:	eba2 0208 	sub.w	r2, r2, r8
 800087e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000882:	e766      	b.n	8000752 <__udivmoddi4+0xfa>
 8000884:	4601      	mov	r1, r0
 8000886:	e718      	b.n	80006ba <__udivmoddi4+0x62>
 8000888:	4610      	mov	r0, r2
 800088a:	e72c      	b.n	80006e6 <__udivmoddi4+0x8e>
 800088c:	f1c6 0220 	rsb	r2, r6, #32
 8000890:	fa2e f302 	lsr.w	r3, lr, r2
 8000894:	40b7      	lsls	r7, r6
 8000896:	40b1      	lsls	r1, r6
 8000898:	fa20 f202 	lsr.w	r2, r0, r2
 800089c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a0:	430a      	orrs	r2, r1
 80008a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80008a6:	b2bc      	uxth	r4, r7
 80008a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80008ac:	0c11      	lsrs	r1, r2, #16
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb08 f904 	mul.w	r9, r8, r4
 80008b6:	40b0      	lsls	r0, r6
 80008b8:	4589      	cmp	r9, r1
 80008ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008be:	b280      	uxth	r0, r0
 80008c0:	d93e      	bls.n	8000940 <__udivmoddi4+0x2e8>
 80008c2:	1879      	adds	r1, r7, r1
 80008c4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80008c8:	d201      	bcs.n	80008ce <__udivmoddi4+0x276>
 80008ca:	4589      	cmp	r9, r1
 80008cc:	d81f      	bhi.n	800090e <__udivmoddi4+0x2b6>
 80008ce:	eba1 0109 	sub.w	r1, r1, r9
 80008d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008d6:	fb09 f804 	mul.w	r8, r9, r4
 80008da:	fb0e 1119 	mls	r1, lr, r9, r1
 80008de:	b292      	uxth	r2, r2
 80008e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008e4:	4542      	cmp	r2, r8
 80008e6:	d229      	bcs.n	800093c <__udivmoddi4+0x2e4>
 80008e8:	18ba      	adds	r2, r7, r2
 80008ea:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80008ee:	d2c4      	bcs.n	800087a <__udivmoddi4+0x222>
 80008f0:	4542      	cmp	r2, r8
 80008f2:	d2c2      	bcs.n	800087a <__udivmoddi4+0x222>
 80008f4:	f1a9 0102 	sub.w	r1, r9, #2
 80008f8:	443a      	add	r2, r7
 80008fa:	e7be      	b.n	800087a <__udivmoddi4+0x222>
 80008fc:	45f0      	cmp	r8, lr
 80008fe:	d29d      	bcs.n	800083c <__udivmoddi4+0x1e4>
 8000900:	ebbe 0302 	subs.w	r3, lr, r2
 8000904:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000908:	3801      	subs	r0, #1
 800090a:	46e1      	mov	r9, ip
 800090c:	e796      	b.n	800083c <__udivmoddi4+0x1e4>
 800090e:	eba7 0909 	sub.w	r9, r7, r9
 8000912:	4449      	add	r1, r9
 8000914:	f1a8 0c02 	sub.w	ip, r8, #2
 8000918:	fbb1 f9fe 	udiv	r9, r1, lr
 800091c:	fb09 f804 	mul.w	r8, r9, r4
 8000920:	e7db      	b.n	80008da <__udivmoddi4+0x282>
 8000922:	4673      	mov	r3, lr
 8000924:	e77f      	b.n	8000826 <__udivmoddi4+0x1ce>
 8000926:	4650      	mov	r0, sl
 8000928:	e766      	b.n	80007f8 <__udivmoddi4+0x1a0>
 800092a:	4608      	mov	r0, r1
 800092c:	e6fd      	b.n	800072a <__udivmoddi4+0xd2>
 800092e:	443b      	add	r3, r7
 8000930:	3a02      	subs	r2, #2
 8000932:	e733      	b.n	800079c <__udivmoddi4+0x144>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	443b      	add	r3, r7
 800093a:	e71c      	b.n	8000776 <__udivmoddi4+0x11e>
 800093c:	4649      	mov	r1, r9
 800093e:	e79c      	b.n	800087a <__udivmoddi4+0x222>
 8000940:	eba1 0109 	sub.w	r1, r1, r9
 8000944:	46c4      	mov	ip, r8
 8000946:	fbb1 f9fe 	udiv	r9, r1, lr
 800094a:	fb09 f804 	mul.w	r8, r9, r4
 800094e:	e7c4      	b.n	80008da <__udivmoddi4+0x282>

08000950 <__aeabi_idiv0>:
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == UserBtn_Pin) {
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000964:	d10b      	bne.n	800097e <HAL_GPIO_EXTI_Callback+0x2a>
    	sensorType = (sensorType + 1) % 4;
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_GPIO_EXTI_Callback+0x38>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	425a      	negs	r2, r3
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	f002 0203 	and.w	r2, r2, #3
 8000976:	bf58      	it	pl
 8000978:	4253      	negpl	r3, r2
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_GPIO_EXTI_Callback+0x38>)
 800097c:	6013      	str	r3, [r2, #0]
    }
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000304 	.word	0x20000304

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	sensorType = 0;
 8000996:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <main+0xd8>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f001 fba4 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f870 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 fa0c 	bl	8000dc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009a8:	f000 f9be 	bl	8000d28 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80009ac:	f000 f8bc 	bl	8000b28 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009b0:	f000 f8fa 	bl	8000ba8 <MX_I2C2_Init>
  MX_I2C3_Init();
 80009b4:	f000 f938 	bl	8000c28 <MX_I2C3_Init>
  MX_I2C4_Init();
 80009b8:	f000 f976 	bl	8000ca8 <MX_I2C4_Init>
  BSP_ACCELERO_Init();
 80009bc:	f000 fba4 	bl	8001108 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 80009c0:	f000 fbfa 	bl	80011b8 <BSP_GYRO_Init>
  BSP_HSENSOR_Init();
 80009c4:	f000 fc54 	bl	8001270 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 80009c8:	f000 fc80 	bl	80012cc <BSP_MAGNETO_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  switch (sensorType){
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <main+0xd8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d838      	bhi.n	8000a46 <main+0xb6>
 80009d4:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <main+0x4c>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	080009ff 	.word	0x080009ff
 80009e4:	08000a11 	.word	0x08000a11
 80009e8:	08000a35 	.word	0x08000a35
	  //void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)

	  	  case 0:
	  		BSP_ACCELERO_AccGetXYZ(accelData);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 fbcb 	bl	8001188 <BSP_ACCELERO_AccGetXYZ>
	  		sprintf(output, "accelXYZ= %d\r\n", accelData);
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	491d      	ldr	r1, [pc, #116]	@ (8000a6c <main+0xdc>)
 80009f6:	6938      	ldr	r0, [r7, #16]
 80009f8:	f005 f99a 	bl	8005d30 <siprintf>
	  		  break;
 80009fc:	e028      	b.n	8000a50 <main+0xc0>
	  	  case 1:
	  		BSP_GYRO_GetXYZ(gyroData);
 80009fe:	68b8      	ldr	r0, [r7, #8]
 8000a00:	f000 fc1e 	bl	8001240 <BSP_GYRO_GetXYZ>
	  		sprintf(output, "gyroXYZ= %d\r\n", gyroData);
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	491a      	ldr	r1, [pc, #104]	@ (8000a70 <main+0xe0>)
 8000a08:	6938      	ldr	r0, [r7, #16]
 8000a0a:	f005 f991 	bl	8005d30 <siprintf>
	  		  break;
 8000a0e:	e01f      	b.n	8000a50 <main+0xc0>
	  	  case 2:
	  		  humidity = BSP_HSENSOR_ReadHumidity();
 8000a10:	f000 fc4e 	bl	80012b0 <BSP_HSENSOR_ReadHumidity>
 8000a14:	ee07 0a90 	vmov	s15, r0
 8000a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1c:	edc7 7a03 	vstr	s15, [r7, #12]
	  		sprintf(output, "humidity= %d\r\n", humidity);
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff fda9 	bl	8000578 <__aeabi_f2d>
 8000a26:	4602      	mov	r2, r0
 8000a28:	460b      	mov	r3, r1
 8000a2a:	4912      	ldr	r1, [pc, #72]	@ (8000a74 <main+0xe4>)
 8000a2c:	6938      	ldr	r0, [r7, #16]
 8000a2e:	f005 f97f 	bl	8005d30 <siprintf>
	  		  break;
 8000a32:	e00d      	b.n	8000a50 <main+0xc0>
	  	  case 3:
	  		BSP_MAGNETO_GetXYZ(magnetoData);
 8000a34:	6978      	ldr	r0, [r7, #20]
 8000a36:	f000 fc75 	bl	8001324 <BSP_MAGNETO_GetXYZ>
	  		sprintf(output, "magDataXYZ= %d\r\n", magnetoData);
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	490e      	ldr	r1, [pc, #56]	@ (8000a78 <main+0xe8>)
 8000a3e:	6938      	ldr	r0, [r7, #16]
 8000a40:	f005 f976 	bl	8005d30 <siprintf>
	  		  break;
 8000a44:	e004      	b.n	8000a50 <main+0xc0>

	  	  default:
	  		sprintf(output, "Error");
 8000a46:	490d      	ldr	r1, [pc, #52]	@ (8000a7c <main+0xec>)
 8000a48:	6938      	ldr	r0, [r7, #16]
 8000a4a:	f005 f971 	bl	8005d30 <siprintf>
	  		  break;
 8000a4e:	bf00      	nop

	  }


	  // Send USART
	  uint16_t messageLen = strlen(output);
 8000a50:	6938      	ldr	r0, [r7, #16]
 8000a52:	f7ff fbd5 	bl	8000200 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	807b      	strh	r3, [r7, #2]
	  HAL_UART_Transmit(&huart1, (uint8_t*)output, messageLen, 100);
 8000a5a:	887a      	ldrh	r2, [r7, #2]
 8000a5c:	2364      	movs	r3, #100	@ 0x64
 8000a5e:	6939      	ldr	r1, [r7, #16]
 8000a60:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <main+0xf0>)
 8000a62:	f004 fab9 	bl	8004fd8 <HAL_UART_Transmit>
  {
 8000a66:	e7b1      	b.n	80009cc <main+0x3c>
 8000a68:	20000304 	.word	0x20000304
 8000a6c:	08006688 	.word	0x08006688
 8000a70:	08006698 	.word	0x08006698
 8000a74:	080066a8 	.word	0x080066a8
 8000a78:	080066b8 	.word	0x080066b8
 8000a7c:	080066cc 	.word	0x080066cc
 8000a80:	20000270 	.word	0x20000270

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	@ 0x58
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2244      	movs	r2, #68	@ 0x44
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f005 f96e 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f002 fdb2 	bl	8003610 <HAL_PWREx_ControlVoltageScaling>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ab2:	f000 f9d3 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ac2:	2360      	movs	r3, #96	@ 0x60
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000aca:	2301      	movs	r3, #1
 8000acc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ad2:	233c      	movs	r3, #60	@ 0x3c
 8000ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fe36 	bl	8003758 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000af2:	f000 f9b3 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2303      	movs	r3, #3
 8000afc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fa3c 	bl	8003f8c <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b1a:	f000 f99f 	bl	8000e5c <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3758      	adds	r7, #88	@ 0x58
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <MX_I2C1_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <MX_I2C1_Init+0x7c>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b62:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b64:	f001 fee2 	bl	800292c <HAL_I2C_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b6e:	f000 f975 	bl	8000e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b76:	f002 fc93 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b80:	f000 f96c 	bl	8000e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b88:	f002 fcd5 	bl	8003536 <HAL_I2CEx_ConfigDigitalFilter>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 f963 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000120 	.word	0x20000120
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	30a175ab 	.word	0x30a175ab

08000ba8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <MX_I2C2_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <MX_I2C2_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000be4:	f001 fea2 	bl	800292c <HAL_I2C_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 f935 	bl	8000e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bf6:	f002 fc53 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 f92c 	bl	8000e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000c08:	f002 fc95 	bl	8003536 <HAL_I2CEx_ConfigDigitalFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 f923 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000174 	.word	0x20000174
 8000c20:	40005800 	.word	0x40005800
 8000c24:	30a175ab 	.word	0x30a175ab

08000c28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <MX_I2C3_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <MX_I2C3_Init+0x7c>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c62:	480e      	ldr	r0, [pc, #56]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c64:	f001 fe62 	bl	800292c <HAL_I2C_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c6e:	f000 f8f5 	bl	8000e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c76:	f002 fc13 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c80:	f000 f8ec 	bl	8000e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_I2C3_Init+0x74>)
 8000c88:	f002 fc55 	bl	8003536 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f000 f8e3 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001c8 	.word	0x200001c8
 8000ca0:	40005c00 	.word	0x40005c00
 8000ca4:	30a175ab 	.word	0x30a175ab

08000ca8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_I2C4_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30A175AB;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <MX_I2C4_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000ce4:	f001 fe22 	bl	800292c <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 f8b5 	bl	8000e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000cf6:	f002 fbd3 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 f8ac 	bl	8000e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_I2C4_Init+0x74>)
 8000d08:	f002 fc15 	bl	8003536 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f8a3 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000021c 	.word	0x2000021c
 8000d20:	40008400 	.word	0x40008400
 8000d24:	30a175ab 	.word	0x30a175ab

08000d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d2e:	4a23      	ldr	r2, [pc, #140]	@ (8000dbc <MX_USART1_UART_Init+0x94>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d70:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d72:	f004 f8e1 	bl	8004f38 <HAL_UART_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f000 f86e 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d84:	f004 ff0a 	bl	8005b9c <HAL_UARTEx_SetTxFifoThreshold>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 f865 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d96:	f004 ff3f 	bl	8005c18 <HAL_UARTEx_SetRxFifoThreshold>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000da0:	f000 f85c 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000da6:	f004 fec0 	bl	8005b2a <HAL_UARTEx_DisableFifoMode>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 f854 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000270 	.word	0x20000270
 8000dbc:	40013800 	.word	0x40013800

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <MX_GPIO_Init+0x94>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : UserBtn_Pin */
  GPIO_InitStruct.Pin = UserBtn_Pin;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserBtn_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0x98>)
 8000e36:	f001 fadd 	bl	80023f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2028      	movs	r0, #40	@ 0x28
 8000e40:	f001 faa1 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e44:	2028      	movs	r0, #40	@ 0x28
 8000e46:	f001 faba 	bl	80023be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000800 	.word	0x48000800

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <Error_Handler+0x8>

08000e68 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	4a26      	ldr	r2, [pc, #152]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000e88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e8c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481b      	ldr	r0, [pc, #108]	@ (8000f14 <I2Cx_MspInit+0xac>)
 8000ea6:	f001 faa5 	bl	80023f4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4818      	ldr	r0, [pc, #96]	@ (8000f14 <I2Cx_MspInit+0xac>)
 8000eb2:	f001 fa9f 	bl	80023f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	4a15      	ldr	r2, [pc, #84]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000ebc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000ed4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ed8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ede:	4a0c      	ldr	r2, [pc, #48]	@ (8000f10 <I2Cx_MspInit+0xa8>)
 8000ee0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000ee4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	210f      	movs	r1, #15
 8000eea:	2021      	movs	r0, #33	@ 0x21
 8000eec:	f001 fa4b 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000ef0:	2021      	movs	r0, #33	@ 0x21
 8000ef2:	f001 fa64 	bl	80023be <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	210f      	movs	r1, #15
 8000efa:	2022      	movs	r0, #34	@ 0x22
 8000efc:	f001 fa43 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f00:	2022      	movs	r0, #34	@ 0x22
 8000f02:	f001 fa5c 	bl	80023be <HAL_NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	@ 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400

08000f18 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <I2Cx_Init+0x54>)
 8000f24:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a11      	ldr	r2, [pc, #68]	@ (8000f70 <I2Cx_Init+0x58>)
 8000f2a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff89 	bl	8000e68 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 fce8 	bl	800292c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f002 fa9e 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40005800 	.word	0x40005800
 8000f70:	00702681 	.word	0x00702681

08000f74 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	72fb      	strb	r3, [r7, #11]
 8000f86:	460b      	mov	r3, r1
 8000f88:	813b      	strh	r3, [r7, #8]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	b299      	uxth	r1, r3
 8000f96:	88f8      	ldrh	r0, [r7, #6]
 8000f98:	893a      	ldrh	r2, [r7, #8]
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4603      	mov	r3, r0
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f001 fe9c 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f832 	bl	8001028 <I2Cx_Error>
  }
  return status;
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b08a      	sub	sp, #40	@ 0x28
 8000fd2:	af04      	add	r7, sp, #16
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4611      	mov	r1, r2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4603      	mov	r3, r0
 8000fde:	72fb      	strb	r3, [r7, #11]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	813b      	strh	r3, [r7, #8]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fec:	7afb      	ldrb	r3, [r7, #11]
 8000fee:	b299      	uxth	r1, r3
 8000ff0:	88f8      	ldrh	r0, [r7, #6]
 8000ff2:	893a      	ldrh	r2, [r7, #8]
 8000ff4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	4603      	mov	r3, r0
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f001 fd5b 	bl	8002ac0 <HAL_I2C_Mem_Write>
 800100a:	4603      	mov	r3, r0
 800100c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	4619      	mov	r1, r3
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f000 f805 	bl	8001028 <I2Cx_Error>
  }
  return status;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 fd14 	bl	8002a62 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff6c 	bl	8000f18 <I2Cx_Init>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <SENSOR_IO_Init+0x10>)
 800104e:	f7ff ff63 	bl	8000f18 <I2Cx_Init>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000308 	.word	0x20000308

0800105c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af02      	add	r7, sp, #8
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	b29a      	uxth	r2, r3
 8001072:	79f9      	ldrb	r1, [r7, #7]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	1d7b      	adds	r3, r7, #5
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	4803      	ldr	r0, [pc, #12]	@ (800108c <SENSOR_IO_Write+0x30>)
 8001080:	f7ff ffa5 	bl	8000fce <I2Cx_WriteMultiple>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000308 	.word	0x20000308

08001090 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	79f9      	ldrb	r1, [r7, #7]
 80010aa:	2301      	movs	r3, #1
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	f107 030f 	add.w	r3, r7, #15
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <SENSOR_IO_Read+0x38>)
 80010b8:	f7ff ff5c 	bl	8000f74 <I2Cx_ReadMultiple>

  return read_value;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000308 	.word	0x20000308

080010cc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	603a      	str	r2, [r7, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	460b      	mov	r3, r1
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	79f9      	ldrb	r1, [r7, #7]
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	4804      	ldr	r0, [pc, #16]	@ (8001104 <SENSOR_IO_ReadMultiple+0x38>)
 80010f4:	f7ff ff3e 	bl	8000f74 <I2Cx_ReadMultiple>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000308 	.word	0x20000308

08001108 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001112:	2300      	movs	r3, #0
 8001114:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <BSP_ACCELERO_Init+0x78>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	4798      	blx	r3
 800111c:	4603      	mov	r3, r0
 800111e:	2b6a      	cmp	r3, #106	@ 0x6a
 8001120:	d002      	beq.n	8001128 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e025      	b.n	8001174 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <BSP_ACCELERO_Init+0x7c>)
 800112a:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <BSP_ACCELERO_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800112e:	2330      	movs	r3, #48	@ 0x30
 8001130:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001136:	2300      	movs	r3, #0
 8001138:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800113a:	2340      	movs	r3, #64	@ 0x40
 800113c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001146:	797a      	ldrb	r2, [r7, #5]
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	4313      	orrs	r3, r2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001150:	7a3b      	ldrb	r3, [r7, #8]
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b21b      	sxth	r3, r3
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <BSP_ACCELERO_Init+0x7c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	89ba      	ldrh	r2, [r7, #12]
 8001170:	4610      	mov	r0, r2
 8001172:	4798      	blx	r3
  }  

  return ret;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000044 	.word	0x20000044
 8001184:	2000035c 	.word	0x2000035c

08001188 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d009      	beq.n	80011ac <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000035c 	.word	0x2000035c

080011b8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80011c2:	2300      	movs	r3, #0
 80011c4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <BSP_GYRO_Init+0x80>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4798      	blx	r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b6a      	cmp	r3, #106	@ 0x6a
 80011d0:	d002      	beq.n	80011d8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	e029      	b.n	800122c <BSP_GYRO_Init+0x74>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <BSP_GYRO_Init+0x84>)
 80011da:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <BSP_GYRO_Init+0x80>)
 80011dc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80011e2:	2330      	movs	r3, #48	@ 0x30
 80011e4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80011ee:	2340      	movs	r3, #64	@ 0x40
 80011f0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80011f6:	230c      	movs	r3, #12
 80011f8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80011fa:	7aba      	ldrb	r2, [r7, #10]
 80011fc:	797b      	ldrb	r3, [r7, #5]
 80011fe:	4313      	orrs	r3, r2
 8001200:	b2db      	uxtb	r3, r3
 8001202:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001204:	7a3b      	ldrb	r3, [r7, #8]
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b21b      	sxth	r3, r3
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <BSP_GYRO_Init+0x84>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	89ba      	ldrh	r2, [r7, #12]
 8001224:	4610      	mov	r0, r2
 8001226:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000078 	.word	0x20000078
 800123c:	20000360 	.word	0x20000360

08001240 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <BSP_GYRO_GetXYZ+0x2c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d009      	beq.n	8001264 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <BSP_GYRO_GetXYZ+0x2c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <BSP_GYRO_GetXYZ+0x2c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
    }
  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000360 	.word	0x20000360

08001270 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <BSP_HSENSOR_Init+0x38>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	20be      	movs	r0, #190	@ 0xbe
 800127c:	4798      	blx	r3
 800127e:	4603      	mov	r3, r0
 8001280:	2bbc      	cmp	r3, #188	@ 0xbc
 8001282:	d002      	beq.n	800128a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	e009      	b.n	800129e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <BSP_HSENSOR_Init+0x3c>)
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <BSP_HSENSOR_Init+0x38>)
 800128e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <BSP_HSENSOR_Init+0x3c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	20be      	movs	r0, #190	@ 0xbe
 8001298:	4798      	blx	r3
    ret = HSENSOR_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000004 	.word	0x20000004
 80012ac:	20000364 	.word	0x20000364

080012b0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	20be      	movs	r0, #190	@ 0xbe
 80012bc:	4798      	blx	r3
 80012be:	eef0 7a40 	vmov.f32	s15, s0
}
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000364 	.word	0x20000364

080012cc <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <BSP_MAGNETO_Init+0x50>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4798      	blx	r3
 80012dc:	4603      	mov	r3, r0
 80012de:	2b3d      	cmp	r3, #61	@ 0x3d
 80012e0:	d002      	beq.n	80012e8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	e013      	b.n	8001310 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <BSP_MAGNETO_Init+0x54>)
 80012ea:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <BSP_MAGNETO_Init+0x50>)
 80012ec:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80012ee:	2358      	movs	r3, #88	@ 0x58
 80012f0:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80012fa:	2308      	movs	r3, #8
 80012fc:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80012fe:	2340      	movs	r3, #64	@ 0x40
 8001300:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <BSP_MAGNETO_Init+0x54>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	463a      	mov	r2, r7
 800130a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130e:	4798      	blx	r3
  } 

  return ret;  
 8001310:	79fb      	ldrb	r3, [r7, #7]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000010 	.word	0x20000010
 8001320:	20000368 	.word	0x20000368

08001324 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <BSP_MAGNETO_GetXYZ+0x2c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d009      	beq.n	8001348 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
    }
  }
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000368 	.word	0x20000368

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_MspInit+0x44>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_MspInit+0x44>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6613      	str	r3, [r2, #96]	@ 0x60
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_MspInit+0x44>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_MspInit+0x44>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_MspInit+0x44>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6593      	str	r3, [r2, #88]	@ 0x58
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_MspInit+0x44>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0b4      	sub	sp, #208	@ 0xd0
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b8:	2294      	movs	r2, #148	@ 0x94
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fcd9 	bl	8005d74 <memset>
  if(hi2c->Instance==I2C1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a86      	ldr	r2, [pc, #536]	@ (80015e0 <HAL_I2C_MspInit+0x244>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d13c      	bne.n	8001446 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013cc:	2340      	movs	r3, #64	@ 0x40
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 f895 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013e4:	f7ff fd3a 	bl	8000e5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b7e      	ldr	r3, [pc, #504]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	4a7d      	ldr	r2, [pc, #500]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f4:	4b7b      	ldr	r3, [pc, #492]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001400:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001404:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001408:	2312      	movs	r3, #18
 800140a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141a:	2304      	movs	r3, #4
 800141c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001424:	4619      	mov	r1, r3
 8001426:	4870      	ldr	r0, [pc, #448]	@ (80015e8 <HAL_I2C_MspInit+0x24c>)
 8001428:	f000 ffe4 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142c:	4b6d      	ldr	r3, [pc, #436]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001430:	4a6c      	ldr	r2, [pc, #432]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 8001432:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001436:	6593      	str	r3, [r2, #88]	@ 0x58
 8001438:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001444:	e0c8      	b.n	80015d8 <HAL_I2C_MspInit+0x23c>
  else if(hi2c->Instance==I2C2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a68      	ldr	r2, [pc, #416]	@ (80015ec <HAL_I2C_MspInit+0x250>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d13d      	bne.n	80014cc <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f852 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 800146a:	f7ff fcf7 	bl	8000e5c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b5d      	ldr	r3, [pc, #372]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a5c      	ldr	r2, [pc, #368]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b5a      	ldr	r3, [pc, #360]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001486:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800148a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148e:	2312      	movs	r3, #18
 8001490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014a0:	2304      	movs	r3, #4
 80014a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80014aa:	4619      	mov	r1, r3
 80014ac:	484e      	ldr	r0, [pc, #312]	@ (80015e8 <HAL_I2C_MspInit+0x24c>)
 80014ae:	f000 ffa1 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014b2:	4b4c      	ldr	r3, [pc, #304]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b6:	4a4b      	ldr	r2, [pc, #300]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80014b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014be:	4b49      	ldr	r3, [pc, #292]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
}
 80014ca:	e085      	b.n	80015d8 <HAL_I2C_MspInit+0x23c>
  else if(hi2c->Instance==I2C3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a47      	ldr	r2, [pc, #284]	@ (80015f0 <HAL_I2C_MspInit+0x254>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d13d      	bne.n	8001552 <HAL_I2C_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 f80e 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_MspInit+0x15a>
      Error_Handler();
 80014f2:	f7ff fcb3 	bl	8000e5c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a3a      	ldr	r2, [pc, #232]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001514:	2312      	movs	r3, #18
 8001516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001526:	2304      	movs	r3, #4
 8001528:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001530:	4619      	mov	r1, r3
 8001532:	4830      	ldr	r0, [pc, #192]	@ (80015f4 <HAL_I2C_MspInit+0x258>)
 8001534:	f000 ff5e 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 800153e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001542:	6593      	str	r3, [r2, #88]	@ 0x58
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
}
 8001550:	e042      	b.n	80015d8 <HAL_I2C_MspInit+0x23c>
  else if(hi2c->Instance==I2C4)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <HAL_I2C_MspInit+0x25c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d13d      	bne.n	80015d8 <HAL_I2C_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800155c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156c:	4618      	mov	r0, r3
 800156e:	f002 ffcb 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_MspInit+0x1e0>
      Error_Handler();
 8001578:	f7ff fc70 	bl	8000e5c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001580:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001594:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001598:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80015ae:	2304      	movs	r3, #4
 80015b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80015b8:	4619      	mov	r1, r3
 80015ba:	4810      	ldr	r0, [pc, #64]	@ (80015fc <HAL_I2C_MspInit+0x260>)
 80015bc:	f000 ff1a 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80015c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c4:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_I2C_MspInit+0x248>)
 80015ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
}
 80015d8:	bf00      	nop
 80015da:	37d0      	adds	r7, #208	@ 0xd0
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40005400 	.word	0x40005400
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48000400 	.word	0x48000400
 80015ec:	40005800 	.word	0x40005800
 80015f0:	40005c00 	.word	0x40005c00
 80015f4:	48000800 	.word	0x48000800
 80015f8:	40008400 	.word	0x40008400
 80015fc:	48000c00 	.word	0x48000c00

08001600 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2b      	ldr	r2, [pc, #172]	@ (80016bc <HAL_I2C_MspDeInit+0xbc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d110      	bne.n	8001634 <HAL_I2C_MspDeInit+0x34>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001612:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001616:	4a2a      	ldr	r2, [pc, #168]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 8001618:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800161c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800161e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001622:	4828      	ldr	r0, [pc, #160]	@ (80016c4 <HAL_I2C_MspDeInit+0xc4>)
 8001624:	f001 f878 	bl	8002718 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001628:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800162c:	4825      	ldr	r0, [pc, #148]	@ (80016c4 <HAL_I2C_MspDeInit+0xc4>)
 800162e:	f001 f873 	bl	8002718 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001632:	e03e      	b.n	80016b2 <HAL_I2C_MspDeInit+0xb2>
  else if(hi2c->Instance==I2C2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a23      	ldr	r2, [pc, #140]	@ (80016c8 <HAL_I2C_MspDeInit+0xc8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d110      	bne.n	8001660 <HAL_I2C_MspDeInit+0x60>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	4a1f      	ldr	r2, [pc, #124]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 8001644:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001648:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800164a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800164e:	481d      	ldr	r0, [pc, #116]	@ (80016c4 <HAL_I2C_MspDeInit+0xc4>)
 8001650:	f001 f862 	bl	8002718 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001654:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001658:	481a      	ldr	r0, [pc, #104]	@ (80016c4 <HAL_I2C_MspDeInit+0xc4>)
 800165a:	f001 f85d 	bl	8002718 <HAL_GPIO_DeInit>
}
 800165e:	e028      	b.n	80016b2 <HAL_I2C_MspDeInit+0xb2>
  else if(hi2c->Instance==I2C3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	@ (80016cc <HAL_I2C_MspDeInit+0xcc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10e      	bne.n	8001688 <HAL_I2C_MspDeInit+0x88>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 8001670:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001674:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001676:	2101      	movs	r1, #1
 8001678:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <HAL_I2C_MspDeInit+0xd0>)
 800167a:	f001 f84d 	bl	8002718 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 800167e:	2102      	movs	r1, #2
 8001680:	4813      	ldr	r0, [pc, #76]	@ (80016d0 <HAL_I2C_MspDeInit+0xd0>)
 8001682:	f001 f849 	bl	8002718 <HAL_GPIO_DeInit>
}
 8001686:	e014      	b.n	80016b2 <HAL_I2C_MspDeInit+0xb2>
  else if(hi2c->Instance==I2C4)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <HAL_I2C_MspDeInit+0xd4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d10f      	bne.n	80016b2 <HAL_I2C_MspDeInit+0xb2>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 8001694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <HAL_I2C_MspDeInit+0xc0>)
 8001698:	f023 0302 	bic.w	r3, r3, #2
 800169c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 800169e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <HAL_I2C_MspDeInit+0xd8>)
 80016a4:	f001 f838 	bl	8002718 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 80016a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ac:	480a      	ldr	r0, [pc, #40]	@ (80016d8 <HAL_I2C_MspDeInit+0xd8>)
 80016ae:	f001 f833 	bl	8002718 <HAL_GPIO_DeInit>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	40005800 	.word	0x40005800
 80016cc:	40005c00 	.word	0x40005c00
 80016d0:	48000800 	.word	0x48000800
 80016d4:	40008400 	.word	0x40008400
 80016d8:	48000c00 	.word	0x48000c00

080016dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0ae      	sub	sp, #184	@ 0xb8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2294      	movs	r2, #148	@ 0x94
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f004 fb39 	bl	8005d74 <memset>
  if(huart->Instance==USART1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_UART_MspInit+0xb0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d13a      	bne.n	8001782 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800170c:	2301      	movs	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001710:	2300      	movs	r3, #0
 8001712:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fef5 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001724:	f7ff fb9a 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_UART_MspInit+0xb4>)
 800172a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172c:	4a18      	ldr	r2, [pc, #96]	@ (8001790 <HAL_UART_MspInit+0xb4>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001732:	6613      	str	r3, [r2, #96]	@ 0x60
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_UART_MspInit+0xb4>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <HAL_UART_MspInit+0xb4>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001744:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <HAL_UART_MspInit+0xb4>)
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_UART_MspInit+0xb4>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001758:	23c0      	movs	r3, #192	@ 0xc0
 800175a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001770:	2307      	movs	r3, #7
 8001772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	@ (8001794 <HAL_UART_MspInit+0xb8>)
 800177e:	f000 fe39 	bl	80023f4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	37b8      	adds	r7, #184	@ 0xb8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40013800 	.word	0x40013800
 8001790:	40021000 	.word	0x40021000
 8001794:	48000400 	.word	0x48000400

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <NMI_Handler+0x4>

080017a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <MemManage_Handler+0x4>

080017b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <UsageFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 fccf 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserBtn_Pin);
 80017fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017fe:	f001 f87d 	bl	80028fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	@ (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f004 faa4 	bl	8005d84 <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	@ (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200a0000 	.word	0x200a0000
 8001868:	00000400 	.word	0x00000400
 800186c:	2000036c 	.word	0x2000036c
 8001870:	200004c0 	.word	0x200004c0

08001874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800189c:	f7ff ffea 	bl	8001874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a0:	480c      	ldr	r0, [pc, #48]	@ (80018d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018a2:	490d      	ldr	r1, [pc, #52]	@ (80018d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <LoopForever+0xe>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018b8:	4c0a      	ldr	r4, [pc, #40]	@ (80018e4 <LoopForever+0x16>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c6:	f004 fa63 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ca:	f7ff f861 	bl	8000990 <main>

080018ce <LoopForever>:

LoopForever:
    b LoopForever
 80018ce:	e7fe      	b.n	80018ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018d0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80018dc:	08006788 	.word	0x08006788
  ldr r2, =_sbss
 80018e0:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80018e4:	200004bc 	.word	0x200004bc

080018e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC1_IRQHandler>

080018ea <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2120      	movs	r1, #32
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fbc8 	bl	8001090 <SENSOR_IO_Read>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800192a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	2120      	movs	r1, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fb91 	bl	800105c <SENSOR_IO_Write>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001950:	f7ff fb7a 	bl	8001048 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	210f      	movs	r1, #15
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fb98 	bl	8001090 <SENSOR_IO_Read>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	b2d8      	uxtb	r0, r3
 800197e:	f107 020c 	add.w	r2, r7, #12
 8001982:	2302      	movs	r3, #2
 8001984:	21b0      	movs	r1, #176	@ 0xb0
 8001986:	f7ff fba1 	bl	80010cc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800198a:	7b3b      	ldrb	r3, [r7, #12]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001992:	7b7b      	ldrb	r3, [r7, #13]
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	b2d8      	uxtb	r0, r3
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	2302      	movs	r3, #2
 80019a4:	21b6      	movs	r1, #182	@ 0xb6
 80019a6:	f7ff fb91 	bl	80010cc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80019aa:	7b7b      	ldrb	r3, [r7, #13]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	7b3b      	ldrb	r3, [r7, #12]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	b2d8      	uxtb	r0, r3
 80019be:	f107 020c 	add.w	r2, r7, #12
 80019c2:	2302      	movs	r3, #2
 80019c4:	21ba      	movs	r1, #186	@ 0xba
 80019c6:	f7ff fb81 	bl	80010cc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	7b3b      	ldrb	r3, [r7, #12]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	b2d8      	uxtb	r0, r3
 80019de:	f107 020c 	add.w	r2, r7, #12
 80019e2:	2302      	movs	r3, #2
 80019e4:	21a8      	movs	r1, #168	@ 0xa8
 80019e6:	f7ff fb71 	bl	80010cc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	7b3b      	ldrb	r3, [r7, #12]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001a10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001a26:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001a4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a50:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001a5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a60:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001aa4 <HTS221_H_ReadHumidity+0x134>
 8001a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	dd01      	ble.n	8001a72 <HTS221_H_ReadHumidity+0x102>
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HTS221_H_ReadHumidity+0x138>)
 8001a70:	e00a      	b.n	8001a88 <HTS221_H_ReadHumidity+0x118>
        : tmp_f;
 8001a72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d502      	bpl.n	8001a86 <HTS221_H_ReadHumidity+0x116>
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e000      	b.n	8001a88 <HTS221_H_ReadHumidity+0x118>
 8001a86:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001a88:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a96:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	447a0000 	.word	0x447a0000
 8001aa8:	447a0000 	.word	0x447a0000

08001aac <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001ab8:	783b      	ldrb	r3, [r7, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	2120      	movs	r1, #32
 8001abe:	203c      	movs	r0, #60	@ 0x3c
 8001ac0:	f7ff facc 	bl	800105c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2121      	movs	r1, #33	@ 0x21
 8001aca:	203c      	movs	r0, #60	@ 0x3c
 8001acc:	f7ff fac6 	bl	800105c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001ad0:	78bb      	ldrb	r3, [r7, #2]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2122      	movs	r1, #34	@ 0x22
 8001ad6:	203c      	movs	r0, #60	@ 0x3c
 8001ad8:	f7ff fac0 	bl	800105c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2123      	movs	r1, #35	@ 0x23
 8001ae2:	203c      	movs	r0, #60	@ 0x3c
 8001ae4:	f7ff faba 	bl	800105c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001ae8:	793b      	ldrb	r3, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	2124      	movs	r1, #36	@ 0x24
 8001aee:	203c      	movs	r0, #60	@ 0x3c
 8001af0:	f7ff fab4 	bl	800105c <SENSOR_IO_Write>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001b06:	2122      	movs	r1, #34	@ 0x22
 8001b08:	203c      	movs	r0, #60	@ 0x3c
 8001b0a:	f7ff fac1 	bl	8001090 <SENSOR_IO_Read>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f023 0303 	bic.w	r3, r3, #3
 8001b18:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f043 0303 	orr.w	r3, r3, #3
 8001b20:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	461a      	mov	r2, r3
 8001b26:	2122      	movs	r1, #34	@ 0x22
 8001b28:	203c      	movs	r0, #60	@ 0x3c
 8001b2a:	f7ff fa97 	bl	800105c <SENSOR_IO_Write>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001b3a:	f7ff fa85 	bl	8001048 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001b3e:	210f      	movs	r1, #15
 8001b40:	203c      	movs	r0, #60	@ 0x3c
 8001b42:	f7ff faa5 	bl	8001090 <SENSOR_IO_Read>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001b5a:	2122      	movs	r1, #34	@ 0x22
 8001b5c:	203c      	movs	r0, #60	@ 0x3c
 8001b5e:	f7ff fa97 	bl	8001090 <SENSOR_IO_Read>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	f023 0320 	bic.w	r3, r3, #32
 8001b6c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	f043 0320 	orr.w	r3, r3, #32
 8001b7a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2122      	movs	r1, #34	@ 0x22
 8001b82:	203c      	movs	r0, #60	@ 0x3c
 8001b84:	f7ff fa6a 	bl	800105c <SENSOR_IO_Write>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001ba6:	2121      	movs	r1, #33	@ 0x21
 8001ba8:	203c      	movs	r0, #60	@ 0x3c
 8001baa:	f7ff fa71 	bl	8001090 <SENSOR_IO_Read>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001bb2:	f107 0208 	add.w	r2, r7, #8
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	21a8      	movs	r1, #168	@ 0xa8
 8001bba:	203c      	movs	r0, #60	@ 0x3c
 8001bbc:	f7ff fa86 	bl	80010cc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	77fb      	strb	r3, [r7, #31]
 8001bc4:	e01a      	b.n	8001bfc <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	3301      	adds	r3, #1
 8001bcc:	3320      	adds	r3, #32
 8001bce:	443b      	add	r3, r7
 8001bd0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	7ffa      	ldrb	r2, [r7, #31]
 8001bda:	0052      	lsls	r2, r2, #1
 8001bdc:	3220      	adds	r2, #32
 8001bde:	443a      	add	r2, r7
 8001be0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001be4:	4413      	add	r3, r2
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	b212      	sxth	r2, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	3320      	adds	r3, #32
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	77fb      	strb	r3, [r7, #31]
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d9e1      	bls.n	8001bc6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001c08:	2b60      	cmp	r3, #96	@ 0x60
 8001c0a:	d013      	beq.n	8001c34 <LIS3MDL_MagReadXYZ+0xa4>
 8001c0c:	2b60      	cmp	r3, #96	@ 0x60
 8001c0e:	dc14      	bgt.n	8001c3a <LIS3MDL_MagReadXYZ+0xaa>
 8001c10:	2b40      	cmp	r3, #64	@ 0x40
 8001c12:	d00c      	beq.n	8001c2e <LIS3MDL_MagReadXYZ+0x9e>
 8001c14:	2b40      	cmp	r3, #64	@ 0x40
 8001c16:	dc10      	bgt.n	8001c3a <LIS3MDL_MagReadXYZ+0xaa>
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <LIS3MDL_MagReadXYZ+0x92>
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d003      	beq.n	8001c28 <LIS3MDL_MagReadXYZ+0x98>
 8001c20:	e00b      	b.n	8001c3a <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001c22:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <LIS3MDL_MagReadXYZ+0xf8>)
 8001c24:	61bb      	str	r3, [r7, #24]
    break;
 8001c26:	e008      	b.n	8001c3a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <LIS3MDL_MagReadXYZ+0xfc>)
 8001c2a:	61bb      	str	r3, [r7, #24]
    break;
 8001c2c:	e005      	b.n	8001c3a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <LIS3MDL_MagReadXYZ+0x100>)
 8001c30:	61bb      	str	r3, [r7, #24]
    break;
 8001c32:	e002      	b.n	8001c3a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001c34:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <LIS3MDL_MagReadXYZ+0x104>)
 8001c36:	61bb      	str	r3, [r7, #24]
    break;    
 8001c38:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	77fb      	strb	r3, [r7, #31]
 8001c3e:	e01a      	b.n	8001c76 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	3320      	adds	r3, #32
 8001c46:	443b      	add	r3, r7
 8001c48:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5c:	7ffb      	ldrb	r3, [r7, #31]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c68:	ee17 2a90 	vmov	r2, s15
 8001c6c:	b212      	sxth	r2, r2
 8001c6e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001c70:	7ffb      	ldrb	r3, [r7, #31]
 8001c72:	3301      	adds	r3, #1
 8001c74:	77fb      	strb	r3, [r7, #31]
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d9e1      	bls.n	8001c40 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	3e0f5c29 	.word	0x3e0f5c29
 8001c8c:	3e947ae1 	.word	0x3e947ae1
 8001c90:	3edc28f6 	.word	0x3edc28f6
 8001c94:	3f147ae1 	.word	0x3f147ae1

08001c98 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	20d4      	movs	r0, #212	@ 0xd4
 8001caa:	f7ff f9f1 	bl	8001090 <SENSOR_IO_Read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001cb6:	7bbb      	ldrb	r3, [r7, #14]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001cbe:	7bba      	ldrb	r2, [r7, #14]
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001cc6:	7bbb      	ldrb	r3, [r7, #14]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2110      	movs	r1, #16
 8001ccc:	20d4      	movs	r0, #212	@ 0xd4
 8001cce:	f7ff f9c5 	bl	800105c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001cd2:	2112      	movs	r1, #18
 8001cd4:	20d4      	movs	r0, #212	@ 0xd4
 8001cd6:	f7ff f9db 	bl	8001090 <SENSOR_IO_Read>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001ce6:	7bbb      	ldrb	r3, [r7, #14]
 8001ce8:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001cec:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001cee:	7bba      	ldrb	r2, [r7, #14]
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2112      	movs	r1, #18
 8001cfc:	20d4      	movs	r0, #212	@ 0xd4
 8001cfe:	f7ff f9ad 	bl	800105c <SENSOR_IO_Write>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001d10:	2300      	movs	r3, #0
 8001d12:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001d14:	2110      	movs	r1, #16
 8001d16:	20d4      	movs	r0, #212	@ 0xd4
 8001d18:	f7ff f9ba 	bl	8001090 <SENSOR_IO_Read>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	20d4      	movs	r0, #212	@ 0xd4
 8001d30:	f7ff f994 	bl	800105c <SENSOR_IO_Write>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001d40:	f7ff f982 	bl	8001048 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001d44:	210f      	movs	r1, #15
 8001d46:	20d4      	movs	r0, #212	@ 0xd4
 8001d48:	f7ff f9a2 	bl	8001090 <SENSOR_IO_Read>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001d60:	2115      	movs	r1, #21
 8001d62:	20d4      	movs	r0, #212	@ 0xd4
 8001d64:	f7ff f994 	bl	8001090 <SENSOR_IO_Read>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	f023 0310 	bic.w	r3, r3, #16
 8001d72:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	461a      	mov	r2, r3
 8001d86:	2115      	movs	r1, #21
 8001d88:	20d4      	movs	r0, #212	@ 0xd4
 8001d8a:	f7ff f967 	bl	800105c <SENSOR_IO_Write>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001dae:	2110      	movs	r1, #16
 8001db0:	20d4      	movs	r0, #212	@ 0xd4
 8001db2:	f7ff f96d 	bl	8001090 <SENSOR_IO_Read>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001dba:	f107 0208 	add.w	r2, r7, #8
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	2128      	movs	r1, #40	@ 0x28
 8001dc2:	20d4      	movs	r0, #212	@ 0xd4
 8001dc4:	f7ff f982 	bl	80010cc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
 8001dcc:	e01a      	b.n	8001e04 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001dce:	7ffb      	ldrb	r3, [r7, #31]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	3320      	adds	r3, #32
 8001dd6:	443b      	add	r3, r7
 8001dd8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	7ffa      	ldrb	r2, [r7, #31]
 8001de2:	0052      	lsls	r2, r2, #1
 8001de4:	3220      	adds	r2, #32
 8001de6:	443a      	add	r2, r7
 8001de8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001dec:	4413      	add	r3, r2
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
 8001df2:	b212      	sxth	r2, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	3320      	adds	r3, #32
 8001df8:	443b      	add	r3, r7
 8001dfa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	3301      	adds	r3, #1
 8001e02:	77fb      	strb	r3, [r7, #31]
 8001e04:	7ffb      	ldrb	r3, [r7, #31]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d9e1      	bls.n	8001dce <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d829      	bhi.n	8001e68 <LSM6DSL_AccReadXYZ+0xd0>
 8001e14:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <LSM6DSL_AccReadXYZ+0x84>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e51 	.word	0x08001e51
 8001e20:	08001e69 	.word	0x08001e69
 8001e24:	08001e69 	.word	0x08001e69
 8001e28:	08001e69 	.word	0x08001e69
 8001e2c:	08001e63 	.word	0x08001e63
 8001e30:	08001e69 	.word	0x08001e69
 8001e34:	08001e69 	.word	0x08001e69
 8001e38:	08001e69 	.word	0x08001e69
 8001e3c:	08001e57 	.word	0x08001e57
 8001e40:	08001e69 	.word	0x08001e69
 8001e44:	08001e69 	.word	0x08001e69
 8001e48:	08001e69 	.word	0x08001e69
 8001e4c:	08001e5d 	.word	0x08001e5d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <LSM6DSL_AccReadXYZ+0x11c>)
 8001e52:	61bb      	str	r3, [r7, #24]
    break;
 8001e54:	e008      	b.n	8001e68 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001e56:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <LSM6DSL_AccReadXYZ+0x120>)
 8001e58:	61bb      	str	r3, [r7, #24]
    break;
 8001e5a:	e005      	b.n	8001e68 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <LSM6DSL_AccReadXYZ+0x124>)
 8001e5e:	61bb      	str	r3, [r7, #24]
    break;
 8001e60:	e002      	b.n	8001e68 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <LSM6DSL_AccReadXYZ+0x128>)
 8001e64:	61bb      	str	r3, [r7, #24]
    break;    
 8001e66:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
 8001e6c:	e01a      	b.n	8001ea4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001e6e:	7ffb      	ldrb	r3, [r7, #31]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	3320      	adds	r3, #32
 8001e74:	443b      	add	r3, r7
 8001e76:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 2a90 	vmov	r2, s15
 8001e9a:	b212      	sxth	r2, r2
 8001e9c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d9e1      	bls.n	8001e6e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	3d79db23 	.word	0x3d79db23
 8001eb8:	3df9db23 	.word	0x3df9db23
 8001ebc:	3e79db23 	.word	0x3e79db23
 8001ec0:	3ef9db23 	.word	0x3ef9db23

08001ec4 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001ed2:	2111      	movs	r1, #17
 8001ed4:	20d4      	movs	r0, #212	@ 0xd4
 8001ed6:	f7ff f8db 	bl	8001090 <SENSOR_IO_Read>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001eea:	7bba      	ldrb	r2, [r7, #14]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2111      	movs	r1, #17
 8001ef8:	20d4      	movs	r0, #212	@ 0xd4
 8001efa:	f7ff f8af 	bl	800105c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001efe:	2112      	movs	r1, #18
 8001f00:	20d4      	movs	r0, #212	@ 0xd4
 8001f02:	f7ff f8c5 	bl	8001090 <SENSOR_IO_Read>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001f18:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001f1a:	7bba      	ldrb	r2, [r7, #14]
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	461a      	mov	r2, r3
 8001f26:	2112      	movs	r1, #18
 8001f28:	20d4      	movs	r0, #212	@ 0xd4
 8001f2a:	f7ff f897 	bl	800105c <SENSOR_IO_Write>
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001f40:	2111      	movs	r1, #17
 8001f42:	20d4      	movs	r0, #212	@ 0xd4
 8001f44:	f7ff f8a4 	bl	8001090 <SENSOR_IO_Read>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	461a      	mov	r2, r3
 8001f58:	2111      	movs	r1, #17
 8001f5a:	20d4      	movs	r0, #212	@ 0xd4
 8001f5c:	f7ff f87e 	bl	800105c <SENSOR_IO_Write>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001f6c:	f7ff f86c 	bl	8001048 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001f70:	210f      	movs	r1, #15
 8001f72:	20d4      	movs	r0, #212	@ 0xd4
 8001f74:	f7ff f88c 	bl	8001090 <SENSOR_IO_Read>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001f8c:	2116      	movs	r1, #22
 8001f8e:	20d4      	movs	r0, #212	@ 0xd4
 8001f90:	f7ff f87e 	bl	8001090 <SENSOR_IO_Read>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f9e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fac:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2116      	movs	r1, #22
 8001fb4:	20d4      	movs	r0, #212	@ 0xd4
 8001fb6:	f7ff f851 	bl	800105c <SENSOR_IO_Write>
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001fda:	2111      	movs	r1, #17
 8001fdc:	20d4      	movs	r0, #212	@ 0xd4
 8001fde:	f7ff f857 	bl	8001090 <SENSOR_IO_Read>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001fe6:	f107 0208 	add.w	r2, r7, #8
 8001fea:	2306      	movs	r3, #6
 8001fec:	2122      	movs	r1, #34	@ 0x22
 8001fee:	20d4      	movs	r0, #212	@ 0xd4
 8001ff0:	f7ff f86c 	bl	80010cc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77fb      	strb	r3, [r7, #31]
 8001ff8:	e01a      	b.n	8002030 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	3301      	adds	r3, #1
 8002000:	3320      	adds	r3, #32
 8002002:	443b      	add	r3, r7
 8002004:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b29b      	uxth	r3, r3
 800200c:	7ffa      	ldrb	r2, [r7, #31]
 800200e:	0052      	lsls	r2, r2, #1
 8002010:	3220      	adds	r2, #32
 8002012:	443a      	add	r2, r7
 8002014:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002018:	4413      	add	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	b212      	sxth	r2, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	3320      	adds	r3, #32
 8002024:	443b      	add	r3, r7
 8002026:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	3301      	adds	r3, #1
 800202e:	77fb      	strb	r3, [r7, #31]
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d9e1      	bls.n	8001ffa <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b0c      	cmp	r3, #12
 800203e:	d829      	bhi.n	8002094 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8002040:	a201      	add	r2, pc, #4	@ (adr r2, 8002048 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	0800207d 	.word	0x0800207d
 800204c:	08002095 	.word	0x08002095
 8002050:	08002095 	.word	0x08002095
 8002054:	08002095 	.word	0x08002095
 8002058:	08002083 	.word	0x08002083
 800205c:	08002095 	.word	0x08002095
 8002060:	08002095 	.word	0x08002095
 8002064:	08002095 	.word	0x08002095
 8002068:	08002089 	.word	0x08002089
 800206c:	08002095 	.word	0x08002095
 8002070:	08002095 	.word	0x08002095
 8002074:	08002095 	.word	0x08002095
 8002078:	0800208f 	.word	0x0800208f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 800207e:	61bb      	str	r3, [r7, #24]
    break;
 8002080:	e008      	b.n	8002094 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002082:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002084:	61bb      	str	r3, [r7, #24]
    break;
 8002086:	e005      	b.n	8002094 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002088:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800208a:	61bb      	str	r3, [r7, #24]
    break;
 800208c:	e002      	b.n	8002094 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002090:	61bb      	str	r3, [r7, #24]
    break;    
 8002092:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	77fb      	strb	r3, [r7, #31]
 8002098:	e016      	b.n	80020c8 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	3320      	adds	r3, #32
 80020a0:	443b      	add	r3, r7
 80020a2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	3301      	adds	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]
 80020c8:	7ffb      	ldrb	r3, [r7, #31]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d9e5      	bls.n	800209a <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	410c0000 	.word	0x410c0000
 80020dc:	418c0000 	.word	0x418c0000
 80020e0:	420c0000 	.word	0x420c0000
 80020e4:	428c0000 	.word	0x428c0000

080020e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f2:	2003      	movs	r0, #3
 80020f4:	f000 f93c 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 f80d 	bl	8002118 <HAL_InitTick>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	e001      	b.n	800210e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800210a:	f7ff f923 	bl	8001354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800210e:	79fb      	ldrb	r3, [r7, #7]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_InitTick+0x6c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d023      	beq.n	8002174 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <HAL_InitTick+0x70>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <HAL_InitTick+0x6c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213a:	fbb3 f3f1 	udiv	r3, r3, r1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f949 	bl	80023da <HAL_SYSTICK_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d809      	bhi.n	8002168 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800215c:	f000 f913 	bl	8002386 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_InitTick+0x74>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e007      	b.n	8002178 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e004      	b.n	8002178 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e001      	b.n	8002178 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200000b0 	.word	0x200000b0
 8002188:	20000000 	.word	0x20000000
 800218c:	200000ac 	.word	0x200000ac

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200000b0 	.word	0x200000b0
 80021b4:	20000370 	.word	0x20000370

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000370 	.word	0x20000370

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	@ (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	@ 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002350:	f7ff ff8e 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	@ (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff29 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff3e 	bl	8002218 <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff8e 	bl	80022c4 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5d 	bl	8002270 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff31 	bl	8002234 <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa2 	bl	800232c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002402:	e166      	b.n	80026d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8158 	beq.w	80026cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d005      	beq.n	8002434 <HAL_GPIO_Init+0x40>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d017      	beq.n	80024d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d123      	bne.n	8002526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	6939      	ldr	r1, [r7, #16]
 8002522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80b2 	beq.w	80026cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b61      	ldr	r3, [pc, #388]	@ (80026f0 <HAL_GPIO_Init+0x2fc>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	4a60      	ldr	r2, [pc, #384]	@ (80026f0 <HAL_GPIO_Init+0x2fc>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6613      	str	r3, [r2, #96]	@ 0x60
 8002574:	4b5e      	ldr	r3, [pc, #376]	@ (80026f0 <HAL_GPIO_Init+0x2fc>)
 8002576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002580:	4a5c      	ldr	r2, [pc, #368]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025aa:	d02b      	beq.n	8002604 <HAL_GPIO_Init+0x210>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a52      	ldr	r2, [pc, #328]	@ (80026f8 <HAL_GPIO_Init+0x304>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d025      	beq.n	8002600 <HAL_GPIO_Init+0x20c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a51      	ldr	r2, [pc, #324]	@ (80026fc <HAL_GPIO_Init+0x308>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d01f      	beq.n	80025fc <HAL_GPIO_Init+0x208>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a50      	ldr	r2, [pc, #320]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d019      	beq.n	80025f8 <HAL_GPIO_Init+0x204>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002704 <HAL_GPIO_Init+0x310>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_GPIO_Init+0x200>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002708 <HAL_GPIO_Init+0x314>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1fc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4d      	ldr	r2, [pc, #308]	@ (800270c <HAL_GPIO_Init+0x318>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1f8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4c      	ldr	r2, [pc, #304]	@ (8002710 <HAL_GPIO_Init+0x31c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1f4>
 80025e4:	2307      	movs	r3, #7
 80025e6:	e00e      	b.n	8002606 <HAL_GPIO_Init+0x212>
 80025e8:	2308      	movs	r3, #8
 80025ea:	e00c      	b.n	8002606 <HAL_GPIO_Init+0x212>
 80025ec:	2306      	movs	r3, #6
 80025ee:	e00a      	b.n	8002606 <HAL_GPIO_Init+0x212>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e008      	b.n	8002606 <HAL_GPIO_Init+0x212>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e006      	b.n	8002606 <HAL_GPIO_Init+0x212>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e004      	b.n	8002606 <HAL_GPIO_Init+0x212>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e002      	b.n	8002606 <HAL_GPIO_Init+0x212>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_GPIO_Init+0x212>
 8002604:	2300      	movs	r3, #0
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	f002 0203 	and.w	r2, r2, #3
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	4093      	lsls	r3, r2
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002616:	4937      	ldr	r1, [pc, #220]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002624:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_GPIO_Init+0x320>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002648:	4a32      	ldr	r2, [pc, #200]	@ (8002714 <HAL_GPIO_Init+0x320>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800264e:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_GPIO_Init+0x320>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002672:	4a28      	ldr	r2, [pc, #160]	@ (8002714 <HAL_GPIO_Init+0x320>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <HAL_GPIO_Init+0x320>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_GPIO_Init+0x320>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <HAL_GPIO_Init+0x320>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c6:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <HAL_GPIO_Init+0x320>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3301      	adds	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f47f ae91 	bne.w	8002404 <HAL_GPIO_Init+0x10>
  }
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010000 	.word	0x40010000
 80026f8:	48000400 	.word	0x48000400
 80026fc:	48000800 	.word	0x48000800
 8002700:	48000c00 	.word	0x48000c00
 8002704:	48001000 	.word	0x48001000
 8002708:	48001400 	.word	0x48001400
 800270c:	48001800 	.word	0x48001800
 8002710:	48001c00 	.word	0x48001c00
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002726:	e0c9      	b.n	80028bc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002728:	2201      	movs	r2, #1
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80bc 	beq.w	80028b6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800273e:	4a66      	ldr	r2, [pc, #408]	@ (80028d8 <HAL_GPIO_DeInit+0x1c0>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002766:	d02b      	beq.n	80027c0 <HAL_GPIO_DeInit+0xa8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a5c      	ldr	r2, [pc, #368]	@ (80028dc <HAL_GPIO_DeInit+0x1c4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d025      	beq.n	80027bc <HAL_GPIO_DeInit+0xa4>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a5b      	ldr	r2, [pc, #364]	@ (80028e0 <HAL_GPIO_DeInit+0x1c8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d01f      	beq.n	80027b8 <HAL_GPIO_DeInit+0xa0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a5a      	ldr	r2, [pc, #360]	@ (80028e4 <HAL_GPIO_DeInit+0x1cc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d019      	beq.n	80027b4 <HAL_GPIO_DeInit+0x9c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a59      	ldr	r2, [pc, #356]	@ (80028e8 <HAL_GPIO_DeInit+0x1d0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_GPIO_DeInit+0x98>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a58      	ldr	r2, [pc, #352]	@ (80028ec <HAL_GPIO_DeInit+0x1d4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00d      	beq.n	80027ac <HAL_GPIO_DeInit+0x94>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a57      	ldr	r2, [pc, #348]	@ (80028f0 <HAL_GPIO_DeInit+0x1d8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_DeInit+0x90>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a56      	ldr	r2, [pc, #344]	@ (80028f4 <HAL_GPIO_DeInit+0x1dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_GPIO_DeInit+0x8c>
 80027a0:	2307      	movs	r3, #7
 80027a2:	e00e      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027a4:	2308      	movs	r3, #8
 80027a6:	e00c      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027a8:	2306      	movs	r3, #6
 80027aa:	e00a      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027ac:	2305      	movs	r3, #5
 80027ae:	e008      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027b0:	2304      	movs	r3, #4
 80027b2:	e006      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027b4:	2303      	movs	r3, #3
 80027b6:	e004      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_GPIO_DeInit+0xaa>
 80027c0:	2300      	movs	r3, #0
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	f002 0203 	and.w	r2, r2, #3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4093      	lsls	r3, r2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d132      	bne.n	8002838 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80027d2:	4b49      	ldr	r3, [pc, #292]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	4947      	ldr	r1, [pc, #284]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80027e0:	4b45      	ldr	r3, [pc, #276]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4943      	ldr	r1, [pc, #268]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80027ee:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4940      	ldr	r1, [pc, #256]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80027fc:	4b3e      	ldr	r3, [pc, #248]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	493c      	ldr	r1, [pc, #240]	@ (80028f8 <HAL_GPIO_DeInit+0x1e0>)
 8002806:	4013      	ands	r3, r2
 8002808:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800281a:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <HAL_GPIO_DeInit+0x1c0>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43da      	mvns	r2, r3
 800282a:	482b      	ldr	r0, [pc, #172]	@ (80028d8 <HAL_GPIO_DeInit+0x1c0>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	400a      	ands	r2, r1
 8002832:	3302      	adds	r3, #2
 8002834:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2103      	movs	r1, #3
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	4019      	ands	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2103      	movs	r1, #3
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	2101      	movs	r1, #1
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2103      	movs	r1, #3
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	401a      	ands	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f af2f 	bne.w	8002728 <HAL_GPIO_DeInit+0x10>
  }
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40010000 	.word	0x40010000
 80028dc:	48000400 	.word	0x48000400
 80028e0:	48000800 	.word	0x48000800
 80028e4:	48000c00 	.word	0x48000c00
 80028e8:	48001000 	.word	0x48001000
 80028ec:	48001400 	.word	0x48001400
 80028f0:	48001800 	.word	0x48001800
 80028f4:	48001c00 	.word	0x48001c00
 80028f8:	40010400 	.word	0x40010400

080028fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f81a 	bl	8000954 <HAL_GPIO_EXTI_Callback>
  }
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40010400 	.word	0x40010400

0800292c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e08d      	b.n	8002a5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fd22 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	@ 0x24
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800297c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800298c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e006      	b.n	80029b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d108      	bne.n	80029ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	e007      	b.n	80029de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69d9      	ldr	r1, [r3, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e021      	b.n	8002ab8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	@ 0x24
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fe fdb7 	bl	8001600 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 80f9 	bne.w	8002cda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_I2C_Mem_Write+0x34>
 8002aee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002afa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0ed      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_I2C_Mem_Write+0x4e>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0e6      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b16:	f7ff fb4f 	bl	80021b8 <HAL_GetTick>
 8002b1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2319      	movs	r3, #25
 8002b22:	2201      	movs	r2, #1
 8002b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fac3 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d1      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2221      	movs	r2, #33	@ 0x21
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2240      	movs	r2, #64	@ 0x40
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b60:	88f8      	ldrh	r0, [r7, #6]
 8002b62:	893a      	ldrh	r2, [r7, #8]
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4603      	mov	r3, r0
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f9d3 	bl	8002f1c <I2C_RequestMemoryWrite>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0a9      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2bff      	cmp	r3, #255	@ 0xff
 8002b90:	d90e      	bls.n	8002bb0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	22ff      	movs	r2, #255	@ 0xff
 8002b96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fc47 	bl	800343c <I2C_TransferConfig>
 8002bae:	e00f      	b.n	8002bd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	8979      	ldrh	r1, [r7, #10]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fc36 	bl	800343c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fac6 	bl	8003166 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e07b      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d034      	beq.n	8002c88 <HAL_I2C_Mem_Write+0x1c8>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d130      	bne.n	8002c88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2180      	movs	r1, #128	@ 0x80
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fa3f 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e04d      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2bff      	cmp	r3, #255	@ 0xff
 8002c48:	d90e      	bls.n	8002c68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	22ff      	movs	r2, #255	@ 0xff
 8002c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fbeb 	bl	800343c <I2C_TransferConfig>
 8002c66:	e00f      	b.n	8002c88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	8979      	ldrh	r1, [r7, #10]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fbda 	bl	800343c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d19e      	bne.n	8002bd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 faac 	bl	80031f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e01a      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2220      	movs	r2, #32
 8002cac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <HAL_I2C_Mem_Write+0x224>)
 8002cba:	400b      	ands	r3, r1
 8002cbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	fe00e800 	.word	0xfe00e800

08002ce8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	f040 80fd 	bne.w	8002f0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_I2C_Mem_Read+0x34>
 8002d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0f1      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Mem_Read+0x4e>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e0ea      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d3e:	f7ff fa3b 	bl	80021b8 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2319      	movs	r3, #25
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f9af 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0d5      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2222      	movs	r2, #34	@ 0x22
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2240      	movs	r2, #64	@ 0x40
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d88:	88f8      	ldrh	r0, [r7, #6]
 8002d8a:	893a      	ldrh	r2, [r7, #8]
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4603      	mov	r3, r0
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f913 	bl	8002fc4 <I2C_RequestMemoryRead>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0ad      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2bff      	cmp	r3, #255	@ 0xff
 8002db8:	d90e      	bls.n	8002dd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	4b52      	ldr	r3, [pc, #328]	@ (8002f14 <HAL_I2C_Mem_Read+0x22c>)
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fb33 	bl	800343c <I2C_TransferConfig>
 8002dd6:	e00f      	b.n	8002df8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	8979      	ldrh	r1, [r7, #10]
 8002dea:	4b4a      	ldr	r3, [pc, #296]	@ (8002f14 <HAL_I2C_Mem_Read+0x22c>)
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fb22 	bl	800343c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2104      	movs	r1, #4
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f956 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07c      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d034      	beq.n	8002eb8 <HAL_I2C_Mem_Read+0x1d0>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d130      	bne.n	8002eb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2180      	movs	r1, #128	@ 0x80
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f927 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e04d      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2bff      	cmp	r3, #255	@ 0xff
 8002e78:	d90e      	bls.n	8002e98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fad3 	bl	800343c <I2C_TransferConfig>
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	8979      	ldrh	r1, [r7, #10]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fac2 	bl	800343c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d19a      	bne.n	8002df8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f994 	bl	80031f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e01a      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2220      	movs	r2, #32
 8002edc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_I2C_Mem_Read+0x230>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	80002400 	.word	0x80002400
 8002f18:	fe00e800 	.word	0xfe00e800

08002f1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	8979      	ldrh	r1, [r7, #10]
 8002f3c:	4b20      	ldr	r3, [pc, #128]	@ (8002fc0 <I2C_RequestMemoryWrite+0xa4>)
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fa79 	bl	800343c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	69b9      	ldr	r1, [r7, #24]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f909 	bl	8003166 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e02c      	b.n	8002fb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f6e:	e015      	b.n	8002f9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	69b9      	ldr	r1, [r7, #24]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f8ef 	bl	8003166 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e012      	b.n	8002fb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f92:	893b      	ldrh	r3, [r7, #8]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	@ 0x80
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f884 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	80002000 	.word	0x80002000

08002fc4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	817b      	strh	r3, [r7, #10]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	813b      	strh	r3, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	8979      	ldrh	r1, [r7, #10]
 8002fe4:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <I2C_RequestMemoryRead+0xa4>)
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa26 	bl	800343c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f8b6 	bl	8003166 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e02c      	b.n	800305e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d105      	bne.n	8003016 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800300a:	893b      	ldrh	r3, [r7, #8]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	629a      	str	r2, [r3, #40]	@ 0x28
 8003014:	e015      	b.n	8003042 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	b29b      	uxth	r3, r3
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f89c 	bl	8003166 <I2C_WaitOnTXISFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e012      	b.n	800305e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2200      	movs	r2, #0
 800304a:	2140      	movs	r1, #64	@ 0x40
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f831 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	80002000 	.word	0x80002000

0800306c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d103      	bne.n	800308a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d007      	beq.n	80030a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	619a      	str	r2, [r3, #24]
  }
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c4:	e03b      	b.n	800313e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f8d6 	bl	800327c <I2C_IsErrorOccurred>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e041      	b.n	800315e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030e0:	d02d      	beq.n	800313e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7ff f869 	bl	80021b8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d122      	bne.n	800313e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4013      	ands	r3, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	429a      	cmp	r2, r3
 8003114:	d113      	bne.n	800313e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e00f      	b.n	800315e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4013      	ands	r3, r2
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	bf0c      	ite	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	2300      	movne	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	429a      	cmp	r2, r3
 800315a:	d0b4      	beq.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003172:	e033      	b.n	80031dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f87f 	bl	800327c <I2C_IsErrorOccurred>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e031      	b.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318e:	d025      	beq.n	80031dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003190:	f7ff f812 	bl	80021b8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d11a      	bne.n	80031dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d013      	beq.n	80031dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e007      	b.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d1c4      	bne.n	8003174 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003200:	e02f      	b.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f838 	bl	800327c <I2C_IsErrorOccurred>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e02d      	b.n	8003272 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fe ffcf 	bl	80021b8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11a      	bne.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b20      	cmp	r3, #32
 8003238:	d013      	beq.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f043 0220 	orr.w	r2, r3, #32
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e007      	b.n	8003272 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b20      	cmp	r3, #32
 800326e:	d1c8      	bne.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d068      	beq.n	800337a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2210      	movs	r2, #16
 80032ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032b0:	e049      	b.n	8003346 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032b8:	d045      	beq.n	8003346 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7fe ff7d 	bl	80021b8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <I2C_IsErrorOccurred+0x54>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d13a      	bne.n	8003346 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f2:	d121      	bne.n	8003338 <I2C_IsErrorOccurred+0xbc>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fa:	d01d      	beq.n	8003338 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d01a      	beq.n	8003338 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003310:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003312:	f7fe ff51 	bl	80021b8 <HAL_GetTick>
 8003316:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003318:	e00e      	b.n	8003338 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800331a:	f7fe ff4d 	bl	80021b8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b19      	cmp	r3, #25
 8003326:	d907      	bls.n	8003338 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f043 0320 	orr.w	r3, r3, #32
 800332e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003336:	e006      	b.n	8003346 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d1e9      	bne.n	800331a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d003      	beq.n	800335c <I2C_IsErrorOccurred+0xe0>
 8003354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0aa      	beq.n	80032b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800335c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2220      	movs	r2, #32
 800336a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800339c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00b      	beq.n	80033e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01c      	beq.n	800342a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff fe3b 	bl	800306c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <I2C_IsErrorOccurred+0x1bc>)
 8003402:	400b      	ands	r3, r1
 8003404:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800342a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800342e:	4618      	mov	r0, r3
 8003430:	3728      	adds	r7, #40	@ 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	fe00e800 	.word	0xfe00e800

0800343c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	4613      	mov	r3, r2
 800344c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003454:	7a7b      	ldrb	r3, [r7, #9]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800345c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	4313      	orrs	r3, r2
 8003466:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800346a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	0d5b      	lsrs	r3, r3, #21
 8003476:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <I2C_TransferConfig+0x60>)
 800347c:	430b      	orrs	r3, r1
 800347e:	43db      	mvns	r3, r3
 8003480:	ea02 0103 	and.w	r1, r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	03ff63ff 	.word	0x03ff63ff

080034a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d138      	bne.n	8003528 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e032      	b.n	800352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	@ 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d139      	bne.n	80035c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003556:	2302      	movs	r3, #2
 8003558:	e033      	b.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	@ 0x24
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003588:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035d4:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_PWREx_GetVoltageRange+0x3c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e0:	d102      	bne.n	80035e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80035e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035e6:	e00b      	b.n	8003600 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80035e8:	4b08      	ldr	r3, [pc, #32]	@ (800360c <HAL_PWREx_GetVoltageRange+0x3c>)
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f6:	d102      	bne.n	80035fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80035f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035fc:	e000      	b.n	8003600 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80035fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40007000 	.word	0x40007000

08003610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d141      	bne.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800361e:	4b4b      	ldr	r3, [pc, #300]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362a:	d131      	bne.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800362c:	4b47      	ldr	r3, [pc, #284]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003632:	4a46      	ldr	r2, [pc, #280]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003638:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800363c:	4b43      	ldr	r3, [pc, #268]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003644:	4a41      	ldr	r2, [pc, #260]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800364a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800364c:	4b40      	ldr	r3, [pc, #256]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2232      	movs	r2, #50	@ 0x32
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	0c9b      	lsrs	r3, r3, #18
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003662:	e002      	b.n	800366a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3b01      	subs	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366a:	4b38      	ldr	r3, [pc, #224]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003676:	d102      	bne.n	800367e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f2      	bne.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800367e:	4b33      	ldr	r3, [pc, #204]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368a:	d158      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e057      	b.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003690:	4b2e      	ldr	r3, [pc, #184]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003696:	4a2d      	ldr	r2, [pc, #180]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800369c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036a0:	e04d      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a8:	d141      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036aa:	4b28      	ldr	r3, [pc, #160]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b6:	d131      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b8:	4b24      	ldr	r3, [pc, #144]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036be:	4a23      	ldr	r2, [pc, #140]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c8:	4b20      	ldr	r3, [pc, #128]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036d0:	4a1e      	ldr	r2, [pc, #120]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2232      	movs	r2, #50	@ 0x32
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9b      	lsrs	r3, r3, #18
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ee:	e002      	b.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003702:	d102      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f2      	bne.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003716:	d112      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e011      	b.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003722:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800372c:	e007      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800372e:	4b07      	ldr	r3, [pc, #28]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003736:	4a05      	ldr	r2, [pc, #20]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003738:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800373c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40007000 	.word	0x40007000
 8003750:	20000000 	.word	0x20000000
 8003754:	431bde83 	.word	0x431bde83

08003758 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f000 bc08 	b.w	8003f7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376c:	4b96      	ldr	r3, [pc, #600]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003776:	4b94      	ldr	r3, [pc, #592]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80e4 	beq.w	8003956 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4c>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	f040 808b 	bne.w	80038b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	f040 8087 	bne.w	80038b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a4:	4b88      	ldr	r3, [pc, #544]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_OscConfig+0x64>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e3df      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	4b81      	ldr	r3, [pc, #516]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <HAL_RCC_OscConfig+0x7e>
 80037cc:	4b7e      	ldr	r3, [pc, #504]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d4:	e005      	b.n	80037e2 <HAL_RCC_OscConfig+0x8a>
 80037d6:	4b7c      	ldr	r3, [pc, #496]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d223      	bcs.n	800382e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fdcc 	bl	8004388 <RCC_SetFlashLatencyFromMSIRange>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e3c0      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fa:	4b73      	ldr	r3, [pc, #460]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a72      	ldr	r2, [pc, #456]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b70      	ldr	r3, [pc, #448]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	496d      	ldr	r1, [pc, #436]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003818:	4b6b      	ldr	r3, [pc, #428]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	4968      	ldr	r1, [pc, #416]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e025      	b.n	800387a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382e:	4b66      	ldr	r3, [pc, #408]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a65      	ldr	r2, [pc, #404]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b63      	ldr	r3, [pc, #396]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4960      	ldr	r1, [pc, #384]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384c:	4b5e      	ldr	r3, [pc, #376]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	495b      	ldr	r1, [pc, #364]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fd8c 	bl	8004388 <RCC_SetFlashLatencyFromMSIRange>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e380      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800387a:	f000 fcc1 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b51      	ldr	r3, [pc, #324]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	4950      	ldr	r1, [pc, #320]	@ (80039cc <HAL_RCC_OscConfig+0x274>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	4a4e      	ldr	r2, [pc, #312]	@ (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003898:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800389a:	4b4e      	ldr	r3, [pc, #312]	@ (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fc3a 	bl	8002118 <HAL_InitTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d052      	beq.n	8003954 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	e364      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d032      	beq.n	8003920 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ba:	4b43      	ldr	r3, [pc, #268]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a42      	ldr	r2, [pc, #264]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038c6:	f7fe fc77 	bl	80021b8 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ce:	f7fe fc73 	bl	80021b8 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e34d      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e0:	4b39      	ldr	r3, [pc, #228]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ec:	4b36      	ldr	r3, [pc, #216]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a35      	ldr	r2, [pc, #212]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b33      	ldr	r3, [pc, #204]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4930      	ldr	r1, [pc, #192]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390a:	4b2f      	ldr	r3, [pc, #188]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	492b      	ldr	r1, [pc, #172]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e01a      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003920:	4b29      	ldr	r3, [pc, #164]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800392c:	f7fe fc44 	bl	80021b8 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003934:	f7fe fc40 	bl	80021b8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e31a      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003946:	4b20      	ldr	r3, [pc, #128]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1dc>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d073      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x21c>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d10e      	bne.n	800398c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b14      	ldr	r3, [pc, #80]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d063      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2f0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d15f      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e2f7      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x24c>
 8003996:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a0b      	ldr	r2, [pc, #44]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e025      	b.n	80039f0 <HAL_RCC_OscConfig+0x298>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ac:	d114      	bne.n	80039d8 <HAL_RCC_OscConfig+0x280>
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a05      	ldr	r2, [pc, #20]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a02      	ldr	r2, [pc, #8]	@ (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e013      	b.n	80039f0 <HAL_RCC_OscConfig+0x298>
 80039c8:	40021000 	.word	0x40021000
 80039cc:	080066d4 	.word	0x080066d4
 80039d0:	20000000 	.word	0x20000000
 80039d4:	200000ac 	.word	0x200000ac
 80039d8:	4ba0      	ldr	r3, [pc, #640]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a9f      	ldr	r2, [pc, #636]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b9d      	ldr	r3, [pc, #628]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a9c      	ldr	r2, [pc, #624]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d013      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fbde 	bl	80021b8 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe fbda 	bl	80021b8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	@ 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e2b4      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a12:	4b92      	ldr	r3, [pc, #584]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2a8>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fbca 	bl	80021b8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fbc6 	bl	80021b8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	@ 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e2a0      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a3a:	4b88      	ldr	r3, [pc, #544]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x2d0>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d060      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_OscConfig+0x310>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d116      	bne.n	8003a96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a68:	4b7c      	ldr	r3, [pc, #496]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_OscConfig+0x328>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e27d      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	4973      	ldr	r1, [pc, #460]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a94:	e040      	b.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d023      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fb85 	bl	80021b8 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fe fb81 	bl	80021b8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e25b      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac4:	4b65      	ldr	r3, [pc, #404]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	4b62      	ldr	r3, [pc, #392]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	495f      	ldr	r1, [pc, #380]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
 8003ae4:	e018      	b.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5c      	ldr	r2, [pc, #368]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fe fb61 	bl	80021b8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fe fb5d 	bl	80021b8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e237      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0c:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d03c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b32:	4a4a      	ldr	r2, [pc, #296]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe fb3c 	bl	80021b8 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fe fb38 	bl	80021b8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e212      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b56:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3ec>
 8003b64:	e01b      	b.n	8003b9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b66:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fe fb1f 	bl	80021b8 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7e:	f7fe fb1b 	bl	80021b8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e1f5      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b90:	4b32      	ldr	r3, [pc, #200]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ef      	bne.n	8003b7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80a6 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	4a26      	ldr	r2, [pc, #152]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc8:	4b24      	ldr	r3, [pc, #144]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b21      	ldr	r3, [pc, #132]	@ (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d118      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fae2 	bl	80021b8 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fe fade 	bl	80021b8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1b8      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0a:	4b15      	ldr	r3, [pc, #84]	@ (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <HAL_RCC_OscConfig+0x4d8>
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c24:	4a0d      	ldr	r2, [pc, #52]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c2e:	e029      	b.n	8003c84 <HAL_RCC_OscConfig+0x52c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d115      	bne.n	8003c64 <HAL_RCC_OscConfig+0x50c>
 8003c38:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	4a07      	ldr	r2, [pc, #28]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c48:	4b04      	ldr	r3, [pc, #16]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	4a03      	ldr	r2, [pc, #12]	@ (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c58:	e014      	b.n	8003c84 <HAL_RCC_OscConfig+0x52c>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	4b9d      	ldr	r3, [pc, #628]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	4a9c      	ldr	r2, [pc, #624]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c74:	4b99      	ldr	r3, [pc, #612]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	4a98      	ldr	r2, [pc, #608]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d016      	beq.n	8003cba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fa94 	bl	80021b8 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fe fa90 	bl	80021b8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e168      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003caa:	4b8c      	ldr	r3, [pc, #560]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ed      	beq.n	8003c94 <HAL_RCC_OscConfig+0x53c>
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fe fa7d 	bl	80021b8 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fe fa79 	bl	80021b8 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e151      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd8:	4b80      	ldr	r3, [pc, #512]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ed      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce6:	7ffb      	ldrb	r3, [r7, #31]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4b7b      	ldr	r3, [pc, #492]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	4a7a      	ldr	r2, [pc, #488]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d03c      	beq.n	8003d7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0c:	4b73      	ldr	r3, [pc, #460]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d12:	4a72      	ldr	r2, [pc, #456]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fe fa4c 	bl	80021b8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d24:	f7fe fa48 	bl	80021b8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e122      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d36:	4b69      	ldr	r3, [pc, #420]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <HAL_RCC_OscConfig+0x5cc>
 8003d44:	e01b      	b.n	8003d7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d46:	4b65      	ldr	r3, [pc, #404]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d4c:	4a63      	ldr	r2, [pc, #396]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d56:	f7fe fa2f 	bl	80021b8 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5e:	f7fe fa2b 	bl	80021b8 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e105      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d70:	4b5a      	ldr	r3, [pc, #360]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ef      	bne.n	8003d5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80f9 	beq.w	8003f7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f040 80cf 	bne.w	8003f30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d92:	4b52      	ldr	r3, [pc, #328]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0203 	and.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d12c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	3b01      	subs	r3, #1
 8003db2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d123      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d11b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d113      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d109      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d071      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d068      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e06:	4b35      	ldr	r3, [pc, #212]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e12:	4b32      	ldr	r3, [pc, #200]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0ac      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e22:	4b2e      	ldr	r3, [pc, #184]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2d      	ldr	r2, [pc, #180]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e2e:	f7fe f9c3 	bl	80021b8 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe f9bf 	bl	80021b8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e099      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e48:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e54:	4b21      	ldr	r3, [pc, #132]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <HAL_RCC_OscConfig+0x788>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e6e:	0212      	lsls	r2, r2, #8
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e76:	0852      	lsrs	r2, r2, #1
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0552      	lsls	r2, r2, #21
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e82:	0852      	lsrs	r2, r2, #1
 8003e84:	3a01      	subs	r2, #1
 8003e86:	0652      	lsls	r2, r2, #25
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e8e:	06d2      	lsls	r2, r2, #27
 8003e90:	430a      	orrs	r2, r1
 8003e92:	4912      	ldr	r1, [pc, #72]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e98:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eb0:	f7fe f982 	bl	80021b8 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe f97e 	bl	80021b8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e058      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <HAL_RCC_OscConfig+0x784>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ed6:	e050      	b.n	8003f7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e04f      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee4:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d144      	bne.n	8003f7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f08:	f7fe f956 	bl	80021b8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fe f952 	bl	80021b8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e02c      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	4b18      	ldr	r3, [pc, #96]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x7b8>
 8003f2e:	e024      	b.n	8003f7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d01f      	beq.n	8003f76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003f3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fe f939 	bl	80021b8 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fe f935 	bl	80021b8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e00f      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	4905      	ldr	r1, [pc, #20]	@ (8003f84 <HAL_RCC_OscConfig+0x82c>)
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_RCC_OscConfig+0x830>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
 8003f74:	e001      	b.n	8003f7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	feeefffc 	.word	0xfeeefffc

08003f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e11d      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b90      	ldr	r3, [pc, #576]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 020f 	bic.w	r2, r3, #15
 8003fba:	498b      	ldr	r1, [pc, #556]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b89      	ldr	r3, [pc, #548]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e105      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d010      	beq.n	8004002 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b81      	ldr	r3, [pc, #516]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d908      	bls.n	8004002 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	497b      	ldr	r1, [pc, #492]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d079      	beq.n	8004102 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d11e      	bne.n	8004054 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b75      	ldr	r3, [pc, #468]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0dc      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004026:	f000 fa09 	bl	800443c <RCC_GetSysClockFreqFromPLLSource>
 800402a:	4603      	mov	r3, r0
 800402c:	4a70      	ldr	r2, [pc, #448]	@ (80041f0 <HAL_RCC_ClockConfig+0x264>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d946      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004032:	4b6e      	ldr	r3, [pc, #440]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d140      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800403e:	4b6b      	ldr	r3, [pc, #428]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004046:	4a69      	ldr	r2, [pc, #420]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800404c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e035      	b.n	80040c0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d107      	bne.n	800406c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405c:	4b63      	ldr	r3, [pc, #396]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b9      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d107      	bne.n	8004084 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004074:	4b5d      	ldr	r3, [pc, #372]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0ad      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004084:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0a5      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004094:	f000 f8b4 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 8004098:	4603      	mov	r3, r0
 800409a:	4a55      	ldr	r2, [pc, #340]	@ (80041f0 <HAL_RCC_ClockConfig+0x264>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d90f      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80040a0:	4b52      	ldr	r3, [pc, #328]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ac:	4b4f      	ldr	r3, [pc, #316]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040b4:	4a4d      	ldr	r2, [pc, #308]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040c0:	4b4a      	ldr	r3, [pc, #296]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f023 0203 	bic.w	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4947      	ldr	r1, [pc, #284]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d2:	f7fe f871 	bl	80021b8 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040da:	f7fe f86d 	bl	80021b8 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e077      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f0:	4b3e      	ldr	r3, [pc, #248]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 020c 	and.w	r2, r3, #12
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	429a      	cmp	r2, r3
 8004100:	d1eb      	bne.n	80040da <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b80      	cmp	r3, #128	@ 0x80
 8004106:	d105      	bne.n	8004114 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004108:	4b38      	ldr	r3, [pc, #224]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a37      	ldr	r2, [pc, #220]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 800410e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004112:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	4b31      	ldr	r3, [pc, #196]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800412c:	429a      	cmp	r2, r3
 800412e:	d208      	bcs.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b2e      	ldr	r3, [pc, #184]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	492b      	ldr	r1, [pc, #172]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004142:	4b29      	ldr	r3, [pc, #164]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d210      	bcs.n	8004172 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004150:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 020f 	bic.w	r2, r3, #15
 8004158:	4923      	ldr	r1, [pc, #140]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004160:	4b21      	ldr	r3, [pc, #132]	@ (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e036      	b.n	80041e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4918      	ldr	r1, [pc, #96]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419c:	4b13      	ldr	r3, [pc, #76]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4910      	ldr	r1, [pc, #64]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041b0:	f000 f826 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <HAL_RCC_ClockConfig+0x260>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	490c      	ldr	r1, [pc, #48]	@ (80041f4 <HAL_RCC_ClockConfig+0x268>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
 80041cc:	4a0a      	ldr	r2, [pc, #40]	@ (80041f8 <HAL_RCC_ClockConfig+0x26c>)
 80041ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <HAL_RCC_ClockConfig+0x270>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fd ff9f 	bl	8002118 <HAL_InitTick>
 80041da:	4603      	mov	r3, r0
 80041dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40022000 	.word	0x40022000
 80041ec:	40021000 	.word	0x40021000
 80041f0:	04c4b400 	.word	0x04c4b400
 80041f4:	080066d4 	.word	0x080066d4
 80041f8:	20000000 	.word	0x20000000
 80041fc:	200000ac 	.word	0x200000ac

08004200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	@ 0x24
 8004204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420e:	4b3e      	ldr	r3, [pc, #248]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004218:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x34>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d121      	bne.n	8004272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d11e      	bne.n	8004272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004234:	4b34      	ldr	r3, [pc, #208]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d107      	bne.n	8004250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e005      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004250:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800425c:	4a2b      	ldr	r2, [pc, #172]	@ (800430c <HAL_RCC_GetSysClockFreq+0x10c>)
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d102      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004278:	4b25      	ldr	r3, [pc, #148]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x110>)
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	e004      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d101      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004284:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x114>)
 8004286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d134      	bne.n	80042f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800428e:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d003      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0xac>
 80042a4:	e005      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x110>)
 80042a8:	617b      	str	r3, [r7, #20]
      break;
 80042aa:	e005      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042ac:	4b19      	ldr	r3, [pc, #100]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ae:	617b      	str	r3, [r7, #20]
      break;
 80042b0:	e002      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	617b      	str	r3, [r7, #20]
      break;
 80042b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3301      	adds	r3, #1
 80042c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	fb03 f202 	mul.w	r2, r3, r2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042de:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	0e5b      	lsrs	r3, r3, #25
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	3301      	adds	r3, #1
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042f8:	69bb      	ldr	r3, [r7, #24]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	@ 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	080066ec 	.word	0x080066ec
 8004310:	00f42400 	.word	0x00f42400
 8004314:	007a1200 	.word	0x007a1200

08004318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800431c:	4b03      	ldr	r3, [pc, #12]	@ (800432c <HAL_RCC_GetHCLKFreq+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000000 	.word	0x20000000

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004334:	f7ff fff0 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4904      	ldr	r1, [pc, #16]	@ (8004358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	080066e4 	.word	0x080066e4

0800435c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004360:	f7ff ffda 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0adb      	lsrs	r3, r3, #11
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4904      	ldr	r1, [pc, #16]	@ (8004384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	080066e4 	.word	0x080066e4

08004388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004394:	4b27      	ldr	r3, [pc, #156]	@ (8004434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043a0:	f7ff f916 	bl	80035d0 <HAL_PWREx_GetVoltageRange>
 80043a4:	6178      	str	r0, [r7, #20]
 80043a6:	e014      	b.n	80043d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a8:	4b22      	ldr	r3, [pc, #136]	@ (8004434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043c0:	f7ff f906 	bl	80035d0 <HAL_PWREx_GetVoltageRange>
 80043c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d8:	d10b      	bne.n	80043f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b80      	cmp	r3, #128	@ 0x80
 80043de:	d913      	bls.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80043e4:	d902      	bls.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043e6:	2302      	movs	r3, #2
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e00d      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043ec:	2301      	movs	r3, #1
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e00a      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80043f6:	d902      	bls.n	80043fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80043f8:	2302      	movs	r3, #2
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e004      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b70      	cmp	r3, #112	@ 0x70
 8004402:	d101      	bne.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004404:	2301      	movs	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 020f 	bic.w	r2, r3, #15
 8004410:	4909      	ldr	r1, [pc, #36]	@ (8004438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004418:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	429a      	cmp	r2, r3
 8004424:	d001      	beq.n	800442a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	40022000 	.word	0x40022000

0800443c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004442:	4b2d      	ldr	r3, [pc, #180]	@ (80044f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d00b      	beq.n	800446a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d825      	bhi.n	80044a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d008      	beq.n	8004470 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11f      	bne.n	80044a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004464:	4b25      	ldr	r3, [pc, #148]	@ (80044fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004466:	613b      	str	r3, [r7, #16]
    break;
 8004468:	e01f      	b.n	80044aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800446a:	4b25      	ldr	r3, [pc, #148]	@ (8004500 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800446c:	613b      	str	r3, [r7, #16]
    break;
 800446e:	e01c      	b.n	80044aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004470:	4b21      	ldr	r3, [pc, #132]	@ (80044f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800447c:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e005      	b.n	8004498 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800448c:	4b1a      	ldr	r3, [pc, #104]	@ (80044f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004498:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a0:	613b      	str	r3, [r7, #16]
    break;
 80044a2:	e002      	b.n	80044aa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
    break;
 80044a8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044aa:	4b13      	ldr	r3, [pc, #76]	@ (80044f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	3301      	adds	r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044b8:	4b0f      	ldr	r3, [pc, #60]	@ (80044f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	fb03 f202 	mul.w	r2, r3, r2
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044d0:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0e5b      	lsrs	r3, r3, #25
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	3301      	adds	r3, #1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80044ea:	683b      	ldr	r3, [r7, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40021000 	.word	0x40021000
 80044fc:	00f42400 	.word	0x00f42400
 8004500:	007a1200 	.word	0x007a1200
 8004504:	080066ec 	.word	0x080066ec

08004508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004510:	2300      	movs	r3, #0
 8004512:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004514:	2300      	movs	r3, #0
 8004516:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004520:	2b00      	cmp	r3, #0
 8004522:	d040      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004528:	2b80      	cmp	r3, #128	@ 0x80
 800452a:	d02a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800452c:	2b80      	cmp	r3, #128	@ 0x80
 800452e:	d825      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004530:	2b60      	cmp	r3, #96	@ 0x60
 8004532:	d026      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004534:	2b60      	cmp	r3, #96	@ 0x60
 8004536:	d821      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004538:	2b40      	cmp	r3, #64	@ 0x40
 800453a:	d006      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800453c:	2b40      	cmp	r3, #64	@ 0x40
 800453e:	d81d      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d010      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004548:	e018      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800454a:	4b89      	ldr	r3, [pc, #548]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4a88      	ldr	r2, [pc, #544]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004556:	e015      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fb02 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004568:	e00c      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3320      	adds	r3, #32
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fbed 	bl	8004d50 <RCCEx_PLLSAI2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800457a:	e003      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	74fb      	strb	r3, [r7, #19]
      break;
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800458a:	4b79      	ldr	r3, [pc, #484]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800458c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004590:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004598:	4975      	ldr	r1, [pc, #468]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80045a0:	e001      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d047      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ba:	d030      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c0:	d82a      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c6:	d02a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80045c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045cc:	d824      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d2:	d008      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80045d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d8:	d81e      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80045de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e2:	d010      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045e4:	e018      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045e6:	4b62      	ldr	r3, [pc, #392]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4a61      	ldr	r2, [pc, #388]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f2:	e015      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fab4 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004604:	e00c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3320      	adds	r3, #32
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fb9f 	bl	8004d50 <RCCEx_PLLSAI2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004616:	e003      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	74fb      	strb	r3, [r7, #19]
      break;
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800461e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004626:	4b52      	ldr	r3, [pc, #328]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004628:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800462c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	494e      	ldr	r1, [pc, #312]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800463c:	e001      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 809f 	beq.w	800478e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004650:	2300      	movs	r3, #0
 8004652:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004654:	4b46      	ldr	r3, [pc, #280]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004664:	2300      	movs	r3, #0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466e:	4a40      	ldr	r2, [pc, #256]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004674:	6593      	str	r3, [r2, #88]	@ 0x58
 8004676:	4b3e      	ldr	r3, [pc, #248]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004686:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3a      	ldr	r2, [pc, #232]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004692:	f7fd fd91 	bl	80021b8 <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004698:	e009      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fd fd8d 	bl	80021b8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d902      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	74fb      	strb	r3, [r7, #19]
        break;
 80046ac:	e005      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ae:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0ef      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d15b      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01f      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d019      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046de:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ea:	4b21      	ldr	r3, [pc, #132]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004700:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004706:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800470a:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d016      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fd fd4c 	bl	80021b8 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004722:	e00b      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fd fd48 	bl	80021b8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d902      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	74fb      	strb	r3, [r7, #19]
            break;
 800473a:	e006      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ec      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10c      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004750:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004756:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	4903      	ldr	r1, [pc, #12]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004768:	e008      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	74bb      	strb	r3, [r7, #18]
 800476e:	e005      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477c:	7c7b      	ldrb	r3, [r7, #17]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004782:	4ba0      	ldr	r3, [pc, #640]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	4a9f      	ldr	r2, [pc, #636]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800478c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479a:	4b9a      	ldr	r3, [pc, #616]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	4996      	ldr	r1, [pc, #600]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047bc:	4b91      	ldr	r3, [pc, #580]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c2:	f023 020c 	bic.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	498e      	ldr	r1, [pc, #568]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047de:	4b89      	ldr	r3, [pc, #548]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ec:	4985      	ldr	r1, [pc, #532]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004800:	4b80      	ldr	r3, [pc, #512]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480e:	497d      	ldr	r1, [pc, #500]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004822:	4b78      	ldr	r3, [pc, #480]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004830:	4974      	ldr	r1, [pc, #464]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004844:	4b6f      	ldr	r3, [pc, #444]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004852:	496c      	ldr	r1, [pc, #432]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004866:	4b67      	ldr	r3, [pc, #412]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004874:	4963      	ldr	r1, [pc, #396]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004888:	4b5e      	ldr	r3, [pc, #376]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004896:	495b      	ldr	r1, [pc, #364]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048aa:	4b56      	ldr	r3, [pc, #344]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	4952      	ldr	r1, [pc, #328]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	494a      	ldr	r1, [pc, #296]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ee:	4b45      	ldr	r3, [pc, #276]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fc:	4941      	ldr	r1, [pc, #260]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004910:	4b3c      	ldr	r3, [pc, #240]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491e:	4939      	ldr	r1, [pc, #228]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d028      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004932:	4b34      	ldr	r3, [pc, #208]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004938:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004940:	4930      	ldr	r1, [pc, #192]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800494c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004950:	d106      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004952:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a2b      	ldr	r2, [pc, #172]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004958:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800495c:	60d3      	str	r3, [r2, #12]
 800495e:	e011      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004968:	d10c      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	2101      	movs	r1, #1
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f8f9 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800497a:	7cfb      	ldrb	r3, [r7, #19]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004980:	7cfb      	ldrb	r3, [r7, #19]
 8004982:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d04d      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004998:	d108      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800499a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800499c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80049aa:	e012      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049ac:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049b2:	4a14      	ldr	r2, [pc, #80]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80049bc:	4b11      	ldr	r3, [pc, #68]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ca:	490e      	ldr	r1, [pc, #56]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049da:	d106      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049dc:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4a08      	ldr	r2, [pc, #32]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e6:	60d3      	str	r3, [r2, #12]
 80049e8:	e020      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049f2:	d109      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049f4:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a02      	ldr	r2, [pc, #8]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049fe:	60d3      	str	r3, [r2, #12]
 8004a00:	e014      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2101      	movs	r1, #1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f8a5 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d028      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a38:	4b4a      	ldr	r3, [pc, #296]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a46:	4947      	ldr	r1, [pc, #284]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a56:	d106      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a58:	4b42      	ldr	r3, [pc, #264]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4a41      	ldr	r2, [pc, #260]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a62:	60d3      	str	r3, [r2, #12]
 8004a64:	e011      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a6e:	d10c      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f876 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01e      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a96:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aa6:	492f      	ldr	r1, [pc, #188]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2102      	movs	r1, #2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f851 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae0:	4b20      	ldr	r3, [pc, #128]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ae6:	f023 0204 	bic.w	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af0:	491c      	ldr	r1, [pc, #112]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b04:	4b17      	ldr	r3, [pc, #92]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b0a:	f023 0218 	bic.w	r2, r3, #24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	4913      	ldr	r1, [pc, #76]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d017      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b28:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b38:	490a      	ldr	r1, [pc, #40]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4a04      	ldr	r2, [pc, #16]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b58:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000

08004b68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b76:	4b72      	ldr	r3, [pc, #456]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00e      	beq.n	8004ba0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b82:	4b6f      	ldr	r3, [pc, #444]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0203 	and.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d103      	bne.n	8004b9a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
       ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d142      	bne.n	8004c20 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
 8004b9e:	e03f      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d018      	beq.n	8004bda <RCCEx_PLLSAI1_Config+0x72>
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d825      	bhi.n	8004bf8 <RCCEx_PLLSAI1_Config+0x90>
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d002      	beq.n	8004bb6 <RCCEx_PLLSAI1_Config+0x4e>
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d009      	beq.n	8004bc8 <RCCEx_PLLSAI1_Config+0x60>
 8004bb4:	e020      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bb6:	4b62      	ldr	r3, [pc, #392]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d11d      	bne.n	8004bfe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc6:	e01a      	b.n	8004bfe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d116      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd8:	e013      	b.n	8004c02 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bda:	4b59      	ldr	r3, [pc, #356]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10f      	bne.n	8004c06 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004be6:	4b56      	ldr	r3, [pc, #344]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bf6:	e006      	b.n	8004c06 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfc:	e004      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4949      	ldr	r1, [pc, #292]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 8086 	bne.w	8004d34 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c28:	4b45      	ldr	r3, [pc, #276]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a44      	ldr	r2, [pc, #272]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fd fac0 	bl	80021b8 <HAL_GetTick>
 8004c38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c3a:	e009      	b.n	8004c50 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c3c:	f7fd fabc 	bl	80021b8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d902      	bls.n	8004c50 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c4e:	e005      	b.n	8004c5c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c50:	4b3b      	ldr	r3, [pc, #236]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ef      	bne.n	8004c3c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d168      	bne.n	8004d34 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d113      	bne.n	8004c90 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c68:	4b35      	ldr	r3, [pc, #212]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	4b35      	ldr	r3, [pc, #212]	@ (8004d44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6892      	ldr	r2, [r2, #8]
 8004c74:	0211      	lsls	r1, r2, #8
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	68d2      	ldr	r2, [r2, #12]
 8004c7a:	06d2      	lsls	r2, r2, #27
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6852      	ldr	r2, [r2, #4]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0112      	lsls	r2, r2, #4
 8004c86:	430a      	orrs	r2, r1
 8004c88:	492d      	ldr	r1, [pc, #180]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	610b      	str	r3, [r1, #16]
 8004c8e:	e02d      	b.n	8004cec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d115      	bne.n	8004cc2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c96:	4b2a      	ldr	r3, [pc, #168]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6892      	ldr	r2, [r2, #8]
 8004ca2:	0211      	lsls	r1, r2, #8
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6912      	ldr	r2, [r2, #16]
 8004ca8:	0852      	lsrs	r2, r2, #1
 8004caa:	3a01      	subs	r2, #1
 8004cac:	0552      	lsls	r2, r2, #21
 8004cae:	4311      	orrs	r1, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	0112      	lsls	r2, r2, #4
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	4921      	ldr	r1, [pc, #132]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	610b      	str	r3, [r1, #16]
 8004cc0:	e014      	b.n	8004cec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	4b21      	ldr	r3, [pc, #132]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	0211      	lsls	r1, r2, #8
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6952      	ldr	r2, [r2, #20]
 8004cd4:	0852      	lsrs	r2, r2, #1
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	0652      	lsls	r2, r2, #25
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6852      	ldr	r2, [r2, #4]
 8004ce0:	3a01      	subs	r2, #1
 8004ce2:	0112      	lsls	r2, r2, #4
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	4916      	ldr	r1, [pc, #88]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd fa5e 	bl	80021b8 <HAL_GetTick>
 8004cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cfe:	e009      	b.n	8004d14 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d00:	f7fd fa5a 	bl	80021b8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d902      	bls.n	8004d14 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	73fb      	strb	r3, [r7, #15]
          break;
 8004d12:	e005      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d14:	4b0a      	ldr	r3, [pc, #40]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ef      	beq.n	8004d00 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	4904      	ldr	r1, [pc, #16]	@ (8004d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	07ff800f 	.word	0x07ff800f
 8004d48:	ff9f800f 	.word	0xff9f800f
 8004d4c:	f9ff800f 	.word	0xf9ff800f

08004d50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d5e:	4b72      	ldr	r3, [pc, #456]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00e      	beq.n	8004d88 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0203 	and.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d103      	bne.n	8004d82 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d142      	bne.n	8004e08 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	e03f      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d018      	beq.n	8004dc2 <RCCEx_PLLSAI2_Config+0x72>
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d825      	bhi.n	8004de0 <RCCEx_PLLSAI2_Config+0x90>
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d002      	beq.n	8004d9e <RCCEx_PLLSAI2_Config+0x4e>
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d009      	beq.n	8004db0 <RCCEx_PLLSAI2_Config+0x60>
 8004d9c:	e020      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d9e:	4b62      	ldr	r3, [pc, #392]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d11d      	bne.n	8004de6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dae:	e01a      	b.n	8004de6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004db0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d116      	bne.n	8004dea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc0:	e013      	b.n	8004dea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dc2:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dce:	4b56      	ldr	r3, [pc, #344]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dde:	e006      	b.n	8004dee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
      break;
 8004de4:	e004      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004de6:	bf00      	nop
 8004de8:	e002      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004df6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f023 0203 	bic.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4949      	ldr	r1, [pc, #292]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 8086 	bne.w	8004f1c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e10:	4b45      	ldr	r3, [pc, #276]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a44      	ldr	r2, [pc, #272]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1c:	f7fd f9cc 	bl	80021b8 <HAL_GetTick>
 8004e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e22:	e009      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e24:	f7fd f9c8 	bl	80021b8 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d902      	bls.n	8004e38 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	73fb      	strb	r3, [r7, #15]
        break;
 8004e36:	e005      	b.n	8004e44 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e38:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ef      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d168      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d113      	bne.n	8004e78 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e50:	4b35      	ldr	r3, [pc, #212]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	4b35      	ldr	r3, [pc, #212]	@ (8004f2c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	0211      	lsls	r1, r2, #8
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	06d2      	lsls	r2, r2, #27
 8004e64:	4311      	orrs	r1, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6852      	ldr	r2, [r2, #4]
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	492d      	ldr	r1, [pc, #180]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	614b      	str	r3, [r1, #20]
 8004e76:	e02d      	b.n	8004ed4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d115      	bne.n	8004eaa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	4b2b      	ldr	r3, [pc, #172]	@ (8004f30 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	0211      	lsls	r1, r2, #8
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6912      	ldr	r2, [r2, #16]
 8004e90:	0852      	lsrs	r2, r2, #1
 8004e92:	3a01      	subs	r2, #1
 8004e94:	0552      	lsls	r2, r2, #21
 8004e96:	4311      	orrs	r1, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6852      	ldr	r2, [r2, #4]
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	4921      	ldr	r1, [pc, #132]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	614b      	str	r3, [r1, #20]
 8004ea8:	e014      	b.n	8004ed4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	4b21      	ldr	r3, [pc, #132]	@ (8004f34 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6892      	ldr	r2, [r2, #8]
 8004eb6:	0211      	lsls	r1, r2, #8
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6952      	ldr	r2, [r2, #20]
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0652      	lsls	r2, r2, #25
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6852      	ldr	r2, [r2, #4]
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0112      	lsls	r2, r2, #4
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4916      	ldr	r1, [pc, #88]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ed4:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd f96a 	bl	80021b8 <HAL_GetTick>
 8004ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee6:	e009      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ee8:	f7fd f966 	bl	80021b8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d902      	bls.n	8004efc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8004efa:	e005      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004efc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ef      	beq.n	8004ee8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	4904      	ldr	r1, [pc, #16]	@ (8004f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	07ff800f 	.word	0x07ff800f
 8004f30:	ff9f800f 	.word	0xff9f800f
 8004f34:	f9ff800f 	.word	0xf9ff800f

08004f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e042      	b.n	8004fd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fc fbbd 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2224      	movs	r2, #36	@ 0x24
 8004f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fbb2 	bl	80056ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8b3 	bl	80050f4 <UART_SetConfig>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e01b      	b.n	8004fd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fc31 	bl	8005830 <UART_CheckIdleState>
 8004fce:	4603      	mov	r3, r0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	@ 0x28
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d17b      	bne.n	80050ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_UART_Transmit+0x26>
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e074      	b.n	80050ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2221      	movs	r2, #33	@ 0x21
 800500e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005012:	f7fd f8d1 	bl	80021b8 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005030:	d108      	bne.n	8005044 <HAL_UART_Transmit+0x6c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e003      	b.n	800504c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800504c:	e030      	b.n	80050b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	2180      	movs	r1, #128	@ 0x80
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fc93 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e03d      	b.n	80050ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005082:	b292      	uxth	r2, r2
 8005084:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3302      	adds	r3, #2
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e007      	b.n	800509e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1c8      	bne.n	800504e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2140      	movs	r1, #64	@ 0x40
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fc5c 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e006      	b.n	80050ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f8:	b08c      	sub	sp, #48	@ 0x30
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	431a      	orrs	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	431a      	orrs	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4313      	orrs	r3, r2
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4baa      	ldr	r3, [pc, #680]	@ (80053cc <UART_SetConfig+0x2d8>)
 8005124:	4013      	ands	r3, r2
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800512c:	430b      	orrs	r3, r1
 800512e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a9f      	ldr	r2, [pc, #636]	@ (80053d0 <UART_SetConfig+0x2dc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800515c:	4313      	orrs	r3, r2
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800516a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005174:	430b      	orrs	r3, r1
 8005176:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	f023 010f 	bic.w	r1, r3, #15
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a90      	ldr	r2, [pc, #576]	@ (80053d4 <UART_SetConfig+0x2e0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d125      	bne.n	80051e4 <UART_SetConfig+0xf0>
 8005198:	4b8f      	ldr	r3, [pc, #572]	@ (80053d8 <UART_SetConfig+0x2e4>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d81a      	bhi.n	80051dc <UART_SetConfig+0xe8>
 80051a6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <UART_SetConfig+0xb8>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051bd 	.word	0x080051bd
 80051b0:	080051cd 	.word	0x080051cd
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c2:	e116      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80051c4:	2302      	movs	r3, #2
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ca:	e112      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	e10e      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051da:	e10a      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e106      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a7c      	ldr	r2, [pc, #496]	@ (80053dc <UART_SetConfig+0x2e8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d138      	bne.n	8005260 <UART_SetConfig+0x16c>
 80051ee:	4b7a      	ldr	r3, [pc, #488]	@ (80053d8 <UART_SetConfig+0x2e4>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d82d      	bhi.n	8005258 <UART_SetConfig+0x164>
 80051fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005204 <UART_SetConfig+0x110>)
 80051fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005202:	bf00      	nop
 8005204:	08005239 	.word	0x08005239
 8005208:	08005259 	.word	0x08005259
 800520c:	08005259 	.word	0x08005259
 8005210:	08005259 	.word	0x08005259
 8005214:	08005249 	.word	0x08005249
 8005218:	08005259 	.word	0x08005259
 800521c:	08005259 	.word	0x08005259
 8005220:	08005259 	.word	0x08005259
 8005224:	08005241 	.word	0x08005241
 8005228:	08005259 	.word	0x08005259
 800522c:	08005259 	.word	0x08005259
 8005230:	08005259 	.word	0x08005259
 8005234:	08005251 	.word	0x08005251
 8005238:	2300      	movs	r3, #0
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523e:	e0d8      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005240:	2302      	movs	r3, #2
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e0d4      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e0d0      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e0cc      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525e:	e0c8      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5e      	ldr	r2, [pc, #376]	@ (80053e0 <UART_SetConfig+0x2ec>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d125      	bne.n	80052b6 <UART_SetConfig+0x1c2>
 800526a:	4b5b      	ldr	r3, [pc, #364]	@ (80053d8 <UART_SetConfig+0x2e4>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005274:	2b30      	cmp	r3, #48	@ 0x30
 8005276:	d016      	beq.n	80052a6 <UART_SetConfig+0x1b2>
 8005278:	2b30      	cmp	r3, #48	@ 0x30
 800527a:	d818      	bhi.n	80052ae <UART_SetConfig+0x1ba>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d00a      	beq.n	8005296 <UART_SetConfig+0x1a2>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d814      	bhi.n	80052ae <UART_SetConfig+0x1ba>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <UART_SetConfig+0x19a>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d008      	beq.n	800529e <UART_SetConfig+0x1aa>
 800528c:	e00f      	b.n	80052ae <UART_SetConfig+0x1ba>
 800528e:	2300      	movs	r3, #0
 8005290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005294:	e0ad      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005296:	2302      	movs	r3, #2
 8005298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800529c:	e0a9      	b.n	80053f2 <UART_SetConfig+0x2fe>
 800529e:	2304      	movs	r3, #4
 80052a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a4:	e0a5      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80052a6:	2308      	movs	r3, #8
 80052a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ac:	e0a1      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80052ae:	2310      	movs	r3, #16
 80052b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b4:	e09d      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a4a      	ldr	r2, [pc, #296]	@ (80053e4 <UART_SetConfig+0x2f0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d125      	bne.n	800530c <UART_SetConfig+0x218>
 80052c0:	4b45      	ldr	r3, [pc, #276]	@ (80053d8 <UART_SetConfig+0x2e4>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80052cc:	d016      	beq.n	80052fc <UART_SetConfig+0x208>
 80052ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d0:	d818      	bhi.n	8005304 <UART_SetConfig+0x210>
 80052d2:	2b80      	cmp	r3, #128	@ 0x80
 80052d4:	d00a      	beq.n	80052ec <UART_SetConfig+0x1f8>
 80052d6:	2b80      	cmp	r3, #128	@ 0x80
 80052d8:	d814      	bhi.n	8005304 <UART_SetConfig+0x210>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <UART_SetConfig+0x1f0>
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d008      	beq.n	80052f4 <UART_SetConfig+0x200>
 80052e2:	e00f      	b.n	8005304 <UART_SetConfig+0x210>
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ea:	e082      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80052ec:	2302      	movs	r3, #2
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f2:	e07e      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fa:	e07a      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005302:	e076      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530a:	e072      	b.n	80053f2 <UART_SetConfig+0x2fe>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a35      	ldr	r2, [pc, #212]	@ (80053e8 <UART_SetConfig+0x2f4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d12a      	bne.n	800536c <UART_SetConfig+0x278>
 8005316:	4b30      	ldr	r3, [pc, #192]	@ (80053d8 <UART_SetConfig+0x2e4>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005324:	d01a      	beq.n	800535c <UART_SetConfig+0x268>
 8005326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800532a:	d81b      	bhi.n	8005364 <UART_SetConfig+0x270>
 800532c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005330:	d00c      	beq.n	800534c <UART_SetConfig+0x258>
 8005332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005336:	d815      	bhi.n	8005364 <UART_SetConfig+0x270>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <UART_SetConfig+0x250>
 800533c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005340:	d008      	beq.n	8005354 <UART_SetConfig+0x260>
 8005342:	e00f      	b.n	8005364 <UART_SetConfig+0x270>
 8005344:	2300      	movs	r3, #0
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534a:	e052      	b.n	80053f2 <UART_SetConfig+0x2fe>
 800534c:	2302      	movs	r3, #2
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005352:	e04e      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535a:	e04a      	b.n	80053f2 <UART_SetConfig+0x2fe>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005362:	e046      	b.n	80053f2 <UART_SetConfig+0x2fe>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e042      	b.n	80053f2 <UART_SetConfig+0x2fe>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a17      	ldr	r2, [pc, #92]	@ (80053d0 <UART_SetConfig+0x2dc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d13a      	bne.n	80053ec <UART_SetConfig+0x2f8>
 8005376:	4b18      	ldr	r3, [pc, #96]	@ (80053d8 <UART_SetConfig+0x2e4>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005380:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005384:	d01a      	beq.n	80053bc <UART_SetConfig+0x2c8>
 8005386:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800538a:	d81b      	bhi.n	80053c4 <UART_SetConfig+0x2d0>
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005390:	d00c      	beq.n	80053ac <UART_SetConfig+0x2b8>
 8005392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005396:	d815      	bhi.n	80053c4 <UART_SetConfig+0x2d0>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <UART_SetConfig+0x2b0>
 800539c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a0:	d008      	beq.n	80053b4 <UART_SetConfig+0x2c0>
 80053a2:	e00f      	b.n	80053c4 <UART_SetConfig+0x2d0>
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053aa:	e022      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80053ac:	2302      	movs	r3, #2
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b2:	e01e      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ba:	e01a      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c2:	e016      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ca:	e012      	b.n	80053f2 <UART_SetConfig+0x2fe>
 80053cc:	cfff69f3 	.word	0xcfff69f3
 80053d0:	40008000 	.word	0x40008000
 80053d4:	40013800 	.word	0x40013800
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40004400 	.word	0x40004400
 80053e0:	40004800 	.word	0x40004800
 80053e4:	40004c00 	.word	0x40004c00
 80053e8:	40005000 	.word	0x40005000
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4aae      	ldr	r2, [pc, #696]	@ (80056b0 <UART_SetConfig+0x5bc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	f040 8097 	bne.w	800552c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005402:	2b08      	cmp	r3, #8
 8005404:	d823      	bhi.n	800544e <UART_SetConfig+0x35a>
 8005406:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <UART_SetConfig+0x318>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005431 	.word	0x08005431
 8005410:	0800544f 	.word	0x0800544f
 8005414:	08005439 	.word	0x08005439
 8005418:	0800544f 	.word	0x0800544f
 800541c:	0800543f 	.word	0x0800543f
 8005420:	0800544f 	.word	0x0800544f
 8005424:	0800544f 	.word	0x0800544f
 8005428:	0800544f 	.word	0x0800544f
 800542c:	08005447 	.word	0x08005447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005430:	f7fe ff7e 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8005434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005436:	e010      	b.n	800545a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005438:	4b9e      	ldr	r3, [pc, #632]	@ (80056b4 <UART_SetConfig+0x5c0>)
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800543c:	e00d      	b.n	800545a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800543e:	f7fe fedf 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 8005442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005444:	e009      	b.n	800545a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800544c:	e005      	b.n	800545a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005458:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8130 	beq.w	80056c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	4a94      	ldr	r2, [pc, #592]	@ (80056b8 <UART_SetConfig+0x5c4>)
 8005468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800546c:	461a      	mov	r2, r3
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	fbb3 f3f2 	udiv	r3, r3, r2
 8005474:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	429a      	cmp	r2, r3
 8005484:	d305      	bcc.n	8005492 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	429a      	cmp	r2, r3
 8005490:	d903      	bls.n	800549a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005498:	e113      	b.n	80056c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	2200      	movs	r2, #0
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	60fa      	str	r2, [r7, #12]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	4a84      	ldr	r2, [pc, #528]	@ (80056b8 <UART_SetConfig+0x5c4>)
 80054a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2200      	movs	r2, #0
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054bc:	f7fb f8b4 	bl	8000628 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4610      	mov	r0, r2
 80054c6:	4619      	mov	r1, r3
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	020b      	lsls	r3, r1, #8
 80054d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054d6:	0202      	lsls	r2, r0, #8
 80054d8:	6979      	ldr	r1, [r7, #20]
 80054da:	6849      	ldr	r1, [r1, #4]
 80054dc:	0849      	lsrs	r1, r1, #1
 80054de:	2000      	movs	r0, #0
 80054e0:	460c      	mov	r4, r1
 80054e2:	4605      	mov	r5, r0
 80054e4:	eb12 0804 	adds.w	r8, r2, r4
 80054e8:	eb43 0905 	adc.w	r9, r3, r5
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	469a      	mov	sl, r3
 80054f4:	4693      	mov	fp, r2
 80054f6:	4652      	mov	r2, sl
 80054f8:	465b      	mov	r3, fp
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fb f893 	bl	8000628 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4613      	mov	r3, r2
 8005508:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005510:	d308      	bcc.n	8005524 <UART_SetConfig+0x430>
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005518:	d204      	bcs.n	8005524 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a3a      	ldr	r2, [r7, #32]
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	e0ce      	b.n	80056c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800552a:	e0ca      	b.n	80056c2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005534:	d166      	bne.n	8005604 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005536:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800553a:	2b08      	cmp	r3, #8
 800553c:	d827      	bhi.n	800558e <UART_SetConfig+0x49a>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <UART_SetConfig+0x450>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	08005569 	.word	0x08005569
 8005548:	08005571 	.word	0x08005571
 800554c:	08005579 	.word	0x08005579
 8005550:	0800558f 	.word	0x0800558f
 8005554:	0800557f 	.word	0x0800557f
 8005558:	0800558f 	.word	0x0800558f
 800555c:	0800558f 	.word	0x0800558f
 8005560:	0800558f 	.word	0x0800558f
 8005564:	08005587 	.word	0x08005587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005568:	f7fe fee2 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 800556c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800556e:	e014      	b.n	800559a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005570:	f7fe fef4 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8005574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005576:	e010      	b.n	800559a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005578:	4b4e      	ldr	r3, [pc, #312]	@ (80056b4 <UART_SetConfig+0x5c0>)
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800557c:	e00d      	b.n	800559a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800557e:	f7fe fe3f 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 8005582:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005584:	e009      	b.n	800559a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800558a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800558c:	e005      	b.n	800559a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8090 	beq.w	80056c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	4a44      	ldr	r2, [pc, #272]	@ (80056b8 <UART_SetConfig+0x5c4>)
 80055a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ac:	461a      	mov	r2, r3
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b4:	005a      	lsls	r2, r3, #1
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	441a      	add	r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	d916      	bls.n	80055fc <UART_SetConfig+0x508>
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d4:	d212      	bcs.n	80055fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f023 030f 	bic.w	r3, r3, #15
 80055de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	085b      	lsrs	r3, r3, #1
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	8bfb      	ldrh	r3, [r7, #30]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	8bfa      	ldrh	r2, [r7, #30]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	e062      	b.n	80056c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005602:	e05e      	b.n	80056c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005604:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005608:	2b08      	cmp	r3, #8
 800560a:	d828      	bhi.n	800565e <UART_SetConfig+0x56a>
 800560c:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <UART_SetConfig+0x520>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005639 	.word	0x08005639
 8005618:	08005641 	.word	0x08005641
 800561c:	08005649 	.word	0x08005649
 8005620:	0800565f 	.word	0x0800565f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800565f 	.word	0x0800565f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe fe7a 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 800563c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800563e:	e014      	b.n	800566a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7fe fe8c 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8005644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005646:	e010      	b.n	800566a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <UART_SetConfig+0x5c0>)
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800564c:	e00d      	b.n	800566a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fe fdd7 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 8005652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005654:	e009      	b.n	800566a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800565c:	e005      	b.n	800566a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005668:	bf00      	nop
    }

    if (pclk != 0U)
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d028      	beq.n	80056c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	4a10      	ldr	r2, [pc, #64]	@ (80056b8 <UART_SetConfig+0x5c4>)
 8005676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800567a:	461a      	mov	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	441a      	add	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	d910      	bls.n	80056bc <UART_SetConfig+0x5c8>
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a0:	d20c      	bcs.n	80056bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	e009      	b.n	80056c2 <UART_SetConfig+0x5ce>
 80056ae:	bf00      	nop
 80056b0:	40008000 	.word	0x40008000
 80056b4:	00f42400 	.word	0x00f42400
 80056b8:	0800671c 	.word	0x0800671c
      }
      else
      {
        ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2200      	movs	r2, #0
 80056dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3730      	adds	r7, #48	@ 0x30
 80056e6:	46bd      	mov	sp, r7
 80056e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01a      	beq.n	8005802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ea:	d10a      	bne.n	8005802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  }
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b098      	sub	sp, #96	@ 0x60
 8005834:	af02      	add	r7, sp, #8
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005840:	f7fc fcba 	bl	80021b8 <HAL_GetTick>
 8005844:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b08      	cmp	r3, #8
 8005852:	d12f      	bne.n	80058b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005854:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800585c:	2200      	movs	r2, #0
 800585e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f88e 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d022      	beq.n	80058b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005882:	653b      	str	r3, [r7, #80]	@ 0x50
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800588c:	647b      	str	r3, [r7, #68]	@ 0x44
 800588e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800589a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e6      	bne.n	800586e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e063      	b.n	800597c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d149      	bne.n	8005956 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ca:	2200      	movs	r2, #0
 80058cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f857 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03c      	beq.n	8005956 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	623b      	str	r3, [r7, #32]
   return(result);
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80058fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e6      	bne.n	80058dc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	60fb      	str	r3, [r7, #12]
   return(result);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800592e:	61fa      	str	r2, [r7, #28]
 8005930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	69b9      	ldr	r1, [r7, #24]
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	617b      	str	r3, [r7, #20]
   return(result);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e012      	b.n	800597c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3758      	adds	r7, #88	@ 0x58
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005994:	e04f      	b.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800599c:	d04b      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599e:	f7fc fc0b 	bl	80021b8 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e04e      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d037      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b80      	cmp	r3, #128	@ 0x80
 80059ca:	d034      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b40      	cmp	r3, #64	@ 0x40
 80059d0:	d031      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d110      	bne.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2208      	movs	r2, #8
 80059e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f838 	bl	8005a5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2208      	movs	r2, #8
 80059f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e029      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a10:	d111      	bne.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f81e 	bl	8005a5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e00f      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d0a0      	beq.n	8005996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b095      	sub	sp, #84	@ 0x54
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e6      	bne.n	8005a66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e3      	bne.n	8005a98 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d118      	bne.n	8005b0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f023 0310 	bic.w	r3, r3, #16
 8005aec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	613b      	str	r3, [r7, #16]
   return(result);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e6      	bne.n	8005ad8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b1e:	bf00      	nop
 8005b20:	3754      	adds	r7, #84	@ 0x54
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e027      	b.n	8005b90 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	@ 0x24
 8005b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e02d      	b.n	8005c10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	@ 0x24
 8005bc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f84f 	bl	8005c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e02d      	b.n	8005c8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	@ 0x24
 8005c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0201 	bic.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f811 	bl	8005c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d108      	bne.n	8005cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cb4:	e031      	b.n	8005d1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cba:	2308      	movs	r3, #8
 8005cbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	0e5b      	lsrs	r3, r3, #25
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	0f5b      	lsrs	r3, r3, #29
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	7b3a      	ldrb	r2, [r7, #12]
 8005ce2:	4911      	ldr	r1, [pc, #68]	@ (8005d28 <UARTEx_SetNbDataToProcess+0x94>)
 8005ce4:	5c8a      	ldrb	r2, [r1, r2]
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cea:	7b3a      	ldrb	r2, [r7, #12]
 8005cec:	490f      	ldr	r1, [pc, #60]	@ (8005d2c <UARTEx_SetNbDataToProcess+0x98>)
 8005cee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	7b7a      	ldrb	r2, [r7, #13]
 8005d00:	4909      	ldr	r1, [pc, #36]	@ (8005d28 <UARTEx_SetNbDataToProcess+0x94>)
 8005d02:	5c8a      	ldrb	r2, [r1, r2]
 8005d04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d08:	7b7a      	ldrb	r2, [r7, #13]
 8005d0a:	4908      	ldr	r1, [pc, #32]	@ (8005d2c <UARTEx_SetNbDataToProcess+0x98>)
 8005d0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	08006734 	.word	0x08006734
 8005d2c:	0800673c 	.word	0x0800673c

08005d30 <siprintf>:
 8005d30:	b40e      	push	{r1, r2, r3}
 8005d32:	b510      	push	{r4, lr}
 8005d34:	b09d      	sub	sp, #116	@ 0x74
 8005d36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	9006      	str	r0, [sp, #24]
 8005d3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d40:	480a      	ldr	r0, [pc, #40]	@ (8005d6c <siprintf+0x3c>)
 8005d42:	9107      	str	r1, [sp, #28]
 8005d44:	9104      	str	r1, [sp, #16]
 8005d46:	490a      	ldr	r1, [pc, #40]	@ (8005d70 <siprintf+0x40>)
 8005d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d4c:	9105      	str	r1, [sp, #20]
 8005d4e:	2400      	movs	r4, #0
 8005d50:	a902      	add	r1, sp, #8
 8005d52:	6800      	ldr	r0, [r0, #0]
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d58:	f000 f8aa 	bl	8005eb0 <_svfiprintf_r>
 8005d5c:	9b02      	ldr	r3, [sp, #8]
 8005d5e:	701c      	strb	r4, [r3, #0]
 8005d60:	b01d      	add	sp, #116	@ 0x74
 8005d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d66:	b003      	add	sp, #12
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	200000b4 	.word	0x200000b4
 8005d70:	ffff0208 	.word	0xffff0208

08005d74 <memset>:
 8005d74:	4402      	add	r2, r0
 8005d76:	4603      	mov	r3, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <__errno>:
 8005d84:	4b01      	ldr	r3, [pc, #4]	@ (8005d8c <__errno+0x8>)
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	200000b4 	.word	0x200000b4

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4d0d      	ldr	r5, [pc, #52]	@ (8005dc8 <__libc_init_array+0x38>)
 8005d94:	4c0d      	ldr	r4, [pc, #52]	@ (8005dcc <__libc_init_array+0x3c>)
 8005d96:	1b64      	subs	r4, r4, r5
 8005d98:	10a4      	asrs	r4, r4, #2
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	42a6      	cmp	r6, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	4d0b      	ldr	r5, [pc, #44]	@ (8005dd0 <__libc_init_array+0x40>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	@ (8005dd4 <__libc_init_array+0x44>)
 8005da4:	f000 fc64 	bl	8006670 <_init>
 8005da8:	1b64      	subs	r4, r4, r5
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	2600      	movs	r6, #0
 8005dae:	42a6      	cmp	r6, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db8:	4798      	blx	r3
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc2:	4798      	blx	r3
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08006780 	.word	0x08006780
 8005dcc:	08006780 	.word	0x08006780
 8005dd0:	08006780 	.word	0x08006780
 8005dd4:	08006784 	.word	0x08006784

08005dd8 <__retarget_lock_acquire_recursive>:
 8005dd8:	4770      	bx	lr

08005dda <__retarget_lock_release_recursive>:
 8005dda:	4770      	bx	lr

08005ddc <memcpy>:
 8005ddc:	440a      	add	r2, r1
 8005dde:	4291      	cmp	r1, r2
 8005de0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005de4:	d100      	bne.n	8005de8 <memcpy+0xc>
 8005de6:	4770      	bx	lr
 8005de8:	b510      	push	{r4, lr}
 8005dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df2:	4291      	cmp	r1, r2
 8005df4:	d1f9      	bne.n	8005dea <memcpy+0xe>
 8005df6:	bd10      	pop	{r4, pc}

08005df8 <__ssputs_r>:
 8005df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	688e      	ldr	r6, [r1, #8]
 8005dfe:	461f      	mov	r7, r3
 8005e00:	42be      	cmp	r6, r7
 8005e02:	680b      	ldr	r3, [r1, #0]
 8005e04:	4682      	mov	sl, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	4690      	mov	r8, r2
 8005e0a:	d82d      	bhi.n	8005e68 <__ssputs_r+0x70>
 8005e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e14:	d026      	beq.n	8005e64 <__ssputs_r+0x6c>
 8005e16:	6965      	ldr	r5, [r4, #20]
 8005e18:	6909      	ldr	r1, [r1, #16]
 8005e1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e1e:	eba3 0901 	sub.w	r9, r3, r1
 8005e22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e26:	1c7b      	adds	r3, r7, #1
 8005e28:	444b      	add	r3, r9
 8005e2a:	106d      	asrs	r5, r5, #1
 8005e2c:	429d      	cmp	r5, r3
 8005e2e:	bf38      	it	cc
 8005e30:	461d      	movcc	r5, r3
 8005e32:	0553      	lsls	r3, r2, #21
 8005e34:	d527      	bpl.n	8005e86 <__ssputs_r+0x8e>
 8005e36:	4629      	mov	r1, r5
 8005e38:	f000 f958 	bl	80060ec <_malloc_r>
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	b360      	cbz	r0, 8005e9a <__ssputs_r+0xa2>
 8005e40:	6921      	ldr	r1, [r4, #16]
 8005e42:	464a      	mov	r2, r9
 8005e44:	f7ff ffca 	bl	8005ddc <memcpy>
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	6126      	str	r6, [r4, #16]
 8005e56:	6165      	str	r5, [r4, #20]
 8005e58:	444e      	add	r6, r9
 8005e5a:	eba5 0509 	sub.w	r5, r5, r9
 8005e5e:	6026      	str	r6, [r4, #0]
 8005e60:	60a5      	str	r5, [r4, #8]
 8005e62:	463e      	mov	r6, r7
 8005e64:	42be      	cmp	r6, r7
 8005e66:	d900      	bls.n	8005e6a <__ssputs_r+0x72>
 8005e68:	463e      	mov	r6, r7
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	4641      	mov	r1, r8
 8005e70:	f000 fb82 	bl	8006578 <memmove>
 8005e74:	68a3      	ldr	r3, [r4, #8]
 8005e76:	1b9b      	subs	r3, r3, r6
 8005e78:	60a3      	str	r3, [r4, #8]
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	4433      	add	r3, r6
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	2000      	movs	r0, #0
 8005e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e86:	462a      	mov	r2, r5
 8005e88:	f000 fb48 	bl	800651c <_realloc_r>
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d1e0      	bne.n	8005e54 <__ssputs_r+0x5c>
 8005e92:	6921      	ldr	r1, [r4, #16]
 8005e94:	4650      	mov	r0, sl
 8005e96:	f000 fb99 	bl	80065cc <_free_r>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	f8ca 3000 	str.w	r3, [sl]
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eac:	e7e9      	b.n	8005e82 <__ssputs_r+0x8a>
	...

08005eb0 <_svfiprintf_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	4698      	mov	r8, r3
 8005eb6:	898b      	ldrh	r3, [r1, #12]
 8005eb8:	061b      	lsls	r3, r3, #24
 8005eba:	b09d      	sub	sp, #116	@ 0x74
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	4614      	mov	r4, r2
 8005ec2:	d510      	bpl.n	8005ee6 <_svfiprintf_r+0x36>
 8005ec4:	690b      	ldr	r3, [r1, #16]
 8005ec6:	b973      	cbnz	r3, 8005ee6 <_svfiprintf_r+0x36>
 8005ec8:	2140      	movs	r1, #64	@ 0x40
 8005eca:	f000 f90f 	bl	80060ec <_malloc_r>
 8005ece:	6028      	str	r0, [r5, #0]
 8005ed0:	6128      	str	r0, [r5, #16]
 8005ed2:	b930      	cbnz	r0, 8005ee2 <_svfiprintf_r+0x32>
 8005ed4:	230c      	movs	r3, #12
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005edc:	b01d      	add	sp, #116	@ 0x74
 8005ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee2:	2340      	movs	r3, #64	@ 0x40
 8005ee4:	616b      	str	r3, [r5, #20]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eea:	2320      	movs	r3, #32
 8005eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ef4:	2330      	movs	r3, #48	@ 0x30
 8005ef6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006094 <_svfiprintf_r+0x1e4>
 8005efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005efe:	f04f 0901 	mov.w	r9, #1
 8005f02:	4623      	mov	r3, r4
 8005f04:	469a      	mov	sl, r3
 8005f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f0a:	b10a      	cbz	r2, 8005f10 <_svfiprintf_r+0x60>
 8005f0c:	2a25      	cmp	r2, #37	@ 0x25
 8005f0e:	d1f9      	bne.n	8005f04 <_svfiprintf_r+0x54>
 8005f10:	ebba 0b04 	subs.w	fp, sl, r4
 8005f14:	d00b      	beq.n	8005f2e <_svfiprintf_r+0x7e>
 8005f16:	465b      	mov	r3, fp
 8005f18:	4622      	mov	r2, r4
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	f7ff ff6b 	bl	8005df8 <__ssputs_r>
 8005f22:	3001      	adds	r0, #1
 8005f24:	f000 80a7 	beq.w	8006076 <_svfiprintf_r+0x1c6>
 8005f28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f2a:	445a      	add	r2, fp
 8005f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 809f 	beq.w	8006076 <_svfiprintf_r+0x1c6>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f42:	f10a 0a01 	add.w	sl, sl, #1
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	9307      	str	r3, [sp, #28]
 8005f4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f50:	4654      	mov	r4, sl
 8005f52:	2205      	movs	r2, #5
 8005f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f58:	484e      	ldr	r0, [pc, #312]	@ (8006094 <_svfiprintf_r+0x1e4>)
 8005f5a:	f7fa f959 	bl	8000210 <memchr>
 8005f5e:	9a04      	ldr	r2, [sp, #16]
 8005f60:	b9d8      	cbnz	r0, 8005f9a <_svfiprintf_r+0xea>
 8005f62:	06d0      	lsls	r0, r2, #27
 8005f64:	bf44      	itt	mi
 8005f66:	2320      	movmi	r3, #32
 8005f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f6c:	0711      	lsls	r1, r2, #28
 8005f6e:	bf44      	itt	mi
 8005f70:	232b      	movmi	r3, #43	@ 0x2b
 8005f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f76:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f7c:	d015      	beq.n	8005faa <_svfiprintf_r+0xfa>
 8005f7e:	9a07      	ldr	r2, [sp, #28]
 8005f80:	4654      	mov	r4, sl
 8005f82:	2000      	movs	r0, #0
 8005f84:	f04f 0c0a 	mov.w	ip, #10
 8005f88:	4621      	mov	r1, r4
 8005f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f8e:	3b30      	subs	r3, #48	@ 0x30
 8005f90:	2b09      	cmp	r3, #9
 8005f92:	d94b      	bls.n	800602c <_svfiprintf_r+0x17c>
 8005f94:	b1b0      	cbz	r0, 8005fc4 <_svfiprintf_r+0x114>
 8005f96:	9207      	str	r2, [sp, #28]
 8005f98:	e014      	b.n	8005fc4 <_svfiprintf_r+0x114>
 8005f9a:	eba0 0308 	sub.w	r3, r0, r8
 8005f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	46a2      	mov	sl, r4
 8005fa8:	e7d2      	b.n	8005f50 <_svfiprintf_r+0xa0>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	1d19      	adds	r1, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9103      	str	r1, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfbb      	ittet	lt
 8005fb6:	425b      	neglt	r3, r3
 8005fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fbc:	9307      	strge	r3, [sp, #28]
 8005fbe:	9307      	strlt	r3, [sp, #28]
 8005fc0:	bfb8      	it	lt
 8005fc2:	9204      	strlt	r2, [sp, #16]
 8005fc4:	7823      	ldrb	r3, [r4, #0]
 8005fc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fc8:	d10a      	bne.n	8005fe0 <_svfiprintf_r+0x130>
 8005fca:	7863      	ldrb	r3, [r4, #1]
 8005fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fce:	d132      	bne.n	8006036 <_svfiprintf_r+0x186>
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9203      	str	r2, [sp, #12]
 8005fd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fdc:	3402      	adds	r4, #2
 8005fde:	9305      	str	r3, [sp, #20]
 8005fe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80060a4 <_svfiprintf_r+0x1f4>
 8005fe4:	7821      	ldrb	r1, [r4, #0]
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	4650      	mov	r0, sl
 8005fea:	f7fa f911 	bl	8000210 <memchr>
 8005fee:	b138      	cbz	r0, 8006000 <_svfiprintf_r+0x150>
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	eba0 000a 	sub.w	r0, r0, sl
 8005ff6:	2240      	movs	r2, #64	@ 0x40
 8005ff8:	4082      	lsls	r2, r0
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	9304      	str	r3, [sp, #16]
 8006000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006004:	4824      	ldr	r0, [pc, #144]	@ (8006098 <_svfiprintf_r+0x1e8>)
 8006006:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800600a:	2206      	movs	r2, #6
 800600c:	f7fa f900 	bl	8000210 <memchr>
 8006010:	2800      	cmp	r0, #0
 8006012:	d036      	beq.n	8006082 <_svfiprintf_r+0x1d2>
 8006014:	4b21      	ldr	r3, [pc, #132]	@ (800609c <_svfiprintf_r+0x1ec>)
 8006016:	bb1b      	cbnz	r3, 8006060 <_svfiprintf_r+0x1b0>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	3307      	adds	r3, #7
 800601c:	f023 0307 	bic.w	r3, r3, #7
 8006020:	3308      	adds	r3, #8
 8006022:	9303      	str	r3, [sp, #12]
 8006024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006026:	4433      	add	r3, r6
 8006028:	9309      	str	r3, [sp, #36]	@ 0x24
 800602a:	e76a      	b.n	8005f02 <_svfiprintf_r+0x52>
 800602c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006030:	460c      	mov	r4, r1
 8006032:	2001      	movs	r0, #1
 8006034:	e7a8      	b.n	8005f88 <_svfiprintf_r+0xd8>
 8006036:	2300      	movs	r3, #0
 8006038:	3401      	adds	r4, #1
 800603a:	9305      	str	r3, [sp, #20]
 800603c:	4619      	mov	r1, r3
 800603e:	f04f 0c0a 	mov.w	ip, #10
 8006042:	4620      	mov	r0, r4
 8006044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006048:	3a30      	subs	r2, #48	@ 0x30
 800604a:	2a09      	cmp	r2, #9
 800604c:	d903      	bls.n	8006056 <_svfiprintf_r+0x1a6>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0c6      	beq.n	8005fe0 <_svfiprintf_r+0x130>
 8006052:	9105      	str	r1, [sp, #20]
 8006054:	e7c4      	b.n	8005fe0 <_svfiprintf_r+0x130>
 8006056:	fb0c 2101 	mla	r1, ip, r1, r2
 800605a:	4604      	mov	r4, r0
 800605c:	2301      	movs	r3, #1
 800605e:	e7f0      	b.n	8006042 <_svfiprintf_r+0x192>
 8006060:	ab03      	add	r3, sp, #12
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	462a      	mov	r2, r5
 8006066:	4b0e      	ldr	r3, [pc, #56]	@ (80060a0 <_svfiprintf_r+0x1f0>)
 8006068:	a904      	add	r1, sp, #16
 800606a:	4638      	mov	r0, r7
 800606c:	f3af 8000 	nop.w
 8006070:	1c42      	adds	r2, r0, #1
 8006072:	4606      	mov	r6, r0
 8006074:	d1d6      	bne.n	8006024 <_svfiprintf_r+0x174>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	065b      	lsls	r3, r3, #25
 800607a:	f53f af2d 	bmi.w	8005ed8 <_svfiprintf_r+0x28>
 800607e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006080:	e72c      	b.n	8005edc <_svfiprintf_r+0x2c>
 8006082:	ab03      	add	r3, sp, #12
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	462a      	mov	r2, r5
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <_svfiprintf_r+0x1f0>)
 800608a:	a904      	add	r1, sp, #16
 800608c:	4638      	mov	r0, r7
 800608e:	f000 f91b 	bl	80062c8 <_printf_i>
 8006092:	e7ed      	b.n	8006070 <_svfiprintf_r+0x1c0>
 8006094:	08006744 	.word	0x08006744
 8006098:	0800674e 	.word	0x0800674e
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005df9 	.word	0x08005df9
 80060a4:	0800674a 	.word	0x0800674a

080060a8 <sbrk_aligned>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4e0f      	ldr	r6, [pc, #60]	@ (80060e8 <sbrk_aligned+0x40>)
 80060ac:	460c      	mov	r4, r1
 80060ae:	6831      	ldr	r1, [r6, #0]
 80060b0:	4605      	mov	r5, r0
 80060b2:	b911      	cbnz	r1, 80060ba <sbrk_aligned+0x12>
 80060b4:	f000 fa7a 	bl	80065ac <_sbrk_r>
 80060b8:	6030      	str	r0, [r6, #0]
 80060ba:	4621      	mov	r1, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 fa75 	bl	80065ac <_sbrk_r>
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	d103      	bne.n	80060ce <sbrk_aligned+0x26>
 80060c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80060ca:	4620      	mov	r0, r4
 80060cc:	bd70      	pop	{r4, r5, r6, pc}
 80060ce:	1cc4      	adds	r4, r0, #3
 80060d0:	f024 0403 	bic.w	r4, r4, #3
 80060d4:	42a0      	cmp	r0, r4
 80060d6:	d0f8      	beq.n	80060ca <sbrk_aligned+0x22>
 80060d8:	1a21      	subs	r1, r4, r0
 80060da:	4628      	mov	r0, r5
 80060dc:	f000 fa66 	bl	80065ac <_sbrk_r>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d1f2      	bne.n	80060ca <sbrk_aligned+0x22>
 80060e4:	e7ef      	b.n	80060c6 <sbrk_aligned+0x1e>
 80060e6:	bf00      	nop
 80060e8:	200004b0 	.word	0x200004b0

080060ec <_malloc_r>:
 80060ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f0:	1ccd      	adds	r5, r1, #3
 80060f2:	f025 0503 	bic.w	r5, r5, #3
 80060f6:	3508      	adds	r5, #8
 80060f8:	2d0c      	cmp	r5, #12
 80060fa:	bf38      	it	cc
 80060fc:	250c      	movcc	r5, #12
 80060fe:	2d00      	cmp	r5, #0
 8006100:	4606      	mov	r6, r0
 8006102:	db01      	blt.n	8006108 <_malloc_r+0x1c>
 8006104:	42a9      	cmp	r1, r5
 8006106:	d904      	bls.n	8006112 <_malloc_r+0x26>
 8006108:	230c      	movs	r3, #12
 800610a:	6033      	str	r3, [r6, #0]
 800610c:	2000      	movs	r0, #0
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061e8 <_malloc_r+0xfc>
 8006116:	f000 f9f5 	bl	8006504 <__malloc_lock>
 800611a:	f8d8 3000 	ldr.w	r3, [r8]
 800611e:	461c      	mov	r4, r3
 8006120:	bb44      	cbnz	r4, 8006174 <_malloc_r+0x88>
 8006122:	4629      	mov	r1, r5
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff ffbf 	bl	80060a8 <sbrk_aligned>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	4604      	mov	r4, r0
 800612e:	d158      	bne.n	80061e2 <_malloc_r+0xf6>
 8006130:	f8d8 4000 	ldr.w	r4, [r8]
 8006134:	4627      	mov	r7, r4
 8006136:	2f00      	cmp	r7, #0
 8006138:	d143      	bne.n	80061c2 <_malloc_r+0xd6>
 800613a:	2c00      	cmp	r4, #0
 800613c:	d04b      	beq.n	80061d6 <_malloc_r+0xea>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	4639      	mov	r1, r7
 8006142:	4630      	mov	r0, r6
 8006144:	eb04 0903 	add.w	r9, r4, r3
 8006148:	f000 fa30 	bl	80065ac <_sbrk_r>
 800614c:	4581      	cmp	r9, r0
 800614e:	d142      	bne.n	80061d6 <_malloc_r+0xea>
 8006150:	6821      	ldr	r1, [r4, #0]
 8006152:	1a6d      	subs	r5, r5, r1
 8006154:	4629      	mov	r1, r5
 8006156:	4630      	mov	r0, r6
 8006158:	f7ff ffa6 	bl	80060a8 <sbrk_aligned>
 800615c:	3001      	adds	r0, #1
 800615e:	d03a      	beq.n	80061d6 <_malloc_r+0xea>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	442b      	add	r3, r5
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	f8d8 3000 	ldr.w	r3, [r8]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	bb62      	cbnz	r2, 80061c8 <_malloc_r+0xdc>
 800616e:	f8c8 7000 	str.w	r7, [r8]
 8006172:	e00f      	b.n	8006194 <_malloc_r+0xa8>
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	1b52      	subs	r2, r2, r5
 8006178:	d420      	bmi.n	80061bc <_malloc_r+0xd0>
 800617a:	2a0b      	cmp	r2, #11
 800617c:	d917      	bls.n	80061ae <_malloc_r+0xc2>
 800617e:	1961      	adds	r1, r4, r5
 8006180:	42a3      	cmp	r3, r4
 8006182:	6025      	str	r5, [r4, #0]
 8006184:	bf18      	it	ne
 8006186:	6059      	strne	r1, [r3, #4]
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	bf08      	it	eq
 800618c:	f8c8 1000 	streq.w	r1, [r8]
 8006190:	5162      	str	r2, [r4, r5]
 8006192:	604b      	str	r3, [r1, #4]
 8006194:	4630      	mov	r0, r6
 8006196:	f000 f9bb 	bl	8006510 <__malloc_unlock>
 800619a:	f104 000b 	add.w	r0, r4, #11
 800619e:	1d23      	adds	r3, r4, #4
 80061a0:	f020 0007 	bic.w	r0, r0, #7
 80061a4:	1ac2      	subs	r2, r0, r3
 80061a6:	bf1c      	itt	ne
 80061a8:	1a1b      	subne	r3, r3, r0
 80061aa:	50a3      	strne	r3, [r4, r2]
 80061ac:	e7af      	b.n	800610e <_malloc_r+0x22>
 80061ae:	6862      	ldr	r2, [r4, #4]
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	bf0c      	ite	eq
 80061b4:	f8c8 2000 	streq.w	r2, [r8]
 80061b8:	605a      	strne	r2, [r3, #4]
 80061ba:	e7eb      	b.n	8006194 <_malloc_r+0xa8>
 80061bc:	4623      	mov	r3, r4
 80061be:	6864      	ldr	r4, [r4, #4]
 80061c0:	e7ae      	b.n	8006120 <_malloc_r+0x34>
 80061c2:	463c      	mov	r4, r7
 80061c4:	687f      	ldr	r7, [r7, #4]
 80061c6:	e7b6      	b.n	8006136 <_malloc_r+0x4a>
 80061c8:	461a      	mov	r2, r3
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d1fb      	bne.n	80061c8 <_malloc_r+0xdc>
 80061d0:	2300      	movs	r3, #0
 80061d2:	6053      	str	r3, [r2, #4]
 80061d4:	e7de      	b.n	8006194 <_malloc_r+0xa8>
 80061d6:	230c      	movs	r3, #12
 80061d8:	6033      	str	r3, [r6, #0]
 80061da:	4630      	mov	r0, r6
 80061dc:	f000 f998 	bl	8006510 <__malloc_unlock>
 80061e0:	e794      	b.n	800610c <_malloc_r+0x20>
 80061e2:	6005      	str	r5, [r0, #0]
 80061e4:	e7d6      	b.n	8006194 <_malloc_r+0xa8>
 80061e6:	bf00      	nop
 80061e8:	200004b4 	.word	0x200004b4

080061ec <_printf_common>:
 80061ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	4616      	mov	r6, r2
 80061f2:	4698      	mov	r8, r3
 80061f4:	688a      	ldr	r2, [r1, #8]
 80061f6:	690b      	ldr	r3, [r1, #16]
 80061f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061fc:	4293      	cmp	r3, r2
 80061fe:	bfb8      	it	lt
 8006200:	4613      	movlt	r3, r2
 8006202:	6033      	str	r3, [r6, #0]
 8006204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006208:	4607      	mov	r7, r0
 800620a:	460c      	mov	r4, r1
 800620c:	b10a      	cbz	r2, 8006212 <_printf_common+0x26>
 800620e:	3301      	adds	r3, #1
 8006210:	6033      	str	r3, [r6, #0]
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	0699      	lsls	r1, r3, #26
 8006216:	bf42      	ittt	mi
 8006218:	6833      	ldrmi	r3, [r6, #0]
 800621a:	3302      	addmi	r3, #2
 800621c:	6033      	strmi	r3, [r6, #0]
 800621e:	6825      	ldr	r5, [r4, #0]
 8006220:	f015 0506 	ands.w	r5, r5, #6
 8006224:	d106      	bne.n	8006234 <_printf_common+0x48>
 8006226:	f104 0a19 	add.w	sl, r4, #25
 800622a:	68e3      	ldr	r3, [r4, #12]
 800622c:	6832      	ldr	r2, [r6, #0]
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	42ab      	cmp	r3, r5
 8006232:	dc26      	bgt.n	8006282 <_printf_common+0x96>
 8006234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006238:	6822      	ldr	r2, [r4, #0]
 800623a:	3b00      	subs	r3, #0
 800623c:	bf18      	it	ne
 800623e:	2301      	movne	r3, #1
 8006240:	0692      	lsls	r2, r2, #26
 8006242:	d42b      	bmi.n	800629c <_printf_common+0xb0>
 8006244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006248:	4641      	mov	r1, r8
 800624a:	4638      	mov	r0, r7
 800624c:	47c8      	blx	r9
 800624e:	3001      	adds	r0, #1
 8006250:	d01e      	beq.n	8006290 <_printf_common+0xa4>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	6922      	ldr	r2, [r4, #16]
 8006256:	f003 0306 	and.w	r3, r3, #6
 800625a:	2b04      	cmp	r3, #4
 800625c:	bf02      	ittt	eq
 800625e:	68e5      	ldreq	r5, [r4, #12]
 8006260:	6833      	ldreq	r3, [r6, #0]
 8006262:	1aed      	subeq	r5, r5, r3
 8006264:	68a3      	ldr	r3, [r4, #8]
 8006266:	bf0c      	ite	eq
 8006268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800626c:	2500      	movne	r5, #0
 800626e:	4293      	cmp	r3, r2
 8006270:	bfc4      	itt	gt
 8006272:	1a9b      	subgt	r3, r3, r2
 8006274:	18ed      	addgt	r5, r5, r3
 8006276:	2600      	movs	r6, #0
 8006278:	341a      	adds	r4, #26
 800627a:	42b5      	cmp	r5, r6
 800627c:	d11a      	bne.n	80062b4 <_printf_common+0xc8>
 800627e:	2000      	movs	r0, #0
 8006280:	e008      	b.n	8006294 <_printf_common+0xa8>
 8006282:	2301      	movs	r3, #1
 8006284:	4652      	mov	r2, sl
 8006286:	4641      	mov	r1, r8
 8006288:	4638      	mov	r0, r7
 800628a:	47c8      	blx	r9
 800628c:	3001      	adds	r0, #1
 800628e:	d103      	bne.n	8006298 <_printf_common+0xac>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006298:	3501      	adds	r5, #1
 800629a:	e7c6      	b.n	800622a <_printf_common+0x3e>
 800629c:	18e1      	adds	r1, r4, r3
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	2030      	movs	r0, #48	@ 0x30
 80062a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062a6:	4422      	add	r2, r4
 80062a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062b0:	3302      	adds	r3, #2
 80062b2:	e7c7      	b.n	8006244 <_printf_common+0x58>
 80062b4:	2301      	movs	r3, #1
 80062b6:	4622      	mov	r2, r4
 80062b8:	4641      	mov	r1, r8
 80062ba:	4638      	mov	r0, r7
 80062bc:	47c8      	blx	r9
 80062be:	3001      	adds	r0, #1
 80062c0:	d0e6      	beq.n	8006290 <_printf_common+0xa4>
 80062c2:	3601      	adds	r6, #1
 80062c4:	e7d9      	b.n	800627a <_printf_common+0x8e>
	...

080062c8 <_printf_i>:
 80062c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062cc:	7e0f      	ldrb	r7, [r1, #24]
 80062ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062d0:	2f78      	cmp	r7, #120	@ 0x78
 80062d2:	4691      	mov	r9, r2
 80062d4:	4680      	mov	r8, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	469a      	mov	sl, r3
 80062da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062de:	d807      	bhi.n	80062f0 <_printf_i+0x28>
 80062e0:	2f62      	cmp	r7, #98	@ 0x62
 80062e2:	d80a      	bhi.n	80062fa <_printf_i+0x32>
 80062e4:	2f00      	cmp	r7, #0
 80062e6:	f000 80d1 	beq.w	800648c <_printf_i+0x1c4>
 80062ea:	2f58      	cmp	r7, #88	@ 0x58
 80062ec:	f000 80b8 	beq.w	8006460 <_printf_i+0x198>
 80062f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062f8:	e03a      	b.n	8006370 <_printf_i+0xa8>
 80062fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062fe:	2b15      	cmp	r3, #21
 8006300:	d8f6      	bhi.n	80062f0 <_printf_i+0x28>
 8006302:	a101      	add	r1, pc, #4	@ (adr r1, 8006308 <_printf_i+0x40>)
 8006304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006308:	08006361 	.word	0x08006361
 800630c:	08006375 	.word	0x08006375
 8006310:	080062f1 	.word	0x080062f1
 8006314:	080062f1 	.word	0x080062f1
 8006318:	080062f1 	.word	0x080062f1
 800631c:	080062f1 	.word	0x080062f1
 8006320:	08006375 	.word	0x08006375
 8006324:	080062f1 	.word	0x080062f1
 8006328:	080062f1 	.word	0x080062f1
 800632c:	080062f1 	.word	0x080062f1
 8006330:	080062f1 	.word	0x080062f1
 8006334:	08006473 	.word	0x08006473
 8006338:	0800639f 	.word	0x0800639f
 800633c:	0800642d 	.word	0x0800642d
 8006340:	080062f1 	.word	0x080062f1
 8006344:	080062f1 	.word	0x080062f1
 8006348:	08006495 	.word	0x08006495
 800634c:	080062f1 	.word	0x080062f1
 8006350:	0800639f 	.word	0x0800639f
 8006354:	080062f1 	.word	0x080062f1
 8006358:	080062f1 	.word	0x080062f1
 800635c:	08006435 	.word	0x08006435
 8006360:	6833      	ldr	r3, [r6, #0]
 8006362:	1d1a      	adds	r2, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6032      	str	r2, [r6, #0]
 8006368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800636c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006370:	2301      	movs	r3, #1
 8006372:	e09c      	b.n	80064ae <_printf_i+0x1e6>
 8006374:	6833      	ldr	r3, [r6, #0]
 8006376:	6820      	ldr	r0, [r4, #0]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	6031      	str	r1, [r6, #0]
 800637c:	0606      	lsls	r6, r0, #24
 800637e:	d501      	bpl.n	8006384 <_printf_i+0xbc>
 8006380:	681d      	ldr	r5, [r3, #0]
 8006382:	e003      	b.n	800638c <_printf_i+0xc4>
 8006384:	0645      	lsls	r5, r0, #25
 8006386:	d5fb      	bpl.n	8006380 <_printf_i+0xb8>
 8006388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800638c:	2d00      	cmp	r5, #0
 800638e:	da03      	bge.n	8006398 <_printf_i+0xd0>
 8006390:	232d      	movs	r3, #45	@ 0x2d
 8006392:	426d      	negs	r5, r5
 8006394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006398:	4858      	ldr	r0, [pc, #352]	@ (80064fc <_printf_i+0x234>)
 800639a:	230a      	movs	r3, #10
 800639c:	e011      	b.n	80063c2 <_printf_i+0xfa>
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	6833      	ldr	r3, [r6, #0]
 80063a2:	0608      	lsls	r0, r1, #24
 80063a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80063a8:	d402      	bmi.n	80063b0 <_printf_i+0xe8>
 80063aa:	0649      	lsls	r1, r1, #25
 80063ac:	bf48      	it	mi
 80063ae:	b2ad      	uxthmi	r5, r5
 80063b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80063b2:	4852      	ldr	r0, [pc, #328]	@ (80064fc <_printf_i+0x234>)
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	bf14      	ite	ne
 80063b8:	230a      	movne	r3, #10
 80063ba:	2308      	moveq	r3, #8
 80063bc:	2100      	movs	r1, #0
 80063be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063c2:	6866      	ldr	r6, [r4, #4]
 80063c4:	60a6      	str	r6, [r4, #8]
 80063c6:	2e00      	cmp	r6, #0
 80063c8:	db05      	blt.n	80063d6 <_printf_i+0x10e>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	432e      	orrs	r6, r5
 80063ce:	f021 0104 	bic.w	r1, r1, #4
 80063d2:	6021      	str	r1, [r4, #0]
 80063d4:	d04b      	beq.n	800646e <_printf_i+0x1a6>
 80063d6:	4616      	mov	r6, r2
 80063d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80063dc:	fb03 5711 	mls	r7, r3, r1, r5
 80063e0:	5dc7      	ldrb	r7, [r0, r7]
 80063e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063e6:	462f      	mov	r7, r5
 80063e8:	42bb      	cmp	r3, r7
 80063ea:	460d      	mov	r5, r1
 80063ec:	d9f4      	bls.n	80063d8 <_printf_i+0x110>
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d10b      	bne.n	800640a <_printf_i+0x142>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	07df      	lsls	r7, r3, #31
 80063f6:	d508      	bpl.n	800640a <_printf_i+0x142>
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	6861      	ldr	r1, [r4, #4]
 80063fc:	4299      	cmp	r1, r3
 80063fe:	bfde      	ittt	le
 8006400:	2330      	movle	r3, #48	@ 0x30
 8006402:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006406:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800640a:	1b92      	subs	r2, r2, r6
 800640c:	6122      	str	r2, [r4, #16]
 800640e:	f8cd a000 	str.w	sl, [sp]
 8006412:	464b      	mov	r3, r9
 8006414:	aa03      	add	r2, sp, #12
 8006416:	4621      	mov	r1, r4
 8006418:	4640      	mov	r0, r8
 800641a:	f7ff fee7 	bl	80061ec <_printf_common>
 800641e:	3001      	adds	r0, #1
 8006420:	d14a      	bne.n	80064b8 <_printf_i+0x1f0>
 8006422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006426:	b004      	add	sp, #16
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f043 0320 	orr.w	r3, r3, #32
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	4832      	ldr	r0, [pc, #200]	@ (8006500 <_printf_i+0x238>)
 8006436:	2778      	movs	r7, #120	@ 0x78
 8006438:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	6831      	ldr	r1, [r6, #0]
 8006440:	061f      	lsls	r7, r3, #24
 8006442:	f851 5b04 	ldr.w	r5, [r1], #4
 8006446:	d402      	bmi.n	800644e <_printf_i+0x186>
 8006448:	065f      	lsls	r7, r3, #25
 800644a:	bf48      	it	mi
 800644c:	b2ad      	uxthmi	r5, r5
 800644e:	6031      	str	r1, [r6, #0]
 8006450:	07d9      	lsls	r1, r3, #31
 8006452:	bf44      	itt	mi
 8006454:	f043 0320 	orrmi.w	r3, r3, #32
 8006458:	6023      	strmi	r3, [r4, #0]
 800645a:	b11d      	cbz	r5, 8006464 <_printf_i+0x19c>
 800645c:	2310      	movs	r3, #16
 800645e:	e7ad      	b.n	80063bc <_printf_i+0xf4>
 8006460:	4826      	ldr	r0, [pc, #152]	@ (80064fc <_printf_i+0x234>)
 8006462:	e7e9      	b.n	8006438 <_printf_i+0x170>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	f023 0320 	bic.w	r3, r3, #32
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	e7f6      	b.n	800645c <_printf_i+0x194>
 800646e:	4616      	mov	r6, r2
 8006470:	e7bd      	b.n	80063ee <_printf_i+0x126>
 8006472:	6833      	ldr	r3, [r6, #0]
 8006474:	6825      	ldr	r5, [r4, #0]
 8006476:	6961      	ldr	r1, [r4, #20]
 8006478:	1d18      	adds	r0, r3, #4
 800647a:	6030      	str	r0, [r6, #0]
 800647c:	062e      	lsls	r6, r5, #24
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	d501      	bpl.n	8006486 <_printf_i+0x1be>
 8006482:	6019      	str	r1, [r3, #0]
 8006484:	e002      	b.n	800648c <_printf_i+0x1c4>
 8006486:	0668      	lsls	r0, r5, #25
 8006488:	d5fb      	bpl.n	8006482 <_printf_i+0x1ba>
 800648a:	8019      	strh	r1, [r3, #0]
 800648c:	2300      	movs	r3, #0
 800648e:	6123      	str	r3, [r4, #16]
 8006490:	4616      	mov	r6, r2
 8006492:	e7bc      	b.n	800640e <_printf_i+0x146>
 8006494:	6833      	ldr	r3, [r6, #0]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	6032      	str	r2, [r6, #0]
 800649a:	681e      	ldr	r6, [r3, #0]
 800649c:	6862      	ldr	r2, [r4, #4]
 800649e:	2100      	movs	r1, #0
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7f9 feb5 	bl	8000210 <memchr>
 80064a6:	b108      	cbz	r0, 80064ac <_printf_i+0x1e4>
 80064a8:	1b80      	subs	r0, r0, r6
 80064aa:	6060      	str	r0, [r4, #4]
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	2300      	movs	r3, #0
 80064b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064b6:	e7aa      	b.n	800640e <_printf_i+0x146>
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	4632      	mov	r2, r6
 80064bc:	4649      	mov	r1, r9
 80064be:	4640      	mov	r0, r8
 80064c0:	47d0      	blx	sl
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0ad      	beq.n	8006422 <_printf_i+0x15a>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	079b      	lsls	r3, r3, #30
 80064ca:	d413      	bmi.n	80064f4 <_printf_i+0x22c>
 80064cc:	68e0      	ldr	r0, [r4, #12]
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	4298      	cmp	r0, r3
 80064d2:	bfb8      	it	lt
 80064d4:	4618      	movlt	r0, r3
 80064d6:	e7a6      	b.n	8006426 <_printf_i+0x15e>
 80064d8:	2301      	movs	r3, #1
 80064da:	4632      	mov	r2, r6
 80064dc:	4649      	mov	r1, r9
 80064de:	4640      	mov	r0, r8
 80064e0:	47d0      	blx	sl
 80064e2:	3001      	adds	r0, #1
 80064e4:	d09d      	beq.n	8006422 <_printf_i+0x15a>
 80064e6:	3501      	adds	r5, #1
 80064e8:	68e3      	ldr	r3, [r4, #12]
 80064ea:	9903      	ldr	r1, [sp, #12]
 80064ec:	1a5b      	subs	r3, r3, r1
 80064ee:	42ab      	cmp	r3, r5
 80064f0:	dcf2      	bgt.n	80064d8 <_printf_i+0x210>
 80064f2:	e7eb      	b.n	80064cc <_printf_i+0x204>
 80064f4:	2500      	movs	r5, #0
 80064f6:	f104 0619 	add.w	r6, r4, #25
 80064fa:	e7f5      	b.n	80064e8 <_printf_i+0x220>
 80064fc:	08006755 	.word	0x08006755
 8006500:	08006766 	.word	0x08006766

08006504 <__malloc_lock>:
 8006504:	4801      	ldr	r0, [pc, #4]	@ (800650c <__malloc_lock+0x8>)
 8006506:	f7ff bc67 	b.w	8005dd8 <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	200004ac 	.word	0x200004ac

08006510 <__malloc_unlock>:
 8006510:	4801      	ldr	r0, [pc, #4]	@ (8006518 <__malloc_unlock+0x8>)
 8006512:	f7ff bc62 	b.w	8005dda <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	200004ac 	.word	0x200004ac

0800651c <_realloc_r>:
 800651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	4607      	mov	r7, r0
 8006522:	4614      	mov	r4, r2
 8006524:	460d      	mov	r5, r1
 8006526:	b921      	cbnz	r1, 8006532 <_realloc_r+0x16>
 8006528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800652c:	4611      	mov	r1, r2
 800652e:	f7ff bddd 	b.w	80060ec <_malloc_r>
 8006532:	b92a      	cbnz	r2, 8006540 <_realloc_r+0x24>
 8006534:	f000 f84a 	bl	80065cc <_free_r>
 8006538:	4625      	mov	r5, r4
 800653a:	4628      	mov	r0, r5
 800653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006540:	f000 f88e 	bl	8006660 <_malloc_usable_size_r>
 8006544:	4284      	cmp	r4, r0
 8006546:	4606      	mov	r6, r0
 8006548:	d802      	bhi.n	8006550 <_realloc_r+0x34>
 800654a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800654e:	d8f4      	bhi.n	800653a <_realloc_r+0x1e>
 8006550:	4621      	mov	r1, r4
 8006552:	4638      	mov	r0, r7
 8006554:	f7ff fdca 	bl	80060ec <_malloc_r>
 8006558:	4680      	mov	r8, r0
 800655a:	b908      	cbnz	r0, 8006560 <_realloc_r+0x44>
 800655c:	4645      	mov	r5, r8
 800655e:	e7ec      	b.n	800653a <_realloc_r+0x1e>
 8006560:	42b4      	cmp	r4, r6
 8006562:	4622      	mov	r2, r4
 8006564:	4629      	mov	r1, r5
 8006566:	bf28      	it	cs
 8006568:	4632      	movcs	r2, r6
 800656a:	f7ff fc37 	bl	8005ddc <memcpy>
 800656e:	4629      	mov	r1, r5
 8006570:	4638      	mov	r0, r7
 8006572:	f000 f82b 	bl	80065cc <_free_r>
 8006576:	e7f1      	b.n	800655c <_realloc_r+0x40>

08006578 <memmove>:
 8006578:	4288      	cmp	r0, r1
 800657a:	b510      	push	{r4, lr}
 800657c:	eb01 0402 	add.w	r4, r1, r2
 8006580:	d902      	bls.n	8006588 <memmove+0x10>
 8006582:	4284      	cmp	r4, r0
 8006584:	4623      	mov	r3, r4
 8006586:	d807      	bhi.n	8006598 <memmove+0x20>
 8006588:	1e43      	subs	r3, r0, #1
 800658a:	42a1      	cmp	r1, r4
 800658c:	d008      	beq.n	80065a0 <memmove+0x28>
 800658e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006596:	e7f8      	b.n	800658a <memmove+0x12>
 8006598:	4402      	add	r2, r0
 800659a:	4601      	mov	r1, r0
 800659c:	428a      	cmp	r2, r1
 800659e:	d100      	bne.n	80065a2 <memmove+0x2a>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065aa:	e7f7      	b.n	800659c <memmove+0x24>

080065ac <_sbrk_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	@ (80065c8 <_sbrk_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fb f926 	bl	8001808 <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_sbrk_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_sbrk_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	200004b8 	.word	0x200004b8

080065cc <_free_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4605      	mov	r5, r0
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d041      	beq.n	8006658 <_free_r+0x8c>
 80065d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d8:	1f0c      	subs	r4, r1, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfb8      	it	lt
 80065de:	18e4      	addlt	r4, r4, r3
 80065e0:	f7ff ff90 	bl	8006504 <__malloc_lock>
 80065e4:	4a1d      	ldr	r2, [pc, #116]	@ (800665c <_free_r+0x90>)
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	b933      	cbnz	r3, 80065f8 <_free_r+0x2c>
 80065ea:	6063      	str	r3, [r4, #4]
 80065ec:	6014      	str	r4, [r2, #0]
 80065ee:	4628      	mov	r0, r5
 80065f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f4:	f7ff bf8c 	b.w	8006510 <__malloc_unlock>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d908      	bls.n	800660e <_free_r+0x42>
 80065fc:	6820      	ldr	r0, [r4, #0]
 80065fe:	1821      	adds	r1, r4, r0
 8006600:	428b      	cmp	r3, r1
 8006602:	bf01      	itttt	eq
 8006604:	6819      	ldreq	r1, [r3, #0]
 8006606:	685b      	ldreq	r3, [r3, #4]
 8006608:	1809      	addeq	r1, r1, r0
 800660a:	6021      	streq	r1, [r4, #0]
 800660c:	e7ed      	b.n	80065ea <_free_r+0x1e>
 800660e:	461a      	mov	r2, r3
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b10b      	cbz	r3, 8006618 <_free_r+0x4c>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d9fa      	bls.n	800660e <_free_r+0x42>
 8006618:	6811      	ldr	r1, [r2, #0]
 800661a:	1850      	adds	r0, r2, r1
 800661c:	42a0      	cmp	r0, r4
 800661e:	d10b      	bne.n	8006638 <_free_r+0x6c>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	4401      	add	r1, r0
 8006624:	1850      	adds	r0, r2, r1
 8006626:	4283      	cmp	r3, r0
 8006628:	6011      	str	r1, [r2, #0]
 800662a:	d1e0      	bne.n	80065ee <_free_r+0x22>
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	6053      	str	r3, [r2, #4]
 8006632:	4408      	add	r0, r1
 8006634:	6010      	str	r0, [r2, #0]
 8006636:	e7da      	b.n	80065ee <_free_r+0x22>
 8006638:	d902      	bls.n	8006640 <_free_r+0x74>
 800663a:	230c      	movs	r3, #12
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	e7d6      	b.n	80065ee <_free_r+0x22>
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	1821      	adds	r1, r4, r0
 8006644:	428b      	cmp	r3, r1
 8006646:	bf04      	itt	eq
 8006648:	6819      	ldreq	r1, [r3, #0]
 800664a:	685b      	ldreq	r3, [r3, #4]
 800664c:	6063      	str	r3, [r4, #4]
 800664e:	bf04      	itt	eq
 8006650:	1809      	addeq	r1, r1, r0
 8006652:	6021      	streq	r1, [r4, #0]
 8006654:	6054      	str	r4, [r2, #4]
 8006656:	e7ca      	b.n	80065ee <_free_r+0x22>
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	200004b4 	.word	0x200004b4

08006660 <_malloc_usable_size_r>:
 8006660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006664:	1f18      	subs	r0, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfbc      	itt	lt
 800666a:	580b      	ldrlt	r3, [r1, r0]
 800666c:	18c0      	addlt	r0, r0, r3
 800666e:	4770      	bx	lr

08006670 <_init>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr

0800667c <_fini>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr
