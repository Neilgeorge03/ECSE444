
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000674c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a18  08006a18  000080dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006a18  08006a18  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a20  08006a20  000080dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a24  08006a24  00007a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  08006a28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200000dc  08006b04  000080dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08006b04  00008454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fc8  00000000  00000000  0000810c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d4  00000000  00000000  000210d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  000245a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d8  00000000  00000000  00025b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf77  00000000  00000000  00026c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b42e  00000000  00000000  00053ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111e4e  00000000  00000000  0006efd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180e23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f00  00000000  00000000  00180e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00186d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080068f4 	.word	0x080068f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000e0 	.word	0x200000e0
 80001fc:	080068f4 	.word	0x080068f4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	if (htim != &htim2) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a32      	ldr	r2, [pc, #200]	@ (8000674 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d000      	beq.n	80005b2 <HAL_TIM_PeriodElapsedCallback+0x12>
		__NOP();
 80005b0:	bf00      	nop
	}

	switch (sensorIndex) {
 80005b2:	4b31      	ldr	r3, [pc, #196]	@ (8000678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d84e      	bhi.n	8000658 <HAL_TIM_PeriodElapsedCallback+0xb8>
 80005ba:	a201      	add	r2, pc, #4	@ (adr r2, 80005c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005eb 	.word	0x080005eb
 80005c8:	08000615 	.word	0x08000615
 80005cc:	0800062f 	.word	0x0800062f
	case 0:
		sprintf(buffer, "humidity: %d\r\n", (int)BSP_HSENSOR_ReadHumidity());
 80005d0:	f000 fc08 	bl	8000de4 <BSP_HSENSOR_ReadHumidity>
 80005d4:	eef0 7a40 	vmov.f32	s15, s0
 80005d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005dc:	ee17 2a90 	vmov	r2, s15
 80005e0:	4926      	ldr	r1, [pc, #152]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80005e2:	4827      	ldr	r0, [pc, #156]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80005e4:	f005 fce6 	bl	8005fb4 <siprintf>
		break;
 80005e8:	e036      	b.n	8000658 <HAL_TIM_PeriodElapsedCallback+0xb8>

	case 1:
		BSP_MAGNETO_GetXYZ(magnetoXYZ);
 80005ea:	4826      	ldr	r0, [pc, #152]	@ (8000684 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005ec:	f000 fc34 	bl	8000e58 <BSP_MAGNETO_GetXYZ>
		sprintf(buffer, "magnetometer: X:%d, Y:%d, Z:%d\r\n", magnetoXYZ[0], magnetoXYZ[1], magnetoXYZ[2]);
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005fe:	4619      	mov	r1, r3
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	460b      	mov	r3, r1
 800060a:	491f      	ldr	r1, [pc, #124]	@ (8000688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800060c:	481c      	ldr	r0, [pc, #112]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800060e:	f005 fcd1 	bl	8005fb4 <siprintf>
		break;
 8000612:	e021      	b.n	8000658 <HAL_TIM_PeriodElapsedCallback+0xb8>

	case 2:
		sprintf(buffer, "pressure: %d\r\n", (int)BSP_PSENSOR_ReadPressure());
 8000614:	f000 fc58 	bl	8000ec8 <BSP_PSENSOR_ReadPressure>
 8000618:	eef0 7a40 	vmov.f32	s15, s0
 800061c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000620:	ee17 2a90 	vmov	r2, s15
 8000624:	4919      	ldr	r1, [pc, #100]	@ (800068c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000626:	4816      	ldr	r0, [pc, #88]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000628:	f005 fcc4 	bl	8005fb4 <siprintf>
		break;
 800062c:	e014      	b.n	8000658 <HAL_TIM_PeriodElapsedCallback+0xb8>

	case 3:
		BSP_ACCELERO_AccGetXYZ(acceleroXYZ);
 800062e:	4818      	ldr	r0, [pc, #96]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000630:	f000 fba0 	bl	8000d74 <BSP_ACCELERO_AccGetXYZ>
		sprintf(buffer, "accelerometer: X:%d, Y:%d, Z:%d\r\n",
				acceleroXYZ[0], acceleroXYZ[1], acceleroXYZ[2]);
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000636:	f9b3 3000 	ldrsh.w	r3, [r3]
		sprintf(buffer, "accelerometer: X:%d, Y:%d, Z:%d\r\n",
 800063a:	461a      	mov	r2, r3
				acceleroXYZ[0], acceleroXYZ[1], acceleroXYZ[2]);
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800063e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		sprintf(buffer, "accelerometer: X:%d, Y:%d, Z:%d\r\n",
 8000642:	4619      	mov	r1, r3
				acceleroXYZ[0], acceleroXYZ[1], acceleroXYZ[2]);
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000646:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		sprintf(buffer, "accelerometer: X:%d, Y:%d, Z:%d\r\n",
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	460b      	mov	r3, r1
 800064e:	4911      	ldr	r1, [pc, #68]	@ (8000694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000652:	f005 fcaf 	bl	8005fb4 <siprintf>
		break;
 8000656:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000658:	4809      	ldr	r0, [pc, #36]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800065a:	f7ff fdd1 	bl	8000200 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	2364      	movs	r3, #100	@ 0x64
 8000664:	4906      	ldr	r1, [pc, #24]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000668:	f004 fdf8 	bl	800525c <HAL_UART_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000014c 	.word	0x2000014c
 8000678:	2000029e 	.word	0x2000029e
 800067c:	0800690c 	.word	0x0800690c
 8000680:	2000022c 	.word	0x2000022c
 8000684:	20000290 	.word	0x20000290
 8000688:	0800691c 	.word	0x0800691c
 800068c:	08006940 	.word	0x08006940
 8000690:	20000298 	.word	0x20000298
 8000694:	08006950 	.word	0x08006950
 8000698:	20000198 	.word	0x20000198

0800069c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != BTN_Pin) {
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ac:	d000      	beq.n	80006b0 <HAL_GPIO_EXTI_Callback+0x14>
		__NOP();
 80006ae:	bf00      	nop
	}

	sensorIndex = (sensorIndex + 1) % 4;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	425a      	negs	r2, r3
 80006b8:	f003 0303 	and.w	r3, r3, #3
 80006bc:	f002 0203 	and.w	r2, r2, #3
 80006c0:	bf58      	it	pl
 80006c2:	4253      	negpl	r3, r2
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80006c8:	701a      	strb	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2000029e 	.word	0x2000029e

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f001 f986 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f82e 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 f958 	bl	800099c <MX_GPIO_Init>
  MX_I2C2_Init();
 80006ec:	f000 f87c 	bl	80007e8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 f908 	bl	8000904 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006f4:	f000 f8b8 	bl	8000868 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (BSP_HSENSOR_Init() != 0) {
 80006f8:	f000 fb54 	bl	8000da4 <BSP_HSENSOR_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <main+0x2a>
	  return ERRNO;
 8000702:	2301      	movs	r3, #1
 8000704:	e019      	b.n	800073a <main+0x5e>
  }

  if (BSP_MAGNETO_Init() != 0) {
 8000706:	f000 fb7b 	bl	8000e00 <BSP_MAGNETO_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <main+0x38>
	  return ERRNO;
 8000710:	2301      	movs	r3, #1
 8000712:	e012      	b.n	800073a <main+0x5e>
  }

  if (BSP_PSENSOR_Init() != 0) {
 8000714:	f000 fbb8 	bl	8000e88 <BSP_PSENSOR_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <main+0x46>
	  return ERRNO;
 800071e:	2301      	movs	r3, #1
 8000720:	e00b      	b.n	800073a <main+0x5e>
  }

  if (BSP_ACCELERO_Init() != 0) {
 8000722:	f000 fae9 	bl	8000cf8 <BSP_ACCELERO_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <main+0x54>
	  return ERRNO;
 800072c:	2301      	movs	r3, #1
 800072e:	e004      	b.n	800073a <main+0x5e>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <main+0x64>)
 8000732:	f004 f8f5 	bl	8004920 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	bf00      	nop
 8000738:	e7fd      	b.n	8000736 <main+0x5a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000014c 	.word	0x2000014c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b096      	sub	sp, #88	@ 0x58
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2244      	movs	r2, #68	@ 0x44
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fc4e 	bl	8005ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000766:	2000      	movs	r0, #0
 8000768:	f002 fbee 	bl	8002f48 <HAL_PWREx_ControlVoltageScaling>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000772:	f000 f96b 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000776:	2310      	movs	r3, #16
 8000778:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800077a:	2301      	movs	r3, #1
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000782:	2360      	movs	r3, #96	@ 0x60
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800078a:	2301      	movs	r3, #1
 800078c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000792:	233c      	movs	r3, #60	@ 0x3c
 8000794:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fc72 	bl	8003090 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007b2:	f000 f94b 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2105      	movs	r1, #5
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 f878 	bl	80038c4 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007da:	f000 f937 	bl	8000a4c <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3758      	adds	r7, #88	@ 0x58
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_I2C2_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000860 <MX_I2C2_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_I2C2_Init+0x74>)
 80007f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <MX_I2C2_Init+0x7c>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_I2C2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_I2C2_Init+0x74>)
 8000800:	2201      	movs	r2, #1
 8000802:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_I2C2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_I2C2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_I2C2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	@ (800085c <MX_I2C2_Init+0x74>)
 8000824:	f001 fd1e 	bl	8002264 <HAL_I2C_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800082e:	f000 f90d 	bl	8000a4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <MX_I2C2_Init+0x74>)
 8000836:	f002 facf 	bl	8002dd8 <HAL_I2CEx_ConfigAnalogFilter>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 f904 	bl	8000a4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_I2C2_Init+0x74>)
 8000848:	f002 fb11 	bl	8002e6e <HAL_I2CEx_ConfigDigitalFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 f8fb 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000f8 	.word	0x200000f8
 8000860:	40005800 	.word	0x40005800
 8000864:	30a175ab 	.word	0x30a175ab

08000868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_TIM2_Init+0x94>)
 8000888:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_TIM2_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_TIM2_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000000;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_TIM2_Init+0x94>)
 800089c:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <MX_TIM2_Init+0x98>)
 800089e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_TIM2_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_TIM2_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ac:	4813      	ldr	r0, [pc, #76]	@ (80008fc <MX_TIM2_Init+0x94>)
 80008ae:	f003 ffdf 	bl	8004870 <HAL_TIM_Base_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b8:	f000 f8c8 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <MX_TIM2_Init+0x94>)
 80008ca:	f004 f9a0 	bl	8004c0e <HAL_TIM_ConfigClockSource>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008d4:	f000 f8ba 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_TIM2_Init+0x94>)
 80008e6:	f004 fbc3 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008f0:	f000 f8ac 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000014c 	.word	0x2000014c
 8000900:	00b71b00 	.word	0x00b71b00

08000904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 800090a:	4a23      	ldr	r2, [pc, #140]	@ (8000998 <MX_USART1_UART_Init+0x94>)
 800090c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090e:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094c:	4811      	ldr	r0, [pc, #68]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 800094e:	f004 fc35 	bl	80051bc <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f878 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	480d      	ldr	r0, [pc, #52]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000960:	f005 fa5e 	bl	8005e20 <HAL_UARTEx_SetTxFifoThreshold>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f86f 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4808      	ldr	r0, [pc, #32]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000972:	f005 fa93 	bl	8005e9c <HAL_UARTEx_SetRxFifoThreshold>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f866 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_USART1_UART_Init+0x90>)
 8000982:	f005 fa14 	bl	8005dae <HAL_UARTEx_DisableFifoMode>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f85e 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000198 	.word	0x20000198
 8000998:	40013800 	.word	0x40013800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <MX_GPIO_Init+0xa4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <MX_GPIO_Init+0xa4>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_GPIO_Init+0xa4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_GPIO_Init+0xa4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000a40 <MX_GPIO_Init+0xa4>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_GPIO_Init+0xa4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e8:	4816      	ldr	r0, [pc, #88]	@ (8000a44 <MX_GPIO_Init+0xa8>)
 80009ea:	f001 fc0b 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	@ (8000a48 <MX_GPIO_Init+0xac>)
 8000a06:	f001 f979 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <MX_GPIO_Init+0xa8>)
 8000a24:	f001 f96a 	bl	8001cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2028      	movs	r0, #40	@ 0x28
 8000a2e:	f001 f92e 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	@ 0x28
 8000a34:	f001 f947 	bl	8001cc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000400 	.word	0x48000400
 8000a48:	48000800 	.word	0x48000800

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a64:	4a26      	ldr	r2, [pc, #152]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000a78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a7c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000a7e:	2312      	movs	r3, #18
 8000a80:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <I2Cx_MspInit+0xac>)
 8000a96:	f001 f931 	bl	8001cfc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <I2Cx_MspInit+0xac>)
 8000aa2:	f001 f92b 	bl	8001cfc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aaa:	4a15      	ldr	r2, [pc, #84]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000aca:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ace:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <I2Cx_MspInit+0xa8>)
 8000ad0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000ad4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210f      	movs	r1, #15
 8000ada:	2021      	movs	r0, #33	@ 0x21
 8000adc:	f001 f8d7 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000ae0:	2021      	movs	r0, #33	@ 0x21
 8000ae2:	f001 f8f0 	bl	8001cc6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	2022      	movs	r0, #34	@ 0x22
 8000aec:	f001 f8cf 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000af0:	2022      	movs	r0, #34	@ 0x22
 8000af2:	f001 f8e8 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000400 	.word	0x48000400

08000b08 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <I2Cx_Init+0x54>)
 8000b14:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a11      	ldr	r2, [pc, #68]	@ (8000b60 <I2Cx_Init+0x58>)
 8000b1a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff89 	bl	8000a58 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f001 fb8c 	bl	8002264 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f002 f942 	bl	8002dd8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40005800 	.word	0x40005800
 8000b60:	00702681 	.word	0x00702681

08000b64 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af04      	add	r7, sp, #16
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4603      	mov	r3, r0
 8000b74:	72fb      	strb	r3, [r7, #11]
 8000b76:	460b      	mov	r3, r1
 8000b78:	813b      	strh	r3, [r7, #8]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	b299      	uxth	r1, r3
 8000b86:	88f8      	ldrh	r0, [r7, #6]
 8000b88:	893a      	ldrh	r2, [r7, #8]
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	9302      	str	r3, [sp, #8]
 8000b90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	4603      	mov	r3, r0
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f001 fd40 	bl	8002620 <HAL_I2C_Mem_Read>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d004      	beq.n	8000bb4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000baa:	7afb      	ldrb	r3, [r7, #11]
 8000bac:	4619      	mov	r1, r3
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f000 f832 	bl	8000c18 <I2Cx_Error>
  }
  return status;
 8000bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b08a      	sub	sp, #40	@ 0x28
 8000bc2:	af04      	add	r7, sp, #16
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	4611      	mov	r1, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4603      	mov	r3, r0
 8000bce:	72fb      	strb	r3, [r7, #11]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	813b      	strh	r3, [r7, #8]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000bdc:	7afb      	ldrb	r3, [r7, #11]
 8000bde:	b299      	uxth	r1, r3
 8000be0:	88f8      	ldrh	r0, [r7, #6]
 8000be2:	893a      	ldrh	r2, [r7, #8]
 8000be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f001 fbff 	bl	80023f8 <HAL_I2C_Mem_Write>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000c04:	7afb      	ldrb	r3, [r7, #11]
 8000c06:	4619      	mov	r1, r3
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f000 f805 	bl	8000c18 <I2Cx_Error>
  }
  return status;
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f001 fbb8 	bl	800239a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff6c 	bl	8000b08 <I2Cx_Init>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <SENSOR_IO_Init+0x10>)
 8000c3e:	f7ff ff63 	bl	8000b08 <I2Cx_Init>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002a0 	.word	0x200002a0

08000c4c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	460b      	mov	r3, r1
 8000c58:	71bb      	strb	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	79f9      	ldrb	r1, [r7, #7]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	1d7b      	adds	r3, r7, #5
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <SENSOR_IO_Write+0x30>)
 8000c70:	f7ff ffa5 	bl	8000bbe <I2Cx_WriteMultiple>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200002a0 	.word	0x200002a0

08000c80 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	79f9      	ldrb	r1, [r7, #7]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	f107 030f 	add.w	r3, r7, #15
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <SENSOR_IO_Read+0x38>)
 8000ca8:	f7ff ff5c 	bl	8000b64 <I2Cx_ReadMultiple>

  return read_value;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200002a0 	.word	0x200002a0

08000cbc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	603a      	str	r2, [r7, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	71bb      	strb	r3, [r7, #6]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	79f9      	ldrb	r1, [r7, #7]
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <SENSOR_IO_ReadMultiple+0x38>)
 8000ce4:	f7ff ff3e 	bl	8000b64 <I2Cx_ReadMultiple>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002a0 	.word	0x200002a0

08000cf8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000d02:	2300      	movs	r3, #0
 8000d04:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <BSP_ACCELERO_Init+0x74>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	4798      	blx	r3
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000d10:	d002      	beq.n	8000d18 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e024      	b.n	8000d62 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <BSP_ACCELERO_Init+0x78>)
 8000d1a:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <BSP_ACCELERO_Init+0x74>)
 8000d1c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8000d1e:	2330      	movs	r3, #48	@ 0x30
 8000d20:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8000d26:	2300      	movs	r3, #0
 8000d28:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000d2a:	2340      	movs	r3, #64	@ 0x40
 8000d2c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8000d36:	797a      	ldrb	r2, [r7, #5]
 8000d38:	7abb      	ldrb	r3, [r7, #10]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8000d40:	7a3b      	ldrb	r3, [r7, #8]
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <BSP_ACCELERO_Init+0x78>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	89ba      	ldrh	r2, [r7, #12]
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4798      	blx	r3
  }  

  return ret;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000050 	.word	0x20000050
 8000d70:	200002f4 	.word	0x200002f4

08000d74 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d009      	beq.n	8000d98 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d004      	beq.n	8000d98 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	4798      	blx	r3
    }
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200002f4 	.word	0x200002f4

08000da4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <BSP_HSENSOR_Init+0x38>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	20be      	movs	r0, #190	@ 0xbe
 8000db0:	4798      	blx	r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	2bbc      	cmp	r3, #188	@ 0xbc
 8000db6:	d002      	beq.n	8000dbe <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	e009      	b.n	8000dd2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <BSP_HSENSOR_Init+0x3c>)
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <BSP_HSENSOR_Init+0x38>)
 8000dc2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <BSP_HSENSOR_Init+0x3c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	20be      	movs	r0, #190	@ 0xbe
 8000dcc:	4798      	blx	r3
    ret = HSENSOR_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	200002f8 	.word	0x200002f8

08000de4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <BSP_HSENSOR_ReadHumidity+0x18>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	20be      	movs	r0, #190	@ 0xbe
 8000df0:	4798      	blx	r3
 8000df2:	eef0 7a40 	vmov.f32	s15, s0
}
 8000df6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200002f8 	.word	0x200002f8

08000e00 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <BSP_MAGNETO_Init+0x50>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	4798      	blx	r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b3d      	cmp	r3, #61	@ 0x3d
 8000e14:	d002      	beq.n	8000e1c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e013      	b.n	8000e44 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <BSP_MAGNETO_Init+0x54>)
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e50 <BSP_MAGNETO_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8000e22:	2358      	movs	r3, #88	@ 0x58
 8000e24:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8000e32:	2340      	movs	r3, #64	@ 0x40
 8000e34:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <BSP_MAGNETO_Init+0x54>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	463a      	mov	r2, r7
 8000e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e42:	4798      	blx	r3
  } 

  return ret;  
 8000e44:	79fb      	ldrb	r3, [r7, #7]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000010 	.word	0x20000010
 8000e54:	200002fc 	.word	0x200002fc

08000e58 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d009      	beq.n	8000e7c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	4798      	blx	r3
    }
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200002fc 	.word	0x200002fc

08000e88 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <BSP_PSENSOR_Init+0x38>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	20ba      	movs	r0, #186	@ 0xba
 8000e94:	4798      	blx	r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	2bb1      	cmp	r3, #177	@ 0xb1
 8000e9a:	d002      	beq.n	8000ea2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	e009      	b.n	8000eb6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <BSP_PSENSOR_Init+0x3c>)
 8000ea4:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <BSP_PSENSOR_Init+0x38>)
 8000ea6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <BSP_PSENSOR_Init+0x3c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	20ba      	movs	r0, #186	@ 0xba
 8000eb0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000eb6:	687b      	ldr	r3, [r7, #4]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000044 	.word	0x20000044
 8000ec4:	20000300 	.word	0x20000300

08000ec8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <BSP_PSENSOR_ReadPressure+0x18>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	20ba      	movs	r0, #186	@ 0xba
 8000ed4:	4798      	blx	r3
 8000ed6:	eef0 7a40 	vmov.f32	s15, s0
}
 8000eda:	eeb0 0a67 	vmov.f32	s0, s15
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000300 	.word	0x20000300

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <HAL_MspInit+0x44>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_MspInit+0x44>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	2294      	movs	r2, #148	@ 0x94
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 f851 	bl	8005ff4 <memset>
  if(hi2c->Instance==I2C2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <HAL_I2C_MspInit+0xb0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d13b      	bne.n	8000fd4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 ff69 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f74:	f7ff fd6a 	bl	8000a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_I2C_MspInit+0xb4>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7c:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <HAL_I2C_MspInit+0xb4>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <HAL_I2C_MspInit+0xb4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f90:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f98:	2312      	movs	r3, #18
 8000f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000faa:	2304      	movs	r3, #4
 8000fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <HAL_I2C_MspInit+0xb8>)
 8000fb8:	f000 fea0 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_I2C_MspInit+0xb4>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_I2C_MspInit+0xb4>)
 8000fc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_I2C_MspInit+0xb4>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000fd4:	bf00      	nop
 8000fd6:	37b8      	adds	r7, #184	@ 0xb8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40005800 	.word	0x40005800
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <HAL_I2C_MspDeInit+0x3c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d10f      	bne.n	800101a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_I2C_MspDeInit+0x40>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_I2C_MspDeInit+0x40>)
 8001000:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001004:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001006:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800100a:	4808      	ldr	r0, [pc, #32]	@ (800102c <HAL_I2C_MspDeInit+0x44>)
 800100c:	f001 f808 	bl	8002020 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001010:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <HAL_I2C_MspDeInit+0x44>)
 8001016:	f001 f803 	bl	8002020 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40005800 	.word	0x40005800
 8001028:	40021000 	.word	0x40021000
 800102c:	48000400 	.word	0x48000400

08001030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001040:	d113      	bne.n	800106a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_TIM_Base_MspInit+0x44>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_TIM_Base_MspInit+0x44>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6593      	str	r3, [r2, #88]	@ 0x58
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_TIM_Base_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	201c      	movs	r0, #28
 8001060:	f000 fe15 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001064:	201c      	movs	r0, #28
 8001066:	f000 fe2e 	bl	8001cc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ae      	sub	sp, #184	@ 0xb8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2294      	movs	r2, #148	@ 0x94
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f004 ffab 	bl	8005ff4 <memset>
  if(huart->Instance==USART1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <HAL_UART_MspInit+0xb0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d13a      	bne.n	800111e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010ac:	2300      	movs	r3, #0
 80010ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fec3 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010c0:	f7ff fcc4 	bl	8000a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_UART_MspInit+0xb4>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c8:	4a18      	ldr	r2, [pc, #96]	@ (800112c <HAL_UART_MspInit+0xb4>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_UART_MspInit+0xb4>)
 80010d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_UART_MspInit+0xb4>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	4a12      	ldr	r2, [pc, #72]	@ (800112c <HAL_UART_MspInit+0xb4>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HAL_UART_MspInit+0xb4>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f4:	23c0      	movs	r3, #192	@ 0xc0
 80010f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800110c:	2307      	movs	r3, #7
 800110e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_UART_MspInit+0xb8>)
 800111a:	f000 fdef 	bl	8001cfc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	37b8      	adds	r7, #184	@ 0xb8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40013800 	.word	0x40013800
 800112c:	40021000 	.word	0x40021000
 8001130:	48000400 	.word	0x48000400

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 fc85 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <TIM2_IRQHandler+0x10>)
 800119a:	f003 fc31 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000014c 	.word	0x2000014c

080011a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80011ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011b0:	f001 f840 	bl	8002234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f004 ff0c 	bl	8006004 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200a0000 	.word	0x200a0000
 8001218:	00000400 	.word	0x00000400
 800121c:	20000304 	.word	0x20000304
 8001220:	20000458 	.word	0x20000458

08001224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800124c:	f7ff ffea 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <LoopForever+0x6>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	@ (8001288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <LoopForever+0xe>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	@ (8001294 <LoopForever+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f004 fecb 	bl	8006010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127a:	f7ff fa2f 	bl	80006dc <main>

0800127e <LoopForever>:

LoopForever:
    b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001280:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800128c:	08006a28 	.word	0x08006a28
  ldr r2, =_sbss
 8001290:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001294:	20000454 	.word	0x20000454

08001298 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_IRQHandler>

0800129a <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2120      	movs	r1, #32
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fce8 	bl	8000c80 <SENSOR_IO_Read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f023 0304 	bic.w	r3, r3, #4
 80012ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f023 0303 	bic.w	r3, r3, #3
 80012ca:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012da:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	2120      	movs	r1, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fcb1 	bl	8000c4c <SENSOR_IO_Write>
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001300:	f7ff fc9a 	bl	8000c38 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	210f      	movs	r1, #15
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcb8 	bl	8000c80 <SENSOR_IO_Read>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	b2d8      	uxtb	r0, r3
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	2302      	movs	r3, #2
 8001334:	21b0      	movs	r1, #176	@ 0xb0
 8001336:	f7ff fcc1 	bl	8000cbc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001342:	7b7b      	ldrb	r3, [r7, #13]
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	b2d8      	uxtb	r0, r3
 800134e:	f107 020c 	add.w	r2, r7, #12
 8001352:	2302      	movs	r3, #2
 8001354:	21b6      	movs	r1, #182	@ 0xb6
 8001356:	f7ff fcb1 	bl	8000cbc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2d8      	uxtb	r0, r3
 800136c:	f107 020c 	add.w	r2, r7, #12
 8001370:	2302      	movs	r3, #2
 8001372:	21ba      	movs	r1, #186	@ 0xba
 8001374:	f7ff fca2 	bl	8000cbc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001378:	7b7b      	ldrb	r3, [r7, #13]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	b2d8      	uxtb	r0, r3
 800138a:	f107 020c 	add.w	r2, r7, #12
 800138e:	2302      	movs	r3, #2
 8001390:	21a8      	movs	r1, #168	@ 0xa8
 8001392:	f7ff fc93 	bl	8000cbc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001396:	7b7b      	ldrb	r3, [r7, #13]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7b3b      	ldrb	r3, [r7, #12]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80013a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80013ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013cc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80013d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f2:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80013f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013fa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001402:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001406:	edd7 7a04 	vldr	s15, [r7, #16]
 800140a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001450 <HTS221_H_ReadHumidity+0x130>
 800140e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	dd01      	ble.n	800141c <HTS221_H_ReadHumidity+0xfc>
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HTS221_H_ReadHumidity+0x134>)
 800141a:	e00a      	b.n	8001432 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800141c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	d502      	bpl.n	8001430 <HTS221_H_ReadHumidity+0x110>
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e000      	b.n	8001432 <HTS221_H_ReadHumidity+0x112>
 8001430:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001432:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001434:	edd7 7a04 	vldr	s15, [r7, #16]
 8001438:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800143c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001440:	eef0 7a66 	vmov.f32	s15, s13
}
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	447a0000 	.word	0x447a0000
 8001454:	447a0000 	.word	0x447a0000

08001458 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	463b      	mov	r3, r7
 8001460:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001464:	783b      	ldrb	r3, [r7, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	2120      	movs	r1, #32
 800146a:	203c      	movs	r0, #60	@ 0x3c
 800146c:	f7ff fbee 	bl	8000c4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	461a      	mov	r2, r3
 8001474:	2121      	movs	r1, #33	@ 0x21
 8001476:	203c      	movs	r0, #60	@ 0x3c
 8001478:	f7ff fbe8 	bl	8000c4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800147c:	78bb      	ldrb	r3, [r7, #2]
 800147e:	461a      	mov	r2, r3
 8001480:	2122      	movs	r1, #34	@ 0x22
 8001482:	203c      	movs	r0, #60	@ 0x3c
 8001484:	f7ff fbe2 	bl	8000c4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	461a      	mov	r2, r3
 800148c:	2123      	movs	r1, #35	@ 0x23
 800148e:	203c      	movs	r0, #60	@ 0x3c
 8001490:	f7ff fbdc 	bl	8000c4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001494:	793b      	ldrb	r3, [r7, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	2124      	movs	r1, #36	@ 0x24
 800149a:	203c      	movs	r0, #60	@ 0x3c
 800149c:	f7ff fbd6 	bl	8000c4c <SENSOR_IO_Write>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80014b2:	2122      	movs	r1, #34	@ 0x22
 80014b4:	203c      	movs	r0, #60	@ 0x3c
 80014b6:	f7ff fbe3 	bl	8000c80 <SENSOR_IO_Read>
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f023 0303 	bic.w	r3, r3, #3
 80014c4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f043 0303 	orr.w	r3, r3, #3
 80014cc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	461a      	mov	r2, r3
 80014d2:	2122      	movs	r1, #34	@ 0x22
 80014d4:	203c      	movs	r0, #60	@ 0x3c
 80014d6:	f7ff fbb9 	bl	8000c4c <SENSOR_IO_Write>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80014e6:	f7ff fba7 	bl	8000c38 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80014ea:	210f      	movs	r1, #15
 80014ec:	203c      	movs	r0, #60	@ 0x3c
 80014ee:	f7ff fbc7 	bl	8000c80 <SENSOR_IO_Read>
 80014f2:	4603      	mov	r3, r0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001506:	2122      	movs	r1, #34	@ 0x22
 8001508:	203c      	movs	r0, #60	@ 0x3c
 800150a:	f7ff fbb9 	bl	8000c80 <SENSOR_IO_Read>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	f023 0320 	bic.w	r3, r3, #32
 8001518:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	461a      	mov	r2, r3
 800152c:	2122      	movs	r1, #34	@ 0x22
 800152e:	203c      	movs	r0, #60	@ 0x3c
 8001530:	f7ff fb8c 	bl	8000c4c <SENSOR_IO_Write>
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001544:	2300      	movs	r3, #0
 8001546:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001552:	2121      	movs	r1, #33	@ 0x21
 8001554:	203c      	movs	r0, #60	@ 0x3c
 8001556:	f7ff fb93 	bl	8000c80 <SENSOR_IO_Read>
 800155a:	4603      	mov	r3, r0
 800155c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	2306      	movs	r3, #6
 8001564:	21a8      	movs	r1, #168	@ 0xa8
 8001566:	203c      	movs	r0, #60	@ 0x3c
 8001568:	f7ff fba8 	bl	8000cbc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800156c:	2300      	movs	r3, #0
 800156e:	77fb      	strb	r3, [r7, #31]
 8001570:	e01a      	b.n	80015a8 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001572:	7ffb      	ldrb	r3, [r7, #31]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	3301      	adds	r3, #1
 8001578:	3320      	adds	r3, #32
 800157a:	443b      	add	r3, r7
 800157c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	7ffa      	ldrb	r2, [r7, #31]
 8001586:	0052      	lsls	r2, r2, #1
 8001588:	3220      	adds	r2, #32
 800158a:	443a      	add	r2, r7
 800158c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001590:	4413      	add	r3, r2
 8001592:	b29a      	uxth	r2, r3
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	b212      	sxth	r2, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	3320      	adds	r3, #32
 800159c:	443b      	add	r3, r7
 800159e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	3301      	adds	r3, #1
 80015a6:	77fb      	strb	r3, [r7, #31]
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d9e1      	bls.n	8001572 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80015b4:	2b60      	cmp	r3, #96	@ 0x60
 80015b6:	d013      	beq.n	80015e0 <LIS3MDL_MagReadXYZ+0xa4>
 80015b8:	2b60      	cmp	r3, #96	@ 0x60
 80015ba:	dc14      	bgt.n	80015e6 <LIS3MDL_MagReadXYZ+0xaa>
 80015bc:	2b40      	cmp	r3, #64	@ 0x40
 80015be:	d00c      	beq.n	80015da <LIS3MDL_MagReadXYZ+0x9e>
 80015c0:	2b40      	cmp	r3, #64	@ 0x40
 80015c2:	dc10      	bgt.n	80015e6 <LIS3MDL_MagReadXYZ+0xaa>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <LIS3MDL_MagReadXYZ+0x92>
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	d003      	beq.n	80015d4 <LIS3MDL_MagReadXYZ+0x98>
 80015cc:	e00b      	b.n	80015e6 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <LIS3MDL_MagReadXYZ+0xf8>)
 80015d0:	61bb      	str	r3, [r7, #24]
    break;
 80015d2:	e008      	b.n	80015e6 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <LIS3MDL_MagReadXYZ+0xfc>)
 80015d6:	61bb      	str	r3, [r7, #24]
    break;
 80015d8:	e005      	b.n	80015e6 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <LIS3MDL_MagReadXYZ+0x100>)
 80015dc:	61bb      	str	r3, [r7, #24]
    break;
 80015de:	e002      	b.n	80015e6 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <LIS3MDL_MagReadXYZ+0x104>)
 80015e2:	61bb      	str	r3, [r7, #24]
    break;    
 80015e4:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	77fb      	strb	r3, [r7, #31]
 80015ea:	e01a      	b.n	8001622 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	3320      	adds	r3, #32
 80015f2:	443b      	add	r3, r7
 80015f4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001600:	edd7 7a06 	vldr	s15, [r7, #24]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001614:	ee17 2a90 	vmov	r2, s15
 8001618:	b212      	sxth	r2, r2
 800161a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	3301      	adds	r3, #1
 8001620:	77fb      	strb	r3, [r7, #31]
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d9e1      	bls.n	80015ec <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	3e0f5c29 	.word	0x3e0f5c29
 8001638:	3e947ae1 	.word	0x3e947ae1
 800163c:	3edc28f6 	.word	0x3edc28f6
 8001640:	3f147ae1 	.word	0x3f147ae1

08001644 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f879 	bl	8001748 <LPS22HB_Init>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800166c:	f7ff fae4 	bl	8000c38 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	210f      	movs	r1, #15
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb02 	bl	8000c80 <SENSOR_IO_Read>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	74fb      	strb	r3, [r7, #19]
 800169e:	e013      	b.n	80016c8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	7cfb      	ldrb	r3, [r7, #19]
 80016a6:	3328      	adds	r3, #40	@ 0x28
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	7cfc      	ldrb	r4, [r7, #19]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f7ff fae6 	bl	8000c80 <SENSOR_IO_Read>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	f104 0318 	add.w	r3, r4, #24
 80016bc:	443b      	add	r3, r7
 80016be:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80016c2:	7cfb      	ldrb	r3, [r7, #19]
 80016c4:	3301      	adds	r3, #1
 80016c6:	74fb      	strb	r3, [r7, #19]
 80016c8:	7cfb      	ldrb	r3, [r7, #19]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d9e8      	bls.n	80016a0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	74fb      	strb	r3, [r7, #19]
 80016d2:	e00f      	b.n	80016f4 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80016d4:	7cfb      	ldrb	r3, [r7, #19]
 80016d6:	3318      	adds	r3, #24
 80016d8:	443b      	add	r3, r7
 80016da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016de:	461a      	mov	r2, r3
 80016e0:	7cfb      	ldrb	r3, [r7, #19]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80016ee:	7cfb      	ldrb	r3, [r7, #19]
 80016f0:	3301      	adds	r3, #1
 80016f2:	74fb      	strb	r3, [r7, #19]
 80016f4:	7cfb      	ldrb	r3, [r7, #19]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d9ec      	bls.n	80016d4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800170a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2264      	movs	r2, #100	@ 0x64
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	da01      	bge.n	8001720 <LPS22HB_P_ReadPressure+0x94>
 800171c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001720:	131b      	asrs	r3, r3, #12
 8001722:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001744 <LPS22HB_P_ReadPressure+0xb8>
 8001732:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001736:	eef0 7a66 	vmov.f32	s15, s13
}
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	42c80000 	.word	0x42c80000

08001748 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	211a      	movs	r1, #26
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa91 	bl	8000c80 <SENSOR_IO_Read>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	211a      	movs	r1, #26
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa66 	bl	8000c4c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2110      	movs	r1, #16
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fa7a 	bl	8000c80 <SENSOR_IO_Read>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001796:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800179e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	f023 0302 	bic.w	r3, r3, #2
 80017a6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	2110      	movs	r1, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fa47 	bl	8000c4c <SENSOR_IO_Write>
}  
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80017d4:	2110      	movs	r1, #16
 80017d6:	20d4      	movs	r0, #212	@ 0xd4
 80017d8:	f7ff fa52 	bl	8000c80 <SENSOR_IO_Read>
 80017dc:	4603      	mov	r3, r0
 80017de:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80017e4:	7bbb      	ldrb	r3, [r7, #14]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80017ec:	7bba      	ldrb	r2, [r7, #14]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	461a      	mov	r2, r3
 80017f8:	2110      	movs	r1, #16
 80017fa:	20d4      	movs	r0, #212	@ 0xd4
 80017fc:	f7ff fa26 	bl	8000c4c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001800:	2112      	movs	r1, #18
 8001802:	20d4      	movs	r0, #212	@ 0xd4
 8001804:	f7ff fa3c 	bl	8000c80 <SENSOR_IO_Read>
 8001808:	4603      	mov	r3, r0
 800180a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b29b      	uxth	r3, r3
 8001812:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800181a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800181c:	7bba      	ldrb	r2, [r7, #14]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	4313      	orrs	r3, r2
 8001822:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001824:	7bbb      	ldrb	r3, [r7, #14]
 8001826:	461a      	mov	r2, r3
 8001828:	2112      	movs	r1, #18
 800182a:	20d4      	movs	r0, #212	@ 0xd4
 800182c:	f7ff fa0e 	bl	8000c4c <SENSOR_IO_Write>
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001842:	2110      	movs	r1, #16
 8001844:	20d4      	movs	r0, #212	@ 0xd4
 8001846:	f7ff fa1b 	bl	8000c80 <SENSOR_IO_Read>
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	461a      	mov	r2, r3
 800185a:	2110      	movs	r1, #16
 800185c:	20d4      	movs	r0, #212	@ 0xd4
 800185e:	f7ff f9f5 	bl	8000c4c <SENSOR_IO_Write>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800186e:	f7ff f9e3 	bl	8000c38 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001872:	210f      	movs	r1, #15
 8001874:	20d4      	movs	r0, #212	@ 0xd4
 8001876:	f7ff fa03 	bl	8000c80 <SENSOR_IO_Read>
 800187a:	4603      	mov	r3, r0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}

08001880 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800188e:	2115      	movs	r1, #21
 8001890:	20d4      	movs	r0, #212	@ 0xd4
 8001892:	f7ff f9f5 	bl	8000c80 <SENSOR_IO_Read>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	f023 0310 	bic.w	r3, r3, #16
 80018a0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	461a      	mov	r2, r3
 80018b4:	2115      	movs	r1, #21
 80018b6:	20d4      	movs	r0, #212	@ 0xd4
 80018b8:	f7ff f9c8 	bl	8000c4c <SENSOR_IO_Write>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80018da:	2110      	movs	r1, #16
 80018dc:	20d4      	movs	r0, #212	@ 0xd4
 80018de:	f7ff f9cf 	bl	8000c80 <SENSOR_IO_Read>
 80018e2:	4603      	mov	r3, r0
 80018e4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80018e6:	f107 0208 	add.w	r2, r7, #8
 80018ea:	2306      	movs	r3, #6
 80018ec:	2128      	movs	r1, #40	@ 0x28
 80018ee:	20d4      	movs	r0, #212	@ 0xd4
 80018f0:	f7ff f9e4 	bl	8000cbc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	77fb      	strb	r3, [r7, #31]
 80018f8:	e01a      	b.n	8001930 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80018fa:	7ffb      	ldrb	r3, [r7, #31]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	3301      	adds	r3, #1
 8001900:	3320      	adds	r3, #32
 8001902:	443b      	add	r3, r7
 8001904:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	7ffa      	ldrb	r2, [r7, #31]
 800190e:	0052      	lsls	r2, r2, #1
 8001910:	3220      	adds	r2, #32
 8001912:	443a      	add	r2, r7
 8001914:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001918:	4413      	add	r3, r2
 800191a:	b29a      	uxth	r2, r3
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	b212      	sxth	r2, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	3320      	adds	r3, #32
 8001924:	443b      	add	r3, r7
 8001926:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	3301      	adds	r3, #1
 800192e:	77fb      	strb	r3, [r7, #31]
 8001930:	7ffb      	ldrb	r3, [r7, #31]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d9e1      	bls.n	80018fa <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d829      	bhi.n	8001994 <LSM6DSL_AccReadXYZ+0xd0>
 8001940:	a201      	add	r2, pc, #4	@ (adr r2, 8001948 <LSM6DSL_AccReadXYZ+0x84>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	0800197d 	.word	0x0800197d
 800194c:	08001995 	.word	0x08001995
 8001950:	08001995 	.word	0x08001995
 8001954:	08001995 	.word	0x08001995
 8001958:	0800198f 	.word	0x0800198f
 800195c:	08001995 	.word	0x08001995
 8001960:	08001995 	.word	0x08001995
 8001964:	08001995 	.word	0x08001995
 8001968:	08001983 	.word	0x08001983
 800196c:	08001995 	.word	0x08001995
 8001970:	08001995 	.word	0x08001995
 8001974:	08001995 	.word	0x08001995
 8001978:	08001989 	.word	0x08001989
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <LSM6DSL_AccReadXYZ+0x11c>)
 800197e:	61bb      	str	r3, [r7, #24]
    break;
 8001980:	e008      	b.n	8001994 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <LSM6DSL_AccReadXYZ+0x120>)
 8001984:	61bb      	str	r3, [r7, #24]
    break;
 8001986:	e005      	b.n	8001994 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <LSM6DSL_AccReadXYZ+0x124>)
 800198a:	61bb      	str	r3, [r7, #24]
    break;
 800198c:	e002      	b.n	8001994 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <LSM6DSL_AccReadXYZ+0x128>)
 8001990:	61bb      	str	r3, [r7, #24]
    break;    
 8001992:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
 8001998:	e01a      	b.n	80019d0 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800199a:	7ffb      	ldrb	r3, [r7, #31]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	3320      	adds	r3, #32
 80019a0:	443b      	add	r3, r7
 80019a2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c2:	ee17 2a90 	vmov	r2, s15
 80019c6:	b212      	sxth	r2, r2
 80019c8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	3301      	adds	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d9e1      	bls.n	800199a <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	3d79db23 	.word	0x3d79db23
 80019e4:	3df9db23 	.word	0x3df9db23
 80019e8:	3e79db23 	.word	0x3e79db23
 80019ec:	3ef9db23 	.word	0x3ef9db23

080019f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f000 f93c 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f80d 	bl	8001a20 <HAL_InitTick>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	e001      	b.n	8001a16 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a12:	f7ff fa67 	bl	8000ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a16:	79fb      	ldrb	r3, [r7, #7]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <HAL_InitTick+0x6c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d023      	beq.n	8001a7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_InitTick+0x70>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_InitTick+0x6c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f949 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d809      	bhi.n	8001a70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a64:	f000 f913 	bl	8001c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a68:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <HAL_InitTick+0x74>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e007      	b.n	8001a80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e004      	b.n	8001a80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e001      	b.n	8001a80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000088 	.word	0x20000088
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000084 	.word	0x20000084

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000088 	.word	0x20000088
 8001abc:	20000308 	.word	0x20000308

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000308 	.word	0x20000308

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	@ (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	@ (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	@ 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c58:	f7ff ff8e 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff29 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff3e 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff8e 	bl	8001bcc <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5d 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff31 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa2 	bl	8001c34 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e166      	b.n	8001fda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8158 	beq.w	8001fd4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x40>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d123      	bne.n	8001e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80b2 	beq.w	8001fd4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b61      	ldr	r3, [pc, #388]	@ (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e74:	4a60      	ldr	r2, [pc, #384]	@ (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e88:	4a5c      	ldr	r2, [pc, #368]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eb2:	d02b      	beq.n	8001f0c <HAL_GPIO_Init+0x210>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a52      	ldr	r2, [pc, #328]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d025      	beq.n	8001f08 <HAL_GPIO_Init+0x20c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a51      	ldr	r2, [pc, #324]	@ (8002004 <HAL_GPIO_Init+0x308>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01f      	beq.n	8001f04 <HAL_GPIO_Init+0x208>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a50      	ldr	r2, [pc, #320]	@ (8002008 <HAL_GPIO_Init+0x30c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d019      	beq.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a4f      	ldr	r2, [pc, #316]	@ (800200c <HAL_GPIO_Init+0x310>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x200>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a4e      	ldr	r2, [pc, #312]	@ (8002010 <HAL_GPIO_Init+0x314>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1fc>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a4d      	ldr	r2, [pc, #308]	@ (8002014 <HAL_GPIO_Init+0x318>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1f8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a4c      	ldr	r2, [pc, #304]	@ (8002018 <HAL_GPIO_Init+0x31c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1f4>
 8001eec:	2307      	movs	r3, #7
 8001eee:	e00e      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	e00c      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	e00a      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef8:	2305      	movs	r3, #5
 8001efa:	e008      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e004      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_GPIO_Init+0x212>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	f002 0203 	and.w	r2, r2, #3
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4093      	lsls	r3, r2
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f1e:	4937      	ldr	r1, [pc, #220]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f50:	4a32      	ldr	r2, [pc, #200]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f56:	4b31      	ldr	r3, [pc, #196]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f7a:	4a28      	ldr	r2, [pc, #160]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f80:	4b26      	ldr	r3, [pc, #152]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fce:	4a13      	ldr	r2, [pc, #76]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f ae91 	bne.w	8001d0c <HAL_GPIO_Init+0x10>
  }
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000
 8002000:	48000400 	.word	0x48000400
 8002004:	48000800 	.word	0x48000800
 8002008:	48000c00 	.word	0x48000c00
 800200c:	48001000 	.word	0x48001000
 8002010:	48001400 	.word	0x48001400
 8002014:	48001800 	.word	0x48001800
 8002018:	48001c00 	.word	0x48001c00
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800202e:	e0c9      	b.n	80021c4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80bc 	beq.w	80021be <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002046:	4a66      	ldr	r2, [pc, #408]	@ (80021e0 <HAL_GPIO_DeInit+0x1c0>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800206e:	d02b      	beq.n	80020c8 <HAL_GPIO_DeInit+0xa8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a5c      	ldr	r2, [pc, #368]	@ (80021e4 <HAL_GPIO_DeInit+0x1c4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d025      	beq.n	80020c4 <HAL_GPIO_DeInit+0xa4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a5b      	ldr	r2, [pc, #364]	@ (80021e8 <HAL_GPIO_DeInit+0x1c8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d01f      	beq.n	80020c0 <HAL_GPIO_DeInit+0xa0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a5a      	ldr	r2, [pc, #360]	@ (80021ec <HAL_GPIO_DeInit+0x1cc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d019      	beq.n	80020bc <HAL_GPIO_DeInit+0x9c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a59      	ldr	r2, [pc, #356]	@ (80021f0 <HAL_GPIO_DeInit+0x1d0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_GPIO_DeInit+0x98>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a58      	ldr	r2, [pc, #352]	@ (80021f4 <HAL_GPIO_DeInit+0x1d4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00d      	beq.n	80020b4 <HAL_GPIO_DeInit+0x94>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a57      	ldr	r2, [pc, #348]	@ (80021f8 <HAL_GPIO_DeInit+0x1d8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <HAL_GPIO_DeInit+0x90>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a56      	ldr	r2, [pc, #344]	@ (80021fc <HAL_GPIO_DeInit+0x1dc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_GPIO_DeInit+0x8c>
 80020a8:	2307      	movs	r3, #7
 80020aa:	e00e      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020ac:	2308      	movs	r3, #8
 80020ae:	e00c      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020b0:	2306      	movs	r3, #6
 80020b2:	e00a      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020b4:	2305      	movs	r3, #5
 80020b6:	e008      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020b8:	2304      	movs	r3, #4
 80020ba:	e006      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020bc:	2303      	movs	r3, #3
 80020be:	e004      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_GPIO_DeInit+0xaa>
 80020c8:	2300      	movs	r3, #0
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	4093      	lsls	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d132      	bne.n	8002140 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80020da:	4b49      	ldr	r3, [pc, #292]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4947      	ldr	r1, [pc, #284]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80020e8:	4b45      	ldr	r3, [pc, #276]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4943      	ldr	r1, [pc, #268]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80020f6:	4b42      	ldr	r3, [pc, #264]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4940      	ldr	r1, [pc, #256]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 8002100:	4013      	ands	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002104:	4b3e      	ldr	r3, [pc, #248]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	493c      	ldr	r1, [pc, #240]	@ (8002200 <HAL_GPIO_DeInit+0x1e0>)
 800210e:	4013      	ands	r3, r2
 8002110:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002122:	4a2f      	ldr	r2, [pc, #188]	@ (80021e0 <HAL_GPIO_DeInit+0x1c0>)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43da      	mvns	r2, r3
 8002132:	482b      	ldr	r0, [pc, #172]	@ (80021e0 <HAL_GPIO_DeInit+0x1c0>)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	400a      	ands	r2, r1
 800213a:	3302      	adds	r3, #2
 800213c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2103      	movs	r1, #3
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	08d2      	lsrs	r2, r2, #3
 8002174:	4019      	ands	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2103      	movs	r1, #3
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	2101      	movs	r1, #1
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2103      	movs	r1, #3
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	401a      	ands	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f47f af2f 	bne.w	8002030 <HAL_GPIO_DeInit+0x10>
  }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	48001000 	.word	0x48001000
 80021f4:	48001400 	.word	0x48001400
 80021f8:	48001800 	.word	0x48001800
 80021fc:	48001c00 	.word	0x48001c00
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002220:	e002      	b.n	8002228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800224a:	4a05      	ldr	r2, [pc, #20]	@ (8002260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fa22 	bl	800069c <HAL_GPIO_EXTI_Callback>
  }
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e08d      	b.n	8002392 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fe4e 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	@ 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	e006      	b.n	80022ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d108      	bne.n	8002306 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	e007      	b.n	8002316 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002314:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002324:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69d9      	ldr	r1, [r3, #28]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1a      	ldr	r2, [r3, #32]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e021      	b.n	80023f0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	@ 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe fe0f 	bl	8000fe8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	817b      	strh	r3, [r7, #10]
 800240a:	460b      	mov	r3, r1
 800240c:	813b      	strh	r3, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	f040 80f9 	bne.w	8002612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_I2C_Mem_Write+0x34>
 8002426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002432:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0ed      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_I2C_Mem_Write+0x4e>
 8002442:	2302      	movs	r3, #2
 8002444:	e0e6      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800244e:	f7ff fb37 	bl	8001ac0 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2319      	movs	r3, #25
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fac3 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d1      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2221      	movs	r2, #33	@ 0x21
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2240      	movs	r2, #64	@ 0x40
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a3a      	ldr	r2, [r7, #32]
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002490:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002498:	88f8      	ldrh	r0, [r7, #6]
 800249a:	893a      	ldrh	r2, [r7, #8]
 800249c:	8979      	ldrh	r1, [r7, #10]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4603      	mov	r3, r0
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f9d3 	bl	8002854 <I2C_RequestMemoryWrite>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0a9      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2bff      	cmp	r3, #255	@ 0xff
 80024c8:	d90e      	bls.n	80024e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	22ff      	movs	r2, #255	@ 0xff
 80024ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	2300      	movs	r3, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fc47 	bl	8002d74 <I2C_TransferConfig>
 80024e6:	e00f      	b.n	8002508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	8979      	ldrh	r1, [r7, #10]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fc36 	bl	8002d74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fac6 	bl	8002a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e07b      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d034      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x1c8>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d130      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002564:	2200      	movs	r2, #0
 8002566:	2180      	movs	r1, #128	@ 0x80
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa3f 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e04d      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	@ 0xff
 8002580:	d90e      	bls.n	80025a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	22ff      	movs	r2, #255	@ 0xff
 8002586:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fbeb 	bl	8002d74 <I2C_TransferConfig>
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	2300      	movs	r3, #0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fbda 	bl	8002d74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d19e      	bne.n	8002508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 faac 	bl	8002b2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e01a      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2220      	movs	r2, #32
 80025e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_I2C_Mem_Write+0x224>)
 80025f2:	400b      	ands	r3, r1
 80025f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	fe00e800 	.word	0xfe00e800

08002620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 80fd 	bne.w	8002842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_I2C_Mem_Read+0x34>
 800264e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0f1      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_I2C_Mem_Read+0x4e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ea      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002676:	f7ff fa23 	bl	8001ac0 <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2319      	movs	r3, #25
 8002682:	2201      	movs	r2, #1
 8002684:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f9af 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d5      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2222      	movs	r2, #34	@ 0x22
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c0:	88f8      	ldrh	r0, [r7, #6]
 80026c2:	893a      	ldrh	r2, [r7, #8]
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4603      	mov	r3, r0
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f913 	bl	80028fc <I2C_RequestMemoryRead>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0ad      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bff      	cmp	r3, #255	@ 0xff
 80026f0:	d90e      	bls.n	8002710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	4b52      	ldr	r3, [pc, #328]	@ (800284c <HAL_I2C_Mem_Read+0x22c>)
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fb33 	bl	8002d74 <I2C_TransferConfig>
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_I2C_Mem_Read+0x22c>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fb22 	bl	8002d74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002736:	2200      	movs	r2, #0
 8002738:	2104      	movs	r1, #4
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f956 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e07c      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d034      	beq.n	80027f0 <HAL_I2C_Mem_Read+0x1d0>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d130      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	2200      	movs	r2, #0
 8002796:	2180      	movs	r1, #128	@ 0x80
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f927 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e04d      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2bff      	cmp	r3, #255	@ 0xff
 80027b0:	d90e      	bls.n	80027d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	2300      	movs	r3, #0
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fad3 	bl	8002d74 <I2C_TransferConfig>
 80027ce:	e00f      	b.n	80027f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	8979      	ldrh	r1, [r7, #10]
 80027e2:	2300      	movs	r3, #0
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fac2 	bl	8002d74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d19a      	bne.n	8002730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f994 	bl	8002b2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e01a      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2220      	movs	r2, #32
 8002814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <HAL_I2C_Mem_Read+0x230>)
 8002822:	400b      	ands	r3, r1
 8002824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	80002400 	.word	0x80002400
 8002850:	fe00e800 	.word	0xfe00e800

08002854 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	817b      	strh	r3, [r7, #10]
 8002866:	460b      	mov	r3, r1
 8002868:	813b      	strh	r3, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	8979      	ldrh	r1, [r7, #10]
 8002874:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <I2C_RequestMemoryWrite+0xa4>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa79 	bl	8002d74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	69b9      	ldr	r1, [r7, #24]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f909 	bl	8002a9e <I2C_WaitOnTXISFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e02c      	b.n	80028f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d105      	bne.n	80028a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800289c:	893b      	ldrh	r3, [r7, #8]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80028a6:	e015      	b.n	80028d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028a8:	893b      	ldrh	r3, [r7, #8]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	69b9      	ldr	r1, [r7, #24]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f8ef 	bl	8002a9e <I2C_WaitOnTXISFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e012      	b.n	80028f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ca:	893b      	ldrh	r3, [r7, #8]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2200      	movs	r2, #0
 80028dc:	2180      	movs	r1, #128	@ 0x80
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f884 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	80002000 	.word	0x80002000

080028fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	4608      	mov	r0, r1
 8002906:	4611      	mov	r1, r2
 8002908:	461a      	mov	r2, r3
 800290a:	4603      	mov	r3, r0
 800290c:	817b      	strh	r3, [r7, #10]
 800290e:	460b      	mov	r3, r1
 8002910:	813b      	strh	r3, [r7, #8]
 8002912:	4613      	mov	r3, r2
 8002914:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	8979      	ldrh	r1, [r7, #10]
 800291c:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <I2C_RequestMemoryRead+0xa4>)
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2300      	movs	r3, #0
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fa26 	bl	8002d74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f8b6 	bl	8002a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e02c      	b.n	8002996 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002942:	893b      	ldrh	r3, [r7, #8]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28
 800294c:	e015      	b.n	800297a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800294e:	893b      	ldrh	r3, [r7, #8]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	b29b      	uxth	r3, r3
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f89c 	bl	8002a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e012      	b.n	8002996 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002970:	893b      	ldrh	r3, [r7, #8]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2200      	movs	r2, #0
 8002982:	2140      	movs	r1, #64	@ 0x40
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f831 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	80002000 	.word	0x80002000

080029a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d103      	bne.n	80029c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d007      	beq.n	80029e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	619a      	str	r2, [r3, #24]
  }
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fc:	e03b      	b.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8d6 	bl	8002bb4 <I2C_IsErrorOccurred>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e041      	b.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a18:	d02d      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7ff f851 	bl	8001ac0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d122      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d113      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d0b4      	beq.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aaa:	e033      	b.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f87f 	bl	8002bb4 <I2C_IsErrorOccurred>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e031      	b.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ac6:	d025      	beq.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	f7fe fffa 	bl	8001ac0 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11a      	bne.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d013      	beq.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e007      	b.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d1c4      	bne.n	8002aac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b38:	e02f      	b.n	8002b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f838 	bl	8002bb4 <I2C_IsErrorOccurred>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e02d      	b.n	8002baa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fe ffb7 	bl	8001ac0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11a      	bne.n	8002b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d013      	beq.n	8002b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e007      	b.n	8002baa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d1c8      	bne.n	8002b3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	@ 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d068      	beq.n	8002cb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002be8:	e049      	b.n	8002c7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf0:	d045      	beq.n	8002c7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7fe ff65 	bl	8001ac0 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_IsErrorOccurred+0x54>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d13a      	bne.n	8002c7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2a:	d121      	bne.n	8002c70 <I2C_IsErrorOccurred+0xbc>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c32:	d01d      	beq.n	8002c70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d01a      	beq.n	8002c70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c4a:	f7fe ff39 	bl	8001ac0 <HAL_GetTick>
 8002c4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c50:	e00e      	b.n	8002c70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c52:	f7fe ff35 	bl	8001ac0 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b19      	cmp	r3, #25
 8002c5e:	d907      	bls.n	8002c70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f043 0320 	orr.w	r3, r3, #32
 8002c66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c6e:	e006      	b.n	8002c7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d1e9      	bne.n	8002c52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d003      	beq.n	8002c94 <I2C_IsErrorOccurred+0xe0>
 8002c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0aa      	beq.n	8002bea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff fe3b 	bl	80029a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <I2C_IsErrorOccurred+0x1bc>)
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3728      	adds	r7, #40	@ 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	fe00e800 	.word	0xfe00e800

08002d74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	4613      	mov	r3, r2
 8002d84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d8c:	7a7b      	ldrb	r3, [r7, #9]
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002da2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	0d5b      	lsrs	r3, r3, #21
 8002dae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002db2:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <I2C_TransferConfig+0x60>)
 8002db4:	430b      	orrs	r3, r1
 8002db6:	43db      	mvns	r3, r3
 8002db8:	ea02 0103 	and.w	r1, r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	03ff63ff 	.word	0x03ff63ff

08002dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d138      	bne.n	8002e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e032      	b.n	8002e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	@ 0x24
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d139      	bne.n	8002ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e033      	b.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2224      	movs	r2, #36	@ 0x24
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ec0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f18:	d102      	bne.n	8002f20 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f1e:	e00b      	b.n	8002f38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2e:	d102      	bne.n	8002f36 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f34:	e000      	b.n	8002f38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f36:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40007000 	.word	0x40007000

08002f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d141      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f56:	4b4b      	ldr	r3, [pc, #300]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f62:	d131      	bne.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f64:	4b47      	ldr	r3, [pc, #284]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f6a:	4a46      	ldr	r2, [pc, #280]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f74:	4b43      	ldr	r3, [pc, #268]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f7c:	4a41      	ldr	r2, [pc, #260]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f84:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2232      	movs	r2, #50	@ 0x32
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	0c9b      	lsrs	r3, r3, #18
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9a:	e002      	b.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa2:	4b38      	ldr	r3, [pc, #224]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d102      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f2      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fb6:	4b33      	ldr	r3, [pc, #204]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d158      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e057      	b.n	8003078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fce:	4a2d      	ldr	r2, [pc, #180]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fd8:	e04d      	b.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe0:	d141      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fe2:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fee:	d131      	bne.n	8003054 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ff0:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ff6:	4a23      	ldr	r2, [pc, #140]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003000:	4b20      	ldr	r3, [pc, #128]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003008:	4a1e      	ldr	r2, [pc, #120]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800300e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003010:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2232      	movs	r2, #50	@ 0x32
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	4a1c      	ldr	r2, [pc, #112]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	0c9b      	lsrs	r3, r3, #18
 8003022:	3301      	adds	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003026:	e002      	b.n	800302e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3b01      	subs	r3, #1
 800302c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800302e:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303a:	d102      	bne.n	8003042 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f2      	bne.n	8003028 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304e:	d112      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e011      	b.n	8003078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003054:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003064:	e007      	b.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003066:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800306e:	4a05      	ldr	r2, [pc, #20]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003074:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40007000 	.word	0x40007000
 8003088:	20000000 	.word	0x20000000
 800308c:	431bde83 	.word	0x431bde83

08003090 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f000 bc08 	b.w	80038b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a4:	4b96      	ldr	r3, [pc, #600]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ae:	4b94      	ldr	r3, [pc, #592]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80e4 	beq.w	800328e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_RCC_OscConfig+0x4c>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	f040 808b 	bne.w	80031ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f040 8087 	bne.w	80031ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030dc:	4b88      	ldr	r3, [pc, #544]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_OscConfig+0x64>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e3df      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	4b81      	ldr	r3, [pc, #516]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <HAL_RCC_OscConfig+0x7e>
 8003104:	4b7e      	ldr	r3, [pc, #504]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800310c:	e005      	b.n	800311a <HAL_RCC_OscConfig+0x8a>
 800310e:	4b7c      	ldr	r3, [pc, #496]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800311a:	4293      	cmp	r3, r2
 800311c:	d223      	bcs.n	8003166 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fdcc 	bl	8003cc0 <RCC_SetFlashLatencyFromMSIRange>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e3c0      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003132:	4b73      	ldr	r3, [pc, #460]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a72      	ldr	r2, [pc, #456]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b70      	ldr	r3, [pc, #448]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	496d      	ldr	r1, [pc, #436]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003150:	4b6b      	ldr	r3, [pc, #428]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	4968      	ldr	r1, [pc, #416]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
 8003164:	e025      	b.n	80031b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003166:	4b66      	ldr	r3, [pc, #408]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a65      	ldr	r2, [pc, #404]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b63      	ldr	r3, [pc, #396]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4960      	ldr	r1, [pc, #384]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003184:	4b5e      	ldr	r3, [pc, #376]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	495b      	ldr	r1, [pc, #364]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fd8c 	bl	8003cc0 <RCC_SetFlashLatencyFromMSIRange>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e380      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b2:	f000 fcc1 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b51      	ldr	r3, [pc, #324]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	4950      	ldr	r1, [pc, #320]	@ (8003304 <HAL_RCC_OscConfig+0x274>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	fa22 f303 	lsr.w	r3, r2, r3
 80031ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003308 <HAL_RCC_OscConfig+0x278>)
 80031d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031d2:	4b4e      	ldr	r3, [pc, #312]	@ (800330c <HAL_RCC_OscConfig+0x27c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fc22 	bl	8001a20 <HAL_InitTick>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d052      	beq.n	800328c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	e364      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d032      	beq.n	8003258 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031f2:	4b43      	ldr	r3, [pc, #268]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a42      	ldr	r2, [pc, #264]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031fe:	f7fe fc5f 	bl	8001ac0 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003206:	f7fe fc5b 	bl	8001ac0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e34d      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003218:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003224:	4b36      	ldr	r3, [pc, #216]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a35      	ldr	r2, [pc, #212]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b33      	ldr	r3, [pc, #204]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4930      	ldr	r1, [pc, #192]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003242:	4b2f      	ldr	r3, [pc, #188]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	492b      	ldr	r1, [pc, #172]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	e01a      	b.n	800328e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003258:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a28      	ldr	r2, [pc, #160]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003264:	f7fe fc2c 	bl	8001ac0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800326c:	f7fe fc28 	bl	8001ac0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e31a      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1dc>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d073      	beq.n	8003382 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d005      	beq.n	80032ac <HAL_RCC_OscConfig+0x21c>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d10e      	bne.n	80032c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d063      	beq.n	8003380 <HAL_RCC_OscConfig+0x2f0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d15f      	bne.n	8003380 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e2f7      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032cc:	d106      	bne.n	80032dc <HAL_RCC_OscConfig+0x24c>
 80032ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e025      	b.n	8003328 <HAL_RCC_OscConfig+0x298>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e4:	d114      	bne.n	8003310 <HAL_RCC_OscConfig+0x280>
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a05      	ldr	r2, [pc, #20]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a02      	ldr	r2, [pc, #8]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e013      	b.n	8003328 <HAL_RCC_OscConfig+0x298>
 8003300:	40021000 	.word	0x40021000
 8003304:	08006974 	.word	0x08006974
 8003308:	20000000 	.word	0x20000000
 800330c:	20000084 	.word	0x20000084
 8003310:	4ba0      	ldr	r3, [pc, #640]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a9f      	ldr	r2, [pc, #636]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b9d      	ldr	r3, [pc, #628]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a9c      	ldr	r2, [pc, #624]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fbc6 	bl	8001ac0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003338:	f7fe fbc2 	bl	8001ac0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	@ 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e2b4      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334a:	4b92      	ldr	r3, [pc, #584]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x2a8>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fbb2 	bl	8001ac0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fbae 	bl	8001ac0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e2a0      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003372:	4b88      	ldr	r3, [pc, #544]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x2d0>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d060      	beq.n	8003450 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_OscConfig+0x310>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d119      	bne.n	80033ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d116      	bne.n	80033ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_OscConfig+0x328>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e27d      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b76      	ldr	r3, [pc, #472]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	4973      	ldr	r1, [pc, #460]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033cc:	e040      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6e      	ldr	r2, [pc, #440]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe fb6d 	bl	8001ac0 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7fe fb69 	bl	8001ac0 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e25b      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fc:	4b65      	ldr	r3, [pc, #404]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b62      	ldr	r3, [pc, #392]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	495f      	ldr	r1, [pc, #380]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
 800341c:	e018      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341e:	4b5d      	ldr	r3, [pc, #372]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a5c      	ldr	r2, [pc, #368]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe fb49 	bl	8001ac0 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003432:	f7fe fb45 	bl	8001ac0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e237      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003444:	4b53      	ldr	r3, [pc, #332]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03c      	beq.n	80034d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01c      	beq.n	800349e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003464:	4b4b      	ldr	r3, [pc, #300]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800346a:	4a4a      	ldr	r2, [pc, #296]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fb24 	bl	8001ac0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347c:	f7fe fb20 	bl	8001ac0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e212      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348e:	4b41      	ldr	r3, [pc, #260]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ef      	beq.n	800347c <HAL_RCC_OscConfig+0x3ec>
 800349c:	e01b      	b.n	80034d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349e:	4b3d      	ldr	r3, [pc, #244]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80034a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe fb07 	bl	8001ac0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b6:	f7fe fb03 	bl	8001ac0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e1f5      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ef      	bne.n	80034b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a6 	beq.w	8003630 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10d      	bne.n	8003510 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003500:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003510:	4b21      	ldr	r3, [pc, #132]	@ (8003598 <HAL_RCC_OscConfig+0x508>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d118      	bne.n	800354e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351c:	4b1e      	ldr	r3, [pc, #120]	@ (8003598 <HAL_RCC_OscConfig+0x508>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <HAL_RCC_OscConfig+0x508>)
 8003522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003528:	f7fe faca 	bl	8001ac0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003530:	f7fe fac6 	bl	8001ac0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1b8      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <HAL_RCC_OscConfig+0x508>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d108      	bne.n	8003568 <HAL_RCC_OscConfig+0x4d8>
 8003556:	4b0f      	ldr	r3, [pc, #60]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003566:	e029      	b.n	80035bc <HAL_RCC_OscConfig+0x52c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d115      	bne.n	800359c <HAL_RCC_OscConfig+0x50c>
 8003570:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	4a07      	ldr	r2, [pc, #28]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003586:	4a03      	ldr	r2, [pc, #12]	@ (8003594 <HAL_RCC_OscConfig+0x504>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003590:	e014      	b.n	80035bc <HAL_RCC_OscConfig+0x52c>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	40007000 	.word	0x40007000
 800359c:	4b9d      	ldr	r3, [pc, #628]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a2:	4a9c      	ldr	r2, [pc, #624]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ac:	4b99      	ldr	r3, [pc, #612]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	4a98      	ldr	r2, [pc, #608]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d016      	beq.n	80035f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe fa7c 	bl	8001ac0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7fe fa78 	bl	8001ac0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e168      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	4b8c      	ldr	r3, [pc, #560]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ed      	beq.n	80035cc <HAL_RCC_OscConfig+0x53c>
 80035f0:	e015      	b.n	800361e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe fa65 	bl	8001ac0 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fa61 	bl	8001ac0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e151      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003610:	4b80      	ldr	r3, [pc, #512]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ed      	bne.n	80035fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361e:	7ffb      	ldrb	r3, [r7, #31]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b7b      	ldr	r3, [pc, #492]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	4a7a      	ldr	r2, [pc, #488]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03c      	beq.n	80036b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003644:	4b73      	ldr	r3, [pc, #460]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003646:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800364a:	4a72      	ldr	r2, [pc, #456]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe fa34 	bl	8001ac0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800365c:	f7fe fa30 	bl	8001ac0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e122      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800366e:	4b69      	ldr	r3, [pc, #420]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ef      	beq.n	800365c <HAL_RCC_OscConfig+0x5cc>
 800367c:	e01b      	b.n	80036b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800367e:	4b65      	ldr	r3, [pc, #404]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003680:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003684:	4a63      	ldr	r2, [pc, #396]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fe fa17 	bl	8001ac0 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003696:	f7fe fa13 	bl	8001ac0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e105      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80036aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ef      	bne.n	8003696 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80f9 	beq.w	80038b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	f040 80cf 	bne.w	8003868 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036ca:	4b52      	ldr	r3, [pc, #328]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0203 	and.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	429a      	cmp	r2, r3
 80036dc:	d12c      	bne.n	8003738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	3b01      	subs	r3, #1
 80036ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d123      	bne.n	8003738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d11b      	bne.n	8003738 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d113      	bne.n	8003738 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d109      	bne.n	8003738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	3b01      	subs	r3, #1
 8003732:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d071      	beq.n	800381c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d068      	beq.n	8003810 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800373e:	4b35      	ldr	r3, [pc, #212]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800374a:	4b32      	ldr	r3, [pc, #200]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0ac      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800375a:	4b2e      	ldr	r3, [pc, #184]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2d      	ldr	r2, [pc, #180]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003764:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003766:	f7fe f9ab 	bl	8001ac0 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe f9a7 	bl	8001ac0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e099      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003780:	4b24      	ldr	r3, [pc, #144]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800378c:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <HAL_RCC_OscConfig+0x788>)
 8003792:	4013      	ands	r3, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800379c:	3a01      	subs	r2, #1
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	4311      	orrs	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037a6:	0212      	lsls	r2, r2, #8
 80037a8:	4311      	orrs	r1, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037ae:	0852      	lsrs	r2, r2, #1
 80037b0:	3a01      	subs	r2, #1
 80037b2:	0552      	lsls	r2, r2, #21
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037ba:	0852      	lsrs	r2, r2, #1
 80037bc:	3a01      	subs	r2, #1
 80037be:	0652      	lsls	r2, r2, #25
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037c6:	06d2      	lsls	r2, r2, #27
 80037c8:	430a      	orrs	r2, r1
 80037ca:	4912      	ldr	r1, [pc, #72]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037d0:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e8:	f7fe f96a 	bl	8001ac0 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe f966 	bl	8001ac0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e058      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <HAL_RCC_OscConfig+0x784>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380e:	e050      	b.n	80038b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e04f      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
 8003814:	40021000 	.word	0x40021000
 8003818:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381c:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d144      	bne.n	80038b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003828:	4b24      	ldr	r3, [pc, #144]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a23      	ldr	r2, [pc, #140]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003832:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003834:	4b21      	ldr	r3, [pc, #132]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a20      	ldr	r2, [pc, #128]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800383e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003840:	f7fe f93e 	bl	8001ac0 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe f93a 	bl	8001ac0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e02c      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385a:	4b18      	ldr	r3, [pc, #96]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x7b8>
 8003866:	e024      	b.n	80038b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d01f      	beq.n	80038ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a12      	ldr	r2, [pc, #72]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 8003874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe f921 	bl	8001ac0 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fe f91d 	bl	8001ac0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e00f      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003894:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038a0:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	4905      	ldr	r1, [pc, #20]	@ (80038bc <HAL_RCC_OscConfig+0x82c>)
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <HAL_RCC_OscConfig+0x830>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
 80038ac:	e001      	b.n	80038b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	feeefffc 	.word	0xfeeefffc

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e11d      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b90      	ldr	r3, [pc, #576]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d910      	bls.n	800390c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	498b      	ldr	r1, [pc, #556]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b89      	ldr	r3, [pc, #548]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e105      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b81      	ldr	r3, [pc, #516]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003924:	429a      	cmp	r2, r3
 8003926:	d908      	bls.n	800393a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003928:	4b7e      	ldr	r3, [pc, #504]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	497b      	ldr	r1, [pc, #492]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d079      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d11e      	bne.n	800398c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	4b75      	ldr	r3, [pc, #468]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0dc      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800395e:	f000 fa09 	bl	8003d74 <RCC_GetSysClockFreqFromPLLSource>
 8003962:	4603      	mov	r3, r0
 8003964:	4a70      	ldr	r2, [pc, #448]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d946      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800396a:	4b6e      	ldr	r3, [pc, #440]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d140      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003976:	4b6b      	ldr	r3, [pc, #428]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800397e:	4a69      	ldr	r2, [pc, #420]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003984:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003986:	2380      	movs	r3, #128	@ 0x80
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e035      	b.n	80039f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003994:	4b63      	ldr	r3, [pc, #396]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d115      	bne.n	80039cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0b9      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0ad      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039bc:	4b59      	ldr	r3, [pc, #356]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0a5      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80039cc:	f000 f8b4 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4a55      	ldr	r2, [pc, #340]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d90f      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039d8:	4b52      	ldr	r3, [pc, #328]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80039ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 0203 	bic.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4947      	ldr	r1, [pc, #284]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0a:	f7fe f859 	bl	8001ac0 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a12:	f7fe f855 	bl	8001ac0 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e077      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a28:	4b3e      	ldr	r3, [pc, #248]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 020c 	and.w	r2, r3, #12
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d1eb      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b80      	cmp	r3, #128	@ 0x80
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a40:	4b38      	ldr	r3, [pc, #224]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a37      	ldr	r2, [pc, #220]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d208      	bcs.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b2e      	ldr	r3, [pc, #184]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	492b      	ldr	r1, [pc, #172]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7a:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d210      	bcs.n	8003aaa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a88:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 020f 	bic.w	r2, r3, #15
 8003a90:	4923      	ldr	r1, [pc, #140]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <HAL_RCC_ClockConfig+0x25c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e036      	b.n	8003b18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4918      	ldr	r1, [pc, #96]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad4:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4910      	ldr	r1, [pc, #64]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae8:	f000 f826 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	490c      	ldr	r1, [pc, #48]	@ (8003b2c <HAL_RCC_ClockConfig+0x268>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <HAL_RCC_ClockConfig+0x26c>)
 8003b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <HAL_RCC_ClockConfig+0x270>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd ff87 	bl	8001a20 <HAL_InitTick>
 8003b12:	4603      	mov	r3, r0
 8003b14:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	04c4b400 	.word	0x04c4b400
 8003b2c:	08006974 	.word	0x08006974
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000084 	.word	0x20000084

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	@ 0x24
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b46:	4b3e      	ldr	r3, [pc, #248]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b50:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x34>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d11e      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b6c:	4b34      	ldr	r3, [pc, #208]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b78:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e005      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b88:	4b2d      	ldr	r3, [pc, #180]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b94:	4a2b      	ldr	r2, [pc, #172]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bbc:	4b23      	ldr	r3, [pc, #140]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d134      	bne.n	8003c30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0xa6>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d003      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0xac>
 8003bdc:	e005      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003be0:	617b      	str	r3, [r7, #20]
      break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003be6:	617b      	str	r3, [r7, #20]
      break;
 8003be8:	e002      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	617b      	str	r3, [r7, #20]
      break;
 8003bee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bf0:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	0e5b      	lsrs	r3, r3, #25
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	3301      	adds	r3, #1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c30:	69bb      	ldr	r3, [r7, #24]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	@ 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	0800698c 	.word	0x0800698c
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	007a1200 	.word	0x007a1200

08003c50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b03      	ldr	r3, [pc, #12]	@ (8003c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c6c:	f7ff fff0 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4904      	ldr	r1, [pc, #16]	@ (8003c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	08006984 	.word	0x08006984

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c98:	f7ff ffda 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0adb      	lsrs	r3, r3, #11
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4904      	ldr	r1, [pc, #16]	@ (8003cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	08006984 	.word	0x08006984

08003cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ccc:	4b27      	ldr	r3, [pc, #156]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cd8:	f7ff f916 	bl	8002f08 <HAL_PWREx_GetVoltageRange>
 8003cdc:	6178      	str	r0, [r7, #20]
 8003cde:	e014      	b.n	8003d0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b22      	ldr	r3, [pc, #136]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce4:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cec:	4b1f      	ldr	r3, [pc, #124]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cf8:	f7ff f906 	bl	8002f08 <HAL_PWREx_GetVoltageRange>
 8003cfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d02:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d10:	d10b      	bne.n	8003d2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b80      	cmp	r3, #128	@ 0x80
 8003d16:	d913      	bls.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d1c:	d902      	bls.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d1e:	2302      	movs	r3, #2
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	e00d      	b.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d24:	2301      	movs	r3, #1
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e00a      	b.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d2e:	d902      	bls.n	8003d36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d30:	2302      	movs	r3, #2
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	e004      	b.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b70      	cmp	r3, #112	@ 0x70
 8003d3a:	d101      	bne.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d40:	4b0b      	ldr	r3, [pc, #44]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 020f 	bic.w	r2, r3, #15
 8003d48:	4909      	ldr	r1, [pc, #36]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d001      	beq.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40022000 	.word	0x40022000

08003d74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d00b      	beq.n	8003da2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d825      	bhi.n	8003ddc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d008      	beq.n	8003da8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d11f      	bne.n	8003ddc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d9c:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d9e:	613b      	str	r3, [r7, #16]
    break;
 8003da0:	e01f      	b.n	8003de2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003da2:	4b25      	ldr	r3, [pc, #148]	@ (8003e38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003da4:	613b      	str	r3, [r7, #16]
    break;
 8003da6:	e01c      	b.n	8003de2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003da8:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003db4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e005      	b.n	8003dd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd8:	613b      	str	r3, [r7, #16]
    break;
 8003dda:	e002      	b.n	8003de2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
    break;
 8003de0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003de2:	4b13      	ldr	r3, [pc, #76]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	3301      	adds	r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	fb03 f202 	mul.w	r2, r3, r2
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e08:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0e5b      	lsrs	r3, r3, #25
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	3301      	adds	r3, #1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e22:	683b      	ldr	r3, [r7, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40021000 	.word	0x40021000
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	007a1200 	.word	0x007a1200
 8003e3c:	0800698c 	.word	0x0800698c

08003e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d040      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e60:	2b80      	cmp	r3, #128	@ 0x80
 8003e62:	d02a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e64:	2b80      	cmp	r3, #128	@ 0x80
 8003e66:	d825      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e68:	2b60      	cmp	r3, #96	@ 0x60
 8003e6a:	d026      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e6c:	2b60      	cmp	r3, #96	@ 0x60
 8003e6e:	d821      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e70:	2b40      	cmp	r3, #64	@ 0x40
 8003e72:	d006      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e74:	2b40      	cmp	r3, #64	@ 0x40
 8003e76:	d81d      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d010      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e80:	e018      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e82:	4b89      	ldr	r3, [pc, #548]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4a88      	ldr	r2, [pc, #544]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e8e:	e015      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fb02 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3320      	adds	r3, #32
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fbed 	bl	8004688 <RCCEx_PLLSAI2_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eb2:	e003      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	74fb      	strb	r3, [r7, #19]
      break;
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ec2:	4b79      	ldr	r3, [pc, #484]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ec8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ed0:	4975      	ldr	r1, [pc, #468]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003ed8:	e001      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d047      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef2:	d030      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef8:	d82a      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003efa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efe:	d02a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f04:	d824      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f10:	d81e      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f1a:	d010      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f1c:	e018      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f1e:	4b62      	ldr	r3, [pc, #392]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4a61      	ldr	r2, [pc, #388]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f2a:	e015      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fab4 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3320      	adds	r3, #32
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fb9f 	bl	8004688 <RCCEx_PLLSAI2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	74fb      	strb	r3, [r7, #19]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f5e:	4b52      	ldr	r3, [pc, #328]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	494e      	ldr	r1, [pc, #312]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f74:	e001      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 809f 	beq.w	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f8c:	4b46      	ldr	r3, [pc, #280]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b41      	ldr	r3, [pc, #260]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	4a40      	ldr	r2, [pc, #256]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fae:	4b3e      	ldr	r3, [pc, #248]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fca:	f7fd fd79 	bl	8001ac0 <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd0:	e009      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fd fd75 	bl	8001ac0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	74fb      	strb	r3, [r7, #19]
        break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fe6:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ef      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d15b      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004002:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01f      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	429a      	cmp	r2, r3
 8004014:	d019      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004016:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004020:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004022:	4b21      	ldr	r3, [pc, #132]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004032:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800403a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800403e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004042:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d016      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fd fd34 	bl	8001ac0 <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405a:	e00b      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd fd30 	bl	8001ac0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d902      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	74fb      	strb	r3, [r7, #19]
            break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004074:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ec      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10c      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004088:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004098:	4903      	ldr	r1, [pc, #12]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040a0:	e008      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b4:	7c7b      	ldrb	r3, [r7, #17]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4ba0      	ldr	r3, [pc, #640]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	4a9f      	ldr	r2, [pc, #636]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d2:	4b9a      	ldr	r3, [pc, #616]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f023 0203 	bic.w	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	4996      	ldr	r1, [pc, #600]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f4:	4b91      	ldr	r3, [pc, #580]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f023 020c 	bic.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	498e      	ldr	r1, [pc, #568]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004116:	4b89      	ldr	r3, [pc, #548]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	4985      	ldr	r1, [pc, #532]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004138:	4b80      	ldr	r3, [pc, #512]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004146:	497d      	ldr	r1, [pc, #500]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800415a:	4b78      	ldr	r3, [pc, #480]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004168:	4974      	ldr	r1, [pc, #464]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417c:	4b6f      	ldr	r3, [pc, #444]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	496c      	ldr	r1, [pc, #432]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419e:	4b67      	ldr	r3, [pc, #412]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ac:	4963      	ldr	r1, [pc, #396]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c0:	4b5e      	ldr	r3, [pc, #376]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ce:	495b      	ldr	r1, [pc, #364]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e2:	4b56      	ldr	r3, [pc, #344]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f0:	4952      	ldr	r1, [pc, #328]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004204:	4b4d      	ldr	r3, [pc, #308]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004212:	494a      	ldr	r1, [pc, #296]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004226:	4b45      	ldr	r3, [pc, #276]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	4941      	ldr	r1, [pc, #260]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004248:	4b3c      	ldr	r3, [pc, #240]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004256:	4939      	ldr	r1, [pc, #228]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d028      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800426a:	4b34      	ldr	r3, [pc, #208]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004278:	4930      	ldr	r1, [pc, #192]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004288:	d106      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428a:	4b2c      	ldr	r3, [pc, #176]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4a2b      	ldr	r2, [pc, #172]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004294:	60d3      	str	r3, [r2, #12]
 8004296:	e011      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2101      	movs	r1, #1
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f8f9 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d04d      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042d0:	d108      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80042d2:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042d8:	4a18      	ldr	r2, [pc, #96]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80042e2:	e012      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80042e4:	4b15      	ldr	r3, [pc, #84]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ea:	4a14      	ldr	r2, [pc, #80]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80042f4:	4b11      	ldr	r3, [pc, #68]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004302:	490e      	ldr	r1, [pc, #56]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004312:	d106      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b09      	ldr	r3, [pc, #36]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a08      	ldr	r2, [pc, #32]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e020      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800432a:	d109      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800432c:	4b03      	ldr	r3, [pc, #12]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a02      	ldr	r2, [pc, #8]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004336:	60d3      	str	r3, [r2, #12]
 8004338:	e014      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004348:	d10c      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f8a5 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d028      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004370:	4b4a      	ldr	r3, [pc, #296]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800437e:	4947      	ldr	r1, [pc, #284]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438e:	d106      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b42      	ldr	r3, [pc, #264]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a41      	ldr	r2, [pc, #260]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
 800439c:	e011      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a6:	d10c      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	2101      	movs	r1, #1
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f876 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01e      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ce:	4b33      	ldr	r3, [pc, #204]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043de:	492f      	ldr	r1, [pc, #188]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2102      	movs	r1, #2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f851 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004418:	4b20      	ldr	r3, [pc, #128]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800441e:	f023 0204 	bic.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004428:	491c      	ldr	r1, [pc, #112]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800443c:	4b17      	ldr	r3, [pc, #92]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004442:	f023 0218 	bic.w	r2, r3, #24
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	4913      	ldr	r1, [pc, #76]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004460:	4b0e      	ldr	r3, [pc, #56]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004466:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004470:	490a      	ldr	r1, [pc, #40]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800447e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a04      	ldr	r2, [pc, #16]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004490:	7cbb      	ldrb	r3, [r7, #18]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000

080044a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ae:	4b72      	ldr	r3, [pc, #456]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0203 	and.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d103      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
       ||
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d142      	bne.n	8004558 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
 80044d6:	e03f      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d018      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0x72>
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d825      	bhi.n	8004530 <RCCEx_PLLSAI1_Config+0x90>
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d002      	beq.n	80044ee <RCCEx_PLLSAI1_Config+0x4e>
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d009      	beq.n	8004500 <RCCEx_PLLSAI1_Config+0x60>
 80044ec:	e020      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ee:	4b62      	ldr	r3, [pc, #392]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d11d      	bne.n	8004536 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fe:	e01a      	b.n	8004536 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004500:	4b5d      	ldr	r3, [pc, #372]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004508:	2b00      	cmp	r3, #0
 800450a:	d116      	bne.n	800453a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004510:	e013      	b.n	800453a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004512:	4b59      	ldr	r3, [pc, #356]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800451e:	4b56      	ldr	r3, [pc, #344]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800452e:	e006      	b.n	800453e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e004      	b.n	8004540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800453e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004546:	4b4c      	ldr	r3, [pc, #304]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4949      	ldr	r1, [pc, #292]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 8086 	bne.w	800466c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004560:	4b45      	ldr	r3, [pc, #276]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a44      	ldr	r2, [pc, #272]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004566:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800456a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456c:	f7fd faa8 	bl	8001ac0 <HAL_GetTick>
 8004570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004572:	e009      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004574:	f7fd faa4 	bl	8001ac0 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d902      	bls.n	8004588 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	73fb      	strb	r3, [r7, #15]
        break;
 8004586:	e005      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004588:	4b3b      	ldr	r3, [pc, #236]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ef      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d168      	bne.n	800466c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d113      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a0:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	4b35      	ldr	r3, [pc, #212]	@ (800467c <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6892      	ldr	r2, [r2, #8]
 80045ac:	0211      	lsls	r1, r2, #8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68d2      	ldr	r2, [r2, #12]
 80045b2:	06d2      	lsls	r2, r2, #27
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6852      	ldr	r2, [r2, #4]
 80045ba:	3a01      	subs	r2, #1
 80045bc:	0112      	lsls	r2, r2, #4
 80045be:	430a      	orrs	r2, r1
 80045c0:	492d      	ldr	r1, [pc, #180]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	610b      	str	r3, [r1, #16]
 80045c6:	e02d      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d115      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6892      	ldr	r2, [r2, #8]
 80045da:	0211      	lsls	r1, r2, #8
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6912      	ldr	r2, [r2, #16]
 80045e0:	0852      	lsrs	r2, r2, #1
 80045e2:	3a01      	subs	r2, #1
 80045e4:	0552      	lsls	r2, r2, #21
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6852      	ldr	r2, [r2, #4]
 80045ec:	3a01      	subs	r2, #1
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	430a      	orrs	r2, r1
 80045f2:	4921      	ldr	r1, [pc, #132]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	610b      	str	r3, [r1, #16]
 80045f8:	e014      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	4b21      	ldr	r3, [pc, #132]	@ (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004600:	4013      	ands	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6892      	ldr	r2, [r2, #8]
 8004606:	0211      	lsls	r1, r2, #8
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6952      	ldr	r2, [r2, #20]
 800460c:	0852      	lsrs	r2, r2, #1
 800460e:	3a01      	subs	r2, #1
 8004610:	0652      	lsls	r2, r2, #25
 8004612:	4311      	orrs	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6852      	ldr	r2, [r2, #4]
 8004618:	3a01      	subs	r2, #1
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	430a      	orrs	r2, r1
 800461e:	4916      	ldr	r1, [pc, #88]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004624:	4b14      	ldr	r3, [pc, #80]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a13      	ldr	r2, [pc, #76]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800462a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800462e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fd fa46 	bl	8001ac0 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004636:	e009      	b.n	800464c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004638:	f7fd fa42 	bl	8001ac0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	73fb      	strb	r3, [r7, #15]
          break;
 800464a:	e005      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4904      	ldr	r1, [pc, #16]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	07ff800f 	.word	0x07ff800f
 8004680:	ff9f800f 	.word	0xff9f800f
 8004684:	f9ff800f 	.word	0xf9ff800f

08004688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004696:	4b72      	ldr	r3, [pc, #456]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046a2:	4b6f      	ldr	r3, [pc, #444]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d103      	bne.n	80046ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
       ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d142      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
 80046be:	e03f      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d018      	beq.n	80046fa <RCCEx_PLLSAI2_Config+0x72>
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d825      	bhi.n	8004718 <RCCEx_PLLSAI2_Config+0x90>
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d002      	beq.n	80046d6 <RCCEx_PLLSAI2_Config+0x4e>
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d009      	beq.n	80046e8 <RCCEx_PLLSAI2_Config+0x60>
 80046d4:	e020      	b.n	8004718 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046d6:	4b62      	ldr	r3, [pc, #392]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11d      	bne.n	800471e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e6:	e01a      	b.n	800471e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d116      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f8:	e013      	b.n	8004722 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046fa:	4b59      	ldr	r3, [pc, #356]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004706:	4b56      	ldr	r3, [pc, #344]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004716:	e006      	b.n	8004726 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      break;
 800471c:	e004      	b.n	8004728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800471e:	bf00      	nop
 8004720:	e002      	b.n	8004728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004726:	bf00      	nop
    }

    if(status == HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d108      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800472e:	4b4c      	ldr	r3, [pc, #304]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f023 0203 	bic.w	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4949      	ldr	r1, [pc, #292]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 8086 	bne.w	8004854 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004748:	4b45      	ldr	r3, [pc, #276]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a44      	ldr	r2, [pc, #272]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004754:	f7fd f9b4 	bl	8001ac0 <HAL_GetTick>
 8004758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800475a:	e009      	b.n	8004770 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800475c:	f7fd f9b0 	bl	8001ac0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d902      	bls.n	8004770 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	73fb      	strb	r3, [r7, #15]
        break;
 800476e:	e005      	b.n	800477c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004770:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ef      	bne.n	800475c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d168      	bne.n	8004854 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d113      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004788:	4b35      	ldr	r3, [pc, #212]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	4b35      	ldr	r3, [pc, #212]	@ (8004864 <RCCEx_PLLSAI2_Config+0x1dc>)
 800478e:	4013      	ands	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6892      	ldr	r2, [r2, #8]
 8004794:	0211      	lsls	r1, r2, #8
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68d2      	ldr	r2, [r2, #12]
 800479a:	06d2      	lsls	r2, r2, #27
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6852      	ldr	r2, [r2, #4]
 80047a2:	3a01      	subs	r2, #1
 80047a4:	0112      	lsls	r2, r2, #4
 80047a6:	430a      	orrs	r2, r1
 80047a8:	492d      	ldr	r1, [pc, #180]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	614b      	str	r3, [r1, #20]
 80047ae:	e02d      	b.n	800480c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d115      	bne.n	80047e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1e0>)
 80047bc:	4013      	ands	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6892      	ldr	r2, [r2, #8]
 80047c2:	0211      	lsls	r1, r2, #8
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6912      	ldr	r2, [r2, #16]
 80047c8:	0852      	lsrs	r2, r2, #1
 80047ca:	3a01      	subs	r2, #1
 80047cc:	0552      	lsls	r2, r2, #21
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6852      	ldr	r2, [r2, #4]
 80047d4:	3a01      	subs	r2, #1
 80047d6:	0112      	lsls	r2, r2, #4
 80047d8:	430a      	orrs	r2, r1
 80047da:	4921      	ldr	r1, [pc, #132]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	614b      	str	r3, [r1, #20]
 80047e0:	e014      	b.n	800480c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	4b21      	ldr	r3, [pc, #132]	@ (800486c <RCCEx_PLLSAI2_Config+0x1e4>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6892      	ldr	r2, [r2, #8]
 80047ee:	0211      	lsls	r1, r2, #8
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6952      	ldr	r2, [r2, #20]
 80047f4:	0852      	lsrs	r2, r2, #1
 80047f6:	3a01      	subs	r2, #1
 80047f8:	0652      	lsls	r2, r2, #25
 80047fa:	4311      	orrs	r1, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6852      	ldr	r2, [r2, #4]
 8004800:	3a01      	subs	r2, #1
 8004802:	0112      	lsls	r2, r2, #4
 8004804:	430a      	orrs	r2, r1
 8004806:	4916      	ldr	r1, [pc, #88]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800480c:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd f952 	bl	8001ac0 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004820:	f7fd f94e 	bl	8001ac0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
          break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004834:	4b0a      	ldr	r3, [pc, #40]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	4904      	ldr	r1, [pc, #16]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	07ff800f 	.word	0x07ff800f
 8004868:	ff9f800f 	.word	0xff9f800f
 800486c:	f9ff800f 	.word	0xf9ff800f

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e049      	b.n	8004916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fbca 	bl	8001030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fa9e 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d001      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e04f      	b.n	80049d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a23      	ldr	r2, [pc, #140]	@ (80049e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004962:	d018      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1e      	ldr	r2, [pc, #120]	@ (80049ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1c      	ldr	r2, [pc, #112]	@ (80049f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1b      	ldr	r2, [pc, #108]	@ (80049f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d115      	bne.n	80049c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <HAL_TIM_Base_Start_IT+0xdc>)
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d015      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ae:	d011      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	e008      	b.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e000      	b.n	80049d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	00010007 	.word	0x00010007

08004a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d020      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01b      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0202 	mvn.w	r2, #2
 8004a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9b2 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9a4 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9b5 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0204 	mvn.w	r2, #4
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f98c 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f97e 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f98f 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0208 	mvn.w	r2, #8
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f966 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f958 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f969 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f940 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f932 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f943 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0201 	mvn.w	r2, #1
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fb fd1a 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fafd 	bl	8005194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 faf5 	bl	80051a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8fd 	bl	8004ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00c      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0220 	mvn.w	r2, #32
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fabd 	bl	8005180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_ConfigClockSource+0x1c>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e0b6      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x18a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c48:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c66:	d03e      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0xd8>
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6c:	f200 8087 	bhi.w	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c74:	f000 8086 	beq.w	8004d84 <HAL_TIM_ConfigClockSource+0x176>
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d87f      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c7e:	2b70      	cmp	r3, #112	@ 0x70
 8004c80:	d01a      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0xaa>
 8004c82:	2b70      	cmp	r3, #112	@ 0x70
 8004c84:	d87b      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c86:	2b60      	cmp	r3, #96	@ 0x60
 8004c88:	d050      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x11e>
 8004c8a:	2b60      	cmp	r3, #96	@ 0x60
 8004c8c:	d877      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c8e:	2b50      	cmp	r3, #80	@ 0x50
 8004c90:	d03c      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xfe>
 8004c92:	2b50      	cmp	r3, #80	@ 0x50
 8004c94:	d873      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c96:	2b40      	cmp	r3, #64	@ 0x40
 8004c98:	d058      	beq.n	8004d4c <HAL_TIM_ConfigClockSource+0x13e>
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d86f      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c9e:	2b30      	cmp	r3, #48	@ 0x30
 8004ca0:	d064      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004ca2:	2b30      	cmp	r3, #48	@ 0x30
 8004ca4:	d86b      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d060      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d867      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d05c      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d05a      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004cb6:	e062      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	f000 f9b2 	bl	8005030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
      break;
 8004ce4:	e04f      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	f000 f99b 	bl	8005030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e03c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f000 f90f 	bl	8004f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2150      	movs	r1, #80	@ 0x50
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f968 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d2a:	e02c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f000 f92e 	bl	8004f9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2160      	movs	r1, #96	@ 0x60
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f958 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d4a:	e01c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f000 f8ef 	bl	8004f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2140      	movs	r1, #64	@ 0x40
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f948 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d6a:	e00c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f000 f93f 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e003      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
      break;
 8004d82:	e000      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a46      	ldr	r2, [pc, #280]	@ (8004f1c <TIM_Base_SetConfig+0x12c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a43      	ldr	r2, [pc, #268]	@ (8004f20 <TIM_Base_SetConfig+0x130>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a42      	ldr	r2, [pc, #264]	@ (8004f24 <TIM_Base_SetConfig+0x134>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a41      	ldr	r2, [pc, #260]	@ (8004f28 <TIM_Base_SetConfig+0x138>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a40      	ldr	r2, [pc, #256]	@ (8004f2c <TIM_Base_SetConfig+0x13c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a35      	ldr	r2, [pc, #212]	@ (8004f1c <TIM_Base_SetConfig+0x12c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01f      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e50:	d01b      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a32      	ldr	r2, [pc, #200]	@ (8004f20 <TIM_Base_SetConfig+0x130>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d017      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a31      	ldr	r2, [pc, #196]	@ (8004f24 <TIM_Base_SetConfig+0x134>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a30      	ldr	r2, [pc, #192]	@ (8004f28 <TIM_Base_SetConfig+0x138>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8004f2c <TIM_Base_SetConfig+0x13c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2e      	ldr	r2, [pc, #184]	@ (8004f30 <TIM_Base_SetConfig+0x140>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f34 <TIM_Base_SetConfig+0x144>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0x9a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	@ (8004f38 <TIM_Base_SetConfig+0x148>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a16      	ldr	r2, [pc, #88]	@ (8004f1c <TIM_Base_SetConfig+0x12c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00f      	beq.n	8004ee8 <TIM_Base_SetConfig+0xf8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a18      	ldr	r2, [pc, #96]	@ (8004f2c <TIM_Base_SetConfig+0x13c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0xf8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a17      	ldr	r2, [pc, #92]	@ (8004f30 <TIM_Base_SetConfig+0x140>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0xf8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a16      	ldr	r2, [pc, #88]	@ (8004f34 <TIM_Base_SetConfig+0x144>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0xf8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	@ (8004f38 <TIM_Base_SetConfig+0x148>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d103      	bne.n	8004ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d105      	bne.n	8004f0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f023 0201 	bic.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	611a      	str	r2, [r3, #16]
  }
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40013400 	.word	0x40013400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40014400 	.word	0x40014400
 8004f38:	40014800 	.word	0x40014800

08004f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 030a 	bic.w	r3, r3, #10
 8004f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b087      	sub	sp, #28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f023 0210 	bic.w	r2, r3, #16
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	031b      	lsls	r3, r3, #12
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	f043 0307 	orr.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800504a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	021a      	lsls	r2, r3, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	431a      	orrs	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e068      	b.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2d      	ldr	r2, [pc, #180]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d108      	bne.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01d      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fa:	d018      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1b      	ldr	r2, [pc, #108]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1a      	ldr	r2, [pc, #104]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a18      	ldr	r2, [pc, #96]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a13      	ldr	r2, [pc, #76]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a14      	ldr	r2, [pc, #80]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10c      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4313      	orrs	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40014000 	.word	0x40014000

08005180 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e042      	b.n	8005254 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7fb ff49 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2224      	movs	r2, #36	@ 0x24
 80051ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fbb2 	bl	8005970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8b3 	bl	8005378 <UART_SetConfig>
 8005212:	4603      	mov	r3, r0
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e01b      	b.n	8005254 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800522a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800523a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fc31 	bl	8005ab4 <UART_CheckIdleState>
 8005252:	4603      	mov	r3, r0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	2b20      	cmp	r3, #32
 8005274:	d17b      	bne.n	800536e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_UART_Transmit+0x26>
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e074      	b.n	8005370 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2221      	movs	r2, #33	@ 0x21
 8005292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005296:	f7fc fc13 	bl	8001ac0 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b4:	d108      	bne.n	80052c8 <HAL_UART_Transmit+0x6c>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	e003      	b.n	80052d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d0:	e030      	b.n	8005334 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	2180      	movs	r1, #128	@ 0x80
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fc93 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e03d      	b.n	8005370 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005306:	b292      	uxth	r2, r2
 8005308:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	3302      	adds	r3, #2
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e007      	b.n	8005322 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1c8      	bne.n	80052d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2200      	movs	r2, #0
 8005348:	2140      	movs	r1, #64	@ 0x40
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fc5c 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e006      	b.n	8005370 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	e000      	b.n	8005370 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800536e:	2302      	movs	r3, #2
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800537c:	b08c      	sub	sp, #48	@ 0x30
 800537e:	af00      	add	r7, sp, #0
 8005380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	431a      	orrs	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	431a      	orrs	r2, r3
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4313      	orrs	r3, r2
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4baa      	ldr	r3, [pc, #680]	@ (8005650 <UART_SetConfig+0x2d8>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a9f      	ldr	r2, [pc, #636]	@ (8005654 <UART_SetConfig+0x2dc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e0:	4313      	orrs	r3, r2
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f8:	430b      	orrs	r3, r1
 80053fa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	f023 010f 	bic.w	r1, r3, #15
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a90      	ldr	r2, [pc, #576]	@ (8005658 <UART_SetConfig+0x2e0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d125      	bne.n	8005468 <UART_SetConfig+0xf0>
 800541c:	4b8f      	ldr	r3, [pc, #572]	@ (800565c <UART_SetConfig+0x2e4>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b03      	cmp	r3, #3
 8005428:	d81a      	bhi.n	8005460 <UART_SetConfig+0xe8>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <UART_SetConfig+0xb8>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005441 	.word	0x08005441
 8005434:	08005451 	.word	0x08005451
 8005438:	08005449 	.word	0x08005449
 800543c:	08005459 	.word	0x08005459
 8005440:	2301      	movs	r3, #1
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005446:	e116      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005448:	2302      	movs	r3, #2
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544e:	e112      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005450:	2304      	movs	r3, #4
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005456:	e10e      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005458:	2308      	movs	r3, #8
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545e:	e10a      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005460:	2310      	movs	r3, #16
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e106      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a7c      	ldr	r2, [pc, #496]	@ (8005660 <UART_SetConfig+0x2e8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d138      	bne.n	80054e4 <UART_SetConfig+0x16c>
 8005472:	4b7a      	ldr	r3, [pc, #488]	@ (800565c <UART_SetConfig+0x2e4>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b0c      	cmp	r3, #12
 800547e:	d82d      	bhi.n	80054dc <UART_SetConfig+0x164>
 8005480:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x110>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054bd 	.word	0x080054bd
 800548c:	080054dd 	.word	0x080054dd
 8005490:	080054dd 	.word	0x080054dd
 8005494:	080054dd 	.word	0x080054dd
 8005498:	080054cd 	.word	0x080054cd
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054dd 	.word	0x080054dd
 80054a4:	080054dd 	.word	0x080054dd
 80054a8:	080054c5 	.word	0x080054c5
 80054ac:	080054dd 	.word	0x080054dd
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054d5 	.word	0x080054d5
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c2:	e0d8      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	e0d4      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d2:	e0d0      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054da:	e0cc      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	e0c8      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005664 <UART_SetConfig+0x2ec>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d125      	bne.n	800553a <UART_SetConfig+0x1c2>
 80054ee:	4b5b      	ldr	r3, [pc, #364]	@ (800565c <UART_SetConfig+0x2e4>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054f8:	2b30      	cmp	r3, #48	@ 0x30
 80054fa:	d016      	beq.n	800552a <UART_SetConfig+0x1b2>
 80054fc:	2b30      	cmp	r3, #48	@ 0x30
 80054fe:	d818      	bhi.n	8005532 <UART_SetConfig+0x1ba>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d00a      	beq.n	800551a <UART_SetConfig+0x1a2>
 8005504:	2b20      	cmp	r3, #32
 8005506:	d814      	bhi.n	8005532 <UART_SetConfig+0x1ba>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <UART_SetConfig+0x19a>
 800550c:	2b10      	cmp	r3, #16
 800550e:	d008      	beq.n	8005522 <UART_SetConfig+0x1aa>
 8005510:	e00f      	b.n	8005532 <UART_SetConfig+0x1ba>
 8005512:	2300      	movs	r3, #0
 8005514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005518:	e0ad      	b.n	8005676 <UART_SetConfig+0x2fe>
 800551a:	2302      	movs	r3, #2
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005520:	e0a9      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005522:	2304      	movs	r3, #4
 8005524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005528:	e0a5      	b.n	8005676 <UART_SetConfig+0x2fe>
 800552a:	2308      	movs	r3, #8
 800552c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005530:	e0a1      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005532:	2310      	movs	r3, #16
 8005534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005538:	e09d      	b.n	8005676 <UART_SetConfig+0x2fe>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a4a      	ldr	r2, [pc, #296]	@ (8005668 <UART_SetConfig+0x2f0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d125      	bne.n	8005590 <UART_SetConfig+0x218>
 8005544:	4b45      	ldr	r3, [pc, #276]	@ (800565c <UART_SetConfig+0x2e4>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800554e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005550:	d016      	beq.n	8005580 <UART_SetConfig+0x208>
 8005552:	2bc0      	cmp	r3, #192	@ 0xc0
 8005554:	d818      	bhi.n	8005588 <UART_SetConfig+0x210>
 8005556:	2b80      	cmp	r3, #128	@ 0x80
 8005558:	d00a      	beq.n	8005570 <UART_SetConfig+0x1f8>
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d814      	bhi.n	8005588 <UART_SetConfig+0x210>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <UART_SetConfig+0x1f0>
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d008      	beq.n	8005578 <UART_SetConfig+0x200>
 8005566:	e00f      	b.n	8005588 <UART_SetConfig+0x210>
 8005568:	2300      	movs	r3, #0
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556e:	e082      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005570:	2302      	movs	r3, #2
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005576:	e07e      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005578:	2304      	movs	r3, #4
 800557a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557e:	e07a      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005580:	2308      	movs	r3, #8
 8005582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005586:	e076      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005588:	2310      	movs	r3, #16
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558e:	e072      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a35      	ldr	r2, [pc, #212]	@ (800566c <UART_SetConfig+0x2f4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d12a      	bne.n	80055f0 <UART_SetConfig+0x278>
 800559a:	4b30      	ldr	r3, [pc, #192]	@ (800565c <UART_SetConfig+0x2e4>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055a8:	d01a      	beq.n	80055e0 <UART_SetConfig+0x268>
 80055aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ae:	d81b      	bhi.n	80055e8 <UART_SetConfig+0x270>
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b4:	d00c      	beq.n	80055d0 <UART_SetConfig+0x258>
 80055b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ba:	d815      	bhi.n	80055e8 <UART_SetConfig+0x270>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <UART_SetConfig+0x250>
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c4:	d008      	beq.n	80055d8 <UART_SetConfig+0x260>
 80055c6:	e00f      	b.n	80055e8 <UART_SetConfig+0x270>
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ce:	e052      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055d0:	2302      	movs	r3, #2
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e04e      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055d8:	2304      	movs	r3, #4
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e04a      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055e0:	2308      	movs	r3, #8
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e046      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055e8:	2310      	movs	r3, #16
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e042      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <UART_SetConfig+0x2dc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d13a      	bne.n	8005670 <UART_SetConfig+0x2f8>
 80055fa:	4b18      	ldr	r3, [pc, #96]	@ (800565c <UART_SetConfig+0x2e4>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005600:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005608:	d01a      	beq.n	8005640 <UART_SetConfig+0x2c8>
 800560a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800560e:	d81b      	bhi.n	8005648 <UART_SetConfig+0x2d0>
 8005610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005614:	d00c      	beq.n	8005630 <UART_SetConfig+0x2b8>
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800561a:	d815      	bhi.n	8005648 <UART_SetConfig+0x2d0>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <UART_SetConfig+0x2b0>
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005624:	d008      	beq.n	8005638 <UART_SetConfig+0x2c0>
 8005626:	e00f      	b.n	8005648 <UART_SetConfig+0x2d0>
 8005628:	2300      	movs	r3, #0
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562e:	e022      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005630:	2302      	movs	r3, #2
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005636:	e01e      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005638:	2304      	movs	r3, #4
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563e:	e01a      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005640:	2308      	movs	r3, #8
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005646:	e016      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005648:	2310      	movs	r3, #16
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e012      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005650:	cfff69f3 	.word	0xcfff69f3
 8005654:	40008000 	.word	0x40008000
 8005658:	40013800 	.word	0x40013800
 800565c:	40021000 	.word	0x40021000
 8005660:	40004400 	.word	0x40004400
 8005664:	40004800 	.word	0x40004800
 8005668:	40004c00 	.word	0x40004c00
 800566c:	40005000 	.word	0x40005000
 8005670:	2310      	movs	r3, #16
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4aae      	ldr	r2, [pc, #696]	@ (8005934 <UART_SetConfig+0x5bc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	f040 8097 	bne.w	80057b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005682:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005686:	2b08      	cmp	r3, #8
 8005688:	d823      	bhi.n	80056d2 <UART_SetConfig+0x35a>
 800568a:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <UART_SetConfig+0x318>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056d3 	.word	0x080056d3
 8005698:	080056bd 	.word	0x080056bd
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056c3 	.word	0x080056c3
 80056a4:	080056d3 	.word	0x080056d3
 80056a8:	080056d3 	.word	0x080056d3
 80056ac:	080056d3 	.word	0x080056d3
 80056b0:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b4:	f7fe fad8 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 80056b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ba:	e010      	b.n	80056de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b9e      	ldr	r3, [pc, #632]	@ (8005938 <UART_SetConfig+0x5c0>)
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056c0:	e00d      	b.n	80056de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fe fa39 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 80056c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056c8:	e009      	b.n	80056de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056d0:	e005      	b.n	80056de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8130 	beq.w	8005946 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	4a94      	ldr	r2, [pc, #592]	@ (800593c <UART_SetConfig+0x5c4>)
 80056ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	429a      	cmp	r2, r3
 8005708:	d305      	bcc.n	8005716 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	429a      	cmp	r2, r3
 8005714:	d903      	bls.n	800571e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800571c:	e113      	b.n	8005946 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2200      	movs	r2, #0
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	60fa      	str	r2, [r7, #12]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	4a84      	ldr	r2, [pc, #528]	@ (800593c <UART_SetConfig+0x5c4>)
 800572c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005730:	b29b      	uxth	r3, r3
 8005732:	2200      	movs	r2, #0
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800573c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005740:	f7fa fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	020b      	lsls	r3, r1, #8
 8005756:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800575a:	0202      	lsls	r2, r0, #8
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	6849      	ldr	r1, [r1, #4]
 8005760:	0849      	lsrs	r1, r1, #1
 8005762:	2000      	movs	r0, #0
 8005764:	460c      	mov	r4, r1
 8005766:	4605      	mov	r5, r0
 8005768:	eb12 0804 	adds.w	r8, r2, r4
 800576c:	eb43 0905 	adc.w	r9, r3, r5
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	469a      	mov	sl, r3
 8005778:	4693      	mov	fp, r2
 800577a:	4652      	mov	r2, sl
 800577c:	465b      	mov	r3, fp
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fa fd95 	bl	80002b0 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4613      	mov	r3, r2
 800578c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005794:	d308      	bcc.n	80057a8 <UART_SetConfig+0x430>
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800579c:	d204      	bcs.n	80057a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6a3a      	ldr	r2, [r7, #32]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e0ce      	b.n	8005946 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057ae:	e0ca      	b.n	8005946 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b8:	d166      	bne.n	8005888 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d827      	bhi.n	8005812 <UART_SetConfig+0x49a>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x450>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	08005813 	.word	0x08005813
 80057d8:	08005803 	.word	0x08005803
 80057dc:	08005813 	.word	0x08005813
 80057e0:	08005813 	.word	0x08005813
 80057e4:	08005813 	.word	0x08005813
 80057e8:	0800580b 	.word	0x0800580b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f7fe fa3c 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 80057f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057f2:	e014      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f4:	f7fe fa4e 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 80057f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057fa:	e010      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005938 <UART_SetConfig+0x5c0>)
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005802:	f7fe f999 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8005806:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800581c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8090 	beq.w	8005946 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	4a44      	ldr	r2, [pc, #272]	@ (800593c <UART_SetConfig+0x5c4>)
 800582c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005830:	461a      	mov	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	fbb3 f3f2 	udiv	r3, r3, r2
 8005838:	005a      	lsls	r2, r3, #1
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	441a      	add	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b0f      	cmp	r3, #15
 8005850:	d916      	bls.n	8005880 <UART_SetConfig+0x508>
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d212      	bcs.n	8005880 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f023 030f 	bic.w	r3, r3, #15
 8005862:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	b29a      	uxth	r2, r3
 8005870:	8bfb      	ldrh	r3, [r7, #30]
 8005872:	4313      	orrs	r3, r2
 8005874:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	8bfa      	ldrh	r2, [r7, #30]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e062      	b.n	8005946 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005886:	e05e      	b.n	8005946 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005888:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800588c:	2b08      	cmp	r3, #8
 800588e:	d828      	bhi.n	80058e2 <UART_SetConfig+0x56a>
 8005890:	a201      	add	r2, pc, #4	@ (adr r2, 8005898 <UART_SetConfig+0x520>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058d3 	.word	0x080058d3
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fe f9d4 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 80058c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058c2:	e014      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fe f9e6 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ca:	e010      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <UART_SetConfig+0x5c0>)
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058d0:	e00d      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fe f931 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 80058d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058d8:	e009      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e0:	e005      	b.n	80058ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058ec:	bf00      	nop
    }

    if (pclk != 0U)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d028      	beq.n	8005946 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	4a10      	ldr	r2, [pc, #64]	@ (800593c <UART_SetConfig+0x5c4>)
 80058fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058fe:	461a      	mov	r2, r3
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	fbb3 f2f2 	udiv	r2, r3, r2
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	441a      	add	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d910      	bls.n	8005940 <UART_SetConfig+0x5c8>
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005924:	d20c      	bcs.n	8005940 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b29a      	uxth	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e009      	b.n	8005946 <UART_SetConfig+0x5ce>
 8005932:	bf00      	nop
 8005934:	40008000 	.word	0x40008000
 8005938:	00f42400 	.word	0x00f42400
 800593c:	080069bc 	.word	0x080069bc
      }
      else
      {
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2201      	movs	r2, #1
 800594a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2201      	movs	r2, #1
 8005952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005962:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005966:	4618      	mov	r0, r3
 8005968:	3730      	adds	r7, #48	@ 0x30
 800596a:	46bd      	mov	sp, r7
 800596c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6e:	d10a      	bne.n	8005a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b098      	sub	sp, #96	@ 0x60
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac4:	f7fb fffc 	bl	8001ac0 <HAL_GetTick>
 8005ac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d12f      	bne.n	8005b38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f88e 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d022      	beq.n	8005b38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e6      	bne.n	8005af2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e063      	b.n	8005c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d149      	bne.n	8005bda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f857 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d03c      	beq.n	8005bda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e6      	bne.n	8005b60 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bb2:	61fa      	str	r2, [r7, #28]
 8005bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e5      	bne.n	8005b92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e012      	b.n	8005c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3758      	adds	r7, #88	@ 0x58
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c18:	e04f      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c20:	d04b      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c22:	f7fb ff4d 	bl	8001ac0 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e04e      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d037      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b80      	cmp	r3, #128	@ 0x80
 8005c4e:	d034      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b40      	cmp	r3, #64	@ 0x40
 8005c54:	d031      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d110      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f838 	bl	8005ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2208      	movs	r2, #8
 8005c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e029      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c94:	d111      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f81e 	bl	8005ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e00f      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d0a0      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b095      	sub	sp, #84	@ 0x54
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e3      	bne.n	8005d1c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d118      	bne.n	8005d8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f023 0310 	bic.w	r3, r3, #16
 8005d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6979      	ldr	r1, [r7, #20]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	613b      	str	r3, [r7, #16]
   return(result);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e6      	bne.n	8005d5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005da2:	bf00      	nop
 8005da4:	3754      	adds	r7, #84	@ 0x54
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e027      	b.n	8005e14 <HAL_UARTEx_DisableFifoMode+0x66>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2224      	movs	r2, #36	@ 0x24
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005df2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e02d      	b.n	8005e94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2224      	movs	r2, #36	@ 0x24
 8005e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0201 	bic.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f84f 	bl	8005f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e02d      	b.n	8005f10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	@ 0x24
 8005ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f811 	bl	8005f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f38:	e031      	b.n	8005f9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f3e:	2308      	movs	r3, #8
 8005f40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	0e5b      	lsrs	r3, r3, #25
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	0f5b      	lsrs	r3, r3, #29
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	7b3a      	ldrb	r2, [r7, #12]
 8005f66:	4911      	ldr	r1, [pc, #68]	@ (8005fac <UARTEx_SetNbDataToProcess+0x94>)
 8005f68:	5c8a      	ldrb	r2, [r1, r2]
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f6e:	7b3a      	ldrb	r2, [r7, #12]
 8005f70:	490f      	ldr	r1, [pc, #60]	@ (8005fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	7b7a      	ldrb	r2, [r7, #13]
 8005f84:	4909      	ldr	r1, [pc, #36]	@ (8005fac <UARTEx_SetNbDataToProcess+0x94>)
 8005f86:	5c8a      	ldrb	r2, [r1, r2]
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f8c:	7b7a      	ldrb	r2, [r7, #13]
 8005f8e:	4908      	ldr	r1, [pc, #32]	@ (8005fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	080069d4 	.word	0x080069d4
 8005fb0:	080069dc 	.word	0x080069dc

08005fb4 <siprintf>:
 8005fb4:	b40e      	push	{r1, r2, r3}
 8005fb6:	b500      	push	{lr}
 8005fb8:	b09c      	sub	sp, #112	@ 0x70
 8005fba:	ab1d      	add	r3, sp, #116	@ 0x74
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9006      	str	r0, [sp, #24]
 8005fc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005fc4:	4809      	ldr	r0, [pc, #36]	@ (8005fec <siprintf+0x38>)
 8005fc6:	9107      	str	r1, [sp, #28]
 8005fc8:	9104      	str	r1, [sp, #16]
 8005fca:	4909      	ldr	r1, [pc, #36]	@ (8005ff0 <siprintf+0x3c>)
 8005fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd0:	9105      	str	r1, [sp, #20]
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	a902      	add	r1, sp, #8
 8005fd8:	f000 f8aa 	bl	8006130 <_svfiprintf_r>
 8005fdc:	9b02      	ldr	r3, [sp, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	b01c      	add	sp, #112	@ 0x70
 8005fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe8:	b003      	add	sp, #12
 8005fea:	4770      	bx	lr
 8005fec:	2000008c 	.word	0x2000008c
 8005ff0:	ffff0208 	.word	0xffff0208

08005ff4 <memset>:
 8005ff4:	4402      	add	r2, r0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d100      	bne.n	8005ffe <memset+0xa>
 8005ffc:	4770      	bx	lr
 8005ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8006002:	e7f9      	b.n	8005ff8 <memset+0x4>

08006004 <__errno>:
 8006004:	4b01      	ldr	r3, [pc, #4]	@ (800600c <__errno+0x8>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	2000008c 	.word	0x2000008c

08006010 <__libc_init_array>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4d0d      	ldr	r5, [pc, #52]	@ (8006048 <__libc_init_array+0x38>)
 8006014:	4c0d      	ldr	r4, [pc, #52]	@ (800604c <__libc_init_array+0x3c>)
 8006016:	1b64      	subs	r4, r4, r5
 8006018:	10a4      	asrs	r4, r4, #2
 800601a:	2600      	movs	r6, #0
 800601c:	42a6      	cmp	r6, r4
 800601e:	d109      	bne.n	8006034 <__libc_init_array+0x24>
 8006020:	4d0b      	ldr	r5, [pc, #44]	@ (8006050 <__libc_init_array+0x40>)
 8006022:	4c0c      	ldr	r4, [pc, #48]	@ (8006054 <__libc_init_array+0x44>)
 8006024:	f000 fc66 	bl	80068f4 <_init>
 8006028:	1b64      	subs	r4, r4, r5
 800602a:	10a4      	asrs	r4, r4, #2
 800602c:	2600      	movs	r6, #0
 800602e:	42a6      	cmp	r6, r4
 8006030:	d105      	bne.n	800603e <__libc_init_array+0x2e>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	f855 3b04 	ldr.w	r3, [r5], #4
 8006038:	4798      	blx	r3
 800603a:	3601      	adds	r6, #1
 800603c:	e7ee      	b.n	800601c <__libc_init_array+0xc>
 800603e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006042:	4798      	blx	r3
 8006044:	3601      	adds	r6, #1
 8006046:	e7f2      	b.n	800602e <__libc_init_array+0x1e>
 8006048:	08006a20 	.word	0x08006a20
 800604c:	08006a20 	.word	0x08006a20
 8006050:	08006a20 	.word	0x08006a20
 8006054:	08006a24 	.word	0x08006a24

08006058 <__retarget_lock_acquire_recursive>:
 8006058:	4770      	bx	lr

0800605a <__retarget_lock_release_recursive>:
 800605a:	4770      	bx	lr

0800605c <memcpy>:
 800605c:	440a      	add	r2, r1
 800605e:	4291      	cmp	r1, r2
 8006060:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006064:	d100      	bne.n	8006068 <memcpy+0xc>
 8006066:	4770      	bx	lr
 8006068:	b510      	push	{r4, lr}
 800606a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006072:	4291      	cmp	r1, r2
 8006074:	d1f9      	bne.n	800606a <memcpy+0xe>
 8006076:	bd10      	pop	{r4, pc}

08006078 <__ssputs_r>:
 8006078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800607c:	688e      	ldr	r6, [r1, #8]
 800607e:	461f      	mov	r7, r3
 8006080:	42be      	cmp	r6, r7
 8006082:	680b      	ldr	r3, [r1, #0]
 8006084:	4682      	mov	sl, r0
 8006086:	460c      	mov	r4, r1
 8006088:	4690      	mov	r8, r2
 800608a:	d82d      	bhi.n	80060e8 <__ssputs_r+0x70>
 800608c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006094:	d026      	beq.n	80060e4 <__ssputs_r+0x6c>
 8006096:	6965      	ldr	r5, [r4, #20]
 8006098:	6909      	ldr	r1, [r1, #16]
 800609a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800609e:	eba3 0901 	sub.w	r9, r3, r1
 80060a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060a6:	1c7b      	adds	r3, r7, #1
 80060a8:	444b      	add	r3, r9
 80060aa:	106d      	asrs	r5, r5, #1
 80060ac:	429d      	cmp	r5, r3
 80060ae:	bf38      	it	cc
 80060b0:	461d      	movcc	r5, r3
 80060b2:	0553      	lsls	r3, r2, #21
 80060b4:	d527      	bpl.n	8006106 <__ssputs_r+0x8e>
 80060b6:	4629      	mov	r1, r5
 80060b8:	f000 f958 	bl	800636c <_malloc_r>
 80060bc:	4606      	mov	r6, r0
 80060be:	b360      	cbz	r0, 800611a <__ssputs_r+0xa2>
 80060c0:	6921      	ldr	r1, [r4, #16]
 80060c2:	464a      	mov	r2, r9
 80060c4:	f7ff ffca 	bl	800605c <memcpy>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	6126      	str	r6, [r4, #16]
 80060d6:	6165      	str	r5, [r4, #20]
 80060d8:	444e      	add	r6, r9
 80060da:	eba5 0509 	sub.w	r5, r5, r9
 80060de:	6026      	str	r6, [r4, #0]
 80060e0:	60a5      	str	r5, [r4, #8]
 80060e2:	463e      	mov	r6, r7
 80060e4:	42be      	cmp	r6, r7
 80060e6:	d900      	bls.n	80060ea <__ssputs_r+0x72>
 80060e8:	463e      	mov	r6, r7
 80060ea:	6820      	ldr	r0, [r4, #0]
 80060ec:	4632      	mov	r2, r6
 80060ee:	4641      	mov	r1, r8
 80060f0:	f000 fb84 	bl	80067fc <memmove>
 80060f4:	68a3      	ldr	r3, [r4, #8]
 80060f6:	1b9b      	subs	r3, r3, r6
 80060f8:	60a3      	str	r3, [r4, #8]
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	4433      	add	r3, r6
 80060fe:	6023      	str	r3, [r4, #0]
 8006100:	2000      	movs	r0, #0
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	462a      	mov	r2, r5
 8006108:	f000 fb4a 	bl	80067a0 <_realloc_r>
 800610c:	4606      	mov	r6, r0
 800610e:	2800      	cmp	r0, #0
 8006110:	d1e0      	bne.n	80060d4 <__ssputs_r+0x5c>
 8006112:	6921      	ldr	r1, [r4, #16]
 8006114:	4650      	mov	r0, sl
 8006116:	f000 fb9b 	bl	8006850 <_free_r>
 800611a:	230c      	movs	r3, #12
 800611c:	f8ca 3000 	str.w	r3, [sl]
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800612c:	e7e9      	b.n	8006102 <__ssputs_r+0x8a>
	...

08006130 <_svfiprintf_r>:
 8006130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	4698      	mov	r8, r3
 8006136:	898b      	ldrh	r3, [r1, #12]
 8006138:	061b      	lsls	r3, r3, #24
 800613a:	b09d      	sub	sp, #116	@ 0x74
 800613c:	4607      	mov	r7, r0
 800613e:	460d      	mov	r5, r1
 8006140:	4614      	mov	r4, r2
 8006142:	d510      	bpl.n	8006166 <_svfiprintf_r+0x36>
 8006144:	690b      	ldr	r3, [r1, #16]
 8006146:	b973      	cbnz	r3, 8006166 <_svfiprintf_r+0x36>
 8006148:	2140      	movs	r1, #64	@ 0x40
 800614a:	f000 f90f 	bl	800636c <_malloc_r>
 800614e:	6028      	str	r0, [r5, #0]
 8006150:	6128      	str	r0, [r5, #16]
 8006152:	b930      	cbnz	r0, 8006162 <_svfiprintf_r+0x32>
 8006154:	230c      	movs	r3, #12
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800615c:	b01d      	add	sp, #116	@ 0x74
 800615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006162:	2340      	movs	r3, #64	@ 0x40
 8006164:	616b      	str	r3, [r5, #20]
 8006166:	2300      	movs	r3, #0
 8006168:	9309      	str	r3, [sp, #36]	@ 0x24
 800616a:	2320      	movs	r3, #32
 800616c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006170:	f8cd 800c 	str.w	r8, [sp, #12]
 8006174:	2330      	movs	r3, #48	@ 0x30
 8006176:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006314 <_svfiprintf_r+0x1e4>
 800617a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800617e:	f04f 0901 	mov.w	r9, #1
 8006182:	4623      	mov	r3, r4
 8006184:	469a      	mov	sl, r3
 8006186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618a:	b10a      	cbz	r2, 8006190 <_svfiprintf_r+0x60>
 800618c:	2a25      	cmp	r2, #37	@ 0x25
 800618e:	d1f9      	bne.n	8006184 <_svfiprintf_r+0x54>
 8006190:	ebba 0b04 	subs.w	fp, sl, r4
 8006194:	d00b      	beq.n	80061ae <_svfiprintf_r+0x7e>
 8006196:	465b      	mov	r3, fp
 8006198:	4622      	mov	r2, r4
 800619a:	4629      	mov	r1, r5
 800619c:	4638      	mov	r0, r7
 800619e:	f7ff ff6b 	bl	8006078 <__ssputs_r>
 80061a2:	3001      	adds	r0, #1
 80061a4:	f000 80a7 	beq.w	80062f6 <_svfiprintf_r+0x1c6>
 80061a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061aa:	445a      	add	r2, fp
 80061ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ae:	f89a 3000 	ldrb.w	r3, [sl]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 809f 	beq.w	80062f6 <_svfiprintf_r+0x1c6>
 80061b8:	2300      	movs	r3, #0
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c2:	f10a 0a01 	add.w	sl, sl, #1
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	9307      	str	r3, [sp, #28]
 80061ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80061d0:	4654      	mov	r4, sl
 80061d2:	2205      	movs	r2, #5
 80061d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d8:	484e      	ldr	r0, [pc, #312]	@ (8006314 <_svfiprintf_r+0x1e4>)
 80061da:	f7fa f819 	bl	8000210 <memchr>
 80061de:	9a04      	ldr	r2, [sp, #16]
 80061e0:	b9d8      	cbnz	r0, 800621a <_svfiprintf_r+0xea>
 80061e2:	06d0      	lsls	r0, r2, #27
 80061e4:	bf44      	itt	mi
 80061e6:	2320      	movmi	r3, #32
 80061e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061ec:	0711      	lsls	r1, r2, #28
 80061ee:	bf44      	itt	mi
 80061f0:	232b      	movmi	r3, #43	@ 0x2b
 80061f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061f6:	f89a 3000 	ldrb.w	r3, [sl]
 80061fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80061fc:	d015      	beq.n	800622a <_svfiprintf_r+0xfa>
 80061fe:	9a07      	ldr	r2, [sp, #28]
 8006200:	4654      	mov	r4, sl
 8006202:	2000      	movs	r0, #0
 8006204:	f04f 0c0a 	mov.w	ip, #10
 8006208:	4621      	mov	r1, r4
 800620a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800620e:	3b30      	subs	r3, #48	@ 0x30
 8006210:	2b09      	cmp	r3, #9
 8006212:	d94b      	bls.n	80062ac <_svfiprintf_r+0x17c>
 8006214:	b1b0      	cbz	r0, 8006244 <_svfiprintf_r+0x114>
 8006216:	9207      	str	r2, [sp, #28]
 8006218:	e014      	b.n	8006244 <_svfiprintf_r+0x114>
 800621a:	eba0 0308 	sub.w	r3, r0, r8
 800621e:	fa09 f303 	lsl.w	r3, r9, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	46a2      	mov	sl, r4
 8006228:	e7d2      	b.n	80061d0 <_svfiprintf_r+0xa0>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	1d19      	adds	r1, r3, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	9103      	str	r1, [sp, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	bfbb      	ittet	lt
 8006236:	425b      	neglt	r3, r3
 8006238:	f042 0202 	orrlt.w	r2, r2, #2
 800623c:	9307      	strge	r3, [sp, #28]
 800623e:	9307      	strlt	r3, [sp, #28]
 8006240:	bfb8      	it	lt
 8006242:	9204      	strlt	r2, [sp, #16]
 8006244:	7823      	ldrb	r3, [r4, #0]
 8006246:	2b2e      	cmp	r3, #46	@ 0x2e
 8006248:	d10a      	bne.n	8006260 <_svfiprintf_r+0x130>
 800624a:	7863      	ldrb	r3, [r4, #1]
 800624c:	2b2a      	cmp	r3, #42	@ 0x2a
 800624e:	d132      	bne.n	80062b6 <_svfiprintf_r+0x186>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	9203      	str	r2, [sp, #12]
 8006258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800625c:	3402      	adds	r4, #2
 800625e:	9305      	str	r3, [sp, #20]
 8006260:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006324 <_svfiprintf_r+0x1f4>
 8006264:	7821      	ldrb	r1, [r4, #0]
 8006266:	2203      	movs	r2, #3
 8006268:	4650      	mov	r0, sl
 800626a:	f7f9 ffd1 	bl	8000210 <memchr>
 800626e:	b138      	cbz	r0, 8006280 <_svfiprintf_r+0x150>
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	eba0 000a 	sub.w	r0, r0, sl
 8006276:	2240      	movs	r2, #64	@ 0x40
 8006278:	4082      	lsls	r2, r0
 800627a:	4313      	orrs	r3, r2
 800627c:	3401      	adds	r4, #1
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006284:	4824      	ldr	r0, [pc, #144]	@ (8006318 <_svfiprintf_r+0x1e8>)
 8006286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800628a:	2206      	movs	r2, #6
 800628c:	f7f9 ffc0 	bl	8000210 <memchr>
 8006290:	2800      	cmp	r0, #0
 8006292:	d036      	beq.n	8006302 <_svfiprintf_r+0x1d2>
 8006294:	4b21      	ldr	r3, [pc, #132]	@ (800631c <_svfiprintf_r+0x1ec>)
 8006296:	bb1b      	cbnz	r3, 80062e0 <_svfiprintf_r+0x1b0>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	3307      	adds	r3, #7
 800629c:	f023 0307 	bic.w	r3, r3, #7
 80062a0:	3308      	adds	r3, #8
 80062a2:	9303      	str	r3, [sp, #12]
 80062a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a6:	4433      	add	r3, r6
 80062a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80062aa:	e76a      	b.n	8006182 <_svfiprintf_r+0x52>
 80062ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80062b0:	460c      	mov	r4, r1
 80062b2:	2001      	movs	r0, #1
 80062b4:	e7a8      	b.n	8006208 <_svfiprintf_r+0xd8>
 80062b6:	2300      	movs	r3, #0
 80062b8:	3401      	adds	r4, #1
 80062ba:	9305      	str	r3, [sp, #20]
 80062bc:	4619      	mov	r1, r3
 80062be:	f04f 0c0a 	mov.w	ip, #10
 80062c2:	4620      	mov	r0, r4
 80062c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062c8:	3a30      	subs	r2, #48	@ 0x30
 80062ca:	2a09      	cmp	r2, #9
 80062cc:	d903      	bls.n	80062d6 <_svfiprintf_r+0x1a6>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0c6      	beq.n	8006260 <_svfiprintf_r+0x130>
 80062d2:	9105      	str	r1, [sp, #20]
 80062d4:	e7c4      	b.n	8006260 <_svfiprintf_r+0x130>
 80062d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80062da:	4604      	mov	r4, r0
 80062dc:	2301      	movs	r3, #1
 80062de:	e7f0      	b.n	80062c2 <_svfiprintf_r+0x192>
 80062e0:	ab03      	add	r3, sp, #12
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	462a      	mov	r2, r5
 80062e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006320 <_svfiprintf_r+0x1f0>)
 80062e8:	a904      	add	r1, sp, #16
 80062ea:	4638      	mov	r0, r7
 80062ec:	f3af 8000 	nop.w
 80062f0:	1c42      	adds	r2, r0, #1
 80062f2:	4606      	mov	r6, r0
 80062f4:	d1d6      	bne.n	80062a4 <_svfiprintf_r+0x174>
 80062f6:	89ab      	ldrh	r3, [r5, #12]
 80062f8:	065b      	lsls	r3, r3, #25
 80062fa:	f53f af2d 	bmi.w	8006158 <_svfiprintf_r+0x28>
 80062fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006300:	e72c      	b.n	800615c <_svfiprintf_r+0x2c>
 8006302:	ab03      	add	r3, sp, #12
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	462a      	mov	r2, r5
 8006308:	4b05      	ldr	r3, [pc, #20]	@ (8006320 <_svfiprintf_r+0x1f0>)
 800630a:	a904      	add	r1, sp, #16
 800630c:	4638      	mov	r0, r7
 800630e:	f000 f91b 	bl	8006548 <_printf_i>
 8006312:	e7ed      	b.n	80062f0 <_svfiprintf_r+0x1c0>
 8006314:	080069e4 	.word	0x080069e4
 8006318:	080069ee 	.word	0x080069ee
 800631c:	00000000 	.word	0x00000000
 8006320:	08006079 	.word	0x08006079
 8006324:	080069ea 	.word	0x080069ea

08006328 <sbrk_aligned>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0f      	ldr	r6, [pc, #60]	@ (8006368 <sbrk_aligned+0x40>)
 800632c:	460c      	mov	r4, r1
 800632e:	6831      	ldr	r1, [r6, #0]
 8006330:	4605      	mov	r5, r0
 8006332:	b911      	cbnz	r1, 800633a <sbrk_aligned+0x12>
 8006334:	f000 fa7c 	bl	8006830 <_sbrk_r>
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 fa77 	bl	8006830 <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d103      	bne.n	800634e <sbrk_aligned+0x26>
 8006346:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800634a:	4620      	mov	r0, r4
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	1cc4      	adds	r4, r0, #3
 8006350:	f024 0403 	bic.w	r4, r4, #3
 8006354:	42a0      	cmp	r0, r4
 8006356:	d0f8      	beq.n	800634a <sbrk_aligned+0x22>
 8006358:	1a21      	subs	r1, r4, r0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fa68 	bl	8006830 <_sbrk_r>
 8006360:	3001      	adds	r0, #1
 8006362:	d1f2      	bne.n	800634a <sbrk_aligned+0x22>
 8006364:	e7ef      	b.n	8006346 <sbrk_aligned+0x1e>
 8006366:	bf00      	nop
 8006368:	20000448 	.word	0x20000448

0800636c <_malloc_r>:
 800636c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006370:	1ccd      	adds	r5, r1, #3
 8006372:	f025 0503 	bic.w	r5, r5, #3
 8006376:	3508      	adds	r5, #8
 8006378:	2d0c      	cmp	r5, #12
 800637a:	bf38      	it	cc
 800637c:	250c      	movcc	r5, #12
 800637e:	2d00      	cmp	r5, #0
 8006380:	4606      	mov	r6, r0
 8006382:	db01      	blt.n	8006388 <_malloc_r+0x1c>
 8006384:	42a9      	cmp	r1, r5
 8006386:	d904      	bls.n	8006392 <_malloc_r+0x26>
 8006388:	230c      	movs	r3, #12
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006468 <_malloc_r+0xfc>
 8006396:	f000 f9f7 	bl	8006788 <__malloc_lock>
 800639a:	f8d8 3000 	ldr.w	r3, [r8]
 800639e:	461c      	mov	r4, r3
 80063a0:	bb44      	cbnz	r4, 80063f4 <_malloc_r+0x88>
 80063a2:	4629      	mov	r1, r5
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff ffbf 	bl	8006328 <sbrk_aligned>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	4604      	mov	r4, r0
 80063ae:	d158      	bne.n	8006462 <_malloc_r+0xf6>
 80063b0:	f8d8 4000 	ldr.w	r4, [r8]
 80063b4:	4627      	mov	r7, r4
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d143      	bne.n	8006442 <_malloc_r+0xd6>
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	d04b      	beq.n	8006456 <_malloc_r+0xea>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	4639      	mov	r1, r7
 80063c2:	4630      	mov	r0, r6
 80063c4:	eb04 0903 	add.w	r9, r4, r3
 80063c8:	f000 fa32 	bl	8006830 <_sbrk_r>
 80063cc:	4581      	cmp	r9, r0
 80063ce:	d142      	bne.n	8006456 <_malloc_r+0xea>
 80063d0:	6821      	ldr	r1, [r4, #0]
 80063d2:	1a6d      	subs	r5, r5, r1
 80063d4:	4629      	mov	r1, r5
 80063d6:	4630      	mov	r0, r6
 80063d8:	f7ff ffa6 	bl	8006328 <sbrk_aligned>
 80063dc:	3001      	adds	r0, #1
 80063de:	d03a      	beq.n	8006456 <_malloc_r+0xea>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	442b      	add	r3, r5
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	bb62      	cbnz	r2, 8006448 <_malloc_r+0xdc>
 80063ee:	f8c8 7000 	str.w	r7, [r8]
 80063f2:	e00f      	b.n	8006414 <_malloc_r+0xa8>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	1b52      	subs	r2, r2, r5
 80063f8:	d420      	bmi.n	800643c <_malloc_r+0xd0>
 80063fa:	2a0b      	cmp	r2, #11
 80063fc:	d917      	bls.n	800642e <_malloc_r+0xc2>
 80063fe:	1961      	adds	r1, r4, r5
 8006400:	42a3      	cmp	r3, r4
 8006402:	6025      	str	r5, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	6059      	strne	r1, [r3, #4]
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	bf08      	it	eq
 800640c:	f8c8 1000 	streq.w	r1, [r8]
 8006410:	5162      	str	r2, [r4, r5]
 8006412:	604b      	str	r3, [r1, #4]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f9bd 	bl	8006794 <__malloc_unlock>
 800641a:	f104 000b 	add.w	r0, r4, #11
 800641e:	1d23      	adds	r3, r4, #4
 8006420:	f020 0007 	bic.w	r0, r0, #7
 8006424:	1ac2      	subs	r2, r0, r3
 8006426:	bf1c      	itt	ne
 8006428:	1a1b      	subne	r3, r3, r0
 800642a:	50a3      	strne	r3, [r4, r2]
 800642c:	e7af      	b.n	800638e <_malloc_r+0x22>
 800642e:	6862      	ldr	r2, [r4, #4]
 8006430:	42a3      	cmp	r3, r4
 8006432:	bf0c      	ite	eq
 8006434:	f8c8 2000 	streq.w	r2, [r8]
 8006438:	605a      	strne	r2, [r3, #4]
 800643a:	e7eb      	b.n	8006414 <_malloc_r+0xa8>
 800643c:	4623      	mov	r3, r4
 800643e:	6864      	ldr	r4, [r4, #4]
 8006440:	e7ae      	b.n	80063a0 <_malloc_r+0x34>
 8006442:	463c      	mov	r4, r7
 8006444:	687f      	ldr	r7, [r7, #4]
 8006446:	e7b6      	b.n	80063b6 <_malloc_r+0x4a>
 8006448:	461a      	mov	r2, r3
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	42a3      	cmp	r3, r4
 800644e:	d1fb      	bne.n	8006448 <_malloc_r+0xdc>
 8006450:	2300      	movs	r3, #0
 8006452:	6053      	str	r3, [r2, #4]
 8006454:	e7de      	b.n	8006414 <_malloc_r+0xa8>
 8006456:	230c      	movs	r3, #12
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	4630      	mov	r0, r6
 800645c:	f000 f99a 	bl	8006794 <__malloc_unlock>
 8006460:	e794      	b.n	800638c <_malloc_r+0x20>
 8006462:	6005      	str	r5, [r0, #0]
 8006464:	e7d6      	b.n	8006414 <_malloc_r+0xa8>
 8006466:	bf00      	nop
 8006468:	2000044c 	.word	0x2000044c

0800646c <_printf_common>:
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	4616      	mov	r6, r2
 8006472:	4698      	mov	r8, r3
 8006474:	688a      	ldr	r2, [r1, #8]
 8006476:	690b      	ldr	r3, [r1, #16]
 8006478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800647c:	4293      	cmp	r3, r2
 800647e:	bfb8      	it	lt
 8006480:	4613      	movlt	r3, r2
 8006482:	6033      	str	r3, [r6, #0]
 8006484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006488:	4607      	mov	r7, r0
 800648a:	460c      	mov	r4, r1
 800648c:	b10a      	cbz	r2, 8006492 <_printf_common+0x26>
 800648e:	3301      	adds	r3, #1
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	0699      	lsls	r1, r3, #26
 8006496:	bf42      	ittt	mi
 8006498:	6833      	ldrmi	r3, [r6, #0]
 800649a:	3302      	addmi	r3, #2
 800649c:	6033      	strmi	r3, [r6, #0]
 800649e:	6825      	ldr	r5, [r4, #0]
 80064a0:	f015 0506 	ands.w	r5, r5, #6
 80064a4:	d106      	bne.n	80064b4 <_printf_common+0x48>
 80064a6:	f104 0a19 	add.w	sl, r4, #25
 80064aa:	68e3      	ldr	r3, [r4, #12]
 80064ac:	6832      	ldr	r2, [r6, #0]
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	42ab      	cmp	r3, r5
 80064b2:	dc26      	bgt.n	8006502 <_printf_common+0x96>
 80064b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	3b00      	subs	r3, #0
 80064bc:	bf18      	it	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	0692      	lsls	r2, r2, #26
 80064c2:	d42b      	bmi.n	800651c <_printf_common+0xb0>
 80064c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064c8:	4641      	mov	r1, r8
 80064ca:	4638      	mov	r0, r7
 80064cc:	47c8      	blx	r9
 80064ce:	3001      	adds	r0, #1
 80064d0:	d01e      	beq.n	8006510 <_printf_common+0xa4>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	6922      	ldr	r2, [r4, #16]
 80064d6:	f003 0306 	and.w	r3, r3, #6
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf02      	ittt	eq
 80064de:	68e5      	ldreq	r5, [r4, #12]
 80064e0:	6833      	ldreq	r3, [r6, #0]
 80064e2:	1aed      	subeq	r5, r5, r3
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	bf0c      	ite	eq
 80064e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064ec:	2500      	movne	r5, #0
 80064ee:	4293      	cmp	r3, r2
 80064f0:	bfc4      	itt	gt
 80064f2:	1a9b      	subgt	r3, r3, r2
 80064f4:	18ed      	addgt	r5, r5, r3
 80064f6:	2600      	movs	r6, #0
 80064f8:	341a      	adds	r4, #26
 80064fa:	42b5      	cmp	r5, r6
 80064fc:	d11a      	bne.n	8006534 <_printf_common+0xc8>
 80064fe:	2000      	movs	r0, #0
 8006500:	e008      	b.n	8006514 <_printf_common+0xa8>
 8006502:	2301      	movs	r3, #1
 8006504:	4652      	mov	r2, sl
 8006506:	4641      	mov	r1, r8
 8006508:	4638      	mov	r0, r7
 800650a:	47c8      	blx	r9
 800650c:	3001      	adds	r0, #1
 800650e:	d103      	bne.n	8006518 <_printf_common+0xac>
 8006510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	3501      	adds	r5, #1
 800651a:	e7c6      	b.n	80064aa <_printf_common+0x3e>
 800651c:	18e1      	adds	r1, r4, r3
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	2030      	movs	r0, #48	@ 0x30
 8006522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006526:	4422      	add	r2, r4
 8006528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800652c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006530:	3302      	adds	r3, #2
 8006532:	e7c7      	b.n	80064c4 <_printf_common+0x58>
 8006534:	2301      	movs	r3, #1
 8006536:	4622      	mov	r2, r4
 8006538:	4641      	mov	r1, r8
 800653a:	4638      	mov	r0, r7
 800653c:	47c8      	blx	r9
 800653e:	3001      	adds	r0, #1
 8006540:	d0e6      	beq.n	8006510 <_printf_common+0xa4>
 8006542:	3601      	adds	r6, #1
 8006544:	e7d9      	b.n	80064fa <_printf_common+0x8e>
	...

08006548 <_printf_i>:
 8006548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	7e0f      	ldrb	r7, [r1, #24]
 800654e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006550:	2f78      	cmp	r7, #120	@ 0x78
 8006552:	4691      	mov	r9, r2
 8006554:	4680      	mov	r8, r0
 8006556:	460c      	mov	r4, r1
 8006558:	469a      	mov	sl, r3
 800655a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800655e:	d807      	bhi.n	8006570 <_printf_i+0x28>
 8006560:	2f62      	cmp	r7, #98	@ 0x62
 8006562:	d80a      	bhi.n	800657a <_printf_i+0x32>
 8006564:	2f00      	cmp	r7, #0
 8006566:	f000 80d2 	beq.w	800670e <_printf_i+0x1c6>
 800656a:	2f58      	cmp	r7, #88	@ 0x58
 800656c:	f000 80b9 	beq.w	80066e2 <_printf_i+0x19a>
 8006570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006578:	e03a      	b.n	80065f0 <_printf_i+0xa8>
 800657a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800657e:	2b15      	cmp	r3, #21
 8006580:	d8f6      	bhi.n	8006570 <_printf_i+0x28>
 8006582:	a101      	add	r1, pc, #4	@ (adr r1, 8006588 <_printf_i+0x40>)
 8006584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006588:	080065e1 	.word	0x080065e1
 800658c:	080065f5 	.word	0x080065f5
 8006590:	08006571 	.word	0x08006571
 8006594:	08006571 	.word	0x08006571
 8006598:	08006571 	.word	0x08006571
 800659c:	08006571 	.word	0x08006571
 80065a0:	080065f5 	.word	0x080065f5
 80065a4:	08006571 	.word	0x08006571
 80065a8:	08006571 	.word	0x08006571
 80065ac:	08006571 	.word	0x08006571
 80065b0:	08006571 	.word	0x08006571
 80065b4:	080066f5 	.word	0x080066f5
 80065b8:	0800661f 	.word	0x0800661f
 80065bc:	080066af 	.word	0x080066af
 80065c0:	08006571 	.word	0x08006571
 80065c4:	08006571 	.word	0x08006571
 80065c8:	08006717 	.word	0x08006717
 80065cc:	08006571 	.word	0x08006571
 80065d0:	0800661f 	.word	0x0800661f
 80065d4:	08006571 	.word	0x08006571
 80065d8:	08006571 	.word	0x08006571
 80065dc:	080066b7 	.word	0x080066b7
 80065e0:	6833      	ldr	r3, [r6, #0]
 80065e2:	1d1a      	adds	r2, r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6032      	str	r2, [r6, #0]
 80065e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065f0:	2301      	movs	r3, #1
 80065f2:	e09d      	b.n	8006730 <_printf_i+0x1e8>
 80065f4:	6833      	ldr	r3, [r6, #0]
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	1d19      	adds	r1, r3, #4
 80065fa:	6031      	str	r1, [r6, #0]
 80065fc:	0606      	lsls	r6, r0, #24
 80065fe:	d501      	bpl.n	8006604 <_printf_i+0xbc>
 8006600:	681d      	ldr	r5, [r3, #0]
 8006602:	e003      	b.n	800660c <_printf_i+0xc4>
 8006604:	0645      	lsls	r5, r0, #25
 8006606:	d5fb      	bpl.n	8006600 <_printf_i+0xb8>
 8006608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800660c:	2d00      	cmp	r5, #0
 800660e:	da03      	bge.n	8006618 <_printf_i+0xd0>
 8006610:	232d      	movs	r3, #45	@ 0x2d
 8006612:	426d      	negs	r5, r5
 8006614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006618:	4859      	ldr	r0, [pc, #356]	@ (8006780 <_printf_i+0x238>)
 800661a:	230a      	movs	r3, #10
 800661c:	e011      	b.n	8006642 <_printf_i+0xfa>
 800661e:	6821      	ldr	r1, [r4, #0]
 8006620:	6833      	ldr	r3, [r6, #0]
 8006622:	0608      	lsls	r0, r1, #24
 8006624:	f853 5b04 	ldr.w	r5, [r3], #4
 8006628:	d402      	bmi.n	8006630 <_printf_i+0xe8>
 800662a:	0649      	lsls	r1, r1, #25
 800662c:	bf48      	it	mi
 800662e:	b2ad      	uxthmi	r5, r5
 8006630:	2f6f      	cmp	r7, #111	@ 0x6f
 8006632:	4853      	ldr	r0, [pc, #332]	@ (8006780 <_printf_i+0x238>)
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	bf14      	ite	ne
 8006638:	230a      	movne	r3, #10
 800663a:	2308      	moveq	r3, #8
 800663c:	2100      	movs	r1, #0
 800663e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006642:	6866      	ldr	r6, [r4, #4]
 8006644:	60a6      	str	r6, [r4, #8]
 8006646:	2e00      	cmp	r6, #0
 8006648:	bfa2      	ittt	ge
 800664a:	6821      	ldrge	r1, [r4, #0]
 800664c:	f021 0104 	bicge.w	r1, r1, #4
 8006650:	6021      	strge	r1, [r4, #0]
 8006652:	b90d      	cbnz	r5, 8006658 <_printf_i+0x110>
 8006654:	2e00      	cmp	r6, #0
 8006656:	d04b      	beq.n	80066f0 <_printf_i+0x1a8>
 8006658:	4616      	mov	r6, r2
 800665a:	fbb5 f1f3 	udiv	r1, r5, r3
 800665e:	fb03 5711 	mls	r7, r3, r1, r5
 8006662:	5dc7      	ldrb	r7, [r0, r7]
 8006664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006668:	462f      	mov	r7, r5
 800666a:	42bb      	cmp	r3, r7
 800666c:	460d      	mov	r5, r1
 800666e:	d9f4      	bls.n	800665a <_printf_i+0x112>
 8006670:	2b08      	cmp	r3, #8
 8006672:	d10b      	bne.n	800668c <_printf_i+0x144>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	07df      	lsls	r7, r3, #31
 8006678:	d508      	bpl.n	800668c <_printf_i+0x144>
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	6861      	ldr	r1, [r4, #4]
 800667e:	4299      	cmp	r1, r3
 8006680:	bfde      	ittt	le
 8006682:	2330      	movle	r3, #48	@ 0x30
 8006684:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006688:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800668c:	1b92      	subs	r2, r2, r6
 800668e:	6122      	str	r2, [r4, #16]
 8006690:	f8cd a000 	str.w	sl, [sp]
 8006694:	464b      	mov	r3, r9
 8006696:	aa03      	add	r2, sp, #12
 8006698:	4621      	mov	r1, r4
 800669a:	4640      	mov	r0, r8
 800669c:	f7ff fee6 	bl	800646c <_printf_common>
 80066a0:	3001      	adds	r0, #1
 80066a2:	d14a      	bne.n	800673a <_printf_i+0x1f2>
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066a8:	b004      	add	sp, #16
 80066aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f043 0320 	orr.w	r3, r3, #32
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	4833      	ldr	r0, [pc, #204]	@ (8006784 <_printf_i+0x23c>)
 80066b8:	2778      	movs	r7, #120	@ 0x78
 80066ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	6831      	ldr	r1, [r6, #0]
 80066c2:	061f      	lsls	r7, r3, #24
 80066c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80066c8:	d402      	bmi.n	80066d0 <_printf_i+0x188>
 80066ca:	065f      	lsls	r7, r3, #25
 80066cc:	bf48      	it	mi
 80066ce:	b2ad      	uxthmi	r5, r5
 80066d0:	6031      	str	r1, [r6, #0]
 80066d2:	07d9      	lsls	r1, r3, #31
 80066d4:	bf44      	itt	mi
 80066d6:	f043 0320 	orrmi.w	r3, r3, #32
 80066da:	6023      	strmi	r3, [r4, #0]
 80066dc:	b11d      	cbz	r5, 80066e6 <_printf_i+0x19e>
 80066de:	2310      	movs	r3, #16
 80066e0:	e7ac      	b.n	800663c <_printf_i+0xf4>
 80066e2:	4827      	ldr	r0, [pc, #156]	@ (8006780 <_printf_i+0x238>)
 80066e4:	e7e9      	b.n	80066ba <_printf_i+0x172>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f023 0320 	bic.w	r3, r3, #32
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	e7f6      	b.n	80066de <_printf_i+0x196>
 80066f0:	4616      	mov	r6, r2
 80066f2:	e7bd      	b.n	8006670 <_printf_i+0x128>
 80066f4:	6833      	ldr	r3, [r6, #0]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	6961      	ldr	r1, [r4, #20]
 80066fa:	1d18      	adds	r0, r3, #4
 80066fc:	6030      	str	r0, [r6, #0]
 80066fe:	062e      	lsls	r6, r5, #24
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	d501      	bpl.n	8006708 <_printf_i+0x1c0>
 8006704:	6019      	str	r1, [r3, #0]
 8006706:	e002      	b.n	800670e <_printf_i+0x1c6>
 8006708:	0668      	lsls	r0, r5, #25
 800670a:	d5fb      	bpl.n	8006704 <_printf_i+0x1bc>
 800670c:	8019      	strh	r1, [r3, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	4616      	mov	r6, r2
 8006714:	e7bc      	b.n	8006690 <_printf_i+0x148>
 8006716:	6833      	ldr	r3, [r6, #0]
 8006718:	1d1a      	adds	r2, r3, #4
 800671a:	6032      	str	r2, [r6, #0]
 800671c:	681e      	ldr	r6, [r3, #0]
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	2100      	movs	r1, #0
 8006722:	4630      	mov	r0, r6
 8006724:	f7f9 fd74 	bl	8000210 <memchr>
 8006728:	b108      	cbz	r0, 800672e <_printf_i+0x1e6>
 800672a:	1b80      	subs	r0, r0, r6
 800672c:	6060      	str	r0, [r4, #4]
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	2300      	movs	r3, #0
 8006734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006738:	e7aa      	b.n	8006690 <_printf_i+0x148>
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	4632      	mov	r2, r6
 800673e:	4649      	mov	r1, r9
 8006740:	4640      	mov	r0, r8
 8006742:	47d0      	blx	sl
 8006744:	3001      	adds	r0, #1
 8006746:	d0ad      	beq.n	80066a4 <_printf_i+0x15c>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	079b      	lsls	r3, r3, #30
 800674c:	d413      	bmi.n	8006776 <_printf_i+0x22e>
 800674e:	68e0      	ldr	r0, [r4, #12]
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	4298      	cmp	r0, r3
 8006754:	bfb8      	it	lt
 8006756:	4618      	movlt	r0, r3
 8006758:	e7a6      	b.n	80066a8 <_printf_i+0x160>
 800675a:	2301      	movs	r3, #1
 800675c:	4632      	mov	r2, r6
 800675e:	4649      	mov	r1, r9
 8006760:	4640      	mov	r0, r8
 8006762:	47d0      	blx	sl
 8006764:	3001      	adds	r0, #1
 8006766:	d09d      	beq.n	80066a4 <_printf_i+0x15c>
 8006768:	3501      	adds	r5, #1
 800676a:	68e3      	ldr	r3, [r4, #12]
 800676c:	9903      	ldr	r1, [sp, #12]
 800676e:	1a5b      	subs	r3, r3, r1
 8006770:	42ab      	cmp	r3, r5
 8006772:	dcf2      	bgt.n	800675a <_printf_i+0x212>
 8006774:	e7eb      	b.n	800674e <_printf_i+0x206>
 8006776:	2500      	movs	r5, #0
 8006778:	f104 0619 	add.w	r6, r4, #25
 800677c:	e7f5      	b.n	800676a <_printf_i+0x222>
 800677e:	bf00      	nop
 8006780:	080069f5 	.word	0x080069f5
 8006784:	08006a06 	.word	0x08006a06

08006788 <__malloc_lock>:
 8006788:	4801      	ldr	r0, [pc, #4]	@ (8006790 <__malloc_lock+0x8>)
 800678a:	f7ff bc65 	b.w	8006058 <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	20000444 	.word	0x20000444

08006794 <__malloc_unlock>:
 8006794:	4801      	ldr	r0, [pc, #4]	@ (800679c <__malloc_unlock+0x8>)
 8006796:	f7ff bc60 	b.w	800605a <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	20000444 	.word	0x20000444

080067a0 <_realloc_r>:
 80067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a4:	4680      	mov	r8, r0
 80067a6:	4615      	mov	r5, r2
 80067a8:	460c      	mov	r4, r1
 80067aa:	b921      	cbnz	r1, 80067b6 <_realloc_r+0x16>
 80067ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	4611      	mov	r1, r2
 80067b2:	f7ff bddb 	b.w	800636c <_malloc_r>
 80067b6:	b92a      	cbnz	r2, 80067c4 <_realloc_r+0x24>
 80067b8:	f000 f84a 	bl	8006850 <_free_r>
 80067bc:	2400      	movs	r4, #0
 80067be:	4620      	mov	r0, r4
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	f000 f88e 	bl	80068e4 <_malloc_usable_size_r>
 80067c8:	4285      	cmp	r5, r0
 80067ca:	4606      	mov	r6, r0
 80067cc:	d802      	bhi.n	80067d4 <_realloc_r+0x34>
 80067ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80067d2:	d8f4      	bhi.n	80067be <_realloc_r+0x1e>
 80067d4:	4629      	mov	r1, r5
 80067d6:	4640      	mov	r0, r8
 80067d8:	f7ff fdc8 	bl	800636c <_malloc_r>
 80067dc:	4607      	mov	r7, r0
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0ec      	beq.n	80067bc <_realloc_r+0x1c>
 80067e2:	42b5      	cmp	r5, r6
 80067e4:	462a      	mov	r2, r5
 80067e6:	4621      	mov	r1, r4
 80067e8:	bf28      	it	cs
 80067ea:	4632      	movcs	r2, r6
 80067ec:	f7ff fc36 	bl	800605c <memcpy>
 80067f0:	4621      	mov	r1, r4
 80067f2:	4640      	mov	r0, r8
 80067f4:	f000 f82c 	bl	8006850 <_free_r>
 80067f8:	463c      	mov	r4, r7
 80067fa:	e7e0      	b.n	80067be <_realloc_r+0x1e>

080067fc <memmove>:
 80067fc:	4288      	cmp	r0, r1
 80067fe:	b510      	push	{r4, lr}
 8006800:	eb01 0402 	add.w	r4, r1, r2
 8006804:	d902      	bls.n	800680c <memmove+0x10>
 8006806:	4284      	cmp	r4, r0
 8006808:	4623      	mov	r3, r4
 800680a:	d807      	bhi.n	800681c <memmove+0x20>
 800680c:	1e43      	subs	r3, r0, #1
 800680e:	42a1      	cmp	r1, r4
 8006810:	d008      	beq.n	8006824 <memmove+0x28>
 8006812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800681a:	e7f8      	b.n	800680e <memmove+0x12>
 800681c:	4402      	add	r2, r0
 800681e:	4601      	mov	r1, r0
 8006820:	428a      	cmp	r2, r1
 8006822:	d100      	bne.n	8006826 <memmove+0x2a>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800682a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800682e:	e7f7      	b.n	8006820 <memmove+0x24>

08006830 <_sbrk_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d06      	ldr	r5, [pc, #24]	@ (800684c <_sbrk_r+0x1c>)
 8006834:	2300      	movs	r3, #0
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	f7fa fcbc 	bl	80011b8 <_sbrk>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_sbrk_r+0x1a>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_sbrk_r+0x1a>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	20000450 	.word	0x20000450

08006850 <_free_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4605      	mov	r5, r0
 8006854:	2900      	cmp	r1, #0
 8006856:	d041      	beq.n	80068dc <_free_r+0x8c>
 8006858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685c:	1f0c      	subs	r4, r1, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfb8      	it	lt
 8006862:	18e4      	addlt	r4, r4, r3
 8006864:	f7ff ff90 	bl	8006788 <__malloc_lock>
 8006868:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <_free_r+0x90>)
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	b933      	cbnz	r3, 800687c <_free_r+0x2c>
 800686e:	6063      	str	r3, [r4, #4]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	4628      	mov	r0, r5
 8006874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006878:	f7ff bf8c 	b.w	8006794 <__malloc_unlock>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d908      	bls.n	8006892 <_free_r+0x42>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	1821      	adds	r1, r4, r0
 8006884:	428b      	cmp	r3, r1
 8006886:	bf01      	itttt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	1809      	addeq	r1, r1, r0
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	e7ed      	b.n	800686e <_free_r+0x1e>
 8006892:	461a      	mov	r2, r3
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b10b      	cbz	r3, 800689c <_free_r+0x4c>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x42>
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	1850      	adds	r0, r2, r1
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x6c>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	4401      	add	r1, r0
 80068a8:	1850      	adds	r0, r2, r1
 80068aa:	4283      	cmp	r3, r0
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	d1e0      	bne.n	8006872 <_free_r+0x22>
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6053      	str	r3, [r2, #4]
 80068b6:	4408      	add	r0, r1
 80068b8:	6010      	str	r0, [r2, #0]
 80068ba:	e7da      	b.n	8006872 <_free_r+0x22>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x74>
 80068be:	230c      	movs	r3, #12
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	e7d6      	b.n	8006872 <_free_r+0x22>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	1821      	adds	r1, r4, r0
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf04      	itt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	bf04      	itt	eq
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	6054      	str	r4, [r2, #4]
 80068da:	e7ca      	b.n	8006872 <_free_r+0x22>
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	bf00      	nop
 80068e0:	2000044c 	.word	0x2000044c

080068e4 <_malloc_usable_size_r>:
 80068e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e8:	1f18      	subs	r0, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bfbc      	itt	lt
 80068ee:	580b      	ldrlt	r3, [r1, r0]
 80068f0:	18c0      	addlt	r0, r0, r3
 80068f2:	4770      	bx	lr

080068f4 <_init>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr

08006900 <_fini>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr
