
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003364  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003520  08003520  00004520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003590  08003590  00004590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003598  08003598  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080035ac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080035ac  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4e4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4a  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00012f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000791  00000000  00000000  00013948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d06  00000000  00000000  000140d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b974  00000000  00000000  0003cddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb9f7  00000000  00000000  00048753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014414a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c8  00000000  00000000  00144190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00146958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003508 	.word	0x08003508

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003508 	.word	0x08003508

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 f9b1 	bl	8000892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f806 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f8a2 	bl	800067c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000538:	f000 f854 	bl	80005e4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x14>

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	@ 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	@ 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 ffae 	bl	80034b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fca2 	bl	8000eac <HAL_PWREx_ControlVoltageScaling>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800056e:	f000 f89d 	bl	80006ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000572:	2310      	movs	r3, #16
 8000574:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057e:	2360      	movs	r3, #96	@ 0x60
 8000580:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000586:	2301      	movs	r3, #1
 8000588:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800058e:	233c      	movs	r3, #60	@ 0x3c
 8000590:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fd26 	bl	8000ff4 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f87d 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f92c 	bl	8001828 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f869 	bl	80006ac <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	@ 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 80005ea:	4a23      	ldr	r2, [pc, #140]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062c:	4811      	ldr	r0, [pc, #68]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 800062e:	f002 f8d1 	bl	80027d4 <HAL_UART_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000638:	f000 f838 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000640:	f002 fe6c 	bl	800331c <HAL_UARTEx_SetTxFifoThreshold>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800064a:	f000 f82f 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4808      	ldr	r0, [pc, #32]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000652:	f002 fea1 	bl	8003398 <HAL_UARTEx_SetRxFifoThreshold>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800065c:	f000 f826 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_USART1_UART_Init+0x90>)
 8000662:	f002 fe22 	bl	80032aa <HAL_UARTEx_DisableFifoMode>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800066c:	f000 f81e 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028
 8000678:	40013800 	.word	0x40013800

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_GPIO_Init+0x2c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <MX_GPIO_Init+0x2c>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_GPIO_Init+0x2c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_MspInit+0x44>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_MspInit+0x44>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0ae      	sub	sp, #184	@ 0xb8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2294      	movs	r2, #148	@ 0x94
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fec5 	bl	80034b0 <memset>
  if(huart->Instance==USART1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <HAL_UART_MspInit+0xb0>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d13a      	bne.n	80007a6 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000730:	2301      	movs	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fb31 	bl	8001da4 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000748:	f7ff ffb0 	bl	80006ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <HAL_UART_MspInit+0xb4>)
 800074e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000750:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <HAL_UART_MspInit+0xb4>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6613      	str	r3, [r2, #96]	@ 0x60
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <HAL_UART_MspInit+0xb4>)
 800075a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800075c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <HAL_UART_MspInit+0xb4>)
 8000766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000768:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <HAL_UART_MspInit+0xb4>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <HAL_UART_MspInit+0xb4>)
 8000772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000774:	f003 0302 	and.w	r3, r3, #2
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800077c:	23c0      	movs	r3, #192	@ 0xc0
 800077e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000794:	2307      	movs	r3, #7
 8000796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <HAL_UART_MspInit+0xb8>)
 80007a2:	f000 f9d1 	bl	8000b48 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80007a6:	bf00      	nop
 80007a8:	37b8      	adds	r7, #184	@ 0xb8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40013800 	.word	0x40013800
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <NMI_Handler+0x4>

080007c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <MemManage_Handler+0x4>

080007d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000812:	f000 f893 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <SystemInit+0x20>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <SystemInit+0x20>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000878 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000844:	f7ff ffea 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f002 fe27 	bl	80034c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fe59 	bl	8000528 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000878:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000884:	080035a0 	.word	0x080035a0
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800088c:	200000c0 	.word	0x200000c0

08000890 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_IRQHandler>

08000892 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f91f 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f80e 	bl	80008c4 <HAL_InitTick>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e001      	b.n	80008b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b4:	f7ff ff00 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <HAL_InitTick+0x6c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d023      	beq.n	8000920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <HAL_InitTick+0x70>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <HAL_InitTick+0x6c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f91d 	bl	8000b2e <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10f      	bne.n	800091a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d809      	bhi.n	8000914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000908:	f000 f8f5 	bl	8000af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_InitTick+0x74>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	e007      	b.n	8000924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e004      	b.n	8000924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	e001      	b.n	8000924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000000 	.word	0x20000000
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_IncTick+0x20>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_IncTick+0x24>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <HAL_IncTick+0x24>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008
 8000960:	200000bc 	.word	0x200000bc

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <HAL_GetTick+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	200000bc 	.word	0x200000bc

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	@ (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	@ 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	@ 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f7ff ff8e 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff47 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff5c 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff8e 	bl	8000a34 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5d 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffb0 	bl	8000a9c <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	e166      	b.n	8000e26 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 8158 	beq.w	8000e20 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d005      	beq.n	8000b88 <HAL_GPIO_Init+0x40>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d130      	bne.n	8000bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 0201 	and.w	r2, r3, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d017      	beq.n	8000c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d123      	bne.n	8000c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3208      	adds	r2, #8
 8000c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	08da      	lsrs	r2, r3, #3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3208      	adds	r2, #8
 8000c74:	6939      	ldr	r1, [r7, #16]
 8000c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0203 	and.w	r2, r3, #3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80b2 	beq.w	8000e20 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbc:	4b61      	ldr	r3, [pc, #388]	@ (8000e44 <HAL_GPIO_Init+0x2fc>)
 8000cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc0:	4a60      	ldr	r2, [pc, #384]	@ (8000e44 <HAL_GPIO_Init+0x2fc>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8000e44 <HAL_GPIO_Init+0x2fc>)
 8000cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd4:	4a5c      	ldr	r2, [pc, #368]	@ (8000e48 <HAL_GPIO_Init+0x300>)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cfe:	d02b      	beq.n	8000d58 <HAL_GPIO_Init+0x210>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a52      	ldr	r2, [pc, #328]	@ (8000e4c <HAL_GPIO_Init+0x304>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d025      	beq.n	8000d54 <HAL_GPIO_Init+0x20c>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a51      	ldr	r2, [pc, #324]	@ (8000e50 <HAL_GPIO_Init+0x308>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d01f      	beq.n	8000d50 <HAL_GPIO_Init+0x208>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a50      	ldr	r2, [pc, #320]	@ (8000e54 <HAL_GPIO_Init+0x30c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d019      	beq.n	8000d4c <HAL_GPIO_Init+0x204>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8000e58 <HAL_GPIO_Init+0x310>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d013      	beq.n	8000d48 <HAL_GPIO_Init+0x200>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a4e      	ldr	r2, [pc, #312]	@ (8000e5c <HAL_GPIO_Init+0x314>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00d      	beq.n	8000d44 <HAL_GPIO_Init+0x1fc>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e60 <HAL_GPIO_Init+0x318>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x1f8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a4c      	ldr	r2, [pc, #304]	@ (8000e64 <HAL_GPIO_Init+0x31c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_Init+0x1f4>
 8000d38:	2307      	movs	r3, #7
 8000d3a:	e00e      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	e00c      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d40:	2306      	movs	r3, #6
 8000d42:	e00a      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d44:	2305      	movs	r3, #5
 8000d46:	e008      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6a:	4937      	ldr	r1, [pc, #220]	@ (8000e48 <HAL_GPIO_Init+0x300>)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d78:	4b3b      	ldr	r3, [pc, #236]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d9c:	4a32      	ldr	r2, [pc, #200]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dc6:	4a28      	ldr	r2, [pc, #160]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000df0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e1a:	4a13      	ldr	r2, [pc, #76]	@ (8000e68 <HAL_GPIO_Init+0x320>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f47f ae91 	bne.w	8000b58 <HAL_GPIO_Init+0x10>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000c00 	.word	0x48000c00
 8000e58:	48001000 	.word	0x48001000
 8000e5c:	48001400 	.word	0x48001400
 8000e60:	48001800 	.word	0x48001800
 8000e64:	48001c00 	.word	0x48001c00
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e7c:	d102      	bne.n	8000e84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	e00b      	b.n	8000e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e92:	d102      	bne.n	8000e9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e98:	e000      	b.n	8000e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000e9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40007000 	.word	0x40007000

08000eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d141      	bne.n	8000f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eba:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec6:	d131      	bne.n	8000f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ec8:	4b47      	ldr	r3, [pc, #284]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ece:	4a46      	ldr	r2, [pc, #280]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	4b43      	ldr	r3, [pc, #268]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ee0:	4a41      	ldr	r2, [pc, #260]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ee8:	4b40      	ldr	r3, [pc, #256]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2232      	movs	r2, #50	@ 0x32
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0c9b      	lsrs	r3, r3, #18
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000efe:	e002      	b.n	8000f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f06:	4b38      	ldr	r3, [pc, #224]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f12:	d102      	bne.n	8000f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f2      	bne.n	8000f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f1a:	4b33      	ldr	r3, [pc, #204]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f26:	d158      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e057      	b.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f32:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000f3c:	e04d      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f44:	d141      	bne.n	8000fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f46:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f52:	d131      	bne.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f54:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f5a:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2232      	movs	r2, #50	@ 0x32
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	0c9b      	lsrs	r3, r3, #18
 8000f86:	3301      	adds	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f8a:	e002      	b.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f9e:	d102      	bne.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f2      	bne.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fb2:	d112      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e011      	b.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000fc8:	e007      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	431bde83 	.word	0x431bde83

08000ff4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f000 bc08 	b.w	8001818 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001008:	4b96      	ldr	r3, [pc, #600]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001012:	4b94      	ldr	r3, [pc, #592]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80e4 	beq.w	80011f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <HAL_RCC_OscConfig+0x4c>
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b0c      	cmp	r3, #12
 8001034:	f040 808b 	bne.w	800114e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b01      	cmp	r3, #1
 800103c:	f040 8087 	bne.w	800114e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001040:	4b88      	ldr	r3, [pc, #544]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <HAL_RCC_OscConfig+0x64>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e3df      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4b81      	ldr	r3, [pc, #516]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <HAL_RCC_OscConfig+0x7e>
 8001068:	4b7e      	ldr	r3, [pc, #504]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001070:	e005      	b.n	800107e <HAL_RCC_OscConfig+0x8a>
 8001072:	4b7c      	ldr	r3, [pc, #496]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800107e:	4293      	cmp	r3, r2
 8001080:	d223      	bcs.n	80010ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fdcc 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e3c0      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001096:	4b73      	ldr	r3, [pc, #460]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a72      	ldr	r2, [pc, #456]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b70      	ldr	r3, [pc, #448]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	496d      	ldr	r1, [pc, #436]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	4968      	ldr	r1, [pc, #416]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
 80010c8:	e025      	b.n	8001116 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ca:	4b66      	ldr	r3, [pc, #408]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a65      	ldr	r2, [pc, #404]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b63      	ldr	r3, [pc, #396]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4960      	ldr	r1, [pc, #384]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	495b      	ldr	r1, [pc, #364]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fd8c 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e380      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001116:	f000 fcc1 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 800111a:	4602      	mov	r2, r0
 800111c:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	4950      	ldr	r1, [pc, #320]	@ (8001268 <HAL_RCC_OscConfig+0x274>)
 8001128:	5ccb      	ldrb	r3, [r1, r3]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	4a4e      	ldr	r2, [pc, #312]	@ (800126c <HAL_RCC_OscConfig+0x278>)
 8001134:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001136:	4b4e      	ldr	r3, [pc, #312]	@ (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fbc2 	bl	80008c4 <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d052      	beq.n	80011f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	e364      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d032      	beq.n	80011bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001156:	4b43      	ldr	r3, [pc, #268]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a42      	ldr	r2, [pc, #264]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001162:	f7ff fbff 	bl	8000964 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116a:	f7ff fbfb 	bl	8000964 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e34d      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001188:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a35      	ldr	r2, [pc, #212]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4930      	ldr	r1, [pc, #192]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	492b      	ldr	r1, [pc, #172]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e01a      	b.n	80011f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fbcc 	bl	8000964 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d0:	f7ff fbc8 	bl	8000964 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e31a      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1dc>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d073      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x21c>
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d10e      	bne.n	8001228 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d10b      	bne.n	8001228 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d063      	beq.n	80012e4 <HAL_RCC_OscConfig+0x2f0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d15f      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2f7      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x24c>
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e025      	b.n	800128c <HAL_RCC_OscConfig+0x298>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001248:	d114      	bne.n	8001274 <HAL_RCC_OscConfig+0x280>
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a02      	ldr	r2, [pc, #8]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x298>
 8001264:	40021000 	.word	0x40021000
 8001268:	08003520 	.word	0x08003520
 800126c:	20000000 	.word	0x20000000
 8001270:	20000004 	.word	0x20000004
 8001274:	4ba0      	ldr	r3, [pc, #640]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a9f      	ldr	r2, [pc, #636]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b9d      	ldr	r3, [pc, #628]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a9c      	ldr	r2, [pc, #624]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fb66 	bl	8000964 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fb62 	bl	8000964 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	@ 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e2b4      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ae:	4b92      	ldr	r3, [pc, #584]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x2a8>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fb52 	bl	8000964 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb4e 	bl	8000964 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	@ 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e2a0      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d6:	4b88      	ldr	r3, [pc, #544]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2d0>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d060      	beq.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x310>
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b0c      	cmp	r3, #12
 80012fc:	d119      	bne.n	8001332 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d116      	bne.n	8001332 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001304:	4b7c      	ldr	r3, [pc, #496]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_OscConfig+0x328>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e27d      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b76      	ldr	r3, [pc, #472]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	061b      	lsls	r3, r3, #24
 800132a:	4973      	ldr	r1, [pc, #460]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001330:	e040      	b.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d023      	beq.n	8001382 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133a:	4b6f      	ldr	r3, [pc, #444]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6e      	ldr	r2, [pc, #440]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fb0d 	bl	8000964 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fb09 	bl	8000964 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e25b      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001360:	4b65      	ldr	r3, [pc, #404]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b62      	ldr	r3, [pc, #392]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	061b      	lsls	r3, r3, #24
 800137a:	495f      	ldr	r1, [pc, #380]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e018      	b.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a5c      	ldr	r2, [pc, #368]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800138c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fae9 	bl	8000964 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fae5 	bl	8000964 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e237      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a8:	4b53      	ldr	r3, [pc, #332]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d03c      	beq.n	800143a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01c      	beq.n	8001402 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c8:	4b4b      	ldr	r3, [pc, #300]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ce:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fac4 	bl	8000964 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fac0 	bl	8000964 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e212      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ef      	beq.n	80013e0 <HAL_RCC_OscConfig+0x3ec>
 8001400:	e01b      	b.n	800143a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001402:	4b3d      	ldr	r3, [pc, #244]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001408:	4a3b      	ldr	r2, [pc, #236]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff faa7 	bl	8000964 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff faa3 	bl	8000964 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1f5      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800142c:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ef      	bne.n	800141a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80a6 	beq.w	8001594 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10d      	bne.n	8001474 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	4a26      	ldr	r2, [pc, #152]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001462:	6593      	str	r3, [r2, #88]	@ 0x58
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001470:	2301      	movs	r3, #1
 8001472:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001474:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <HAL_RCC_OscConfig+0x508>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d118      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <HAL_RCC_OscConfig+0x508>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <HAL_RCC_OscConfig+0x508>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148c:	f7ff fa6a 	bl	8000964 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001494:	f7ff fa66 	bl	8000964 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1b8      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_RCC_OscConfig+0x508>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <HAL_RCC_OscConfig+0x4d8>
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014ca:	e029      	b.n	8001520 <HAL_RCC_OscConfig+0x52c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d115      	bne.n	8001500 <HAL_RCC_OscConfig+0x50c>
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014da:	4a07      	ldr	r2, [pc, #28]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ea:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014f4:	e014      	b.n	8001520 <HAL_RCC_OscConfig+0x52c>
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40007000 	.word	0x40007000
 8001500:	4b9d      	ldr	r3, [pc, #628]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001506:	4a9c      	ldr	r2, [pc, #624]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001510:	4b99      	ldr	r3, [pc, #612]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001516:	4a98      	ldr	r2, [pc, #608]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d016      	beq.n	8001556 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff fa1c 	bl	8000964 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fa18 	bl	8000964 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e168      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001546:	4b8c      	ldr	r3, [pc, #560]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0ed      	beq.n	8001530 <HAL_RCC_OscConfig+0x53c>
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fa05 	bl	8000964 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff fa01 	bl	8000964 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e151      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001574:	4b80      	ldr	r3, [pc, #512]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ed      	bne.n	800155e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7ffb      	ldrb	r3, [r7, #31]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b7b      	ldr	r3, [pc, #492]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158c:	4a7a      	ldr	r2, [pc, #488]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001592:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03c      	beq.n	800161a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015a8:	4b73      	ldr	r3, [pc, #460]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80015aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015ae:	4a72      	ldr	r2, [pc, #456]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff f9d4 	bl	8000964 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff f9d0 	bl	8000964 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e122      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015d2:	4b69      	ldr	r3, [pc, #420]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80015d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ef      	beq.n	80015c0 <HAL_RCC_OscConfig+0x5cc>
 80015e0:	e01b      	b.n	800161a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015e2:	4b65      	ldr	r3, [pc, #404]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80015e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015e8:	4a63      	ldr	r2, [pc, #396]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff f9b7 	bl	8000964 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fa:	f7ff f9b3 	bl	8000964 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e105      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800160c:	4b5a      	ldr	r3, [pc, #360]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 800160e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ef      	bne.n	80015fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80f9 	beq.w	8001816 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	2b02      	cmp	r3, #2
 800162a:	f040 80cf 	bne.w	80017cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800162e:	4b52      	ldr	r3, [pc, #328]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f003 0203 	and.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163e:	429a      	cmp	r2, r3
 8001640:	d12c      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164c:	3b01      	subs	r3, #1
 800164e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d123      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800165e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d11b      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d113      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167e:	085b      	lsrs	r3, r3, #1
 8001680:	3b01      	subs	r3, #1
 8001682:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d109      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d071      	beq.n	8001780 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d068      	beq.n	8001774 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016a2:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d105      	bne.n	80016ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ae:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0ac      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016be:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80016c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ca:	f7ff f94b 	bl	8000964 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f947 	bl	8000964 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e099      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4b21      	ldr	r3, [pc, #132]	@ (800177c <HAL_RCC_OscConfig+0x788>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001700:	3a01      	subs	r2, #1
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800170a:	0212      	lsls	r2, r2, #8
 800170c:	4311      	orrs	r1, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001712:	0852      	lsrs	r2, r2, #1
 8001714:	3a01      	subs	r2, #1
 8001716:	0552      	lsls	r2, r2, #21
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800171e:	0852      	lsrs	r2, r2, #1
 8001720:	3a01      	subs	r2, #1
 8001722:	0652      	lsls	r2, r2, #25
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800172a:	06d2      	lsls	r2, r2, #27
 800172c:	430a      	orrs	r2, r1
 800172e:	4912      	ldr	r1, [pc, #72]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001734:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 800173a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001740:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800174c:	f7ff f90a 	bl	8000964 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f906 	bl	8000964 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e058      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001766:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <HAL_RCC_OscConfig+0x784>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001772:	e050      	b.n	8001816 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e04f      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
 8001778:	40021000 	.word	0x40021000
 800177c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001780:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d144      	bne.n	8001816 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017a4:	f7ff f8de 	bl	8000964 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f8da 	bl	8000964 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e02c      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x7b8>
 80017ca:	e024      	b.n	8001816 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d01f      	beq.n	8001812 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff f8c1 	bl	8000964 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff f8bd 	bl	8000964 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	4905      	ldr	r1, [pc, #20]	@ (8001820 <HAL_RCC_OscConfig+0x82c>)
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x830>)
 800180c:	4013      	ands	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
 8001810:	e001      	b.n	8001816 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	feeefffc 	.word	0xfeeefffc

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e11d      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b90      	ldr	r3, [pc, #576]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d910      	bls.n	8001870 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b8d      	ldr	r3, [pc, #564]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 020f 	bic.w	r2, r3, #15
 8001856:	498b      	ldr	r1, [pc, #556]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b89      	ldr	r3, [pc, #548]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e105      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	4b81      	ldr	r3, [pc, #516]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001888:	429a      	cmp	r2, r3
 800188a:	d908      	bls.n	800189e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	497b      	ldr	r1, [pc, #492]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d079      	beq.n	800199e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d11e      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	4b75      	ldr	r3, [pc, #468]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0dc      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80018c2:	f000 fa09 	bl	8001cd8 <RCC_GetSysClockFreqFromPLLSource>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a70      	ldr	r2, [pc, #448]	@ (8001a8c <HAL_RCC_ClockConfig+0x264>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d946      	bls.n	800195c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d140      	bne.n	800195c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018da:	4b6b      	ldr	r3, [pc, #428]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018e2:	4a69      	ldr	r2, [pc, #420]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e035      	b.n	800195c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f8:	4b63      	ldr	r3, [pc, #396]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d115      	bne.n	8001930 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b9      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001910:	4b5d      	ldr	r3, [pc, #372]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0ad      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001920:	4b59      	ldr	r3, [pc, #356]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0a5      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001930:	f000 f8b4 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001934:	4603      	mov	r3, r0
 8001936:	4a55      	ldr	r2, [pc, #340]	@ (8001a8c <HAL_RCC_ClockConfig+0x264>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d90f      	bls.n	800195c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800193c:	4b52      	ldr	r3, [pc, #328]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001948:	4b4f      	ldr	r3, [pc, #316]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001950:	4a4d      	ldr	r2, [pc, #308]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001956:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800195c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 0203 	bic.w	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4947      	ldr	r1, [pc, #284]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800196e:	f7fe fff9 	bl	8000964 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001974:	e00a      	b.n	800198c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001976:	f7fe fff5 	bl	8000964 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e077      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 020c 	and.w	r2, r3, #12
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	429a      	cmp	r2, r3
 800199c:	d1eb      	bne.n	8001976 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b80      	cmp	r3, #128	@ 0x80
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019a4:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a37      	ldr	r2, [pc, #220]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80019aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d208      	bcs.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	492b      	ldr	r1, [pc, #172]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019de:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d210      	bcs.n	8001a0e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 020f 	bic.w	r2, r3, #15
 80019f4:	4923      	ldr	r1, [pc, #140]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fc:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_RCC_ClockConfig+0x25c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e036      	b.n	8001a7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4918      	ldr	r1, [pc, #96]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4910      	ldr	r1, [pc, #64]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4c:	f000 f826 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_RCC_ClockConfig+0x260>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	490c      	ldr	r1, [pc, #48]	@ (8001a90 <HAL_RCC_ClockConfig+0x268>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <HAL_RCC_ClockConfig+0x26c>)
 8001a6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_RCC_ClockConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe ff27 	bl	80008c4 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]

  return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	04c4b400 	.word	0x04c4b400
 8001a90:	08003520 	.word	0x08003520
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d121      	bne.n	8001b0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d11e      	bne.n	8001b0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ad0:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001adc:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e005      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001af8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d102      	bne.n	8001b1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b14:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x110>)
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	e004      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b20:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d134      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d003      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0xac>
 8001b40:	e005      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x110>)
 8001b44:	617b      	str	r3, [r7, #20]
      break;
 8001b46:	e005      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b4a:	617b      	str	r3, [r7, #20]
      break;
 8001b4c:	e002      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	617b      	str	r3, [r7, #20]
      break;
 8001b52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3301      	adds	r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	fb03 f202 	mul.w	r2, r3, r2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	0e5b      	lsrs	r3, r3, #25
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	3301      	adds	r3, #1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b94:	69bb      	ldr	r3, [r7, #24]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08003538 	.word	0x08003538
 8001bac:	00f42400 	.word	0x00f42400
 8001bb0:	007a1200 	.word	0x007a1200

08001bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bd0:	f7ff fff0 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4904      	ldr	r1, [pc, #16]	@ (8001bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003530 	.word	0x08003530

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bfc:	f7ff ffda 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4904      	ldr	r1, [pc, #16]	@ (8001c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08003530 	.word	0x08003530

08001c24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c30:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c3c:	f7ff f916 	bl	8000e6c <HAL_PWREx_GetVoltageRange>
 8001c40:	6178      	str	r0, [r7, #20]
 8001c42:	e014      	b.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	4a21      	ldr	r2, [pc, #132]	@ (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c50:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c5c:	f7ff f906 	bl	8000e6c <HAL_PWREx_GetVoltageRange>
 8001c60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c74:	d10b      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b80      	cmp	r3, #128	@ 0x80
 8001c7a:	d913      	bls.n	8001ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c80:	d902      	bls.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c82:	2302      	movs	r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e00d      	b.n	8001ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e00a      	b.n	8001ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c92:	d902      	bls.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001c94:	2302      	movs	r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e004      	b.n	8001ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b70      	cmp	r3, #112	@ 0x70
 8001c9e:	d101      	bne.n	8001ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 020f 	bic.w	r2, r3, #15
 8001cac:	4909      	ldr	r1, [pc, #36]	@ (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cde:	4b2d      	ldr	r3, [pc, #180]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d00b      	beq.n	8001d06 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d825      	bhi.n	8001d40 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d008      	beq.n	8001d0c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d11f      	bne.n	8001d40 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d02:	613b      	str	r3, [r7, #16]
    break;
 8001d04:	e01f      	b.n	8001d46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001d06:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001d08:	613b      	str	r3, [r7, #16]
    break;
 8001d0a:	e01c      	b.n	8001d46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e005      	b.n	8001d34 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001d34:	4a1a      	ldr	r2, [pc, #104]	@ (8001da0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	613b      	str	r3, [r7, #16]
    break;
 8001d3e:	e002      	b.n	8001d46 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
    break;
 8001d44:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	3301      	adds	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	fb03 f202 	mul.w	r2, r3, r2
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0e5b      	lsrs	r3, r3, #25
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	3301      	adds	r3, #1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001d86:	683b      	ldr	r3, [r7, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40021000 	.word	0x40021000
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	007a1200 	.word	0x007a1200
 8001da0:	08003538 	.word	0x08003538

08001da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dac:	2300      	movs	r3, #0
 8001dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001db0:	2300      	movs	r3, #0
 8001db2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d040      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dc4:	2b80      	cmp	r3, #128	@ 0x80
 8001dc6:	d02a      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001dc8:	2b80      	cmp	r3, #128	@ 0x80
 8001dca:	d825      	bhi.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001dcc:	2b60      	cmp	r3, #96	@ 0x60
 8001dce:	d026      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001dd0:	2b60      	cmp	r3, #96	@ 0x60
 8001dd2:	d821      	bhi.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001dd4:	2b40      	cmp	r3, #64	@ 0x40
 8001dd6:	d006      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001dd8:	2b40      	cmp	r3, #64	@ 0x40
 8001dda:	d81d      	bhi.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d010      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001de4:	e018      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de6:	4b89      	ldr	r3, [pc, #548]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4a88      	ldr	r2, [pc, #544]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df2:	e015      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fb02 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e04:	e00c      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3320      	adds	r3, #32
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fbed 	bl	80025ec <RCCEx_PLLSAI2_Config>
 8001e12:	4603      	mov	r3, r0
 8001e14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e16:	e003      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1c:	e000      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8001e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e20:	7cfb      	ldrb	r3, [r7, #19]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10b      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e26:	4b79      	ldr	r3, [pc, #484]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e2c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e34:	4975      	ldr	r1, [pc, #468]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8001e3c:	e001      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d047      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e56:	d030      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5c:	d82a      	bhi.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e62:	d02a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e68:	d824      	bhi.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e74:	d81e      	bhi.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001e80:	e018      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e82:	4b62      	ldr	r3, [pc, #392]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4a61      	ldr	r2, [pc, #388]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e8e:	e015      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3304      	adds	r3, #4
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fab4 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea0:	e00c      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3320      	adds	r3, #32
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fb9f 	bl	80025ec <RCCEx_PLLSAI2_Config>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb2:	e003      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	74fb      	strb	r3, [r7, #19]
      break;
 8001eb8:	e000      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8001eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ec2:	4b52      	ldr	r3, [pc, #328]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ec8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed0:	494e      	ldr	r1, [pc, #312]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8001ed8:	e001      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eda:	7cfb      	ldrb	r3, [r7, #19]
 8001edc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 809f 	beq.w	800202a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ef0:	4b46      	ldr	r3, [pc, #280]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b41      	ldr	r3, [pc, #260]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	4a40      	ldr	r2, [pc, #256]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f12:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f22:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3a      	ldr	r2, [pc, #232]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f2e:	f7fe fd19 	bl	8000964 <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f34:	e009      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7fe fd15 	bl	8000964 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d902      	bls.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	74fb      	strb	r3, [r7, #19]
        break;
 8001f48:	e005      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f4a:	4b31      	ldr	r3, [pc, #196]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ef      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d15b      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f66:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01f      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d019      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f96:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fa6:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d016      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fcd4 	bl	8000964 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7fe fcd0 	bl	8000964 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d902      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	74fb      	strb	r3, [r7, #19]
            break;
 8001fd6:	e006      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ec      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fec:	4b07      	ldr	r3, [pc, #28]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffc:	4903      	ldr	r1, [pc, #12]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002004:	e008      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	74bb      	strb	r3, [r7, #18]
 800200a:	e005      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002018:	7c7b      	ldrb	r3, [r7, #17]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4ba0      	ldr	r3, [pc, #640]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	4a9f      	ldr	r2, [pc, #636]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002028:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002036:	4b9a      	ldr	r3, [pc, #616]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203c:	f023 0203 	bic.w	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002044:	4996      	ldr	r1, [pc, #600]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002058:	4b91      	ldr	r3, [pc, #580]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	f023 020c 	bic.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	498e      	ldr	r1, [pc, #568]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800207a:	4b89      	ldr	r3, [pc, #548]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002080:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002088:	4985      	ldr	r1, [pc, #532]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800209c:	4b80      	ldr	r3, [pc, #512]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020aa:	497d      	ldr	r1, [pc, #500]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020be:	4b78      	ldr	r3, [pc, #480]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020cc:	4974      	ldr	r1, [pc, #464]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e0:	4b6f      	ldr	r3, [pc, #444]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ee:	496c      	ldr	r1, [pc, #432]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002102:	4b67      	ldr	r3, [pc, #412]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002108:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002110:	4963      	ldr	r1, [pc, #396]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002124:	4b5e      	ldr	r3, [pc, #376]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002132:	495b      	ldr	r1, [pc, #364]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002146:	4b56      	ldr	r3, [pc, #344]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002154:	4952      	ldr	r1, [pc, #328]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002168:	4b4d      	ldr	r3, [pc, #308]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	494a      	ldr	r1, [pc, #296]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800218a:	4b45      	ldr	r3, [pc, #276]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002190:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002198:	4941      	ldr	r1, [pc, #260]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021ac:	4b3c      	ldr	r3, [pc, #240]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ba:	4939      	ldr	r1, [pc, #228]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d028      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021ce:	4b34      	ldr	r3, [pc, #208]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021dc:	4930      	ldr	r1, [pc, #192]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ec:	d106      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ee:	4b2c      	ldr	r3, [pc, #176]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4a2b      	ldr	r2, [pc, #172]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f8:	60d3      	str	r3, [r2, #12]
 80021fa:	e011      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002204:	d10c      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f8f9 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d04d      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002234:	d108      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002238:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800223c:	4a18      	ldr	r2, [pc, #96]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800223e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002242:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002246:	e012      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800224a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800224e:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002254:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002266:	490e      	ldr	r1, [pc, #56]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a08      	ldr	r2, [pc, #32]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800227e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002282:	60d3      	str	r3, [r2, #12]
 8002284:	e020      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800228a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800228e:	d109      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a02      	ldr	r2, [pc, #8]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229a:	60d3      	str	r3, [r2, #12]
 800229c:	e014      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f8a5 	bl	8002404 <RCCEx_PLLSAI1_Config>
 80022ba:	4603      	mov	r3, r0
 80022bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d028      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022e2:	4947      	ldr	r1, [pc, #284]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f2:	d106      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b42      	ldr	r3, [pc, #264]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a41      	ldr	r2, [pc, #260]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
 8002300:	e011      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800230a:	d10c      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f876 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01e      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002332:	4b33      	ldr	r3, [pc, #204]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002342:	492f      	ldr	r1, [pc, #188]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002354:	d10c      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	2102      	movs	r1, #2
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f851 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800237c:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002382:	f023 0204 	bic.w	r2, r3, #4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800238c:	491c      	ldr	r1, [pc, #112]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023a0:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023a6:	f023 0218 	bic.w	r2, r3, #24
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b0:	4913      	ldr	r1, [pc, #76]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d017      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80023c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d4:	490a      	ldr	r1, [pc, #40]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002412:	4b72      	ldr	r3, [pc, #456]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00e      	beq.n	800243c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800241e:	4b6f      	ldr	r3, [pc, #444]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0203 	and.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d103      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
       ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	d142      	bne.n	80024bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	e03f      	b.n	80024bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d018      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x72>
 8002444:	2b03      	cmp	r3, #3
 8002446:	d825      	bhi.n	8002494 <RCCEx_PLLSAI1_Config+0x90>
 8002448:	2b01      	cmp	r3, #1
 800244a:	d002      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0x4e>
 800244c:	2b02      	cmp	r3, #2
 800244e:	d009      	beq.n	8002464 <RCCEx_PLLSAI1_Config+0x60>
 8002450:	e020      	b.n	8002494 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002452:	4b62      	ldr	r3, [pc, #392]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d11d      	bne.n	800249a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002462:	e01a      	b.n	800249a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002464:	4b5d      	ldr	r3, [pc, #372]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d116      	bne.n	800249e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002474:	e013      	b.n	800249e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002476:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002482:	4b56      	ldr	r3, [pc, #344]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002492:	e006      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e004      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800249a:	bf00      	nop
 800249c:	e002      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80024a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80024aa:	4b4c      	ldr	r3, [pc, #304]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f023 0203 	bic.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4949      	ldr	r1, [pc, #292]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 8086 	bne.w	80025d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024c4:	4b45      	ldr	r3, [pc, #276]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a44      	ldr	r2, [pc, #272]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80024ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fa48 	bl	8000964 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d6:	e009      	b.n	80024ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d8:	f7fe fa44 	bl	8000964 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d902      	bls.n	80024ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ea:	e005      	b.n	80024f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ec:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ef      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d168      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002504:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6892      	ldr	r2, [r2, #8]
 8002510:	0211      	lsls	r1, r2, #8
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	06d2      	lsls	r2, r2, #27
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6852      	ldr	r2, [r2, #4]
 800251e:	3a01      	subs	r2, #1
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	430a      	orrs	r2, r1
 8002524:	492d      	ldr	r1, [pc, #180]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	610b      	str	r3, [r1, #16]
 800252a:	e02d      	b.n	8002588 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d115      	bne.n	800255e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002532:	4b2a      	ldr	r3, [pc, #168]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	4013      	ands	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6892      	ldr	r2, [r2, #8]
 800253e:	0211      	lsls	r1, r2, #8
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6912      	ldr	r2, [r2, #16]
 8002544:	0852      	lsrs	r2, r2, #1
 8002546:	3a01      	subs	r2, #1
 8002548:	0552      	lsls	r2, r2, #21
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6852      	ldr	r2, [r2, #4]
 8002550:	3a01      	subs	r2, #1
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	430a      	orrs	r2, r1
 8002556:	4921      	ldr	r1, [pc, #132]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	610b      	str	r3, [r1, #16]
 800255c:	e014      	b.n	8002588 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800255e:	4b1f      	ldr	r3, [pc, #124]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	0211      	lsls	r1, r2, #8
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6952      	ldr	r2, [r2, #20]
 8002570:	0852      	lsrs	r2, r2, #1
 8002572:	3a01      	subs	r2, #1
 8002574:	0652      	lsls	r2, r2, #25
 8002576:	4311      	orrs	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6852      	ldr	r2, [r2, #4]
 800257c:	3a01      	subs	r2, #1
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	430a      	orrs	r2, r1
 8002582:	4916      	ldr	r1, [pc, #88]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002584:	4313      	orrs	r3, r2
 8002586:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800258e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe f9e6 	bl	8000964 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259a:	e009      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259c:	f7fe f9e2 	bl	8000964 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d902      	bls.n	80025b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	73fb      	strb	r3, [r7, #15]
          break;
 80025ae:	e005      	b.n	80025bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ef      	beq.n	800259c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	4904      	ldr	r1, [pc, #16]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	07ff800f 	.word	0x07ff800f
 80025e4:	ff9f800f 	.word	0xff9f800f
 80025e8:	f9ff800f 	.word	0xf9ff800f

080025ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025fa:	4b72      	ldr	r3, [pc, #456]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002606:	4b6f      	ldr	r3, [pc, #444]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0203 	and.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d103      	bne.n	800261e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
       ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	d142      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e03f      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d018      	beq.n	800265e <RCCEx_PLLSAI2_Config+0x72>
 800262c:	2b03      	cmp	r3, #3
 800262e:	d825      	bhi.n	800267c <RCCEx_PLLSAI2_Config+0x90>
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <RCCEx_PLLSAI2_Config+0x4e>
 8002634:	2b02      	cmp	r3, #2
 8002636:	d009      	beq.n	800264c <RCCEx_PLLSAI2_Config+0x60>
 8002638:	e020      	b.n	800267c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800263a:	4b62      	ldr	r3, [pc, #392]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11d      	bne.n	8002682 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264a:	e01a      	b.n	8002682 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800264c:	4b5d      	ldr	r3, [pc, #372]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d116      	bne.n	8002686 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e013      	b.n	8002686 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800265e:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800266a:	4b56      	ldr	r3, [pc, #344]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800267a:	e006      	b.n	800268a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e004      	b.n	800268c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002682:	bf00      	nop
 8002684:	e002      	b.n	800268c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002686:	bf00      	nop
 8002688:	e000      	b.n	800268c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800268a:	bf00      	nop
    }

    if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d108      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002692:	4b4c      	ldr	r3, [pc, #304]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4949      	ldr	r1, [pc, #292]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 8086 	bne.w	80027b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026ac:	4b45      	ldr	r3, [pc, #276]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a44      	ldr	r2, [pc, #272]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b8:	f7fe f954 	bl	8000964 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026be:	e009      	b.n	80026d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026c0:	f7fe f950 	bl	8000964 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d902      	bls.n	80026d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	73fb      	strb	r3, [r7, #15]
        break;
 80026d2:	e005      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026d4:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ef      	bne.n	80026c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d168      	bne.n	80027b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d113      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026ec:	4b35      	ldr	r3, [pc, #212]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	0211      	lsls	r1, r2, #8
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	06d2      	lsls	r2, r2, #27
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6852      	ldr	r2, [r2, #4]
 8002706:	3a01      	subs	r2, #1
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	430a      	orrs	r2, r1
 800270c:	492d      	ldr	r1, [pc, #180]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	614b      	str	r3, [r1, #20]
 8002712:	e02d      	b.n	8002770 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d115      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800271a:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	4b2b      	ldr	r3, [pc, #172]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6892      	ldr	r2, [r2, #8]
 8002726:	0211      	lsls	r1, r2, #8
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6912      	ldr	r2, [r2, #16]
 800272c:	0852      	lsrs	r2, r2, #1
 800272e:	3a01      	subs	r2, #1
 8002730:	0552      	lsls	r2, r2, #21
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6852      	ldr	r2, [r2, #4]
 8002738:	3a01      	subs	r2, #1
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	430a      	orrs	r2, r1
 800273e:	4921      	ldr	r1, [pc, #132]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	614b      	str	r3, [r1, #20]
 8002744:	e014      	b.n	8002770 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002746:	4b1f      	ldr	r3, [pc, #124]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	0211      	lsls	r1, r2, #8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6952      	ldr	r2, [r2, #20]
 8002758:	0852      	lsrs	r2, r2, #1
 800275a:	3a01      	subs	r2, #1
 800275c:	0652      	lsls	r2, r2, #25
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6852      	ldr	r2, [r2, #4]
 8002764:	3a01      	subs	r2, #1
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	430a      	orrs	r2, r1
 800276a:	4916      	ldr	r1, [pc, #88]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800276c:	4313      	orrs	r3, r2
 800276e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002770:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe f8f2 	bl	8000964 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002782:	e009      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002784:	f7fe f8ee 	bl	8000964 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	73fb      	strb	r3, [r7, #15]
          break;
 8002796:	e005      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ef      	beq.n	8002784 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	4904      	ldr	r1, [pc, #16]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	07ff800f 	.word	0x07ff800f
 80027cc:	ff9f800f 	.word	0xff9f800f
 80027d0:	f9ff800f 	.word	0xf9ff800f

080027d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e042      	b.n	800286c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fd ff81 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2224      	movs	r2, #36	@ 0x24
 8002802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb24 	bl	8002e6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f825 	bl	8002874 <UART_SetConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e01b      	b.n	800286c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fba3 	bl	8002fb0 <UART_CheckIdleState>
 800286a:	4603      	mov	r3, r0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002878:	b08c      	sub	sp, #48	@ 0x30
 800287a:	af00      	add	r7, sp, #0
 800287c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	431a      	orrs	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4313      	orrs	r3, r2
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4baa      	ldr	r3, [pc, #680]	@ (8002b4c <UART_SetConfig+0x2d8>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002b50 <UART_SetConfig+0x2dc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028dc:	4313      	orrs	r3, r2
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80028ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	f023 010f 	bic.w	r1, r3, #15
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a90      	ldr	r2, [pc, #576]	@ (8002b54 <UART_SetConfig+0x2e0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d125      	bne.n	8002964 <UART_SetConfig+0xf0>
 8002918:	4b8f      	ldr	r3, [pc, #572]	@ (8002b58 <UART_SetConfig+0x2e4>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b03      	cmp	r3, #3
 8002924:	d81a      	bhi.n	800295c <UART_SetConfig+0xe8>
 8002926:	a201      	add	r2, pc, #4	@ (adr r2, 800292c <UART_SetConfig+0xb8>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	0800294d 	.word	0x0800294d
 8002934:	08002945 	.word	0x08002945
 8002938:	08002955 	.word	0x08002955
 800293c:	2301      	movs	r3, #1
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002942:	e116      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002944:	2302      	movs	r3, #2
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800294a:	e112      	b.n	8002b72 <UART_SetConfig+0x2fe>
 800294c:	2304      	movs	r3, #4
 800294e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002952:	e10e      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002954:	2308      	movs	r3, #8
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800295a:	e10a      	b.n	8002b72 <UART_SetConfig+0x2fe>
 800295c:	2310      	movs	r3, #16
 800295e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002962:	e106      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a7c      	ldr	r2, [pc, #496]	@ (8002b5c <UART_SetConfig+0x2e8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d138      	bne.n	80029e0 <UART_SetConfig+0x16c>
 800296e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b58 <UART_SetConfig+0x2e4>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d82d      	bhi.n	80029d8 <UART_SetConfig+0x164>
 800297c:	a201      	add	r2, pc, #4	@ (adr r2, 8002984 <UART_SetConfig+0x110>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029b9 	.word	0x080029b9
 8002988:	080029d9 	.word	0x080029d9
 800298c:	080029d9 	.word	0x080029d9
 8002990:	080029d9 	.word	0x080029d9
 8002994:	080029c9 	.word	0x080029c9
 8002998:	080029d9 	.word	0x080029d9
 800299c:	080029d9 	.word	0x080029d9
 80029a0:	080029d9 	.word	0x080029d9
 80029a4:	080029c1 	.word	0x080029c1
 80029a8:	080029d9 	.word	0x080029d9
 80029ac:	080029d9 	.word	0x080029d9
 80029b0:	080029d9 	.word	0x080029d9
 80029b4:	080029d1 	.word	0x080029d1
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029be:	e0d8      	b.n	8002b72 <UART_SetConfig+0x2fe>
 80029c0:	2302      	movs	r3, #2
 80029c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029c6:	e0d4      	b.n	8002b72 <UART_SetConfig+0x2fe>
 80029c8:	2304      	movs	r3, #4
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029ce:	e0d0      	b.n	8002b72 <UART_SetConfig+0x2fe>
 80029d0:	2308      	movs	r3, #8
 80029d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029d6:	e0cc      	b.n	8002b72 <UART_SetConfig+0x2fe>
 80029d8:	2310      	movs	r3, #16
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029de:	e0c8      	b.n	8002b72 <UART_SetConfig+0x2fe>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002b60 <UART_SetConfig+0x2ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d125      	bne.n	8002a36 <UART_SetConfig+0x1c2>
 80029ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002b58 <UART_SetConfig+0x2e4>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029f4:	2b30      	cmp	r3, #48	@ 0x30
 80029f6:	d016      	beq.n	8002a26 <UART_SetConfig+0x1b2>
 80029f8:	2b30      	cmp	r3, #48	@ 0x30
 80029fa:	d818      	bhi.n	8002a2e <UART_SetConfig+0x1ba>
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d00a      	beq.n	8002a16 <UART_SetConfig+0x1a2>
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d814      	bhi.n	8002a2e <UART_SetConfig+0x1ba>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <UART_SetConfig+0x19a>
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d008      	beq.n	8002a1e <UART_SetConfig+0x1aa>
 8002a0c:	e00f      	b.n	8002a2e <UART_SetConfig+0x1ba>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a14:	e0ad      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a16:	2302      	movs	r3, #2
 8002a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a1c:	e0a9      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a24:	e0a5      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a26:	2308      	movs	r3, #8
 8002a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a2c:	e0a1      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a2e:	2310      	movs	r3, #16
 8002a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a34:	e09d      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b64 <UART_SetConfig+0x2f0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d125      	bne.n	8002a8c <UART_SetConfig+0x218>
 8002a40:	4b45      	ldr	r3, [pc, #276]	@ (8002b58 <UART_SetConfig+0x2e4>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a4c:	d016      	beq.n	8002a7c <UART_SetConfig+0x208>
 8002a4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a50:	d818      	bhi.n	8002a84 <UART_SetConfig+0x210>
 8002a52:	2b80      	cmp	r3, #128	@ 0x80
 8002a54:	d00a      	beq.n	8002a6c <UART_SetConfig+0x1f8>
 8002a56:	2b80      	cmp	r3, #128	@ 0x80
 8002a58:	d814      	bhi.n	8002a84 <UART_SetConfig+0x210>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <UART_SetConfig+0x1f0>
 8002a5e:	2b40      	cmp	r3, #64	@ 0x40
 8002a60:	d008      	beq.n	8002a74 <UART_SetConfig+0x200>
 8002a62:	e00f      	b.n	8002a84 <UART_SetConfig+0x210>
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a6a:	e082      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a72:	e07e      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a74:	2304      	movs	r3, #4
 8002a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a7a:	e07a      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a82:	e076      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a84:	2310      	movs	r3, #16
 8002a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a8a:	e072      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	@ (8002b68 <UART_SetConfig+0x2f4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d12a      	bne.n	8002aec <UART_SetConfig+0x278>
 8002a96:	4b30      	ldr	r3, [pc, #192]	@ (8002b58 <UART_SetConfig+0x2e4>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aa4:	d01a      	beq.n	8002adc <UART_SetConfig+0x268>
 8002aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aaa:	d81b      	bhi.n	8002ae4 <UART_SetConfig+0x270>
 8002aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab0:	d00c      	beq.n	8002acc <UART_SetConfig+0x258>
 8002ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab6:	d815      	bhi.n	8002ae4 <UART_SetConfig+0x270>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <UART_SetConfig+0x250>
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac0:	d008      	beq.n	8002ad4 <UART_SetConfig+0x260>
 8002ac2:	e00f      	b.n	8002ae4 <UART_SetConfig+0x270>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aca:	e052      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ad2:	e04e      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ada:	e04a      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002adc:	2308      	movs	r3, #8
 8002ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae2:	e046      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aea:	e042      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <UART_SetConfig+0x2dc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d13a      	bne.n	8002b6c <UART_SetConfig+0x2f8>
 8002af6:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <UART_SetConfig+0x2e4>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b04:	d01a      	beq.n	8002b3c <UART_SetConfig+0x2c8>
 8002b06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b0a:	d81b      	bhi.n	8002b44 <UART_SetConfig+0x2d0>
 8002b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b10:	d00c      	beq.n	8002b2c <UART_SetConfig+0x2b8>
 8002b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b16:	d815      	bhi.n	8002b44 <UART_SetConfig+0x2d0>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <UART_SetConfig+0x2b0>
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b20:	d008      	beq.n	8002b34 <UART_SetConfig+0x2c0>
 8002b22:	e00f      	b.n	8002b44 <UART_SetConfig+0x2d0>
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b2a:	e022      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b32:	e01e      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002b34:	2304      	movs	r3, #4
 8002b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3a:	e01a      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b42:	e016      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002b44:	2310      	movs	r3, #16
 8002b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b4a:	e012      	b.n	8002b72 <UART_SetConfig+0x2fe>
 8002b4c:	cfff69f3 	.word	0xcfff69f3
 8002b50:	40008000 	.word	0x40008000
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40004400 	.word	0x40004400
 8002b60:	40004800 	.word	0x40004800
 8002b64:	40004c00 	.word	0x40004c00
 8002b68:	40005000 	.word	0x40005000
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4aae      	ldr	r2, [pc, #696]	@ (8002e30 <UART_SetConfig+0x5bc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f040 8097 	bne.w	8002cac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d823      	bhi.n	8002bce <UART_SetConfig+0x35a>
 8002b86:	a201      	add	r2, pc, #4	@ (adr r2, 8002b8c <UART_SetConfig+0x318>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002bb1 	.word	0x08002bb1
 8002b90:	08002bcf 	.word	0x08002bcf
 8002b94:	08002bb9 	.word	0x08002bb9
 8002b98:	08002bcf 	.word	0x08002bcf
 8002b9c:	08002bbf 	.word	0x08002bbf
 8002ba0:	08002bcf 	.word	0x08002bcf
 8002ba4:	08002bcf 	.word	0x08002bcf
 8002ba8:	08002bcf 	.word	0x08002bcf
 8002bac:	08002bc7 	.word	0x08002bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb0:	f7ff f80c 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bb6:	e010      	b.n	8002bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8002e34 <UART_SetConfig+0x5c0>)
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bbc:	e00d      	b.n	8002bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bbe:	f7fe ff6d 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8002bc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bc4:	e009      	b.n	8002bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bcc:	e005      	b.n	8002bda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002bd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8130 	beq.w	8002e42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	4a94      	ldr	r2, [pc, #592]	@ (8002e38 <UART_SetConfig+0x5c4>)
 8002be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bec:	461a      	mov	r2, r3
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d305      	bcc.n	8002c12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d903      	bls.n	8002c1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c18:	e113      	b.n	8002e42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	60fa      	str	r2, [r7, #12]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	4a84      	ldr	r2, [pc, #528]	@ (8002e38 <UART_SetConfig+0x5c4>)
 8002c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2200      	movs	r2, #0
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c3c:	f7fd fade 	bl	80001fc <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	020b      	lsls	r3, r1, #8
 8002c52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c56:	0202      	lsls	r2, r0, #8
 8002c58:	6979      	ldr	r1, [r7, #20]
 8002c5a:	6849      	ldr	r1, [r1, #4]
 8002c5c:	0849      	lsrs	r1, r1, #1
 8002c5e:	2000      	movs	r0, #0
 8002c60:	460c      	mov	r4, r1
 8002c62:	4605      	mov	r5, r0
 8002c64:	eb12 0804 	adds.w	r8, r2, r4
 8002c68:	eb43 0905 	adc.w	r9, r3, r5
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	469a      	mov	sl, r3
 8002c74:	4693      	mov	fp, r2
 8002c76:	4652      	mov	r2, sl
 8002c78:	465b      	mov	r3, fp
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	f7fd fabd 	bl	80001fc <__aeabi_uldivmod>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4613      	mov	r3, r2
 8002c88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c90:	d308      	bcc.n	8002ca4 <UART_SetConfig+0x430>
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c98:	d204      	bcs.n	8002ca4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a3a      	ldr	r2, [r7, #32]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e0ce      	b.n	8002e42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002caa:	e0ca      	b.n	8002e42 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb4:	d166      	bne.n	8002d84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d827      	bhi.n	8002d0e <UART_SetConfig+0x49a>
 8002cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <UART_SetConfig+0x450>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002ce9 	.word	0x08002ce9
 8002cc8:	08002cf1 	.word	0x08002cf1
 8002ccc:	08002cf9 	.word	0x08002cf9
 8002cd0:	08002d0f 	.word	0x08002d0f
 8002cd4:	08002cff 	.word	0x08002cff
 8002cd8:	08002d0f 	.word	0x08002d0f
 8002cdc:	08002d0f 	.word	0x08002d0f
 8002ce0:	08002d0f 	.word	0x08002d0f
 8002ce4:	08002d07 	.word	0x08002d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce8:	f7fe ff70 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cee:	e014      	b.n	8002d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf0:	f7fe ff82 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cf6:	e010      	b.n	8002d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8002e34 <UART_SetConfig+0x5c0>)
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002cfc:	e00d      	b.n	8002d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfe:	f7fe fecd 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8002d02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d04:	e009      	b.n	8002d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d0c:	e005      	b.n	8002d1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8090 	beq.w	8002e42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	4a44      	ldr	r2, [pc, #272]	@ (8002e38 <UART_SetConfig+0x5c4>)
 8002d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d34:	005a      	lsls	r2, r3, #1
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	441a      	add	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	d916      	bls.n	8002d7c <UART_SetConfig+0x508>
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d54:	d212      	bcs.n	8002d7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f023 030f 	bic.w	r3, r3, #15
 8002d5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	8bfb      	ldrh	r3, [r7, #30]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	8bfa      	ldrh	r2, [r7, #30]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	e062      	b.n	8002e42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d82:	e05e      	b.n	8002e42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d828      	bhi.n	8002dde <UART_SetConfig+0x56a>
 8002d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d94 <UART_SetConfig+0x520>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	08002dc1 	.word	0x08002dc1
 8002d9c:	08002dc9 	.word	0x08002dc9
 8002da0:	08002ddf 	.word	0x08002ddf
 8002da4:	08002dcf 	.word	0x08002dcf
 8002da8:	08002ddf 	.word	0x08002ddf
 8002dac:	08002ddf 	.word	0x08002ddf
 8002db0:	08002ddf 	.word	0x08002ddf
 8002db4:	08002dd7 	.word	0x08002dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db8:	f7fe ff08 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dbe:	e014      	b.n	8002dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7fe ff1a 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dc6:	e010      	b.n	8002dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <UART_SetConfig+0x5c0>)
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dcc:	e00d      	b.n	8002dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dce:	f7fe fe65 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8002dd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dd4:	e009      	b.n	8002dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ddc:	e005      	b.n	8002dea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002de8:	bf00      	nop
    }

    if (pclk != 0U)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d028      	beq.n	8002e42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <UART_SetConfig+0x5c4>)
 8002df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	441a      	add	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	d910      	bls.n	8002e3c <UART_SetConfig+0x5c8>
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e20:	d20c      	bcs.n	8002e3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	e009      	b.n	8002e42 <UART_SetConfig+0x5ce>
 8002e2e:	bf00      	nop
 8002e30:	40008000 	.word	0x40008000
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	08003568 	.word	0x08003568
      }
      else
      {
        ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3730      	adds	r7, #48	@ 0x30
 8002e66:	46bd      	mov	sp, r7
 8002e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01a      	beq.n	8002f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f6a:	d10a      	bne.n	8002f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b098      	sub	sp, #96	@ 0x60
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fc0:	f7fd fcd0 	bl	8000964 <HAL_GetTick>
 8002fc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d12f      	bne.n	8003034 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f88e 	bl	8003104 <UART_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d022      	beq.n	8003034 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003002:	653b      	str	r3, [r7, #80]	@ 0x50
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800300c:	647b      	str	r3, [r7, #68]	@ 0x44
 800300e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800301a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e6      	bne.n	8002fee <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e063      	b.n	80030fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d149      	bne.n	80030d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003042:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304a:	2200      	movs	r2, #0
 800304c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f857 	bl	8003104 <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d03c      	beq.n	80030d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	623b      	str	r3, [r7, #32]
   return(result);
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307a:	633b      	str	r3, [r7, #48]	@ 0x30
 800307c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e6      	bne.n	800305c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3308      	adds	r3, #8
 8003094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	60fb      	str	r3, [r7, #12]
   return(result);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3308      	adds	r3, #8
 80030ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ae:	61fa      	str	r2, [r7, #28]
 80030b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	617b      	str	r3, [r7, #20]
   return(result);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e5      	bne.n	800308e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e012      	b.n	80030fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3758      	adds	r7, #88	@ 0x58
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003114:	e04f      	b.n	80031b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800311c:	d04b      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fd fc21 	bl	8000964 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <UART_WaitOnFlagUntilTimeout+0x30>
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e04e      	b.n	80031d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d037      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b80      	cmp	r3, #128	@ 0x80
 800314a:	d034      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b40      	cmp	r3, #64	@ 0x40
 8003150:	d031      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d110      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2208      	movs	r2, #8
 8003166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f838 	bl	80031de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2208      	movs	r2, #8
 8003172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e029      	b.n	80031d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800318c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003190:	d111      	bne.n	80031b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800319a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f81e 	bl	80031de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e00f      	b.n	80031d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4013      	ands	r3, r2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d0a0      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031de:	b480      	push	{r7}
 80031e0:	b095      	sub	sp, #84	@ 0x54
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
 8003206:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800320a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e6      	bne.n	80031e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	61fb      	str	r3, [r7, #28]
   return(result);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800323c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e3      	bne.n	8003218 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d118      	bne.n	800328a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	60bb      	str	r3, [r7, #8]
   return(result);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f023 0310 	bic.w	r3, r3, #16
 800326c:	647b      	str	r3, [r7, #68]	@ 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6979      	ldr	r1, [r7, #20]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	613b      	str	r3, [r7, #16]
   return(result);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e6      	bne.n	8003258 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800329e:	bf00      	nop
 80032a0:	3754      	adds	r7, #84	@ 0x54
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80032bc:	2302      	movs	r3, #2
 80032be:	e027      	b.n	8003310 <HAL_UARTEx_DisableFifoMode+0x66>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	@ 0x24
 80032cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80032ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003330:	2302      	movs	r3, #2
 8003332:	e02d      	b.n	8003390 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	@ 0x24
 8003340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f84f 	bl	8003414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e02d      	b.n	800340c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f811 	bl	8003414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003420:	2b00      	cmp	r3, #0
 8003422:	d108      	bne.n	8003436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003434:	e031      	b.n	800349a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003436:	2308      	movs	r3, #8
 8003438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800343a:	2308      	movs	r3, #8
 800343c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	0e5b      	lsrs	r3, r3, #25
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	0f5b      	lsrs	r3, r3, #29
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	7b3a      	ldrb	r2, [r7, #12]
 8003462:	4911      	ldr	r1, [pc, #68]	@ (80034a8 <UARTEx_SetNbDataToProcess+0x94>)
 8003464:	5c8a      	ldrb	r2, [r1, r2]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800346a:	7b3a      	ldrb	r2, [r7, #12]
 800346c:	490f      	ldr	r1, [pc, #60]	@ (80034ac <UARTEx_SetNbDataToProcess+0x98>)
 800346e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003470:	fb93 f3f2 	sdiv	r3, r3, r2
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	7b7a      	ldrb	r2, [r7, #13]
 8003480:	4909      	ldr	r1, [pc, #36]	@ (80034a8 <UARTEx_SetNbDataToProcess+0x94>)
 8003482:	5c8a      	ldrb	r2, [r1, r2]
 8003484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003488:	7b7a      	ldrb	r2, [r7, #13]
 800348a:	4908      	ldr	r1, [pc, #32]	@ (80034ac <UARTEx_SetNbDataToProcess+0x98>)
 800348c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800348e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003492:	b29a      	uxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	08003580 	.word	0x08003580
 80034ac:	08003588 	.word	0x08003588

080034b0 <memset>:
 80034b0:	4402      	add	r2, r0
 80034b2:	4603      	mov	r3, r0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d100      	bne.n	80034ba <memset+0xa>
 80034b8:	4770      	bx	lr
 80034ba:	f803 1b01 	strb.w	r1, [r3], #1
 80034be:	e7f9      	b.n	80034b4 <memset+0x4>

080034c0 <__libc_init_array>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4d0d      	ldr	r5, [pc, #52]	@ (80034f8 <__libc_init_array+0x38>)
 80034c4:	4c0d      	ldr	r4, [pc, #52]	@ (80034fc <__libc_init_array+0x3c>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	2600      	movs	r6, #0
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	d109      	bne.n	80034e4 <__libc_init_array+0x24>
 80034d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003500 <__libc_init_array+0x40>)
 80034d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003504 <__libc_init_array+0x44>)
 80034d4:	f000 f818 	bl	8003508 <_init>
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	2600      	movs	r6, #0
 80034de:	42a6      	cmp	r6, r4
 80034e0:	d105      	bne.n	80034ee <__libc_init_array+0x2e>
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e8:	4798      	blx	r3
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7ee      	b.n	80034cc <__libc_init_array+0xc>
 80034ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f2:	4798      	blx	r3
 80034f4:	3601      	adds	r6, #1
 80034f6:	e7f2      	b.n	80034de <__libc_init_array+0x1e>
 80034f8:	08003598 	.word	0x08003598
 80034fc:	08003598 	.word	0x08003598
 8003500:	08003598 	.word	0x08003598
 8003504:	0800359c 	.word	0x0800359c

08003508 <_init>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr

08003514 <_fini>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr
