
Lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b274  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800b438  0800b438  0000c438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b920  0800b920  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b920  0800b920  0000c920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b928  0800b928  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b928  0800b928  0000c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b92c  0800b92c  0000c92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b930  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  0800bb04  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800bb04  0000d444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001218c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a7  00000000  00000000  0001f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00021938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1b  00000000  00000000  000227c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5df  00000000  00000000  000232db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010711  00000000  00000000  0004f8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112385  00000000  00000000  0005ffcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005190  00000000  00000000  00172394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00177524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b41c 	.word	0x0800b41c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800b41c 	.word	0x0800b41c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001058:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800105c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001068:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800106c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001070:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001078:	e000      	b.n	800107c <ITM_SendChar+0x2c>
    {
      __NOP();
 800107a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800107c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f9      	beq.n	800107a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001086:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0a2      	sub	sp, #136	@ 0x88
 80010a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 fd10 	bl	8001aca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f887 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 f9bb 	bl	8001428 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010b2:	f000 f8d5 	bl	8001260 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010b6:	f000 f96b 	bl	8001390 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  switch (state){
 80010ba:	4b3b      	ldr	r3, [pc, #236]	@ (80011a8 <main+0x108>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <main+0x2a>
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d025      	beq.n	8001114 <main+0x74>
 80010c8:	e04b      	b.n	8001162 <main+0xc2>
  		  case 0:
  			  voltage = getVoltage(&hadc1);
 80010ca:	4838      	ldr	r0, [pc, #224]	@ (80011ac <main+0x10c>)
 80010cc:	f000 fa36 	bl	800153c <getVoltage>
 80010d0:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
  			  uartLen = sprintf(data, "The voltage is: %.2fV\n", voltage);
 80010d4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80010d6:	f7ff fa4f 	bl	8000578 <__aeabi_f2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	1d38      	adds	r0, r7, #4
 80010e0:	4933      	ldr	r1, [pc, #204]	@ (80011b0 <main+0x110>)
 80010e2:	f006 fc99 	bl	8007a18 <siprintf>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  for (int i = 0; i < uartLen; i++){
 80010ec:	2300      	movs	r3, #0
 80010ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80010f0:	e00a      	b.n	8001108 <main+0x68>
  				ITM_SendChar(data[i]);
 80010f2:	1d3a      	adds	r2, r7, #4
 80010f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010f6:	4413      	add	r3, r2
 80010f8:	f993 3000 	ldrsb.w	r3, [r3]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffa7 	bl	8001050 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8001102:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001104:	3301      	adds	r3, #1
 8001106:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001108:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800110c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800110e:	429a      	cmp	r2, r3
 8001110:	dbef      	blt.n	80010f2 <main+0x52>
  			  }
  			  break;
 8001112:	e043      	b.n	800119c <main+0xfc>

  		  case 1:
  			  temperature = getTemperature(&hadc1);
 8001114:	4825      	ldr	r0, [pc, #148]	@ (80011ac <main+0x10c>)
 8001116:	f000 fa4f 	bl	80015b8 <getTemperature>
 800111a:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
  			  uartLen = sprintf(data, "The temperature is: %.2f%cC\n", temperature, 176);
 800111e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001120:	f7ff fa2a 	bl	8000578 <__aeabi_f2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	1d38      	adds	r0, r7, #4
 800112a:	21b0      	movs	r1, #176	@ 0xb0
 800112c:	9100      	str	r1, [sp, #0]
 800112e:	4921      	ldr	r1, [pc, #132]	@ (80011b4 <main+0x114>)
 8001130:	f006 fc72 	bl	8007a18 <siprintf>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  for (int i = 0; i < uartLen; i++){
 800113a:	2300      	movs	r3, #0
 800113c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800113e:	e00a      	b.n	8001156 <main+0xb6>
  				ITM_SendChar(data[i]);
 8001140:	1d3a      	adds	r2, r7, #4
 8001142:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001144:	4413      	add	r3, r2
 8001146:	f993 3000 	ldrsb.w	r3, [r3]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff80 	bl	8001050 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8001150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001152:	3301      	adds	r3, #1
 8001154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001156:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800115a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800115c:	429a      	cmp	r2, r3
 800115e:	dbef      	blt.n	8001140 <main+0xa0>
  			  }
  			  break;
 8001160:	e01c      	b.n	800119c <main+0xfc>

  		  default:
  			  uartLen = sprintf("The state is: %d\n", state);
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <main+0x108>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	4813      	ldr	r0, [pc, #76]	@ (80011b8 <main+0x118>)
 800116c:	f006 fc54 	bl	8007a18 <siprintf>
 8001170:	4603      	mov	r3, r0
 8001172:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  for (int i = 0; i < uartLen; i++){
 8001176:	2300      	movs	r3, #0
 8001178:	677b      	str	r3, [r7, #116]	@ 0x74
 800117a:	e00a      	b.n	8001192 <main+0xf2>
  				ITM_SendChar(data[i]);
 800117c:	1d3a      	adds	r2, r7, #4
 800117e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001180:	4413      	add	r3, r2
 8001182:	f993 3000 	ldrsb.w	r3, [r3]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff62 	bl	8001050 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 800118c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800118e:	3301      	adds	r3, #1
 8001190:	677b      	str	r3, [r7, #116]	@ 0x74
 8001192:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001196:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001198:	429a      	cmp	r2, r3
 800119a:	dbef      	blt.n	800117c <main+0xdc>
  			  }

  	  }
  	  HAL_Delay(1000);
 800119c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a0:	f000 fd08 	bl	8001bb4 <HAL_Delay>
  	  switch (state){
 80011a4:	e789      	b.n	80010ba <main+0x1a>
 80011a6:	bf00      	nop
 80011a8:	200002ec 	.word	0x200002ec
 80011ac:	200001f0 	.word	0x200001f0
 80011b0:	0800b438 	.word	0x0800b438
 80011b4:	0800b450 	.word	0x0800b450
 80011b8:	0800b470 	.word	0x0800b470

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	@ 0x58
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2244      	movs	r2, #68	@ 0x44
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 fb8c 	bl	80088e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80011de:	2000      	movs	r0, #0
 80011e0:	f003 fab4 	bl	800474c <HAL_PWREx_ControlVoltageScaling>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011ea:	f000 f9a1 	bl	8001530 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011ee:	2310      	movs	r3, #16
 80011f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011fa:	2360      	movs	r3, #96	@ 0x60
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001202:	2301      	movs	r3, #1
 8001204:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800120a:	233c      	movs	r3, #60	@ 0x3c
 800120c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fb38 	bl	8004894 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800122a:	f000 f981 	bl	8001530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2303      	movs	r3, #3
 8001234:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	2105      	movs	r1, #5
 8001246:	4618      	mov	r0, r3
 8001248:	f003 ff3e 	bl	80050c8 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001252:	f000 f96d 	bl	8001530 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3758      	adds	r7, #88	@ 0x58
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2234      	movs	r2, #52	@ 0x34
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fb32 	bl	80088e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001284:	4b3e      	ldr	r3, [pc, #248]	@ (8001380 <MX_ADC1_Init+0x120>)
 8001286:	4a3f      	ldr	r2, [pc, #252]	@ (8001384 <MX_ADC1_Init+0x124>)
 8001288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <MX_ADC1_Init+0x120>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001290:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <MX_ADC1_Init+0x120>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b3a      	ldr	r3, [pc, #232]	@ (8001380 <MX_ADC1_Init+0x120>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800129c:	4b38      	ldr	r3, [pc, #224]	@ (8001380 <MX_ADC1_Init+0x120>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	4b37      	ldr	r3, [pc, #220]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012a4:	2204      	movs	r2, #4
 80012a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012a8:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ae:	4b34      	ldr	r3, [pc, #208]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012b4:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012d8:	2200      	movs	r2, #0
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012dc:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e4:	4826      	ldr	r0, [pc, #152]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012e6:	f000 feb1 	bl	800204c <HAL_ADC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012f0:	f000 f91e 	bl	8001530 <Error_Handler>
  }

  /** Disable Injected Queue
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc1);
 80012f4:	4822      	ldr	r0, [pc, #136]	@ (8001380 <MX_ADC1_Init+0x120>)
 80012f6:	f002 fef3 	bl	80040e0 <HAL_ADCEx_DisableInjectedQueue>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80012fa:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <MX_ADC1_Init+0x128>)
 80012fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001302:	2306      	movs	r3, #6
 8001304:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001306:	237f      	movs	r3, #127	@ 0x7f
 8001308:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130a:	2304      	movs	r3, #4
 800130c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.Offset = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001316:	4619      	mov	r1, r3
 8001318:	4819      	ldr	r0, [pc, #100]	@ (8001380 <MX_ADC1_Init+0x120>)
 800131a:	f001 f90f 	bl	800253c <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001324:	f000 f904 	bl	8001530 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_ADC1_Init+0x12c>)
 800132a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800132c:	2308      	movs	r3, #8
 800132e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001330:	2306      	movs	r3, #6
 8001332:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001334:	237f      	movs	r3, #127	@ 0x7f
 8001336:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001338:	2304      	movs	r3, #4
 800133a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_ADC1_Init+0x120>)
 800136a:	f002 f9ff 	bl	800376c <HAL_ADCEx_InjectedConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001374:	f000 f8dc 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3750      	adds	r7, #80	@ 0x50
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200001f0 	.word	0x200001f0
 8001384:	50040000 	.word	0x50040000
 8001388:	80000001 	.word	0x80000001
 800138c:	c7520000 	.word	0xc7520000

08001390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 8001396:	4a23      	ldr	r2, [pc, #140]	@ (8001424 <MX_USART1_UART_Init+0x94>)
 8001398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d8:	4811      	ldr	r0, [pc, #68]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013da:	f004 fe4b 	bl	8006074 <HAL_UART_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013e4:	f000 f8a4 	bl	8001530 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	480d      	ldr	r0, [pc, #52]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013ec:	f005 fbe6 	bl	8006bbc <HAL_UARTEx_SetTxFifoThreshold>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013f6:	f000 f89b 	bl	8001530 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4808      	ldr	r0, [pc, #32]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 80013fe:	f005 fc1b 	bl	8006c38 <HAL_UARTEx_SetRxFifoThreshold>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001408:	f000 f892 	bl	8001530 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_USART1_UART_Init+0x90>)
 800140e:	f005 fb9c 	bl	8006b4a <HAL_UARTEx_DisableFifoMode>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 f88a 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000258 	.word	0x20000258
 8001424:	40013800 	.word	0x40013800

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b29      	ldr	r3, [pc, #164]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4a28      	ldr	r2, [pc, #160]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144a:	4b26      	ldr	r3, [pc, #152]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a22      	ldr	r2, [pc, #136]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_GPIO_Init+0xbc>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800148c:	4816      	ldr	r0, [pc, #88]	@ (80014e8 <MX_GPIO_Init+0xc0>)
 800148e:	f003 f8f3 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_PB_Pin */
  GPIO_InitStruct.Pin = User_PB_Pin;
 8001492:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001498:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800149c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_PB_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	4810      	ldr	r0, [pc, #64]	@ (80014ec <MX_GPIO_Init+0xc4>)
 80014aa:	f002 ff53 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	4808      	ldr	r0, [pc, #32]	@ (80014e8 <MX_GPIO_Init+0xc0>)
 80014c8:	f002 ff44 	bl	8004354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	2028      	movs	r0, #40	@ 0x28
 80014d2:	f002 ff08 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d6:	2028      	movs	r0, #40	@ 0x28
 80014d8:	f002 ff21 	bl	800431e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800

080014f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == User_PB_Pin) {
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001500:	d10d      	bne.n	800151e <HAL_GPIO_EXTI_Callback+0x2e>
	// INTERRUPT: When User_PB pressed, XOR changes the state
	// from voltage <-> temperature.
	state ^= 1;
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_GPIO_EXTI_Callback+0x38>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_GPIO_EXTI_Callback+0x38>)
 8001510:	701a      	strb	r2, [r3, #0]
	// GPIO_PIN_14 is the LED which changes based on whether the
	// temperature or the voltage is being measured.
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001512:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001518:	f003 f8c6 	bl	80046a8 <HAL_GPIO_TogglePin>
//    HAL_Delay(1000);
  } else {
      __NOP();
  }
}
 800151c:	e000      	b.n	8001520 <HAL_GPIO_EXTI_Callback+0x30>
      __NOP();
 800151e:	bf00      	nop
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200002ec 	.word	0x200002ec
 800152c:	48000400 	.word	0x48000400

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <Error_Handler+0x8>

0800153c <getVoltage>:

#include "measurement.h"
#include <stdint.h>


float getVoltage(ADC_HandleTypeDef *hadc) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    uint32_t adc_value;
    uint16_t vrefint_cal = *VREFINT_ADDR;
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <getVoltage+0x78>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	82fb      	strh	r3, [r7, #22]

    if (HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED) != HAL_OK) {
 800154a:	217f      	movs	r1, #127	@ 0x7f
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 ff2d 	bl	80033ac <HAL_ADCEx_Calibration_Start>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <getVoltage+0x20>
      Error_Handler();
 8001558:	f7ff ffea 	bl	8001530 <Error_Handler>
    }

    HAL_ADC_Start(hadc);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 febb 	bl	80022d8 <HAL_ADC_Start>
    HAL_Delay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 fb26 	bl	8001bb4 <HAL_Delay>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001568:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 ff49 	bl	8002404 <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 ffd5 	bl	8002522 <HAL_ADC_GetValue>
 8001578:	6138      	str	r0, [r7, #16]
    HAL_ADC_Stop(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 ff0f 	bl	800239e <HAL_ADC_Stop>

    float vRefPlus = (3.0f * vrefint_cal) / adc_value;
 8001580:	8afb      	ldrh	r3, [r7, #22]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800158e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800159c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a0:	edc7 7a03 	vstr	s15, [r7, #12]

    return vRefPlus;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	ee07 3a90 	vmov	s15, r3
}
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	1fff75aa 	.word	0x1fff75aa

080015b8 <getTemperature>:


float getTemperature(ADC_HandleTypeDef *hadc) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    uint32_t adc_value;
    uint16_t ts_cal1 = *TS_CAL1_ADDR;  // 30°C
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <getTemperature+0xbc>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	83fb      	strh	r3, [r7, #30]
    uint16_t ts_cal2 = *TS_CAL2_ADDR;  // 130°C
 80015c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <getTemperature+0xc0>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	83bb      	strh	r3, [r7, #28]

    if (HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED) != HAL_OK) {
 80015cc:	217f      	movs	r1, #127	@ 0x7f
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f001 feec 	bl	80033ac <HAL_ADCEx_Calibration_Start>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <getTemperature+0x26>
      Error_Handler();
 80015da:	f7ff ffa9 	bl	8001530 <Error_Handler>
    }

    // Read value from injected channel (which is responsible for TEMP)
    HAL_ADCEx_InjectedStart(hadc);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f001 ff44 	bl	800346c <HAL_ADCEx_InjectedStart>
    HAL_Delay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 fae5 	bl	8001bb4 <HAL_Delay>
    HAL_ADCEx_InjectedPollForConversion(hadc, HAL_MAX_DELAY);
 80015ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f001 fff0 	bl	80035d4 <HAL_ADCEx_InjectedPollForConversion>
    adc_value = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 80015f4:	2108      	movs	r1, #8
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f002 f881 	bl	80036fe <HAL_ADCEx_InjectedGetValue>
 80015fc:	61b8      	str	r0, [r7, #24]
    HAL_ADCEx_InjectedStop(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f001 ffa6 	bl	8003550 <HAL_ADCEx_InjectedStop>

    float vRef = getVoltage(hadc);  // Read actual VREF+
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff99 	bl	800153c <getVoltage>
 800160a:	ed87 0a05 	vstr	s0, [r7, #20]
    float adj_adc_value = adc_value * (vRef / 3.0f);
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001618:	edd7 6a05 	vldr	s13, [r7, #20]
 800161c:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8001620:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	edc7 7a04 	vstr	s15, [r7, #16]
    float temperature = ((100.0f / (float)(ts_cal2 - ts_cal1)) *
 800162c:	8bba      	ldrh	r2, [r7, #28]
 800162e:	8bfb      	ldrh	r3, [r7, #30]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800167c <getTemperature+0xc4>
 800163e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                         (adj_adc_value - ts_cal1)) + 30.0f;
 8001642:	8bfb      	ldrh	r3, [r7, #30]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001650:	ee76 7ae7 	vsub.f32	s15, s13, s15
    float temperature = ((100.0f / (float)(ts_cal2 - ts_cal1)) *
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800165c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001660:	edc7 7a03 	vstr	s15, [r7, #12]
    return temperature;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	ee07 3a90 	vmov	s15, r3
}
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	1fff75a8 	.word	0x1fff75a8
 8001678:	1fff75ca 	.word	0x1fff75ca
 800167c:	42c80000 	.word	0x42c80000

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_MspInit+0x44>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <HAL_MspInit+0x44>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6613      	str	r3, [r2, #96]	@ 0x60
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_MspInit+0x44>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_MspInit+0x44>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_MspInit+0x44>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_MspInit+0x44>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ae      	sub	sp, #184	@ 0xb8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2294      	movs	r2, #148	@ 0x94
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 f8fd 	bl	80088e8 <memset>
  if(hadc->Instance==ADC1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <HAL_ADC_MspInit+0xc8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d146      	bne.n	8001786 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800170e:	2318      	movs	r3, #24
 8001710:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800171e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4618      	mov	r0, r3
 800172a:	f003 ff8b 	bl	8005644 <HAL_RCCEx_PeriphCLKConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001734:	f7ff fefc 	bl	8001530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_ADC_MspInit+0xcc>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <HAL_ADC_MspInit+0xcc>)
 800173e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_ADC_MspInit+0xcc>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_ADC_MspInit+0xcc>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001754:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <HAL_ADC_MspInit+0xcc>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_ADC_MspInit+0xcc>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001768:	2301      	movs	r3, #1
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800176e:	230b      	movs	r3, #11
 8001770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <HAL_ADC_MspInit+0xd0>)
 8001782:	f002 fde7 	bl	8004354 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001786:	bf00      	nop
 8001788:	37b8      	adds	r7, #184	@ 0xb8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	50040000 	.word	0x50040000
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0ae      	sub	sp, #184	@ 0xb8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2294      	movs	r2, #148	@ 0x94
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f007 f893 	bl	80088e8 <memset>
  if(huart->Instance==USART1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <HAL_UART_MspInit+0xb4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d13c      	bne.n	8001846 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017d0:	2300      	movs	r3, #0
 80017d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 ff33 	bl	8005644 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e4:	f7ff fea4 	bl	8001530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_UART_MspInit+0xb8>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_UART_MspInit+0xb8>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f4:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_UART_MspInit+0xb8>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_UART_MspInit+0xb8>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	4a13      	ldr	r2, [pc, #76]	@ (8001854 <HAL_UART_MspInit+0xb8>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_UART_MspInit+0xb8>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001818:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800181c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001832:	2307      	movs	r3, #7
 8001834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001842:	f002 fd87 	bl	8004354 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001846:	bf00      	nop
 8001848:	37b8      	adds	r7, #184	@ 0xb8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40013800 	.word	0x40013800
 8001854:	40021000 	.word	0x40021000

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <NMI_Handler+0x4>

08001860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <MemManage_Handler+0x4>

08001870 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <UsageFault_Handler+0x4>

08001880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ae:	f000 f961 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_PB_Pin);
 80018ba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018be:	f002 ff0d 	bl	80046dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  return 1;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_kill>:

int _kill(int pid, int sig)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e0:	f007 f81c 	bl	800891c <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2216      	movs	r2, #22
 80018e8:	601a      	str	r2, [r3, #0]
  return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_exit>:

void _exit (int status)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffe7 	bl	80018d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
  }

  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
  }
  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f006 ff80 	bl	800891c <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200a0000 	.word	0x200a0000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200002f0 	.word	0x200002f0
 8001a50:	20000448 	.word	0x20000448

08001a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ab0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a7c:	f7ff ffea 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a80:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a82:	490d      	ldr	r1, [pc, #52]	@ (8001ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a84:	4a0d      	ldr	r2, [pc, #52]	@ (8001abc <LoopForever+0xe>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a98:	4c0a      	ldr	r4, [pc, #40]	@ (8001ac4 <LoopForever+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f006 ff3f 	bl	8008928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aaa:	f7ff faf9 	bl	80010a0 <main>

08001aae <LoopForever>:

LoopForever:
    b LoopForever
 8001aae:	e7fe      	b.n	8001aae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001abc:	0800b930 	.word	0x0800b930
  ldr r2, =_sbss
 8001ac0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ac4:	20000444 	.word	0x20000444

08001ac8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_IRQHandler>

08001aca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f002 fbfb 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f80e 	bl	8001afc <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e001      	b.n	8001af0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aec:	f7ff fdc8 	bl	8001680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_InitTick+0x6c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d023      	beq.n	8001b58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b10:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_InitTick+0x70>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_InitTick+0x6c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fc07 	bl	800433a <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d809      	bhi.n	8001b4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b40:	f002 fbd1 	bl	80042e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_InitTick+0x74>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e004      	b.n	8001b5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e001      	b.n	8001b5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008
 8001b98:	200002f4 	.word	0x200002f4

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	200002f4 	.word	0x200002f4

08001bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff ffee 	bl	8001b9c <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bcc:	d005      	beq.n	8001bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_Delay+0x44>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bda:	bf00      	nop
 8001bdc:	f7ff ffde 	bl	8001b9c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f7      	bhi.n	8001bdc <HAL_Delay+0x28>
  {
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008

08001bfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	609a      	str	r2, [r3, #8]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	3360      	adds	r3, #96	@ 0x60
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <LL_ADC_SetOffset+0x44>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	03fff000 	.word	0x03fff000

08001cac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3360      	adds	r3, #96	@ 0x60
 8001cba:	461a      	mov	r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3360      	adds	r3, #96	@ 0x60
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	615a      	str	r2, [r3, #20]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3330      	adds	r3, #48	@ 0x30
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	4413      	add	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	211f      	movs	r1, #31
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	f003 011f 	and.w	r1, r3, #31
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001da6:	bf00      	nop
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b087      	sub	sp, #28
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3314      	adds	r3, #20
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0e5b      	lsrs	r3, r3, #25
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0d1b      	lsrs	r3, r3, #20
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2107      	movs	r1, #7
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0d1b      	lsrs	r3, r3, #20
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	431a      	orrs	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0318 	and.w	r3, r3, #24
 8001e2a:	4908      	ldr	r1, [pc, #32]	@ (8001e4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	400b      	ands	r3, r1
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	431a      	orrs	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	0007ffff 	.word	0x0007ffff

08001e50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6093      	str	r3, [r2, #8]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e88:	d101      	bne.n	8001e8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ed8:	d101      	bne.n	8001ede <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <LL_ADC_IsEnabled+0x18>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <LL_ADC_IsEnabled+0x1a>
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_IsDisableOngoing+0x18>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_IsDisableOngoing+0x1a>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f9c:	f043 0204 	orr.w	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d101      	bne.n	8001ff0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800200e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d101      	bne.n	800203e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e129      	b.n	80022ba <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fb27 	bl	80016c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fef1 	bl	8001e74 <LL_ADC_IsDeepPowerDownEnabled>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fed7 	bl	8001e50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff0c 	bl	8001ec4 <LL_ADC_IsInternalRegulatorEnabled>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d115      	bne.n	80020de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fef0 	bl	8001e9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020bc:	4b81      	ldr	r3, [pc, #516]	@ (80022c4 <HAL_ADC_Init+0x278>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	4a81      	ldr	r2, [pc, #516]	@ (80022c8 <HAL_ADC_Init+0x27c>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	3301      	adds	r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020d0:	e002      	b.n	80020d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f9      	bne.n	80020d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff feee 	bl	8001ec4 <LL_ADC_IsInternalRegulatorEnabled>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f043 0210 	orr.w	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff62 	bl	8001fd8 <LL_ADC_REG_IsConversionOngoing>
 8002114:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 80c2 	bne.w	80022a8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80be 	bne.w	80022a8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002134:	f043 0202 	orr.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fefb 	bl	8001f3c <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10b      	bne.n	8002164 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800214c:	485f      	ldr	r0, [pc, #380]	@ (80022cc <HAL_ADC_Init+0x280>)
 800214e:	f7ff fef5 	bl	8001f3c <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4619      	mov	r1, r3
 800215e:	485c      	ldr	r0, [pc, #368]	@ (80022d0 <HAL_ADC_Init+0x284>)
 8002160:	f7ff fd4c 	bl	8001bfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e5b      	ldrb	r3, [r3, #25]
 8002168:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800216e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002174:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800217a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002182:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002196:	3b01      	subs	r3, #1
 8002198:	045b      	lsls	r3, r3, #17
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b44      	ldr	r3, [pc, #272]	@ (80022d4 <HAL_ADC_Init+0x288>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff26 	bl	8002026 <LL_ADC_INJ_IsConversionOngoing>
 80021da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d140      	bne.n	8002264 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13d      	bne.n	8002264 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e1b      	ldrb	r3, [r3, #24]
 80021f0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800220a:	f023 0306 	bic.w	r3, r3, #6
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	430b      	orrs	r3, r1
 8002216:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800221e:	2b01      	cmp	r3, #1
 8002220:	d118      	bne.n	8002254 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002244:	430a      	orrs	r2, r1
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	611a      	str	r2, [r3, #16]
 8002252:	e007      	b.n	8002264 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10c      	bne.n	8002286 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f023 010f 	bic.w	r1, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
 8002284:	e007      	b.n	8002296 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020f 	bic.w	r2, r2, #15
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80022a6:	e007      	b.n	80022b8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f043 0210 	orr.w	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000
 80022c8:	053e2d63 	.word	0x053e2d63
 80022cc:	50040000 	.word	0x50040000
 80022d0:	50040300 	.word	0x50040300
 80022d4:	fff0c007 	.word	0xfff0c007

080022d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fe77 	bl	8001fd8 <LL_ADC_REG_IsConversionOngoing>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d14f      	bne.n	8002390 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Start+0x26>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e04b      	b.n	8002396 <HAL_ADC_Start+0xbe>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fdd0 	bl	8002eac <ADC_Enable>
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d137      	bne.n	8002386 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002336:	d106      	bne.n	8002346 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233c:	f023 0206 	bic.w	r2, r3, #6
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002344:	e002      	b.n	800234c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	221c      	movs	r2, #28
 8002352:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002372:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe02 	bl	8001f88 <LL_ADC_REG_StartConversion>
 8002384:	e006      	b.n	8002394 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800238e:	e001      	b.n	8002394 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002390:	2302      	movs	r3, #2
 8002392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_Stop+0x16>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e023      	b.n	80023fc <HAL_ADC_Stop+0x5e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023bc:	2103      	movs	r1, #3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fcb8 	bl	8002d34 <ADC_ConversionStop>
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d111      	bne.n	80023f2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fdf2 	bl	8002fb8 <ADC_Disable>
 80023d4:	4603      	mov	r3, r0
 80023d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d102      	bne.n	800241c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002416:	2308      	movs	r3, #8
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e010      	b.n	800243e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06f      	b.n	800251a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800243a:	2304      	movs	r3, #4
 800243c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800243e:	f7ff fbad 	bl	8001b9c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002444:	e021      	b.n	800248a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800244c:	d01d      	beq.n	800248a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800244e:	f7ff fba5 	bl	8001b9c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <HAL_ADC_PollForConversion+0x60>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d112      	bne.n	800248a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e047      	b.n	800251a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0d6      	beq.n	8002446 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fc43 	bl	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7e5b      	ldrb	r3, [r3, #25]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d118      	bne.n	80024ee <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d104      	bne.n	8002506 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2208      	movs	r2, #8
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e008      	b.n	8002518 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	220c      	movs	r2, #12
 8002516:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0b6      	sub	sp, #216	@ 0xd8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x22>
 800255a:	2302      	movs	r3, #2
 800255c:	e3d5      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x7ce>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fd34 	bl	8001fd8 <LL_ADC_REG_IsConversionOngoing>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 83ba 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d824      	bhi.n	80025d2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	3b02      	subs	r3, #2
 800258e:	2b03      	cmp	r3, #3
 8002590:	d81b      	bhi.n	80025ca <HAL_ADC_ConfigChannel+0x8e>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <HAL_ADC_ConfigChannel+0x5c>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025b1 	.word	0x080025b1
 80025a0:	080025b9 	.word	0x080025b9
 80025a4:	080025c1 	.word	0x080025c1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80025a8:	230c      	movs	r3, #12
 80025aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025ae:	e010      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80025b0:	2312      	movs	r3, #18
 80025b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025b6:	e00c      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80025b8:	2318      	movs	r3, #24
 80025ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025be:	e008      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80025c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80025ca:	2306      	movs	r3, #6
 80025cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025d0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025e0:	f7ff fbbb 	bl	8001d5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fcf5 	bl	8001fd8 <LL_ADC_REG_IsConversionOngoing>
 80025ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fd15 	bl	8002026 <LL_ADC_INJ_IsConversionOngoing>
 80025fc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 81bf 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800260a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 81ba 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800261c:	d10f      	bne.n	800263e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	4619      	mov	r1, r3
 800262a:	f7ff fbc2 	bl	8001db2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fb69 	bl	8001d0e <LL_ADC_SetSamplingTimeCommonConfig>
 800263c:	e00e      	b.n	800265c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	461a      	mov	r2, r3
 800264c:	f7ff fbb1 	bl	8001db2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fb59 	bl	8001d0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d00a      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800268e:	f7ff fae9 	bl	8001c64 <LL_ADC_SetOffset>
 8002692:	e179      	b.n	8002988 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fb06 	bl	8001cac <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x184>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fafb 	bl	8001cac <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	e01e      	b.n	80026fe <HAL_ADC_ConfigChannel+0x1c2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff faf0 	bl	8001cac <LL_ADC_GetOffsetChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e004      	b.n	80026fc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80026f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x1da>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	e018      	b.n	8002748 <HAL_ADC_ConfigChannel+0x20c>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800272a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e004      	b.n	8002748 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800273e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002748:	429a      	cmp	r2, r3
 800274a:	d106      	bne.n	800275a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fabf 	bl	8001cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2101      	movs	r1, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff faa3 	bl	8001cac <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x24a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fa98 	bl	8001cac <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	e01e      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x288>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2101      	movs	r1, #1
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fa8d 	bl	8001cac <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e004      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80027b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x2a0>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	e018      	b.n	800280e <HAL_ADC_ConfigChannel+0x2d2>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80027f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80027f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e004      	b.n	800280e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800280e:	429a      	cmp	r2, r3
 8002810:	d106      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fa5c 	bl	8001cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2102      	movs	r1, #2
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fa40 	bl	8001cac <LL_ADC_GetOffsetChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_ADC_ConfigChannel+0x310>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2102      	movs	r1, #2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fa35 	bl	8001cac <LL_ADC_GetOffsetChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 021f 	and.w	r2, r3, #31
 800284a:	e01e      	b.n	800288a <HAL_ADC_ConfigChannel+0x34e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2102      	movs	r1, #2
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fa2a 	bl	8001cac <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800286a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800286e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e004      	b.n	8002888 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x366>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	e014      	b.n	80028cc <HAL_ADC_ConfigChannel+0x390>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80028be:	2320      	movs	r3, #32
 80028c0:	e004      	b.n	80028cc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80028c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d106      	bne.n	80028de <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2102      	movs	r1, #2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f9fd 	bl	8001cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2103      	movs	r1, #3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f9e1 	bl	8001cac <LL_ADC_GetOffsetChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <HAL_ADC_ConfigChannel+0x3ce>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2103      	movs	r1, #3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f9d6 	bl	8001cac <LL_ADC_GetOffsetChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	e017      	b.n	800293a <HAL_ADC_ConfigChannel+0x3fe>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2103      	movs	r1, #3
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f9cb 	bl	8001cac <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002924:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e003      	b.n	8002938 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x416>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	e011      	b.n	8002976 <HAL_ADC_ConfigChannel+0x43a>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002962:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e003      	b.n	8002976 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800296e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002976:	429a      	cmp	r2, r3
 8002978:	d106      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	2103      	movs	r1, #3
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f9a8 	bl	8001cd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fad5 	bl	8001f3c <LL_ADC_IsEnabled>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 813f 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f7ff fa2e 	bl	8001e08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a8e      	ldr	r2, [pc, #568]	@ (8002bec <HAL_ADC_ConfigChannel+0x6b0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	f040 8130 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x4a4>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b09      	cmp	r3, #9
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e019      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x4d8>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80029ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80029fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	bf94      	ite	ls
 8002a0e:	2301      	movls	r3, #1
 8002a10:	2300      	movhi	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d079      	beq.n	8002b0c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x4f8>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0e9b      	lsrs	r3, r3, #26
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	069b      	lsls	r3, r3, #26
 8002a2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a32:	e015      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x524>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a44:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	069b      	lsls	r3, r3, #26
 8002a5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x544>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	e017      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x574>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a90:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	e003      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	ea42 0103 	orr.w	r1, r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x59a>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	051b      	lsls	r3, r3, #20
 8002ad4:	e018      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x5cc>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002aee:	2320      	movs	r3, #32
 8002af0:	e003      	b.n	8002afa <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	e080      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x5ec>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	069b      	lsls	r3, r3, #26
 8002b22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b26:	e015      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x618>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	069b      	lsls	r3, r3, #26
 8002b50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x638>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	3301      	adds	r3, #1
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	e017      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x668>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	61bb      	str	r3, [r7, #24]
  return result;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	ea42 0103 	orr.w	r1, r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x694>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3b1e      	subs	r3, #30
 8002bc8:	051b      	lsls	r3, r3, #20
 8002bca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	e01d      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x6d0>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	60fb      	str	r3, [r7, #12]
  return result;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002be8:	2320      	movs	r3, #32
 8002bea:	e005      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x6bc>
 8002bec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 021f 	and.w	r2, r3, #31
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	3b1e      	subs	r3, #30
 8002c06:	051b      	lsls	r3, r3, #20
 8002c08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7ff f8cd 	bl	8001db2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d06c      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c24:	483c      	ldr	r0, [pc, #240]	@ (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c26:	f7ff f80f 	bl	8001c48 <LL_ADC_GetCommonPathInternalCh>
 8002c2a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3a      	ldr	r2, [pc, #232]	@ (8002d1c <HAL_ADC_ConfigChannel+0x7e0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d127      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d121      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a35      	ldr	r2, [pc, #212]	@ (8002d20 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d157      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c56:	4619      	mov	r1, r3
 8002c58:	482f      	ldr	r0, [pc, #188]	@ (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c5a:	f7fe ffe2 	bl	8001c22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5e:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <HAL_ADC_ConfigChannel+0x7e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	4a30      	ldr	r2, [pc, #192]	@ (8002d28 <HAL_ADC_ConfigChannel+0x7ec>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c86:	e03a      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_ADC_ConfigChannel+0x7f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d12a      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4819      	ldr	r0, [pc, #100]	@ (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cb4:	f7fe ffb5 	bl	8001c22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cb8:	e021      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d11c      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a12      	ldr	r2, [pc, #72]	@ (8002d20 <HAL_ADC_ConfigChannel+0x7e4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d111      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480c      	ldr	r0, [pc, #48]	@ (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ce6:	f7fe ff9c 	bl	8001c22 <LL_ADC_SetCommonPathInternalCh>
 8002cea:	e008      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d06:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	37d8      	adds	r7, #216	@ 0xd8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	80080000 	.word	0x80080000
 8002d18:	50040300 	.word	0x50040300
 8002d1c:	c7520000 	.word	0xc7520000
 8002d20:	50040000 	.word	0x50040000
 8002d24:	20000000 	.word	0x20000000
 8002d28:	053e2d63 	.word	0x053e2d63
 8002d2c:	cb840000 	.word	0xcb840000
 8002d30:	80000001 	.word	0x80000001

08002d34 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f944 	bl	8001fd8 <LL_ADC_REG_IsConversionOngoing>
 8002d50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f965 	bl	8002026 <LL_ADC_INJ_IsConversionOngoing>
 8002d5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8098 	beq.w	8002e9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02a      	beq.n	8002dd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7e5b      	ldrb	r3, [r3, #25]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d126      	bne.n	8002dd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7e1b      	ldrb	r3, [r3, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d122      	bne.n	8002dd0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d8e:	e014      	b.n	8002dba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4a45      	ldr	r2, [pc, #276]	@ (8002ea8 <ADC_ConversionStop+0x174>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d90d      	bls.n	8002db4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	f043 0210 	orr.w	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e074      	b.n	8002e9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3301      	adds	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d1e3      	bne.n	8002d90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2240      	movs	r2, #64	@ 0x40
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d014      	beq.n	8002e00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f8fc 	bl	8001fd8 <LL_ADC_REG_IsConversionOngoing>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f8b9 	bl	8001f62 <LL_ADC_IsDisableOngoing>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f8d8 	bl	8001fb0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d014      	beq.n	8002e30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f90b 	bl	8002026 <LL_ADC_INJ_IsConversionOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f8a1 	bl	8001f62 <LL_ADC_IsDisableOngoing>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f8e7 	bl	8001ffe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d005      	beq.n	8002e42 <ADC_ConversionStop+0x10e>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d105      	bne.n	8002e48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	617b      	str	r3, [r7, #20]
        break;
 8002e40:	e005      	b.n	8002e4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e42:	2308      	movs	r3, #8
 8002e44:	617b      	str	r3, [r7, #20]
        break;
 8002e46:	e002      	b.n	8002e4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	617b      	str	r3, [r7, #20]
        break;
 8002e4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fea5 	bl	8001b9c <HAL_GetTick>
 8002e52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e54:	e01b      	b.n	8002e8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e56:	f7fe fea1 	bl	8001b9c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d914      	bls.n	8002e8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e007      	b.n	8002e9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1dc      	bne.n	8002e56 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	a33fffff 	.word	0xa33fffff

08002eac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff f83d 	bl	8001f3c <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d169      	bne.n	8002f9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <ADC_Enable+0xfc>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e055      	b.n	8002f9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fff8 	bl	8001eec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002efc:	482b      	ldr	r0, [pc, #172]	@ (8002fac <ADC_Enable+0x100>)
 8002efe:	f7fe fea3 	bl	8001c48 <LL_ADC_GetCommonPathInternalCh>
 8002f02:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <ADC_Enable+0x104>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	4a28      	ldr	r2, [pc, #160]	@ (8002fb4 <ADC_Enable+0x108>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f26:	e002      	b.n	8002f2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f9      	bne.n	8002f28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f34:	f7fe fe32 	bl	8001b9c <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3a:	e028      	b.n	8002f8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fffb 	bl	8001f3c <LL_ADC_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe ffcb 	bl	8001eec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f56:	f7fe fe21 	bl	8001b9c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d914      	bls.n	8002f8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d00d      	beq.n	8002f8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d1cf      	bne.n	8002f3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	8000003f 	.word	0x8000003f
 8002fac:	50040300 	.word	0x50040300
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	053e2d63 	.word	0x053e2d63

08002fb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe ffcc 	bl	8001f62 <LL_ADC_IsDisableOngoing>
 8002fca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe ffb3 	bl	8001f3c <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d047      	beq.n	800306c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d144      	bne.n	800306c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030d 	and.w	r3, r3, #13
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10c      	bne.n	800300a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe ff8d 	bl	8001f14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2203      	movs	r2, #3
 8003000:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003002:	f7fe fdcb 	bl	8001b9c <HAL_GetTick>
 8003006:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003008:	e029      	b.n	800305e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e023      	b.n	800306e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003026:	f7fe fdb9 	bl	8001b9c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d914      	bls.n	800305e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1dc      	bne.n	8003026 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <LL_ADC_SetCommonPathInternalCh>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_ADC_GetCommonPathInternalCh>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_SetOffset>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3360      	adds	r3, #96	@ 0x60
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <LL_ADC_SetOffset+0x44>)
 80030da:	4013      	ands	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	601a      	str	r2, [r3, #0]
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	03fff000 	.word	0x03fff000

08003100 <LL_ADC_GetOffsetChannel>:
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3360      	adds	r3, #96	@ 0x60
 800310e:	461a      	mov	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_ADC_SetOffsetState>:
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3360      	adds	r3, #96	@ 0x60
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	431a      	orrs	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	615a      	str	r2, [r3, #20]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_INJ_GetTrigAuto>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_INJ_SetQueueMode>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003202:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_ADC_SetChannelSamplingTime>:
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3314      	adds	r3, #20
 800322a:	461a      	mov	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	0e5b      	lsrs	r3, r3, #25
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	4413      	add	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	0d1b      	lsrs	r3, r3, #20
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2107      	movs	r1, #7
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	401a      	ands	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	0d1b      	lsrs	r3, r3, #20
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	431a      	orrs	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	601a      	str	r2, [r3, #0]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_SetChannelSingleDiff>:
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f003 0318 	and.w	r3, r3, #24
 8003292:	4908      	ldr	r1, [pc, #32]	@ (80032b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003294:	40d9      	lsrs	r1, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	400b      	ands	r3, r1
 800329a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329e:	431a      	orrs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	0007ffff 	.word	0x0007ffff

080032b8 <LL_ADC_IsEnabled>:
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <LL_ADC_IsEnabled+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_ADC_IsEnabled+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_ADC_StartCalibration>:
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80032f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_IsCalibrationOnGoing>:
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003324:	d101      	bne.n	800332a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_REG_IsConversionOngoing>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d101      	bne.n	8003350 <LL_ADC_REG_IsConversionOngoing+0x18>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_ADC_INJ_StartConversion>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800336e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003372:	f043 0208 	orr.w	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b08      	cmp	r3, #8
 8003398:	d101      	bne.n	800339e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e04d      	b.n	8003464 <HAL_ADCEx_Calibration_Start+0xb8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fdf1 	bl	8002fb8 <ADC_Disable>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d136      	bne.n	800344e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033e8:	f023 0302 	bic.w	r3, r3, #2
 80033ec:	f043 0202 	orr.w	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6839      	ldr	r1, [r7, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ff6f 	bl	80032de <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003400:	e014      	b.n	800342c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3301      	adds	r3, #1
 8003406:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800340e:	d30d      	bcc.n	800342c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	f023 0312 	bic.w	r3, r3, #18
 8003418:	f043 0210 	orr.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e01b      	b.n	8003464 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff6d 	bl	8003310 <LL_ADC_IsCalibrationOnGoing>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e2      	bne.n	8003402 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	f023 0303 	bic.w	r3, r3, #3
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	@ 0x58
 800344c:	e005      	b.n	800345a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff84 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_ADCEx_InjectedStart+0x1c>
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
 8003486:	e05f      	b.n	8003548 <HAL_ADCEx_InjectedStart+0xdc>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003492:	60fb      	str	r3, [r7, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <HAL_ADCEx_InjectedStart+0x4c>
        && (tmp_config_injected_queue == 0UL)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_ADCEx_InjectedStart+0x4c>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e047      	b.n	8003548 <HAL_ADCEx_InjectedStart+0xdc>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_ADCEx_InjectedStart+0x5a>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e040      	b.n	8003548 <HAL_ADCEx_InjectedStart+0xdc>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fcec 	bl	8002eac <ADC_Enable>
 80034d4:	4603      	mov	r3, r0
 80034d6:	72fb      	strb	r3, [r7, #11]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d12f      	bne.n	800353e <HAL_ADCEx_InjectedStart+0xd2>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <HAL_ADCEx_InjectedStart+0x8c>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	f023 0208 	bic.w	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034f6:	e002      	b.n	80034fe <HAL_ADCEx_InjectedStart+0x92>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2260      	movs	r2, #96	@ 0x60
 8003518:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
#else
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fe54 	bl	80031d4 <LL_ADC_INJ_GetTrigAuto>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <HAL_ADCEx_InjectedStart+0xda>
      {
        /* Start ADC group injected conversion */
        LL_ADC_INJ_StartConversion(hadc->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff11 	bl	800335e <LL_ADC_INJ_StartConversion>
 800353c:	e003      	b.n	8003546 <HAL_ADCEx_InjectedStart+0xda>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 8003546:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_ADCEx_InjectedStop>:
  *         has already stopped conversion of ADC slave).
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADCEx_InjectedStop+0x16>
 8003562:	2302      	movs	r3, #2
 8003564:	e032      	b.n	80035cc <HAL_ADCEx_InjectedStop+0x7c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 800356e:	2102      	movs	r1, #2
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fbdf 	bl	8002d34 <ADC_ConversionStop>
 8003576:	4603      	mov	r3, r0
 8003578:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on regular group is on-going                       */
  if (tmp_hal_status == HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d120      	bne.n	80035c2 <HAL_ADCEx_InjectedStop+0x72>
  {
    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fed7 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d112      	bne.n	80035b6 <HAL_ADCEx_InjectedStop+0x66>
    {
      /* 2. Disable the ADC peripheral */
      tmp_hal_status = ADC_Disable(hadc);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff fd11 	bl	8002fb8 <ADC_Disable>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]

      /* Check if ADC is effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d110      	bne.n	80035c2 <HAL_ADCEx_InjectedStop+0x72>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80035b4:	e005      	b.n	80035c2 <HAL_ADCEx_InjectedStop+0x72>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d102      	bne.n	80035ec <HAL_ADCEx_InjectedPollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_JEOS;
 80035e6:	2340      	movs	r3, #64	@ 0x40
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	e001      	b.n	80035f0 <HAL_ADCEx_InjectedPollForConversion+0x1c>
  }
  else /* end of conversion selected */
  {
    tmp_flag_end = ADC_FLAG_JEOC;
 80035ec:	2320      	movs	r3, #32
 80035ee:	61fb      	str	r3, [r7, #28]
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80035f0:	f7fe fad4 	bl	8001b9c <HAL_GetTick>
 80035f4:	61b8      	str	r0, [r7, #24]

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80035f6:	e021      	b.n	800363c <HAL_ADCEx_InjectedPollForConversion+0x68>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035fe:	d01d      	beq.n	800363c <HAL_ADCEx_InjectedPollForConversion+0x68>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003600:	f7fe facc 	bl	8001b9c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d302      	bcc.n	8003616 <HAL_ADCEx_InjectedPollForConversion+0x42>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d112      	bne.n	800363c <HAL_ADCEx_InjectedPollForConversion+0x68>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_ADCEx_InjectedPollForConversion+0x68>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e05c      	b.n	80036f6 <HAL_ADCEx_InjectedPollForConversion+0x122>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0d6      	beq.n	80035f8 <HAL_ADCEx_InjectedPollForConversion+0x24>
      }
    }
  }

  /* Retrieve ADC configuration */
  tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fdad 	bl	80031ae <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003654:	6178      	str	r0, [r7, #20]
  tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fd94 	bl	8003188 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003660:	6138      	str	r0, [r7, #16]
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10c      	bne.n	8003696 <HAL_ADCEx_InjectedPollForConversion+0xc2>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003682:	2b00      	cmp	r3, #0
 8003684:	d125      	bne.n	80036d2 <HAL_ADCEx_InjectedPollForConversion+0xfe>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d022      	beq.n	80036d2 <HAL_ADCEx_InjectedPollForConversion+0xfe>
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11d      	bne.n	80036d2 <HAL_ADCEx_InjectedPollForConversion+0xfe>
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b40      	cmp	r3, #64	@ 0x40
 80036a2:	d116      	bne.n	80036d2 <HAL_ADCEx_InjectedPollForConversion+0xfe>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d111      	bne.n	80036d2 <HAL_ADCEx_InjectedPollForConversion+0xfe>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_ADCEx_InjectedPollForConversion+0xfe>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }
  }

  /* Clear polled flag */
  if (tmp_flag_end == ADC_FLAG_JEOS)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d109      	bne.n	80036ec <HAL_ADCEx_InjectedPollForConversion+0x118>
  {
    /* Clear end of sequence JEOS flag of injected group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
    /* For injected groups, no new conversion will start before JEOS is       */
    /* cleared.                                                               */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_ADCEx_InjectedPollForConversion+0x120>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2260      	movs	r2, #96	@ 0x60
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e003      	b.n	80036f4 <HAL_ADCEx_InjectedPollForConversion+0x120>
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2220      	movs	r2, #32
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(const ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f240 321a 	movw	r2, #794	@ 0x31a
 800370e:	4293      	cmp	r3, r2
 8003710:	d00d      	beq.n	800372e <HAL_ADCEx_InjectedGetValue+0x30>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f240 321a 	movw	r2, #794	@ 0x31a
 8003718:	4293      	cmp	r3, r2
 800371a:	d81a      	bhi.n	8003752 <HAL_ADCEx_InjectedGetValue+0x54>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003722:	d010      	beq.n	8003746 <HAL_ADCEx_InjectedGetValue+0x48>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 800372a:	d006      	beq.n	800373a <HAL_ADCEx_InjectedGetValue+0x3c>
 800372c:	e011      	b.n	8003752 <HAL_ADCEx_InjectedGetValue+0x54>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003736:	60fb      	str	r3, [r7, #12]
      break;
 8003738:	e011      	b.n	800375e <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003742:	60fb      	str	r3, [r7, #12]
      break;
 8003744:	e00b      	b.n	800375e <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800374e:	60fb      	str	r3, [r7, #12]
      break;
 8003750:	e005      	b.n	800375e <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800375a:	60fb      	str	r3, [r7, #12]
      break;
 800375c:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 800375e:	68fb      	ldr	r3, [r7, #12]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0b6      	sub	sp, #216	@ 0xd8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800378c:	2b01      	cmp	r3, #1
 800378e:	d102      	bne.n	8003796 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003790:	2302      	movs	r3, #2
 8003792:	f000 bc90 	b.w	80040b6 <HAL_ADCEx_InjectedConfigChannel+0x94a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d130      	bne.n	8003810 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d179      	bne.n	80038aa <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0e9b      	lsrs	r3, r3, #26
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	f403 52f8 	and.w	r2, r3, #7936	@ 0x1f00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80037d2:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037de:	e007      	b.n	80037f0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037f6:	4b96      	ldr	r3, [pc, #600]	@ (8003a50 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003802:	430b      	orrs	r3, r1
 8003804:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800380c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800380e:	e04c      	b.n	80038aa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11d      	bne.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800383c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003848:	e004      	b.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	3b01      	subs	r3, #1
 8003850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	f003 021f 	and.w	r2, r3, #31
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003882:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800389a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a50 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	430b      	orrs	r3, r1
 80038a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fd69 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d120      	bne.n	80038fc <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	7f5b      	ldrb	r3, [r3, #29]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d110      	bne.n	80038e4 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	7f9b      	ldrb	r3, [r3, #30]
 80038d0:	055a      	lsls	r2, r3, #21
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	7f1b      	ldrb	r3, [r3, #28]
 80038d6:	051b      	lsls	r3, r3, #20
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	e00b      	b.n	80038fc <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	7f9b      	ldrb	r3, [r3, #30]
 80038f2:	055a      	lsls	r2, r3, #21
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fd19 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 8003906:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fd39 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 8003914:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 8213 	bne.w	8003d48 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 820e 	bne.w	8003d48 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d115      	bne.n	8003968 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	7f5b      	ldrb	r3, [r3, #29]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d108      	bne.n	8003956 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003952:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003954:	e01e      	b.n	8003994 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003964:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003966:	e015      	b.n	8003994 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	7f5b      	ldrb	r3, [r3, #29]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d109      	bne.n	8003984 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	659a      	str	r2, [r3, #88]	@ 0x58

        tmp_hal_status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003982:	e007      	b.n	8003994 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003992:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800399a:	2b01      	cmp	r3, #1
 800399c:	d110      	bne.n	80039c0 <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	430b      	orrs	r3, r1
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0202 	orr.w	r2, r2, #2
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e007      	b.n	80039d0 <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0202 	bic.w	r2, r2, #2
 80039ce:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039d8:	d10f      	bne.n	80039fa <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7ff fc18 	bl	800321a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fbb5 	bl	8003162 <LL_ADC_SetSamplingTimeCommonConfig>
 80039f8:	e00e      	b.n	8003a18 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7ff fc07 	bl	800321a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fba5 	bl	8003162 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	08db      	lsrs	r3, r3, #3
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_ADCEx_InjectedConfigChannel+0x2e8>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6919      	ldr	r1, [r3, #16]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a4a:	f7ff fb35 	bl	80030b8 <LL_ADC_SetOffset>
 8003a4e:	e17b      	b.n	8003d48 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
 8003a50:	82082000 	.word	0x82082000
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fb50 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fb45 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	f003 021f 	and.w	r2, r3, #31
 8003a7e:	e01e      	b.n	8003abe <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fb3a 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8003a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003aa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADCEx_InjectedConfigChannel+0x346>
    return 32U;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	e004      	b.n	8003abc <HAL_ADCEx_InjectedConfigChannel+0x350>
  return __builtin_clz(value);
 8003ab2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d105      	bne.n	8003ad6 <HAL_ADCEx_InjectedConfigChannel+0x36a>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	e018      	b.n	8003b08 <HAL_ADCEx_InjectedConfigChannel+0x39c>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003aee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003af2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ADCEx_InjectedConfigChannel+0x392>
    return 32U;
 8003afa:	2320      	movs	r3, #32
 8003afc:	e004      	b.n	8003b08 <HAL_ADCEx_InjectedConfigChannel+0x39c>
  return __builtin_clz(value);
 8003afe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d106      	bne.n	8003b1a <HAL_ADCEx_InjectedConfigChannel+0x3ae>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fb09 	bl	800312c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff faed 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fae2 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	e01e      	b.n	8003b84 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fad7 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADCEx_InjectedConfigChannel+0x40c>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e004      	b.n	8003b82 <HAL_ADCEx_InjectedConfigChannel+0x416>
  return __builtin_clz(value);
 8003b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <HAL_ADCEx_InjectedConfigChannel+0x430>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	e018      	b.n	8003bce <HAL_ADCEx_InjectedConfigChannel+0x462>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0x458>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e004      	b.n	8003bce <HAL_ADCEx_InjectedConfigChannel+0x462>
  return __builtin_clz(value);
 8003bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d106      	bne.n	8003be0 <HAL_ADCEx_InjectedConfigChannel+0x474>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff faa6 	bl	800312c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fa8a 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fa7f 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003c02:	4603      	mov	r3, r0
 8003c04:	0e9b      	lsrs	r3, r3, #26
 8003c06:	f003 021f 	and.w	r2, r3, #31
 8003c0a:	e01e      	b.n	8003c4a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fa74 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADCEx_InjectedConfigChannel+0x4d2>
    return 32U;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	e004      	b.n	8003c48 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	0e9b      	lsrs	r3, r3, #26
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	e014      	b.n	8003c8c <HAL_ADCEx_InjectedConfigChannel+0x520>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003c70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADCEx_InjectedConfigChannel+0x516>
    return 32U;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	e004      	b.n	8003c8c <HAL_ADCEx_InjectedConfigChannel+0x520>
  return __builtin_clz(value);
 8003c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d106      	bne.n	8003c9e <HAL_ADCEx_InjectedConfigChannel+0x532>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fa47 	bl	800312c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fa2b 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2103      	movs	r1, #3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fa20 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	0e9b      	lsrs	r3, r3, #26
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	e017      	b.n	8003cfa <HAL_ADCEx_InjectedConfigChannel+0x58e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2103      	movs	r1, #3
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fa15 	bl	8003100 <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADCEx_InjectedConfigChannel+0x584>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e003      	b.n	8003cf8 <HAL_ADCEx_InjectedConfigChannel+0x58c>
  return __builtin_clz(value);
 8003cf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	0e9b      	lsrs	r3, r3, #26
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	e011      	b.n	8003d36 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003d20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d22:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	e003      	b.n	8003d36 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003d2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d106      	bne.n	8003d48 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2103      	movs	r1, #3
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f9f2 	bl	800312c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fab3 	bl	80032b8 <LL_ADC_IsEnabled>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f040 813f 	bne.w	8003fd8 <HAL_ADCEx_InjectedConfigChannel+0x86c>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f7ff fa82 	bl	8003270 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a8e      	ldr	r2, [pc, #568]	@ (8003fac <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	f040 8130 	bne.w	8003fd8 <HAL_ADCEx_InjectedConfigChannel+0x86c>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <HAL_ADCEx_InjectedConfigChannel+0x634>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	0e9b      	lsrs	r3, r3, #26
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	bf94      	ite	ls
 8003d98:	2301      	movls	r3, #1
 8003d9a:	2300      	movhi	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e019      	b.n	8003dd4 <HAL_ADCEx_InjectedConfigChannel+0x668>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003da8:	fa93 f3a3 	rbit	r3, r3
 8003dac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_ADCEx_InjectedConfigChannel+0x650>
    return 32U;
 8003db8:	2320      	movs	r3, #32
 8003dba:	e003      	b.n	8003dc4 <HAL_ADCEx_InjectedConfigChannel+0x658>
  return __builtin_clz(value);
 8003dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2b09      	cmp	r3, #9
 8003dcc:	bf94      	ite	ls
 8003dce:	2301      	movls	r3, #1
 8003dd0:	2300      	movhi	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d079      	beq.n	8003ecc <HAL_ADCEx_InjectedConfigChannel+0x760>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d107      	bne.n	8003df4 <HAL_ADCEx_InjectedConfigChannel+0x688>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	3301      	adds	r3, #1
 8003dec:	069b      	lsls	r3, r3, #26
 8003dee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003df2:	e015      	b.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0x6b4>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_ADCEx_InjectedConfigChannel+0x6a4>
    return 32U;
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	e003      	b.n	8003e18 <HAL_ADCEx_InjectedConfigChannel+0x6ac>
  return __builtin_clz(value);
 8003e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_ADCEx_InjectedConfigChannel+0x6d4>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0e9b      	lsrs	r3, r3, #26
 8003e32:	3301      	adds	r3, #1
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	e017      	b.n	8003e70 <HAL_ADCEx_InjectedConfigChannel+0x704>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x6f0>
    return 32U;
 8003e58:	2320      	movs	r3, #32
 8003e5a:	e003      	b.n	8003e64 <HAL_ADCEx_InjectedConfigChannel+0x6f8>
  return __builtin_clz(value);
 8003e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	ea42 0103 	orr.w	r1, r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_ADCEx_InjectedConfigChannel+0x72a>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	051b      	lsls	r3, r3, #20
 8003e94:	e018      	b.n	8003ec8 <HAL_ADCEx_InjectedConfigChannel+0x75c>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADCEx_InjectedConfigChannel+0x746>
    return 32U;
 8003eae:	2320      	movs	r3, #32
 8003eb0:	e003      	b.n	8003eba <HAL_ADCEx_InjectedConfigChannel+0x74e>
  return __builtin_clz(value);
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f003 021f 	and.w	r2, r3, #31
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	e080      	b.n	8003fce <HAL_ADCEx_InjectedConfigChannel+0x862>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d107      	bne.n	8003ee8 <HAL_ADCEx_InjectedConfigChannel+0x77c>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	3301      	adds	r3, #1
 8003ee0:	069b      	lsls	r3, r3, #26
 8003ee2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee6:	e015      	b.n	8003f14 <HAL_ADCEx_InjectedConfigChannel+0x7a8>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_ADCEx_InjectedConfigChannel+0x798>
    return 32U;
 8003f00:	2320      	movs	r3, #32
 8003f02:	e003      	b.n	8003f0c <HAL_ADCEx_InjectedConfigChannel+0x7a0>
  return __builtin_clz(value);
 8003f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	069b      	lsls	r3, r3, #26
 8003f10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_ADCEx_InjectedConfigChannel+0x7c8>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	3301      	adds	r3, #1
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	e017      	b.n	8003f64 <HAL_ADCEx_InjectedConfigChannel+0x7f8>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	61bb      	str	r3, [r7, #24]
  return result;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0x7e4>
    return 32U;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	e003      	b.n	8003f58 <HAL_ADCEx_InjectedConfigChannel+0x7ec>
  return __builtin_clz(value);
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2101      	movs	r1, #1
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	ea42 0103 	orr.w	r1, r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10d      	bne.n	8003f90 <HAL_ADCEx_InjectedConfigChannel+0x824>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0e9b      	lsrs	r3, r3, #26
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	3b1e      	subs	r3, #30
 8003f88:	051b      	lsls	r3, r3, #20
 8003f8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f8e:	e01d      	b.n	8003fcc <HAL_ADCEx_InjectedConfigChannel+0x860>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	60fb      	str	r3, [r7, #12]
  return result;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <HAL_ADCEx_InjectedConfigChannel+0x844>
    return 32U;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	e005      	b.n	8003fb8 <HAL_ADCEx_InjectedConfigChannel+0x84c>
 8003fac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f003 021f 	and.w	r2, r3, #31
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b1e      	subs	r3, #30
 8003fc6:	051b      	lsls	r3, r3, #20
 8003fc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fcc:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7ff f921 	bl	800321a <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b38      	ldr	r3, [pc, #224]	@ (80040c0 <HAL_ADCEx_InjectedConfigChannel+0x954>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d062      	beq.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fe4:	4837      	ldr	r0, [pc, #220]	@ (80040c4 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003fe6:	f7ff f859 	bl	800309c <LL_ADC_GetCommonPathInternalCh>
 8003fea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <HAL_ADCEx_InjectedConfigChannel+0x95c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d127      	bne.n	8004048 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ff8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ffc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d121      	bne.n	8004048 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a30      	ldr	r2, [pc, #192]	@ (80040cc <HAL_ADCEx_InjectedConfigChannel+0x960>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d14d      	bne.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800400e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004012:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004016:	4619      	mov	r1, r3
 8004018:	482a      	ldr	r0, [pc, #168]	@ (80040c4 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 800401a:	f7ff f82c 	bl	8003076 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800401e:	4b2c      	ldr	r3, [pc, #176]	@ (80040d0 <HAL_ADCEx_InjectedConfigChannel+0x964>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	4a2b      	ldr	r2, [pc, #172]	@ (80040d4 <HAL_ADCEx_InjectedConfigChannel+0x968>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	099a      	lsrs	r2, r3, #6
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004036:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004038:	e002      	b.n	8004040 <HAL_ADCEx_InjectedConfigChannel+0x8d4>
        {
          wait_loop_index--;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3b01      	subs	r3, #1
 800403e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f9      	bne.n	800403a <HAL_ADCEx_InjectedConfigChannel+0x8ce>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004046:	e030      	b.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a22      	ldr	r2, [pc, #136]	@ (80040d8 <HAL_ADCEx_InjectedConfigChannel+0x96c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d113      	bne.n	800407a <HAL_ADCEx_InjectedConfigChannel+0x90e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004056:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <HAL_ADCEx_InjectedConfigChannel+0x90e>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1a      	ldr	r2, [pc, #104]	@ (80040cc <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d120      	bne.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800406c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004070:	4619      	mov	r1, r3
 8004072:	4814      	ldr	r0, [pc, #80]	@ (80040c4 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8004074:	f7fe ffff 	bl	8003076 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004078:	e017      	b.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a17      	ldr	r2, [pc, #92]	@ (80040dc <HAL_ADCEx_InjectedConfigChannel+0x970>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d112      	bne.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10c      	bne.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0d      	ldr	r2, [pc, #52]	@ (80040cc <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d107      	bne.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800409a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800409e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040a2:	4619      	mov	r1, r3
 80040a4:	4807      	ldr	r0, [pc, #28]	@ (80040c4 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 80040a6:	f7fe ffe6 	bl	8003076 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80040b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	37d8      	adds	r7, #216	@ 0xd8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	80080000 	.word	0x80080000
 80040c4:	50040300 	.word	0x50040300
 80040c8:	c7520000 	.word	0xc7520000
 80040cc:	50040000 	.word	0x50040000
 80040d0:	20000000 	.word	0x20000000
 80040d4:	053e2d63 	.word	0x053e2d63
 80040d8:	cb840000 	.word	0xcb840000
 80040dc:	80000001 	.word	0x80000001

080040e0 <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f923 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 80040f2:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f944 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 80040fe:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f86b 	bl	80031f0 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]
 800411e:	e001      	b.n	8004124 <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <__NVIC_SetPriorityGrouping>:
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800415c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004162:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	60d3      	str	r3, [r2, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <__NVIC_GetPriorityGrouping>:
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	@ (80041cc <__NVIC_EnableIRQ+0x38>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	@ (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	@ (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	@ 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	@ 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <SysTick_Config>:
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800429c:	d301      	bcc.n	80042a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800429e:	2301      	movs	r3, #1
 80042a0:	e00f      	b.n	80042c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <SysTick_Config+0x40>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042aa:	210f      	movs	r1, #15
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042b0:	f7ff ff8e 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <SysTick_Config+0x40>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <SysTick_Config+0x40>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff29 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f8:	f7ff ff3e 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff8e 	bl	8004224 <NVIC_EncodePriority>
 8004308:	4602      	mov	r2, r0
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff5d 	bl	80041d0 <__NVIC_SetPriority>
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff31 	bl	8004194 <__NVIC_EnableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ffa2 	bl	800428c <SysTick_Config>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004362:	e166      	b.n	8004632 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8158 	beq.w	800462c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d005      	beq.n	8004394 <HAL_GPIO_Init+0x40>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d130      	bne.n	80043f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ca:	2201      	movs	r2, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0201 	and.w	r2, r3, #1
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d017      	beq.n	8004432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2203      	movs	r2, #3
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d123      	bne.n	8004486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	08da      	lsrs	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3208      	adds	r2, #8
 8004446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	220f      	movs	r2, #15
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	08da      	lsrs	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3208      	adds	r2, #8
 8004480:	6939      	ldr	r1, [r7, #16]
 8004482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	2203      	movs	r2, #3
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0203 	and.w	r2, r3, #3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80b2 	beq.w	800462c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c8:	4b61      	ldr	r3, [pc, #388]	@ (8004650 <HAL_GPIO_Init+0x2fc>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	4a60      	ldr	r2, [pc, #384]	@ (8004650 <HAL_GPIO_Init+0x2fc>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80044d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004650 <HAL_GPIO_Init+0x2fc>)
 80044d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004654 <HAL_GPIO_Init+0x300>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	3302      	adds	r3, #2
 80044e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	220f      	movs	r2, #15
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800450a:	d02b      	beq.n	8004564 <HAL_GPIO_Init+0x210>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a52      	ldr	r2, [pc, #328]	@ (8004658 <HAL_GPIO_Init+0x304>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d025      	beq.n	8004560 <HAL_GPIO_Init+0x20c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a51      	ldr	r2, [pc, #324]	@ (800465c <HAL_GPIO_Init+0x308>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01f      	beq.n	800455c <HAL_GPIO_Init+0x208>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a50      	ldr	r2, [pc, #320]	@ (8004660 <HAL_GPIO_Init+0x30c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d019      	beq.n	8004558 <HAL_GPIO_Init+0x204>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a4f      	ldr	r2, [pc, #316]	@ (8004664 <HAL_GPIO_Init+0x310>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_GPIO_Init+0x200>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a4e      	ldr	r2, [pc, #312]	@ (8004668 <HAL_GPIO_Init+0x314>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00d      	beq.n	8004550 <HAL_GPIO_Init+0x1fc>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a4d      	ldr	r2, [pc, #308]	@ (800466c <HAL_GPIO_Init+0x318>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <HAL_GPIO_Init+0x1f8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a4c      	ldr	r2, [pc, #304]	@ (8004670 <HAL_GPIO_Init+0x31c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_GPIO_Init+0x1f4>
 8004544:	2307      	movs	r3, #7
 8004546:	e00e      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004548:	2308      	movs	r3, #8
 800454a:	e00c      	b.n	8004566 <HAL_GPIO_Init+0x212>
 800454c:	2306      	movs	r3, #6
 800454e:	e00a      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004550:	2305      	movs	r3, #5
 8004552:	e008      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004554:	2304      	movs	r3, #4
 8004556:	e006      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004558:	2303      	movs	r3, #3
 800455a:	e004      	b.n	8004566 <HAL_GPIO_Init+0x212>
 800455c:	2302      	movs	r3, #2
 800455e:	e002      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004564:	2300      	movs	r3, #0
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	f002 0203 	and.w	r2, r2, #3
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	4093      	lsls	r3, r2
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004576:	4937      	ldr	r1, [pc, #220]	@ (8004654 <HAL_GPIO_Init+0x300>)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004584:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <HAL_GPIO_Init+0x320>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	43db      	mvns	r3, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045a8:	4a32      	ldr	r2, [pc, #200]	@ (8004674 <HAL_GPIO_Init+0x320>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ae:	4b31      	ldr	r3, [pc, #196]	@ (8004674 <HAL_GPIO_Init+0x320>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045d2:	4a28      	ldr	r2, [pc, #160]	@ (8004674 <HAL_GPIO_Init+0x320>)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045d8:	4b26      	ldr	r3, [pc, #152]	@ (8004674 <HAL_GPIO_Init+0x320>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_GPIO_Init+0x320>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004602:	4b1c      	ldr	r3, [pc, #112]	@ (8004674 <HAL_GPIO_Init+0x320>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004626:	4a13      	ldr	r2, [pc, #76]	@ (8004674 <HAL_GPIO_Init+0x320>)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3301      	adds	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	f47f ae91 	bne.w	8004364 <HAL_GPIO_Init+0x10>
  }
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40021000 	.word	0x40021000
 8004654:	40010000 	.word	0x40010000
 8004658:	48000400 	.word	0x48000400
 800465c:	48000800 	.word	0x48000800
 8004660:	48000c00 	.word	0x48000c00
 8004664:	48001000 	.word	0x48001000
 8004668:	48001400 	.word	0x48001400
 800466c:	48001800 	.word	0x48001800
 8004670:	48001c00 	.word	0x48001c00
 8004674:	40010400 	.word	0x40010400

08004678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
 8004684:	4613      	mov	r3, r2
 8004686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004688:	787b      	ldrb	r3, [r7, #1]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004694:	e002      	b.n	800469c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046ba:	887a      	ldrh	r2, [r7, #2]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4013      	ands	r3, r2
 80046c0:	041a      	lsls	r2, r3, #16
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	43d9      	mvns	r1, r3
 80046c6:	887b      	ldrh	r3, [r7, #2]
 80046c8:	400b      	ands	r3, r1
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	619a      	str	r2, [r3, #24]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046e6:	4b08      	ldr	r3, [pc, #32]	@ (8004708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d006      	beq.n	8004700 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046f2:	4a05      	ldr	r2, [pc, #20]	@ (8004708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc fef8 	bl	80014f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40010400 	.word	0x40010400

0800470c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004710:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471c:	d102      	bne.n	8004724 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800471e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004722:	e00b      	b.n	800473c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004724:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800472a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004732:	d102      	bne.n	800473a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004738:	e000      	b.n	800473c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800473a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40007000 	.word	0x40007000

0800474c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d141      	bne.n	80047de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800475a:	4b4b      	ldr	r3, [pc, #300]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004766:	d131      	bne.n	80047cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004768:	4b47      	ldr	r3, [pc, #284]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800476e:	4a46      	ldr	r2, [pc, #280]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004778:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004780:	4a41      	ldr	r2, [pc, #260]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004786:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004788:	4b40      	ldr	r3, [pc, #256]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2232      	movs	r2, #50	@ 0x32
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a3f      	ldr	r2, [pc, #252]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	0c9b      	lsrs	r3, r3, #18
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800479e:	e002      	b.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a6:	4b38      	ldr	r3, [pc, #224]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b2:	d102      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f2      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ba:	4b33      	ldr	r3, [pc, #204]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	d158      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e057      	b.n	800487c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047dc:	e04d      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e4:	d141      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047e6:	4b28      	ldr	r3, [pc, #160]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f2:	d131      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047f4:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fa:	4a23      	ldr	r2, [pc, #140]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004804:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800480c:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004814:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2232      	movs	r2, #50	@ 0x32
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	4a1c      	ldr	r2, [pc, #112]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	0c9b      	lsrs	r3, r3, #18
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482a:	e002      	b.n	8004832 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004832:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d102      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f2      	bne.n	800482c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d112      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e011      	b.n	800487c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485e:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004868:	e007      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004872:	4a05      	ldr	r2, [pc, #20]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004878:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40007000 	.word	0x40007000
 800488c:	20000000 	.word	0x20000000
 8004890:	431bde83 	.word	0x431bde83

08004894 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f000 bc08 	b.w	80050b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a8:	4b96      	ldr	r3, [pc, #600]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b2:	4b94      	ldr	r3, [pc, #592]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80e4 	beq.w	8004a92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <HAL_RCC_OscConfig+0x4c>
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	f040 808b 	bne.w	80049ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	f040 8087 	bne.w	80049ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048e0:	4b88      	ldr	r3, [pc, #544]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_OscConfig+0x64>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e3df      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	4b81      	ldr	r3, [pc, #516]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <HAL_RCC_OscConfig+0x7e>
 8004908:	4b7e      	ldr	r3, [pc, #504]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004910:	e005      	b.n	800491e <HAL_RCC_OscConfig+0x8a>
 8004912:	4b7c      	ldr	r3, [pc, #496]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800491e:	4293      	cmp	r3, r2
 8004920:	d223      	bcs.n	800496a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fdcc 	bl	80054c4 <RCC_SetFlashLatencyFromMSIRange>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e3c0      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004936:	4b73      	ldr	r3, [pc, #460]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a72      	ldr	r2, [pc, #456]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	4b70      	ldr	r3, [pc, #448]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	496d      	ldr	r1, [pc, #436]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004954:	4b6b      	ldr	r3, [pc, #428]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	4968      	ldr	r1, [pc, #416]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
 8004968:	e025      	b.n	80049b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800496a:	4b66      	ldr	r3, [pc, #408]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a65      	ldr	r2, [pc, #404]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004970:	f043 0308 	orr.w	r3, r3, #8
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b63      	ldr	r3, [pc, #396]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	4960      	ldr	r1, [pc, #384]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004988:	4b5e      	ldr	r3, [pc, #376]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	495b      	ldr	r1, [pc, #364]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fd8c 	bl	80054c4 <RCC_SetFlashLatencyFromMSIRange>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e380      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b6:	f000 fcc1 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4b51      	ldr	r3, [pc, #324]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	4950      	ldr	r1, [pc, #320]	@ (8004b08 <HAL_RCC_OscConfig+0x274>)
 80049c8:	5ccb      	ldrb	r3, [r1, r3]
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	4a4e      	ldr	r2, [pc, #312]	@ (8004b0c <HAL_RCC_OscConfig+0x278>)
 80049d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b10 <HAL_RCC_OscConfig+0x27c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fd f88e 	bl	8001afc <HAL_InitTick>
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d052      	beq.n	8004a90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	e364      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d032      	beq.n	8004a5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049f6:	4b43      	ldr	r3, [pc, #268]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a42      	ldr	r2, [pc, #264]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a02:	f7fd f8cb 	bl	8001b9c <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a0a:	f7fd f8c7 	bl	8001b9c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e34d      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a1c:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a28:	4b36      	ldr	r3, [pc, #216]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	f043 0308 	orr.w	r3, r3, #8
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b33      	ldr	r3, [pc, #204]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4930      	ldr	r1, [pc, #192]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a46:	4b2f      	ldr	r3, [pc, #188]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	492b      	ldr	r1, [pc, #172]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
 8004a5a:	e01a      	b.n	8004a92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a5c:	4b29      	ldr	r3, [pc, #164]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a28      	ldr	r2, [pc, #160]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a68:	f7fd f898 	bl	8001b9c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a70:	f7fd f894 	bl	8001b9c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e31a      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x1dc>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d073      	beq.n	8004b86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x21c>
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab0:	4b14      	ldr	r3, [pc, #80]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d063      	beq.n	8004b84 <HAL_RCC_OscConfig+0x2f0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d15f      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e2f7      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e025      	b.n	8004b2c <HAL_RCC_OscConfig+0x298>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae8:	d114      	bne.n	8004b14 <HAL_RCC_OscConfig+0x280>
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a05      	ldr	r2, [pc, #20]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b03      	ldr	r3, [pc, #12]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a02      	ldr	r2, [pc, #8]	@ (8004b04 <HAL_RCC_OscConfig+0x270>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e013      	b.n	8004b2c <HAL_RCC_OscConfig+0x298>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	0800b484 	.word	0x0800b484
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	20000004 	.word	0x20000004
 8004b14:	4ba0      	ldr	r3, [pc, #640]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a9f      	ldr	r2, [pc, #636]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b9d      	ldr	r3, [pc, #628]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a9c      	ldr	r2, [pc, #624]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d013      	beq.n	8004b5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fd f832 	bl	8001b9c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fd f82e 	bl	8001b9c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	@ 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e2b4      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4e:	4b92      	ldr	r3, [pc, #584]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x2a8>
 8004b5a:	e014      	b.n	8004b86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fd f81e 	bl	8001b9c <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fd f81a 	bl	8001b9c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e2a0      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b76:	4b88      	ldr	r3, [pc, #544]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x2d0>
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d060      	beq.n	8004c54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d005      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x310>
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d119      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d116      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_OscConfig+0x328>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e27d      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b76      	ldr	r3, [pc, #472]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	4973      	ldr	r1, [pc, #460]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd0:	e040      	b.n	8004c54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d023      	beq.n	8004c22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bda:	4b6f      	ldr	r3, [pc, #444]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6e      	ldr	r2, [pc, #440]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be6:	f7fc ffd9 	bl	8001b9c <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bee:	f7fc ffd5 	bl	8001b9c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e25b      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c00:	4b65      	ldr	r3, [pc, #404]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0c:	4b62      	ldr	r3, [pc, #392]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	495f      	ldr	r1, [pc, #380]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	e018      	b.n	8004c54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c22:	4b5d      	ldr	r3, [pc, #372]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a5c      	ldr	r2, [pc, #368]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fc ffb5 	bl	8001b9c <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c36:	f7fc ffb1 	bl	8001b9c <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e237      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c48:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f0      	bne.n	8004c36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03c      	beq.n	8004cda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01c      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c68:	4b4b      	ldr	r3, [pc, #300]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fc ff90 	bl	8001b9c <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c80:	f7fc ff8c 	bl	8001b9c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e212      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c92:	4b41      	ldr	r3, [pc, #260]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ef      	beq.n	8004c80 <HAL_RCC_OscConfig+0x3ec>
 8004ca0:	e01b      	b.n	8004cda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fc ff73 	bl	8001b9c <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fc ff6f 	bl	8001b9c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e1f5      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ccc:	4b32      	ldr	r3, [pc, #200]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1ef      	bne.n	8004cba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80a6 	beq.w	8004e34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cec:	4b2a      	ldr	r3, [pc, #168]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10d      	bne.n	8004d14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfc:	4a26      	ldr	r2, [pc, #152]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d04:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d10:	2301      	movs	r3, #1
 8004d12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d14:	4b21      	ldr	r3, [pc, #132]	@ (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d118      	bne.n	8004d52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d20:	4b1e      	ldr	r3, [pc, #120]	@ (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2c:	f7fc ff36 	bl	8001b9c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d34:	f7fc ff32 	bl	8001b9c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e1b8      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d46:	4b15      	ldr	r3, [pc, #84]	@ (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d108      	bne.n	8004d6c <HAL_RCC_OscConfig+0x4d8>
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d60:	4a0d      	ldr	r2, [pc, #52]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d6a:	e029      	b.n	8004dc0 <HAL_RCC_OscConfig+0x52c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d115      	bne.n	8004da0 <HAL_RCC_OscConfig+0x50c>
 8004d74:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	4a07      	ldr	r2, [pc, #28]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004d7c:	f043 0304 	orr.w	r3, r3, #4
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d84:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	4a03      	ldr	r2, [pc, #12]	@ (8004d98 <HAL_RCC_OscConfig+0x504>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d94:	e014      	b.n	8004dc0 <HAL_RCC_OscConfig+0x52c>
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	4b9d      	ldr	r3, [pc, #628]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da6:	4a9c      	ldr	r2, [pc, #624]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004db0:	4b99      	ldr	r3, [pc, #612]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	4a98      	ldr	r2, [pc, #608]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004db8:	f023 0304 	bic.w	r3, r3, #4
 8004dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d016      	beq.n	8004df6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fc fee8 	bl	8001b9c <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fc fee4 	bl	8001b9c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e168      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de6:	4b8c      	ldr	r3, [pc, #560]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ed      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x53c>
 8004df4:	e015      	b.n	8004e22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fc fed1 	bl	8001b9c <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fc fecd 	bl	8001b9c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e151      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e14:	4b80      	ldr	r3, [pc, #512]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ed      	bne.n	8004dfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d105      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e28:	4b7b      	ldr	r3, [pc, #492]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	4a7a      	ldr	r2, [pc, #488]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d03c      	beq.n	8004eba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01c      	beq.n	8004e82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e48:	4b73      	ldr	r3, [pc, #460]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e4e:	4a72      	ldr	r2, [pc, #456]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fc fea0 	bl	8001b9c <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e60:	f7fc fe9c 	bl	8001b9c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e122      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e72:	4b69      	ldr	r3, [pc, #420]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ef      	beq.n	8004e60 <HAL_RCC_OscConfig+0x5cc>
 8004e80:	e01b      	b.n	8004eba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e82:	4b65      	ldr	r3, [pc, #404]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e88:	4a63      	ldr	r2, [pc, #396]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fc fe83 	bl	8001b9c <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e9a:	f7fc fe7f 	bl	8001b9c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e105      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eac:	4b5a      	ldr	r3, [pc, #360]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ef      	bne.n	8004e9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80f9 	beq.w	80050b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	f040 80cf 	bne.w	800506c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ece:	4b52      	ldr	r3, [pc, #328]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0203 	and.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d12c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	3b01      	subs	r3, #1
 8004eee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d123      	bne.n	8004f3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d11b      	bne.n	8004f3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d113      	bne.n	8004f3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d109      	bne.n	8004f3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d071      	beq.n	8005020 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d068      	beq.n	8005014 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f42:	4b35      	ldr	r3, [pc, #212]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f4e:	4b32      	ldr	r3, [pc, #200]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0ac      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2d      	ldr	r2, [pc, #180]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004f64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f6a:	f7fc fe17 	bl	8001b9c <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f72:	f7fc fe13 	bl	8001b9c <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e099      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f84:	4b24      	ldr	r3, [pc, #144]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f90:	4b21      	ldr	r3, [pc, #132]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	4b21      	ldr	r3, [pc, #132]	@ (800501c <HAL_RCC_OscConfig+0x788>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004faa:	0212      	lsls	r2, r2, #8
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fb2:	0852      	lsrs	r2, r2, #1
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0552      	lsls	r2, r2, #21
 8004fb8:	4311      	orrs	r1, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004fbe:	0852      	lsrs	r2, r2, #1
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	0652      	lsls	r2, r2, #25
 8004fc4:	4311      	orrs	r1, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fca:	06d2      	lsls	r2, r2, #27
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	4912      	ldr	r1, [pc, #72]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fd4:	4b10      	ldr	r3, [pc, #64]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8004fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fec:	f7fc fdd6 	bl	8001b9c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fc fdd2 	bl	8001b9c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e058      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <HAL_RCC_OscConfig+0x784>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005012:	e050      	b.n	80050b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e04f      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
 8005018:	40021000 	.word	0x40021000
 800501c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005020:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d144      	bne.n	80050b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800502c:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a23      	ldr	r2, [pc, #140]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 8005032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005036:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005038:	4b21      	ldr	r3, [pc, #132]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a20      	ldr	r2, [pc, #128]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 800503e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005042:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005044:	f7fc fdaa 	bl	8001b9c <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504c:	f7fc fda6 	bl	8001b9c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e02c      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505e:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x7b8>
 800506a:	e024      	b.n	80050b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d01f      	beq.n	80050b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 8005078:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800507c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fc fd8d 	bl	8001b9c <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005086:	f7fc fd89 	bl	8001b9c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e00f      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005098:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	4905      	ldr	r1, [pc, #20]	@ (80050c0 <HAL_RCC_OscConfig+0x82c>)
 80050aa:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <HAL_RCC_OscConfig+0x830>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	60cb      	str	r3, [r1, #12]
 80050b0:	e001      	b.n	80050b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000
 80050c4:	feeefffc 	.word	0xfeeefffc

080050c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e11d      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e0:	4b90      	ldr	r3, [pc, #576]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d910      	bls.n	8005110 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 020f 	bic.w	r2, r3, #15
 80050f6:	498b      	ldr	r1, [pc, #556]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fe:	4b89      	ldr	r3, [pc, #548]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e105      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d010      	beq.n	800513e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	4b81      	ldr	r3, [pc, #516]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005128:	429a      	cmp	r2, r3
 800512a:	d908      	bls.n	800513e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512c:	4b7e      	ldr	r3, [pc, #504]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	497b      	ldr	r1, [pc, #492]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d079      	beq.n	800523e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d11e      	bne.n	8005190 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005152:	4b75      	ldr	r3, [pc, #468]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0dc      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005162:	f000 fa09 	bl	8005578 <RCC_GetSysClockFreqFromPLLSource>
 8005166:	4603      	mov	r3, r0
 8005168:	4a70      	ldr	r2, [pc, #448]	@ (800532c <HAL_RCC_ClockConfig+0x264>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d946      	bls.n	80051fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800516e:	4b6e      	ldr	r3, [pc, #440]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d140      	bne.n	80051fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800517a:	4b6b      	ldr	r3, [pc, #428]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005182:	4a69      	ldr	r2, [pc, #420]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 8005184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005188:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800518a:	2380      	movs	r3, #128	@ 0x80
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e035      	b.n	80051fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d107      	bne.n	80051a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005198:	4b63      	ldr	r3, [pc, #396]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d115      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0b9      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0ad      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c0:	4b59      	ldr	r3, [pc, #356]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0a5      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80051d0:	f000 f8b4 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80051d4:	4603      	mov	r3, r0
 80051d6:	4a55      	ldr	r2, [pc, #340]	@ (800532c <HAL_RCC_ClockConfig+0x264>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d90f      	bls.n	80051fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80051dc:	4b52      	ldr	r3, [pc, #328]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80051f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 0203 	bic.w	r2, r3, #3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4947      	ldr	r1, [pc, #284]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fc fcc5 	bl	8001b9c <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005214:	e00a      	b.n	800522c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005216:	f7fc fcc1 	bl	8001b9c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e077      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522c:	4b3e      	ldr	r3, [pc, #248]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 020c 	and.w	r2, r3, #12
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	429a      	cmp	r2, r3
 800523c:	d1eb      	bne.n	8005216 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b80      	cmp	r3, #128	@ 0x80
 8005242:	d105      	bne.n	8005250 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005244:	4b38      	ldr	r3, [pc, #224]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4a37      	ldr	r2, [pc, #220]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800524a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800524e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d010      	beq.n	800527e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	4b31      	ldr	r3, [pc, #196]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005268:	429a      	cmp	r2, r3
 800526a:	d208      	bcs.n	800527e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b2e      	ldr	r3, [pc, #184]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	492b      	ldr	r1, [pc, #172]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800527e:	4b29      	ldr	r3, [pc, #164]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d210      	bcs.n	80052ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528c:	4b25      	ldr	r3, [pc, #148]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f023 020f 	bic.w	r2, r3, #15
 8005294:	4923      	ldr	r1, [pc, #140]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800529c:	4b21      	ldr	r3, [pc, #132]	@ (8005324 <HAL_RCC_ClockConfig+0x25c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e036      	b.n	800531c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	4918      	ldr	r1, [pc, #96]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052d8:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	4910      	ldr	r1, [pc, #64]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ec:	f000 f826 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <HAL_RCC_ClockConfig+0x260>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	490c      	ldr	r1, [pc, #48]	@ (8005330 <HAL_RCC_ClockConfig+0x268>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
 8005308:	4a0a      	ldr	r2, [pc, #40]	@ (8005334 <HAL_RCC_ClockConfig+0x26c>)
 800530a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800530c:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <HAL_RCC_ClockConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f7fc fbf3 	bl	8001afc <HAL_InitTick>
 8005316:	4603      	mov	r3, r0
 8005318:	73fb      	strb	r3, [r7, #15]

  return status;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40022000 	.word	0x40022000
 8005328:	40021000 	.word	0x40021000
 800532c:	04c4b400 	.word	0x04c4b400
 8005330:	0800b484 	.word	0x0800b484
 8005334:	20000000 	.word	0x20000000
 8005338:	20000004 	.word	0x20000004

0800533c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800533c:	b480      	push	{r7}
 800533e:	b089      	sub	sp, #36	@ 0x24
 8005340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	2300      	movs	r3, #0
 8005348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800534a:	4b3e      	ldr	r3, [pc, #248]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005354:	4b3b      	ldr	r3, [pc, #236]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x34>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b0c      	cmp	r3, #12
 8005368:	d121      	bne.n	80053ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d11e      	bne.n	80053ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005370:	4b34      	ldr	r3, [pc, #208]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d107      	bne.n	800538c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800537c:	4b31      	ldr	r3, [pc, #196]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 800537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	e005      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800538c:	4b2d      	ldr	r3, [pc, #180]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005398:	4a2b      	ldr	r2, [pc, #172]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x10c>)
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10d      	bne.n	80053c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053ac:	e00a      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d102      	bne.n	80053ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053b4:	4b25      	ldr	r3, [pc, #148]	@ (800544c <HAL_RCC_GetSysClockFreq+0x110>)
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	e004      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053c0:	4b23      	ldr	r3, [pc, #140]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x114>)
 80053c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d134      	bne.n	8005434 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d003      	beq.n	80053e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d003      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0xac>
 80053e0:	e005      	b.n	80053ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053e2:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <HAL_RCC_GetSysClockFreq+0x110>)
 80053e4:	617b      	str	r3, [r7, #20]
      break;
 80053e6:	e005      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053e8:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ea:	617b      	str	r3, [r7, #20]
      break;
 80053ec:	e002      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	617b      	str	r3, [r7, #20]
      break;
 80053f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f4:	4b13      	ldr	r3, [pc, #76]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	3301      	adds	r3, #1
 8005400:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005402:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	fb03 f202 	mul.w	r2, r3, r2
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800541a:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x108>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	0e5b      	lsrs	r3, r3, #25
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	3301      	adds	r3, #1
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005434:	69bb      	ldr	r3, [r7, #24]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3724      	adds	r7, #36	@ 0x24
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000
 8005448:	0800b49c 	.word	0x0800b49c
 800544c:	00f42400 	.word	0x00f42400
 8005450:	007a1200 	.word	0x007a1200

08005454 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <HAL_RCC_GetHCLKFreq+0x14>)
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000000 	.word	0x20000000

0800546c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005470:	f7ff fff0 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4904      	ldr	r1, [pc, #16]	@ (8005494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40021000 	.word	0x40021000
 8005494:	0800b494 	.word	0x0800b494

08005498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800549c:	f7ff ffda 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0adb      	lsrs	r3, r3, #11
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4904      	ldr	r1, [pc, #16]	@ (80054c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021000 	.word	0x40021000
 80054c0:	0800b494 	.word	0x0800b494

080054c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054d0:	4b27      	ldr	r3, [pc, #156]	@ (8005570 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054dc:	f7ff f916 	bl	800470c <HAL_PWREx_GetVoltageRange>
 80054e0:	6178      	str	r0, [r7, #20]
 80054e2:	e014      	b.n	800550e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054e4:	4b22      	ldr	r3, [pc, #136]	@ (8005570 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e8:	4a21      	ldr	r2, [pc, #132]	@ (8005570 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005570 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054fc:	f7ff f906 	bl	800470c <HAL_PWREx_GetVoltageRange>
 8005500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005502:	4b1b      	ldr	r3, [pc, #108]	@ (8005570 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	4a1a      	ldr	r2, [pc, #104]	@ (8005570 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800550c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005514:	d10b      	bne.n	800552e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b80      	cmp	r3, #128	@ 0x80
 800551a:	d913      	bls.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005520:	d902      	bls.n	8005528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005522:	2302      	movs	r3, #2
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e00d      	b.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005528:	2301      	movs	r3, #1
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e00a      	b.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b7f      	cmp	r3, #127	@ 0x7f
 8005532:	d902      	bls.n	800553a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005534:	2302      	movs	r3, #2
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	e004      	b.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b70      	cmp	r3, #112	@ 0x70
 800553e:	d101      	bne.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005540:	2301      	movs	r3, #1
 8005542:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005544:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 020f 	bic.w	r2, r3, #15
 800554c:	4909      	ldr	r1, [pc, #36]	@ (8005574 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005554:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	429a      	cmp	r2, r3
 8005560:	d001      	beq.n	8005566 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40021000 	.word	0x40021000
 8005574:	40022000 	.word	0x40022000

08005578 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800557e:	4b2d      	ldr	r3, [pc, #180]	@ (8005634 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b03      	cmp	r3, #3
 800558c:	d00b      	beq.n	80055a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d825      	bhi.n	80055e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d008      	beq.n	80055ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d11f      	bne.n	80055e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80055a0:	4b25      	ldr	r3, [pc, #148]	@ (8005638 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055a2:	613b      	str	r3, [r7, #16]
    break;
 80055a4:	e01f      	b.n	80055e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80055a6:	4b25      	ldr	r3, [pc, #148]	@ (800563c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80055a8:	613b      	str	r3, [r7, #16]
    break;
 80055aa:	e01c      	b.n	80055e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055ac:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005634 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e005      	b.n	80055d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005634 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80055d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055dc:	613b      	str	r3, [r7, #16]
    break;
 80055de:	e002      	b.n	80055e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
    break;
 80055e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055e6:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	3301      	adds	r3, #1
 80055f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	fb03 f202 	mul.w	r2, r3, r2
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	fbb2 f3f3 	udiv	r3, r2, r3
 800560a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800560c:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	0e5b      	lsrs	r3, r3, #25
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	3301      	adds	r3, #1
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005626:	683b      	ldr	r3, [r7, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40021000 	.word	0x40021000
 8005638:	00f42400 	.word	0x00f42400
 800563c:	007a1200 	.word	0x007a1200
 8005640:	0800b49c 	.word	0x0800b49c

08005644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800564c:	2300      	movs	r3, #0
 800564e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005650:	2300      	movs	r3, #0
 8005652:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800565c:	2b00      	cmp	r3, #0
 800565e:	d040      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005664:	2b80      	cmp	r3, #128	@ 0x80
 8005666:	d02a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005668:	2b80      	cmp	r3, #128	@ 0x80
 800566a:	d825      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800566c:	2b60      	cmp	r3, #96	@ 0x60
 800566e:	d026      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005670:	2b60      	cmp	r3, #96	@ 0x60
 8005672:	d821      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005674:	2b40      	cmp	r3, #64	@ 0x40
 8005676:	d006      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005678:	2b40      	cmp	r3, #64	@ 0x40
 800567a:	d81d      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005680:	2b20      	cmp	r3, #32
 8005682:	d010      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005684:	e018      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005686:	4b89      	ldr	r3, [pc, #548]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	4a88      	ldr	r2, [pc, #544]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005690:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005692:	e015      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fb02 	bl	8005ca4 <RCCEx_PLLSAI1_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056a4:	e00c      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3320      	adds	r3, #32
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fbed 	bl	8005e8c <RCCEx_PLLSAI2_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056b6:	e003      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	74fb      	strb	r3, [r7, #19]
      break;
 80056bc:	e000      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80056be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c6:	4b79      	ldr	r3, [pc, #484]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056cc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d4:	4975      	ldr	r1, [pc, #468]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80056dc:	e001      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d047      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f6:	d030      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fc:	d82a      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005702:	d02a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005708:	d824      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800570a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800570e:	d008      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005714:	d81e      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800571a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800571e:	d010      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005720:	e018      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005722:	4b62      	ldr	r3, [pc, #392]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	4a61      	ldr	r2, [pc, #388]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800572c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800572e:	e015      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fab4 	bl	8005ca4 <RCCEx_PLLSAI1_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005740:	e00c      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3320      	adds	r3, #32
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fb9f 	bl	8005e8c <RCCEx_PLLSAI2_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005752:	e003      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	74fb      	strb	r3, [r7, #19]
      break;
 8005758:	e000      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800575a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005762:	4b52      	ldr	r3, [pc, #328]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005764:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005768:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	494e      	ldr	r1, [pc, #312]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005778:	e001      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 809f 	beq.w	80058ca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800578c:	2300      	movs	r3, #0
 800578e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005790:	4b46      	ldr	r3, [pc, #280]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80057a0:	2300      	movs	r3, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	4b41      	ldr	r3, [pc, #260]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057aa:	4a40      	ldr	r2, [pc, #256]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057b2:	4b3e      	ldr	r3, [pc, #248]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057be:	2301      	movs	r3, #1
 80057c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057c2:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a3a      	ldr	r2, [pc, #232]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ce:	f7fc f9e5 	bl	8001b9c <HAL_GetTick>
 80057d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057d4:	e009      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d6:	f7fc f9e1 	bl	8001b9c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d902      	bls.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	74fb      	strb	r3, [r7, #19]
        break;
 80057e8:	e005      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057ea:	4b31      	ldr	r3, [pc, #196]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0ef      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d15b      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057fc:	4b2b      	ldr	r3, [pc, #172]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005806:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01f      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	429a      	cmp	r2, r3
 8005818:	d019      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800581a:	4b24      	ldr	r3, [pc, #144]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800581c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005824:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005826:	4b21      	ldr	r3, [pc, #132]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582c:	4a1f      	ldr	r2, [pc, #124]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005836:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583c:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800583e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005842:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005846:	4a19      	ldr	r2, [pc, #100]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d016      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005858:	f7fc f9a0 	bl	8001b9c <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585e:	e00b      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005860:	f7fc f99c 	bl	8001b9c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d902      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	74fb      	strb	r3, [r7, #19]
            break;
 8005876:	e006      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ec      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10c      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800588c:	4b07      	ldr	r3, [pc, #28]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005892:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589c:	4903      	ldr	r1, [pc, #12]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058a4:	e008      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	74bb      	strb	r3, [r7, #18]
 80058aa:	e005      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b8:	7c7b      	ldrb	r3, [r7, #17]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d105      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058be:	4ba0      	ldr	r3, [pc, #640]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c2:	4a9f      	ldr	r2, [pc, #636]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058d6:	4b9a      	ldr	r3, [pc, #616]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058dc:	f023 0203 	bic.w	r2, r3, #3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e4:	4996      	ldr	r1, [pc, #600]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058f8:	4b91      	ldr	r3, [pc, #580]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fe:	f023 020c 	bic.w	r2, r3, #12
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	498e      	ldr	r1, [pc, #568]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800591a:	4b89      	ldr	r3, [pc, #548]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005928:	4985      	ldr	r1, [pc, #532]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800593c:	4b80      	ldr	r3, [pc, #512]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005942:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594a:	497d      	ldr	r1, [pc, #500]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800595e:	4b78      	ldr	r3, [pc, #480]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596c:	4974      	ldr	r1, [pc, #464]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005980:	4b6f      	ldr	r3, [pc, #444]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005986:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598e:	496c      	ldr	r1, [pc, #432]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a2:	4b67      	ldr	r3, [pc, #412]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b0:	4963      	ldr	r1, [pc, #396]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059d2:	495b      	ldr	r1, [pc, #364]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e6:	4b56      	ldr	r3, [pc, #344]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f4:	4952      	ldr	r1, [pc, #328]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a08:	4b4d      	ldr	r3, [pc, #308]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a16:	494a      	ldr	r1, [pc, #296]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a2a:	4b45      	ldr	r3, [pc, #276]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a38:	4941      	ldr	r1, [pc, #260]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a52:	f023 0203 	bic.w	r2, r3, #3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a5a:	4939      	ldr	r1, [pc, #228]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d028      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a6e:	4b34      	ldr	r3, [pc, #208]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7c:	4930      	ldr	r1, [pc, #192]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	4a2b      	ldr	r2, [pc, #172]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a98:	60d3      	str	r3, [r2, #12]
 8005a9a:	e011      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	2101      	movs	r1, #1
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 f8f9 	bl	8005ca4 <RCCEx_PLLSAI1_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ab6:	7cfb      	ldrb	r3, [r7, #19]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005abc:	7cfb      	ldrb	r3, [r7, #19]
 8005abe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d04d      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ad0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ad4:	d108      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005adc:	4a18      	ldr	r2, [pc, #96]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ae2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005ae6:	e012      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ae8:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aee:	4a14      	ldr	r2, [pc, #80]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005af4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b06:	490e      	ldr	r1, [pc, #56]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b16:	d106      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b18:	4b09      	ldr	r3, [pc, #36]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4a08      	ldr	r2, [pc, #32]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b22:	60d3      	str	r3, [r2, #12]
 8005b24:	e020      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b30:	4b03      	ldr	r3, [pc, #12]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a02      	ldr	r2, [pc, #8]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b3a:	60d3      	str	r3, [r2, #12]
 8005b3c:	e014      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	2101      	movs	r1, #1
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f8a5 	bl	8005ca4 <RCCEx_PLLSAI1_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d028      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b74:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b82:	4947      	ldr	r1, [pc, #284]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b94:	4b42      	ldr	r3, [pc, #264]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4a41      	ldr	r2, [pc, #260]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b9e:	60d3      	str	r3, [r2, #12]
 8005ba0:	e011      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ba6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005baa:	d10c      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f876 	bl	8005ca4 <RCCEx_PLLSAI1_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005bc2:	7cfb      	ldrb	r3, [r7, #19]
 8005bc4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01e      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bd2:	4b33      	ldr	r3, [pc, #204]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be2:	492f      	ldr	r1, [pc, #188]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f851 	bl	8005ca4 <RCCEx_PLLSAI1_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c06:	7cfb      	ldrb	r3, [r7, #19]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005c0c:	7cfb      	ldrb	r3, [r7, #19]
 8005c0e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c1c:	4b20      	ldr	r3, [pc, #128]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c22:	f023 0204 	bic.w	r2, r3, #4
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c2c:	491c      	ldr	r1, [pc, #112]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c40:	4b17      	ldr	r3, [pc, #92]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c46:	f023 0218 	bic.w	r2, r3, #24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c50:	4913      	ldr	r1, [pc, #76]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d017      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c64:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c74:	490a      	ldr	r1, [pc, #40]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c86:	d105      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c94:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000

08005ca4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cb2:	4b72      	ldr	r3, [pc, #456]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0203 	and.w	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d103      	bne.n	8005cd6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d142      	bne.n	8005d5c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
 8005cda:	e03f      	b.n	8005d5c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d018      	beq.n	8005d16 <RCCEx_PLLSAI1_Config+0x72>
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d825      	bhi.n	8005d34 <RCCEx_PLLSAI1_Config+0x90>
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d002      	beq.n	8005cf2 <RCCEx_PLLSAI1_Config+0x4e>
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d009      	beq.n	8005d04 <RCCEx_PLLSAI1_Config+0x60>
 8005cf0:	e020      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cf2:	4b62      	ldr	r3, [pc, #392]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11d      	bne.n	8005d3a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d02:	e01a      	b.n	8005d3a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d04:	4b5d      	ldr	r3, [pc, #372]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d116      	bne.n	8005d3e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d14:	e013      	b.n	8005d3e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d16:	4b59      	ldr	r3, [pc, #356]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d22:	4b56      	ldr	r3, [pc, #344]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d32:	e006      	b.n	8005d42 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
      break;
 8005d38:	e004      	b.n	8005d44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e002      	b.n	8005d44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d42:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d108      	bne.n	8005d5c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f023 0203 	bic.w	r2, r3, #3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4949      	ldr	r1, [pc, #292]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 8086 	bne.w	8005e70 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d64:	4b45      	ldr	r3, [pc, #276]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a44      	ldr	r2, [pc, #272]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d70:	f7fb ff14 	bl	8001b9c <HAL_GetTick>
 8005d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d76:	e009      	b.n	8005d8c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d78:	f7fb ff10 	bl	8001b9c <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d902      	bls.n	8005d8c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	73fb      	strb	r3, [r7, #15]
        break;
 8005d8a:	e005      	b.n	8005d98 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1ef      	bne.n	8005d78 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d168      	bne.n	8005e70 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d113      	bne.n	8005dcc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005da4:	4b35      	ldr	r3, [pc, #212]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	4b35      	ldr	r3, [pc, #212]	@ (8005e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6892      	ldr	r2, [r2, #8]
 8005db0:	0211      	lsls	r1, r2, #8
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68d2      	ldr	r2, [r2, #12]
 8005db6:	06d2      	lsls	r2, r2, #27
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6852      	ldr	r2, [r2, #4]
 8005dbe:	3a01      	subs	r2, #1
 8005dc0:	0112      	lsls	r2, r2, #4
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	492d      	ldr	r1, [pc, #180]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]
 8005dca:	e02d      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d115      	bne.n	8005dfe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8005e84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6892      	ldr	r2, [r2, #8]
 8005dde:	0211      	lsls	r1, r2, #8
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6912      	ldr	r2, [r2, #16]
 8005de4:	0852      	lsrs	r2, r2, #1
 8005de6:	3a01      	subs	r2, #1
 8005de8:	0552      	lsls	r2, r2, #21
 8005dea:	4311      	orrs	r1, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6852      	ldr	r2, [r2, #4]
 8005df0:	3a01      	subs	r2, #1
 8005df2:	0112      	lsls	r2, r2, #4
 8005df4:	430a      	orrs	r2, r1
 8005df6:	4921      	ldr	r1, [pc, #132]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	610b      	str	r3, [r1, #16]
 8005dfc:	e014      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	4b21      	ldr	r3, [pc, #132]	@ (8005e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6892      	ldr	r2, [r2, #8]
 8005e0a:	0211      	lsls	r1, r2, #8
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6952      	ldr	r2, [r2, #20]
 8005e10:	0852      	lsrs	r2, r2, #1
 8005e12:	3a01      	subs	r2, #1
 8005e14:	0652      	lsls	r2, r2, #25
 8005e16:	4311      	orrs	r1, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6852      	ldr	r2, [r2, #4]
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	0112      	lsls	r2, r2, #4
 8005e20:	430a      	orrs	r2, r1
 8005e22:	4916      	ldr	r1, [pc, #88]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e28:	4b14      	ldr	r3, [pc, #80]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a13      	ldr	r2, [pc, #76]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e34:	f7fb feb2 	bl	8001b9c <HAL_GetTick>
 8005e38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e3a:	e009      	b.n	8005e50 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e3c:	f7fb feae 	bl	8001b9c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d902      	bls.n	8005e50 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	73fb      	strb	r3, [r7, #15]
          break;
 8005e4e:	e005      	b.n	8005e5c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e50:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0ef      	beq.n	8005e3c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	4904      	ldr	r1, [pc, #16]	@ (8005e7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	07ff800f 	.word	0x07ff800f
 8005e84:	ff9f800f 	.word	0xff9f800f
 8005e88:	f9ff800f 	.word	0xf9ff800f

08005e8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e9a:	4b72      	ldr	r3, [pc, #456]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0203 	and.w	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d103      	bne.n	8005ebe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d142      	bne.n	8005f44 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
 8005ec2:	e03f      	b.n	8005f44 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d018      	beq.n	8005efe <RCCEx_PLLSAI2_Config+0x72>
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d825      	bhi.n	8005f1c <RCCEx_PLLSAI2_Config+0x90>
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d002      	beq.n	8005eda <RCCEx_PLLSAI2_Config+0x4e>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d009      	beq.n	8005eec <RCCEx_PLLSAI2_Config+0x60>
 8005ed8:	e020      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eda:	4b62      	ldr	r3, [pc, #392]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11d      	bne.n	8005f22 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eea:	e01a      	b.n	8005f22 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eec:	4b5d      	ldr	r3, [pc, #372]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d116      	bne.n	8005f26 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005efc:	e013      	b.n	8005f26 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005efe:	4b59      	ldr	r3, [pc, #356]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10f      	bne.n	8005f2a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f0a:	4b56      	ldr	r3, [pc, #344]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f1a:	e006      	b.n	8005f2a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	e004      	b.n	8005f2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005f32:	4b4c      	ldr	r3, [pc, #304]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f023 0203 	bic.w	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4949      	ldr	r1, [pc, #292]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 8086 	bne.w	8006058 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f4c:	4b45      	ldr	r3, [pc, #276]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a44      	ldr	r2, [pc, #272]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f58:	f7fb fe20 	bl	8001b9c <HAL_GetTick>
 8005f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f5e:	e009      	b.n	8005f74 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f60:	f7fb fe1c 	bl	8001b9c <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d902      	bls.n	8005f74 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	73fb      	strb	r3, [r7, #15]
        break;
 8005f72:	e005      	b.n	8005f80 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f74:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ef      	bne.n	8005f60 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d168      	bne.n	8006058 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d113      	bne.n	8005fb4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f8c:	4b35      	ldr	r3, [pc, #212]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	4b35      	ldr	r3, [pc, #212]	@ (8006068 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6892      	ldr	r2, [r2, #8]
 8005f98:	0211      	lsls	r1, r2, #8
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	06d2      	lsls	r2, r2, #27
 8005fa0:	4311      	orrs	r1, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6852      	ldr	r2, [r2, #4]
 8005fa6:	3a01      	subs	r2, #1
 8005fa8:	0112      	lsls	r2, r2, #4
 8005faa:	430a      	orrs	r2, r1
 8005fac:	492d      	ldr	r1, [pc, #180]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	614b      	str	r3, [r1, #20]
 8005fb2:	e02d      	b.n	8006010 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d115      	bne.n	8005fe6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fba:	4b2a      	ldr	r3, [pc, #168]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800606c <RCCEx_PLLSAI2_Config+0x1e0>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6892      	ldr	r2, [r2, #8]
 8005fc6:	0211      	lsls	r1, r2, #8
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6912      	ldr	r2, [r2, #16]
 8005fcc:	0852      	lsrs	r2, r2, #1
 8005fce:	3a01      	subs	r2, #1
 8005fd0:	0552      	lsls	r2, r2, #21
 8005fd2:	4311      	orrs	r1, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	3a01      	subs	r2, #1
 8005fda:	0112      	lsls	r2, r2, #4
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	4921      	ldr	r1, [pc, #132]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	614b      	str	r3, [r1, #20]
 8005fe4:	e014      	b.n	8006010 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	4b21      	ldr	r3, [pc, #132]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6892      	ldr	r2, [r2, #8]
 8005ff2:	0211      	lsls	r1, r2, #8
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6952      	ldr	r2, [r2, #20]
 8005ff8:	0852      	lsrs	r2, r2, #1
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	0652      	lsls	r2, r2, #25
 8005ffe:	4311      	orrs	r1, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	3a01      	subs	r2, #1
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	430a      	orrs	r2, r1
 800600a:	4916      	ldr	r1, [pc, #88]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 800600c:	4313      	orrs	r3, r2
 800600e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006010:	4b14      	ldr	r3, [pc, #80]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a13      	ldr	r2, [pc, #76]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fb fdbe 	bl	8001b9c <HAL_GetTick>
 8006020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006022:	e009      	b.n	8006038 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006024:	f7fb fdba 	bl	8001b9c <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d902      	bls.n	8006038 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	73fb      	strb	r3, [r7, #15]
          break;
 8006036:	e005      	b.n	8006044 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006038:	4b0a      	ldr	r3, [pc, #40]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0ef      	beq.n	8006024 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800604a:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	4904      	ldr	r1, [pc, #16]	@ (8006064 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006054:	4313      	orrs	r3, r2
 8006056:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	07ff800f 	.word	0x07ff800f
 800606c:	ff9f800f 	.word	0xff9f800f
 8006070:	f9ff800f 	.word	0xf9ff800f

08006074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e042      	b.n	800610c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fb fb7f 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2224      	movs	r2, #36	@ 0x24
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fb24 	bl	800670c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f825 	bl	8006114 <UART_SetConfig>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e01b      	b.n	800610c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fba3 	bl	8006850 <UART_CheckIdleState>
 800610a:	4603      	mov	r3, r0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006118:	b08c      	sub	sp, #48	@ 0x30
 800611a:	af00      	add	r7, sp, #0
 800611c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	431a      	orrs	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4313      	orrs	r3, r2
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4baa      	ldr	r3, [pc, #680]	@ (80063ec <UART_SetConfig+0x2d8>)
 8006144:	4013      	ands	r3, r2
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800614c:	430b      	orrs	r3, r1
 800614e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a9f      	ldr	r2, [pc, #636]	@ (80063f0 <UART_SetConfig+0x2dc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800617c:	4313      	orrs	r3, r2
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800618a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006194:	430b      	orrs	r3, r1
 8006196:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	f023 010f 	bic.w	r1, r3, #15
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a90      	ldr	r2, [pc, #576]	@ (80063f4 <UART_SetConfig+0x2e0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d125      	bne.n	8006204 <UART_SetConfig+0xf0>
 80061b8:	4b8f      	ldr	r3, [pc, #572]	@ (80063f8 <UART_SetConfig+0x2e4>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d81a      	bhi.n	80061fc <UART_SetConfig+0xe8>
 80061c6:	a201      	add	r2, pc, #4	@ (adr r2, 80061cc <UART_SetConfig+0xb8>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061ed 	.word	0x080061ed
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e116      	b.n	8006412 <UART_SetConfig+0x2fe>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e112      	b.n	8006412 <UART_SetConfig+0x2fe>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f2:	e10e      	b.n	8006412 <UART_SetConfig+0x2fe>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fa:	e10a      	b.n	8006412 <UART_SetConfig+0x2fe>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e106      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a7c      	ldr	r2, [pc, #496]	@ (80063fc <UART_SetConfig+0x2e8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d138      	bne.n	8006280 <UART_SetConfig+0x16c>
 800620e:	4b7a      	ldr	r3, [pc, #488]	@ (80063f8 <UART_SetConfig+0x2e4>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d82d      	bhi.n	8006278 <UART_SetConfig+0x164>
 800621c:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <UART_SetConfig+0x110>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006259 	.word	0x08006259
 8006228:	08006279 	.word	0x08006279
 800622c:	08006279 	.word	0x08006279
 8006230:	08006279 	.word	0x08006279
 8006234:	08006269 	.word	0x08006269
 8006238:	08006279 	.word	0x08006279
 800623c:	08006279 	.word	0x08006279
 8006240:	08006279 	.word	0x08006279
 8006244:	08006261 	.word	0x08006261
 8006248:	08006279 	.word	0x08006279
 800624c:	08006279 	.word	0x08006279
 8006250:	08006279 	.word	0x08006279
 8006254:	08006271 	.word	0x08006271
 8006258:	2300      	movs	r3, #0
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e0d8      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006260:	2302      	movs	r3, #2
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006266:	e0d4      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e0d0      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e0cc      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e0c8      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a5e      	ldr	r2, [pc, #376]	@ (8006400 <UART_SetConfig+0x2ec>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d125      	bne.n	80062d6 <UART_SetConfig+0x1c2>
 800628a:	4b5b      	ldr	r3, [pc, #364]	@ (80063f8 <UART_SetConfig+0x2e4>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006290:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006294:	2b30      	cmp	r3, #48	@ 0x30
 8006296:	d016      	beq.n	80062c6 <UART_SetConfig+0x1b2>
 8006298:	2b30      	cmp	r3, #48	@ 0x30
 800629a:	d818      	bhi.n	80062ce <UART_SetConfig+0x1ba>
 800629c:	2b20      	cmp	r3, #32
 800629e:	d00a      	beq.n	80062b6 <UART_SetConfig+0x1a2>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d814      	bhi.n	80062ce <UART_SetConfig+0x1ba>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <UART_SetConfig+0x19a>
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d008      	beq.n	80062be <UART_SetConfig+0x1aa>
 80062ac:	e00f      	b.n	80062ce <UART_SetConfig+0x1ba>
 80062ae:	2300      	movs	r3, #0
 80062b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b4:	e0ad      	b.n	8006412 <UART_SetConfig+0x2fe>
 80062b6:	2302      	movs	r3, #2
 80062b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062bc:	e0a9      	b.n	8006412 <UART_SetConfig+0x2fe>
 80062be:	2304      	movs	r3, #4
 80062c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c4:	e0a5      	b.n	8006412 <UART_SetConfig+0x2fe>
 80062c6:	2308      	movs	r3, #8
 80062c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062cc:	e0a1      	b.n	8006412 <UART_SetConfig+0x2fe>
 80062ce:	2310      	movs	r3, #16
 80062d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d4:	e09d      	b.n	8006412 <UART_SetConfig+0x2fe>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a4a      	ldr	r2, [pc, #296]	@ (8006404 <UART_SetConfig+0x2f0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d125      	bne.n	800632c <UART_SetConfig+0x218>
 80062e0:	4b45      	ldr	r3, [pc, #276]	@ (80063f8 <UART_SetConfig+0x2e4>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80062ec:	d016      	beq.n	800631c <UART_SetConfig+0x208>
 80062ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80062f0:	d818      	bhi.n	8006324 <UART_SetConfig+0x210>
 80062f2:	2b80      	cmp	r3, #128	@ 0x80
 80062f4:	d00a      	beq.n	800630c <UART_SetConfig+0x1f8>
 80062f6:	2b80      	cmp	r3, #128	@ 0x80
 80062f8:	d814      	bhi.n	8006324 <UART_SetConfig+0x210>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <UART_SetConfig+0x1f0>
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d008      	beq.n	8006314 <UART_SetConfig+0x200>
 8006302:	e00f      	b.n	8006324 <UART_SetConfig+0x210>
 8006304:	2300      	movs	r3, #0
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630a:	e082      	b.n	8006412 <UART_SetConfig+0x2fe>
 800630c:	2302      	movs	r3, #2
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006312:	e07e      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631a:	e07a      	b.n	8006412 <UART_SetConfig+0x2fe>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006322:	e076      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632a:	e072      	b.n	8006412 <UART_SetConfig+0x2fe>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a35      	ldr	r2, [pc, #212]	@ (8006408 <UART_SetConfig+0x2f4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d12a      	bne.n	800638c <UART_SetConfig+0x278>
 8006336:	4b30      	ldr	r3, [pc, #192]	@ (80063f8 <UART_SetConfig+0x2e4>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006344:	d01a      	beq.n	800637c <UART_SetConfig+0x268>
 8006346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800634a:	d81b      	bhi.n	8006384 <UART_SetConfig+0x270>
 800634c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006350:	d00c      	beq.n	800636c <UART_SetConfig+0x258>
 8006352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006356:	d815      	bhi.n	8006384 <UART_SetConfig+0x270>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <UART_SetConfig+0x250>
 800635c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006360:	d008      	beq.n	8006374 <UART_SetConfig+0x260>
 8006362:	e00f      	b.n	8006384 <UART_SetConfig+0x270>
 8006364:	2300      	movs	r3, #0
 8006366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636a:	e052      	b.n	8006412 <UART_SetConfig+0x2fe>
 800636c:	2302      	movs	r3, #2
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006372:	e04e      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800637a:	e04a      	b.n	8006412 <UART_SetConfig+0x2fe>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006382:	e046      	b.n	8006412 <UART_SetConfig+0x2fe>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638a:	e042      	b.n	8006412 <UART_SetConfig+0x2fe>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a17      	ldr	r2, [pc, #92]	@ (80063f0 <UART_SetConfig+0x2dc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d13a      	bne.n	800640c <UART_SetConfig+0x2f8>
 8006396:	4b18      	ldr	r3, [pc, #96]	@ (80063f8 <UART_SetConfig+0x2e4>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063a4:	d01a      	beq.n	80063dc <UART_SetConfig+0x2c8>
 80063a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063aa:	d81b      	bhi.n	80063e4 <UART_SetConfig+0x2d0>
 80063ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b0:	d00c      	beq.n	80063cc <UART_SetConfig+0x2b8>
 80063b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b6:	d815      	bhi.n	80063e4 <UART_SetConfig+0x2d0>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <UART_SetConfig+0x2b0>
 80063bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c0:	d008      	beq.n	80063d4 <UART_SetConfig+0x2c0>
 80063c2:	e00f      	b.n	80063e4 <UART_SetConfig+0x2d0>
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ca:	e022      	b.n	8006412 <UART_SetConfig+0x2fe>
 80063cc:	2302      	movs	r3, #2
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d2:	e01e      	b.n	8006412 <UART_SetConfig+0x2fe>
 80063d4:	2304      	movs	r3, #4
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063da:	e01a      	b.n	8006412 <UART_SetConfig+0x2fe>
 80063dc:	2308      	movs	r3, #8
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e2:	e016      	b.n	8006412 <UART_SetConfig+0x2fe>
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ea:	e012      	b.n	8006412 <UART_SetConfig+0x2fe>
 80063ec:	cfff69f3 	.word	0xcfff69f3
 80063f0:	40008000 	.word	0x40008000
 80063f4:	40013800 	.word	0x40013800
 80063f8:	40021000 	.word	0x40021000
 80063fc:	40004400 	.word	0x40004400
 8006400:	40004800 	.word	0x40004800
 8006404:	40004c00 	.word	0x40004c00
 8006408:	40005000 	.word	0x40005000
 800640c:	2310      	movs	r3, #16
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4aae      	ldr	r2, [pc, #696]	@ (80066d0 <UART_SetConfig+0x5bc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	f040 8097 	bne.w	800654c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800641e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006422:	2b08      	cmp	r3, #8
 8006424:	d823      	bhi.n	800646e <UART_SetConfig+0x35a>
 8006426:	a201      	add	r2, pc, #4	@ (adr r2, 800642c <UART_SetConfig+0x318>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006451 	.word	0x08006451
 8006430:	0800646f 	.word	0x0800646f
 8006434:	08006459 	.word	0x08006459
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800645f 	.word	0x0800645f
 8006440:	0800646f 	.word	0x0800646f
 8006444:	0800646f 	.word	0x0800646f
 8006448:	0800646f 	.word	0x0800646f
 800644c:	08006467 	.word	0x08006467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006450:	f7ff f80c 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8006454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006456:	e010      	b.n	800647a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006458:	4b9e      	ldr	r3, [pc, #632]	@ (80066d4 <UART_SetConfig+0x5c0>)
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800645c:	e00d      	b.n	800647a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645e:	f7fe ff6d 	bl	800533c <HAL_RCC_GetSysClockFreq>
 8006462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006464:	e009      	b.n	800647a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800646c:	e005      	b.n	800647a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8130 	beq.w	80066e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	4a94      	ldr	r2, [pc, #592]	@ (80066d8 <UART_SetConfig+0x5c4>)
 8006488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648c:	461a      	mov	r2, r3
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	fbb3 f3f2 	udiv	r3, r3, r2
 8006494:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	4413      	add	r3, r2
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d305      	bcc.n	80064b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d903      	bls.n	80064ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064b8:	e113      	b.n	80066e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	2200      	movs	r2, #0
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	60fa      	str	r2, [r7, #12]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	4a84      	ldr	r2, [pc, #528]	@ (80066d8 <UART_SetConfig+0x5c4>)
 80064c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2200      	movs	r2, #0
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064dc:	f7fa fbec 	bl	8000cb8 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4610      	mov	r0, r2
 80064e6:	4619      	mov	r1, r3
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	020b      	lsls	r3, r1, #8
 80064f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064f6:	0202      	lsls	r2, r0, #8
 80064f8:	6979      	ldr	r1, [r7, #20]
 80064fa:	6849      	ldr	r1, [r1, #4]
 80064fc:	0849      	lsrs	r1, r1, #1
 80064fe:	2000      	movs	r0, #0
 8006500:	460c      	mov	r4, r1
 8006502:	4605      	mov	r5, r0
 8006504:	eb12 0804 	adds.w	r8, r2, r4
 8006508:	eb43 0905 	adc.w	r9, r3, r5
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	469a      	mov	sl, r3
 8006514:	4693      	mov	fp, r2
 8006516:	4652      	mov	r2, sl
 8006518:	465b      	mov	r3, fp
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	f7fa fbcb 	bl	8000cb8 <__aeabi_uldivmod>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4613      	mov	r3, r2
 8006528:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006530:	d308      	bcc.n	8006544 <UART_SetConfig+0x430>
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006538:	d204      	bcs.n	8006544 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6a3a      	ldr	r2, [r7, #32]
 8006540:	60da      	str	r2, [r3, #12]
 8006542:	e0ce      	b.n	80066e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800654a:	e0ca      	b.n	80066e2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006554:	d166      	bne.n	8006624 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006556:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800655a:	2b08      	cmp	r3, #8
 800655c:	d827      	bhi.n	80065ae <UART_SetConfig+0x49a>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <UART_SetConfig+0x450>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006589 	.word	0x08006589
 8006568:	08006591 	.word	0x08006591
 800656c:	08006599 	.word	0x08006599
 8006570:	080065af 	.word	0x080065af
 8006574:	0800659f 	.word	0x0800659f
 8006578:	080065af 	.word	0x080065af
 800657c:	080065af 	.word	0x080065af
 8006580:	080065af 	.word	0x080065af
 8006584:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe ff70 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 800658c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800658e:	e014      	b.n	80065ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fe ff82 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 8006594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006596:	e010      	b.n	80065ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b4e      	ldr	r3, [pc, #312]	@ (80066d4 <UART_SetConfig+0x5c0>)
 800659a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800659c:	e00d      	b.n	80065ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fe fecd 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80065a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065a4:	e009      	b.n	80065ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065ac:	e005      	b.n	80065ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8090 	beq.w	80066e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c6:	4a44      	ldr	r2, [pc, #272]	@ (80066d8 <UART_SetConfig+0x5c4>)
 80065c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d4:	005a      	lsls	r2, r3, #1
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	441a      	add	r2, r3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d916      	bls.n	800661c <UART_SetConfig+0x508>
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f4:	d212      	bcs.n	800661c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f023 030f 	bic.w	r3, r3, #15
 80065fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	b29a      	uxth	r2, r3
 800660c:	8bfb      	ldrh	r3, [r7, #30]
 800660e:	4313      	orrs	r3, r2
 8006610:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	8bfa      	ldrh	r2, [r7, #30]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e062      	b.n	80066e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006622:	e05e      	b.n	80066e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006624:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006628:	2b08      	cmp	r3, #8
 800662a:	d828      	bhi.n	800667e <UART_SetConfig+0x56a>
 800662c:	a201      	add	r2, pc, #4	@ (adr r2, 8006634 <UART_SetConfig+0x520>)
 800662e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006632:	bf00      	nop
 8006634:	08006659 	.word	0x08006659
 8006638:	08006661 	.word	0x08006661
 800663c:	08006669 	.word	0x08006669
 8006640:	0800667f 	.word	0x0800667f
 8006644:	0800666f 	.word	0x0800666f
 8006648:	0800667f 	.word	0x0800667f
 800664c:	0800667f 	.word	0x0800667f
 8006650:	0800667f 	.word	0x0800667f
 8006654:	08006677 	.word	0x08006677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006658:	f7fe ff08 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 800665c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800665e:	e014      	b.n	800668a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006660:	f7fe ff1a 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 8006664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006666:	e010      	b.n	800668a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006668:	4b1a      	ldr	r3, [pc, #104]	@ (80066d4 <UART_SetConfig+0x5c0>)
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800666c:	e00d      	b.n	800668a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666e:	f7fe fe65 	bl	800533c <HAL_RCC_GetSysClockFreq>
 8006672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006674:	e009      	b.n	800668a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800667a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800667c:	e005      	b.n	800668a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006688:	bf00      	nop
    }

    if (pclk != 0U)
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d028      	beq.n	80066e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006694:	4a10      	ldr	r2, [pc, #64]	@ (80066d8 <UART_SetConfig+0x5c4>)
 8006696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800669a:	461a      	mov	r2, r3
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	fbb3 f2f2 	udiv	r2, r3, r2
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	441a      	add	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	d910      	bls.n	80066dc <UART_SetConfig+0x5c8>
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c0:	d20c      	bcs.n	80066dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60da      	str	r2, [r3, #12]
 80066cc:	e009      	b.n	80066e2 <UART_SetConfig+0x5ce>
 80066ce:	bf00      	nop
 80066d0:	40008000 	.word	0x40008000
 80066d4:	00f42400 	.word	0x00f42400
 80066d8:	0800b4cc 	.word	0x0800b4cc
      }
      else
      {
        ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2200      	movs	r2, #0
 80066f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2200      	movs	r2, #0
 80066fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006702:	4618      	mov	r0, r3
 8006704:	3730      	adds	r7, #48	@ 0x30
 8006706:	46bd      	mov	sp, r7
 8006708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800670c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01a      	beq.n	8006822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800680a:	d10a      	bne.n	8006822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	605a      	str	r2, [r3, #4]
  }
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b098      	sub	sp, #96	@ 0x60
 8006854:	af02      	add	r7, sp, #8
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006860:	f7fb f99c 	bl	8001b9c <HAL_GetTick>
 8006864:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b08      	cmp	r3, #8
 8006872:	d12f      	bne.n	80068d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800687c:	2200      	movs	r2, #0
 800687e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f88e 	bl	80069a4 <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d022      	beq.n	80068d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800689c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e063      	b.n	800699c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d149      	bne.n	8006976 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ea:	2200      	movs	r2, #0
 80068ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f857 	bl	80069a4 <UART_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d03c      	beq.n	8006976 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	623b      	str	r3, [r7, #32]
   return(result);
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800691a:	633b      	str	r3, [r7, #48]	@ 0x30
 800691c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e6      	bne.n	80068fc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	60fb      	str	r3, [r7, #12]
   return(result);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800694e:	61fa      	str	r2, [r7, #28]
 8006950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	69b9      	ldr	r1, [r7, #24]
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	617b      	str	r3, [r7, #20]
   return(result);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e5      	bne.n	800692e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e012      	b.n	800699c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3758      	adds	r7, #88	@ 0x58
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b4:	e04f      	b.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069bc:	d04b      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069be:	f7fb f8ed 	bl	8001b9c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e04e      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d037      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b80      	cmp	r3, #128	@ 0x80
 80069ea:	d034      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b40      	cmp	r3, #64	@ 0x40
 80069f0:	d031      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d110      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2208      	movs	r2, #8
 8006a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f838 	bl	8006a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2208      	movs	r2, #8
 8006a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e029      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a30:	d111      	bne.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f81e 	bl	8006a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e00f      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d0a0      	beq.n	80069b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b095      	sub	sp, #84	@ 0x54
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aa6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006adc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e3      	bne.n	8006ab8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d118      	bne.n	8006b2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f023 0310 	bic.w	r3, r3, #16
 8006b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b16:	61bb      	str	r3, [r7, #24]
 8006b18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6979      	ldr	r1, [r7, #20]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	613b      	str	r3, [r7, #16]
   return(result);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e6      	bne.n	8006af8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b3e:	bf00      	nop
 8006b40:	3754      	adds	r7, #84	@ 0x54
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e027      	b.n	8006bb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2224      	movs	r2, #36	@ 0x24
 8006b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e02d      	b.n	8006c30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2224      	movs	r2, #36	@ 0x24
 8006be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0201 	bic.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f84f 	bl	8006cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e02d      	b.n	8006cac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2224      	movs	r2, #36	@ 0x24
 8006c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f811 	bl	8006cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d108      	bne.n	8006cd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cd4:	e031      	b.n	8006d3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cda:	2308      	movs	r3, #8
 8006cdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	0e5b      	lsrs	r3, r3, #25
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	0f5b      	lsrs	r3, r3, #29
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cfe:	7bbb      	ldrb	r3, [r7, #14]
 8006d00:	7b3a      	ldrb	r2, [r7, #12]
 8006d02:	4911      	ldr	r1, [pc, #68]	@ (8006d48 <UARTEx_SetNbDataToProcess+0x94>)
 8006d04:	5c8a      	ldrb	r2, [r1, r2]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d0a:	7b3a      	ldrb	r2, [r7, #12]
 8006d0c:	490f      	ldr	r1, [pc, #60]	@ (8006d4c <UARTEx_SetNbDataToProcess+0x98>)
 8006d0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	7b7a      	ldrb	r2, [r7, #13]
 8006d20:	4909      	ldr	r1, [pc, #36]	@ (8006d48 <UARTEx_SetNbDataToProcess+0x94>)
 8006d22:	5c8a      	ldrb	r2, [r1, r2]
 8006d24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d28:	7b7a      	ldrb	r2, [r7, #13]
 8006d2a:	4908      	ldr	r1, [pc, #32]	@ (8006d4c <UARTEx_SetNbDataToProcess+0x98>)
 8006d2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	0800b4e4 	.word	0x0800b4e4
 8006d4c:	0800b4ec 	.word	0x0800b4ec

08006d50 <__cvt>:
 8006d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d54:	ec57 6b10 	vmov	r6, r7, d0
 8006d58:	2f00      	cmp	r7, #0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	463b      	mov	r3, r7
 8006d60:	bfbb      	ittet	lt
 8006d62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d66:	461f      	movlt	r7, r3
 8006d68:	2300      	movge	r3, #0
 8006d6a:	232d      	movlt	r3, #45	@ 0x2d
 8006d6c:	700b      	strb	r3, [r1, #0]
 8006d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d74:	4691      	mov	r9, r2
 8006d76:	f023 0820 	bic.w	r8, r3, #32
 8006d7a:	bfbc      	itt	lt
 8006d7c:	4632      	movlt	r2, r6
 8006d7e:	4616      	movlt	r6, r2
 8006d80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d84:	d005      	beq.n	8006d92 <__cvt+0x42>
 8006d86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006d8a:	d100      	bne.n	8006d8e <__cvt+0x3e>
 8006d8c:	3401      	adds	r4, #1
 8006d8e:	2102      	movs	r1, #2
 8006d90:	e000      	b.n	8006d94 <__cvt+0x44>
 8006d92:	2103      	movs	r1, #3
 8006d94:	ab03      	add	r3, sp, #12
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	ab02      	add	r3, sp, #8
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	ec47 6b10 	vmov	d0, r6, r7
 8006da0:	4653      	mov	r3, sl
 8006da2:	4622      	mov	r2, r4
 8006da4:	f001 fe94 	bl	8008ad0 <_dtoa_r>
 8006da8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006dac:	4605      	mov	r5, r0
 8006dae:	d119      	bne.n	8006de4 <__cvt+0x94>
 8006db0:	f019 0f01 	tst.w	r9, #1
 8006db4:	d00e      	beq.n	8006dd4 <__cvt+0x84>
 8006db6:	eb00 0904 	add.w	r9, r0, r4
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fe99 	bl	8000af8 <__aeabi_dcmpeq>
 8006dc6:	b108      	cbz	r0, 8006dcc <__cvt+0x7c>
 8006dc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dcc:	2230      	movs	r2, #48	@ 0x30
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	454b      	cmp	r3, r9
 8006dd2:	d31e      	bcc.n	8006e12 <__cvt+0xc2>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dd8:	1b5b      	subs	r3, r3, r5
 8006dda:	4628      	mov	r0, r5
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	b004      	add	sp, #16
 8006de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006de8:	eb00 0904 	add.w	r9, r0, r4
 8006dec:	d1e5      	bne.n	8006dba <__cvt+0x6a>
 8006dee:	7803      	ldrb	r3, [r0, #0]
 8006df0:	2b30      	cmp	r3, #48	@ 0x30
 8006df2:	d10a      	bne.n	8006e0a <__cvt+0xba>
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	f7f9 fe7c 	bl	8000af8 <__aeabi_dcmpeq>
 8006e00:	b918      	cbnz	r0, 8006e0a <__cvt+0xba>
 8006e02:	f1c4 0401 	rsb	r4, r4, #1
 8006e06:	f8ca 4000 	str.w	r4, [sl]
 8006e0a:	f8da 3000 	ldr.w	r3, [sl]
 8006e0e:	4499      	add	r9, r3
 8006e10:	e7d3      	b.n	8006dba <__cvt+0x6a>
 8006e12:	1c59      	adds	r1, r3, #1
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e7d9      	b.n	8006dce <__cvt+0x7e>

08006e1a <__exponent>:
 8006e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	bfba      	itte	lt
 8006e20:	4249      	neglt	r1, r1
 8006e22:	232d      	movlt	r3, #45	@ 0x2d
 8006e24:	232b      	movge	r3, #43	@ 0x2b
 8006e26:	2909      	cmp	r1, #9
 8006e28:	7002      	strb	r2, [r0, #0]
 8006e2a:	7043      	strb	r3, [r0, #1]
 8006e2c:	dd29      	ble.n	8006e82 <__exponent+0x68>
 8006e2e:	f10d 0307 	add.w	r3, sp, #7
 8006e32:	461d      	mov	r5, r3
 8006e34:	270a      	movs	r7, #10
 8006e36:	461a      	mov	r2, r3
 8006e38:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e3c:	fb07 1416 	mls	r4, r7, r6, r1
 8006e40:	3430      	adds	r4, #48	@ 0x30
 8006e42:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e46:	460c      	mov	r4, r1
 8006e48:	2c63      	cmp	r4, #99	@ 0x63
 8006e4a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006e4e:	4631      	mov	r1, r6
 8006e50:	dcf1      	bgt.n	8006e36 <__exponent+0x1c>
 8006e52:	3130      	adds	r1, #48	@ 0x30
 8006e54:	1e94      	subs	r4, r2, #2
 8006e56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e5a:	1c41      	adds	r1, r0, #1
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	42ab      	cmp	r3, r5
 8006e60:	d30a      	bcc.n	8006e78 <__exponent+0x5e>
 8006e62:	f10d 0309 	add.w	r3, sp, #9
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	42ac      	cmp	r4, r5
 8006e6a:	bf88      	it	hi
 8006e6c:	2300      	movhi	r3, #0
 8006e6e:	3302      	adds	r3, #2
 8006e70:	4403      	add	r3, r0
 8006e72:	1a18      	subs	r0, r3, r0
 8006e74:	b003      	add	sp, #12
 8006e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e78:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e80:	e7ed      	b.n	8006e5e <__exponent+0x44>
 8006e82:	2330      	movs	r3, #48	@ 0x30
 8006e84:	3130      	adds	r1, #48	@ 0x30
 8006e86:	7083      	strb	r3, [r0, #2]
 8006e88:	70c1      	strb	r1, [r0, #3]
 8006e8a:	1d03      	adds	r3, r0, #4
 8006e8c:	e7f1      	b.n	8006e72 <__exponent+0x58>
	...

08006e90 <_printf_float>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	b08d      	sub	sp, #52	@ 0x34
 8006e96:	460c      	mov	r4, r1
 8006e98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	f001 fd69 	bl	8008978 <_localeconv_r>
 8006ea6:	6803      	ldr	r3, [r0, #0]
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7f9 f9f8 	bl	80002a0 <strlen>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb8:	9005      	str	r0, [sp, #20]
 8006eba:	3307      	adds	r3, #7
 8006ebc:	f023 0307 	bic.w	r3, r3, #7
 8006ec0:	f103 0208 	add.w	r2, r3, #8
 8006ec4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ec8:	f8d4 b000 	ldr.w	fp, [r4]
 8006ecc:	f8c8 2000 	str.w	r2, [r8]
 8006ed0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ed8:	9307      	str	r3, [sp, #28]
 8006eda:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ede:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ee6:	4b9c      	ldr	r3, [pc, #624]	@ (8007158 <_printf_float+0x2c8>)
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006eec:	f7f9 fe36 	bl	8000b5c <__aeabi_dcmpun>
 8006ef0:	bb70      	cbnz	r0, 8006f50 <_printf_float+0xc0>
 8006ef2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ef6:	4b98      	ldr	r3, [pc, #608]	@ (8007158 <_printf_float+0x2c8>)
 8006ef8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006efc:	f7f9 fe10 	bl	8000b20 <__aeabi_dcmple>
 8006f00:	bb30      	cbnz	r0, 8006f50 <_printf_float+0xc0>
 8006f02:	2200      	movs	r2, #0
 8006f04:	2300      	movs	r3, #0
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	f7f9 fdff 	bl	8000b0c <__aeabi_dcmplt>
 8006f0e:	b110      	cbz	r0, 8006f16 <_printf_float+0x86>
 8006f10:	232d      	movs	r3, #45	@ 0x2d
 8006f12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f16:	4a91      	ldr	r2, [pc, #580]	@ (800715c <_printf_float+0x2cc>)
 8006f18:	4b91      	ldr	r3, [pc, #580]	@ (8007160 <_printf_float+0x2d0>)
 8006f1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f1e:	bf8c      	ite	hi
 8006f20:	4690      	movhi	r8, r2
 8006f22:	4698      	movls	r8, r3
 8006f24:	2303      	movs	r3, #3
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	f02b 0304 	bic.w	r3, fp, #4
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	f04f 0900 	mov.w	r9, #0
 8006f32:	9700      	str	r7, [sp, #0]
 8006f34:	4633      	mov	r3, r6
 8006f36:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 f9d2 	bl	80072e4 <_printf_common>
 8006f40:	3001      	adds	r0, #1
 8006f42:	f040 808d 	bne.w	8007060 <_printf_float+0x1d0>
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f4a:	b00d      	add	sp, #52	@ 0x34
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	4649      	mov	r1, r9
 8006f58:	f7f9 fe00 	bl	8000b5c <__aeabi_dcmpun>
 8006f5c:	b140      	cbz	r0, 8006f70 <_printf_float+0xe0>
 8006f5e:	464b      	mov	r3, r9
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bfbc      	itt	lt
 8006f64:	232d      	movlt	r3, #45	@ 0x2d
 8006f66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8007164 <_printf_float+0x2d4>)
 8006f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8007168 <_printf_float+0x2d8>)
 8006f6e:	e7d4      	b.n	8006f1a <_printf_float+0x8a>
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f76:	9206      	str	r2, [sp, #24]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	d13b      	bne.n	8006ff4 <_printf_float+0x164>
 8006f7c:	2306      	movs	r3, #6
 8006f7e:	6063      	str	r3, [r4, #4]
 8006f80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f84:	2300      	movs	r3, #0
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	9303      	str	r3, [sp, #12]
 8006f8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006f90:	ab09      	add	r3, sp, #36	@ 0x24
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	6861      	ldr	r1, [r4, #4]
 8006f96:	ec49 8b10 	vmov	d0, r8, r9
 8006f9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f7ff fed6 	bl	8006d50 <__cvt>
 8006fa4:	9b06      	ldr	r3, [sp, #24]
 8006fa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fa8:	2b47      	cmp	r3, #71	@ 0x47
 8006faa:	4680      	mov	r8, r0
 8006fac:	d129      	bne.n	8007002 <_printf_float+0x172>
 8006fae:	1cc8      	adds	r0, r1, #3
 8006fb0:	db02      	blt.n	8006fb8 <_printf_float+0x128>
 8006fb2:	6863      	ldr	r3, [r4, #4]
 8006fb4:	4299      	cmp	r1, r3
 8006fb6:	dd41      	ble.n	800703c <_printf_float+0x1ac>
 8006fb8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fbc:	fa5f fa8a 	uxtb.w	sl, sl
 8006fc0:	3901      	subs	r1, #1
 8006fc2:	4652      	mov	r2, sl
 8006fc4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fca:	f7ff ff26 	bl	8006e1a <__exponent>
 8006fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fd0:	1813      	adds	r3, r2, r0
 8006fd2:	2a01      	cmp	r2, #1
 8006fd4:	4681      	mov	r9, r0
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	dc02      	bgt.n	8006fe0 <_printf_float+0x150>
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	07d2      	lsls	r2, r2, #31
 8006fde:	d501      	bpl.n	8006fe4 <_printf_float+0x154>
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	6123      	str	r3, [r4, #16]
 8006fe4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0a2      	beq.n	8006f32 <_printf_float+0xa2>
 8006fec:	232d      	movs	r3, #45	@ 0x2d
 8006fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff2:	e79e      	b.n	8006f32 <_printf_float+0xa2>
 8006ff4:	9a06      	ldr	r2, [sp, #24]
 8006ff6:	2a47      	cmp	r2, #71	@ 0x47
 8006ff8:	d1c2      	bne.n	8006f80 <_printf_float+0xf0>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1c0      	bne.n	8006f80 <_printf_float+0xf0>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e7bd      	b.n	8006f7e <_printf_float+0xee>
 8007002:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007006:	d9db      	bls.n	8006fc0 <_printf_float+0x130>
 8007008:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800700c:	d118      	bne.n	8007040 <_printf_float+0x1b0>
 800700e:	2900      	cmp	r1, #0
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	dd0b      	ble.n	800702c <_printf_float+0x19c>
 8007014:	6121      	str	r1, [r4, #16]
 8007016:	b913      	cbnz	r3, 800701e <_printf_float+0x18e>
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	07d0      	lsls	r0, r2, #31
 800701c:	d502      	bpl.n	8007024 <_printf_float+0x194>
 800701e:	3301      	adds	r3, #1
 8007020:	440b      	add	r3, r1
 8007022:	6123      	str	r3, [r4, #16]
 8007024:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007026:	f04f 0900 	mov.w	r9, #0
 800702a:	e7db      	b.n	8006fe4 <_printf_float+0x154>
 800702c:	b913      	cbnz	r3, 8007034 <_printf_float+0x1a4>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	07d2      	lsls	r2, r2, #31
 8007032:	d501      	bpl.n	8007038 <_printf_float+0x1a8>
 8007034:	3302      	adds	r3, #2
 8007036:	e7f4      	b.n	8007022 <_printf_float+0x192>
 8007038:	2301      	movs	r3, #1
 800703a:	e7f2      	b.n	8007022 <_printf_float+0x192>
 800703c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007042:	4299      	cmp	r1, r3
 8007044:	db05      	blt.n	8007052 <_printf_float+0x1c2>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	6121      	str	r1, [r4, #16]
 800704a:	07d8      	lsls	r0, r3, #31
 800704c:	d5ea      	bpl.n	8007024 <_printf_float+0x194>
 800704e:	1c4b      	adds	r3, r1, #1
 8007050:	e7e7      	b.n	8007022 <_printf_float+0x192>
 8007052:	2900      	cmp	r1, #0
 8007054:	bfd4      	ite	le
 8007056:	f1c1 0202 	rsble	r2, r1, #2
 800705a:	2201      	movgt	r2, #1
 800705c:	4413      	add	r3, r2
 800705e:	e7e0      	b.n	8007022 <_printf_float+0x192>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	055a      	lsls	r2, r3, #21
 8007064:	d407      	bmi.n	8007076 <_printf_float+0x1e6>
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	4642      	mov	r2, r8
 800706a:	4631      	mov	r1, r6
 800706c:	4628      	mov	r0, r5
 800706e:	47b8      	blx	r7
 8007070:	3001      	adds	r0, #1
 8007072:	d12b      	bne.n	80070cc <_printf_float+0x23c>
 8007074:	e767      	b.n	8006f46 <_printf_float+0xb6>
 8007076:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800707a:	f240 80dd 	bls.w	8007238 <_printf_float+0x3a8>
 800707e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	f7f9 fd37 	bl	8000af8 <__aeabi_dcmpeq>
 800708a:	2800      	cmp	r0, #0
 800708c:	d033      	beq.n	80070f6 <_printf_float+0x266>
 800708e:	4a37      	ldr	r2, [pc, #220]	@ (800716c <_printf_float+0x2dc>)
 8007090:	2301      	movs	r3, #1
 8007092:	4631      	mov	r1, r6
 8007094:	4628      	mov	r0, r5
 8007096:	47b8      	blx	r7
 8007098:	3001      	adds	r0, #1
 800709a:	f43f af54 	beq.w	8006f46 <_printf_float+0xb6>
 800709e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070a2:	4543      	cmp	r3, r8
 80070a4:	db02      	blt.n	80070ac <_printf_float+0x21c>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	07d8      	lsls	r0, r3, #31
 80070aa:	d50f      	bpl.n	80070cc <_printf_float+0x23c>
 80070ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f af45 	beq.w	8006f46 <_printf_float+0xb6>
 80070bc:	f04f 0900 	mov.w	r9, #0
 80070c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80070c4:	f104 0a1a 	add.w	sl, r4, #26
 80070c8:	45c8      	cmp	r8, r9
 80070ca:	dc09      	bgt.n	80070e0 <_printf_float+0x250>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	079b      	lsls	r3, r3, #30
 80070d0:	f100 8103 	bmi.w	80072da <_printf_float+0x44a>
 80070d4:	68e0      	ldr	r0, [r4, #12]
 80070d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d8:	4298      	cmp	r0, r3
 80070da:	bfb8      	it	lt
 80070dc:	4618      	movlt	r0, r3
 80070de:	e734      	b.n	8006f4a <_printf_float+0xba>
 80070e0:	2301      	movs	r3, #1
 80070e2:	4652      	mov	r2, sl
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f af2b 	beq.w	8006f46 <_printf_float+0xb6>
 80070f0:	f109 0901 	add.w	r9, r9, #1
 80070f4:	e7e8      	b.n	80070c8 <_printf_float+0x238>
 80070f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	dc39      	bgt.n	8007170 <_printf_float+0x2e0>
 80070fc:	4a1b      	ldr	r2, [pc, #108]	@ (800716c <_printf_float+0x2dc>)
 80070fe:	2301      	movs	r3, #1
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	f43f af1d 	beq.w	8006f46 <_printf_float+0xb6>
 800710c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007110:	ea59 0303 	orrs.w	r3, r9, r3
 8007114:	d102      	bne.n	800711c <_printf_float+0x28c>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	07d9      	lsls	r1, r3, #31
 800711a:	d5d7      	bpl.n	80070cc <_printf_float+0x23c>
 800711c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af0d 	beq.w	8006f46 <_printf_float+0xb6>
 800712c:	f04f 0a00 	mov.w	sl, #0
 8007130:	f104 0b1a 	add.w	fp, r4, #26
 8007134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007136:	425b      	negs	r3, r3
 8007138:	4553      	cmp	r3, sl
 800713a:	dc01      	bgt.n	8007140 <_printf_float+0x2b0>
 800713c:	464b      	mov	r3, r9
 800713e:	e793      	b.n	8007068 <_printf_float+0x1d8>
 8007140:	2301      	movs	r3, #1
 8007142:	465a      	mov	r2, fp
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f aefb 	beq.w	8006f46 <_printf_float+0xb6>
 8007150:	f10a 0a01 	add.w	sl, sl, #1
 8007154:	e7ee      	b.n	8007134 <_printf_float+0x2a4>
 8007156:	bf00      	nop
 8007158:	7fefffff 	.word	0x7fefffff
 800715c:	0800b4f8 	.word	0x0800b4f8
 8007160:	0800b4f4 	.word	0x0800b4f4
 8007164:	0800b500 	.word	0x0800b500
 8007168:	0800b4fc 	.word	0x0800b4fc
 800716c:	0800b504 	.word	0x0800b504
 8007170:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007172:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007176:	4553      	cmp	r3, sl
 8007178:	bfa8      	it	ge
 800717a:	4653      	movge	r3, sl
 800717c:	2b00      	cmp	r3, #0
 800717e:	4699      	mov	r9, r3
 8007180:	dc36      	bgt.n	80071f0 <_printf_float+0x360>
 8007182:	f04f 0b00 	mov.w	fp, #0
 8007186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800718a:	f104 021a 	add.w	r2, r4, #26
 800718e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007190:	9306      	str	r3, [sp, #24]
 8007192:	eba3 0309 	sub.w	r3, r3, r9
 8007196:	455b      	cmp	r3, fp
 8007198:	dc31      	bgt.n	80071fe <_printf_float+0x36e>
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	459a      	cmp	sl, r3
 800719e:	dc3a      	bgt.n	8007216 <_printf_float+0x386>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	07da      	lsls	r2, r3, #31
 80071a4:	d437      	bmi.n	8007216 <_printf_float+0x386>
 80071a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a8:	ebaa 0903 	sub.w	r9, sl, r3
 80071ac:	9b06      	ldr	r3, [sp, #24]
 80071ae:	ebaa 0303 	sub.w	r3, sl, r3
 80071b2:	4599      	cmp	r9, r3
 80071b4:	bfa8      	it	ge
 80071b6:	4699      	movge	r9, r3
 80071b8:	f1b9 0f00 	cmp.w	r9, #0
 80071bc:	dc33      	bgt.n	8007226 <_printf_float+0x396>
 80071be:	f04f 0800 	mov.w	r8, #0
 80071c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071c6:	f104 0b1a 	add.w	fp, r4, #26
 80071ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071cc:	ebaa 0303 	sub.w	r3, sl, r3
 80071d0:	eba3 0309 	sub.w	r3, r3, r9
 80071d4:	4543      	cmp	r3, r8
 80071d6:	f77f af79 	ble.w	80070cc <_printf_float+0x23c>
 80071da:	2301      	movs	r3, #1
 80071dc:	465a      	mov	r2, fp
 80071de:	4631      	mov	r1, r6
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b8      	blx	r7
 80071e4:	3001      	adds	r0, #1
 80071e6:	f43f aeae 	beq.w	8006f46 <_printf_float+0xb6>
 80071ea:	f108 0801 	add.w	r8, r8, #1
 80071ee:	e7ec      	b.n	80071ca <_printf_float+0x33a>
 80071f0:	4642      	mov	r2, r8
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	d1c2      	bne.n	8007182 <_printf_float+0x2f2>
 80071fc:	e6a3      	b.n	8006f46 <_printf_float+0xb6>
 80071fe:	2301      	movs	r3, #1
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	9206      	str	r2, [sp, #24]
 8007206:	47b8      	blx	r7
 8007208:	3001      	adds	r0, #1
 800720a:	f43f ae9c 	beq.w	8006f46 <_printf_float+0xb6>
 800720e:	9a06      	ldr	r2, [sp, #24]
 8007210:	f10b 0b01 	add.w	fp, fp, #1
 8007214:	e7bb      	b.n	800718e <_printf_float+0x2fe>
 8007216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	d1c0      	bne.n	80071a6 <_printf_float+0x316>
 8007224:	e68f      	b.n	8006f46 <_printf_float+0xb6>
 8007226:	9a06      	ldr	r2, [sp, #24]
 8007228:	464b      	mov	r3, r9
 800722a:	4442      	add	r2, r8
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	d1c3      	bne.n	80071be <_printf_float+0x32e>
 8007236:	e686      	b.n	8006f46 <_printf_float+0xb6>
 8007238:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800723c:	f1ba 0f01 	cmp.w	sl, #1
 8007240:	dc01      	bgt.n	8007246 <_printf_float+0x3b6>
 8007242:	07db      	lsls	r3, r3, #31
 8007244:	d536      	bpl.n	80072b4 <_printf_float+0x424>
 8007246:	2301      	movs	r3, #1
 8007248:	4642      	mov	r2, r8
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	f43f ae78 	beq.w	8006f46 <_printf_float+0xb6>
 8007256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800725a:	4631      	mov	r1, r6
 800725c:	4628      	mov	r0, r5
 800725e:	47b8      	blx	r7
 8007260:	3001      	adds	r0, #1
 8007262:	f43f ae70 	beq.w	8006f46 <_printf_float+0xb6>
 8007266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007272:	f7f9 fc41 	bl	8000af8 <__aeabi_dcmpeq>
 8007276:	b9c0      	cbnz	r0, 80072aa <_printf_float+0x41a>
 8007278:	4653      	mov	r3, sl
 800727a:	f108 0201 	add.w	r2, r8, #1
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	d10c      	bne.n	80072a2 <_printf_float+0x412>
 8007288:	e65d      	b.n	8006f46 <_printf_float+0xb6>
 800728a:	2301      	movs	r3, #1
 800728c:	465a      	mov	r2, fp
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	f43f ae56 	beq.w	8006f46 <_printf_float+0xb6>
 800729a:	f108 0801 	add.w	r8, r8, #1
 800729e:	45d0      	cmp	r8, sl
 80072a0:	dbf3      	blt.n	800728a <_printf_float+0x3fa>
 80072a2:	464b      	mov	r3, r9
 80072a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072a8:	e6df      	b.n	800706a <_printf_float+0x1da>
 80072aa:	f04f 0800 	mov.w	r8, #0
 80072ae:	f104 0b1a 	add.w	fp, r4, #26
 80072b2:	e7f4      	b.n	800729e <_printf_float+0x40e>
 80072b4:	2301      	movs	r3, #1
 80072b6:	4642      	mov	r2, r8
 80072b8:	e7e1      	b.n	800727e <_printf_float+0x3ee>
 80072ba:	2301      	movs	r3, #1
 80072bc:	464a      	mov	r2, r9
 80072be:	4631      	mov	r1, r6
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b8      	blx	r7
 80072c4:	3001      	adds	r0, #1
 80072c6:	f43f ae3e 	beq.w	8006f46 <_printf_float+0xb6>
 80072ca:	f108 0801 	add.w	r8, r8, #1
 80072ce:	68e3      	ldr	r3, [r4, #12]
 80072d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072d2:	1a5b      	subs	r3, r3, r1
 80072d4:	4543      	cmp	r3, r8
 80072d6:	dcf0      	bgt.n	80072ba <_printf_float+0x42a>
 80072d8:	e6fc      	b.n	80070d4 <_printf_float+0x244>
 80072da:	f04f 0800 	mov.w	r8, #0
 80072de:	f104 0919 	add.w	r9, r4, #25
 80072e2:	e7f4      	b.n	80072ce <_printf_float+0x43e>

080072e4 <_printf_common>:
 80072e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	4616      	mov	r6, r2
 80072ea:	4698      	mov	r8, r3
 80072ec:	688a      	ldr	r2, [r1, #8]
 80072ee:	690b      	ldr	r3, [r1, #16]
 80072f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072f4:	4293      	cmp	r3, r2
 80072f6:	bfb8      	it	lt
 80072f8:	4613      	movlt	r3, r2
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007300:	4607      	mov	r7, r0
 8007302:	460c      	mov	r4, r1
 8007304:	b10a      	cbz	r2, 800730a <_printf_common+0x26>
 8007306:	3301      	adds	r3, #1
 8007308:	6033      	str	r3, [r6, #0]
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	0699      	lsls	r1, r3, #26
 800730e:	bf42      	ittt	mi
 8007310:	6833      	ldrmi	r3, [r6, #0]
 8007312:	3302      	addmi	r3, #2
 8007314:	6033      	strmi	r3, [r6, #0]
 8007316:	6825      	ldr	r5, [r4, #0]
 8007318:	f015 0506 	ands.w	r5, r5, #6
 800731c:	d106      	bne.n	800732c <_printf_common+0x48>
 800731e:	f104 0a19 	add.w	sl, r4, #25
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	6832      	ldr	r2, [r6, #0]
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	42ab      	cmp	r3, r5
 800732a:	dc26      	bgt.n	800737a <_printf_common+0x96>
 800732c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	3b00      	subs	r3, #0
 8007334:	bf18      	it	ne
 8007336:	2301      	movne	r3, #1
 8007338:	0692      	lsls	r2, r2, #26
 800733a:	d42b      	bmi.n	8007394 <_printf_common+0xb0>
 800733c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007340:	4641      	mov	r1, r8
 8007342:	4638      	mov	r0, r7
 8007344:	47c8      	blx	r9
 8007346:	3001      	adds	r0, #1
 8007348:	d01e      	beq.n	8007388 <_printf_common+0xa4>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	6922      	ldr	r2, [r4, #16]
 800734e:	f003 0306 	and.w	r3, r3, #6
 8007352:	2b04      	cmp	r3, #4
 8007354:	bf02      	ittt	eq
 8007356:	68e5      	ldreq	r5, [r4, #12]
 8007358:	6833      	ldreq	r3, [r6, #0]
 800735a:	1aed      	subeq	r5, r5, r3
 800735c:	68a3      	ldr	r3, [r4, #8]
 800735e:	bf0c      	ite	eq
 8007360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007364:	2500      	movne	r5, #0
 8007366:	4293      	cmp	r3, r2
 8007368:	bfc4      	itt	gt
 800736a:	1a9b      	subgt	r3, r3, r2
 800736c:	18ed      	addgt	r5, r5, r3
 800736e:	2600      	movs	r6, #0
 8007370:	341a      	adds	r4, #26
 8007372:	42b5      	cmp	r5, r6
 8007374:	d11a      	bne.n	80073ac <_printf_common+0xc8>
 8007376:	2000      	movs	r0, #0
 8007378:	e008      	b.n	800738c <_printf_common+0xa8>
 800737a:	2301      	movs	r3, #1
 800737c:	4652      	mov	r2, sl
 800737e:	4641      	mov	r1, r8
 8007380:	4638      	mov	r0, r7
 8007382:	47c8      	blx	r9
 8007384:	3001      	adds	r0, #1
 8007386:	d103      	bne.n	8007390 <_printf_common+0xac>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800738c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007390:	3501      	adds	r5, #1
 8007392:	e7c6      	b.n	8007322 <_printf_common+0x3e>
 8007394:	18e1      	adds	r1, r4, r3
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	2030      	movs	r0, #48	@ 0x30
 800739a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800739e:	4422      	add	r2, r4
 80073a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073a8:	3302      	adds	r3, #2
 80073aa:	e7c7      	b.n	800733c <_printf_common+0x58>
 80073ac:	2301      	movs	r3, #1
 80073ae:	4622      	mov	r2, r4
 80073b0:	4641      	mov	r1, r8
 80073b2:	4638      	mov	r0, r7
 80073b4:	47c8      	blx	r9
 80073b6:	3001      	adds	r0, #1
 80073b8:	d0e6      	beq.n	8007388 <_printf_common+0xa4>
 80073ba:	3601      	adds	r6, #1
 80073bc:	e7d9      	b.n	8007372 <_printf_common+0x8e>
	...

080073c0 <_printf_i>:
 80073c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	7e0f      	ldrb	r7, [r1, #24]
 80073c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073c8:	2f78      	cmp	r7, #120	@ 0x78
 80073ca:	4691      	mov	r9, r2
 80073cc:	4680      	mov	r8, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	469a      	mov	sl, r3
 80073d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073d6:	d807      	bhi.n	80073e8 <_printf_i+0x28>
 80073d8:	2f62      	cmp	r7, #98	@ 0x62
 80073da:	d80a      	bhi.n	80073f2 <_printf_i+0x32>
 80073dc:	2f00      	cmp	r7, #0
 80073de:	f000 80d1 	beq.w	8007584 <_printf_i+0x1c4>
 80073e2:	2f58      	cmp	r7, #88	@ 0x58
 80073e4:	f000 80b8 	beq.w	8007558 <_printf_i+0x198>
 80073e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073f0:	e03a      	b.n	8007468 <_printf_i+0xa8>
 80073f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073f6:	2b15      	cmp	r3, #21
 80073f8:	d8f6      	bhi.n	80073e8 <_printf_i+0x28>
 80073fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007400 <_printf_i+0x40>)
 80073fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007400:	08007459 	.word	0x08007459
 8007404:	0800746d 	.word	0x0800746d
 8007408:	080073e9 	.word	0x080073e9
 800740c:	080073e9 	.word	0x080073e9
 8007410:	080073e9 	.word	0x080073e9
 8007414:	080073e9 	.word	0x080073e9
 8007418:	0800746d 	.word	0x0800746d
 800741c:	080073e9 	.word	0x080073e9
 8007420:	080073e9 	.word	0x080073e9
 8007424:	080073e9 	.word	0x080073e9
 8007428:	080073e9 	.word	0x080073e9
 800742c:	0800756b 	.word	0x0800756b
 8007430:	08007497 	.word	0x08007497
 8007434:	08007525 	.word	0x08007525
 8007438:	080073e9 	.word	0x080073e9
 800743c:	080073e9 	.word	0x080073e9
 8007440:	0800758d 	.word	0x0800758d
 8007444:	080073e9 	.word	0x080073e9
 8007448:	08007497 	.word	0x08007497
 800744c:	080073e9 	.word	0x080073e9
 8007450:	080073e9 	.word	0x080073e9
 8007454:	0800752d 	.word	0x0800752d
 8007458:	6833      	ldr	r3, [r6, #0]
 800745a:	1d1a      	adds	r2, r3, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6032      	str	r2, [r6, #0]
 8007460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007464:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007468:	2301      	movs	r3, #1
 800746a:	e09c      	b.n	80075a6 <_printf_i+0x1e6>
 800746c:	6833      	ldr	r3, [r6, #0]
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	1d19      	adds	r1, r3, #4
 8007472:	6031      	str	r1, [r6, #0]
 8007474:	0606      	lsls	r6, r0, #24
 8007476:	d501      	bpl.n	800747c <_printf_i+0xbc>
 8007478:	681d      	ldr	r5, [r3, #0]
 800747a:	e003      	b.n	8007484 <_printf_i+0xc4>
 800747c:	0645      	lsls	r5, r0, #25
 800747e:	d5fb      	bpl.n	8007478 <_printf_i+0xb8>
 8007480:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007484:	2d00      	cmp	r5, #0
 8007486:	da03      	bge.n	8007490 <_printf_i+0xd0>
 8007488:	232d      	movs	r3, #45	@ 0x2d
 800748a:	426d      	negs	r5, r5
 800748c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007490:	4858      	ldr	r0, [pc, #352]	@ (80075f4 <_printf_i+0x234>)
 8007492:	230a      	movs	r3, #10
 8007494:	e011      	b.n	80074ba <_printf_i+0xfa>
 8007496:	6821      	ldr	r1, [r4, #0]
 8007498:	6833      	ldr	r3, [r6, #0]
 800749a:	0608      	lsls	r0, r1, #24
 800749c:	f853 5b04 	ldr.w	r5, [r3], #4
 80074a0:	d402      	bmi.n	80074a8 <_printf_i+0xe8>
 80074a2:	0649      	lsls	r1, r1, #25
 80074a4:	bf48      	it	mi
 80074a6:	b2ad      	uxthmi	r5, r5
 80074a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80074aa:	4852      	ldr	r0, [pc, #328]	@ (80075f4 <_printf_i+0x234>)
 80074ac:	6033      	str	r3, [r6, #0]
 80074ae:	bf14      	ite	ne
 80074b0:	230a      	movne	r3, #10
 80074b2:	2308      	moveq	r3, #8
 80074b4:	2100      	movs	r1, #0
 80074b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ba:	6866      	ldr	r6, [r4, #4]
 80074bc:	60a6      	str	r6, [r4, #8]
 80074be:	2e00      	cmp	r6, #0
 80074c0:	db05      	blt.n	80074ce <_printf_i+0x10e>
 80074c2:	6821      	ldr	r1, [r4, #0]
 80074c4:	432e      	orrs	r6, r5
 80074c6:	f021 0104 	bic.w	r1, r1, #4
 80074ca:	6021      	str	r1, [r4, #0]
 80074cc:	d04b      	beq.n	8007566 <_printf_i+0x1a6>
 80074ce:	4616      	mov	r6, r2
 80074d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80074d4:	fb03 5711 	mls	r7, r3, r1, r5
 80074d8:	5dc7      	ldrb	r7, [r0, r7]
 80074da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074de:	462f      	mov	r7, r5
 80074e0:	42bb      	cmp	r3, r7
 80074e2:	460d      	mov	r5, r1
 80074e4:	d9f4      	bls.n	80074d0 <_printf_i+0x110>
 80074e6:	2b08      	cmp	r3, #8
 80074e8:	d10b      	bne.n	8007502 <_printf_i+0x142>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	07df      	lsls	r7, r3, #31
 80074ee:	d508      	bpl.n	8007502 <_printf_i+0x142>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	6861      	ldr	r1, [r4, #4]
 80074f4:	4299      	cmp	r1, r3
 80074f6:	bfde      	ittt	le
 80074f8:	2330      	movle	r3, #48	@ 0x30
 80074fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074fe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007502:	1b92      	subs	r2, r2, r6
 8007504:	6122      	str	r2, [r4, #16]
 8007506:	f8cd a000 	str.w	sl, [sp]
 800750a:	464b      	mov	r3, r9
 800750c:	aa03      	add	r2, sp, #12
 800750e:	4621      	mov	r1, r4
 8007510:	4640      	mov	r0, r8
 8007512:	f7ff fee7 	bl	80072e4 <_printf_common>
 8007516:	3001      	adds	r0, #1
 8007518:	d14a      	bne.n	80075b0 <_printf_i+0x1f0>
 800751a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800751e:	b004      	add	sp, #16
 8007520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	f043 0320 	orr.w	r3, r3, #32
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	4832      	ldr	r0, [pc, #200]	@ (80075f8 <_printf_i+0x238>)
 800752e:	2778      	movs	r7, #120	@ 0x78
 8007530:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	6831      	ldr	r1, [r6, #0]
 8007538:	061f      	lsls	r7, r3, #24
 800753a:	f851 5b04 	ldr.w	r5, [r1], #4
 800753e:	d402      	bmi.n	8007546 <_printf_i+0x186>
 8007540:	065f      	lsls	r7, r3, #25
 8007542:	bf48      	it	mi
 8007544:	b2ad      	uxthmi	r5, r5
 8007546:	6031      	str	r1, [r6, #0]
 8007548:	07d9      	lsls	r1, r3, #31
 800754a:	bf44      	itt	mi
 800754c:	f043 0320 	orrmi.w	r3, r3, #32
 8007550:	6023      	strmi	r3, [r4, #0]
 8007552:	b11d      	cbz	r5, 800755c <_printf_i+0x19c>
 8007554:	2310      	movs	r3, #16
 8007556:	e7ad      	b.n	80074b4 <_printf_i+0xf4>
 8007558:	4826      	ldr	r0, [pc, #152]	@ (80075f4 <_printf_i+0x234>)
 800755a:	e7e9      	b.n	8007530 <_printf_i+0x170>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	f023 0320 	bic.w	r3, r3, #32
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	e7f6      	b.n	8007554 <_printf_i+0x194>
 8007566:	4616      	mov	r6, r2
 8007568:	e7bd      	b.n	80074e6 <_printf_i+0x126>
 800756a:	6833      	ldr	r3, [r6, #0]
 800756c:	6825      	ldr	r5, [r4, #0]
 800756e:	6961      	ldr	r1, [r4, #20]
 8007570:	1d18      	adds	r0, r3, #4
 8007572:	6030      	str	r0, [r6, #0]
 8007574:	062e      	lsls	r6, r5, #24
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	d501      	bpl.n	800757e <_printf_i+0x1be>
 800757a:	6019      	str	r1, [r3, #0]
 800757c:	e002      	b.n	8007584 <_printf_i+0x1c4>
 800757e:	0668      	lsls	r0, r5, #25
 8007580:	d5fb      	bpl.n	800757a <_printf_i+0x1ba>
 8007582:	8019      	strh	r1, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	4616      	mov	r6, r2
 800758a:	e7bc      	b.n	8007506 <_printf_i+0x146>
 800758c:	6833      	ldr	r3, [r6, #0]
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	6032      	str	r2, [r6, #0]
 8007592:	681e      	ldr	r6, [r3, #0]
 8007594:	6862      	ldr	r2, [r4, #4]
 8007596:	2100      	movs	r1, #0
 8007598:	4630      	mov	r0, r6
 800759a:	f7f8 fe31 	bl	8000200 <memchr>
 800759e:	b108      	cbz	r0, 80075a4 <_printf_i+0x1e4>
 80075a0:	1b80      	subs	r0, r0, r6
 80075a2:	6060      	str	r0, [r4, #4]
 80075a4:	6863      	ldr	r3, [r4, #4]
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	2300      	movs	r3, #0
 80075aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075ae:	e7aa      	b.n	8007506 <_printf_i+0x146>
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	4632      	mov	r2, r6
 80075b4:	4649      	mov	r1, r9
 80075b6:	4640      	mov	r0, r8
 80075b8:	47d0      	blx	sl
 80075ba:	3001      	adds	r0, #1
 80075bc:	d0ad      	beq.n	800751a <_printf_i+0x15a>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	079b      	lsls	r3, r3, #30
 80075c2:	d413      	bmi.n	80075ec <_printf_i+0x22c>
 80075c4:	68e0      	ldr	r0, [r4, #12]
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	4298      	cmp	r0, r3
 80075ca:	bfb8      	it	lt
 80075cc:	4618      	movlt	r0, r3
 80075ce:	e7a6      	b.n	800751e <_printf_i+0x15e>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4632      	mov	r2, r6
 80075d4:	4649      	mov	r1, r9
 80075d6:	4640      	mov	r0, r8
 80075d8:	47d0      	blx	sl
 80075da:	3001      	adds	r0, #1
 80075dc:	d09d      	beq.n	800751a <_printf_i+0x15a>
 80075de:	3501      	adds	r5, #1
 80075e0:	68e3      	ldr	r3, [r4, #12]
 80075e2:	9903      	ldr	r1, [sp, #12]
 80075e4:	1a5b      	subs	r3, r3, r1
 80075e6:	42ab      	cmp	r3, r5
 80075e8:	dcf2      	bgt.n	80075d0 <_printf_i+0x210>
 80075ea:	e7eb      	b.n	80075c4 <_printf_i+0x204>
 80075ec:	2500      	movs	r5, #0
 80075ee:	f104 0619 	add.w	r6, r4, #25
 80075f2:	e7f5      	b.n	80075e0 <_printf_i+0x220>
 80075f4:	0800b506 	.word	0x0800b506
 80075f8:	0800b517 	.word	0x0800b517

080075fc <_scanf_float>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	b087      	sub	sp, #28
 8007602:	4691      	mov	r9, r2
 8007604:	9303      	str	r3, [sp, #12]
 8007606:	688b      	ldr	r3, [r1, #8]
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800760e:	bf81      	itttt	hi
 8007610:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007614:	eb03 0b05 	addhi.w	fp, r3, r5
 8007618:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800761c:	608b      	strhi	r3, [r1, #8]
 800761e:	680b      	ldr	r3, [r1, #0]
 8007620:	460a      	mov	r2, r1
 8007622:	f04f 0500 	mov.w	r5, #0
 8007626:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800762a:	f842 3b1c 	str.w	r3, [r2], #28
 800762e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007632:	4680      	mov	r8, r0
 8007634:	460c      	mov	r4, r1
 8007636:	bf98      	it	ls
 8007638:	f04f 0b00 	movls.w	fp, #0
 800763c:	9201      	str	r2, [sp, #4]
 800763e:	4616      	mov	r6, r2
 8007640:	46aa      	mov	sl, r5
 8007642:	462f      	mov	r7, r5
 8007644:	9502      	str	r5, [sp, #8]
 8007646:	68a2      	ldr	r2, [r4, #8]
 8007648:	b15a      	cbz	r2, 8007662 <_scanf_float+0x66>
 800764a:	f8d9 3000 	ldr.w	r3, [r9]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b4e      	cmp	r3, #78	@ 0x4e
 8007652:	d863      	bhi.n	800771c <_scanf_float+0x120>
 8007654:	2b40      	cmp	r3, #64	@ 0x40
 8007656:	d83b      	bhi.n	80076d0 <_scanf_float+0xd4>
 8007658:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800765c:	b2c8      	uxtb	r0, r1
 800765e:	280e      	cmp	r0, #14
 8007660:	d939      	bls.n	80076d6 <_scanf_float+0xda>
 8007662:	b11f      	cbz	r7, 800766c <_scanf_float+0x70>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007670:	f1ba 0f01 	cmp.w	sl, #1
 8007674:	f200 8114 	bhi.w	80078a0 <_scanf_float+0x2a4>
 8007678:	9b01      	ldr	r3, [sp, #4]
 800767a:	429e      	cmp	r6, r3
 800767c:	f200 8105 	bhi.w	800788a <_scanf_float+0x28e>
 8007680:	2001      	movs	r0, #1
 8007682:	b007      	add	sp, #28
 8007684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007688:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800768c:	2a0d      	cmp	r2, #13
 800768e:	d8e8      	bhi.n	8007662 <_scanf_float+0x66>
 8007690:	a101      	add	r1, pc, #4	@ (adr r1, 8007698 <_scanf_float+0x9c>)
 8007692:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007696:	bf00      	nop
 8007698:	080077e1 	.word	0x080077e1
 800769c:	08007663 	.word	0x08007663
 80076a0:	08007663 	.word	0x08007663
 80076a4:	08007663 	.word	0x08007663
 80076a8:	0800783d 	.word	0x0800783d
 80076ac:	08007817 	.word	0x08007817
 80076b0:	08007663 	.word	0x08007663
 80076b4:	08007663 	.word	0x08007663
 80076b8:	080077ef 	.word	0x080077ef
 80076bc:	08007663 	.word	0x08007663
 80076c0:	08007663 	.word	0x08007663
 80076c4:	08007663 	.word	0x08007663
 80076c8:	08007663 	.word	0x08007663
 80076cc:	080077ab 	.word	0x080077ab
 80076d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80076d4:	e7da      	b.n	800768c <_scanf_float+0x90>
 80076d6:	290e      	cmp	r1, #14
 80076d8:	d8c3      	bhi.n	8007662 <_scanf_float+0x66>
 80076da:	a001      	add	r0, pc, #4	@ (adr r0, 80076e0 <_scanf_float+0xe4>)
 80076dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076e0:	0800779b 	.word	0x0800779b
 80076e4:	08007663 	.word	0x08007663
 80076e8:	0800779b 	.word	0x0800779b
 80076ec:	0800782b 	.word	0x0800782b
 80076f0:	08007663 	.word	0x08007663
 80076f4:	0800773d 	.word	0x0800773d
 80076f8:	08007781 	.word	0x08007781
 80076fc:	08007781 	.word	0x08007781
 8007700:	08007781 	.word	0x08007781
 8007704:	08007781 	.word	0x08007781
 8007708:	08007781 	.word	0x08007781
 800770c:	08007781 	.word	0x08007781
 8007710:	08007781 	.word	0x08007781
 8007714:	08007781 	.word	0x08007781
 8007718:	08007781 	.word	0x08007781
 800771c:	2b6e      	cmp	r3, #110	@ 0x6e
 800771e:	d809      	bhi.n	8007734 <_scanf_float+0x138>
 8007720:	2b60      	cmp	r3, #96	@ 0x60
 8007722:	d8b1      	bhi.n	8007688 <_scanf_float+0x8c>
 8007724:	2b54      	cmp	r3, #84	@ 0x54
 8007726:	d07b      	beq.n	8007820 <_scanf_float+0x224>
 8007728:	2b59      	cmp	r3, #89	@ 0x59
 800772a:	d19a      	bne.n	8007662 <_scanf_float+0x66>
 800772c:	2d07      	cmp	r5, #7
 800772e:	d198      	bne.n	8007662 <_scanf_float+0x66>
 8007730:	2508      	movs	r5, #8
 8007732:	e02f      	b.n	8007794 <_scanf_float+0x198>
 8007734:	2b74      	cmp	r3, #116	@ 0x74
 8007736:	d073      	beq.n	8007820 <_scanf_float+0x224>
 8007738:	2b79      	cmp	r3, #121	@ 0x79
 800773a:	e7f6      	b.n	800772a <_scanf_float+0x12e>
 800773c:	6821      	ldr	r1, [r4, #0]
 800773e:	05c8      	lsls	r0, r1, #23
 8007740:	d51e      	bpl.n	8007780 <_scanf_float+0x184>
 8007742:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007746:	6021      	str	r1, [r4, #0]
 8007748:	3701      	adds	r7, #1
 800774a:	f1bb 0f00 	cmp.w	fp, #0
 800774e:	d003      	beq.n	8007758 <_scanf_float+0x15c>
 8007750:	3201      	adds	r2, #1
 8007752:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007756:	60a2      	str	r2, [r4, #8]
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	3b01      	subs	r3, #1
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	3301      	adds	r3, #1
 8007762:	6123      	str	r3, [r4, #16]
 8007764:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007770:	f340 8082 	ble.w	8007878 <_scanf_float+0x27c>
 8007774:	f8d9 3000 	ldr.w	r3, [r9]
 8007778:	3301      	adds	r3, #1
 800777a:	f8c9 3000 	str.w	r3, [r9]
 800777e:	e762      	b.n	8007646 <_scanf_float+0x4a>
 8007780:	eb1a 0105 	adds.w	r1, sl, r5
 8007784:	f47f af6d 	bne.w	8007662 <_scanf_float+0x66>
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800778e:	6022      	str	r2, [r4, #0]
 8007790:	460d      	mov	r5, r1
 8007792:	468a      	mov	sl, r1
 8007794:	f806 3b01 	strb.w	r3, [r6], #1
 8007798:	e7de      	b.n	8007758 <_scanf_float+0x15c>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	0610      	lsls	r0, r2, #24
 800779e:	f57f af60 	bpl.w	8007662 <_scanf_float+0x66>
 80077a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	e7f4      	b.n	8007794 <_scanf_float+0x198>
 80077aa:	f1ba 0f00 	cmp.w	sl, #0
 80077ae:	d10c      	bne.n	80077ca <_scanf_float+0x1ce>
 80077b0:	b977      	cbnz	r7, 80077d0 <_scanf_float+0x1d4>
 80077b2:	6822      	ldr	r2, [r4, #0]
 80077b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80077b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80077bc:	d108      	bne.n	80077d0 <_scanf_float+0x1d4>
 80077be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80077c2:	6022      	str	r2, [r4, #0]
 80077c4:	f04f 0a01 	mov.w	sl, #1
 80077c8:	e7e4      	b.n	8007794 <_scanf_float+0x198>
 80077ca:	f1ba 0f02 	cmp.w	sl, #2
 80077ce:	d050      	beq.n	8007872 <_scanf_float+0x276>
 80077d0:	2d01      	cmp	r5, #1
 80077d2:	d002      	beq.n	80077da <_scanf_float+0x1de>
 80077d4:	2d04      	cmp	r5, #4
 80077d6:	f47f af44 	bne.w	8007662 <_scanf_float+0x66>
 80077da:	3501      	adds	r5, #1
 80077dc:	b2ed      	uxtb	r5, r5
 80077de:	e7d9      	b.n	8007794 <_scanf_float+0x198>
 80077e0:	f1ba 0f01 	cmp.w	sl, #1
 80077e4:	f47f af3d 	bne.w	8007662 <_scanf_float+0x66>
 80077e8:	f04f 0a02 	mov.w	sl, #2
 80077ec:	e7d2      	b.n	8007794 <_scanf_float+0x198>
 80077ee:	b975      	cbnz	r5, 800780e <_scanf_float+0x212>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	f47f af37 	bne.w	8007664 <_scanf_float+0x68>
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80077fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007800:	f040 8103 	bne.w	8007a0a <_scanf_float+0x40e>
 8007804:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007808:	6022      	str	r2, [r4, #0]
 800780a:	2501      	movs	r5, #1
 800780c:	e7c2      	b.n	8007794 <_scanf_float+0x198>
 800780e:	2d03      	cmp	r5, #3
 8007810:	d0e3      	beq.n	80077da <_scanf_float+0x1de>
 8007812:	2d05      	cmp	r5, #5
 8007814:	e7df      	b.n	80077d6 <_scanf_float+0x1da>
 8007816:	2d02      	cmp	r5, #2
 8007818:	f47f af23 	bne.w	8007662 <_scanf_float+0x66>
 800781c:	2503      	movs	r5, #3
 800781e:	e7b9      	b.n	8007794 <_scanf_float+0x198>
 8007820:	2d06      	cmp	r5, #6
 8007822:	f47f af1e 	bne.w	8007662 <_scanf_float+0x66>
 8007826:	2507      	movs	r5, #7
 8007828:	e7b4      	b.n	8007794 <_scanf_float+0x198>
 800782a:	6822      	ldr	r2, [r4, #0]
 800782c:	0591      	lsls	r1, r2, #22
 800782e:	f57f af18 	bpl.w	8007662 <_scanf_float+0x66>
 8007832:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007836:	6022      	str	r2, [r4, #0]
 8007838:	9702      	str	r7, [sp, #8]
 800783a:	e7ab      	b.n	8007794 <_scanf_float+0x198>
 800783c:	6822      	ldr	r2, [r4, #0]
 800783e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007842:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007846:	d005      	beq.n	8007854 <_scanf_float+0x258>
 8007848:	0550      	lsls	r0, r2, #21
 800784a:	f57f af0a 	bpl.w	8007662 <_scanf_float+0x66>
 800784e:	2f00      	cmp	r7, #0
 8007850:	f000 80db 	beq.w	8007a0a <_scanf_float+0x40e>
 8007854:	0591      	lsls	r1, r2, #22
 8007856:	bf58      	it	pl
 8007858:	9902      	ldrpl	r1, [sp, #8]
 800785a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800785e:	bf58      	it	pl
 8007860:	1a79      	subpl	r1, r7, r1
 8007862:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007866:	bf58      	it	pl
 8007868:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800786c:	6022      	str	r2, [r4, #0]
 800786e:	2700      	movs	r7, #0
 8007870:	e790      	b.n	8007794 <_scanf_float+0x198>
 8007872:	f04f 0a03 	mov.w	sl, #3
 8007876:	e78d      	b.n	8007794 <_scanf_float+0x198>
 8007878:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800787c:	4649      	mov	r1, r9
 800787e:	4640      	mov	r0, r8
 8007880:	4798      	blx	r3
 8007882:	2800      	cmp	r0, #0
 8007884:	f43f aedf 	beq.w	8007646 <_scanf_float+0x4a>
 8007888:	e6eb      	b.n	8007662 <_scanf_float+0x66>
 800788a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800788e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007892:	464a      	mov	r2, r9
 8007894:	4640      	mov	r0, r8
 8007896:	4798      	blx	r3
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	3b01      	subs	r3, #1
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	e6eb      	b.n	8007678 <_scanf_float+0x7c>
 80078a0:	1e6b      	subs	r3, r5, #1
 80078a2:	2b06      	cmp	r3, #6
 80078a4:	d824      	bhi.n	80078f0 <_scanf_float+0x2f4>
 80078a6:	2d02      	cmp	r5, #2
 80078a8:	d836      	bhi.n	8007918 <_scanf_float+0x31c>
 80078aa:	9b01      	ldr	r3, [sp, #4]
 80078ac:	429e      	cmp	r6, r3
 80078ae:	f67f aee7 	bls.w	8007680 <_scanf_float+0x84>
 80078b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078ba:	464a      	mov	r2, r9
 80078bc:	4640      	mov	r0, r8
 80078be:	4798      	blx	r3
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	6123      	str	r3, [r4, #16]
 80078c6:	e7f0      	b.n	80078aa <_scanf_float+0x2ae>
 80078c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80078d0:	464a      	mov	r2, r9
 80078d2:	4640      	mov	r0, r8
 80078d4:	4798      	blx	r3
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	3b01      	subs	r3, #1
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80078e0:	fa5f fa8a 	uxtb.w	sl, sl
 80078e4:	f1ba 0f02 	cmp.w	sl, #2
 80078e8:	d1ee      	bne.n	80078c8 <_scanf_float+0x2cc>
 80078ea:	3d03      	subs	r5, #3
 80078ec:	b2ed      	uxtb	r5, r5
 80078ee:	1b76      	subs	r6, r6, r5
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	05da      	lsls	r2, r3, #23
 80078f4:	d530      	bpl.n	8007958 <_scanf_float+0x35c>
 80078f6:	055b      	lsls	r3, r3, #21
 80078f8:	d511      	bpl.n	800791e <_scanf_float+0x322>
 80078fa:	9b01      	ldr	r3, [sp, #4]
 80078fc:	429e      	cmp	r6, r3
 80078fe:	f67f aebf 	bls.w	8007680 <_scanf_float+0x84>
 8007902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800790a:	464a      	mov	r2, r9
 800790c:	4640      	mov	r0, r8
 800790e:	4798      	blx	r3
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	3b01      	subs	r3, #1
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	e7f0      	b.n	80078fa <_scanf_float+0x2fe>
 8007918:	46aa      	mov	sl, r5
 800791a:	46b3      	mov	fp, r6
 800791c:	e7de      	b.n	80078dc <_scanf_float+0x2e0>
 800791e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	2965      	cmp	r1, #101	@ 0x65
 8007926:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800792a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	d00c      	beq.n	800794c <_scanf_float+0x350>
 8007932:	2945      	cmp	r1, #69	@ 0x45
 8007934:	d00a      	beq.n	800794c <_scanf_float+0x350>
 8007936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800793a:	464a      	mov	r2, r9
 800793c:	4640      	mov	r0, r8
 800793e:	4798      	blx	r3
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007946:	3b01      	subs	r3, #1
 8007948:	1eb5      	subs	r5, r6, #2
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007950:	464a      	mov	r2, r9
 8007952:	4640      	mov	r0, r8
 8007954:	4798      	blx	r3
 8007956:	462e      	mov	r6, r5
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	f012 0210 	ands.w	r2, r2, #16
 800795e:	d001      	beq.n	8007964 <_scanf_float+0x368>
 8007960:	2000      	movs	r0, #0
 8007962:	e68e      	b.n	8007682 <_scanf_float+0x86>
 8007964:	7032      	strb	r2, [r6, #0]
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007970:	d125      	bne.n	80079be <_scanf_float+0x3c2>
 8007972:	9b02      	ldr	r3, [sp, #8]
 8007974:	429f      	cmp	r7, r3
 8007976:	d00a      	beq.n	800798e <_scanf_float+0x392>
 8007978:	1bda      	subs	r2, r3, r7
 800797a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800797e:	429e      	cmp	r6, r3
 8007980:	bf28      	it	cs
 8007982:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007986:	4922      	ldr	r1, [pc, #136]	@ (8007a10 <_scanf_float+0x414>)
 8007988:	4630      	mov	r0, r6
 800798a:	f000 f845 	bl	8007a18 <siprintf>
 800798e:	9901      	ldr	r1, [sp, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	4640      	mov	r0, r8
 8007994:	f000 ff08 	bl	80087a8 <_strtod_r>
 8007998:	9b03      	ldr	r3, [sp, #12]
 800799a:	6821      	ldr	r1, [r4, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f011 0f02 	tst.w	r1, #2
 80079a2:	ec57 6b10 	vmov	r6, r7, d0
 80079a6:	f103 0204 	add.w	r2, r3, #4
 80079aa:	d015      	beq.n	80079d8 <_scanf_float+0x3dc>
 80079ac:	9903      	ldr	r1, [sp, #12]
 80079ae:	600a      	str	r2, [r1, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	e9c3 6700 	strd	r6, r7, [r3]
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60e3      	str	r3, [r4, #12]
 80079bc:	e7d0      	b.n	8007960 <_scanf_float+0x364>
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0e4      	beq.n	800798e <_scanf_float+0x392>
 80079c4:	9905      	ldr	r1, [sp, #20]
 80079c6:	230a      	movs	r3, #10
 80079c8:	3101      	adds	r1, #1
 80079ca:	4640      	mov	r0, r8
 80079cc:	f000 ff6c 	bl	80088a8 <_strtol_r>
 80079d0:	9b04      	ldr	r3, [sp, #16]
 80079d2:	9e05      	ldr	r6, [sp, #20]
 80079d4:	1ac2      	subs	r2, r0, r3
 80079d6:	e7d0      	b.n	800797a <_scanf_float+0x37e>
 80079d8:	f011 0f04 	tst.w	r1, #4
 80079dc:	9903      	ldr	r1, [sp, #12]
 80079de:	600a      	str	r2, [r1, #0]
 80079e0:	d1e6      	bne.n	80079b0 <_scanf_float+0x3b4>
 80079e2:	681d      	ldr	r5, [r3, #0]
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f9 f8b6 	bl	8000b5c <__aeabi_dcmpun>
 80079f0:	b128      	cbz	r0, 80079fe <_scanf_float+0x402>
 80079f2:	4808      	ldr	r0, [pc, #32]	@ (8007a14 <_scanf_float+0x418>)
 80079f4:	f000 ffdc 	bl	80089b0 <nanf>
 80079f8:	ed85 0a00 	vstr	s0, [r5]
 80079fc:	e7db      	b.n	80079b6 <_scanf_float+0x3ba>
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f9 f909 	bl	8000c18 <__aeabi_d2f>
 8007a06:	6028      	str	r0, [r5, #0]
 8007a08:	e7d5      	b.n	80079b6 <_scanf_float+0x3ba>
 8007a0a:	2700      	movs	r7, #0
 8007a0c:	e62e      	b.n	800766c <_scanf_float+0x70>
 8007a0e:	bf00      	nop
 8007a10:	0800b528 	.word	0x0800b528
 8007a14:	0800b6c9 	.word	0x0800b6c9

08007a18 <siprintf>:
 8007a18:	b40e      	push	{r1, r2, r3}
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	b09d      	sub	sp, #116	@ 0x74
 8007a1e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007a20:	9002      	str	r0, [sp, #8]
 8007a22:	9006      	str	r0, [sp, #24]
 8007a24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a28:	480a      	ldr	r0, [pc, #40]	@ (8007a54 <siprintf+0x3c>)
 8007a2a:	9107      	str	r1, [sp, #28]
 8007a2c:	9104      	str	r1, [sp, #16]
 8007a2e:	490a      	ldr	r1, [pc, #40]	@ (8007a58 <siprintf+0x40>)
 8007a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a34:	9105      	str	r1, [sp, #20]
 8007a36:	2400      	movs	r4, #0
 8007a38:	a902      	add	r1, sp, #8
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007a40:	f002 f9aa 	bl	8009d98 <_svfiprintf_r>
 8007a44:	9b02      	ldr	r3, [sp, #8]
 8007a46:	701c      	strb	r4, [r3, #0]
 8007a48:	b01d      	add	sp, #116	@ 0x74
 8007a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4e:	b003      	add	sp, #12
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20000184 	.word	0x20000184
 8007a58:	ffff0208 	.word	0xffff0208

08007a5c <std>:
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	4604      	mov	r4, r0
 8007a62:	e9c0 3300 	strd	r3, r3, [r0]
 8007a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a6a:	6083      	str	r3, [r0, #8]
 8007a6c:	8181      	strh	r1, [r0, #12]
 8007a6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a70:	81c2      	strh	r2, [r0, #14]
 8007a72:	6183      	str	r3, [r0, #24]
 8007a74:	4619      	mov	r1, r3
 8007a76:	2208      	movs	r2, #8
 8007a78:	305c      	adds	r0, #92	@ 0x5c
 8007a7a:	f000 ff35 	bl	80088e8 <memset>
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <std+0x58>)
 8007a80:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a82:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab8 <std+0x5c>)
 8007a84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <std+0x60>)
 8007a88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac0 <std+0x64>)
 8007a8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac4 <std+0x68>)
 8007a90:	6224      	str	r4, [r4, #32]
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d006      	beq.n	8007aa4 <std+0x48>
 8007a96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a9a:	4294      	cmp	r4, r2
 8007a9c:	d002      	beq.n	8007aa4 <std+0x48>
 8007a9e:	33d0      	adds	r3, #208	@ 0xd0
 8007aa0:	429c      	cmp	r4, r3
 8007aa2:	d105      	bne.n	8007ab0 <std+0x54>
 8007aa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aac:	f000 bf60 	b.w	8008970 <__retarget_lock_init_recursive>
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	bf00      	nop
 8007ab4:	0800abcd 	.word	0x0800abcd
 8007ab8:	0800abef 	.word	0x0800abef
 8007abc:	0800ac27 	.word	0x0800ac27
 8007ac0:	0800ac4b 	.word	0x0800ac4b
 8007ac4:	200002f8 	.word	0x200002f8

08007ac8 <stdio_exit_handler>:
 8007ac8:	4a02      	ldr	r2, [pc, #8]	@ (8007ad4 <stdio_exit_handler+0xc>)
 8007aca:	4903      	ldr	r1, [pc, #12]	@ (8007ad8 <stdio_exit_handler+0x10>)
 8007acc:	4803      	ldr	r0, [pc, #12]	@ (8007adc <stdio_exit_handler+0x14>)
 8007ace:	f000 beed 	b.w	80088ac <_fwalk_sglue>
 8007ad2:	bf00      	nop
 8007ad4:	2000000c 	.word	0x2000000c
 8007ad8:	0800a211 	.word	0x0800a211
 8007adc:	20000188 	.word	0x20000188

08007ae0 <cleanup_stdio>:
 8007ae0:	6841      	ldr	r1, [r0, #4]
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8007b14 <cleanup_stdio+0x34>)
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	4604      	mov	r4, r0
 8007aea:	d001      	beq.n	8007af0 <cleanup_stdio+0x10>
 8007aec:	f002 fb90 	bl	800a210 <_fflush_r>
 8007af0:	68a1      	ldr	r1, [r4, #8]
 8007af2:	4b09      	ldr	r3, [pc, #36]	@ (8007b18 <cleanup_stdio+0x38>)
 8007af4:	4299      	cmp	r1, r3
 8007af6:	d002      	beq.n	8007afe <cleanup_stdio+0x1e>
 8007af8:	4620      	mov	r0, r4
 8007afa:	f002 fb89 	bl	800a210 <_fflush_r>
 8007afe:	68e1      	ldr	r1, [r4, #12]
 8007b00:	4b06      	ldr	r3, [pc, #24]	@ (8007b1c <cleanup_stdio+0x3c>)
 8007b02:	4299      	cmp	r1, r3
 8007b04:	d004      	beq.n	8007b10 <cleanup_stdio+0x30>
 8007b06:	4620      	mov	r0, r4
 8007b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b0c:	f002 bb80 	b.w	800a210 <_fflush_r>
 8007b10:	bd10      	pop	{r4, pc}
 8007b12:	bf00      	nop
 8007b14:	200002f8 	.word	0x200002f8
 8007b18:	20000360 	.word	0x20000360
 8007b1c:	200003c8 	.word	0x200003c8

08007b20 <global_stdio_init.part.0>:
 8007b20:	b510      	push	{r4, lr}
 8007b22:	4b0b      	ldr	r3, [pc, #44]	@ (8007b50 <global_stdio_init.part.0+0x30>)
 8007b24:	4c0b      	ldr	r4, [pc, #44]	@ (8007b54 <global_stdio_init.part.0+0x34>)
 8007b26:	4a0c      	ldr	r2, [pc, #48]	@ (8007b58 <global_stdio_init.part.0+0x38>)
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2104      	movs	r1, #4
 8007b30:	f7ff ff94 	bl	8007a5c <std>
 8007b34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b38:	2201      	movs	r2, #1
 8007b3a:	2109      	movs	r1, #9
 8007b3c:	f7ff ff8e 	bl	8007a5c <std>
 8007b40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b44:	2202      	movs	r2, #2
 8007b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b4a:	2112      	movs	r1, #18
 8007b4c:	f7ff bf86 	b.w	8007a5c <std>
 8007b50:	20000430 	.word	0x20000430
 8007b54:	200002f8 	.word	0x200002f8
 8007b58:	08007ac9 	.word	0x08007ac9

08007b5c <__sfp_lock_acquire>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <__sfp_lock_acquire+0x8>)
 8007b5e:	f000 bf08 	b.w	8008972 <__retarget_lock_acquire_recursive>
 8007b62:	bf00      	nop
 8007b64:	20000435 	.word	0x20000435

08007b68 <__sfp_lock_release>:
 8007b68:	4801      	ldr	r0, [pc, #4]	@ (8007b70 <__sfp_lock_release+0x8>)
 8007b6a:	f000 bf03 	b.w	8008974 <__retarget_lock_release_recursive>
 8007b6e:	bf00      	nop
 8007b70:	20000435 	.word	0x20000435

08007b74 <__sinit>:
 8007b74:	b510      	push	{r4, lr}
 8007b76:	4604      	mov	r4, r0
 8007b78:	f7ff fff0 	bl	8007b5c <__sfp_lock_acquire>
 8007b7c:	6a23      	ldr	r3, [r4, #32]
 8007b7e:	b11b      	cbz	r3, 8007b88 <__sinit+0x14>
 8007b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b84:	f7ff bff0 	b.w	8007b68 <__sfp_lock_release>
 8007b88:	4b04      	ldr	r3, [pc, #16]	@ (8007b9c <__sinit+0x28>)
 8007b8a:	6223      	str	r3, [r4, #32]
 8007b8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ba0 <__sinit+0x2c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1f5      	bne.n	8007b80 <__sinit+0xc>
 8007b94:	f7ff ffc4 	bl	8007b20 <global_stdio_init.part.0>
 8007b98:	e7f2      	b.n	8007b80 <__sinit+0xc>
 8007b9a:	bf00      	nop
 8007b9c:	08007ae1 	.word	0x08007ae1
 8007ba0:	20000430 	.word	0x20000430

08007ba4 <sulp>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	460d      	mov	r5, r1
 8007baa:	ec45 4b10 	vmov	d0, r4, r5
 8007bae:	4616      	mov	r6, r2
 8007bb0:	f002 fece 	bl	800a950 <__ulp>
 8007bb4:	ec51 0b10 	vmov	r0, r1, d0
 8007bb8:	b17e      	cbz	r6, 8007bda <sulp+0x36>
 8007bba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007bbe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd09      	ble.n	8007bda <sulp+0x36>
 8007bc6:	051b      	lsls	r3, r3, #20
 8007bc8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007bcc:	2400      	movs	r4, #0
 8007bce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	f7f8 fd27 	bl	8000628 <__aeabi_dmul>
 8007bda:	ec41 0b10 	vmov	d0, r0, r1
 8007bde:	bd70      	pop	{r4, r5, r6, pc}

08007be0 <_strtod_l>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	b09f      	sub	sp, #124	@ 0x7c
 8007be6:	460c      	mov	r4, r1
 8007be8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007bea:	2200      	movs	r2, #0
 8007bec:	921a      	str	r2, [sp, #104]	@ 0x68
 8007bee:	9005      	str	r0, [sp, #20]
 8007bf0:	f04f 0a00 	mov.w	sl, #0
 8007bf4:	f04f 0b00 	mov.w	fp, #0
 8007bf8:	460a      	mov	r2, r1
 8007bfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bfc:	7811      	ldrb	r1, [r2, #0]
 8007bfe:	292b      	cmp	r1, #43	@ 0x2b
 8007c00:	d04a      	beq.n	8007c98 <_strtod_l+0xb8>
 8007c02:	d838      	bhi.n	8007c76 <_strtod_l+0x96>
 8007c04:	290d      	cmp	r1, #13
 8007c06:	d832      	bhi.n	8007c6e <_strtod_l+0x8e>
 8007c08:	2908      	cmp	r1, #8
 8007c0a:	d832      	bhi.n	8007c72 <_strtod_l+0x92>
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d03b      	beq.n	8007c88 <_strtod_l+0xa8>
 8007c10:	2200      	movs	r2, #0
 8007c12:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007c16:	782a      	ldrb	r2, [r5, #0]
 8007c18:	2a30      	cmp	r2, #48	@ 0x30
 8007c1a:	f040 80b2 	bne.w	8007d82 <_strtod_l+0x1a2>
 8007c1e:	786a      	ldrb	r2, [r5, #1]
 8007c20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c24:	2a58      	cmp	r2, #88	@ 0x58
 8007c26:	d16e      	bne.n	8007d06 <_strtod_l+0x126>
 8007c28:	9302      	str	r3, [sp, #8]
 8007c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4a8f      	ldr	r2, [pc, #572]	@ (8007e70 <_strtod_l+0x290>)
 8007c34:	9805      	ldr	r0, [sp, #20]
 8007c36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c38:	a919      	add	r1, sp, #100	@ 0x64
 8007c3a:	f001 fd81 	bl	8009740 <__gethex>
 8007c3e:	f010 060f 	ands.w	r6, r0, #15
 8007c42:	4604      	mov	r4, r0
 8007c44:	d005      	beq.n	8007c52 <_strtod_l+0x72>
 8007c46:	2e06      	cmp	r6, #6
 8007c48:	d128      	bne.n	8007c9c <_strtod_l+0xbc>
 8007c4a:	3501      	adds	r5, #1
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c50:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 858e 	bne.w	8008776 <_strtod_l+0xb96>
 8007c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c5c:	b1cb      	cbz	r3, 8007c92 <_strtod_l+0xb2>
 8007c5e:	4652      	mov	r2, sl
 8007c60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007c64:	ec43 2b10 	vmov	d0, r2, r3
 8007c68:	b01f      	add	sp, #124	@ 0x7c
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	2920      	cmp	r1, #32
 8007c70:	d1ce      	bne.n	8007c10 <_strtod_l+0x30>
 8007c72:	3201      	adds	r2, #1
 8007c74:	e7c1      	b.n	8007bfa <_strtod_l+0x1a>
 8007c76:	292d      	cmp	r1, #45	@ 0x2d
 8007c78:	d1ca      	bne.n	8007c10 <_strtod_l+0x30>
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	910e      	str	r1, [sp, #56]	@ 0x38
 8007c7e:	1c51      	adds	r1, r2, #1
 8007c80:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c82:	7852      	ldrb	r2, [r2, #1]
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	d1c5      	bne.n	8007c14 <_strtod_l+0x34>
 8007c88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 8570 	bne.w	8008772 <_strtod_l+0xb92>
 8007c92:	4652      	mov	r2, sl
 8007c94:	465b      	mov	r3, fp
 8007c96:	e7e5      	b.n	8007c64 <_strtod_l+0x84>
 8007c98:	2100      	movs	r1, #0
 8007c9a:	e7ef      	b.n	8007c7c <_strtod_l+0x9c>
 8007c9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c9e:	b13a      	cbz	r2, 8007cb0 <_strtod_l+0xd0>
 8007ca0:	2135      	movs	r1, #53	@ 0x35
 8007ca2:	a81c      	add	r0, sp, #112	@ 0x70
 8007ca4:	f002 ff4e 	bl	800ab44 <__copybits>
 8007ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007caa:	9805      	ldr	r0, [sp, #20]
 8007cac:	f002 fb24 	bl	800a2f8 <_Bfree>
 8007cb0:	3e01      	subs	r6, #1
 8007cb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007cb4:	2e04      	cmp	r6, #4
 8007cb6:	d806      	bhi.n	8007cc6 <_strtod_l+0xe6>
 8007cb8:	e8df f006 	tbb	[pc, r6]
 8007cbc:	201d0314 	.word	0x201d0314
 8007cc0:	14          	.byte	0x14
 8007cc1:	00          	.byte	0x00
 8007cc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007cc6:	05e1      	lsls	r1, r4, #23
 8007cc8:	bf48      	it	mi
 8007cca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007cce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cd2:	0d1b      	lsrs	r3, r3, #20
 8007cd4:	051b      	lsls	r3, r3, #20
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1bb      	bne.n	8007c52 <_strtod_l+0x72>
 8007cda:	f000 fe1f 	bl	800891c <__errno>
 8007cde:	2322      	movs	r3, #34	@ 0x22
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	e7b6      	b.n	8007c52 <_strtod_l+0x72>
 8007ce4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ce8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007cec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007cf0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007cf4:	e7e7      	b.n	8007cc6 <_strtod_l+0xe6>
 8007cf6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007e78 <_strtod_l+0x298>
 8007cfa:	e7e4      	b.n	8007cc6 <_strtod_l+0xe6>
 8007cfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007d00:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007d04:	e7df      	b.n	8007cc6 <_strtod_l+0xe6>
 8007d06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	2b30      	cmp	r3, #48	@ 0x30
 8007d10:	d0f9      	beq.n	8007d06 <_strtod_l+0x126>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d09d      	beq.n	8007c52 <_strtod_l+0x72>
 8007d16:	2301      	movs	r3, #1
 8007d18:	2700      	movs	r7, #0
 8007d1a:	9308      	str	r3, [sp, #32]
 8007d1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d20:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007d22:	46b9      	mov	r9, r7
 8007d24:	220a      	movs	r2, #10
 8007d26:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d28:	7805      	ldrb	r5, [r0, #0]
 8007d2a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d2e:	b2d9      	uxtb	r1, r3
 8007d30:	2909      	cmp	r1, #9
 8007d32:	d928      	bls.n	8007d86 <_strtod_l+0x1a6>
 8007d34:	494f      	ldr	r1, [pc, #316]	@ (8007e74 <_strtod_l+0x294>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	f000 fdde 	bl	80088f8 <strncmp>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d032      	beq.n	8007da6 <_strtod_l+0x1c6>
 8007d40:	2000      	movs	r0, #0
 8007d42:	462a      	mov	r2, r5
 8007d44:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d46:	464d      	mov	r5, r9
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2a65      	cmp	r2, #101	@ 0x65
 8007d4c:	d001      	beq.n	8007d52 <_strtod_l+0x172>
 8007d4e:	2a45      	cmp	r2, #69	@ 0x45
 8007d50:	d114      	bne.n	8007d7c <_strtod_l+0x19c>
 8007d52:	b91d      	cbnz	r5, 8007d5c <_strtod_l+0x17c>
 8007d54:	9a08      	ldr	r2, [sp, #32]
 8007d56:	4302      	orrs	r2, r0
 8007d58:	d096      	beq.n	8007c88 <_strtod_l+0xa8>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d5e:	1c62      	adds	r2, r4, #1
 8007d60:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d62:	7862      	ldrb	r2, [r4, #1]
 8007d64:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d66:	d07a      	beq.n	8007e5e <_strtod_l+0x27e>
 8007d68:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d6a:	d07e      	beq.n	8007e6a <_strtod_l+0x28a>
 8007d6c:	f04f 0c00 	mov.w	ip, #0
 8007d70:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d74:	2909      	cmp	r1, #9
 8007d76:	f240 8085 	bls.w	8007e84 <_strtod_l+0x2a4>
 8007d7a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	e0a5      	b.n	8007ece <_strtod_l+0x2ee>
 8007d82:	2300      	movs	r3, #0
 8007d84:	e7c8      	b.n	8007d18 <_strtod_l+0x138>
 8007d86:	f1b9 0f08 	cmp.w	r9, #8
 8007d8a:	bfd8      	it	le
 8007d8c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007d8e:	f100 0001 	add.w	r0, r0, #1
 8007d92:	bfda      	itte	le
 8007d94:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d98:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007d9a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007d9e:	f109 0901 	add.w	r9, r9, #1
 8007da2:	9019      	str	r0, [sp, #100]	@ 0x64
 8007da4:	e7bf      	b.n	8007d26 <_strtod_l+0x146>
 8007da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dac:	785a      	ldrb	r2, [r3, #1]
 8007dae:	f1b9 0f00 	cmp.w	r9, #0
 8007db2:	d03b      	beq.n	8007e2c <_strtod_l+0x24c>
 8007db4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007db6:	464d      	mov	r5, r9
 8007db8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007dbc:	2b09      	cmp	r3, #9
 8007dbe:	d912      	bls.n	8007de6 <_strtod_l+0x206>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7c2      	b.n	8007d4a <_strtod_l+0x16a>
 8007dc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dca:	785a      	ldrb	r2, [r3, #1]
 8007dcc:	3001      	adds	r0, #1
 8007dce:	2a30      	cmp	r2, #48	@ 0x30
 8007dd0:	d0f8      	beq.n	8007dc4 <_strtod_l+0x1e4>
 8007dd2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	f200 84d2 	bhi.w	8008780 <_strtod_l+0xba0>
 8007ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dde:	900a      	str	r0, [sp, #40]	@ 0x28
 8007de0:	2000      	movs	r0, #0
 8007de2:	930c      	str	r3, [sp, #48]	@ 0x30
 8007de4:	4605      	mov	r5, r0
 8007de6:	3a30      	subs	r2, #48	@ 0x30
 8007de8:	f100 0301 	add.w	r3, r0, #1
 8007dec:	d018      	beq.n	8007e20 <_strtod_l+0x240>
 8007dee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007df0:	4419      	add	r1, r3
 8007df2:	910a      	str	r1, [sp, #40]	@ 0x28
 8007df4:	462e      	mov	r6, r5
 8007df6:	f04f 0e0a 	mov.w	lr, #10
 8007dfa:	1c71      	adds	r1, r6, #1
 8007dfc:	eba1 0c05 	sub.w	ip, r1, r5
 8007e00:	4563      	cmp	r3, ip
 8007e02:	dc15      	bgt.n	8007e30 <_strtod_l+0x250>
 8007e04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007e08:	182b      	adds	r3, r5, r0
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	f105 0501 	add.w	r5, r5, #1
 8007e10:	4405      	add	r5, r0
 8007e12:	dc1a      	bgt.n	8007e4a <_strtod_l+0x26a>
 8007e14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e16:	230a      	movs	r3, #10
 8007e18:	fb03 2301 	mla	r3, r3, r1, r2
 8007e1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e22:	1c51      	adds	r1, r2, #1
 8007e24:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e26:	7852      	ldrb	r2, [r2, #1]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	e7c5      	b.n	8007db8 <_strtod_l+0x1d8>
 8007e2c:	4648      	mov	r0, r9
 8007e2e:	e7ce      	b.n	8007dce <_strtod_l+0x1ee>
 8007e30:	2e08      	cmp	r6, #8
 8007e32:	dc05      	bgt.n	8007e40 <_strtod_l+0x260>
 8007e34:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007e36:	fb0e f606 	mul.w	r6, lr, r6
 8007e3a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007e3c:	460e      	mov	r6, r1
 8007e3e:	e7dc      	b.n	8007dfa <_strtod_l+0x21a>
 8007e40:	2910      	cmp	r1, #16
 8007e42:	bfd8      	it	le
 8007e44:	fb0e f707 	mulle.w	r7, lr, r7
 8007e48:	e7f8      	b.n	8007e3c <_strtod_l+0x25c>
 8007e4a:	2b0f      	cmp	r3, #15
 8007e4c:	bfdc      	itt	le
 8007e4e:	230a      	movle	r3, #10
 8007e50:	fb03 2707 	mlale	r7, r3, r7, r2
 8007e54:	e7e3      	b.n	8007e1e <_strtod_l+0x23e>
 8007e56:	2300      	movs	r3, #0
 8007e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e77a      	b.n	8007d54 <_strtod_l+0x174>
 8007e5e:	f04f 0c00 	mov.w	ip, #0
 8007e62:	1ca2      	adds	r2, r4, #2
 8007e64:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e66:	78a2      	ldrb	r2, [r4, #2]
 8007e68:	e782      	b.n	8007d70 <_strtod_l+0x190>
 8007e6a:	f04f 0c01 	mov.w	ip, #1
 8007e6e:	e7f8      	b.n	8007e62 <_strtod_l+0x282>
 8007e70:	0800b6e0 	.word	0x0800b6e0
 8007e74:	0800b52d 	.word	0x0800b52d
 8007e78:	7ff00000 	.word	0x7ff00000
 8007e7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e7e:	1c51      	adds	r1, r2, #1
 8007e80:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e82:	7852      	ldrb	r2, [r2, #1]
 8007e84:	2a30      	cmp	r2, #48	@ 0x30
 8007e86:	d0f9      	beq.n	8007e7c <_strtod_l+0x29c>
 8007e88:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e8c:	2908      	cmp	r1, #8
 8007e8e:	f63f af75 	bhi.w	8007d7c <_strtod_l+0x19c>
 8007e92:	3a30      	subs	r2, #48	@ 0x30
 8007e94:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e98:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e9a:	f04f 080a 	mov.w	r8, #10
 8007e9e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ea0:	1c56      	adds	r6, r2, #1
 8007ea2:	9619      	str	r6, [sp, #100]	@ 0x64
 8007ea4:	7852      	ldrb	r2, [r2, #1]
 8007ea6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007eaa:	f1be 0f09 	cmp.w	lr, #9
 8007eae:	d939      	bls.n	8007f24 <_strtod_l+0x344>
 8007eb0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007eb2:	1a76      	subs	r6, r6, r1
 8007eb4:	2e08      	cmp	r6, #8
 8007eb6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007eba:	dc03      	bgt.n	8007ec4 <_strtod_l+0x2e4>
 8007ebc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ebe:	4588      	cmp	r8, r1
 8007ec0:	bfa8      	it	ge
 8007ec2:	4688      	movge	r8, r1
 8007ec4:	f1bc 0f00 	cmp.w	ip, #0
 8007ec8:	d001      	beq.n	8007ece <_strtod_l+0x2ee>
 8007eca:	f1c8 0800 	rsb	r8, r8, #0
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	d14e      	bne.n	8007f70 <_strtod_l+0x390>
 8007ed2:	9908      	ldr	r1, [sp, #32]
 8007ed4:	4308      	orrs	r0, r1
 8007ed6:	f47f aebc 	bne.w	8007c52 <_strtod_l+0x72>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f47f aed4 	bne.w	8007c88 <_strtod_l+0xa8>
 8007ee0:	2a69      	cmp	r2, #105	@ 0x69
 8007ee2:	d028      	beq.n	8007f36 <_strtod_l+0x356>
 8007ee4:	dc25      	bgt.n	8007f32 <_strtod_l+0x352>
 8007ee6:	2a49      	cmp	r2, #73	@ 0x49
 8007ee8:	d025      	beq.n	8007f36 <_strtod_l+0x356>
 8007eea:	2a4e      	cmp	r2, #78	@ 0x4e
 8007eec:	f47f aecc 	bne.w	8007c88 <_strtod_l+0xa8>
 8007ef0:	499a      	ldr	r1, [pc, #616]	@ (800815c <_strtod_l+0x57c>)
 8007ef2:	a819      	add	r0, sp, #100	@ 0x64
 8007ef4:	f001 fe46 	bl	8009b84 <__match>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f43f aec5 	beq.w	8007c88 <_strtod_l+0xa8>
 8007efe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b28      	cmp	r3, #40	@ 0x28
 8007f04:	d12e      	bne.n	8007f64 <_strtod_l+0x384>
 8007f06:	4996      	ldr	r1, [pc, #600]	@ (8008160 <_strtod_l+0x580>)
 8007f08:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f0a:	a819      	add	r0, sp, #100	@ 0x64
 8007f0c:	f001 fe4e 	bl	8009bac <__hexnan>
 8007f10:	2805      	cmp	r0, #5
 8007f12:	d127      	bne.n	8007f64 <_strtod_l+0x384>
 8007f14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007f1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007f1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f22:	e696      	b.n	8007c52 <_strtod_l+0x72>
 8007f24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f26:	fb08 2101 	mla	r1, r8, r1, r2
 8007f2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f30:	e7b5      	b.n	8007e9e <_strtod_l+0x2be>
 8007f32:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f34:	e7da      	b.n	8007eec <_strtod_l+0x30c>
 8007f36:	498b      	ldr	r1, [pc, #556]	@ (8008164 <_strtod_l+0x584>)
 8007f38:	a819      	add	r0, sp, #100	@ 0x64
 8007f3a:	f001 fe23 	bl	8009b84 <__match>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f43f aea2 	beq.w	8007c88 <_strtod_l+0xa8>
 8007f44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f46:	4988      	ldr	r1, [pc, #544]	@ (8008168 <_strtod_l+0x588>)
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	a819      	add	r0, sp, #100	@ 0x64
 8007f4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f4e:	f001 fe19 	bl	8009b84 <__match>
 8007f52:	b910      	cbnz	r0, 8007f5a <_strtod_l+0x37a>
 8007f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f56:	3301      	adds	r3, #1
 8007f58:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f5a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008178 <_strtod_l+0x598>
 8007f5e:	f04f 0a00 	mov.w	sl, #0
 8007f62:	e676      	b.n	8007c52 <_strtod_l+0x72>
 8007f64:	4881      	ldr	r0, [pc, #516]	@ (800816c <_strtod_l+0x58c>)
 8007f66:	f000 fd1b 	bl	80089a0 <nan>
 8007f6a:	ec5b ab10 	vmov	sl, fp, d0
 8007f6e:	e670      	b.n	8007c52 <_strtod_l+0x72>
 8007f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007f74:	eba8 0303 	sub.w	r3, r8, r3
 8007f78:	f1b9 0f00 	cmp.w	r9, #0
 8007f7c:	bf08      	it	eq
 8007f7e:	46a9      	moveq	r9, r5
 8007f80:	2d10      	cmp	r5, #16
 8007f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f84:	462c      	mov	r4, r5
 8007f86:	bfa8      	it	ge
 8007f88:	2410      	movge	r4, #16
 8007f8a:	f7f8 fad3 	bl	8000534 <__aeabi_ui2d>
 8007f8e:	2d09      	cmp	r5, #9
 8007f90:	4682      	mov	sl, r0
 8007f92:	468b      	mov	fp, r1
 8007f94:	dc13      	bgt.n	8007fbe <_strtod_l+0x3de>
 8007f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f43f ae5a 	beq.w	8007c52 <_strtod_l+0x72>
 8007f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa0:	dd78      	ble.n	8008094 <_strtod_l+0x4b4>
 8007fa2:	2b16      	cmp	r3, #22
 8007fa4:	dc5f      	bgt.n	8008066 <_strtod_l+0x486>
 8007fa6:	4972      	ldr	r1, [pc, #456]	@ (8008170 <_strtod_l+0x590>)
 8007fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	f7f8 fb38 	bl	8000628 <__aeabi_dmul>
 8007fb8:	4682      	mov	sl, r0
 8007fba:	468b      	mov	fp, r1
 8007fbc:	e649      	b.n	8007c52 <_strtod_l+0x72>
 8007fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8008170 <_strtod_l+0x590>)
 8007fc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007fc8:	f7f8 fb2e 	bl	8000628 <__aeabi_dmul>
 8007fcc:	4682      	mov	sl, r0
 8007fce:	4638      	mov	r0, r7
 8007fd0:	468b      	mov	fp, r1
 8007fd2:	f7f8 faaf 	bl	8000534 <__aeabi_ui2d>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4650      	mov	r0, sl
 8007fdc:	4659      	mov	r1, fp
 8007fde:	f7f8 f96d 	bl	80002bc <__adddf3>
 8007fe2:	2d0f      	cmp	r5, #15
 8007fe4:	4682      	mov	sl, r0
 8007fe6:	468b      	mov	fp, r1
 8007fe8:	ddd5      	ble.n	8007f96 <_strtod_l+0x3b6>
 8007fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fec:	1b2c      	subs	r4, r5, r4
 8007fee:	441c      	add	r4, r3
 8007ff0:	2c00      	cmp	r4, #0
 8007ff2:	f340 8093 	ble.w	800811c <_strtod_l+0x53c>
 8007ff6:	f014 030f 	ands.w	r3, r4, #15
 8007ffa:	d00a      	beq.n	8008012 <_strtod_l+0x432>
 8007ffc:	495c      	ldr	r1, [pc, #368]	@ (8008170 <_strtod_l+0x590>)
 8007ffe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008002:	4652      	mov	r2, sl
 8008004:	465b      	mov	r3, fp
 8008006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800800a:	f7f8 fb0d 	bl	8000628 <__aeabi_dmul>
 800800e:	4682      	mov	sl, r0
 8008010:	468b      	mov	fp, r1
 8008012:	f034 040f 	bics.w	r4, r4, #15
 8008016:	d073      	beq.n	8008100 <_strtod_l+0x520>
 8008018:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800801c:	dd49      	ble.n	80080b2 <_strtod_l+0x4d2>
 800801e:	2400      	movs	r4, #0
 8008020:	46a0      	mov	r8, r4
 8008022:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008024:	46a1      	mov	r9, r4
 8008026:	9a05      	ldr	r2, [sp, #20]
 8008028:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008178 <_strtod_l+0x598>
 800802c:	2322      	movs	r3, #34	@ 0x22
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	f04f 0a00 	mov.w	sl, #0
 8008034:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008036:	2b00      	cmp	r3, #0
 8008038:	f43f ae0b 	beq.w	8007c52 <_strtod_l+0x72>
 800803c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800803e:	9805      	ldr	r0, [sp, #20]
 8008040:	f002 f95a 	bl	800a2f8 <_Bfree>
 8008044:	9805      	ldr	r0, [sp, #20]
 8008046:	4649      	mov	r1, r9
 8008048:	f002 f956 	bl	800a2f8 <_Bfree>
 800804c:	9805      	ldr	r0, [sp, #20]
 800804e:	4641      	mov	r1, r8
 8008050:	f002 f952 	bl	800a2f8 <_Bfree>
 8008054:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008056:	9805      	ldr	r0, [sp, #20]
 8008058:	f002 f94e 	bl	800a2f8 <_Bfree>
 800805c:	9805      	ldr	r0, [sp, #20]
 800805e:	4621      	mov	r1, r4
 8008060:	f002 f94a 	bl	800a2f8 <_Bfree>
 8008064:	e5f5      	b.n	8007c52 <_strtod_l+0x72>
 8008066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008068:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800806c:	4293      	cmp	r3, r2
 800806e:	dbbc      	blt.n	8007fea <_strtod_l+0x40a>
 8008070:	4c3f      	ldr	r4, [pc, #252]	@ (8008170 <_strtod_l+0x590>)
 8008072:	f1c5 050f 	rsb	r5, r5, #15
 8008076:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800807a:	4652      	mov	r2, sl
 800807c:	465b      	mov	r3, fp
 800807e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008082:	f7f8 fad1 	bl	8000628 <__aeabi_dmul>
 8008086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008088:	1b5d      	subs	r5, r3, r5
 800808a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800808e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008092:	e78f      	b.n	8007fb4 <_strtod_l+0x3d4>
 8008094:	3316      	adds	r3, #22
 8008096:	dba8      	blt.n	8007fea <_strtod_l+0x40a>
 8008098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809a:	eba3 0808 	sub.w	r8, r3, r8
 800809e:	4b34      	ldr	r3, [pc, #208]	@ (8008170 <_strtod_l+0x590>)
 80080a0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80080a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	f7f8 fbe6 	bl	800087c <__aeabi_ddiv>
 80080b0:	e782      	b.n	8007fb8 <_strtod_l+0x3d8>
 80080b2:	2300      	movs	r3, #0
 80080b4:	4f2f      	ldr	r7, [pc, #188]	@ (8008174 <_strtod_l+0x594>)
 80080b6:	1124      	asrs	r4, r4, #4
 80080b8:	4650      	mov	r0, sl
 80080ba:	4659      	mov	r1, fp
 80080bc:	461e      	mov	r6, r3
 80080be:	2c01      	cmp	r4, #1
 80080c0:	dc21      	bgt.n	8008106 <_strtod_l+0x526>
 80080c2:	b10b      	cbz	r3, 80080c8 <_strtod_l+0x4e8>
 80080c4:	4682      	mov	sl, r0
 80080c6:	468b      	mov	fp, r1
 80080c8:	492a      	ldr	r1, [pc, #168]	@ (8008174 <_strtod_l+0x594>)
 80080ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080d2:	4652      	mov	r2, sl
 80080d4:	465b      	mov	r3, fp
 80080d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080da:	f7f8 faa5 	bl	8000628 <__aeabi_dmul>
 80080de:	4b26      	ldr	r3, [pc, #152]	@ (8008178 <_strtod_l+0x598>)
 80080e0:	460a      	mov	r2, r1
 80080e2:	400b      	ands	r3, r1
 80080e4:	4925      	ldr	r1, [pc, #148]	@ (800817c <_strtod_l+0x59c>)
 80080e6:	428b      	cmp	r3, r1
 80080e8:	4682      	mov	sl, r0
 80080ea:	d898      	bhi.n	800801e <_strtod_l+0x43e>
 80080ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80080f0:	428b      	cmp	r3, r1
 80080f2:	bf86      	itte	hi
 80080f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008180 <_strtod_l+0x5a0>
 80080f8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80080fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008100:	2300      	movs	r3, #0
 8008102:	9308      	str	r3, [sp, #32]
 8008104:	e076      	b.n	80081f4 <_strtod_l+0x614>
 8008106:	07e2      	lsls	r2, r4, #31
 8008108:	d504      	bpl.n	8008114 <_strtod_l+0x534>
 800810a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810e:	f7f8 fa8b 	bl	8000628 <__aeabi_dmul>
 8008112:	2301      	movs	r3, #1
 8008114:	3601      	adds	r6, #1
 8008116:	1064      	asrs	r4, r4, #1
 8008118:	3708      	adds	r7, #8
 800811a:	e7d0      	b.n	80080be <_strtod_l+0x4de>
 800811c:	d0f0      	beq.n	8008100 <_strtod_l+0x520>
 800811e:	4264      	negs	r4, r4
 8008120:	f014 020f 	ands.w	r2, r4, #15
 8008124:	d00a      	beq.n	800813c <_strtod_l+0x55c>
 8008126:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <_strtod_l+0x590>)
 8008128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812c:	4650      	mov	r0, sl
 800812e:	4659      	mov	r1, fp
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	f7f8 fba2 	bl	800087c <__aeabi_ddiv>
 8008138:	4682      	mov	sl, r0
 800813a:	468b      	mov	fp, r1
 800813c:	1124      	asrs	r4, r4, #4
 800813e:	d0df      	beq.n	8008100 <_strtod_l+0x520>
 8008140:	2c1f      	cmp	r4, #31
 8008142:	dd1f      	ble.n	8008184 <_strtod_l+0x5a4>
 8008144:	2400      	movs	r4, #0
 8008146:	46a0      	mov	r8, r4
 8008148:	940b      	str	r4, [sp, #44]	@ 0x2c
 800814a:	46a1      	mov	r9, r4
 800814c:	9a05      	ldr	r2, [sp, #20]
 800814e:	2322      	movs	r3, #34	@ 0x22
 8008150:	f04f 0a00 	mov.w	sl, #0
 8008154:	f04f 0b00 	mov.w	fp, #0
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e76b      	b.n	8008034 <_strtod_l+0x454>
 800815c:	0800b501 	.word	0x0800b501
 8008160:	0800b6cc 	.word	0x0800b6cc
 8008164:	0800b4f9 	.word	0x0800b4f9
 8008168:	0800b53a 	.word	0x0800b53a
 800816c:	0800b6c9 	.word	0x0800b6c9
 8008170:	0800b858 	.word	0x0800b858
 8008174:	0800b830 	.word	0x0800b830
 8008178:	7ff00000 	.word	0x7ff00000
 800817c:	7ca00000 	.word	0x7ca00000
 8008180:	7fefffff 	.word	0x7fefffff
 8008184:	f014 0310 	ands.w	r3, r4, #16
 8008188:	bf18      	it	ne
 800818a:	236a      	movne	r3, #106	@ 0x6a
 800818c:	4ea9      	ldr	r6, [pc, #676]	@ (8008434 <_strtod_l+0x854>)
 800818e:	9308      	str	r3, [sp, #32]
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	2300      	movs	r3, #0
 8008196:	07e7      	lsls	r7, r4, #31
 8008198:	d504      	bpl.n	80081a4 <_strtod_l+0x5c4>
 800819a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800819e:	f7f8 fa43 	bl	8000628 <__aeabi_dmul>
 80081a2:	2301      	movs	r3, #1
 80081a4:	1064      	asrs	r4, r4, #1
 80081a6:	f106 0608 	add.w	r6, r6, #8
 80081aa:	d1f4      	bne.n	8008196 <_strtod_l+0x5b6>
 80081ac:	b10b      	cbz	r3, 80081b2 <_strtod_l+0x5d2>
 80081ae:	4682      	mov	sl, r0
 80081b0:	468b      	mov	fp, r1
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	b1b3      	cbz	r3, 80081e4 <_strtod_l+0x604>
 80081b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80081ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80081be:	2b00      	cmp	r3, #0
 80081c0:	4659      	mov	r1, fp
 80081c2:	dd0f      	ble.n	80081e4 <_strtod_l+0x604>
 80081c4:	2b1f      	cmp	r3, #31
 80081c6:	dd56      	ble.n	8008276 <_strtod_l+0x696>
 80081c8:	2b34      	cmp	r3, #52	@ 0x34
 80081ca:	bfde      	ittt	le
 80081cc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80081d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80081d4:	4093      	lslle	r3, r2
 80081d6:	f04f 0a00 	mov.w	sl, #0
 80081da:	bfcc      	ite	gt
 80081dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081e0:	ea03 0b01 	andle.w	fp, r3, r1
 80081e4:	2200      	movs	r2, #0
 80081e6:	2300      	movs	r3, #0
 80081e8:	4650      	mov	r0, sl
 80081ea:	4659      	mov	r1, fp
 80081ec:	f7f8 fc84 	bl	8000af8 <__aeabi_dcmpeq>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d1a7      	bne.n	8008144 <_strtod_l+0x564>
 80081f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081fa:	9805      	ldr	r0, [sp, #20]
 80081fc:	462b      	mov	r3, r5
 80081fe:	464a      	mov	r2, r9
 8008200:	f002 f8e2 	bl	800a3c8 <__s2b>
 8008204:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f af09 	beq.w	800801e <_strtod_l+0x43e>
 800820c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800820e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008210:	2a00      	cmp	r2, #0
 8008212:	eba3 0308 	sub.w	r3, r3, r8
 8008216:	bfa8      	it	ge
 8008218:	2300      	movge	r3, #0
 800821a:	9312      	str	r3, [sp, #72]	@ 0x48
 800821c:	2400      	movs	r4, #0
 800821e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008222:	9316      	str	r3, [sp, #88]	@ 0x58
 8008224:	46a0      	mov	r8, r4
 8008226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008228:	9805      	ldr	r0, [sp, #20]
 800822a:	6859      	ldr	r1, [r3, #4]
 800822c:	f002 f824 	bl	800a278 <_Balloc>
 8008230:	4681      	mov	r9, r0
 8008232:	2800      	cmp	r0, #0
 8008234:	f43f aef7 	beq.w	8008026 <_strtod_l+0x446>
 8008238:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	3202      	adds	r2, #2
 800823e:	f103 010c 	add.w	r1, r3, #12
 8008242:	0092      	lsls	r2, r2, #2
 8008244:	300c      	adds	r0, #12
 8008246:	f000 fb9b 	bl	8008980 <memcpy>
 800824a:	ec4b ab10 	vmov	d0, sl, fp
 800824e:	9805      	ldr	r0, [sp, #20]
 8008250:	aa1c      	add	r2, sp, #112	@ 0x70
 8008252:	a91b      	add	r1, sp, #108	@ 0x6c
 8008254:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008258:	f002 fbea 	bl	800aa30 <__d2b>
 800825c:	901a      	str	r0, [sp, #104]	@ 0x68
 800825e:	2800      	cmp	r0, #0
 8008260:	f43f aee1 	beq.w	8008026 <_strtod_l+0x446>
 8008264:	9805      	ldr	r0, [sp, #20]
 8008266:	2101      	movs	r1, #1
 8008268:	f002 f944 	bl	800a4f4 <__i2b>
 800826c:	4680      	mov	r8, r0
 800826e:	b948      	cbnz	r0, 8008284 <_strtod_l+0x6a4>
 8008270:	f04f 0800 	mov.w	r8, #0
 8008274:	e6d7      	b.n	8008026 <_strtod_l+0x446>
 8008276:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	ea03 0a0a 	and.w	sl, r3, sl
 8008282:	e7af      	b.n	80081e4 <_strtod_l+0x604>
 8008284:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008286:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008288:	2d00      	cmp	r5, #0
 800828a:	bfab      	itete	ge
 800828c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800828e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008290:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008292:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008294:	bfac      	ite	ge
 8008296:	18ef      	addge	r7, r5, r3
 8008298:	1b5e      	sublt	r6, r3, r5
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	1aed      	subs	r5, r5, r3
 800829e:	4415      	add	r5, r2
 80082a0:	4b65      	ldr	r3, [pc, #404]	@ (8008438 <_strtod_l+0x858>)
 80082a2:	3d01      	subs	r5, #1
 80082a4:	429d      	cmp	r5, r3
 80082a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082aa:	da50      	bge.n	800834e <_strtod_l+0x76e>
 80082ac:	1b5b      	subs	r3, r3, r5
 80082ae:	2b1f      	cmp	r3, #31
 80082b0:	eba2 0203 	sub.w	r2, r2, r3
 80082b4:	f04f 0101 	mov.w	r1, #1
 80082b8:	dc3d      	bgt.n	8008336 <_strtod_l+0x756>
 80082ba:	fa01 f303 	lsl.w	r3, r1, r3
 80082be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082c0:	2300      	movs	r3, #0
 80082c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80082c4:	18bd      	adds	r5, r7, r2
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	42af      	cmp	r7, r5
 80082ca:	4416      	add	r6, r2
 80082cc:	441e      	add	r6, r3
 80082ce:	463b      	mov	r3, r7
 80082d0:	bfa8      	it	ge
 80082d2:	462b      	movge	r3, r5
 80082d4:	42b3      	cmp	r3, r6
 80082d6:	bfa8      	it	ge
 80082d8:	4633      	movge	r3, r6
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bfc2      	ittt	gt
 80082de:	1aed      	subgt	r5, r5, r3
 80082e0:	1af6      	subgt	r6, r6, r3
 80082e2:	1aff      	subgt	r7, r7, r3
 80082e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd16      	ble.n	8008318 <_strtod_l+0x738>
 80082ea:	4641      	mov	r1, r8
 80082ec:	9805      	ldr	r0, [sp, #20]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f002 f9b8 	bl	800a664 <__pow5mult>
 80082f4:	4680      	mov	r8, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d0ba      	beq.n	8008270 <_strtod_l+0x690>
 80082fa:	4601      	mov	r1, r0
 80082fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082fe:	9805      	ldr	r0, [sp, #20]
 8008300:	f002 f90e 	bl	800a520 <__multiply>
 8008304:	900a      	str	r0, [sp, #40]	@ 0x28
 8008306:	2800      	cmp	r0, #0
 8008308:	f43f ae8d 	beq.w	8008026 <_strtod_l+0x446>
 800830c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	f001 fff2 	bl	800a2f8 <_Bfree>
 8008314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008316:	931a      	str	r3, [sp, #104]	@ 0x68
 8008318:	2d00      	cmp	r5, #0
 800831a:	dc1d      	bgt.n	8008358 <_strtod_l+0x778>
 800831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd23      	ble.n	800836a <_strtod_l+0x78a>
 8008322:	4649      	mov	r1, r9
 8008324:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008326:	9805      	ldr	r0, [sp, #20]
 8008328:	f002 f99c 	bl	800a664 <__pow5mult>
 800832c:	4681      	mov	r9, r0
 800832e:	b9e0      	cbnz	r0, 800836a <_strtod_l+0x78a>
 8008330:	f04f 0900 	mov.w	r9, #0
 8008334:	e677      	b.n	8008026 <_strtod_l+0x446>
 8008336:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800833a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800833e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008342:	35e2      	adds	r5, #226	@ 0xe2
 8008344:	fa01 f305 	lsl.w	r3, r1, r5
 8008348:	9310      	str	r3, [sp, #64]	@ 0x40
 800834a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800834c:	e7ba      	b.n	80082c4 <_strtod_l+0x6e4>
 800834e:	2300      	movs	r3, #0
 8008350:	9310      	str	r3, [sp, #64]	@ 0x40
 8008352:	2301      	movs	r3, #1
 8008354:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008356:	e7b5      	b.n	80082c4 <_strtod_l+0x6e4>
 8008358:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800835a:	9805      	ldr	r0, [sp, #20]
 800835c:	462a      	mov	r2, r5
 800835e:	f002 f9db 	bl	800a718 <__lshift>
 8008362:	901a      	str	r0, [sp, #104]	@ 0x68
 8008364:	2800      	cmp	r0, #0
 8008366:	d1d9      	bne.n	800831c <_strtod_l+0x73c>
 8008368:	e65d      	b.n	8008026 <_strtod_l+0x446>
 800836a:	2e00      	cmp	r6, #0
 800836c:	dd07      	ble.n	800837e <_strtod_l+0x79e>
 800836e:	4649      	mov	r1, r9
 8008370:	9805      	ldr	r0, [sp, #20]
 8008372:	4632      	mov	r2, r6
 8008374:	f002 f9d0 	bl	800a718 <__lshift>
 8008378:	4681      	mov	r9, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d0d8      	beq.n	8008330 <_strtod_l+0x750>
 800837e:	2f00      	cmp	r7, #0
 8008380:	dd08      	ble.n	8008394 <_strtod_l+0x7b4>
 8008382:	4641      	mov	r1, r8
 8008384:	9805      	ldr	r0, [sp, #20]
 8008386:	463a      	mov	r2, r7
 8008388:	f002 f9c6 	bl	800a718 <__lshift>
 800838c:	4680      	mov	r8, r0
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f ae49 	beq.w	8008026 <_strtod_l+0x446>
 8008394:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008396:	9805      	ldr	r0, [sp, #20]
 8008398:	464a      	mov	r2, r9
 800839a:	f002 fa45 	bl	800a828 <__mdiff>
 800839e:	4604      	mov	r4, r0
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f43f ae40 	beq.w	8008026 <_strtod_l+0x446>
 80083a6:	68c3      	ldr	r3, [r0, #12]
 80083a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083aa:	2300      	movs	r3, #0
 80083ac:	60c3      	str	r3, [r0, #12]
 80083ae:	4641      	mov	r1, r8
 80083b0:	f002 fa1e 	bl	800a7f0 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	da45      	bge.n	8008444 <_strtod_l+0x864>
 80083b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ba:	ea53 030a 	orrs.w	r3, r3, sl
 80083be:	d16b      	bne.n	8008498 <_strtod_l+0x8b8>
 80083c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d167      	bne.n	8008498 <_strtod_l+0x8b8>
 80083c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083cc:	0d1b      	lsrs	r3, r3, #20
 80083ce:	051b      	lsls	r3, r3, #20
 80083d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083d4:	d960      	bls.n	8008498 <_strtod_l+0x8b8>
 80083d6:	6963      	ldr	r3, [r4, #20]
 80083d8:	b913      	cbnz	r3, 80083e0 <_strtod_l+0x800>
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	dd5b      	ble.n	8008498 <_strtod_l+0x8b8>
 80083e0:	4621      	mov	r1, r4
 80083e2:	2201      	movs	r2, #1
 80083e4:	9805      	ldr	r0, [sp, #20]
 80083e6:	f002 f997 	bl	800a718 <__lshift>
 80083ea:	4641      	mov	r1, r8
 80083ec:	4604      	mov	r4, r0
 80083ee:	f002 f9ff 	bl	800a7f0 <__mcmp>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	dd50      	ble.n	8008498 <_strtod_l+0x8b8>
 80083f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083fa:	9a08      	ldr	r2, [sp, #32]
 80083fc:	0d1b      	lsrs	r3, r3, #20
 80083fe:	051b      	lsls	r3, r3, #20
 8008400:	2a00      	cmp	r2, #0
 8008402:	d06a      	beq.n	80084da <_strtod_l+0x8fa>
 8008404:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008408:	d867      	bhi.n	80084da <_strtod_l+0x8fa>
 800840a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800840e:	f67f ae9d 	bls.w	800814c <_strtod_l+0x56c>
 8008412:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <_strtod_l+0x85c>)
 8008414:	4650      	mov	r0, sl
 8008416:	4659      	mov	r1, fp
 8008418:	2200      	movs	r2, #0
 800841a:	f7f8 f905 	bl	8000628 <__aeabi_dmul>
 800841e:	4b08      	ldr	r3, [pc, #32]	@ (8008440 <_strtod_l+0x860>)
 8008420:	400b      	ands	r3, r1
 8008422:	4682      	mov	sl, r0
 8008424:	468b      	mov	fp, r1
 8008426:	2b00      	cmp	r3, #0
 8008428:	f47f ae08 	bne.w	800803c <_strtod_l+0x45c>
 800842c:	9a05      	ldr	r2, [sp, #20]
 800842e:	2322      	movs	r3, #34	@ 0x22
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e603      	b.n	800803c <_strtod_l+0x45c>
 8008434:	0800b6f8 	.word	0x0800b6f8
 8008438:	fffffc02 	.word	0xfffffc02
 800843c:	39500000 	.word	0x39500000
 8008440:	7ff00000 	.word	0x7ff00000
 8008444:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008448:	d165      	bne.n	8008516 <_strtod_l+0x936>
 800844a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800844c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008450:	b35a      	cbz	r2, 80084aa <_strtod_l+0x8ca>
 8008452:	4a9f      	ldr	r2, [pc, #636]	@ (80086d0 <_strtod_l+0xaf0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d12b      	bne.n	80084b0 <_strtod_l+0x8d0>
 8008458:	9b08      	ldr	r3, [sp, #32]
 800845a:	4651      	mov	r1, sl
 800845c:	b303      	cbz	r3, 80084a0 <_strtod_l+0x8c0>
 800845e:	4b9d      	ldr	r3, [pc, #628]	@ (80086d4 <_strtod_l+0xaf4>)
 8008460:	465a      	mov	r2, fp
 8008462:	4013      	ands	r3, r2
 8008464:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008468:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800846c:	d81b      	bhi.n	80084a6 <_strtod_l+0x8c6>
 800846e:	0d1b      	lsrs	r3, r3, #20
 8008470:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	4299      	cmp	r1, r3
 800847a:	d119      	bne.n	80084b0 <_strtod_l+0x8d0>
 800847c:	4b96      	ldr	r3, [pc, #600]	@ (80086d8 <_strtod_l+0xaf8>)
 800847e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008480:	429a      	cmp	r2, r3
 8008482:	d102      	bne.n	800848a <_strtod_l+0x8aa>
 8008484:	3101      	adds	r1, #1
 8008486:	f43f adce 	beq.w	8008026 <_strtod_l+0x446>
 800848a:	4b92      	ldr	r3, [pc, #584]	@ (80086d4 <_strtod_l+0xaf4>)
 800848c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800848e:	401a      	ands	r2, r3
 8008490:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008494:	f04f 0a00 	mov.w	sl, #0
 8008498:	9b08      	ldr	r3, [sp, #32]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1b9      	bne.n	8008412 <_strtod_l+0x832>
 800849e:	e5cd      	b.n	800803c <_strtod_l+0x45c>
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084a4:	e7e8      	b.n	8008478 <_strtod_l+0x898>
 80084a6:	4613      	mov	r3, r2
 80084a8:	e7e6      	b.n	8008478 <_strtod_l+0x898>
 80084aa:	ea53 030a 	orrs.w	r3, r3, sl
 80084ae:	d0a2      	beq.n	80083f6 <_strtod_l+0x816>
 80084b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084b2:	b1db      	cbz	r3, 80084ec <_strtod_l+0x90c>
 80084b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084b6:	4213      	tst	r3, r2
 80084b8:	d0ee      	beq.n	8008498 <_strtod_l+0x8b8>
 80084ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084bc:	9a08      	ldr	r2, [sp, #32]
 80084be:	4650      	mov	r0, sl
 80084c0:	4659      	mov	r1, fp
 80084c2:	b1bb      	cbz	r3, 80084f4 <_strtod_l+0x914>
 80084c4:	f7ff fb6e 	bl	8007ba4 <sulp>
 80084c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084cc:	ec53 2b10 	vmov	r2, r3, d0
 80084d0:	f7f7 fef4 	bl	80002bc <__adddf3>
 80084d4:	4682      	mov	sl, r0
 80084d6:	468b      	mov	fp, r1
 80084d8:	e7de      	b.n	8008498 <_strtod_l+0x8b8>
 80084da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80084de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80084ea:	e7d5      	b.n	8008498 <_strtod_l+0x8b8>
 80084ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084ee:	ea13 0f0a 	tst.w	r3, sl
 80084f2:	e7e1      	b.n	80084b8 <_strtod_l+0x8d8>
 80084f4:	f7ff fb56 	bl	8007ba4 <sulp>
 80084f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084fc:	ec53 2b10 	vmov	r2, r3, d0
 8008500:	f7f7 feda 	bl	80002b8 <__aeabi_dsub>
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	f7f8 faf4 	bl	8000af8 <__aeabi_dcmpeq>
 8008510:	2800      	cmp	r0, #0
 8008512:	d0c1      	beq.n	8008498 <_strtod_l+0x8b8>
 8008514:	e61a      	b.n	800814c <_strtod_l+0x56c>
 8008516:	4641      	mov	r1, r8
 8008518:	4620      	mov	r0, r4
 800851a:	f002 fae1 	bl	800aae0 <__ratio>
 800851e:	ec57 6b10 	vmov	r6, r7, d0
 8008522:	2200      	movs	r2, #0
 8008524:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008528:	4630      	mov	r0, r6
 800852a:	4639      	mov	r1, r7
 800852c:	f7f8 faf8 	bl	8000b20 <__aeabi_dcmple>
 8008530:	2800      	cmp	r0, #0
 8008532:	d06f      	beq.n	8008614 <_strtod_l+0xa34>
 8008534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d17a      	bne.n	8008630 <_strtod_l+0xa50>
 800853a:	f1ba 0f00 	cmp.w	sl, #0
 800853e:	d158      	bne.n	80085f2 <_strtod_l+0xa12>
 8008540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008546:	2b00      	cmp	r3, #0
 8008548:	d15a      	bne.n	8008600 <_strtod_l+0xa20>
 800854a:	4b64      	ldr	r3, [pc, #400]	@ (80086dc <_strtod_l+0xafc>)
 800854c:	2200      	movs	r2, #0
 800854e:	4630      	mov	r0, r6
 8008550:	4639      	mov	r1, r7
 8008552:	f7f8 fadb 	bl	8000b0c <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	d159      	bne.n	800860e <_strtod_l+0xa2e>
 800855a:	4630      	mov	r0, r6
 800855c:	4639      	mov	r1, r7
 800855e:	4b60      	ldr	r3, [pc, #384]	@ (80086e0 <_strtod_l+0xb00>)
 8008560:	2200      	movs	r2, #0
 8008562:	f7f8 f861 	bl	8000628 <__aeabi_dmul>
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800856e:	9606      	str	r6, [sp, #24]
 8008570:	9307      	str	r3, [sp, #28]
 8008572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008576:	4d57      	ldr	r5, [pc, #348]	@ (80086d4 <_strtod_l+0xaf4>)
 8008578:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800857c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800857e:	401d      	ands	r5, r3
 8008580:	4b58      	ldr	r3, [pc, #352]	@ (80086e4 <_strtod_l+0xb04>)
 8008582:	429d      	cmp	r5, r3
 8008584:	f040 80b2 	bne.w	80086ec <_strtod_l+0xb0c>
 8008588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800858a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800858e:	ec4b ab10 	vmov	d0, sl, fp
 8008592:	f002 f9dd 	bl	800a950 <__ulp>
 8008596:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800859a:	ec51 0b10 	vmov	r0, r1, d0
 800859e:	f7f8 f843 	bl	8000628 <__aeabi_dmul>
 80085a2:	4652      	mov	r2, sl
 80085a4:	465b      	mov	r3, fp
 80085a6:	f7f7 fe89 	bl	80002bc <__adddf3>
 80085aa:	460b      	mov	r3, r1
 80085ac:	4949      	ldr	r1, [pc, #292]	@ (80086d4 <_strtod_l+0xaf4>)
 80085ae:	4a4e      	ldr	r2, [pc, #312]	@ (80086e8 <_strtod_l+0xb08>)
 80085b0:	4019      	ands	r1, r3
 80085b2:	4291      	cmp	r1, r2
 80085b4:	4682      	mov	sl, r0
 80085b6:	d942      	bls.n	800863e <_strtod_l+0xa5e>
 80085b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085ba:	4b47      	ldr	r3, [pc, #284]	@ (80086d8 <_strtod_l+0xaf8>)
 80085bc:	429a      	cmp	r2, r3
 80085be:	d103      	bne.n	80085c8 <_strtod_l+0x9e8>
 80085c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085c2:	3301      	adds	r3, #1
 80085c4:	f43f ad2f 	beq.w	8008026 <_strtod_l+0x446>
 80085c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80086d8 <_strtod_l+0xaf8>
 80085cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80085d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085d2:	9805      	ldr	r0, [sp, #20]
 80085d4:	f001 fe90 	bl	800a2f8 <_Bfree>
 80085d8:	9805      	ldr	r0, [sp, #20]
 80085da:	4649      	mov	r1, r9
 80085dc:	f001 fe8c 	bl	800a2f8 <_Bfree>
 80085e0:	9805      	ldr	r0, [sp, #20]
 80085e2:	4641      	mov	r1, r8
 80085e4:	f001 fe88 	bl	800a2f8 <_Bfree>
 80085e8:	9805      	ldr	r0, [sp, #20]
 80085ea:	4621      	mov	r1, r4
 80085ec:	f001 fe84 	bl	800a2f8 <_Bfree>
 80085f0:	e619      	b.n	8008226 <_strtod_l+0x646>
 80085f2:	f1ba 0f01 	cmp.w	sl, #1
 80085f6:	d103      	bne.n	8008600 <_strtod_l+0xa20>
 80085f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f43f ada6 	beq.w	800814c <_strtod_l+0x56c>
 8008600:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80086b0 <_strtod_l+0xad0>
 8008604:	4f35      	ldr	r7, [pc, #212]	@ (80086dc <_strtod_l+0xafc>)
 8008606:	ed8d 7b06 	vstr	d7, [sp, #24]
 800860a:	2600      	movs	r6, #0
 800860c:	e7b1      	b.n	8008572 <_strtod_l+0x992>
 800860e:	4f34      	ldr	r7, [pc, #208]	@ (80086e0 <_strtod_l+0xb00>)
 8008610:	2600      	movs	r6, #0
 8008612:	e7aa      	b.n	800856a <_strtod_l+0x98a>
 8008614:	4b32      	ldr	r3, [pc, #200]	@ (80086e0 <_strtod_l+0xb00>)
 8008616:	4630      	mov	r0, r6
 8008618:	4639      	mov	r1, r7
 800861a:	2200      	movs	r2, #0
 800861c:	f7f8 f804 	bl	8000628 <__aeabi_dmul>
 8008620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d09f      	beq.n	800856a <_strtod_l+0x98a>
 800862a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800862e:	e7a0      	b.n	8008572 <_strtod_l+0x992>
 8008630:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80086b8 <_strtod_l+0xad8>
 8008634:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008638:	ec57 6b17 	vmov	r6, r7, d7
 800863c:	e799      	b.n	8008572 <_strtod_l+0x992>
 800863e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008642:	9b08      	ldr	r3, [sp, #32]
 8008644:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1c1      	bne.n	80085d0 <_strtod_l+0x9f0>
 800864c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008650:	0d1b      	lsrs	r3, r3, #20
 8008652:	051b      	lsls	r3, r3, #20
 8008654:	429d      	cmp	r5, r3
 8008656:	d1bb      	bne.n	80085d0 <_strtod_l+0x9f0>
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	f7f8 fb44 	bl	8000ce8 <__aeabi_d2lz>
 8008660:	f7f7 ffb4 	bl	80005cc <__aeabi_l2d>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f7 fe24 	bl	80002b8 <__aeabi_dsub>
 8008670:	460b      	mov	r3, r1
 8008672:	4602      	mov	r2, r0
 8008674:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008678:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800867c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800867e:	ea46 060a 	orr.w	r6, r6, sl
 8008682:	431e      	orrs	r6, r3
 8008684:	d06f      	beq.n	8008766 <_strtod_l+0xb86>
 8008686:	a30e      	add	r3, pc, #56	@ (adr r3, 80086c0 <_strtod_l+0xae0>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f7f8 fa3e 	bl	8000b0c <__aeabi_dcmplt>
 8008690:	2800      	cmp	r0, #0
 8008692:	f47f acd3 	bne.w	800803c <_strtod_l+0x45c>
 8008696:	a30c      	add	r3, pc, #48	@ (adr r3, 80086c8 <_strtod_l+0xae8>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086a0:	f7f8 fa52 	bl	8000b48 <__aeabi_dcmpgt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d093      	beq.n	80085d0 <_strtod_l+0x9f0>
 80086a8:	e4c8      	b.n	800803c <_strtod_l+0x45c>
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w
 80086b0:	00000000 	.word	0x00000000
 80086b4:	bff00000 	.word	0xbff00000
 80086b8:	00000000 	.word	0x00000000
 80086bc:	3ff00000 	.word	0x3ff00000
 80086c0:	94a03595 	.word	0x94a03595
 80086c4:	3fdfffff 	.word	0x3fdfffff
 80086c8:	35afe535 	.word	0x35afe535
 80086cc:	3fe00000 	.word	0x3fe00000
 80086d0:	000fffff 	.word	0x000fffff
 80086d4:	7ff00000 	.word	0x7ff00000
 80086d8:	7fefffff 	.word	0x7fefffff
 80086dc:	3ff00000 	.word	0x3ff00000
 80086e0:	3fe00000 	.word	0x3fe00000
 80086e4:	7fe00000 	.word	0x7fe00000
 80086e8:	7c9fffff 	.word	0x7c9fffff
 80086ec:	9b08      	ldr	r3, [sp, #32]
 80086ee:	b323      	cbz	r3, 800873a <_strtod_l+0xb5a>
 80086f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80086f4:	d821      	bhi.n	800873a <_strtod_l+0xb5a>
 80086f6:	a328      	add	r3, pc, #160	@ (adr r3, 8008798 <_strtod_l+0xbb8>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f8 fa0e 	bl	8000b20 <__aeabi_dcmple>
 8008704:	b1a0      	cbz	r0, 8008730 <_strtod_l+0xb50>
 8008706:	4639      	mov	r1, r7
 8008708:	4630      	mov	r0, r6
 800870a:	f7f8 fa65 	bl	8000bd8 <__aeabi_d2uiz>
 800870e:	2801      	cmp	r0, #1
 8008710:	bf38      	it	cc
 8008712:	2001      	movcc	r0, #1
 8008714:	f7f7 ff0e 	bl	8000534 <__aeabi_ui2d>
 8008718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800871a:	4606      	mov	r6, r0
 800871c:	460f      	mov	r7, r1
 800871e:	b9fb      	cbnz	r3, 8008760 <_strtod_l+0xb80>
 8008720:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008724:	9014      	str	r0, [sp, #80]	@ 0x50
 8008726:	9315      	str	r3, [sp, #84]	@ 0x54
 8008728:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800872c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008730:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008732:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008736:	1b5b      	subs	r3, r3, r5
 8008738:	9311      	str	r3, [sp, #68]	@ 0x44
 800873a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800873e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008742:	f002 f905 	bl	800a950 <__ulp>
 8008746:	4650      	mov	r0, sl
 8008748:	ec53 2b10 	vmov	r2, r3, d0
 800874c:	4659      	mov	r1, fp
 800874e:	f7f7 ff6b 	bl	8000628 <__aeabi_dmul>
 8008752:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008756:	f7f7 fdb1 	bl	80002bc <__adddf3>
 800875a:	4682      	mov	sl, r0
 800875c:	468b      	mov	fp, r1
 800875e:	e770      	b.n	8008642 <_strtod_l+0xa62>
 8008760:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008764:	e7e0      	b.n	8008728 <_strtod_l+0xb48>
 8008766:	a30e      	add	r3, pc, #56	@ (adr r3, 80087a0 <_strtod_l+0xbc0>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f8 f9ce 	bl	8000b0c <__aeabi_dcmplt>
 8008770:	e798      	b.n	80086a4 <_strtod_l+0xac4>
 8008772:	2300      	movs	r3, #0
 8008774:	930e      	str	r3, [sp, #56]	@ 0x38
 8008776:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	f7ff ba6d 	b.w	8007c5a <_strtod_l+0x7a>
 8008780:	2a65      	cmp	r2, #101	@ 0x65
 8008782:	f43f ab68 	beq.w	8007e56 <_strtod_l+0x276>
 8008786:	2a45      	cmp	r2, #69	@ 0x45
 8008788:	f43f ab65 	beq.w	8007e56 <_strtod_l+0x276>
 800878c:	2301      	movs	r3, #1
 800878e:	f7ff bba0 	b.w	8007ed2 <_strtod_l+0x2f2>
 8008792:	bf00      	nop
 8008794:	f3af 8000 	nop.w
 8008798:	ffc00000 	.word	0xffc00000
 800879c:	41dfffff 	.word	0x41dfffff
 80087a0:	94a03595 	.word	0x94a03595
 80087a4:	3fcfffff 	.word	0x3fcfffff

080087a8 <_strtod_r>:
 80087a8:	4b01      	ldr	r3, [pc, #4]	@ (80087b0 <_strtod_r+0x8>)
 80087aa:	f7ff ba19 	b.w	8007be0 <_strtod_l>
 80087ae:	bf00      	nop
 80087b0:	20000018 	.word	0x20000018

080087b4 <_strtol_l.isra.0>:
 80087b4:	2b24      	cmp	r3, #36	@ 0x24
 80087b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ba:	4686      	mov	lr, r0
 80087bc:	4690      	mov	r8, r2
 80087be:	d801      	bhi.n	80087c4 <_strtol_l.isra.0+0x10>
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d106      	bne.n	80087d2 <_strtol_l.isra.0+0x1e>
 80087c4:	f000 f8aa 	bl	800891c <__errno>
 80087c8:	2316      	movs	r3, #22
 80087ca:	6003      	str	r3, [r0, #0]
 80087cc:	2000      	movs	r0, #0
 80087ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d2:	4834      	ldr	r0, [pc, #208]	@ (80088a4 <_strtol_l.isra.0+0xf0>)
 80087d4:	460d      	mov	r5, r1
 80087d6:	462a      	mov	r2, r5
 80087d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087dc:	5d06      	ldrb	r6, [r0, r4]
 80087de:	f016 0608 	ands.w	r6, r6, #8
 80087e2:	d1f8      	bne.n	80087d6 <_strtol_l.isra.0+0x22>
 80087e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80087e6:	d110      	bne.n	800880a <_strtol_l.isra.0+0x56>
 80087e8:	782c      	ldrb	r4, [r5, #0]
 80087ea:	2601      	movs	r6, #1
 80087ec:	1c95      	adds	r5, r2, #2
 80087ee:	f033 0210 	bics.w	r2, r3, #16
 80087f2:	d115      	bne.n	8008820 <_strtol_l.isra.0+0x6c>
 80087f4:	2c30      	cmp	r4, #48	@ 0x30
 80087f6:	d10d      	bne.n	8008814 <_strtol_l.isra.0+0x60>
 80087f8:	782a      	ldrb	r2, [r5, #0]
 80087fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087fe:	2a58      	cmp	r2, #88	@ 0x58
 8008800:	d108      	bne.n	8008814 <_strtol_l.isra.0+0x60>
 8008802:	786c      	ldrb	r4, [r5, #1]
 8008804:	3502      	adds	r5, #2
 8008806:	2310      	movs	r3, #16
 8008808:	e00a      	b.n	8008820 <_strtol_l.isra.0+0x6c>
 800880a:	2c2b      	cmp	r4, #43	@ 0x2b
 800880c:	bf04      	itt	eq
 800880e:	782c      	ldrbeq	r4, [r5, #0]
 8008810:	1c95      	addeq	r5, r2, #2
 8008812:	e7ec      	b.n	80087ee <_strtol_l.isra.0+0x3a>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1f6      	bne.n	8008806 <_strtol_l.isra.0+0x52>
 8008818:	2c30      	cmp	r4, #48	@ 0x30
 800881a:	bf14      	ite	ne
 800881c:	230a      	movne	r3, #10
 800881e:	2308      	moveq	r3, #8
 8008820:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008824:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008828:	2200      	movs	r2, #0
 800882a:	fbbc f9f3 	udiv	r9, ip, r3
 800882e:	4610      	mov	r0, r2
 8008830:	fb03 ca19 	mls	sl, r3, r9, ip
 8008834:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008838:	2f09      	cmp	r7, #9
 800883a:	d80f      	bhi.n	800885c <_strtol_l.isra.0+0xa8>
 800883c:	463c      	mov	r4, r7
 800883e:	42a3      	cmp	r3, r4
 8008840:	dd1b      	ble.n	800887a <_strtol_l.isra.0+0xc6>
 8008842:	1c57      	adds	r7, r2, #1
 8008844:	d007      	beq.n	8008856 <_strtol_l.isra.0+0xa2>
 8008846:	4581      	cmp	r9, r0
 8008848:	d314      	bcc.n	8008874 <_strtol_l.isra.0+0xc0>
 800884a:	d101      	bne.n	8008850 <_strtol_l.isra.0+0x9c>
 800884c:	45a2      	cmp	sl, r4
 800884e:	db11      	blt.n	8008874 <_strtol_l.isra.0+0xc0>
 8008850:	fb00 4003 	mla	r0, r0, r3, r4
 8008854:	2201      	movs	r2, #1
 8008856:	f815 4b01 	ldrb.w	r4, [r5], #1
 800885a:	e7eb      	b.n	8008834 <_strtol_l.isra.0+0x80>
 800885c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008860:	2f19      	cmp	r7, #25
 8008862:	d801      	bhi.n	8008868 <_strtol_l.isra.0+0xb4>
 8008864:	3c37      	subs	r4, #55	@ 0x37
 8008866:	e7ea      	b.n	800883e <_strtol_l.isra.0+0x8a>
 8008868:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800886c:	2f19      	cmp	r7, #25
 800886e:	d804      	bhi.n	800887a <_strtol_l.isra.0+0xc6>
 8008870:	3c57      	subs	r4, #87	@ 0x57
 8008872:	e7e4      	b.n	800883e <_strtol_l.isra.0+0x8a>
 8008874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008878:	e7ed      	b.n	8008856 <_strtol_l.isra.0+0xa2>
 800887a:	1c53      	adds	r3, r2, #1
 800887c:	d108      	bne.n	8008890 <_strtol_l.isra.0+0xdc>
 800887e:	2322      	movs	r3, #34	@ 0x22
 8008880:	f8ce 3000 	str.w	r3, [lr]
 8008884:	4660      	mov	r0, ip
 8008886:	f1b8 0f00 	cmp.w	r8, #0
 800888a:	d0a0      	beq.n	80087ce <_strtol_l.isra.0+0x1a>
 800888c:	1e69      	subs	r1, r5, #1
 800888e:	e006      	b.n	800889e <_strtol_l.isra.0+0xea>
 8008890:	b106      	cbz	r6, 8008894 <_strtol_l.isra.0+0xe0>
 8008892:	4240      	negs	r0, r0
 8008894:	f1b8 0f00 	cmp.w	r8, #0
 8008898:	d099      	beq.n	80087ce <_strtol_l.isra.0+0x1a>
 800889a:	2a00      	cmp	r2, #0
 800889c:	d1f6      	bne.n	800888c <_strtol_l.isra.0+0xd8>
 800889e:	f8c8 1000 	str.w	r1, [r8]
 80088a2:	e794      	b.n	80087ce <_strtol_l.isra.0+0x1a>
 80088a4:	0800b721 	.word	0x0800b721

080088a8 <_strtol_r>:
 80088a8:	f7ff bf84 	b.w	80087b4 <_strtol_l.isra.0>

080088ac <_fwalk_sglue>:
 80088ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b0:	4607      	mov	r7, r0
 80088b2:	4688      	mov	r8, r1
 80088b4:	4614      	mov	r4, r2
 80088b6:	2600      	movs	r6, #0
 80088b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088bc:	f1b9 0901 	subs.w	r9, r9, #1
 80088c0:	d505      	bpl.n	80088ce <_fwalk_sglue+0x22>
 80088c2:	6824      	ldr	r4, [r4, #0]
 80088c4:	2c00      	cmp	r4, #0
 80088c6:	d1f7      	bne.n	80088b8 <_fwalk_sglue+0xc>
 80088c8:	4630      	mov	r0, r6
 80088ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d907      	bls.n	80088e4 <_fwalk_sglue+0x38>
 80088d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088d8:	3301      	adds	r3, #1
 80088da:	d003      	beq.n	80088e4 <_fwalk_sglue+0x38>
 80088dc:	4629      	mov	r1, r5
 80088de:	4638      	mov	r0, r7
 80088e0:	47c0      	blx	r8
 80088e2:	4306      	orrs	r6, r0
 80088e4:	3568      	adds	r5, #104	@ 0x68
 80088e6:	e7e9      	b.n	80088bc <_fwalk_sglue+0x10>

080088e8 <memset>:
 80088e8:	4402      	add	r2, r0
 80088ea:	4603      	mov	r3, r0
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d100      	bne.n	80088f2 <memset+0xa>
 80088f0:	4770      	bx	lr
 80088f2:	f803 1b01 	strb.w	r1, [r3], #1
 80088f6:	e7f9      	b.n	80088ec <memset+0x4>

080088f8 <strncmp>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	b16a      	cbz	r2, 8008918 <strncmp+0x20>
 80088fc:	3901      	subs	r1, #1
 80088fe:	1884      	adds	r4, r0, r2
 8008900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008908:	429a      	cmp	r2, r3
 800890a:	d103      	bne.n	8008914 <strncmp+0x1c>
 800890c:	42a0      	cmp	r0, r4
 800890e:	d001      	beq.n	8008914 <strncmp+0x1c>
 8008910:	2a00      	cmp	r2, #0
 8008912:	d1f5      	bne.n	8008900 <strncmp+0x8>
 8008914:	1ad0      	subs	r0, r2, r3
 8008916:	bd10      	pop	{r4, pc}
 8008918:	4610      	mov	r0, r2
 800891a:	e7fc      	b.n	8008916 <strncmp+0x1e>

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	@ (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000184 	.word	0x20000184

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4d0d      	ldr	r5, [pc, #52]	@ (8008960 <__libc_init_array+0x38>)
 800892c:	4c0d      	ldr	r4, [pc, #52]	@ (8008964 <__libc_init_array+0x3c>)
 800892e:	1b64      	subs	r4, r4, r5
 8008930:	10a4      	asrs	r4, r4, #2
 8008932:	2600      	movs	r6, #0
 8008934:	42a6      	cmp	r6, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	4d0b      	ldr	r5, [pc, #44]	@ (8008968 <__libc_init_array+0x40>)
 800893a:	4c0c      	ldr	r4, [pc, #48]	@ (800896c <__libc_init_array+0x44>)
 800893c:	f002 fd6e 	bl	800b41c <_init>
 8008940:	1b64      	subs	r4, r4, r5
 8008942:	10a4      	asrs	r4, r4, #2
 8008944:	2600      	movs	r6, #0
 8008946:	42a6      	cmp	r6, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008950:	4798      	blx	r3
 8008952:	3601      	adds	r6, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f855 3b04 	ldr.w	r3, [r5], #4
 800895a:	4798      	blx	r3
 800895c:	3601      	adds	r6, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	0800b928 	.word	0x0800b928
 8008964:	0800b928 	.word	0x0800b928
 8008968:	0800b928 	.word	0x0800b928
 800896c:	0800b92c 	.word	0x0800b92c

08008970 <__retarget_lock_init_recursive>:
 8008970:	4770      	bx	lr

08008972 <__retarget_lock_acquire_recursive>:
 8008972:	4770      	bx	lr

08008974 <__retarget_lock_release_recursive>:
 8008974:	4770      	bx	lr
	...

08008978 <_localeconv_r>:
 8008978:	4800      	ldr	r0, [pc, #0]	@ (800897c <_localeconv_r+0x4>)
 800897a:	4770      	bx	lr
 800897c:	20000108 	.word	0x20000108

08008980 <memcpy>:
 8008980:	440a      	add	r2, r1
 8008982:	4291      	cmp	r1, r2
 8008984:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008988:	d100      	bne.n	800898c <memcpy+0xc>
 800898a:	4770      	bx	lr
 800898c:	b510      	push	{r4, lr}
 800898e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008996:	4291      	cmp	r1, r2
 8008998:	d1f9      	bne.n	800898e <memcpy+0xe>
 800899a:	bd10      	pop	{r4, pc}
 800899c:	0000      	movs	r0, r0
	...

080089a0 <nan>:
 80089a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80089a8 <nan+0x8>
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	00000000 	.word	0x00000000
 80089ac:	7ff80000 	.word	0x7ff80000

080089b0 <nanf>:
 80089b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80089b8 <nanf+0x8>
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	7fc00000 	.word	0x7fc00000

080089bc <quorem>:
 80089bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	6903      	ldr	r3, [r0, #16]
 80089c2:	690c      	ldr	r4, [r1, #16]
 80089c4:	42a3      	cmp	r3, r4
 80089c6:	4607      	mov	r7, r0
 80089c8:	db7e      	blt.n	8008ac8 <quorem+0x10c>
 80089ca:	3c01      	subs	r4, #1
 80089cc:	f101 0814 	add.w	r8, r1, #20
 80089d0:	00a3      	lsls	r3, r4, #2
 80089d2:	f100 0514 	add.w	r5, r0, #20
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089e6:	3301      	adds	r3, #1
 80089e8:	429a      	cmp	r2, r3
 80089ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80089f2:	d32e      	bcc.n	8008a52 <quorem+0x96>
 80089f4:	f04f 0a00 	mov.w	sl, #0
 80089f8:	46c4      	mov	ip, r8
 80089fa:	46ae      	mov	lr, r5
 80089fc:	46d3      	mov	fp, sl
 80089fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a02:	b298      	uxth	r0, r3
 8008a04:	fb06 a000 	mla	r0, r6, r0, sl
 8008a08:	0c02      	lsrs	r2, r0, #16
 8008a0a:	0c1b      	lsrs	r3, r3, #16
 8008a0c:	fb06 2303 	mla	r3, r6, r3, r2
 8008a10:	f8de 2000 	ldr.w	r2, [lr]
 8008a14:	b280      	uxth	r0, r0
 8008a16:	b292      	uxth	r2, r2
 8008a18:	1a12      	subs	r2, r2, r0
 8008a1a:	445a      	add	r2, fp
 8008a1c:	f8de 0000 	ldr.w	r0, [lr]
 8008a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a34:	45e1      	cmp	r9, ip
 8008a36:	f84e 2b04 	str.w	r2, [lr], #4
 8008a3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a3e:	d2de      	bcs.n	80089fe <quorem+0x42>
 8008a40:	9b00      	ldr	r3, [sp, #0]
 8008a42:	58eb      	ldr	r3, [r5, r3]
 8008a44:	b92b      	cbnz	r3, 8008a52 <quorem+0x96>
 8008a46:	9b01      	ldr	r3, [sp, #4]
 8008a48:	3b04      	subs	r3, #4
 8008a4a:	429d      	cmp	r5, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	d32f      	bcc.n	8008ab0 <quorem+0xf4>
 8008a50:	613c      	str	r4, [r7, #16]
 8008a52:	4638      	mov	r0, r7
 8008a54:	f001 fecc 	bl	800a7f0 <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	db25      	blt.n	8008aa8 <quorem+0xec>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	2000      	movs	r0, #0
 8008a60:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a64:	f8d1 c000 	ldr.w	ip, [r1]
 8008a68:	fa1f fe82 	uxth.w	lr, r2
 8008a6c:	fa1f f38c 	uxth.w	r3, ip
 8008a70:	eba3 030e 	sub.w	r3, r3, lr
 8008a74:	4403      	add	r3, r0
 8008a76:	0c12      	lsrs	r2, r2, #16
 8008a78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a86:	45c1      	cmp	r9, r8
 8008a88:	f841 3b04 	str.w	r3, [r1], #4
 8008a8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a90:	d2e6      	bcs.n	8008a60 <quorem+0xa4>
 8008a92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a9a:	b922      	cbnz	r2, 8008aa6 <quorem+0xea>
 8008a9c:	3b04      	subs	r3, #4
 8008a9e:	429d      	cmp	r5, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	d30b      	bcc.n	8008abc <quorem+0x100>
 8008aa4:	613c      	str	r4, [r7, #16]
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	b003      	add	sp, #12
 8008aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	3b04      	subs	r3, #4
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	d1cb      	bne.n	8008a50 <quorem+0x94>
 8008ab8:	3c01      	subs	r4, #1
 8008aba:	e7c6      	b.n	8008a4a <quorem+0x8e>
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	3b04      	subs	r3, #4
 8008ac0:	2a00      	cmp	r2, #0
 8008ac2:	d1ef      	bne.n	8008aa4 <quorem+0xe8>
 8008ac4:	3c01      	subs	r4, #1
 8008ac6:	e7ea      	b.n	8008a9e <quorem+0xe2>
 8008ac8:	2000      	movs	r0, #0
 8008aca:	e7ee      	b.n	8008aaa <quorem+0xee>
 8008acc:	0000      	movs	r0, r0
	...

08008ad0 <_dtoa_r>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	69c7      	ldr	r7, [r0, #28]
 8008ad6:	b097      	sub	sp, #92	@ 0x5c
 8008ad8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008adc:	ec55 4b10 	vmov	r4, r5, d0
 8008ae0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008ae2:	9107      	str	r1, [sp, #28]
 8008ae4:	4681      	mov	r9, r0
 8008ae6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ae8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008aea:	b97f      	cbnz	r7, 8008b0c <_dtoa_r+0x3c>
 8008aec:	2010      	movs	r0, #16
 8008aee:	f001 fa4f 	bl	8009f90 <malloc>
 8008af2:	4602      	mov	r2, r0
 8008af4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008af8:	b920      	cbnz	r0, 8008b04 <_dtoa_r+0x34>
 8008afa:	4ba9      	ldr	r3, [pc, #676]	@ (8008da0 <_dtoa_r+0x2d0>)
 8008afc:	21ef      	movs	r1, #239	@ 0xef
 8008afe:	48a9      	ldr	r0, [pc, #676]	@ (8008da4 <_dtoa_r+0x2d4>)
 8008b00:	f002 f952 	bl	800ada8 <__assert_func>
 8008b04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b08:	6007      	str	r7, [r0, #0]
 8008b0a:	60c7      	str	r7, [r0, #12]
 8008b0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b10:	6819      	ldr	r1, [r3, #0]
 8008b12:	b159      	cbz	r1, 8008b2c <_dtoa_r+0x5c>
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	604a      	str	r2, [r1, #4]
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4093      	lsls	r3, r2
 8008b1c:	608b      	str	r3, [r1, #8]
 8008b1e:	4648      	mov	r0, r9
 8008b20:	f001 fbea 	bl	800a2f8 <_Bfree>
 8008b24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	1e2b      	subs	r3, r5, #0
 8008b2e:	bfb9      	ittee	lt
 8008b30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b34:	9305      	strlt	r3, [sp, #20]
 8008b36:	2300      	movge	r3, #0
 8008b38:	6033      	strge	r3, [r6, #0]
 8008b3a:	9f05      	ldr	r7, [sp, #20]
 8008b3c:	4b9a      	ldr	r3, [pc, #616]	@ (8008da8 <_dtoa_r+0x2d8>)
 8008b3e:	bfbc      	itt	lt
 8008b40:	2201      	movlt	r2, #1
 8008b42:	6032      	strlt	r2, [r6, #0]
 8008b44:	43bb      	bics	r3, r7
 8008b46:	d112      	bne.n	8008b6e <_dtoa_r+0x9e>
 8008b48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b54:	4323      	orrs	r3, r4
 8008b56:	f000 855a 	beq.w	800960e <_dtoa_r+0xb3e>
 8008b5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008dbc <_dtoa_r+0x2ec>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 855c 	beq.w	800961e <_dtoa_r+0xb4e>
 8008b66:	f10a 0303 	add.w	r3, sl, #3
 8008b6a:	f000 bd56 	b.w	800961a <_dtoa_r+0xb4a>
 8008b6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b72:	2200      	movs	r2, #0
 8008b74:	ec51 0b17 	vmov	r0, r1, d7
 8008b78:	2300      	movs	r3, #0
 8008b7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008b7e:	f7f7 ffbb 	bl	8000af8 <__aeabi_dcmpeq>
 8008b82:	4680      	mov	r8, r0
 8008b84:	b158      	cbz	r0, 8008b9e <_dtoa_r+0xce>
 8008b86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b88:	2301      	movs	r3, #1
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b8e:	b113      	cbz	r3, 8008b96 <_dtoa_r+0xc6>
 8008b90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b92:	4b86      	ldr	r3, [pc, #536]	@ (8008dac <_dtoa_r+0x2dc>)
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008dc0 <_dtoa_r+0x2f0>
 8008b9a:	f000 bd40 	b.w	800961e <_dtoa_r+0xb4e>
 8008b9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008ba2:	aa14      	add	r2, sp, #80	@ 0x50
 8008ba4:	a915      	add	r1, sp, #84	@ 0x54
 8008ba6:	4648      	mov	r0, r9
 8008ba8:	f001 ff42 	bl	800aa30 <__d2b>
 8008bac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008bb0:	9002      	str	r0, [sp, #8]
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d078      	beq.n	8008ca8 <_dtoa_r+0x1d8>
 8008bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bb8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008bc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008bc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008bcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	4b76      	ldr	r3, [pc, #472]	@ (8008db0 <_dtoa_r+0x2e0>)
 8008bd6:	f7f7 fb6f 	bl	80002b8 <__aeabi_dsub>
 8008bda:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d88 <_dtoa_r+0x2b8>)
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	f7f7 fd22 	bl	8000628 <__aeabi_dmul>
 8008be4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008d90 <_dtoa_r+0x2c0>)
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	f7f7 fb67 	bl	80002bc <__adddf3>
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	f7f7 fcae 	bl	8000554 <__aeabi_i2d>
 8008bf8:	a367      	add	r3, pc, #412	@ (adr r3, 8008d98 <_dtoa_r+0x2c8>)
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f7f7 fd13 	bl	8000628 <__aeabi_dmul>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4620      	mov	r0, r4
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7f7 fb57 	bl	80002bc <__adddf3>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	f7f7 ffb9 	bl	8000b88 <__aeabi_d2iz>
 8008c16:	2200      	movs	r2, #0
 8008c18:	4607      	mov	r7, r0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 ff74 	bl	8000b0c <__aeabi_dcmplt>
 8008c24:	b140      	cbz	r0, 8008c38 <_dtoa_r+0x168>
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7f7 fc94 	bl	8000554 <__aeabi_i2d>
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	462b      	mov	r3, r5
 8008c30:	f7f7 ff62 	bl	8000af8 <__aeabi_dcmpeq>
 8008c34:	b900      	cbnz	r0, 8008c38 <_dtoa_r+0x168>
 8008c36:	3f01      	subs	r7, #1
 8008c38:	2f16      	cmp	r7, #22
 8008c3a:	d852      	bhi.n	8008ce2 <_dtoa_r+0x212>
 8008c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8008db4 <_dtoa_r+0x2e4>)
 8008c3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c4a:	f7f7 ff5f 	bl	8000b0c <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d049      	beq.n	8008ce6 <_dtoa_r+0x216>
 8008c52:	3f01      	subs	r7, #1
 8008c54:	2300      	movs	r3, #0
 8008c56:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c5a:	1b9b      	subs	r3, r3, r6
 8008c5c:	1e5a      	subs	r2, r3, #1
 8008c5e:	bf45      	ittet	mi
 8008c60:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c64:	9300      	strmi	r3, [sp, #0]
 8008c66:	2300      	movpl	r3, #0
 8008c68:	2300      	movmi	r3, #0
 8008c6a:	9206      	str	r2, [sp, #24]
 8008c6c:	bf54      	ite	pl
 8008c6e:	9300      	strpl	r3, [sp, #0]
 8008c70:	9306      	strmi	r3, [sp, #24]
 8008c72:	2f00      	cmp	r7, #0
 8008c74:	db39      	blt.n	8008cea <_dtoa_r+0x21a>
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	970d      	str	r7, [sp, #52]	@ 0x34
 8008c7a:	443b      	add	r3, r7
 8008c7c:	9306      	str	r3, [sp, #24]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9308      	str	r3, [sp, #32]
 8008c82:	9b07      	ldr	r3, [sp, #28]
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d863      	bhi.n	8008d50 <_dtoa_r+0x280>
 8008c88:	2b05      	cmp	r3, #5
 8008c8a:	bfc4      	itt	gt
 8008c8c:	3b04      	subgt	r3, #4
 8008c8e:	9307      	strgt	r3, [sp, #28]
 8008c90:	9b07      	ldr	r3, [sp, #28]
 8008c92:	f1a3 0302 	sub.w	r3, r3, #2
 8008c96:	bfcc      	ite	gt
 8008c98:	2400      	movgt	r4, #0
 8008c9a:	2401      	movle	r4, #1
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d863      	bhi.n	8008d68 <_dtoa_r+0x298>
 8008ca0:	e8df f003 	tbb	[pc, r3]
 8008ca4:	2b375452 	.word	0x2b375452
 8008ca8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008cac:	441e      	add	r6, r3
 8008cae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008cb2:	2b20      	cmp	r3, #32
 8008cb4:	bfc1      	itttt	gt
 8008cb6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008cba:	409f      	lslgt	r7, r3
 8008cbc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008cc0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008cc4:	bfd6      	itet	le
 8008cc6:	f1c3 0320 	rsble	r3, r3, #32
 8008cca:	ea47 0003 	orrgt.w	r0, r7, r3
 8008cce:	fa04 f003 	lslle.w	r0, r4, r3
 8008cd2:	f7f7 fc2f 	bl	8000534 <__aeabi_ui2d>
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008cdc:	3e01      	subs	r6, #1
 8008cde:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ce0:	e776      	b.n	8008bd0 <_dtoa_r+0x100>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e7b7      	b.n	8008c56 <_dtoa_r+0x186>
 8008ce6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ce8:	e7b6      	b.n	8008c58 <_dtoa_r+0x188>
 8008cea:	9b00      	ldr	r3, [sp, #0]
 8008cec:	1bdb      	subs	r3, r3, r7
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	427b      	negs	r3, r7
 8008cf2:	9308      	str	r3, [sp, #32]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cf8:	e7c3      	b.n	8008c82 <_dtoa_r+0x1b2>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d00:	eb07 0b03 	add.w	fp, r7, r3
 8008d04:	f10b 0301 	add.w	r3, fp, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	9303      	str	r3, [sp, #12]
 8008d0c:	bfb8      	it	lt
 8008d0e:	2301      	movlt	r3, #1
 8008d10:	e006      	b.n	8008d20 <_dtoa_r+0x250>
 8008d12:	2301      	movs	r3, #1
 8008d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dd28      	ble.n	8008d6e <_dtoa_r+0x29e>
 8008d1c:	469b      	mov	fp, r3
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008d24:	2100      	movs	r1, #0
 8008d26:	2204      	movs	r2, #4
 8008d28:	f102 0514 	add.w	r5, r2, #20
 8008d2c:	429d      	cmp	r5, r3
 8008d2e:	d926      	bls.n	8008d7e <_dtoa_r+0x2ae>
 8008d30:	6041      	str	r1, [r0, #4]
 8008d32:	4648      	mov	r0, r9
 8008d34:	f001 faa0 	bl	800a278 <_Balloc>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d142      	bne.n	8008dc4 <_dtoa_r+0x2f4>
 8008d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008db8 <_dtoa_r+0x2e8>)
 8008d40:	4602      	mov	r2, r0
 8008d42:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d46:	e6da      	b.n	8008afe <_dtoa_r+0x2e>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e7e3      	b.n	8008d14 <_dtoa_r+0x244>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e7d5      	b.n	8008cfc <_dtoa_r+0x22c>
 8008d50:	2401      	movs	r4, #1
 8008d52:	2300      	movs	r3, #0
 8008d54:	9307      	str	r3, [sp, #28]
 8008d56:	9409      	str	r4, [sp, #36]	@ 0x24
 8008d58:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d62:	2312      	movs	r3, #18
 8008d64:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d66:	e7db      	b.n	8008d20 <_dtoa_r+0x250>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d6c:	e7f4      	b.n	8008d58 <_dtoa_r+0x288>
 8008d6e:	f04f 0b01 	mov.w	fp, #1
 8008d72:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d76:	465b      	mov	r3, fp
 8008d78:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008d7c:	e7d0      	b.n	8008d20 <_dtoa_r+0x250>
 8008d7e:	3101      	adds	r1, #1
 8008d80:	0052      	lsls	r2, r2, #1
 8008d82:	e7d1      	b.n	8008d28 <_dtoa_r+0x258>
 8008d84:	f3af 8000 	nop.w
 8008d88:	636f4361 	.word	0x636f4361
 8008d8c:	3fd287a7 	.word	0x3fd287a7
 8008d90:	8b60c8b3 	.word	0x8b60c8b3
 8008d94:	3fc68a28 	.word	0x3fc68a28
 8008d98:	509f79fb 	.word	0x509f79fb
 8008d9c:	3fd34413 	.word	0x3fd34413
 8008da0:	0800b544 	.word	0x0800b544
 8008da4:	0800b55b 	.word	0x0800b55b
 8008da8:	7ff00000 	.word	0x7ff00000
 8008dac:	0800b505 	.word	0x0800b505
 8008db0:	3ff80000 	.word	0x3ff80000
 8008db4:	0800b858 	.word	0x0800b858
 8008db8:	0800b5b3 	.word	0x0800b5b3
 8008dbc:	0800b540 	.word	0x0800b540
 8008dc0:	0800b504 	.word	0x0800b504
 8008dc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008dc8:	6018      	str	r0, [r3, #0]
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	2b0e      	cmp	r3, #14
 8008dce:	f200 80a1 	bhi.w	8008f14 <_dtoa_r+0x444>
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	f000 809e 	beq.w	8008f14 <_dtoa_r+0x444>
 8008dd8:	2f00      	cmp	r7, #0
 8008dda:	dd33      	ble.n	8008e44 <_dtoa_r+0x374>
 8008ddc:	4b9c      	ldr	r3, [pc, #624]	@ (8009050 <_dtoa_r+0x580>)
 8008dde:	f007 020f 	and.w	r2, r7, #15
 8008de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008de6:	ed93 7b00 	vldr	d7, [r3]
 8008dea:	05f8      	lsls	r0, r7, #23
 8008dec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008df0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008df4:	d516      	bpl.n	8008e24 <_dtoa_r+0x354>
 8008df6:	4b97      	ldr	r3, [pc, #604]	@ (8009054 <_dtoa_r+0x584>)
 8008df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e00:	f7f7 fd3c 	bl	800087c <__aeabi_ddiv>
 8008e04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e08:	f004 040f 	and.w	r4, r4, #15
 8008e0c:	2603      	movs	r6, #3
 8008e0e:	4d91      	ldr	r5, [pc, #580]	@ (8009054 <_dtoa_r+0x584>)
 8008e10:	b954      	cbnz	r4, 8008e28 <_dtoa_r+0x358>
 8008e12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e1a:	f7f7 fd2f 	bl	800087c <__aeabi_ddiv>
 8008e1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e22:	e028      	b.n	8008e76 <_dtoa_r+0x3a6>
 8008e24:	2602      	movs	r6, #2
 8008e26:	e7f2      	b.n	8008e0e <_dtoa_r+0x33e>
 8008e28:	07e1      	lsls	r1, r4, #31
 8008e2a:	d508      	bpl.n	8008e3e <_dtoa_r+0x36e>
 8008e2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e34:	f7f7 fbf8 	bl	8000628 <__aeabi_dmul>
 8008e38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	1064      	asrs	r4, r4, #1
 8008e40:	3508      	adds	r5, #8
 8008e42:	e7e5      	b.n	8008e10 <_dtoa_r+0x340>
 8008e44:	f000 80af 	beq.w	8008fa6 <_dtoa_r+0x4d6>
 8008e48:	427c      	negs	r4, r7
 8008e4a:	4b81      	ldr	r3, [pc, #516]	@ (8009050 <_dtoa_r+0x580>)
 8008e4c:	4d81      	ldr	r5, [pc, #516]	@ (8009054 <_dtoa_r+0x584>)
 8008e4e:	f004 020f 	and.w	r2, r4, #15
 8008e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e5e:	f7f7 fbe3 	bl	8000628 <__aeabi_dmul>
 8008e62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e66:	1124      	asrs	r4, r4, #4
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2602      	movs	r6, #2
 8008e6c:	2c00      	cmp	r4, #0
 8008e6e:	f040 808f 	bne.w	8008f90 <_dtoa_r+0x4c0>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1d3      	bne.n	8008e1e <_dtoa_r+0x34e>
 8008e76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8094 	beq.w	8008faa <_dtoa_r+0x4da>
 8008e82:	4b75      	ldr	r3, [pc, #468]	@ (8009058 <_dtoa_r+0x588>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fe3f 	bl	8000b0c <__aeabi_dcmplt>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f000 808b 	beq.w	8008faa <_dtoa_r+0x4da>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8087 	beq.w	8008faa <_dtoa_r+0x4da>
 8008e9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ea0:	dd34      	ble.n	8008f0c <_dtoa_r+0x43c>
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4b6d      	ldr	r3, [pc, #436]	@ (800905c <_dtoa_r+0x58c>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fbbd 	bl	8000628 <__aeabi_dmul>
 8008eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eb2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008eb6:	3601      	adds	r6, #1
 8008eb8:	465c      	mov	r4, fp
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7f7 fb4a 	bl	8000554 <__aeabi_i2d>
 8008ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ec4:	f7f7 fbb0 	bl	8000628 <__aeabi_dmul>
 8008ec8:	4b65      	ldr	r3, [pc, #404]	@ (8009060 <_dtoa_r+0x590>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f7f7 f9f6 	bl	80002bc <__adddf3>
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ed6:	2c00      	cmp	r4, #0
 8008ed8:	d16a      	bne.n	8008fb0 <_dtoa_r+0x4e0>
 8008eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ede:	4b61      	ldr	r3, [pc, #388]	@ (8009064 <_dtoa_r+0x594>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f7f7 f9e9 	bl	80002b8 <__aeabi_dsub>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4633      	mov	r3, r6
 8008ef2:	f7f7 fe29 	bl	8000b48 <__aeabi_dcmpgt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f040 8298 	bne.w	800942c <_dtoa_r+0x95c>
 8008efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f00:	462a      	mov	r2, r5
 8008f02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f06:	f7f7 fe01 	bl	8000b0c <__aeabi_dcmplt>
 8008f0a:	bb38      	cbnz	r0, 8008f5c <_dtoa_r+0x48c>
 8008f0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008f10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f2c0 8157 	blt.w	80091ca <_dtoa_r+0x6fa>
 8008f1c:	2f0e      	cmp	r7, #14
 8008f1e:	f300 8154 	bgt.w	80091ca <_dtoa_r+0x6fa>
 8008f22:	4b4b      	ldr	r3, [pc, #300]	@ (8009050 <_dtoa_r+0x580>)
 8008f24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f28:	ed93 7b00 	vldr	d7, [r3]
 8008f2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	ed8d 7b00 	vstr	d7, [sp]
 8008f34:	f280 80e5 	bge.w	8009102 <_dtoa_r+0x632>
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f300 80e1 	bgt.w	8009102 <_dtoa_r+0x632>
 8008f40:	d10c      	bne.n	8008f5c <_dtoa_r+0x48c>
 8008f42:	4b48      	ldr	r3, [pc, #288]	@ (8009064 <_dtoa_r+0x594>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	ec51 0b17 	vmov	r0, r1, d7
 8008f4a:	f7f7 fb6d 	bl	8000628 <__aeabi_dmul>
 8008f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f52:	f7f7 fdef 	bl	8000b34 <__aeabi_dcmpge>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f000 8266 	beq.w	8009428 <_dtoa_r+0x958>
 8008f5c:	2400      	movs	r4, #0
 8008f5e:	4625      	mov	r5, r4
 8008f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f62:	4656      	mov	r6, sl
 8008f64:	ea6f 0803 	mvn.w	r8, r3
 8008f68:	2700      	movs	r7, #0
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4648      	mov	r0, r9
 8008f6e:	f001 f9c3 	bl	800a2f8 <_Bfree>
 8008f72:	2d00      	cmp	r5, #0
 8008f74:	f000 80bd 	beq.w	80090f2 <_dtoa_r+0x622>
 8008f78:	b12f      	cbz	r7, 8008f86 <_dtoa_r+0x4b6>
 8008f7a:	42af      	cmp	r7, r5
 8008f7c:	d003      	beq.n	8008f86 <_dtoa_r+0x4b6>
 8008f7e:	4639      	mov	r1, r7
 8008f80:	4648      	mov	r0, r9
 8008f82:	f001 f9b9 	bl	800a2f8 <_Bfree>
 8008f86:	4629      	mov	r1, r5
 8008f88:	4648      	mov	r0, r9
 8008f8a:	f001 f9b5 	bl	800a2f8 <_Bfree>
 8008f8e:	e0b0      	b.n	80090f2 <_dtoa_r+0x622>
 8008f90:	07e2      	lsls	r2, r4, #31
 8008f92:	d505      	bpl.n	8008fa0 <_dtoa_r+0x4d0>
 8008f94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f98:	f7f7 fb46 	bl	8000628 <__aeabi_dmul>
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	1064      	asrs	r4, r4, #1
 8008fa2:	3508      	adds	r5, #8
 8008fa4:	e762      	b.n	8008e6c <_dtoa_r+0x39c>
 8008fa6:	2602      	movs	r6, #2
 8008fa8:	e765      	b.n	8008e76 <_dtoa_r+0x3a6>
 8008faa:	9c03      	ldr	r4, [sp, #12]
 8008fac:	46b8      	mov	r8, r7
 8008fae:	e784      	b.n	8008eba <_dtoa_r+0x3ea>
 8008fb0:	4b27      	ldr	r3, [pc, #156]	@ (8009050 <_dtoa_r+0x580>)
 8008fb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fbc:	4454      	add	r4, sl
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d054      	beq.n	800906c <_dtoa_r+0x59c>
 8008fc2:	4929      	ldr	r1, [pc, #164]	@ (8009068 <_dtoa_r+0x598>)
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f7f7 fc59 	bl	800087c <__aeabi_ddiv>
 8008fca:	4633      	mov	r3, r6
 8008fcc:	462a      	mov	r2, r5
 8008fce:	f7f7 f973 	bl	80002b8 <__aeabi_dsub>
 8008fd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008fd6:	4656      	mov	r6, sl
 8008fd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fdc:	f7f7 fdd4 	bl	8000b88 <__aeabi_d2iz>
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	f7f7 fab7 	bl	8000554 <__aeabi_i2d>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fee:	f7f7 f963 	bl	80002b8 <__aeabi_dsub>
 8008ff2:	3530      	adds	r5, #48	@ 0x30
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ffc:	f806 5b01 	strb.w	r5, [r6], #1
 8009000:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009004:	f7f7 fd82 	bl	8000b0c <__aeabi_dcmplt>
 8009008:	2800      	cmp	r0, #0
 800900a:	d172      	bne.n	80090f2 <_dtoa_r+0x622>
 800900c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009010:	4911      	ldr	r1, [pc, #68]	@ (8009058 <_dtoa_r+0x588>)
 8009012:	2000      	movs	r0, #0
 8009014:	f7f7 f950 	bl	80002b8 <__aeabi_dsub>
 8009018:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800901c:	f7f7 fd76 	bl	8000b0c <__aeabi_dcmplt>
 8009020:	2800      	cmp	r0, #0
 8009022:	f040 80b4 	bne.w	800918e <_dtoa_r+0x6be>
 8009026:	42a6      	cmp	r6, r4
 8009028:	f43f af70 	beq.w	8008f0c <_dtoa_r+0x43c>
 800902c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009030:	4b0a      	ldr	r3, [pc, #40]	@ (800905c <_dtoa_r+0x58c>)
 8009032:	2200      	movs	r2, #0
 8009034:	f7f7 faf8 	bl	8000628 <__aeabi_dmul>
 8009038:	4b08      	ldr	r3, [pc, #32]	@ (800905c <_dtoa_r+0x58c>)
 800903a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800903e:	2200      	movs	r2, #0
 8009040:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009044:	f7f7 faf0 	bl	8000628 <__aeabi_dmul>
 8009048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800904c:	e7c4      	b.n	8008fd8 <_dtoa_r+0x508>
 800904e:	bf00      	nop
 8009050:	0800b858 	.word	0x0800b858
 8009054:	0800b830 	.word	0x0800b830
 8009058:	3ff00000 	.word	0x3ff00000
 800905c:	40240000 	.word	0x40240000
 8009060:	401c0000 	.word	0x401c0000
 8009064:	40140000 	.word	0x40140000
 8009068:	3fe00000 	.word	0x3fe00000
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	f7f7 fada 	bl	8000628 <__aeabi_dmul>
 8009074:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009078:	9413      	str	r4, [sp, #76]	@ 0x4c
 800907a:	4656      	mov	r6, sl
 800907c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009080:	f7f7 fd82 	bl	8000b88 <__aeabi_d2iz>
 8009084:	4605      	mov	r5, r0
 8009086:	f7f7 fa65 	bl	8000554 <__aeabi_i2d>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009092:	f7f7 f911 	bl	80002b8 <__aeabi_dsub>
 8009096:	3530      	adds	r5, #48	@ 0x30
 8009098:	f806 5b01 	strb.w	r5, [r6], #1
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	d124      	bne.n	80090f6 <_dtoa_r+0x626>
 80090ac:	4baf      	ldr	r3, [pc, #700]	@ (800936c <_dtoa_r+0x89c>)
 80090ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80090b2:	f7f7 f903 	bl	80002bc <__adddf3>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090be:	f7f7 fd43 	bl	8000b48 <__aeabi_dcmpgt>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d163      	bne.n	800918e <_dtoa_r+0x6be>
 80090c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090ca:	49a8      	ldr	r1, [pc, #672]	@ (800936c <_dtoa_r+0x89c>)
 80090cc:	2000      	movs	r0, #0
 80090ce:	f7f7 f8f3 	bl	80002b8 <__aeabi_dsub>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090da:	f7f7 fd17 	bl	8000b0c <__aeabi_dcmplt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f43f af14 	beq.w	8008f0c <_dtoa_r+0x43c>
 80090e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80090e6:	1e73      	subs	r3, r6, #1
 80090e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ee:	2b30      	cmp	r3, #48	@ 0x30
 80090f0:	d0f8      	beq.n	80090e4 <_dtoa_r+0x614>
 80090f2:	4647      	mov	r7, r8
 80090f4:	e03b      	b.n	800916e <_dtoa_r+0x69e>
 80090f6:	4b9e      	ldr	r3, [pc, #632]	@ (8009370 <_dtoa_r+0x8a0>)
 80090f8:	f7f7 fa96 	bl	8000628 <__aeabi_dmul>
 80090fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009100:	e7bc      	b.n	800907c <_dtoa_r+0x5ac>
 8009102:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009106:	4656      	mov	r6, sl
 8009108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 fbb4 	bl	800087c <__aeabi_ddiv>
 8009114:	f7f7 fd38 	bl	8000b88 <__aeabi_d2iz>
 8009118:	4680      	mov	r8, r0
 800911a:	f7f7 fa1b 	bl	8000554 <__aeabi_i2d>
 800911e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009122:	f7f7 fa81 	bl	8000628 <__aeabi_dmul>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4620      	mov	r0, r4
 800912c:	4629      	mov	r1, r5
 800912e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009132:	f7f7 f8c1 	bl	80002b8 <__aeabi_dsub>
 8009136:	f806 4b01 	strb.w	r4, [r6], #1
 800913a:	9d03      	ldr	r5, [sp, #12]
 800913c:	eba6 040a 	sub.w	r4, r6, sl
 8009140:	42a5      	cmp	r5, r4
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	d133      	bne.n	80091b0 <_dtoa_r+0x6e0>
 8009148:	f7f7 f8b8 	bl	80002bc <__adddf3>
 800914c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009150:	4604      	mov	r4, r0
 8009152:	460d      	mov	r5, r1
 8009154:	f7f7 fcf8 	bl	8000b48 <__aeabi_dcmpgt>
 8009158:	b9c0      	cbnz	r0, 800918c <_dtoa_r+0x6bc>
 800915a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 fcc9 	bl	8000af8 <__aeabi_dcmpeq>
 8009166:	b110      	cbz	r0, 800916e <_dtoa_r+0x69e>
 8009168:	f018 0f01 	tst.w	r8, #1
 800916c:	d10e      	bne.n	800918c <_dtoa_r+0x6bc>
 800916e:	9902      	ldr	r1, [sp, #8]
 8009170:	4648      	mov	r0, r9
 8009172:	f001 f8c1 	bl	800a2f8 <_Bfree>
 8009176:	2300      	movs	r3, #0
 8009178:	7033      	strb	r3, [r6, #0]
 800917a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800917c:	3701      	adds	r7, #1
 800917e:	601f      	str	r7, [r3, #0]
 8009180:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 824b 	beq.w	800961e <_dtoa_r+0xb4e>
 8009188:	601e      	str	r6, [r3, #0]
 800918a:	e248      	b.n	800961e <_dtoa_r+0xb4e>
 800918c:	46b8      	mov	r8, r7
 800918e:	4633      	mov	r3, r6
 8009190:	461e      	mov	r6, r3
 8009192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009196:	2a39      	cmp	r2, #57	@ 0x39
 8009198:	d106      	bne.n	80091a8 <_dtoa_r+0x6d8>
 800919a:	459a      	cmp	sl, r3
 800919c:	d1f8      	bne.n	8009190 <_dtoa_r+0x6c0>
 800919e:	2230      	movs	r2, #48	@ 0x30
 80091a0:	f108 0801 	add.w	r8, r8, #1
 80091a4:	f88a 2000 	strb.w	r2, [sl]
 80091a8:	781a      	ldrb	r2, [r3, #0]
 80091aa:	3201      	adds	r2, #1
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	e7a0      	b.n	80090f2 <_dtoa_r+0x622>
 80091b0:	4b6f      	ldr	r3, [pc, #444]	@ (8009370 <_dtoa_r+0x8a0>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	f7f7 fa38 	bl	8000628 <__aeabi_dmul>
 80091b8:	2200      	movs	r2, #0
 80091ba:	2300      	movs	r3, #0
 80091bc:	4604      	mov	r4, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	f7f7 fc9a 	bl	8000af8 <__aeabi_dcmpeq>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d09f      	beq.n	8009108 <_dtoa_r+0x638>
 80091c8:	e7d1      	b.n	800916e <_dtoa_r+0x69e>
 80091ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	f000 80ea 	beq.w	80093a6 <_dtoa_r+0x8d6>
 80091d2:	9a07      	ldr	r2, [sp, #28]
 80091d4:	2a01      	cmp	r2, #1
 80091d6:	f300 80cd 	bgt.w	8009374 <_dtoa_r+0x8a4>
 80091da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091dc:	2a00      	cmp	r2, #0
 80091de:	f000 80c1 	beq.w	8009364 <_dtoa_r+0x894>
 80091e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091e6:	9c08      	ldr	r4, [sp, #32]
 80091e8:	9e00      	ldr	r6, [sp, #0]
 80091ea:	9a00      	ldr	r2, [sp, #0]
 80091ec:	441a      	add	r2, r3
 80091ee:	9200      	str	r2, [sp, #0]
 80091f0:	9a06      	ldr	r2, [sp, #24]
 80091f2:	2101      	movs	r1, #1
 80091f4:	441a      	add	r2, r3
 80091f6:	4648      	mov	r0, r9
 80091f8:	9206      	str	r2, [sp, #24]
 80091fa:	f001 f97b 	bl	800a4f4 <__i2b>
 80091fe:	4605      	mov	r5, r0
 8009200:	b166      	cbz	r6, 800921c <_dtoa_r+0x74c>
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd09      	ble.n	800921c <_dtoa_r+0x74c>
 8009208:	42b3      	cmp	r3, r6
 800920a:	9a00      	ldr	r2, [sp, #0]
 800920c:	bfa8      	it	ge
 800920e:	4633      	movge	r3, r6
 8009210:	1ad2      	subs	r2, r2, r3
 8009212:	9200      	str	r2, [sp, #0]
 8009214:	9a06      	ldr	r2, [sp, #24]
 8009216:	1af6      	subs	r6, r6, r3
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	9306      	str	r3, [sp, #24]
 800921c:	9b08      	ldr	r3, [sp, #32]
 800921e:	b30b      	cbz	r3, 8009264 <_dtoa_r+0x794>
 8009220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80c6 	beq.w	80093b4 <_dtoa_r+0x8e4>
 8009228:	2c00      	cmp	r4, #0
 800922a:	f000 80c0 	beq.w	80093ae <_dtoa_r+0x8de>
 800922e:	4629      	mov	r1, r5
 8009230:	4622      	mov	r2, r4
 8009232:	4648      	mov	r0, r9
 8009234:	f001 fa16 	bl	800a664 <__pow5mult>
 8009238:	9a02      	ldr	r2, [sp, #8]
 800923a:	4601      	mov	r1, r0
 800923c:	4605      	mov	r5, r0
 800923e:	4648      	mov	r0, r9
 8009240:	f001 f96e 	bl	800a520 <__multiply>
 8009244:	9902      	ldr	r1, [sp, #8]
 8009246:	4680      	mov	r8, r0
 8009248:	4648      	mov	r0, r9
 800924a:	f001 f855 	bl	800a2f8 <_Bfree>
 800924e:	9b08      	ldr	r3, [sp, #32]
 8009250:	1b1b      	subs	r3, r3, r4
 8009252:	9308      	str	r3, [sp, #32]
 8009254:	f000 80b1 	beq.w	80093ba <_dtoa_r+0x8ea>
 8009258:	9a08      	ldr	r2, [sp, #32]
 800925a:	4641      	mov	r1, r8
 800925c:	4648      	mov	r0, r9
 800925e:	f001 fa01 	bl	800a664 <__pow5mult>
 8009262:	9002      	str	r0, [sp, #8]
 8009264:	2101      	movs	r1, #1
 8009266:	4648      	mov	r0, r9
 8009268:	f001 f944 	bl	800a4f4 <__i2b>
 800926c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800926e:	4604      	mov	r4, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 81d8 	beq.w	8009626 <_dtoa_r+0xb56>
 8009276:	461a      	mov	r2, r3
 8009278:	4601      	mov	r1, r0
 800927a:	4648      	mov	r0, r9
 800927c:	f001 f9f2 	bl	800a664 <__pow5mult>
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	2b01      	cmp	r3, #1
 8009284:	4604      	mov	r4, r0
 8009286:	f300 809f 	bgt.w	80093c8 <_dtoa_r+0x8f8>
 800928a:	9b04      	ldr	r3, [sp, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f040 8097 	bne.w	80093c0 <_dtoa_r+0x8f0>
 8009292:	9b05      	ldr	r3, [sp, #20]
 8009294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 8093 	bne.w	80093c4 <_dtoa_r+0x8f4>
 800929e:	9b05      	ldr	r3, [sp, #20]
 80092a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092a4:	0d1b      	lsrs	r3, r3, #20
 80092a6:	051b      	lsls	r3, r3, #20
 80092a8:	b133      	cbz	r3, 80092b8 <_dtoa_r+0x7e8>
 80092aa:	9b00      	ldr	r3, [sp, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	9b06      	ldr	r3, [sp, #24]
 80092b2:	3301      	adds	r3, #1
 80092b4:	9306      	str	r3, [sp, #24]
 80092b6:	2301      	movs	r3, #1
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 81b8 	beq.w	8009632 <_dtoa_r+0xb62>
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092c8:	6918      	ldr	r0, [r3, #16]
 80092ca:	f001 f8c7 	bl	800a45c <__hi0bits>
 80092ce:	f1c0 0020 	rsb	r0, r0, #32
 80092d2:	9b06      	ldr	r3, [sp, #24]
 80092d4:	4418      	add	r0, r3
 80092d6:	f010 001f 	ands.w	r0, r0, #31
 80092da:	f000 8082 	beq.w	80093e2 <_dtoa_r+0x912>
 80092de:	f1c0 0320 	rsb	r3, r0, #32
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	dd73      	ble.n	80093ce <_dtoa_r+0x8fe>
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	f1c0 001c 	rsb	r0, r0, #28
 80092ec:	4403      	add	r3, r0
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	9b06      	ldr	r3, [sp, #24]
 80092f2:	4403      	add	r3, r0
 80092f4:	4406      	add	r6, r0
 80092f6:	9306      	str	r3, [sp, #24]
 80092f8:	9b00      	ldr	r3, [sp, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	dd05      	ble.n	800930a <_dtoa_r+0x83a>
 80092fe:	9902      	ldr	r1, [sp, #8]
 8009300:	461a      	mov	r2, r3
 8009302:	4648      	mov	r0, r9
 8009304:	f001 fa08 	bl	800a718 <__lshift>
 8009308:	9002      	str	r0, [sp, #8]
 800930a:	9b06      	ldr	r3, [sp, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd05      	ble.n	800931c <_dtoa_r+0x84c>
 8009310:	4621      	mov	r1, r4
 8009312:	461a      	mov	r2, r3
 8009314:	4648      	mov	r0, r9
 8009316:	f001 f9ff 	bl	800a718 <__lshift>
 800931a:	4604      	mov	r4, r0
 800931c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d061      	beq.n	80093e6 <_dtoa_r+0x916>
 8009322:	9802      	ldr	r0, [sp, #8]
 8009324:	4621      	mov	r1, r4
 8009326:	f001 fa63 	bl	800a7f0 <__mcmp>
 800932a:	2800      	cmp	r0, #0
 800932c:	da5b      	bge.n	80093e6 <_dtoa_r+0x916>
 800932e:	2300      	movs	r3, #0
 8009330:	9902      	ldr	r1, [sp, #8]
 8009332:	220a      	movs	r2, #10
 8009334:	4648      	mov	r0, r9
 8009336:	f001 f801 	bl	800a33c <__multadd>
 800933a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933c:	9002      	str	r0, [sp, #8]
 800933e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 8177 	beq.w	8009636 <_dtoa_r+0xb66>
 8009348:	4629      	mov	r1, r5
 800934a:	2300      	movs	r3, #0
 800934c:	220a      	movs	r2, #10
 800934e:	4648      	mov	r0, r9
 8009350:	f000 fff4 	bl	800a33c <__multadd>
 8009354:	f1bb 0f00 	cmp.w	fp, #0
 8009358:	4605      	mov	r5, r0
 800935a:	dc6f      	bgt.n	800943c <_dtoa_r+0x96c>
 800935c:	9b07      	ldr	r3, [sp, #28]
 800935e:	2b02      	cmp	r3, #2
 8009360:	dc49      	bgt.n	80093f6 <_dtoa_r+0x926>
 8009362:	e06b      	b.n	800943c <_dtoa_r+0x96c>
 8009364:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009366:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800936a:	e73c      	b.n	80091e6 <_dtoa_r+0x716>
 800936c:	3fe00000 	.word	0x3fe00000
 8009370:	40240000 	.word	0x40240000
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	1e5c      	subs	r4, r3, #1
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	42a3      	cmp	r3, r4
 800937c:	db09      	blt.n	8009392 <_dtoa_r+0x8c2>
 800937e:	1b1c      	subs	r4, r3, r4
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f6bf af30 	bge.w	80091e8 <_dtoa_r+0x718>
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	9a03      	ldr	r2, [sp, #12]
 800938c:	1a9e      	subs	r6, r3, r2
 800938e:	2300      	movs	r3, #0
 8009390:	e72b      	b.n	80091ea <_dtoa_r+0x71a>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009396:	9408      	str	r4, [sp, #32]
 8009398:	1ae3      	subs	r3, r4, r3
 800939a:	441a      	add	r2, r3
 800939c:	9e00      	ldr	r6, [sp, #0]
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80093a2:	2400      	movs	r4, #0
 80093a4:	e721      	b.n	80091ea <_dtoa_r+0x71a>
 80093a6:	9c08      	ldr	r4, [sp, #32]
 80093a8:	9e00      	ldr	r6, [sp, #0]
 80093aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80093ac:	e728      	b.n	8009200 <_dtoa_r+0x730>
 80093ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80093b2:	e751      	b.n	8009258 <_dtoa_r+0x788>
 80093b4:	9a08      	ldr	r2, [sp, #32]
 80093b6:	9902      	ldr	r1, [sp, #8]
 80093b8:	e750      	b.n	800925c <_dtoa_r+0x78c>
 80093ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80093be:	e751      	b.n	8009264 <_dtoa_r+0x794>
 80093c0:	2300      	movs	r3, #0
 80093c2:	e779      	b.n	80092b8 <_dtoa_r+0x7e8>
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	e777      	b.n	80092b8 <_dtoa_r+0x7e8>
 80093c8:	2300      	movs	r3, #0
 80093ca:	9308      	str	r3, [sp, #32]
 80093cc:	e779      	b.n	80092c2 <_dtoa_r+0x7f2>
 80093ce:	d093      	beq.n	80092f8 <_dtoa_r+0x828>
 80093d0:	9a00      	ldr	r2, [sp, #0]
 80093d2:	331c      	adds	r3, #28
 80093d4:	441a      	add	r2, r3
 80093d6:	9200      	str	r2, [sp, #0]
 80093d8:	9a06      	ldr	r2, [sp, #24]
 80093da:	441a      	add	r2, r3
 80093dc:	441e      	add	r6, r3
 80093de:	9206      	str	r2, [sp, #24]
 80093e0:	e78a      	b.n	80092f8 <_dtoa_r+0x828>
 80093e2:	4603      	mov	r3, r0
 80093e4:	e7f4      	b.n	80093d0 <_dtoa_r+0x900>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	46b8      	mov	r8, r7
 80093ec:	dc20      	bgt.n	8009430 <_dtoa_r+0x960>
 80093ee:	469b      	mov	fp, r3
 80093f0:	9b07      	ldr	r3, [sp, #28]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	dd1e      	ble.n	8009434 <_dtoa_r+0x964>
 80093f6:	f1bb 0f00 	cmp.w	fp, #0
 80093fa:	f47f adb1 	bne.w	8008f60 <_dtoa_r+0x490>
 80093fe:	4621      	mov	r1, r4
 8009400:	465b      	mov	r3, fp
 8009402:	2205      	movs	r2, #5
 8009404:	4648      	mov	r0, r9
 8009406:	f000 ff99 	bl	800a33c <__multadd>
 800940a:	4601      	mov	r1, r0
 800940c:	4604      	mov	r4, r0
 800940e:	9802      	ldr	r0, [sp, #8]
 8009410:	f001 f9ee 	bl	800a7f0 <__mcmp>
 8009414:	2800      	cmp	r0, #0
 8009416:	f77f ada3 	ble.w	8008f60 <_dtoa_r+0x490>
 800941a:	4656      	mov	r6, sl
 800941c:	2331      	movs	r3, #49	@ 0x31
 800941e:	f806 3b01 	strb.w	r3, [r6], #1
 8009422:	f108 0801 	add.w	r8, r8, #1
 8009426:	e59f      	b.n	8008f68 <_dtoa_r+0x498>
 8009428:	9c03      	ldr	r4, [sp, #12]
 800942a:	46b8      	mov	r8, r7
 800942c:	4625      	mov	r5, r4
 800942e:	e7f4      	b.n	800941a <_dtoa_r+0x94a>
 8009430:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 8101 	beq.w	800963e <_dtoa_r+0xb6e>
 800943c:	2e00      	cmp	r6, #0
 800943e:	dd05      	ble.n	800944c <_dtoa_r+0x97c>
 8009440:	4629      	mov	r1, r5
 8009442:	4632      	mov	r2, r6
 8009444:	4648      	mov	r0, r9
 8009446:	f001 f967 	bl	800a718 <__lshift>
 800944a:	4605      	mov	r5, r0
 800944c:	9b08      	ldr	r3, [sp, #32]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d05c      	beq.n	800950c <_dtoa_r+0xa3c>
 8009452:	6869      	ldr	r1, [r5, #4]
 8009454:	4648      	mov	r0, r9
 8009456:	f000 ff0f 	bl	800a278 <_Balloc>
 800945a:	4606      	mov	r6, r0
 800945c:	b928      	cbnz	r0, 800946a <_dtoa_r+0x99a>
 800945e:	4b82      	ldr	r3, [pc, #520]	@ (8009668 <_dtoa_r+0xb98>)
 8009460:	4602      	mov	r2, r0
 8009462:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009466:	f7ff bb4a 	b.w	8008afe <_dtoa_r+0x2e>
 800946a:	692a      	ldr	r2, [r5, #16]
 800946c:	3202      	adds	r2, #2
 800946e:	0092      	lsls	r2, r2, #2
 8009470:	f105 010c 	add.w	r1, r5, #12
 8009474:	300c      	adds	r0, #12
 8009476:	f7ff fa83 	bl	8008980 <memcpy>
 800947a:	2201      	movs	r2, #1
 800947c:	4631      	mov	r1, r6
 800947e:	4648      	mov	r0, r9
 8009480:	f001 f94a 	bl	800a718 <__lshift>
 8009484:	f10a 0301 	add.w	r3, sl, #1
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	eb0a 030b 	add.w	r3, sl, fp
 800948e:	9308      	str	r3, [sp, #32]
 8009490:	9b04      	ldr	r3, [sp, #16]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	462f      	mov	r7, r5
 8009498:	9306      	str	r3, [sp, #24]
 800949a:	4605      	mov	r5, r0
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	9802      	ldr	r0, [sp, #8]
 80094a0:	4621      	mov	r1, r4
 80094a2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80094a6:	f7ff fa89 	bl	80089bc <quorem>
 80094aa:	4603      	mov	r3, r0
 80094ac:	3330      	adds	r3, #48	@ 0x30
 80094ae:	9003      	str	r0, [sp, #12]
 80094b0:	4639      	mov	r1, r7
 80094b2:	9802      	ldr	r0, [sp, #8]
 80094b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b6:	f001 f99b 	bl	800a7f0 <__mcmp>
 80094ba:	462a      	mov	r2, r5
 80094bc:	9004      	str	r0, [sp, #16]
 80094be:	4621      	mov	r1, r4
 80094c0:	4648      	mov	r0, r9
 80094c2:	f001 f9b1 	bl	800a828 <__mdiff>
 80094c6:	68c2      	ldr	r2, [r0, #12]
 80094c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ca:	4606      	mov	r6, r0
 80094cc:	bb02      	cbnz	r2, 8009510 <_dtoa_r+0xa40>
 80094ce:	4601      	mov	r1, r0
 80094d0:	9802      	ldr	r0, [sp, #8]
 80094d2:	f001 f98d 	bl	800a7f0 <__mcmp>
 80094d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d8:	4602      	mov	r2, r0
 80094da:	4631      	mov	r1, r6
 80094dc:	4648      	mov	r0, r9
 80094de:	920c      	str	r2, [sp, #48]	@ 0x30
 80094e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094e2:	f000 ff09 	bl	800a2f8 <_Bfree>
 80094e6:	9b07      	ldr	r3, [sp, #28]
 80094e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80094ea:	9e00      	ldr	r6, [sp, #0]
 80094ec:	ea42 0103 	orr.w	r1, r2, r3
 80094f0:	9b06      	ldr	r3, [sp, #24]
 80094f2:	4319      	orrs	r1, r3
 80094f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f6:	d10d      	bne.n	8009514 <_dtoa_r+0xa44>
 80094f8:	2b39      	cmp	r3, #57	@ 0x39
 80094fa:	d027      	beq.n	800954c <_dtoa_r+0xa7c>
 80094fc:	9a04      	ldr	r2, [sp, #16]
 80094fe:	2a00      	cmp	r2, #0
 8009500:	dd01      	ble.n	8009506 <_dtoa_r+0xa36>
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	3331      	adds	r3, #49	@ 0x31
 8009506:	f88b 3000 	strb.w	r3, [fp]
 800950a:	e52e      	b.n	8008f6a <_dtoa_r+0x49a>
 800950c:	4628      	mov	r0, r5
 800950e:	e7b9      	b.n	8009484 <_dtoa_r+0x9b4>
 8009510:	2201      	movs	r2, #1
 8009512:	e7e2      	b.n	80094da <_dtoa_r+0xa0a>
 8009514:	9904      	ldr	r1, [sp, #16]
 8009516:	2900      	cmp	r1, #0
 8009518:	db04      	blt.n	8009524 <_dtoa_r+0xa54>
 800951a:	9807      	ldr	r0, [sp, #28]
 800951c:	4301      	orrs	r1, r0
 800951e:	9806      	ldr	r0, [sp, #24]
 8009520:	4301      	orrs	r1, r0
 8009522:	d120      	bne.n	8009566 <_dtoa_r+0xa96>
 8009524:	2a00      	cmp	r2, #0
 8009526:	ddee      	ble.n	8009506 <_dtoa_r+0xa36>
 8009528:	9902      	ldr	r1, [sp, #8]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2201      	movs	r2, #1
 800952e:	4648      	mov	r0, r9
 8009530:	f001 f8f2 	bl	800a718 <__lshift>
 8009534:	4621      	mov	r1, r4
 8009536:	9002      	str	r0, [sp, #8]
 8009538:	f001 f95a 	bl	800a7f0 <__mcmp>
 800953c:	2800      	cmp	r0, #0
 800953e:	9b00      	ldr	r3, [sp, #0]
 8009540:	dc02      	bgt.n	8009548 <_dtoa_r+0xa78>
 8009542:	d1e0      	bne.n	8009506 <_dtoa_r+0xa36>
 8009544:	07da      	lsls	r2, r3, #31
 8009546:	d5de      	bpl.n	8009506 <_dtoa_r+0xa36>
 8009548:	2b39      	cmp	r3, #57	@ 0x39
 800954a:	d1da      	bne.n	8009502 <_dtoa_r+0xa32>
 800954c:	2339      	movs	r3, #57	@ 0x39
 800954e:	f88b 3000 	strb.w	r3, [fp]
 8009552:	4633      	mov	r3, r6
 8009554:	461e      	mov	r6, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800955c:	2a39      	cmp	r2, #57	@ 0x39
 800955e:	d04e      	beq.n	80095fe <_dtoa_r+0xb2e>
 8009560:	3201      	adds	r2, #1
 8009562:	701a      	strb	r2, [r3, #0]
 8009564:	e501      	b.n	8008f6a <_dtoa_r+0x49a>
 8009566:	2a00      	cmp	r2, #0
 8009568:	dd03      	ble.n	8009572 <_dtoa_r+0xaa2>
 800956a:	2b39      	cmp	r3, #57	@ 0x39
 800956c:	d0ee      	beq.n	800954c <_dtoa_r+0xa7c>
 800956e:	3301      	adds	r3, #1
 8009570:	e7c9      	b.n	8009506 <_dtoa_r+0xa36>
 8009572:	9a00      	ldr	r2, [sp, #0]
 8009574:	9908      	ldr	r1, [sp, #32]
 8009576:	f802 3c01 	strb.w	r3, [r2, #-1]
 800957a:	428a      	cmp	r2, r1
 800957c:	d028      	beq.n	80095d0 <_dtoa_r+0xb00>
 800957e:	9902      	ldr	r1, [sp, #8]
 8009580:	2300      	movs	r3, #0
 8009582:	220a      	movs	r2, #10
 8009584:	4648      	mov	r0, r9
 8009586:	f000 fed9 	bl	800a33c <__multadd>
 800958a:	42af      	cmp	r7, r5
 800958c:	9002      	str	r0, [sp, #8]
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	f04f 020a 	mov.w	r2, #10
 8009596:	4639      	mov	r1, r7
 8009598:	4648      	mov	r0, r9
 800959a:	d107      	bne.n	80095ac <_dtoa_r+0xadc>
 800959c:	f000 fece 	bl	800a33c <__multadd>
 80095a0:	4607      	mov	r7, r0
 80095a2:	4605      	mov	r5, r0
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	3301      	adds	r3, #1
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	e777      	b.n	800949c <_dtoa_r+0x9cc>
 80095ac:	f000 fec6 	bl	800a33c <__multadd>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4607      	mov	r7, r0
 80095b4:	2300      	movs	r3, #0
 80095b6:	220a      	movs	r2, #10
 80095b8:	4648      	mov	r0, r9
 80095ba:	f000 febf 	bl	800a33c <__multadd>
 80095be:	4605      	mov	r5, r0
 80095c0:	e7f0      	b.n	80095a4 <_dtoa_r+0xad4>
 80095c2:	f1bb 0f00 	cmp.w	fp, #0
 80095c6:	bfcc      	ite	gt
 80095c8:	465e      	movgt	r6, fp
 80095ca:	2601      	movle	r6, #1
 80095cc:	4456      	add	r6, sl
 80095ce:	2700      	movs	r7, #0
 80095d0:	9902      	ldr	r1, [sp, #8]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	2201      	movs	r2, #1
 80095d6:	4648      	mov	r0, r9
 80095d8:	f001 f89e 	bl	800a718 <__lshift>
 80095dc:	4621      	mov	r1, r4
 80095de:	9002      	str	r0, [sp, #8]
 80095e0:	f001 f906 	bl	800a7f0 <__mcmp>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	dcb4      	bgt.n	8009552 <_dtoa_r+0xa82>
 80095e8:	d102      	bne.n	80095f0 <_dtoa_r+0xb20>
 80095ea:	9b00      	ldr	r3, [sp, #0]
 80095ec:	07db      	lsls	r3, r3, #31
 80095ee:	d4b0      	bmi.n	8009552 <_dtoa_r+0xa82>
 80095f0:	4633      	mov	r3, r6
 80095f2:	461e      	mov	r6, r3
 80095f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095f8:	2a30      	cmp	r2, #48	@ 0x30
 80095fa:	d0fa      	beq.n	80095f2 <_dtoa_r+0xb22>
 80095fc:	e4b5      	b.n	8008f6a <_dtoa_r+0x49a>
 80095fe:	459a      	cmp	sl, r3
 8009600:	d1a8      	bne.n	8009554 <_dtoa_r+0xa84>
 8009602:	2331      	movs	r3, #49	@ 0x31
 8009604:	f108 0801 	add.w	r8, r8, #1
 8009608:	f88a 3000 	strb.w	r3, [sl]
 800960c:	e4ad      	b.n	8008f6a <_dtoa_r+0x49a>
 800960e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009610:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800966c <_dtoa_r+0xb9c>
 8009614:	b11b      	cbz	r3, 800961e <_dtoa_r+0xb4e>
 8009616:	f10a 0308 	add.w	r3, sl, #8
 800961a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	4650      	mov	r0, sl
 8009620:	b017      	add	sp, #92	@ 0x5c
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	9b07      	ldr	r3, [sp, #28]
 8009628:	2b01      	cmp	r3, #1
 800962a:	f77f ae2e 	ble.w	800928a <_dtoa_r+0x7ba>
 800962e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009630:	9308      	str	r3, [sp, #32]
 8009632:	2001      	movs	r0, #1
 8009634:	e64d      	b.n	80092d2 <_dtoa_r+0x802>
 8009636:	f1bb 0f00 	cmp.w	fp, #0
 800963a:	f77f aed9 	ble.w	80093f0 <_dtoa_r+0x920>
 800963e:	4656      	mov	r6, sl
 8009640:	9802      	ldr	r0, [sp, #8]
 8009642:	4621      	mov	r1, r4
 8009644:	f7ff f9ba 	bl	80089bc <quorem>
 8009648:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800964c:	f806 3b01 	strb.w	r3, [r6], #1
 8009650:	eba6 020a 	sub.w	r2, r6, sl
 8009654:	4593      	cmp	fp, r2
 8009656:	ddb4      	ble.n	80095c2 <_dtoa_r+0xaf2>
 8009658:	9902      	ldr	r1, [sp, #8]
 800965a:	2300      	movs	r3, #0
 800965c:	220a      	movs	r2, #10
 800965e:	4648      	mov	r0, r9
 8009660:	f000 fe6c 	bl	800a33c <__multadd>
 8009664:	9002      	str	r0, [sp, #8]
 8009666:	e7eb      	b.n	8009640 <_dtoa_r+0xb70>
 8009668:	0800b5b3 	.word	0x0800b5b3
 800966c:	0800b537 	.word	0x0800b537

08009670 <rshift>:
 8009670:	6903      	ldr	r3, [r0, #16]
 8009672:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009676:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800967a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800967e:	f100 0414 	add.w	r4, r0, #20
 8009682:	dd45      	ble.n	8009710 <rshift+0xa0>
 8009684:	f011 011f 	ands.w	r1, r1, #31
 8009688:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800968c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009690:	d10c      	bne.n	80096ac <rshift+0x3c>
 8009692:	f100 0710 	add.w	r7, r0, #16
 8009696:	4629      	mov	r1, r5
 8009698:	42b1      	cmp	r1, r6
 800969a:	d334      	bcc.n	8009706 <rshift+0x96>
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	1eea      	subs	r2, r5, #3
 80096a2:	4296      	cmp	r6, r2
 80096a4:	bf38      	it	cc
 80096a6:	2300      	movcc	r3, #0
 80096a8:	4423      	add	r3, r4
 80096aa:	e015      	b.n	80096d8 <rshift+0x68>
 80096ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096b0:	f1c1 0820 	rsb	r8, r1, #32
 80096b4:	40cf      	lsrs	r7, r1
 80096b6:	f105 0e04 	add.w	lr, r5, #4
 80096ba:	46a1      	mov	r9, r4
 80096bc:	4576      	cmp	r6, lr
 80096be:	46f4      	mov	ip, lr
 80096c0:	d815      	bhi.n	80096ee <rshift+0x7e>
 80096c2:	1a9a      	subs	r2, r3, r2
 80096c4:	0092      	lsls	r2, r2, #2
 80096c6:	3a04      	subs	r2, #4
 80096c8:	3501      	adds	r5, #1
 80096ca:	42ae      	cmp	r6, r5
 80096cc:	bf38      	it	cc
 80096ce:	2200      	movcc	r2, #0
 80096d0:	18a3      	adds	r3, r4, r2
 80096d2:	50a7      	str	r7, [r4, r2]
 80096d4:	b107      	cbz	r7, 80096d8 <rshift+0x68>
 80096d6:	3304      	adds	r3, #4
 80096d8:	1b1a      	subs	r2, r3, r4
 80096da:	42a3      	cmp	r3, r4
 80096dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096e0:	bf08      	it	eq
 80096e2:	2300      	moveq	r3, #0
 80096e4:	6102      	str	r2, [r0, #16]
 80096e6:	bf08      	it	eq
 80096e8:	6143      	streq	r3, [r0, #20]
 80096ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ee:	f8dc c000 	ldr.w	ip, [ip]
 80096f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80096f6:	ea4c 0707 	orr.w	r7, ip, r7
 80096fa:	f849 7b04 	str.w	r7, [r9], #4
 80096fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009702:	40cf      	lsrs	r7, r1
 8009704:	e7da      	b.n	80096bc <rshift+0x4c>
 8009706:	f851 cb04 	ldr.w	ip, [r1], #4
 800970a:	f847 cf04 	str.w	ip, [r7, #4]!
 800970e:	e7c3      	b.n	8009698 <rshift+0x28>
 8009710:	4623      	mov	r3, r4
 8009712:	e7e1      	b.n	80096d8 <rshift+0x68>

08009714 <__hexdig_fun>:
 8009714:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009718:	2b09      	cmp	r3, #9
 800971a:	d802      	bhi.n	8009722 <__hexdig_fun+0xe>
 800971c:	3820      	subs	r0, #32
 800971e:	b2c0      	uxtb	r0, r0
 8009720:	4770      	bx	lr
 8009722:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009726:	2b05      	cmp	r3, #5
 8009728:	d801      	bhi.n	800972e <__hexdig_fun+0x1a>
 800972a:	3847      	subs	r0, #71	@ 0x47
 800972c:	e7f7      	b.n	800971e <__hexdig_fun+0xa>
 800972e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009732:	2b05      	cmp	r3, #5
 8009734:	d801      	bhi.n	800973a <__hexdig_fun+0x26>
 8009736:	3827      	subs	r0, #39	@ 0x27
 8009738:	e7f1      	b.n	800971e <__hexdig_fun+0xa>
 800973a:	2000      	movs	r0, #0
 800973c:	4770      	bx	lr
	...

08009740 <__gethex>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	b085      	sub	sp, #20
 8009746:	468a      	mov	sl, r1
 8009748:	9302      	str	r3, [sp, #8]
 800974a:	680b      	ldr	r3, [r1, #0]
 800974c:	9001      	str	r0, [sp, #4]
 800974e:	4690      	mov	r8, r2
 8009750:	1c9c      	adds	r4, r3, #2
 8009752:	46a1      	mov	r9, r4
 8009754:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009758:	2830      	cmp	r0, #48	@ 0x30
 800975a:	d0fa      	beq.n	8009752 <__gethex+0x12>
 800975c:	eba9 0303 	sub.w	r3, r9, r3
 8009760:	f1a3 0b02 	sub.w	fp, r3, #2
 8009764:	f7ff ffd6 	bl	8009714 <__hexdig_fun>
 8009768:	4605      	mov	r5, r0
 800976a:	2800      	cmp	r0, #0
 800976c:	d168      	bne.n	8009840 <__gethex+0x100>
 800976e:	49a0      	ldr	r1, [pc, #640]	@ (80099f0 <__gethex+0x2b0>)
 8009770:	2201      	movs	r2, #1
 8009772:	4648      	mov	r0, r9
 8009774:	f7ff f8c0 	bl	80088f8 <strncmp>
 8009778:	4607      	mov	r7, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d167      	bne.n	800984e <__gethex+0x10e>
 800977e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009782:	4626      	mov	r6, r4
 8009784:	f7ff ffc6 	bl	8009714 <__hexdig_fun>
 8009788:	2800      	cmp	r0, #0
 800978a:	d062      	beq.n	8009852 <__gethex+0x112>
 800978c:	4623      	mov	r3, r4
 800978e:	7818      	ldrb	r0, [r3, #0]
 8009790:	2830      	cmp	r0, #48	@ 0x30
 8009792:	4699      	mov	r9, r3
 8009794:	f103 0301 	add.w	r3, r3, #1
 8009798:	d0f9      	beq.n	800978e <__gethex+0x4e>
 800979a:	f7ff ffbb 	bl	8009714 <__hexdig_fun>
 800979e:	fab0 f580 	clz	r5, r0
 80097a2:	096d      	lsrs	r5, r5, #5
 80097a4:	f04f 0b01 	mov.w	fp, #1
 80097a8:	464a      	mov	r2, r9
 80097aa:	4616      	mov	r6, r2
 80097ac:	3201      	adds	r2, #1
 80097ae:	7830      	ldrb	r0, [r6, #0]
 80097b0:	f7ff ffb0 	bl	8009714 <__hexdig_fun>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1f8      	bne.n	80097aa <__gethex+0x6a>
 80097b8:	498d      	ldr	r1, [pc, #564]	@ (80099f0 <__gethex+0x2b0>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	4630      	mov	r0, r6
 80097be:	f7ff f89b 	bl	80088f8 <strncmp>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d13f      	bne.n	8009846 <__gethex+0x106>
 80097c6:	b944      	cbnz	r4, 80097da <__gethex+0x9a>
 80097c8:	1c74      	adds	r4, r6, #1
 80097ca:	4622      	mov	r2, r4
 80097cc:	4616      	mov	r6, r2
 80097ce:	3201      	adds	r2, #1
 80097d0:	7830      	ldrb	r0, [r6, #0]
 80097d2:	f7ff ff9f 	bl	8009714 <__hexdig_fun>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d1f8      	bne.n	80097cc <__gethex+0x8c>
 80097da:	1ba4      	subs	r4, r4, r6
 80097dc:	00a7      	lsls	r7, r4, #2
 80097de:	7833      	ldrb	r3, [r6, #0]
 80097e0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80097e4:	2b50      	cmp	r3, #80	@ 0x50
 80097e6:	d13e      	bne.n	8009866 <__gethex+0x126>
 80097e8:	7873      	ldrb	r3, [r6, #1]
 80097ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80097ec:	d033      	beq.n	8009856 <__gethex+0x116>
 80097ee:	2b2d      	cmp	r3, #45	@ 0x2d
 80097f0:	d034      	beq.n	800985c <__gethex+0x11c>
 80097f2:	1c71      	adds	r1, r6, #1
 80097f4:	2400      	movs	r4, #0
 80097f6:	7808      	ldrb	r0, [r1, #0]
 80097f8:	f7ff ff8c 	bl	8009714 <__hexdig_fun>
 80097fc:	1e43      	subs	r3, r0, #1
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b18      	cmp	r3, #24
 8009802:	d830      	bhi.n	8009866 <__gethex+0x126>
 8009804:	f1a0 0210 	sub.w	r2, r0, #16
 8009808:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800980c:	f7ff ff82 	bl	8009714 <__hexdig_fun>
 8009810:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009814:	fa5f fc8c 	uxtb.w	ip, ip
 8009818:	f1bc 0f18 	cmp.w	ip, #24
 800981c:	f04f 030a 	mov.w	r3, #10
 8009820:	d91e      	bls.n	8009860 <__gethex+0x120>
 8009822:	b104      	cbz	r4, 8009826 <__gethex+0xe6>
 8009824:	4252      	negs	r2, r2
 8009826:	4417      	add	r7, r2
 8009828:	f8ca 1000 	str.w	r1, [sl]
 800982c:	b1ed      	cbz	r5, 800986a <__gethex+0x12a>
 800982e:	f1bb 0f00 	cmp.w	fp, #0
 8009832:	bf0c      	ite	eq
 8009834:	2506      	moveq	r5, #6
 8009836:	2500      	movne	r5, #0
 8009838:	4628      	mov	r0, r5
 800983a:	b005      	add	sp, #20
 800983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009840:	2500      	movs	r5, #0
 8009842:	462c      	mov	r4, r5
 8009844:	e7b0      	b.n	80097a8 <__gethex+0x68>
 8009846:	2c00      	cmp	r4, #0
 8009848:	d1c7      	bne.n	80097da <__gethex+0x9a>
 800984a:	4627      	mov	r7, r4
 800984c:	e7c7      	b.n	80097de <__gethex+0x9e>
 800984e:	464e      	mov	r6, r9
 8009850:	462f      	mov	r7, r5
 8009852:	2501      	movs	r5, #1
 8009854:	e7c3      	b.n	80097de <__gethex+0x9e>
 8009856:	2400      	movs	r4, #0
 8009858:	1cb1      	adds	r1, r6, #2
 800985a:	e7cc      	b.n	80097f6 <__gethex+0xb6>
 800985c:	2401      	movs	r4, #1
 800985e:	e7fb      	b.n	8009858 <__gethex+0x118>
 8009860:	fb03 0002 	mla	r0, r3, r2, r0
 8009864:	e7ce      	b.n	8009804 <__gethex+0xc4>
 8009866:	4631      	mov	r1, r6
 8009868:	e7de      	b.n	8009828 <__gethex+0xe8>
 800986a:	eba6 0309 	sub.w	r3, r6, r9
 800986e:	3b01      	subs	r3, #1
 8009870:	4629      	mov	r1, r5
 8009872:	2b07      	cmp	r3, #7
 8009874:	dc0a      	bgt.n	800988c <__gethex+0x14c>
 8009876:	9801      	ldr	r0, [sp, #4]
 8009878:	f000 fcfe 	bl	800a278 <_Balloc>
 800987c:	4604      	mov	r4, r0
 800987e:	b940      	cbnz	r0, 8009892 <__gethex+0x152>
 8009880:	4b5c      	ldr	r3, [pc, #368]	@ (80099f4 <__gethex+0x2b4>)
 8009882:	4602      	mov	r2, r0
 8009884:	21e4      	movs	r1, #228	@ 0xe4
 8009886:	485c      	ldr	r0, [pc, #368]	@ (80099f8 <__gethex+0x2b8>)
 8009888:	f001 fa8e 	bl	800ada8 <__assert_func>
 800988c:	3101      	adds	r1, #1
 800988e:	105b      	asrs	r3, r3, #1
 8009890:	e7ef      	b.n	8009872 <__gethex+0x132>
 8009892:	f100 0a14 	add.w	sl, r0, #20
 8009896:	2300      	movs	r3, #0
 8009898:	4655      	mov	r5, sl
 800989a:	469b      	mov	fp, r3
 800989c:	45b1      	cmp	r9, r6
 800989e:	d337      	bcc.n	8009910 <__gethex+0x1d0>
 80098a0:	f845 bb04 	str.w	fp, [r5], #4
 80098a4:	eba5 050a 	sub.w	r5, r5, sl
 80098a8:	10ad      	asrs	r5, r5, #2
 80098aa:	6125      	str	r5, [r4, #16]
 80098ac:	4658      	mov	r0, fp
 80098ae:	f000 fdd5 	bl	800a45c <__hi0bits>
 80098b2:	016d      	lsls	r5, r5, #5
 80098b4:	f8d8 6000 	ldr.w	r6, [r8]
 80098b8:	1a2d      	subs	r5, r5, r0
 80098ba:	42b5      	cmp	r5, r6
 80098bc:	dd54      	ble.n	8009968 <__gethex+0x228>
 80098be:	1bad      	subs	r5, r5, r6
 80098c0:	4629      	mov	r1, r5
 80098c2:	4620      	mov	r0, r4
 80098c4:	f001 f961 	bl	800ab8a <__any_on>
 80098c8:	4681      	mov	r9, r0
 80098ca:	b178      	cbz	r0, 80098ec <__gethex+0x1ac>
 80098cc:	1e6b      	subs	r3, r5, #1
 80098ce:	1159      	asrs	r1, r3, #5
 80098d0:	f003 021f 	and.w	r2, r3, #31
 80098d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098d8:	f04f 0901 	mov.w	r9, #1
 80098dc:	fa09 f202 	lsl.w	r2, r9, r2
 80098e0:	420a      	tst	r2, r1
 80098e2:	d003      	beq.n	80098ec <__gethex+0x1ac>
 80098e4:	454b      	cmp	r3, r9
 80098e6:	dc36      	bgt.n	8009956 <__gethex+0x216>
 80098e8:	f04f 0902 	mov.w	r9, #2
 80098ec:	4629      	mov	r1, r5
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7ff febe 	bl	8009670 <rshift>
 80098f4:	442f      	add	r7, r5
 80098f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098fa:	42bb      	cmp	r3, r7
 80098fc:	da42      	bge.n	8009984 <__gethex+0x244>
 80098fe:	9801      	ldr	r0, [sp, #4]
 8009900:	4621      	mov	r1, r4
 8009902:	f000 fcf9 	bl	800a2f8 <_Bfree>
 8009906:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009908:	2300      	movs	r3, #0
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	25a3      	movs	r5, #163	@ 0xa3
 800990e:	e793      	b.n	8009838 <__gethex+0xf8>
 8009910:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009914:	2a2e      	cmp	r2, #46	@ 0x2e
 8009916:	d012      	beq.n	800993e <__gethex+0x1fe>
 8009918:	2b20      	cmp	r3, #32
 800991a:	d104      	bne.n	8009926 <__gethex+0x1e6>
 800991c:	f845 bb04 	str.w	fp, [r5], #4
 8009920:	f04f 0b00 	mov.w	fp, #0
 8009924:	465b      	mov	r3, fp
 8009926:	7830      	ldrb	r0, [r6, #0]
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	f7ff fef3 	bl	8009714 <__hexdig_fun>
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	f000 000f 	and.w	r0, r0, #15
 8009934:	4098      	lsls	r0, r3
 8009936:	ea4b 0b00 	orr.w	fp, fp, r0
 800993a:	3304      	adds	r3, #4
 800993c:	e7ae      	b.n	800989c <__gethex+0x15c>
 800993e:	45b1      	cmp	r9, r6
 8009940:	d8ea      	bhi.n	8009918 <__gethex+0x1d8>
 8009942:	492b      	ldr	r1, [pc, #172]	@ (80099f0 <__gethex+0x2b0>)
 8009944:	9303      	str	r3, [sp, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	4630      	mov	r0, r6
 800994a:	f7fe ffd5 	bl	80088f8 <strncmp>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	2800      	cmp	r0, #0
 8009952:	d1e1      	bne.n	8009918 <__gethex+0x1d8>
 8009954:	e7a2      	b.n	800989c <__gethex+0x15c>
 8009956:	1ea9      	subs	r1, r5, #2
 8009958:	4620      	mov	r0, r4
 800995a:	f001 f916 	bl	800ab8a <__any_on>
 800995e:	2800      	cmp	r0, #0
 8009960:	d0c2      	beq.n	80098e8 <__gethex+0x1a8>
 8009962:	f04f 0903 	mov.w	r9, #3
 8009966:	e7c1      	b.n	80098ec <__gethex+0x1ac>
 8009968:	da09      	bge.n	800997e <__gethex+0x23e>
 800996a:	1b75      	subs	r5, r6, r5
 800996c:	4621      	mov	r1, r4
 800996e:	9801      	ldr	r0, [sp, #4]
 8009970:	462a      	mov	r2, r5
 8009972:	f000 fed1 	bl	800a718 <__lshift>
 8009976:	1b7f      	subs	r7, r7, r5
 8009978:	4604      	mov	r4, r0
 800997a:	f100 0a14 	add.w	sl, r0, #20
 800997e:	f04f 0900 	mov.w	r9, #0
 8009982:	e7b8      	b.n	80098f6 <__gethex+0x1b6>
 8009984:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009988:	42bd      	cmp	r5, r7
 800998a:	dd6f      	ble.n	8009a6c <__gethex+0x32c>
 800998c:	1bed      	subs	r5, r5, r7
 800998e:	42ae      	cmp	r6, r5
 8009990:	dc34      	bgt.n	80099fc <__gethex+0x2bc>
 8009992:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d022      	beq.n	80099e0 <__gethex+0x2a0>
 800999a:	2b03      	cmp	r3, #3
 800999c:	d024      	beq.n	80099e8 <__gethex+0x2a8>
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d115      	bne.n	80099ce <__gethex+0x28e>
 80099a2:	42ae      	cmp	r6, r5
 80099a4:	d113      	bne.n	80099ce <__gethex+0x28e>
 80099a6:	2e01      	cmp	r6, #1
 80099a8:	d10b      	bne.n	80099c2 <__gethex+0x282>
 80099aa:	9a02      	ldr	r2, [sp, #8]
 80099ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	2301      	movs	r3, #1
 80099b4:	6123      	str	r3, [r4, #16]
 80099b6:	f8ca 3000 	str.w	r3, [sl]
 80099ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099bc:	2562      	movs	r5, #98	@ 0x62
 80099be:	601c      	str	r4, [r3, #0]
 80099c0:	e73a      	b.n	8009838 <__gethex+0xf8>
 80099c2:	1e71      	subs	r1, r6, #1
 80099c4:	4620      	mov	r0, r4
 80099c6:	f001 f8e0 	bl	800ab8a <__any_on>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d1ed      	bne.n	80099aa <__gethex+0x26a>
 80099ce:	9801      	ldr	r0, [sp, #4]
 80099d0:	4621      	mov	r1, r4
 80099d2:	f000 fc91 	bl	800a2f8 <_Bfree>
 80099d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d8:	2300      	movs	r3, #0
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	2550      	movs	r5, #80	@ 0x50
 80099de:	e72b      	b.n	8009838 <__gethex+0xf8>
 80099e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1f3      	bne.n	80099ce <__gethex+0x28e>
 80099e6:	e7e0      	b.n	80099aa <__gethex+0x26a>
 80099e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1dd      	bne.n	80099aa <__gethex+0x26a>
 80099ee:	e7ee      	b.n	80099ce <__gethex+0x28e>
 80099f0:	0800b52d 	.word	0x0800b52d
 80099f4:	0800b5b3 	.word	0x0800b5b3
 80099f8:	0800b5c4 	.word	0x0800b5c4
 80099fc:	1e6f      	subs	r7, r5, #1
 80099fe:	f1b9 0f00 	cmp.w	r9, #0
 8009a02:	d130      	bne.n	8009a66 <__gethex+0x326>
 8009a04:	b127      	cbz	r7, 8009a10 <__gethex+0x2d0>
 8009a06:	4639      	mov	r1, r7
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f001 f8be 	bl	800ab8a <__any_on>
 8009a0e:	4681      	mov	r9, r0
 8009a10:	117a      	asrs	r2, r7, #5
 8009a12:	2301      	movs	r3, #1
 8009a14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a18:	f007 071f 	and.w	r7, r7, #31
 8009a1c:	40bb      	lsls	r3, r7
 8009a1e:	4213      	tst	r3, r2
 8009a20:	4629      	mov	r1, r5
 8009a22:	4620      	mov	r0, r4
 8009a24:	bf18      	it	ne
 8009a26:	f049 0902 	orrne.w	r9, r9, #2
 8009a2a:	f7ff fe21 	bl	8009670 <rshift>
 8009a2e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009a32:	1b76      	subs	r6, r6, r5
 8009a34:	2502      	movs	r5, #2
 8009a36:	f1b9 0f00 	cmp.w	r9, #0
 8009a3a:	d047      	beq.n	8009acc <__gethex+0x38c>
 8009a3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d015      	beq.n	8009a70 <__gethex+0x330>
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d017      	beq.n	8009a78 <__gethex+0x338>
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d109      	bne.n	8009a60 <__gethex+0x320>
 8009a4c:	f019 0f02 	tst.w	r9, #2
 8009a50:	d006      	beq.n	8009a60 <__gethex+0x320>
 8009a52:	f8da 3000 	ldr.w	r3, [sl]
 8009a56:	ea49 0903 	orr.w	r9, r9, r3
 8009a5a:	f019 0f01 	tst.w	r9, #1
 8009a5e:	d10e      	bne.n	8009a7e <__gethex+0x33e>
 8009a60:	f045 0510 	orr.w	r5, r5, #16
 8009a64:	e032      	b.n	8009acc <__gethex+0x38c>
 8009a66:	f04f 0901 	mov.w	r9, #1
 8009a6a:	e7d1      	b.n	8009a10 <__gethex+0x2d0>
 8009a6c:	2501      	movs	r5, #1
 8009a6e:	e7e2      	b.n	8009a36 <__gethex+0x2f6>
 8009a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a72:	f1c3 0301 	rsb	r3, r3, #1
 8009a76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <__gethex+0x320>
 8009a7e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a82:	f104 0314 	add.w	r3, r4, #20
 8009a86:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a8a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a8e:	f04f 0c00 	mov.w	ip, #0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a98:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009a9c:	d01b      	beq.n	8009ad6 <__gethex+0x396>
 8009a9e:	3201      	adds	r2, #1
 8009aa0:	6002      	str	r2, [r0, #0]
 8009aa2:	2d02      	cmp	r5, #2
 8009aa4:	f104 0314 	add.w	r3, r4, #20
 8009aa8:	d13c      	bne.n	8009b24 <__gethex+0x3e4>
 8009aaa:	f8d8 2000 	ldr.w	r2, [r8]
 8009aae:	3a01      	subs	r2, #1
 8009ab0:	42b2      	cmp	r2, r6
 8009ab2:	d109      	bne.n	8009ac8 <__gethex+0x388>
 8009ab4:	1171      	asrs	r1, r6, #5
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009abc:	f006 061f 	and.w	r6, r6, #31
 8009ac0:	fa02 f606 	lsl.w	r6, r2, r6
 8009ac4:	421e      	tst	r6, r3
 8009ac6:	d13a      	bne.n	8009b3e <__gethex+0x3fe>
 8009ac8:	f045 0520 	orr.w	r5, r5, #32
 8009acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ace:	601c      	str	r4, [r3, #0]
 8009ad0:	9b02      	ldr	r3, [sp, #8]
 8009ad2:	601f      	str	r7, [r3, #0]
 8009ad4:	e6b0      	b.n	8009838 <__gethex+0xf8>
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009adc:	d8d9      	bhi.n	8009a92 <__gethex+0x352>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	459b      	cmp	fp, r3
 8009ae2:	db17      	blt.n	8009b14 <__gethex+0x3d4>
 8009ae4:	6861      	ldr	r1, [r4, #4]
 8009ae6:	9801      	ldr	r0, [sp, #4]
 8009ae8:	3101      	adds	r1, #1
 8009aea:	f000 fbc5 	bl	800a278 <_Balloc>
 8009aee:	4681      	mov	r9, r0
 8009af0:	b918      	cbnz	r0, 8009afa <__gethex+0x3ba>
 8009af2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b5c <__gethex+0x41c>)
 8009af4:	4602      	mov	r2, r0
 8009af6:	2184      	movs	r1, #132	@ 0x84
 8009af8:	e6c5      	b.n	8009886 <__gethex+0x146>
 8009afa:	6922      	ldr	r2, [r4, #16]
 8009afc:	3202      	adds	r2, #2
 8009afe:	f104 010c 	add.w	r1, r4, #12
 8009b02:	0092      	lsls	r2, r2, #2
 8009b04:	300c      	adds	r0, #12
 8009b06:	f7fe ff3b 	bl	8008980 <memcpy>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	9801      	ldr	r0, [sp, #4]
 8009b0e:	f000 fbf3 	bl	800a2f8 <_Bfree>
 8009b12:	464c      	mov	r4, r9
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b1c:	6122      	str	r2, [r4, #16]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	615a      	str	r2, [r3, #20]
 8009b22:	e7be      	b.n	8009aa2 <__gethex+0x362>
 8009b24:	6922      	ldr	r2, [r4, #16]
 8009b26:	455a      	cmp	r2, fp
 8009b28:	dd0b      	ble.n	8009b42 <__gethex+0x402>
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7ff fd9f 	bl	8009670 <rshift>
 8009b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b36:	3701      	adds	r7, #1
 8009b38:	42bb      	cmp	r3, r7
 8009b3a:	f6ff aee0 	blt.w	80098fe <__gethex+0x1be>
 8009b3e:	2501      	movs	r5, #1
 8009b40:	e7c2      	b.n	8009ac8 <__gethex+0x388>
 8009b42:	f016 061f 	ands.w	r6, r6, #31
 8009b46:	d0fa      	beq.n	8009b3e <__gethex+0x3fe>
 8009b48:	4453      	add	r3, sl
 8009b4a:	f1c6 0620 	rsb	r6, r6, #32
 8009b4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b52:	f000 fc83 	bl	800a45c <__hi0bits>
 8009b56:	42b0      	cmp	r0, r6
 8009b58:	dbe7      	blt.n	8009b2a <__gethex+0x3ea>
 8009b5a:	e7f0      	b.n	8009b3e <__gethex+0x3fe>
 8009b5c:	0800b5b3 	.word	0x0800b5b3

08009b60 <L_shift>:
 8009b60:	f1c2 0208 	rsb	r2, r2, #8
 8009b64:	0092      	lsls	r2, r2, #2
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	f1c2 0620 	rsb	r6, r2, #32
 8009b6c:	6843      	ldr	r3, [r0, #4]
 8009b6e:	6804      	ldr	r4, [r0, #0]
 8009b70:	fa03 f506 	lsl.w	r5, r3, r6
 8009b74:	432c      	orrs	r4, r5
 8009b76:	40d3      	lsrs	r3, r2
 8009b78:	6004      	str	r4, [r0, #0]
 8009b7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b7e:	4288      	cmp	r0, r1
 8009b80:	d3f4      	bcc.n	8009b6c <L_shift+0xc>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}

08009b84 <__match>:
 8009b84:	b530      	push	{r4, r5, lr}
 8009b86:	6803      	ldr	r3, [r0, #0]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b8e:	b914      	cbnz	r4, 8009b96 <__match+0x12>
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	2001      	movs	r0, #1
 8009b94:	bd30      	pop	{r4, r5, pc}
 8009b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b9a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b9e:	2d19      	cmp	r5, #25
 8009ba0:	bf98      	it	ls
 8009ba2:	3220      	addls	r2, #32
 8009ba4:	42a2      	cmp	r2, r4
 8009ba6:	d0f0      	beq.n	8009b8a <__match+0x6>
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e7f3      	b.n	8009b94 <__match+0x10>

08009bac <__hexnan>:
 8009bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	680b      	ldr	r3, [r1, #0]
 8009bb2:	6801      	ldr	r1, [r0, #0]
 8009bb4:	115e      	asrs	r6, r3, #5
 8009bb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009bba:	f013 031f 	ands.w	r3, r3, #31
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	bf18      	it	ne
 8009bc2:	3604      	addne	r6, #4
 8009bc4:	2500      	movs	r5, #0
 8009bc6:	1f37      	subs	r7, r6, #4
 8009bc8:	4682      	mov	sl, r0
 8009bca:	4690      	mov	r8, r2
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	f846 5c04 	str.w	r5, [r6, #-4]
 8009bd2:	46b9      	mov	r9, r7
 8009bd4:	463c      	mov	r4, r7
 8009bd6:	9502      	str	r5, [sp, #8]
 8009bd8:	46ab      	mov	fp, r5
 8009bda:	784a      	ldrb	r2, [r1, #1]
 8009bdc:	1c4b      	adds	r3, r1, #1
 8009bde:	9303      	str	r3, [sp, #12]
 8009be0:	b342      	cbz	r2, 8009c34 <__hexnan+0x88>
 8009be2:	4610      	mov	r0, r2
 8009be4:	9105      	str	r1, [sp, #20]
 8009be6:	9204      	str	r2, [sp, #16]
 8009be8:	f7ff fd94 	bl	8009714 <__hexdig_fun>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d151      	bne.n	8009c94 <__hexnan+0xe8>
 8009bf0:	9a04      	ldr	r2, [sp, #16]
 8009bf2:	9905      	ldr	r1, [sp, #20]
 8009bf4:	2a20      	cmp	r2, #32
 8009bf6:	d818      	bhi.n	8009c2a <__hexnan+0x7e>
 8009bf8:	9b02      	ldr	r3, [sp, #8]
 8009bfa:	459b      	cmp	fp, r3
 8009bfc:	dd13      	ble.n	8009c26 <__hexnan+0x7a>
 8009bfe:	454c      	cmp	r4, r9
 8009c00:	d206      	bcs.n	8009c10 <__hexnan+0x64>
 8009c02:	2d07      	cmp	r5, #7
 8009c04:	dc04      	bgt.n	8009c10 <__hexnan+0x64>
 8009c06:	462a      	mov	r2, r5
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff ffa8 	bl	8009b60 <L_shift>
 8009c10:	4544      	cmp	r4, r8
 8009c12:	d952      	bls.n	8009cba <__hexnan+0x10e>
 8009c14:	2300      	movs	r3, #0
 8009c16:	f1a4 0904 	sub.w	r9, r4, #4
 8009c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8009c22:	464c      	mov	r4, r9
 8009c24:	461d      	mov	r5, r3
 8009c26:	9903      	ldr	r1, [sp, #12]
 8009c28:	e7d7      	b.n	8009bda <__hexnan+0x2e>
 8009c2a:	2a29      	cmp	r2, #41	@ 0x29
 8009c2c:	d157      	bne.n	8009cde <__hexnan+0x132>
 8009c2e:	3102      	adds	r1, #2
 8009c30:	f8ca 1000 	str.w	r1, [sl]
 8009c34:	f1bb 0f00 	cmp.w	fp, #0
 8009c38:	d051      	beq.n	8009cde <__hexnan+0x132>
 8009c3a:	454c      	cmp	r4, r9
 8009c3c:	d206      	bcs.n	8009c4c <__hexnan+0xa0>
 8009c3e:	2d07      	cmp	r5, #7
 8009c40:	dc04      	bgt.n	8009c4c <__hexnan+0xa0>
 8009c42:	462a      	mov	r2, r5
 8009c44:	4649      	mov	r1, r9
 8009c46:	4620      	mov	r0, r4
 8009c48:	f7ff ff8a 	bl	8009b60 <L_shift>
 8009c4c:	4544      	cmp	r4, r8
 8009c4e:	d936      	bls.n	8009cbe <__hexnan+0x112>
 8009c50:	f1a8 0204 	sub.w	r2, r8, #4
 8009c54:	4623      	mov	r3, r4
 8009c56:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c5e:	429f      	cmp	r7, r3
 8009c60:	d2f9      	bcs.n	8009c56 <__hexnan+0xaa>
 8009c62:	1b3b      	subs	r3, r7, r4
 8009c64:	f023 0303 	bic.w	r3, r3, #3
 8009c68:	3304      	adds	r3, #4
 8009c6a:	3401      	adds	r4, #1
 8009c6c:	3e03      	subs	r6, #3
 8009c6e:	42b4      	cmp	r4, r6
 8009c70:	bf88      	it	hi
 8009c72:	2304      	movhi	r3, #4
 8009c74:	4443      	add	r3, r8
 8009c76:	2200      	movs	r2, #0
 8009c78:	f843 2b04 	str.w	r2, [r3], #4
 8009c7c:	429f      	cmp	r7, r3
 8009c7e:	d2fb      	bcs.n	8009c78 <__hexnan+0xcc>
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	b91b      	cbnz	r3, 8009c8c <__hexnan+0xe0>
 8009c84:	4547      	cmp	r7, r8
 8009c86:	d128      	bne.n	8009cda <__hexnan+0x12e>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	2005      	movs	r0, #5
 8009c8e:	b007      	add	sp, #28
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	3501      	adds	r5, #1
 8009c96:	2d08      	cmp	r5, #8
 8009c98:	f10b 0b01 	add.w	fp, fp, #1
 8009c9c:	dd06      	ble.n	8009cac <__hexnan+0x100>
 8009c9e:	4544      	cmp	r4, r8
 8009ca0:	d9c1      	bls.n	8009c26 <__hexnan+0x7a>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ca8:	2501      	movs	r5, #1
 8009caa:	3c04      	subs	r4, #4
 8009cac:	6822      	ldr	r2, [r4, #0]
 8009cae:	f000 000f 	and.w	r0, r0, #15
 8009cb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009cb6:	6020      	str	r0, [r4, #0]
 8009cb8:	e7b5      	b.n	8009c26 <__hexnan+0x7a>
 8009cba:	2508      	movs	r5, #8
 8009cbc:	e7b3      	b.n	8009c26 <__hexnan+0x7a>
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0dd      	beq.n	8009c80 <__hexnan+0xd4>
 8009cc4:	f1c3 0320 	rsb	r3, r3, #32
 8009cc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ccc:	40da      	lsrs	r2, r3
 8009cce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	f846 3c04 	str.w	r3, [r6, #-4]
 8009cd8:	e7d2      	b.n	8009c80 <__hexnan+0xd4>
 8009cda:	3f04      	subs	r7, #4
 8009cdc:	e7d0      	b.n	8009c80 <__hexnan+0xd4>
 8009cde:	2004      	movs	r0, #4
 8009ce0:	e7d5      	b.n	8009c8e <__hexnan+0xe2>

08009ce2 <__ssputs_r>:
 8009ce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce6:	688e      	ldr	r6, [r1, #8]
 8009ce8:	461f      	mov	r7, r3
 8009cea:	42be      	cmp	r6, r7
 8009cec:	680b      	ldr	r3, [r1, #0]
 8009cee:	4682      	mov	sl, r0
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	4690      	mov	r8, r2
 8009cf4:	d82d      	bhi.n	8009d52 <__ssputs_r+0x70>
 8009cf6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cfa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cfe:	d026      	beq.n	8009d4e <__ssputs_r+0x6c>
 8009d00:	6965      	ldr	r5, [r4, #20]
 8009d02:	6909      	ldr	r1, [r1, #16]
 8009d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d08:	eba3 0901 	sub.w	r9, r3, r1
 8009d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d10:	1c7b      	adds	r3, r7, #1
 8009d12:	444b      	add	r3, r9
 8009d14:	106d      	asrs	r5, r5, #1
 8009d16:	429d      	cmp	r5, r3
 8009d18:	bf38      	it	cc
 8009d1a:	461d      	movcc	r5, r3
 8009d1c:	0553      	lsls	r3, r2, #21
 8009d1e:	d527      	bpl.n	8009d70 <__ssputs_r+0x8e>
 8009d20:	4629      	mov	r1, r5
 8009d22:	f000 f95f 	bl	8009fe4 <_malloc_r>
 8009d26:	4606      	mov	r6, r0
 8009d28:	b360      	cbz	r0, 8009d84 <__ssputs_r+0xa2>
 8009d2a:	6921      	ldr	r1, [r4, #16]
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	f7fe fe27 	bl	8008980 <memcpy>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	6126      	str	r6, [r4, #16]
 8009d40:	6165      	str	r5, [r4, #20]
 8009d42:	444e      	add	r6, r9
 8009d44:	eba5 0509 	sub.w	r5, r5, r9
 8009d48:	6026      	str	r6, [r4, #0]
 8009d4a:	60a5      	str	r5, [r4, #8]
 8009d4c:	463e      	mov	r6, r7
 8009d4e:	42be      	cmp	r6, r7
 8009d50:	d900      	bls.n	8009d54 <__ssputs_r+0x72>
 8009d52:	463e      	mov	r6, r7
 8009d54:	6820      	ldr	r0, [r4, #0]
 8009d56:	4632      	mov	r2, r6
 8009d58:	4641      	mov	r1, r8
 8009d5a:	f000 ffb5 	bl	800acc8 <memmove>
 8009d5e:	68a3      	ldr	r3, [r4, #8]
 8009d60:	1b9b      	subs	r3, r3, r6
 8009d62:	60a3      	str	r3, [r4, #8]
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	4433      	add	r3, r6
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d70:	462a      	mov	r2, r5
 8009d72:	f000 ff6e 	bl	800ac52 <_realloc_r>
 8009d76:	4606      	mov	r6, r0
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d1e0      	bne.n	8009d3e <__ssputs_r+0x5c>
 8009d7c:	6921      	ldr	r1, [r4, #16]
 8009d7e:	4650      	mov	r0, sl
 8009d80:	f001 f844 	bl	800ae0c <_free_r>
 8009d84:	230c      	movs	r3, #12
 8009d86:	f8ca 3000 	str.w	r3, [sl]
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d96:	e7e9      	b.n	8009d6c <__ssputs_r+0x8a>

08009d98 <_svfiprintf_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	4698      	mov	r8, r3
 8009d9e:	898b      	ldrh	r3, [r1, #12]
 8009da0:	061b      	lsls	r3, r3, #24
 8009da2:	b09d      	sub	sp, #116	@ 0x74
 8009da4:	4607      	mov	r7, r0
 8009da6:	460d      	mov	r5, r1
 8009da8:	4614      	mov	r4, r2
 8009daa:	d510      	bpl.n	8009dce <_svfiprintf_r+0x36>
 8009dac:	690b      	ldr	r3, [r1, #16]
 8009dae:	b973      	cbnz	r3, 8009dce <_svfiprintf_r+0x36>
 8009db0:	2140      	movs	r1, #64	@ 0x40
 8009db2:	f000 f917 	bl	8009fe4 <_malloc_r>
 8009db6:	6028      	str	r0, [r5, #0]
 8009db8:	6128      	str	r0, [r5, #16]
 8009dba:	b930      	cbnz	r0, 8009dca <_svfiprintf_r+0x32>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dc4:	b01d      	add	sp, #116	@ 0x74
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	2340      	movs	r3, #64	@ 0x40
 8009dcc:	616b      	str	r3, [r5, #20]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd2:	2320      	movs	r3, #32
 8009dd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ddc:	2330      	movs	r3, #48	@ 0x30
 8009dde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f7c <_svfiprintf_r+0x1e4>
 8009de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009de6:	f04f 0901 	mov.w	r9, #1
 8009dea:	4623      	mov	r3, r4
 8009dec:	469a      	mov	sl, r3
 8009dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df2:	b10a      	cbz	r2, 8009df8 <_svfiprintf_r+0x60>
 8009df4:	2a25      	cmp	r2, #37	@ 0x25
 8009df6:	d1f9      	bne.n	8009dec <_svfiprintf_r+0x54>
 8009df8:	ebba 0b04 	subs.w	fp, sl, r4
 8009dfc:	d00b      	beq.n	8009e16 <_svfiprintf_r+0x7e>
 8009dfe:	465b      	mov	r3, fp
 8009e00:	4622      	mov	r2, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	4638      	mov	r0, r7
 8009e06:	f7ff ff6c 	bl	8009ce2 <__ssputs_r>
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	f000 80a7 	beq.w	8009f5e <_svfiprintf_r+0x1c6>
 8009e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e12:	445a      	add	r2, fp
 8009e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e16:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 809f 	beq.w	8009f5e <_svfiprintf_r+0x1c6>
 8009e20:	2300      	movs	r3, #0
 8009e22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e2a:	f10a 0a01 	add.w	sl, sl, #1
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	9307      	str	r3, [sp, #28]
 8009e32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e36:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e38:	4654      	mov	r4, sl
 8009e3a:	2205      	movs	r2, #5
 8009e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e40:	484e      	ldr	r0, [pc, #312]	@ (8009f7c <_svfiprintf_r+0x1e4>)
 8009e42:	f7f6 f9dd 	bl	8000200 <memchr>
 8009e46:	9a04      	ldr	r2, [sp, #16]
 8009e48:	b9d8      	cbnz	r0, 8009e82 <_svfiprintf_r+0xea>
 8009e4a:	06d0      	lsls	r0, r2, #27
 8009e4c:	bf44      	itt	mi
 8009e4e:	2320      	movmi	r3, #32
 8009e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e54:	0711      	lsls	r1, r2, #28
 8009e56:	bf44      	itt	mi
 8009e58:	232b      	movmi	r3, #43	@ 0x2b
 8009e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e64:	d015      	beq.n	8009e92 <_svfiprintf_r+0xfa>
 8009e66:	9a07      	ldr	r2, [sp, #28]
 8009e68:	4654      	mov	r4, sl
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	f04f 0c0a 	mov.w	ip, #10
 8009e70:	4621      	mov	r1, r4
 8009e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e76:	3b30      	subs	r3, #48	@ 0x30
 8009e78:	2b09      	cmp	r3, #9
 8009e7a:	d94b      	bls.n	8009f14 <_svfiprintf_r+0x17c>
 8009e7c:	b1b0      	cbz	r0, 8009eac <_svfiprintf_r+0x114>
 8009e7e:	9207      	str	r2, [sp, #28]
 8009e80:	e014      	b.n	8009eac <_svfiprintf_r+0x114>
 8009e82:	eba0 0308 	sub.w	r3, r0, r8
 8009e86:	fa09 f303 	lsl.w	r3, r9, r3
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	46a2      	mov	sl, r4
 8009e90:	e7d2      	b.n	8009e38 <_svfiprintf_r+0xa0>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	1d19      	adds	r1, r3, #4
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	9103      	str	r1, [sp, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	bfbb      	ittet	lt
 8009e9e:	425b      	neglt	r3, r3
 8009ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea4:	9307      	strge	r3, [sp, #28]
 8009ea6:	9307      	strlt	r3, [sp, #28]
 8009ea8:	bfb8      	it	lt
 8009eaa:	9204      	strlt	r2, [sp, #16]
 8009eac:	7823      	ldrb	r3, [r4, #0]
 8009eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eb0:	d10a      	bne.n	8009ec8 <_svfiprintf_r+0x130>
 8009eb2:	7863      	ldrb	r3, [r4, #1]
 8009eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eb6:	d132      	bne.n	8009f1e <_svfiprintf_r+0x186>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	1d1a      	adds	r2, r3, #4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	9203      	str	r2, [sp, #12]
 8009ec0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ec4:	3402      	adds	r4, #2
 8009ec6:	9305      	str	r3, [sp, #20]
 8009ec8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f8c <_svfiprintf_r+0x1f4>
 8009ecc:	7821      	ldrb	r1, [r4, #0]
 8009ece:	2203      	movs	r2, #3
 8009ed0:	4650      	mov	r0, sl
 8009ed2:	f7f6 f995 	bl	8000200 <memchr>
 8009ed6:	b138      	cbz	r0, 8009ee8 <_svfiprintf_r+0x150>
 8009ed8:	9b04      	ldr	r3, [sp, #16]
 8009eda:	eba0 000a 	sub.w	r0, r0, sl
 8009ede:	2240      	movs	r2, #64	@ 0x40
 8009ee0:	4082      	lsls	r2, r0
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eec:	4824      	ldr	r0, [pc, #144]	@ (8009f80 <_svfiprintf_r+0x1e8>)
 8009eee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ef2:	2206      	movs	r2, #6
 8009ef4:	f7f6 f984 	bl	8000200 <memchr>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d036      	beq.n	8009f6a <_svfiprintf_r+0x1d2>
 8009efc:	4b21      	ldr	r3, [pc, #132]	@ (8009f84 <_svfiprintf_r+0x1ec>)
 8009efe:	bb1b      	cbnz	r3, 8009f48 <_svfiprintf_r+0x1b0>
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	3307      	adds	r3, #7
 8009f04:	f023 0307 	bic.w	r3, r3, #7
 8009f08:	3308      	adds	r3, #8
 8009f0a:	9303      	str	r3, [sp, #12]
 8009f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f0e:	4433      	add	r3, r6
 8009f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f12:	e76a      	b.n	8009dea <_svfiprintf_r+0x52>
 8009f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f18:	460c      	mov	r4, r1
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	e7a8      	b.n	8009e70 <_svfiprintf_r+0xd8>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	3401      	adds	r4, #1
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	4619      	mov	r1, r3
 8009f26:	f04f 0c0a 	mov.w	ip, #10
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f30:	3a30      	subs	r2, #48	@ 0x30
 8009f32:	2a09      	cmp	r2, #9
 8009f34:	d903      	bls.n	8009f3e <_svfiprintf_r+0x1a6>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0c6      	beq.n	8009ec8 <_svfiprintf_r+0x130>
 8009f3a:	9105      	str	r1, [sp, #20]
 8009f3c:	e7c4      	b.n	8009ec8 <_svfiprintf_r+0x130>
 8009f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f42:	4604      	mov	r4, r0
 8009f44:	2301      	movs	r3, #1
 8009f46:	e7f0      	b.n	8009f2a <_svfiprintf_r+0x192>
 8009f48:	ab03      	add	r3, sp, #12
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	462a      	mov	r2, r5
 8009f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f88 <_svfiprintf_r+0x1f0>)
 8009f50:	a904      	add	r1, sp, #16
 8009f52:	4638      	mov	r0, r7
 8009f54:	f7fc ff9c 	bl	8006e90 <_printf_float>
 8009f58:	1c42      	adds	r2, r0, #1
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	d1d6      	bne.n	8009f0c <_svfiprintf_r+0x174>
 8009f5e:	89ab      	ldrh	r3, [r5, #12]
 8009f60:	065b      	lsls	r3, r3, #25
 8009f62:	f53f af2d 	bmi.w	8009dc0 <_svfiprintf_r+0x28>
 8009f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f68:	e72c      	b.n	8009dc4 <_svfiprintf_r+0x2c>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4b05      	ldr	r3, [pc, #20]	@ (8009f88 <_svfiprintf_r+0x1f0>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	4638      	mov	r0, r7
 8009f76:	f7fd fa23 	bl	80073c0 <_printf_i>
 8009f7a:	e7ed      	b.n	8009f58 <_svfiprintf_r+0x1c0>
 8009f7c:	0800b624 	.word	0x0800b624
 8009f80:	0800b62e 	.word	0x0800b62e
 8009f84:	08006e91 	.word	0x08006e91
 8009f88:	08009ce3 	.word	0x08009ce3
 8009f8c:	0800b62a 	.word	0x0800b62a

08009f90 <malloc>:
 8009f90:	4b02      	ldr	r3, [pc, #8]	@ (8009f9c <malloc+0xc>)
 8009f92:	4601      	mov	r1, r0
 8009f94:	6818      	ldr	r0, [r3, #0]
 8009f96:	f000 b825 	b.w	8009fe4 <_malloc_r>
 8009f9a:	bf00      	nop
 8009f9c:	20000184 	.word	0x20000184

08009fa0 <sbrk_aligned>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	4e0f      	ldr	r6, [pc, #60]	@ (8009fe0 <sbrk_aligned+0x40>)
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	6831      	ldr	r1, [r6, #0]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	b911      	cbnz	r1, 8009fb2 <sbrk_aligned+0x12>
 8009fac:	f000 feca 	bl	800ad44 <_sbrk_r>
 8009fb0:	6030      	str	r0, [r6, #0]
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f000 fec5 	bl	800ad44 <_sbrk_r>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	d103      	bne.n	8009fc6 <sbrk_aligned+0x26>
 8009fbe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	bd70      	pop	{r4, r5, r6, pc}
 8009fc6:	1cc4      	adds	r4, r0, #3
 8009fc8:	f024 0403 	bic.w	r4, r4, #3
 8009fcc:	42a0      	cmp	r0, r4
 8009fce:	d0f8      	beq.n	8009fc2 <sbrk_aligned+0x22>
 8009fd0:	1a21      	subs	r1, r4, r0
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f000 feb6 	bl	800ad44 <_sbrk_r>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d1f2      	bne.n	8009fc2 <sbrk_aligned+0x22>
 8009fdc:	e7ef      	b.n	8009fbe <sbrk_aligned+0x1e>
 8009fde:	bf00      	nop
 8009fe0:	20000438 	.word	0x20000438

08009fe4 <_malloc_r>:
 8009fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe8:	1ccd      	adds	r5, r1, #3
 8009fea:	f025 0503 	bic.w	r5, r5, #3
 8009fee:	3508      	adds	r5, #8
 8009ff0:	2d0c      	cmp	r5, #12
 8009ff2:	bf38      	it	cc
 8009ff4:	250c      	movcc	r5, #12
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	db01      	blt.n	800a000 <_malloc_r+0x1c>
 8009ffc:	42a9      	cmp	r1, r5
 8009ffe:	d904      	bls.n	800a00a <_malloc_r+0x26>
 800a000:	230c      	movs	r3, #12
 800a002:	6033      	str	r3, [r6, #0]
 800a004:	2000      	movs	r0, #0
 800a006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a00a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0e0 <_malloc_r+0xfc>
 800a00e:	f000 f927 	bl	800a260 <__malloc_lock>
 800a012:	f8d8 3000 	ldr.w	r3, [r8]
 800a016:	461c      	mov	r4, r3
 800a018:	bb44      	cbnz	r4, 800a06c <_malloc_r+0x88>
 800a01a:	4629      	mov	r1, r5
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7ff ffbf 	bl	8009fa0 <sbrk_aligned>
 800a022:	1c43      	adds	r3, r0, #1
 800a024:	4604      	mov	r4, r0
 800a026:	d158      	bne.n	800a0da <_malloc_r+0xf6>
 800a028:	f8d8 4000 	ldr.w	r4, [r8]
 800a02c:	4627      	mov	r7, r4
 800a02e:	2f00      	cmp	r7, #0
 800a030:	d143      	bne.n	800a0ba <_malloc_r+0xd6>
 800a032:	2c00      	cmp	r4, #0
 800a034:	d04b      	beq.n	800a0ce <_malloc_r+0xea>
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	4639      	mov	r1, r7
 800a03a:	4630      	mov	r0, r6
 800a03c:	eb04 0903 	add.w	r9, r4, r3
 800a040:	f000 fe80 	bl	800ad44 <_sbrk_r>
 800a044:	4581      	cmp	r9, r0
 800a046:	d142      	bne.n	800a0ce <_malloc_r+0xea>
 800a048:	6821      	ldr	r1, [r4, #0]
 800a04a:	1a6d      	subs	r5, r5, r1
 800a04c:	4629      	mov	r1, r5
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ffa6 	bl	8009fa0 <sbrk_aligned>
 800a054:	3001      	adds	r0, #1
 800a056:	d03a      	beq.n	800a0ce <_malloc_r+0xea>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	442b      	add	r3, r5
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	f8d8 3000 	ldr.w	r3, [r8]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	bb62      	cbnz	r2, 800a0c0 <_malloc_r+0xdc>
 800a066:	f8c8 7000 	str.w	r7, [r8]
 800a06a:	e00f      	b.n	800a08c <_malloc_r+0xa8>
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	1b52      	subs	r2, r2, r5
 800a070:	d420      	bmi.n	800a0b4 <_malloc_r+0xd0>
 800a072:	2a0b      	cmp	r2, #11
 800a074:	d917      	bls.n	800a0a6 <_malloc_r+0xc2>
 800a076:	1961      	adds	r1, r4, r5
 800a078:	42a3      	cmp	r3, r4
 800a07a:	6025      	str	r5, [r4, #0]
 800a07c:	bf18      	it	ne
 800a07e:	6059      	strne	r1, [r3, #4]
 800a080:	6863      	ldr	r3, [r4, #4]
 800a082:	bf08      	it	eq
 800a084:	f8c8 1000 	streq.w	r1, [r8]
 800a088:	5162      	str	r2, [r4, r5]
 800a08a:	604b      	str	r3, [r1, #4]
 800a08c:	4630      	mov	r0, r6
 800a08e:	f000 f8ed 	bl	800a26c <__malloc_unlock>
 800a092:	f104 000b 	add.w	r0, r4, #11
 800a096:	1d23      	adds	r3, r4, #4
 800a098:	f020 0007 	bic.w	r0, r0, #7
 800a09c:	1ac2      	subs	r2, r0, r3
 800a09e:	bf1c      	itt	ne
 800a0a0:	1a1b      	subne	r3, r3, r0
 800a0a2:	50a3      	strne	r3, [r4, r2]
 800a0a4:	e7af      	b.n	800a006 <_malloc_r+0x22>
 800a0a6:	6862      	ldr	r2, [r4, #4]
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	bf0c      	ite	eq
 800a0ac:	f8c8 2000 	streq.w	r2, [r8]
 800a0b0:	605a      	strne	r2, [r3, #4]
 800a0b2:	e7eb      	b.n	800a08c <_malloc_r+0xa8>
 800a0b4:	4623      	mov	r3, r4
 800a0b6:	6864      	ldr	r4, [r4, #4]
 800a0b8:	e7ae      	b.n	800a018 <_malloc_r+0x34>
 800a0ba:	463c      	mov	r4, r7
 800a0bc:	687f      	ldr	r7, [r7, #4]
 800a0be:	e7b6      	b.n	800a02e <_malloc_r+0x4a>
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	42a3      	cmp	r3, r4
 800a0c6:	d1fb      	bne.n	800a0c0 <_malloc_r+0xdc>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	6053      	str	r3, [r2, #4]
 800a0cc:	e7de      	b.n	800a08c <_malloc_r+0xa8>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	6033      	str	r3, [r6, #0]
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f000 f8ca 	bl	800a26c <__malloc_unlock>
 800a0d8:	e794      	b.n	800a004 <_malloc_r+0x20>
 800a0da:	6005      	str	r5, [r0, #0]
 800a0dc:	e7d6      	b.n	800a08c <_malloc_r+0xa8>
 800a0de:	bf00      	nop
 800a0e0:	2000043c 	.word	0x2000043c

0800a0e4 <__ascii_mbtowc>:
 800a0e4:	b082      	sub	sp, #8
 800a0e6:	b901      	cbnz	r1, 800a0ea <__ascii_mbtowc+0x6>
 800a0e8:	a901      	add	r1, sp, #4
 800a0ea:	b142      	cbz	r2, 800a0fe <__ascii_mbtowc+0x1a>
 800a0ec:	b14b      	cbz	r3, 800a102 <__ascii_mbtowc+0x1e>
 800a0ee:	7813      	ldrb	r3, [r2, #0]
 800a0f0:	600b      	str	r3, [r1, #0]
 800a0f2:	7812      	ldrb	r2, [r2, #0]
 800a0f4:	1e10      	subs	r0, r2, #0
 800a0f6:	bf18      	it	ne
 800a0f8:	2001      	movne	r0, #1
 800a0fa:	b002      	add	sp, #8
 800a0fc:	4770      	bx	lr
 800a0fe:	4610      	mov	r0, r2
 800a100:	e7fb      	b.n	800a0fa <__ascii_mbtowc+0x16>
 800a102:	f06f 0001 	mvn.w	r0, #1
 800a106:	e7f8      	b.n	800a0fa <__ascii_mbtowc+0x16>

0800a108 <__sflush_r>:
 800a108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	0716      	lsls	r6, r2, #28
 800a112:	4605      	mov	r5, r0
 800a114:	460c      	mov	r4, r1
 800a116:	d454      	bmi.n	800a1c2 <__sflush_r+0xba>
 800a118:	684b      	ldr	r3, [r1, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	dc02      	bgt.n	800a124 <__sflush_r+0x1c>
 800a11e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a120:	2b00      	cmp	r3, #0
 800a122:	dd48      	ble.n	800a1b6 <__sflush_r+0xae>
 800a124:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a126:	2e00      	cmp	r6, #0
 800a128:	d045      	beq.n	800a1b6 <__sflush_r+0xae>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a130:	682f      	ldr	r7, [r5, #0]
 800a132:	6a21      	ldr	r1, [r4, #32]
 800a134:	602b      	str	r3, [r5, #0]
 800a136:	d030      	beq.n	800a19a <__sflush_r+0x92>
 800a138:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	0759      	lsls	r1, r3, #29
 800a13e:	d505      	bpl.n	800a14c <__sflush_r+0x44>
 800a140:	6863      	ldr	r3, [r4, #4]
 800a142:	1ad2      	subs	r2, r2, r3
 800a144:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a146:	b10b      	cbz	r3, 800a14c <__sflush_r+0x44>
 800a148:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a14a:	1ad2      	subs	r2, r2, r3
 800a14c:	2300      	movs	r3, #0
 800a14e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a150:	6a21      	ldr	r1, [r4, #32]
 800a152:	4628      	mov	r0, r5
 800a154:	47b0      	blx	r6
 800a156:	1c43      	adds	r3, r0, #1
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	d106      	bne.n	800a16a <__sflush_r+0x62>
 800a15c:	6829      	ldr	r1, [r5, #0]
 800a15e:	291d      	cmp	r1, #29
 800a160:	d82b      	bhi.n	800a1ba <__sflush_r+0xb2>
 800a162:	4a2a      	ldr	r2, [pc, #168]	@ (800a20c <__sflush_r+0x104>)
 800a164:	40ca      	lsrs	r2, r1
 800a166:	07d6      	lsls	r6, r2, #31
 800a168:	d527      	bpl.n	800a1ba <__sflush_r+0xb2>
 800a16a:	2200      	movs	r2, #0
 800a16c:	6062      	str	r2, [r4, #4]
 800a16e:	04d9      	lsls	r1, r3, #19
 800a170:	6922      	ldr	r2, [r4, #16]
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	d504      	bpl.n	800a180 <__sflush_r+0x78>
 800a176:	1c42      	adds	r2, r0, #1
 800a178:	d101      	bne.n	800a17e <__sflush_r+0x76>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b903      	cbnz	r3, 800a180 <__sflush_r+0x78>
 800a17e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a182:	602f      	str	r7, [r5, #0]
 800a184:	b1b9      	cbz	r1, 800a1b6 <__sflush_r+0xae>
 800a186:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a18a:	4299      	cmp	r1, r3
 800a18c:	d002      	beq.n	800a194 <__sflush_r+0x8c>
 800a18e:	4628      	mov	r0, r5
 800a190:	f000 fe3c 	bl	800ae0c <_free_r>
 800a194:	2300      	movs	r3, #0
 800a196:	6363      	str	r3, [r4, #52]	@ 0x34
 800a198:	e00d      	b.n	800a1b6 <__sflush_r+0xae>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b0      	blx	r6
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	1c50      	adds	r0, r2, #1
 800a1a4:	d1c9      	bne.n	800a13a <__sflush_r+0x32>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0c6      	beq.n	800a13a <__sflush_r+0x32>
 800a1ac:	2b1d      	cmp	r3, #29
 800a1ae:	d001      	beq.n	800a1b4 <__sflush_r+0xac>
 800a1b0:	2b16      	cmp	r3, #22
 800a1b2:	d11e      	bne.n	800a1f2 <__sflush_r+0xea>
 800a1b4:	602f      	str	r7, [r5, #0]
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e022      	b.n	800a200 <__sflush_r+0xf8>
 800a1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1be:	b21b      	sxth	r3, r3
 800a1c0:	e01b      	b.n	800a1fa <__sflush_r+0xf2>
 800a1c2:	690f      	ldr	r7, [r1, #16]
 800a1c4:	2f00      	cmp	r7, #0
 800a1c6:	d0f6      	beq.n	800a1b6 <__sflush_r+0xae>
 800a1c8:	0793      	lsls	r3, r2, #30
 800a1ca:	680e      	ldr	r6, [r1, #0]
 800a1cc:	bf08      	it	eq
 800a1ce:	694b      	ldreq	r3, [r1, #20]
 800a1d0:	600f      	str	r7, [r1, #0]
 800a1d2:	bf18      	it	ne
 800a1d4:	2300      	movne	r3, #0
 800a1d6:	eba6 0807 	sub.w	r8, r6, r7
 800a1da:	608b      	str	r3, [r1, #8]
 800a1dc:	f1b8 0f00 	cmp.w	r8, #0
 800a1e0:	dde9      	ble.n	800a1b6 <__sflush_r+0xae>
 800a1e2:	6a21      	ldr	r1, [r4, #32]
 800a1e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1e6:	4643      	mov	r3, r8
 800a1e8:	463a      	mov	r2, r7
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b0      	blx	r6
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	dc08      	bgt.n	800a204 <__sflush_r+0xfc>
 800a1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a204:	4407      	add	r7, r0
 800a206:	eba8 0800 	sub.w	r8, r8, r0
 800a20a:	e7e7      	b.n	800a1dc <__sflush_r+0xd4>
 800a20c:	20400001 	.word	0x20400001

0800a210 <_fflush_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	690b      	ldr	r3, [r1, #16]
 800a214:	4605      	mov	r5, r0
 800a216:	460c      	mov	r4, r1
 800a218:	b913      	cbnz	r3, 800a220 <_fflush_r+0x10>
 800a21a:	2500      	movs	r5, #0
 800a21c:	4628      	mov	r0, r5
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	b118      	cbz	r0, 800a22a <_fflush_r+0x1a>
 800a222:	6a03      	ldr	r3, [r0, #32]
 800a224:	b90b      	cbnz	r3, 800a22a <_fflush_r+0x1a>
 800a226:	f7fd fca5 	bl	8007b74 <__sinit>
 800a22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0f3      	beq.n	800a21a <_fflush_r+0xa>
 800a232:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a234:	07d0      	lsls	r0, r2, #31
 800a236:	d404      	bmi.n	800a242 <_fflush_r+0x32>
 800a238:	0599      	lsls	r1, r3, #22
 800a23a:	d402      	bmi.n	800a242 <_fflush_r+0x32>
 800a23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a23e:	f7fe fb98 	bl	8008972 <__retarget_lock_acquire_recursive>
 800a242:	4628      	mov	r0, r5
 800a244:	4621      	mov	r1, r4
 800a246:	f7ff ff5f 	bl	800a108 <__sflush_r>
 800a24a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a24c:	07da      	lsls	r2, r3, #31
 800a24e:	4605      	mov	r5, r0
 800a250:	d4e4      	bmi.n	800a21c <_fflush_r+0xc>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	059b      	lsls	r3, r3, #22
 800a256:	d4e1      	bmi.n	800a21c <_fflush_r+0xc>
 800a258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a25a:	f7fe fb8b 	bl	8008974 <__retarget_lock_release_recursive>
 800a25e:	e7dd      	b.n	800a21c <_fflush_r+0xc>

0800a260 <__malloc_lock>:
 800a260:	4801      	ldr	r0, [pc, #4]	@ (800a268 <__malloc_lock+0x8>)
 800a262:	f7fe bb86 	b.w	8008972 <__retarget_lock_acquire_recursive>
 800a266:	bf00      	nop
 800a268:	20000434 	.word	0x20000434

0800a26c <__malloc_unlock>:
 800a26c:	4801      	ldr	r0, [pc, #4]	@ (800a274 <__malloc_unlock+0x8>)
 800a26e:	f7fe bb81 	b.w	8008974 <__retarget_lock_release_recursive>
 800a272:	bf00      	nop
 800a274:	20000434 	.word	0x20000434

0800a278 <_Balloc>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	69c6      	ldr	r6, [r0, #28]
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	b976      	cbnz	r6, 800a2a0 <_Balloc+0x28>
 800a282:	2010      	movs	r0, #16
 800a284:	f7ff fe84 	bl	8009f90 <malloc>
 800a288:	4602      	mov	r2, r0
 800a28a:	61e0      	str	r0, [r4, #28]
 800a28c:	b920      	cbnz	r0, 800a298 <_Balloc+0x20>
 800a28e:	4b18      	ldr	r3, [pc, #96]	@ (800a2f0 <_Balloc+0x78>)
 800a290:	4818      	ldr	r0, [pc, #96]	@ (800a2f4 <_Balloc+0x7c>)
 800a292:	216b      	movs	r1, #107	@ 0x6b
 800a294:	f000 fd88 	bl	800ada8 <__assert_func>
 800a298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a29c:	6006      	str	r6, [r0, #0]
 800a29e:	60c6      	str	r6, [r0, #12]
 800a2a0:	69e6      	ldr	r6, [r4, #28]
 800a2a2:	68f3      	ldr	r3, [r6, #12]
 800a2a4:	b183      	cbz	r3, 800a2c8 <_Balloc+0x50>
 800a2a6:	69e3      	ldr	r3, [r4, #28]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ae:	b9b8      	cbnz	r0, 800a2e0 <_Balloc+0x68>
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2b6:	1d72      	adds	r2, r6, #5
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 fd92 	bl	800ade4 <_calloc_r>
 800a2c0:	b160      	cbz	r0, 800a2dc <_Balloc+0x64>
 800a2c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2c6:	e00e      	b.n	800a2e6 <_Balloc+0x6e>
 800a2c8:	2221      	movs	r2, #33	@ 0x21
 800a2ca:	2104      	movs	r1, #4
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fd89 	bl	800ade4 <_calloc_r>
 800a2d2:	69e3      	ldr	r3, [r4, #28]
 800a2d4:	60f0      	str	r0, [r6, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e4      	bne.n	800a2a6 <_Balloc+0x2e>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
 800a2e0:	6802      	ldr	r2, [r0, #0]
 800a2e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2ec:	e7f7      	b.n	800a2de <_Balloc+0x66>
 800a2ee:	bf00      	nop
 800a2f0:	0800b544 	.word	0x0800b544
 800a2f4:	0800b635 	.word	0x0800b635

0800a2f8 <_Bfree>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	69c6      	ldr	r6, [r0, #28]
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	b976      	cbnz	r6, 800a320 <_Bfree+0x28>
 800a302:	2010      	movs	r0, #16
 800a304:	f7ff fe44 	bl	8009f90 <malloc>
 800a308:	4602      	mov	r2, r0
 800a30a:	61e8      	str	r0, [r5, #28]
 800a30c:	b920      	cbnz	r0, 800a318 <_Bfree+0x20>
 800a30e:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <_Bfree+0x3c>)
 800a310:	4809      	ldr	r0, [pc, #36]	@ (800a338 <_Bfree+0x40>)
 800a312:	218f      	movs	r1, #143	@ 0x8f
 800a314:	f000 fd48 	bl	800ada8 <__assert_func>
 800a318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a31c:	6006      	str	r6, [r0, #0]
 800a31e:	60c6      	str	r6, [r0, #12]
 800a320:	b13c      	cbz	r4, 800a332 <_Bfree+0x3a>
 800a322:	69eb      	ldr	r3, [r5, #28]
 800a324:	6862      	ldr	r2, [r4, #4]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a32c:	6021      	str	r1, [r4, #0]
 800a32e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	0800b544 	.word	0x0800b544
 800a338:	0800b635 	.word	0x0800b635

0800a33c <__multadd>:
 800a33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a340:	690d      	ldr	r5, [r1, #16]
 800a342:	4607      	mov	r7, r0
 800a344:	460c      	mov	r4, r1
 800a346:	461e      	mov	r6, r3
 800a348:	f101 0c14 	add.w	ip, r1, #20
 800a34c:	2000      	movs	r0, #0
 800a34e:	f8dc 3000 	ldr.w	r3, [ip]
 800a352:	b299      	uxth	r1, r3
 800a354:	fb02 6101 	mla	r1, r2, r1, r6
 800a358:	0c1e      	lsrs	r6, r3, #16
 800a35a:	0c0b      	lsrs	r3, r1, #16
 800a35c:	fb02 3306 	mla	r3, r2, r6, r3
 800a360:	b289      	uxth	r1, r1
 800a362:	3001      	adds	r0, #1
 800a364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a368:	4285      	cmp	r5, r0
 800a36a:	f84c 1b04 	str.w	r1, [ip], #4
 800a36e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a372:	dcec      	bgt.n	800a34e <__multadd+0x12>
 800a374:	b30e      	cbz	r6, 800a3ba <__multadd+0x7e>
 800a376:	68a3      	ldr	r3, [r4, #8]
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dc19      	bgt.n	800a3b0 <__multadd+0x74>
 800a37c:	6861      	ldr	r1, [r4, #4]
 800a37e:	4638      	mov	r0, r7
 800a380:	3101      	adds	r1, #1
 800a382:	f7ff ff79 	bl	800a278 <_Balloc>
 800a386:	4680      	mov	r8, r0
 800a388:	b928      	cbnz	r0, 800a396 <__multadd+0x5a>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c0 <__multadd+0x84>)
 800a38e:	480d      	ldr	r0, [pc, #52]	@ (800a3c4 <__multadd+0x88>)
 800a390:	21ba      	movs	r1, #186	@ 0xba
 800a392:	f000 fd09 	bl	800ada8 <__assert_func>
 800a396:	6922      	ldr	r2, [r4, #16]
 800a398:	3202      	adds	r2, #2
 800a39a:	f104 010c 	add.w	r1, r4, #12
 800a39e:	0092      	lsls	r2, r2, #2
 800a3a0:	300c      	adds	r0, #12
 800a3a2:	f7fe faed 	bl	8008980 <memcpy>
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f7ff ffa5 	bl	800a2f8 <_Bfree>
 800a3ae:	4644      	mov	r4, r8
 800a3b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	615e      	str	r6, [r3, #20]
 800a3b8:	6125      	str	r5, [r4, #16]
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c0:	0800b5b3 	.word	0x0800b5b3
 800a3c4:	0800b635 	.word	0x0800b635

0800a3c8 <__s2b>:
 800a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	4615      	mov	r5, r2
 800a3d0:	461f      	mov	r7, r3
 800a3d2:	2209      	movs	r2, #9
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3dc:	2100      	movs	r1, #0
 800a3de:	2201      	movs	r2, #1
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	db09      	blt.n	800a3f8 <__s2b+0x30>
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff ff47 	bl	800a278 <_Balloc>
 800a3ea:	b940      	cbnz	r0, 800a3fe <__s2b+0x36>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	4b19      	ldr	r3, [pc, #100]	@ (800a454 <__s2b+0x8c>)
 800a3f0:	4819      	ldr	r0, [pc, #100]	@ (800a458 <__s2b+0x90>)
 800a3f2:	21d3      	movs	r1, #211	@ 0xd3
 800a3f4:	f000 fcd8 	bl	800ada8 <__assert_func>
 800a3f8:	0052      	lsls	r2, r2, #1
 800a3fa:	3101      	adds	r1, #1
 800a3fc:	e7f0      	b.n	800a3e0 <__s2b+0x18>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	6143      	str	r3, [r0, #20]
 800a402:	2d09      	cmp	r5, #9
 800a404:	f04f 0301 	mov.w	r3, #1
 800a408:	6103      	str	r3, [r0, #16]
 800a40a:	dd16      	ble.n	800a43a <__s2b+0x72>
 800a40c:	f104 0909 	add.w	r9, r4, #9
 800a410:	46c8      	mov	r8, r9
 800a412:	442c      	add	r4, r5
 800a414:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a418:	4601      	mov	r1, r0
 800a41a:	3b30      	subs	r3, #48	@ 0x30
 800a41c:	220a      	movs	r2, #10
 800a41e:	4630      	mov	r0, r6
 800a420:	f7ff ff8c 	bl	800a33c <__multadd>
 800a424:	45a0      	cmp	r8, r4
 800a426:	d1f5      	bne.n	800a414 <__s2b+0x4c>
 800a428:	f1a5 0408 	sub.w	r4, r5, #8
 800a42c:	444c      	add	r4, r9
 800a42e:	1b2d      	subs	r5, r5, r4
 800a430:	1963      	adds	r3, r4, r5
 800a432:	42bb      	cmp	r3, r7
 800a434:	db04      	blt.n	800a440 <__s2b+0x78>
 800a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43a:	340a      	adds	r4, #10
 800a43c:	2509      	movs	r5, #9
 800a43e:	e7f6      	b.n	800a42e <__s2b+0x66>
 800a440:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a444:	4601      	mov	r1, r0
 800a446:	3b30      	subs	r3, #48	@ 0x30
 800a448:	220a      	movs	r2, #10
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7ff ff76 	bl	800a33c <__multadd>
 800a450:	e7ee      	b.n	800a430 <__s2b+0x68>
 800a452:	bf00      	nop
 800a454:	0800b5b3 	.word	0x0800b5b3
 800a458:	0800b635 	.word	0x0800b635

0800a45c <__hi0bits>:
 800a45c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a460:	4603      	mov	r3, r0
 800a462:	bf36      	itet	cc
 800a464:	0403      	lslcc	r3, r0, #16
 800a466:	2000      	movcs	r0, #0
 800a468:	2010      	movcc	r0, #16
 800a46a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a46e:	bf3c      	itt	cc
 800a470:	021b      	lslcc	r3, r3, #8
 800a472:	3008      	addcc	r0, #8
 800a474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a478:	bf3c      	itt	cc
 800a47a:	011b      	lslcc	r3, r3, #4
 800a47c:	3004      	addcc	r0, #4
 800a47e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a482:	bf3c      	itt	cc
 800a484:	009b      	lslcc	r3, r3, #2
 800a486:	3002      	addcc	r0, #2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	db05      	blt.n	800a498 <__hi0bits+0x3c>
 800a48c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a490:	f100 0001 	add.w	r0, r0, #1
 800a494:	bf08      	it	eq
 800a496:	2020      	moveq	r0, #32
 800a498:	4770      	bx	lr

0800a49a <__lo0bits>:
 800a49a:	6803      	ldr	r3, [r0, #0]
 800a49c:	4602      	mov	r2, r0
 800a49e:	f013 0007 	ands.w	r0, r3, #7
 800a4a2:	d00b      	beq.n	800a4bc <__lo0bits+0x22>
 800a4a4:	07d9      	lsls	r1, r3, #31
 800a4a6:	d421      	bmi.n	800a4ec <__lo0bits+0x52>
 800a4a8:	0798      	lsls	r0, r3, #30
 800a4aa:	bf49      	itett	mi
 800a4ac:	085b      	lsrmi	r3, r3, #1
 800a4ae:	089b      	lsrpl	r3, r3, #2
 800a4b0:	2001      	movmi	r0, #1
 800a4b2:	6013      	strmi	r3, [r2, #0]
 800a4b4:	bf5c      	itt	pl
 800a4b6:	6013      	strpl	r3, [r2, #0]
 800a4b8:	2002      	movpl	r0, #2
 800a4ba:	4770      	bx	lr
 800a4bc:	b299      	uxth	r1, r3
 800a4be:	b909      	cbnz	r1, 800a4c4 <__lo0bits+0x2a>
 800a4c0:	0c1b      	lsrs	r3, r3, #16
 800a4c2:	2010      	movs	r0, #16
 800a4c4:	b2d9      	uxtb	r1, r3
 800a4c6:	b909      	cbnz	r1, 800a4cc <__lo0bits+0x32>
 800a4c8:	3008      	adds	r0, #8
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	0719      	lsls	r1, r3, #28
 800a4ce:	bf04      	itt	eq
 800a4d0:	091b      	lsreq	r3, r3, #4
 800a4d2:	3004      	addeq	r0, #4
 800a4d4:	0799      	lsls	r1, r3, #30
 800a4d6:	bf04      	itt	eq
 800a4d8:	089b      	lsreq	r3, r3, #2
 800a4da:	3002      	addeq	r0, #2
 800a4dc:	07d9      	lsls	r1, r3, #31
 800a4de:	d403      	bmi.n	800a4e8 <__lo0bits+0x4e>
 800a4e0:	085b      	lsrs	r3, r3, #1
 800a4e2:	f100 0001 	add.w	r0, r0, #1
 800a4e6:	d003      	beq.n	800a4f0 <__lo0bits+0x56>
 800a4e8:	6013      	str	r3, [r2, #0]
 800a4ea:	4770      	bx	lr
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	4770      	bx	lr
 800a4f0:	2020      	movs	r0, #32
 800a4f2:	4770      	bx	lr

0800a4f4 <__i2b>:
 800a4f4:	b510      	push	{r4, lr}
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	f7ff febd 	bl	800a278 <_Balloc>
 800a4fe:	4602      	mov	r2, r0
 800a500:	b928      	cbnz	r0, 800a50e <__i2b+0x1a>
 800a502:	4b05      	ldr	r3, [pc, #20]	@ (800a518 <__i2b+0x24>)
 800a504:	4805      	ldr	r0, [pc, #20]	@ (800a51c <__i2b+0x28>)
 800a506:	f240 1145 	movw	r1, #325	@ 0x145
 800a50a:	f000 fc4d 	bl	800ada8 <__assert_func>
 800a50e:	2301      	movs	r3, #1
 800a510:	6144      	str	r4, [r0, #20]
 800a512:	6103      	str	r3, [r0, #16]
 800a514:	bd10      	pop	{r4, pc}
 800a516:	bf00      	nop
 800a518:	0800b5b3 	.word	0x0800b5b3
 800a51c:	0800b635 	.word	0x0800b635

0800a520 <__multiply>:
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	4617      	mov	r7, r2
 800a526:	690a      	ldr	r2, [r1, #16]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	bfa8      	it	ge
 800a52e:	463b      	movge	r3, r7
 800a530:	4689      	mov	r9, r1
 800a532:	bfa4      	itt	ge
 800a534:	460f      	movge	r7, r1
 800a536:	4699      	movge	r9, r3
 800a538:	693d      	ldr	r5, [r7, #16]
 800a53a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	eb05 060a 	add.w	r6, r5, sl
 800a546:	42b3      	cmp	r3, r6
 800a548:	b085      	sub	sp, #20
 800a54a:	bfb8      	it	lt
 800a54c:	3101      	addlt	r1, #1
 800a54e:	f7ff fe93 	bl	800a278 <_Balloc>
 800a552:	b930      	cbnz	r0, 800a562 <__multiply+0x42>
 800a554:	4602      	mov	r2, r0
 800a556:	4b41      	ldr	r3, [pc, #260]	@ (800a65c <__multiply+0x13c>)
 800a558:	4841      	ldr	r0, [pc, #260]	@ (800a660 <__multiply+0x140>)
 800a55a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a55e:	f000 fc23 	bl	800ada8 <__assert_func>
 800a562:	f100 0414 	add.w	r4, r0, #20
 800a566:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a56a:	4623      	mov	r3, r4
 800a56c:	2200      	movs	r2, #0
 800a56e:	4573      	cmp	r3, lr
 800a570:	d320      	bcc.n	800a5b4 <__multiply+0x94>
 800a572:	f107 0814 	add.w	r8, r7, #20
 800a576:	f109 0114 	add.w	r1, r9, #20
 800a57a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a57e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a582:	9302      	str	r3, [sp, #8]
 800a584:	1beb      	subs	r3, r5, r7
 800a586:	3b15      	subs	r3, #21
 800a588:	f023 0303 	bic.w	r3, r3, #3
 800a58c:	3304      	adds	r3, #4
 800a58e:	3715      	adds	r7, #21
 800a590:	42bd      	cmp	r5, r7
 800a592:	bf38      	it	cc
 800a594:	2304      	movcc	r3, #4
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	9b02      	ldr	r3, [sp, #8]
 800a59a:	9103      	str	r1, [sp, #12]
 800a59c:	428b      	cmp	r3, r1
 800a59e:	d80c      	bhi.n	800a5ba <__multiply+0x9a>
 800a5a0:	2e00      	cmp	r6, #0
 800a5a2:	dd03      	ble.n	800a5ac <__multiply+0x8c>
 800a5a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d055      	beq.n	800a658 <__multiply+0x138>
 800a5ac:	6106      	str	r6, [r0, #16]
 800a5ae:	b005      	add	sp, #20
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b4:	f843 2b04 	str.w	r2, [r3], #4
 800a5b8:	e7d9      	b.n	800a56e <__multiply+0x4e>
 800a5ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800a5be:	f1ba 0f00 	cmp.w	sl, #0
 800a5c2:	d01f      	beq.n	800a604 <__multiply+0xe4>
 800a5c4:	46c4      	mov	ip, r8
 800a5c6:	46a1      	mov	r9, r4
 800a5c8:	2700      	movs	r7, #0
 800a5ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5ce:	f8d9 3000 	ldr.w	r3, [r9]
 800a5d2:	fa1f fb82 	uxth.w	fp, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a5dc:	443b      	add	r3, r7
 800a5de:	f8d9 7000 	ldr.w	r7, [r9]
 800a5e2:	0c12      	lsrs	r2, r2, #16
 800a5e4:	0c3f      	lsrs	r7, r7, #16
 800a5e6:	fb0a 7202 	mla	r2, sl, r2, r7
 800a5ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5f4:	4565      	cmp	r5, ip
 800a5f6:	f849 3b04 	str.w	r3, [r9], #4
 800a5fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a5fe:	d8e4      	bhi.n	800a5ca <__multiply+0xaa>
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	50e7      	str	r7, [r4, r3]
 800a604:	9b03      	ldr	r3, [sp, #12]
 800a606:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a60a:	3104      	adds	r1, #4
 800a60c:	f1b9 0f00 	cmp.w	r9, #0
 800a610:	d020      	beq.n	800a654 <__multiply+0x134>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	4647      	mov	r7, r8
 800a616:	46a4      	mov	ip, r4
 800a618:	f04f 0a00 	mov.w	sl, #0
 800a61c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a620:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a624:	fb09 220b 	mla	r2, r9, fp, r2
 800a628:	4452      	add	r2, sl
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a630:	f84c 3b04 	str.w	r3, [ip], #4
 800a634:	f857 3b04 	ldr.w	r3, [r7], #4
 800a638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a63c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a640:	fb09 330a 	mla	r3, r9, sl, r3
 800a644:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a648:	42bd      	cmp	r5, r7
 800a64a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a64e:	d8e5      	bhi.n	800a61c <__multiply+0xfc>
 800a650:	9a01      	ldr	r2, [sp, #4]
 800a652:	50a3      	str	r3, [r4, r2]
 800a654:	3404      	adds	r4, #4
 800a656:	e79f      	b.n	800a598 <__multiply+0x78>
 800a658:	3e01      	subs	r6, #1
 800a65a:	e7a1      	b.n	800a5a0 <__multiply+0x80>
 800a65c:	0800b5b3 	.word	0x0800b5b3
 800a660:	0800b635 	.word	0x0800b635

0800a664 <__pow5mult>:
 800a664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a668:	4615      	mov	r5, r2
 800a66a:	f012 0203 	ands.w	r2, r2, #3
 800a66e:	4607      	mov	r7, r0
 800a670:	460e      	mov	r6, r1
 800a672:	d007      	beq.n	800a684 <__pow5mult+0x20>
 800a674:	4c25      	ldr	r4, [pc, #148]	@ (800a70c <__pow5mult+0xa8>)
 800a676:	3a01      	subs	r2, #1
 800a678:	2300      	movs	r3, #0
 800a67a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a67e:	f7ff fe5d 	bl	800a33c <__multadd>
 800a682:	4606      	mov	r6, r0
 800a684:	10ad      	asrs	r5, r5, #2
 800a686:	d03d      	beq.n	800a704 <__pow5mult+0xa0>
 800a688:	69fc      	ldr	r4, [r7, #28]
 800a68a:	b97c      	cbnz	r4, 800a6ac <__pow5mult+0x48>
 800a68c:	2010      	movs	r0, #16
 800a68e:	f7ff fc7f 	bl	8009f90 <malloc>
 800a692:	4602      	mov	r2, r0
 800a694:	61f8      	str	r0, [r7, #28]
 800a696:	b928      	cbnz	r0, 800a6a4 <__pow5mult+0x40>
 800a698:	4b1d      	ldr	r3, [pc, #116]	@ (800a710 <__pow5mult+0xac>)
 800a69a:	481e      	ldr	r0, [pc, #120]	@ (800a714 <__pow5mult+0xb0>)
 800a69c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a6a0:	f000 fb82 	bl	800ada8 <__assert_func>
 800a6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6a8:	6004      	str	r4, [r0, #0]
 800a6aa:	60c4      	str	r4, [r0, #12]
 800a6ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6b4:	b94c      	cbnz	r4, 800a6ca <__pow5mult+0x66>
 800a6b6:	f240 2171 	movw	r1, #625	@ 0x271
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	f7ff ff1a 	bl	800a4f4 <__i2b>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	6003      	str	r3, [r0, #0]
 800a6ca:	f04f 0900 	mov.w	r9, #0
 800a6ce:	07eb      	lsls	r3, r5, #31
 800a6d0:	d50a      	bpl.n	800a6e8 <__pow5mult+0x84>
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	f7ff ff22 	bl	800a520 <__multiply>
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4680      	mov	r8, r0
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f7ff fe09 	bl	800a2f8 <_Bfree>
 800a6e6:	4646      	mov	r6, r8
 800a6e8:	106d      	asrs	r5, r5, #1
 800a6ea:	d00b      	beq.n	800a704 <__pow5mult+0xa0>
 800a6ec:	6820      	ldr	r0, [r4, #0]
 800a6ee:	b938      	cbnz	r0, 800a700 <__pow5mult+0x9c>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4638      	mov	r0, r7
 800a6f6:	f7ff ff13 	bl	800a520 <__multiply>
 800a6fa:	6020      	str	r0, [r4, #0]
 800a6fc:	f8c0 9000 	str.w	r9, [r0]
 800a700:	4604      	mov	r4, r0
 800a702:	e7e4      	b.n	800a6ce <__pow5mult+0x6a>
 800a704:	4630      	mov	r0, r6
 800a706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a70a:	bf00      	nop
 800a70c:	0800b824 	.word	0x0800b824
 800a710:	0800b544 	.word	0x0800b544
 800a714:	0800b635 	.word	0x0800b635

0800a718 <__lshift>:
 800a718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	6849      	ldr	r1, [r1, #4]
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a726:	68a3      	ldr	r3, [r4, #8]
 800a728:	4607      	mov	r7, r0
 800a72a:	4691      	mov	r9, r2
 800a72c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a730:	f108 0601 	add.w	r6, r8, #1
 800a734:	42b3      	cmp	r3, r6
 800a736:	db0b      	blt.n	800a750 <__lshift+0x38>
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff fd9d 	bl	800a278 <_Balloc>
 800a73e:	4605      	mov	r5, r0
 800a740:	b948      	cbnz	r0, 800a756 <__lshift+0x3e>
 800a742:	4602      	mov	r2, r0
 800a744:	4b28      	ldr	r3, [pc, #160]	@ (800a7e8 <__lshift+0xd0>)
 800a746:	4829      	ldr	r0, [pc, #164]	@ (800a7ec <__lshift+0xd4>)
 800a748:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a74c:	f000 fb2c 	bl	800ada8 <__assert_func>
 800a750:	3101      	adds	r1, #1
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	e7ee      	b.n	800a734 <__lshift+0x1c>
 800a756:	2300      	movs	r3, #0
 800a758:	f100 0114 	add.w	r1, r0, #20
 800a75c:	f100 0210 	add.w	r2, r0, #16
 800a760:	4618      	mov	r0, r3
 800a762:	4553      	cmp	r3, sl
 800a764:	db33      	blt.n	800a7ce <__lshift+0xb6>
 800a766:	6920      	ldr	r0, [r4, #16]
 800a768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a76c:	f104 0314 	add.w	r3, r4, #20
 800a770:	f019 091f 	ands.w	r9, r9, #31
 800a774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a77c:	d02b      	beq.n	800a7d6 <__lshift+0xbe>
 800a77e:	f1c9 0e20 	rsb	lr, r9, #32
 800a782:	468a      	mov	sl, r1
 800a784:	2200      	movs	r2, #0
 800a786:	6818      	ldr	r0, [r3, #0]
 800a788:	fa00 f009 	lsl.w	r0, r0, r9
 800a78c:	4310      	orrs	r0, r2
 800a78e:	f84a 0b04 	str.w	r0, [sl], #4
 800a792:	f853 2b04 	ldr.w	r2, [r3], #4
 800a796:	459c      	cmp	ip, r3
 800a798:	fa22 f20e 	lsr.w	r2, r2, lr
 800a79c:	d8f3      	bhi.n	800a786 <__lshift+0x6e>
 800a79e:	ebac 0304 	sub.w	r3, ip, r4
 800a7a2:	3b15      	subs	r3, #21
 800a7a4:	f023 0303 	bic.w	r3, r3, #3
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	f104 0015 	add.w	r0, r4, #21
 800a7ae:	4560      	cmp	r0, ip
 800a7b0:	bf88      	it	hi
 800a7b2:	2304      	movhi	r3, #4
 800a7b4:	50ca      	str	r2, [r1, r3]
 800a7b6:	b10a      	cbz	r2, 800a7bc <__lshift+0xa4>
 800a7b8:	f108 0602 	add.w	r6, r8, #2
 800a7bc:	3e01      	subs	r6, #1
 800a7be:	4638      	mov	r0, r7
 800a7c0:	612e      	str	r6, [r5, #16]
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	f7ff fd98 	bl	800a2f8 <_Bfree>
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	e7c5      	b.n	800a762 <__lshift+0x4a>
 800a7d6:	3904      	subs	r1, #4
 800a7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7e0:	459c      	cmp	ip, r3
 800a7e2:	d8f9      	bhi.n	800a7d8 <__lshift+0xc0>
 800a7e4:	e7ea      	b.n	800a7bc <__lshift+0xa4>
 800a7e6:	bf00      	nop
 800a7e8:	0800b5b3 	.word	0x0800b5b3
 800a7ec:	0800b635 	.word	0x0800b635

0800a7f0 <__mcmp>:
 800a7f0:	690a      	ldr	r2, [r1, #16]
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6900      	ldr	r0, [r0, #16]
 800a7f6:	1a80      	subs	r0, r0, r2
 800a7f8:	b530      	push	{r4, r5, lr}
 800a7fa:	d10e      	bne.n	800a81a <__mcmp+0x2a>
 800a7fc:	3314      	adds	r3, #20
 800a7fe:	3114      	adds	r1, #20
 800a800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a80c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a810:	4295      	cmp	r5, r2
 800a812:	d003      	beq.n	800a81c <__mcmp+0x2c>
 800a814:	d205      	bcs.n	800a822 <__mcmp+0x32>
 800a816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a81a:	bd30      	pop	{r4, r5, pc}
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	d3f3      	bcc.n	800a808 <__mcmp+0x18>
 800a820:	e7fb      	b.n	800a81a <__mcmp+0x2a>
 800a822:	2001      	movs	r0, #1
 800a824:	e7f9      	b.n	800a81a <__mcmp+0x2a>
	...

0800a828 <__mdiff>:
 800a828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	4689      	mov	r9, r1
 800a82e:	4606      	mov	r6, r0
 800a830:	4611      	mov	r1, r2
 800a832:	4648      	mov	r0, r9
 800a834:	4614      	mov	r4, r2
 800a836:	f7ff ffdb 	bl	800a7f0 <__mcmp>
 800a83a:	1e05      	subs	r5, r0, #0
 800a83c:	d112      	bne.n	800a864 <__mdiff+0x3c>
 800a83e:	4629      	mov	r1, r5
 800a840:	4630      	mov	r0, r6
 800a842:	f7ff fd19 	bl	800a278 <_Balloc>
 800a846:	4602      	mov	r2, r0
 800a848:	b928      	cbnz	r0, 800a856 <__mdiff+0x2e>
 800a84a:	4b3f      	ldr	r3, [pc, #252]	@ (800a948 <__mdiff+0x120>)
 800a84c:	f240 2137 	movw	r1, #567	@ 0x237
 800a850:	483e      	ldr	r0, [pc, #248]	@ (800a94c <__mdiff+0x124>)
 800a852:	f000 faa9 	bl	800ada8 <__assert_func>
 800a856:	2301      	movs	r3, #1
 800a858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a85c:	4610      	mov	r0, r2
 800a85e:	b003      	add	sp, #12
 800a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a864:	bfbc      	itt	lt
 800a866:	464b      	movlt	r3, r9
 800a868:	46a1      	movlt	r9, r4
 800a86a:	4630      	mov	r0, r6
 800a86c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a870:	bfba      	itte	lt
 800a872:	461c      	movlt	r4, r3
 800a874:	2501      	movlt	r5, #1
 800a876:	2500      	movge	r5, #0
 800a878:	f7ff fcfe 	bl	800a278 <_Balloc>
 800a87c:	4602      	mov	r2, r0
 800a87e:	b918      	cbnz	r0, 800a888 <__mdiff+0x60>
 800a880:	4b31      	ldr	r3, [pc, #196]	@ (800a948 <__mdiff+0x120>)
 800a882:	f240 2145 	movw	r1, #581	@ 0x245
 800a886:	e7e3      	b.n	800a850 <__mdiff+0x28>
 800a888:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a88c:	6926      	ldr	r6, [r4, #16]
 800a88e:	60c5      	str	r5, [r0, #12]
 800a890:	f109 0310 	add.w	r3, r9, #16
 800a894:	f109 0514 	add.w	r5, r9, #20
 800a898:	f104 0e14 	add.w	lr, r4, #20
 800a89c:	f100 0b14 	add.w	fp, r0, #20
 800a8a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a8a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a8a8:	9301      	str	r3, [sp, #4]
 800a8aa:	46d9      	mov	r9, fp
 800a8ac:	f04f 0c00 	mov.w	ip, #0
 800a8b0:	9b01      	ldr	r3, [sp, #4]
 800a8b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a8b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	fa1f f38a 	uxth.w	r3, sl
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	b283      	uxth	r3, r0
 800a8c4:	1acb      	subs	r3, r1, r3
 800a8c6:	0c00      	lsrs	r0, r0, #16
 800a8c8:	4463      	add	r3, ip
 800a8ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a8ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8d8:	4576      	cmp	r6, lr
 800a8da:	f849 3b04 	str.w	r3, [r9], #4
 800a8de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8e2:	d8e5      	bhi.n	800a8b0 <__mdiff+0x88>
 800a8e4:	1b33      	subs	r3, r6, r4
 800a8e6:	3b15      	subs	r3, #21
 800a8e8:	f023 0303 	bic.w	r3, r3, #3
 800a8ec:	3415      	adds	r4, #21
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	42a6      	cmp	r6, r4
 800a8f2:	bf38      	it	cc
 800a8f4:	2304      	movcc	r3, #4
 800a8f6:	441d      	add	r5, r3
 800a8f8:	445b      	add	r3, fp
 800a8fa:	461e      	mov	r6, r3
 800a8fc:	462c      	mov	r4, r5
 800a8fe:	4544      	cmp	r4, r8
 800a900:	d30e      	bcc.n	800a920 <__mdiff+0xf8>
 800a902:	f108 0103 	add.w	r1, r8, #3
 800a906:	1b49      	subs	r1, r1, r5
 800a908:	f021 0103 	bic.w	r1, r1, #3
 800a90c:	3d03      	subs	r5, #3
 800a90e:	45a8      	cmp	r8, r5
 800a910:	bf38      	it	cc
 800a912:	2100      	movcc	r1, #0
 800a914:	440b      	add	r3, r1
 800a916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a91a:	b191      	cbz	r1, 800a942 <__mdiff+0x11a>
 800a91c:	6117      	str	r7, [r2, #16]
 800a91e:	e79d      	b.n	800a85c <__mdiff+0x34>
 800a920:	f854 1b04 	ldr.w	r1, [r4], #4
 800a924:	46e6      	mov	lr, ip
 800a926:	0c08      	lsrs	r0, r1, #16
 800a928:	fa1c fc81 	uxtah	ip, ip, r1
 800a92c:	4471      	add	r1, lr
 800a92e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a932:	b289      	uxth	r1, r1
 800a934:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a938:	f846 1b04 	str.w	r1, [r6], #4
 800a93c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a940:	e7dd      	b.n	800a8fe <__mdiff+0xd6>
 800a942:	3f01      	subs	r7, #1
 800a944:	e7e7      	b.n	800a916 <__mdiff+0xee>
 800a946:	bf00      	nop
 800a948:	0800b5b3 	.word	0x0800b5b3
 800a94c:	0800b635 	.word	0x0800b635

0800a950 <__ulp>:
 800a950:	b082      	sub	sp, #8
 800a952:	ed8d 0b00 	vstr	d0, [sp]
 800a956:	9a01      	ldr	r2, [sp, #4]
 800a958:	4b0f      	ldr	r3, [pc, #60]	@ (800a998 <__ulp+0x48>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a960:	2b00      	cmp	r3, #0
 800a962:	dc08      	bgt.n	800a976 <__ulp+0x26>
 800a964:	425b      	negs	r3, r3
 800a966:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a96a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a96e:	da04      	bge.n	800a97a <__ulp+0x2a>
 800a970:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a974:	4113      	asrs	r3, r2
 800a976:	2200      	movs	r2, #0
 800a978:	e008      	b.n	800a98c <__ulp+0x3c>
 800a97a:	f1a2 0314 	sub.w	r3, r2, #20
 800a97e:	2b1e      	cmp	r3, #30
 800a980:	bfda      	itte	le
 800a982:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a986:	40da      	lsrle	r2, r3
 800a988:	2201      	movgt	r2, #1
 800a98a:	2300      	movs	r3, #0
 800a98c:	4619      	mov	r1, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	ec41 0b10 	vmov	d0, r0, r1
 800a994:	b002      	add	sp, #8
 800a996:	4770      	bx	lr
 800a998:	7ff00000 	.word	0x7ff00000

0800a99c <__b2d>:
 800a99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a0:	6906      	ldr	r6, [r0, #16]
 800a9a2:	f100 0814 	add.w	r8, r0, #20
 800a9a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a9aa:	1f37      	subs	r7, r6, #4
 800a9ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f7ff fd53 	bl	800a45c <__hi0bits>
 800a9b6:	f1c0 0320 	rsb	r3, r0, #32
 800a9ba:	280a      	cmp	r0, #10
 800a9bc:	600b      	str	r3, [r1, #0]
 800a9be:	491b      	ldr	r1, [pc, #108]	@ (800aa2c <__b2d+0x90>)
 800a9c0:	dc15      	bgt.n	800a9ee <__b2d+0x52>
 800a9c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a9c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a9ca:	45b8      	cmp	r8, r7
 800a9cc:	ea43 0501 	orr.w	r5, r3, r1
 800a9d0:	bf34      	ite	cc
 800a9d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9d6:	2300      	movcs	r3, #0
 800a9d8:	3015      	adds	r0, #21
 800a9da:	fa02 f000 	lsl.w	r0, r2, r0
 800a9de:	fa23 f30c 	lsr.w	r3, r3, ip
 800a9e2:	4303      	orrs	r3, r0
 800a9e4:	461c      	mov	r4, r3
 800a9e6:	ec45 4b10 	vmov	d0, r4, r5
 800a9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ee:	45b8      	cmp	r8, r7
 800a9f0:	bf3a      	itte	cc
 800a9f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a9fa:	2300      	movcs	r3, #0
 800a9fc:	380b      	subs	r0, #11
 800a9fe:	d012      	beq.n	800aa26 <__b2d+0x8a>
 800aa00:	f1c0 0120 	rsb	r1, r0, #32
 800aa04:	fa23 f401 	lsr.w	r4, r3, r1
 800aa08:	4082      	lsls	r2, r0
 800aa0a:	4322      	orrs	r2, r4
 800aa0c:	4547      	cmp	r7, r8
 800aa0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aa12:	bf8c      	ite	hi
 800aa14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa18:	2200      	movls	r2, #0
 800aa1a:	4083      	lsls	r3, r0
 800aa1c:	40ca      	lsrs	r2, r1
 800aa1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aa22:	4313      	orrs	r3, r2
 800aa24:	e7de      	b.n	800a9e4 <__b2d+0x48>
 800aa26:	ea42 0501 	orr.w	r5, r2, r1
 800aa2a:	e7db      	b.n	800a9e4 <__b2d+0x48>
 800aa2c:	3ff00000 	.word	0x3ff00000

0800aa30 <__d2b>:
 800aa30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa34:	460f      	mov	r7, r1
 800aa36:	2101      	movs	r1, #1
 800aa38:	ec59 8b10 	vmov	r8, r9, d0
 800aa3c:	4616      	mov	r6, r2
 800aa3e:	f7ff fc1b 	bl	800a278 <_Balloc>
 800aa42:	4604      	mov	r4, r0
 800aa44:	b930      	cbnz	r0, 800aa54 <__d2b+0x24>
 800aa46:	4602      	mov	r2, r0
 800aa48:	4b23      	ldr	r3, [pc, #140]	@ (800aad8 <__d2b+0xa8>)
 800aa4a:	4824      	ldr	r0, [pc, #144]	@ (800aadc <__d2b+0xac>)
 800aa4c:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa50:	f000 f9aa 	bl	800ada8 <__assert_func>
 800aa54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa5c:	b10d      	cbz	r5, 800aa62 <__d2b+0x32>
 800aa5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	f1b8 0300 	subs.w	r3, r8, #0
 800aa68:	d023      	beq.n	800aab2 <__d2b+0x82>
 800aa6a:	4668      	mov	r0, sp
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	f7ff fd14 	bl	800a49a <__lo0bits>
 800aa72:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa76:	b1d0      	cbz	r0, 800aaae <__d2b+0x7e>
 800aa78:	f1c0 0320 	rsb	r3, r0, #32
 800aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa80:	430b      	orrs	r3, r1
 800aa82:	40c2      	lsrs	r2, r0
 800aa84:	6163      	str	r3, [r4, #20]
 800aa86:	9201      	str	r2, [sp, #4]
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	61a3      	str	r3, [r4, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf0c      	ite	eq
 800aa90:	2201      	moveq	r2, #1
 800aa92:	2202      	movne	r2, #2
 800aa94:	6122      	str	r2, [r4, #16]
 800aa96:	b1a5      	cbz	r5, 800aac2 <__d2b+0x92>
 800aa98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa9c:	4405      	add	r5, r0
 800aa9e:	603d      	str	r5, [r7, #0]
 800aaa0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aaa4:	6030      	str	r0, [r6, #0]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	b003      	add	sp, #12
 800aaaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaae:	6161      	str	r1, [r4, #20]
 800aab0:	e7ea      	b.n	800aa88 <__d2b+0x58>
 800aab2:	a801      	add	r0, sp, #4
 800aab4:	f7ff fcf1 	bl	800a49a <__lo0bits>
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	6163      	str	r3, [r4, #20]
 800aabc:	3020      	adds	r0, #32
 800aabe:	2201      	movs	r2, #1
 800aac0:	e7e8      	b.n	800aa94 <__d2b+0x64>
 800aac2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aac6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aaca:	6038      	str	r0, [r7, #0]
 800aacc:	6918      	ldr	r0, [r3, #16]
 800aace:	f7ff fcc5 	bl	800a45c <__hi0bits>
 800aad2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aad6:	e7e5      	b.n	800aaa4 <__d2b+0x74>
 800aad8:	0800b5b3 	.word	0x0800b5b3
 800aadc:	0800b635 	.word	0x0800b635

0800aae0 <__ratio>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	b085      	sub	sp, #20
 800aae6:	e9cd 1000 	strd	r1, r0, [sp]
 800aaea:	a902      	add	r1, sp, #8
 800aaec:	f7ff ff56 	bl	800a99c <__b2d>
 800aaf0:	9800      	ldr	r0, [sp, #0]
 800aaf2:	a903      	add	r1, sp, #12
 800aaf4:	ec55 4b10 	vmov	r4, r5, d0
 800aaf8:	f7ff ff50 	bl	800a99c <__b2d>
 800aafc:	9b01      	ldr	r3, [sp, #4]
 800aafe:	6919      	ldr	r1, [r3, #16]
 800ab00:	9b00      	ldr	r3, [sp, #0]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	1ac9      	subs	r1, r1, r3
 800ab06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	ec5b ab10 	vmov	sl, fp, d0
 800ab10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfce      	itee	gt
 800ab18:	462a      	movgt	r2, r5
 800ab1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab1e:	465a      	movle	r2, fp
 800ab20:	462f      	mov	r7, r5
 800ab22:	46d9      	mov	r9, fp
 800ab24:	bfcc      	ite	gt
 800ab26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ab2e:	464b      	mov	r3, r9
 800ab30:	4652      	mov	r2, sl
 800ab32:	4620      	mov	r0, r4
 800ab34:	4639      	mov	r1, r7
 800ab36:	f7f5 fea1 	bl	800087c <__aeabi_ddiv>
 800ab3a:	ec41 0b10 	vmov	d0, r0, r1
 800ab3e:	b005      	add	sp, #20
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab44 <__copybits>:
 800ab44:	3901      	subs	r1, #1
 800ab46:	b570      	push	{r4, r5, r6, lr}
 800ab48:	1149      	asrs	r1, r1, #5
 800ab4a:	6914      	ldr	r4, [r2, #16]
 800ab4c:	3101      	adds	r1, #1
 800ab4e:	f102 0314 	add.w	r3, r2, #20
 800ab52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab5a:	1f05      	subs	r5, r0, #4
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d30c      	bcc.n	800ab7a <__copybits+0x36>
 800ab60:	1aa3      	subs	r3, r4, r2
 800ab62:	3b11      	subs	r3, #17
 800ab64:	f023 0303 	bic.w	r3, r3, #3
 800ab68:	3211      	adds	r2, #17
 800ab6a:	42a2      	cmp	r2, r4
 800ab6c:	bf88      	it	hi
 800ab6e:	2300      	movhi	r3, #0
 800ab70:	4418      	add	r0, r3
 800ab72:	2300      	movs	r3, #0
 800ab74:	4288      	cmp	r0, r1
 800ab76:	d305      	bcc.n	800ab84 <__copybits+0x40>
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab7e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab82:	e7eb      	b.n	800ab5c <__copybits+0x18>
 800ab84:	f840 3b04 	str.w	r3, [r0], #4
 800ab88:	e7f4      	b.n	800ab74 <__copybits+0x30>

0800ab8a <__any_on>:
 800ab8a:	f100 0214 	add.w	r2, r0, #20
 800ab8e:	6900      	ldr	r0, [r0, #16]
 800ab90:	114b      	asrs	r3, r1, #5
 800ab92:	4298      	cmp	r0, r3
 800ab94:	b510      	push	{r4, lr}
 800ab96:	db11      	blt.n	800abbc <__any_on+0x32>
 800ab98:	dd0a      	ble.n	800abb0 <__any_on+0x26>
 800ab9a:	f011 011f 	ands.w	r1, r1, #31
 800ab9e:	d007      	beq.n	800abb0 <__any_on+0x26>
 800aba0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aba4:	fa24 f001 	lsr.w	r0, r4, r1
 800aba8:	fa00 f101 	lsl.w	r1, r0, r1
 800abac:	428c      	cmp	r4, r1
 800abae:	d10b      	bne.n	800abc8 <__any_on+0x3e>
 800abb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d803      	bhi.n	800abc0 <__any_on+0x36>
 800abb8:	2000      	movs	r0, #0
 800abba:	bd10      	pop	{r4, pc}
 800abbc:	4603      	mov	r3, r0
 800abbe:	e7f7      	b.n	800abb0 <__any_on+0x26>
 800abc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abc4:	2900      	cmp	r1, #0
 800abc6:	d0f5      	beq.n	800abb4 <__any_on+0x2a>
 800abc8:	2001      	movs	r0, #1
 800abca:	e7f6      	b.n	800abba <__any_on+0x30>

0800abcc <__sread>:
 800abcc:	b510      	push	{r4, lr}
 800abce:	460c      	mov	r4, r1
 800abd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd4:	f000 f8a4 	bl	800ad20 <_read_r>
 800abd8:	2800      	cmp	r0, #0
 800abda:	bfab      	itete	ge
 800abdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abde:	89a3      	ldrhlt	r3, [r4, #12]
 800abe0:	181b      	addge	r3, r3, r0
 800abe2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abe6:	bfac      	ite	ge
 800abe8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abea:	81a3      	strhlt	r3, [r4, #12]
 800abec:	bd10      	pop	{r4, pc}

0800abee <__swrite>:
 800abee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf2:	461f      	mov	r7, r3
 800abf4:	898b      	ldrh	r3, [r1, #12]
 800abf6:	05db      	lsls	r3, r3, #23
 800abf8:	4605      	mov	r5, r0
 800abfa:	460c      	mov	r4, r1
 800abfc:	4616      	mov	r6, r2
 800abfe:	d505      	bpl.n	800ac0c <__swrite+0x1e>
 800ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac04:	2302      	movs	r3, #2
 800ac06:	2200      	movs	r2, #0
 800ac08:	f000 f878 	bl	800acfc <_lseek_r>
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	4632      	mov	r2, r6
 800ac1a:	463b      	mov	r3, r7
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac22:	f000 b89f 	b.w	800ad64 <_write_r>

0800ac26 <__sseek>:
 800ac26:	b510      	push	{r4, lr}
 800ac28:	460c      	mov	r4, r1
 800ac2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac2e:	f000 f865 	bl	800acfc <_lseek_r>
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	bf15      	itete	ne
 800ac38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac42:	81a3      	strheq	r3, [r4, #12]
 800ac44:	bf18      	it	ne
 800ac46:	81a3      	strhne	r3, [r4, #12]
 800ac48:	bd10      	pop	{r4, pc}

0800ac4a <__sclose>:
 800ac4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4e:	f000 b89b 	b.w	800ad88 <_close_r>

0800ac52 <_realloc_r>:
 800ac52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac56:	4607      	mov	r7, r0
 800ac58:	4614      	mov	r4, r2
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	b921      	cbnz	r1, 800ac68 <_realloc_r+0x16>
 800ac5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac62:	4611      	mov	r1, r2
 800ac64:	f7ff b9be 	b.w	8009fe4 <_malloc_r>
 800ac68:	b92a      	cbnz	r2, 800ac76 <_realloc_r+0x24>
 800ac6a:	f000 f8cf 	bl	800ae0c <_free_r>
 800ac6e:	4625      	mov	r5, r4
 800ac70:	4628      	mov	r0, r5
 800ac72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac76:	f000 f913 	bl	800aea0 <_malloc_usable_size_r>
 800ac7a:	4284      	cmp	r4, r0
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	d802      	bhi.n	800ac86 <_realloc_r+0x34>
 800ac80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac84:	d8f4      	bhi.n	800ac70 <_realloc_r+0x1e>
 800ac86:	4621      	mov	r1, r4
 800ac88:	4638      	mov	r0, r7
 800ac8a:	f7ff f9ab 	bl	8009fe4 <_malloc_r>
 800ac8e:	4680      	mov	r8, r0
 800ac90:	b908      	cbnz	r0, 800ac96 <_realloc_r+0x44>
 800ac92:	4645      	mov	r5, r8
 800ac94:	e7ec      	b.n	800ac70 <_realloc_r+0x1e>
 800ac96:	42b4      	cmp	r4, r6
 800ac98:	4622      	mov	r2, r4
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	bf28      	it	cs
 800ac9e:	4632      	movcs	r2, r6
 800aca0:	f7fd fe6e 	bl	8008980 <memcpy>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4638      	mov	r0, r7
 800aca8:	f000 f8b0 	bl	800ae0c <_free_r>
 800acac:	e7f1      	b.n	800ac92 <_realloc_r+0x40>

0800acae <__ascii_wctomb>:
 800acae:	4603      	mov	r3, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	b141      	cbz	r1, 800acc6 <__ascii_wctomb+0x18>
 800acb4:	2aff      	cmp	r2, #255	@ 0xff
 800acb6:	d904      	bls.n	800acc2 <__ascii_wctomb+0x14>
 800acb8:	228a      	movs	r2, #138	@ 0x8a
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acc0:	4770      	bx	lr
 800acc2:	700a      	strb	r2, [r1, #0]
 800acc4:	2001      	movs	r0, #1
 800acc6:	4770      	bx	lr

0800acc8 <memmove>:
 800acc8:	4288      	cmp	r0, r1
 800acca:	b510      	push	{r4, lr}
 800accc:	eb01 0402 	add.w	r4, r1, r2
 800acd0:	d902      	bls.n	800acd8 <memmove+0x10>
 800acd2:	4284      	cmp	r4, r0
 800acd4:	4623      	mov	r3, r4
 800acd6:	d807      	bhi.n	800ace8 <memmove+0x20>
 800acd8:	1e43      	subs	r3, r0, #1
 800acda:	42a1      	cmp	r1, r4
 800acdc:	d008      	beq.n	800acf0 <memmove+0x28>
 800acde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ace6:	e7f8      	b.n	800acda <memmove+0x12>
 800ace8:	4402      	add	r2, r0
 800acea:	4601      	mov	r1, r0
 800acec:	428a      	cmp	r2, r1
 800acee:	d100      	bne.n	800acf2 <memmove+0x2a>
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acfa:	e7f7      	b.n	800acec <memmove+0x24>

0800acfc <_lseek_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d07      	ldr	r5, [pc, #28]	@ (800ad1c <_lseek_r+0x20>)
 800ad00:	4604      	mov	r4, r0
 800ad02:	4608      	mov	r0, r1
 800ad04:	4611      	mov	r1, r2
 800ad06:	2200      	movs	r2, #0
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f7f6 fe5e 	bl	80019cc <_lseek>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_lseek_r+0x1e>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_lseek_r+0x1e>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20000440 	.word	0x20000440

0800ad20 <_read_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	@ (800ad40 <_read_r+0x20>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7f6 fdec 	bl	800190c <_read>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_read_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_read_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20000440 	.word	0x20000440

0800ad44 <_sbrk_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	@ (800ad60 <_sbrk_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7f6 fe4a 	bl	80019e8 <_sbrk>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_sbrk_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_sbrk_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20000440 	.word	0x20000440

0800ad64 <_write_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d07      	ldr	r5, [pc, #28]	@ (800ad84 <_write_r+0x20>)
 800ad68:	4604      	mov	r4, r0
 800ad6a:	4608      	mov	r0, r1
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	2200      	movs	r2, #0
 800ad70:	602a      	str	r2, [r5, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7f6 fde7 	bl	8001946 <_write>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_write_r+0x1e>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_write_r+0x1e>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	20000440 	.word	0x20000440

0800ad88 <_close_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	@ (800ada4 <_close_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f6 fdf3 	bl	800197e <_close>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_close_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_close_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20000440 	.word	0x20000440

0800ada8 <__assert_func>:
 800ada8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adaa:	4614      	mov	r4, r2
 800adac:	461a      	mov	r2, r3
 800adae:	4b09      	ldr	r3, [pc, #36]	@ (800add4 <__assert_func+0x2c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4605      	mov	r5, r0
 800adb4:	68d8      	ldr	r0, [r3, #12]
 800adb6:	b14c      	cbz	r4, 800adcc <__assert_func+0x24>
 800adb8:	4b07      	ldr	r3, [pc, #28]	@ (800add8 <__assert_func+0x30>)
 800adba:	9100      	str	r1, [sp, #0]
 800adbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adc0:	4906      	ldr	r1, [pc, #24]	@ (800addc <__assert_func+0x34>)
 800adc2:	462b      	mov	r3, r5
 800adc4:	f000 f874 	bl	800aeb0 <fiprintf>
 800adc8:	f000 f884 	bl	800aed4 <abort>
 800adcc:	4b04      	ldr	r3, [pc, #16]	@ (800ade0 <__assert_func+0x38>)
 800adce:	461c      	mov	r4, r3
 800add0:	e7f3      	b.n	800adba <__assert_func+0x12>
 800add2:	bf00      	nop
 800add4:	20000184 	.word	0x20000184
 800add8:	0800b68e 	.word	0x0800b68e
 800addc:	0800b69b 	.word	0x0800b69b
 800ade0:	0800b6c9 	.word	0x0800b6c9

0800ade4 <_calloc_r>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	fba1 5402 	umull	r5, r4, r1, r2
 800adea:	b934      	cbnz	r4, 800adfa <_calloc_r+0x16>
 800adec:	4629      	mov	r1, r5
 800adee:	f7ff f8f9 	bl	8009fe4 <_malloc_r>
 800adf2:	4606      	mov	r6, r0
 800adf4:	b928      	cbnz	r0, 800ae02 <_calloc_r+0x1e>
 800adf6:	4630      	mov	r0, r6
 800adf8:	bd70      	pop	{r4, r5, r6, pc}
 800adfa:	220c      	movs	r2, #12
 800adfc:	6002      	str	r2, [r0, #0]
 800adfe:	2600      	movs	r6, #0
 800ae00:	e7f9      	b.n	800adf6 <_calloc_r+0x12>
 800ae02:	462a      	mov	r2, r5
 800ae04:	4621      	mov	r1, r4
 800ae06:	f7fd fd6f 	bl	80088e8 <memset>
 800ae0a:	e7f4      	b.n	800adf6 <_calloc_r+0x12>

0800ae0c <_free_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4605      	mov	r5, r0
 800ae10:	2900      	cmp	r1, #0
 800ae12:	d041      	beq.n	800ae98 <_free_r+0x8c>
 800ae14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae18:	1f0c      	subs	r4, r1, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	bfb8      	it	lt
 800ae1e:	18e4      	addlt	r4, r4, r3
 800ae20:	f7ff fa1e 	bl	800a260 <__malloc_lock>
 800ae24:	4a1d      	ldr	r2, [pc, #116]	@ (800ae9c <_free_r+0x90>)
 800ae26:	6813      	ldr	r3, [r2, #0]
 800ae28:	b933      	cbnz	r3, 800ae38 <_free_r+0x2c>
 800ae2a:	6063      	str	r3, [r4, #4]
 800ae2c:	6014      	str	r4, [r2, #0]
 800ae2e:	4628      	mov	r0, r5
 800ae30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae34:	f7ff ba1a 	b.w	800a26c <__malloc_unlock>
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	d908      	bls.n	800ae4e <_free_r+0x42>
 800ae3c:	6820      	ldr	r0, [r4, #0]
 800ae3e:	1821      	adds	r1, r4, r0
 800ae40:	428b      	cmp	r3, r1
 800ae42:	bf01      	itttt	eq
 800ae44:	6819      	ldreq	r1, [r3, #0]
 800ae46:	685b      	ldreq	r3, [r3, #4]
 800ae48:	1809      	addeq	r1, r1, r0
 800ae4a:	6021      	streq	r1, [r4, #0]
 800ae4c:	e7ed      	b.n	800ae2a <_free_r+0x1e>
 800ae4e:	461a      	mov	r2, r3
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	b10b      	cbz	r3, 800ae58 <_free_r+0x4c>
 800ae54:	42a3      	cmp	r3, r4
 800ae56:	d9fa      	bls.n	800ae4e <_free_r+0x42>
 800ae58:	6811      	ldr	r1, [r2, #0]
 800ae5a:	1850      	adds	r0, r2, r1
 800ae5c:	42a0      	cmp	r0, r4
 800ae5e:	d10b      	bne.n	800ae78 <_free_r+0x6c>
 800ae60:	6820      	ldr	r0, [r4, #0]
 800ae62:	4401      	add	r1, r0
 800ae64:	1850      	adds	r0, r2, r1
 800ae66:	4283      	cmp	r3, r0
 800ae68:	6011      	str	r1, [r2, #0]
 800ae6a:	d1e0      	bne.n	800ae2e <_free_r+0x22>
 800ae6c:	6818      	ldr	r0, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	6053      	str	r3, [r2, #4]
 800ae72:	4408      	add	r0, r1
 800ae74:	6010      	str	r0, [r2, #0]
 800ae76:	e7da      	b.n	800ae2e <_free_r+0x22>
 800ae78:	d902      	bls.n	800ae80 <_free_r+0x74>
 800ae7a:	230c      	movs	r3, #12
 800ae7c:	602b      	str	r3, [r5, #0]
 800ae7e:	e7d6      	b.n	800ae2e <_free_r+0x22>
 800ae80:	6820      	ldr	r0, [r4, #0]
 800ae82:	1821      	adds	r1, r4, r0
 800ae84:	428b      	cmp	r3, r1
 800ae86:	bf04      	itt	eq
 800ae88:	6819      	ldreq	r1, [r3, #0]
 800ae8a:	685b      	ldreq	r3, [r3, #4]
 800ae8c:	6063      	str	r3, [r4, #4]
 800ae8e:	bf04      	itt	eq
 800ae90:	1809      	addeq	r1, r1, r0
 800ae92:	6021      	streq	r1, [r4, #0]
 800ae94:	6054      	str	r4, [r2, #4]
 800ae96:	e7ca      	b.n	800ae2e <_free_r+0x22>
 800ae98:	bd38      	pop	{r3, r4, r5, pc}
 800ae9a:	bf00      	nop
 800ae9c:	2000043c 	.word	0x2000043c

0800aea0 <_malloc_usable_size_r>:
 800aea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea4:	1f18      	subs	r0, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfbc      	itt	lt
 800aeaa:	580b      	ldrlt	r3, [r1, r0]
 800aeac:	18c0      	addlt	r0, r0, r3
 800aeae:	4770      	bx	lr

0800aeb0 <fiprintf>:
 800aeb0:	b40e      	push	{r1, r2, r3}
 800aeb2:	b503      	push	{r0, r1, lr}
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	ab03      	add	r3, sp, #12
 800aeb8:	4805      	ldr	r0, [pc, #20]	@ (800aed0 <fiprintf+0x20>)
 800aeba:	f853 2b04 	ldr.w	r2, [r3], #4
 800aebe:	6800      	ldr	r0, [r0, #0]
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	f000 f837 	bl	800af34 <_vfiprintf_r>
 800aec6:	b002      	add	sp, #8
 800aec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aecc:	b003      	add	sp, #12
 800aece:	4770      	bx	lr
 800aed0:	20000184 	.word	0x20000184

0800aed4 <abort>:
 800aed4:	b508      	push	{r3, lr}
 800aed6:	2006      	movs	r0, #6
 800aed8:	f000 fa62 	bl	800b3a0 <raise>
 800aedc:	2001      	movs	r0, #1
 800aede:	f7f6 fd0a 	bl	80018f6 <_exit>

0800aee2 <__sfputc_r>:
 800aee2:	6893      	ldr	r3, [r2, #8]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	b410      	push	{r4}
 800aeea:	6093      	str	r3, [r2, #8]
 800aeec:	da08      	bge.n	800af00 <__sfputc_r+0x1e>
 800aeee:	6994      	ldr	r4, [r2, #24]
 800aef0:	42a3      	cmp	r3, r4
 800aef2:	db01      	blt.n	800aef8 <__sfputc_r+0x16>
 800aef4:	290a      	cmp	r1, #10
 800aef6:	d103      	bne.n	800af00 <__sfputc_r+0x1e>
 800aef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aefc:	f000 b932 	b.w	800b164 <__swbuf_r>
 800af00:	6813      	ldr	r3, [r2, #0]
 800af02:	1c58      	adds	r0, r3, #1
 800af04:	6010      	str	r0, [r2, #0]
 800af06:	7019      	strb	r1, [r3, #0]
 800af08:	4608      	mov	r0, r1
 800af0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <__sfputs_r>:
 800af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	4614      	mov	r4, r2
 800af18:	18d5      	adds	r5, r2, r3
 800af1a:	42ac      	cmp	r4, r5
 800af1c:	d101      	bne.n	800af22 <__sfputs_r+0x12>
 800af1e:	2000      	movs	r0, #0
 800af20:	e007      	b.n	800af32 <__sfputs_r+0x22>
 800af22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af26:	463a      	mov	r2, r7
 800af28:	4630      	mov	r0, r6
 800af2a:	f7ff ffda 	bl	800aee2 <__sfputc_r>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	d1f3      	bne.n	800af1a <__sfputs_r+0xa>
 800af32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af34 <_vfiprintf_r>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	460d      	mov	r5, r1
 800af3a:	b09d      	sub	sp, #116	@ 0x74
 800af3c:	4614      	mov	r4, r2
 800af3e:	4698      	mov	r8, r3
 800af40:	4606      	mov	r6, r0
 800af42:	b118      	cbz	r0, 800af4c <_vfiprintf_r+0x18>
 800af44:	6a03      	ldr	r3, [r0, #32]
 800af46:	b90b      	cbnz	r3, 800af4c <_vfiprintf_r+0x18>
 800af48:	f7fc fe14 	bl	8007b74 <__sinit>
 800af4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af4e:	07d9      	lsls	r1, r3, #31
 800af50:	d405      	bmi.n	800af5e <_vfiprintf_r+0x2a>
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	059a      	lsls	r2, r3, #22
 800af56:	d402      	bmi.n	800af5e <_vfiprintf_r+0x2a>
 800af58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af5a:	f7fd fd0a 	bl	8008972 <__retarget_lock_acquire_recursive>
 800af5e:	89ab      	ldrh	r3, [r5, #12]
 800af60:	071b      	lsls	r3, r3, #28
 800af62:	d501      	bpl.n	800af68 <_vfiprintf_r+0x34>
 800af64:	692b      	ldr	r3, [r5, #16]
 800af66:	b99b      	cbnz	r3, 800af90 <_vfiprintf_r+0x5c>
 800af68:	4629      	mov	r1, r5
 800af6a:	4630      	mov	r0, r6
 800af6c:	f000 f938 	bl	800b1e0 <__swsetup_r>
 800af70:	b170      	cbz	r0, 800af90 <_vfiprintf_r+0x5c>
 800af72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af74:	07dc      	lsls	r4, r3, #31
 800af76:	d504      	bpl.n	800af82 <_vfiprintf_r+0x4e>
 800af78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af7c:	b01d      	add	sp, #116	@ 0x74
 800af7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af82:	89ab      	ldrh	r3, [r5, #12]
 800af84:	0598      	lsls	r0, r3, #22
 800af86:	d4f7      	bmi.n	800af78 <_vfiprintf_r+0x44>
 800af88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af8a:	f7fd fcf3 	bl	8008974 <__retarget_lock_release_recursive>
 800af8e:	e7f3      	b.n	800af78 <_vfiprintf_r+0x44>
 800af90:	2300      	movs	r3, #0
 800af92:	9309      	str	r3, [sp, #36]	@ 0x24
 800af94:	2320      	movs	r3, #32
 800af96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af9e:	2330      	movs	r3, #48	@ 0x30
 800afa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b150 <_vfiprintf_r+0x21c>
 800afa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afa8:	f04f 0901 	mov.w	r9, #1
 800afac:	4623      	mov	r3, r4
 800afae:	469a      	mov	sl, r3
 800afb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb4:	b10a      	cbz	r2, 800afba <_vfiprintf_r+0x86>
 800afb6:	2a25      	cmp	r2, #37	@ 0x25
 800afb8:	d1f9      	bne.n	800afae <_vfiprintf_r+0x7a>
 800afba:	ebba 0b04 	subs.w	fp, sl, r4
 800afbe:	d00b      	beq.n	800afd8 <_vfiprintf_r+0xa4>
 800afc0:	465b      	mov	r3, fp
 800afc2:	4622      	mov	r2, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7ff ffa2 	bl	800af10 <__sfputs_r>
 800afcc:	3001      	adds	r0, #1
 800afce:	f000 80a7 	beq.w	800b120 <_vfiprintf_r+0x1ec>
 800afd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd4:	445a      	add	r2, fp
 800afd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800afd8:	f89a 3000 	ldrb.w	r3, [sl]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 809f 	beq.w	800b120 <_vfiprintf_r+0x1ec>
 800afe2:	2300      	movs	r3, #0
 800afe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afec:	f10a 0a01 	add.w	sl, sl, #1
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	9307      	str	r3, [sp, #28]
 800aff4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aff8:	931a      	str	r3, [sp, #104]	@ 0x68
 800affa:	4654      	mov	r4, sl
 800affc:	2205      	movs	r2, #5
 800affe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b002:	4853      	ldr	r0, [pc, #332]	@ (800b150 <_vfiprintf_r+0x21c>)
 800b004:	f7f5 f8fc 	bl	8000200 <memchr>
 800b008:	9a04      	ldr	r2, [sp, #16]
 800b00a:	b9d8      	cbnz	r0, 800b044 <_vfiprintf_r+0x110>
 800b00c:	06d1      	lsls	r1, r2, #27
 800b00e:	bf44      	itt	mi
 800b010:	2320      	movmi	r3, #32
 800b012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b016:	0713      	lsls	r3, r2, #28
 800b018:	bf44      	itt	mi
 800b01a:	232b      	movmi	r3, #43	@ 0x2b
 800b01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b020:	f89a 3000 	ldrb.w	r3, [sl]
 800b024:	2b2a      	cmp	r3, #42	@ 0x2a
 800b026:	d015      	beq.n	800b054 <_vfiprintf_r+0x120>
 800b028:	9a07      	ldr	r2, [sp, #28]
 800b02a:	4654      	mov	r4, sl
 800b02c:	2000      	movs	r0, #0
 800b02e:	f04f 0c0a 	mov.w	ip, #10
 800b032:	4621      	mov	r1, r4
 800b034:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b038:	3b30      	subs	r3, #48	@ 0x30
 800b03a:	2b09      	cmp	r3, #9
 800b03c:	d94b      	bls.n	800b0d6 <_vfiprintf_r+0x1a2>
 800b03e:	b1b0      	cbz	r0, 800b06e <_vfiprintf_r+0x13a>
 800b040:	9207      	str	r2, [sp, #28]
 800b042:	e014      	b.n	800b06e <_vfiprintf_r+0x13a>
 800b044:	eba0 0308 	sub.w	r3, r0, r8
 800b048:	fa09 f303 	lsl.w	r3, r9, r3
 800b04c:	4313      	orrs	r3, r2
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	46a2      	mov	sl, r4
 800b052:	e7d2      	b.n	800affa <_vfiprintf_r+0xc6>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	1d19      	adds	r1, r3, #4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	9103      	str	r1, [sp, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bfbb      	ittet	lt
 800b060:	425b      	neglt	r3, r3
 800b062:	f042 0202 	orrlt.w	r2, r2, #2
 800b066:	9307      	strge	r3, [sp, #28]
 800b068:	9307      	strlt	r3, [sp, #28]
 800b06a:	bfb8      	it	lt
 800b06c:	9204      	strlt	r2, [sp, #16]
 800b06e:	7823      	ldrb	r3, [r4, #0]
 800b070:	2b2e      	cmp	r3, #46	@ 0x2e
 800b072:	d10a      	bne.n	800b08a <_vfiprintf_r+0x156>
 800b074:	7863      	ldrb	r3, [r4, #1]
 800b076:	2b2a      	cmp	r3, #42	@ 0x2a
 800b078:	d132      	bne.n	800b0e0 <_vfiprintf_r+0x1ac>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	1d1a      	adds	r2, r3, #4
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	9203      	str	r2, [sp, #12]
 800b082:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b086:	3402      	adds	r4, #2
 800b088:	9305      	str	r3, [sp, #20]
 800b08a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b160 <_vfiprintf_r+0x22c>
 800b08e:	7821      	ldrb	r1, [r4, #0]
 800b090:	2203      	movs	r2, #3
 800b092:	4650      	mov	r0, sl
 800b094:	f7f5 f8b4 	bl	8000200 <memchr>
 800b098:	b138      	cbz	r0, 800b0aa <_vfiprintf_r+0x176>
 800b09a:	9b04      	ldr	r3, [sp, #16]
 800b09c:	eba0 000a 	sub.w	r0, r0, sl
 800b0a0:	2240      	movs	r2, #64	@ 0x40
 800b0a2:	4082      	lsls	r2, r0
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	3401      	adds	r4, #1
 800b0a8:	9304      	str	r3, [sp, #16]
 800b0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ae:	4829      	ldr	r0, [pc, #164]	@ (800b154 <_vfiprintf_r+0x220>)
 800b0b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0b4:	2206      	movs	r2, #6
 800b0b6:	f7f5 f8a3 	bl	8000200 <memchr>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d03f      	beq.n	800b13e <_vfiprintf_r+0x20a>
 800b0be:	4b26      	ldr	r3, [pc, #152]	@ (800b158 <_vfiprintf_r+0x224>)
 800b0c0:	bb1b      	cbnz	r3, 800b10a <_vfiprintf_r+0x1d6>
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	3307      	adds	r3, #7
 800b0c6:	f023 0307 	bic.w	r3, r3, #7
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d0:	443b      	add	r3, r7
 800b0d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d4:	e76a      	b.n	800afac <_vfiprintf_r+0x78>
 800b0d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0da:	460c      	mov	r4, r1
 800b0dc:	2001      	movs	r0, #1
 800b0de:	e7a8      	b.n	800b032 <_vfiprintf_r+0xfe>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	3401      	adds	r4, #1
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	f04f 0c0a 	mov.w	ip, #10
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0f2:	3a30      	subs	r2, #48	@ 0x30
 800b0f4:	2a09      	cmp	r2, #9
 800b0f6:	d903      	bls.n	800b100 <_vfiprintf_r+0x1cc>
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0c6      	beq.n	800b08a <_vfiprintf_r+0x156>
 800b0fc:	9105      	str	r1, [sp, #20]
 800b0fe:	e7c4      	b.n	800b08a <_vfiprintf_r+0x156>
 800b100:	fb0c 2101 	mla	r1, ip, r1, r2
 800b104:	4604      	mov	r4, r0
 800b106:	2301      	movs	r3, #1
 800b108:	e7f0      	b.n	800b0ec <_vfiprintf_r+0x1b8>
 800b10a:	ab03      	add	r3, sp, #12
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	462a      	mov	r2, r5
 800b110:	4b12      	ldr	r3, [pc, #72]	@ (800b15c <_vfiprintf_r+0x228>)
 800b112:	a904      	add	r1, sp, #16
 800b114:	4630      	mov	r0, r6
 800b116:	f7fb febb 	bl	8006e90 <_printf_float>
 800b11a:	4607      	mov	r7, r0
 800b11c:	1c78      	adds	r0, r7, #1
 800b11e:	d1d6      	bne.n	800b0ce <_vfiprintf_r+0x19a>
 800b120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b122:	07d9      	lsls	r1, r3, #31
 800b124:	d405      	bmi.n	800b132 <_vfiprintf_r+0x1fe>
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	059a      	lsls	r2, r3, #22
 800b12a:	d402      	bmi.n	800b132 <_vfiprintf_r+0x1fe>
 800b12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b12e:	f7fd fc21 	bl	8008974 <__retarget_lock_release_recursive>
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	065b      	lsls	r3, r3, #25
 800b136:	f53f af1f 	bmi.w	800af78 <_vfiprintf_r+0x44>
 800b13a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b13c:	e71e      	b.n	800af7c <_vfiprintf_r+0x48>
 800b13e:	ab03      	add	r3, sp, #12
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	462a      	mov	r2, r5
 800b144:	4b05      	ldr	r3, [pc, #20]	@ (800b15c <_vfiprintf_r+0x228>)
 800b146:	a904      	add	r1, sp, #16
 800b148:	4630      	mov	r0, r6
 800b14a:	f7fc f939 	bl	80073c0 <_printf_i>
 800b14e:	e7e4      	b.n	800b11a <_vfiprintf_r+0x1e6>
 800b150:	0800b624 	.word	0x0800b624
 800b154:	0800b62e 	.word	0x0800b62e
 800b158:	08006e91 	.word	0x08006e91
 800b15c:	0800af11 	.word	0x0800af11
 800b160:	0800b62a 	.word	0x0800b62a

0800b164 <__swbuf_r>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	460e      	mov	r6, r1
 800b168:	4614      	mov	r4, r2
 800b16a:	4605      	mov	r5, r0
 800b16c:	b118      	cbz	r0, 800b176 <__swbuf_r+0x12>
 800b16e:	6a03      	ldr	r3, [r0, #32]
 800b170:	b90b      	cbnz	r3, 800b176 <__swbuf_r+0x12>
 800b172:	f7fc fcff 	bl	8007b74 <__sinit>
 800b176:	69a3      	ldr	r3, [r4, #24]
 800b178:	60a3      	str	r3, [r4, #8]
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	071a      	lsls	r2, r3, #28
 800b17e:	d501      	bpl.n	800b184 <__swbuf_r+0x20>
 800b180:	6923      	ldr	r3, [r4, #16]
 800b182:	b943      	cbnz	r3, 800b196 <__swbuf_r+0x32>
 800b184:	4621      	mov	r1, r4
 800b186:	4628      	mov	r0, r5
 800b188:	f000 f82a 	bl	800b1e0 <__swsetup_r>
 800b18c:	b118      	cbz	r0, 800b196 <__swbuf_r+0x32>
 800b18e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b192:	4638      	mov	r0, r7
 800b194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	6922      	ldr	r2, [r4, #16]
 800b19a:	1a98      	subs	r0, r3, r2
 800b19c:	6963      	ldr	r3, [r4, #20]
 800b19e:	b2f6      	uxtb	r6, r6
 800b1a0:	4283      	cmp	r3, r0
 800b1a2:	4637      	mov	r7, r6
 800b1a4:	dc05      	bgt.n	800b1b2 <__swbuf_r+0x4e>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	f7ff f831 	bl	800a210 <_fflush_r>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d1ed      	bne.n	800b18e <__swbuf_r+0x2a>
 800b1b2:	68a3      	ldr	r3, [r4, #8]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	60a3      	str	r3, [r4, #8]
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	6022      	str	r2, [r4, #0]
 800b1be:	701e      	strb	r6, [r3, #0]
 800b1c0:	6962      	ldr	r2, [r4, #20]
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d004      	beq.n	800b1d2 <__swbuf_r+0x6e>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	07db      	lsls	r3, r3, #31
 800b1cc:	d5e1      	bpl.n	800b192 <__swbuf_r+0x2e>
 800b1ce:	2e0a      	cmp	r6, #10
 800b1d0:	d1df      	bne.n	800b192 <__swbuf_r+0x2e>
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	f7ff f81b 	bl	800a210 <_fflush_r>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d0d9      	beq.n	800b192 <__swbuf_r+0x2e>
 800b1de:	e7d6      	b.n	800b18e <__swbuf_r+0x2a>

0800b1e0 <__swsetup_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4b29      	ldr	r3, [pc, #164]	@ (800b288 <__swsetup_r+0xa8>)
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	b118      	cbz	r0, 800b1f4 <__swsetup_r+0x14>
 800b1ec:	6a03      	ldr	r3, [r0, #32]
 800b1ee:	b90b      	cbnz	r3, 800b1f4 <__swsetup_r+0x14>
 800b1f0:	f7fc fcc0 	bl	8007b74 <__sinit>
 800b1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f8:	0719      	lsls	r1, r3, #28
 800b1fa:	d422      	bmi.n	800b242 <__swsetup_r+0x62>
 800b1fc:	06da      	lsls	r2, r3, #27
 800b1fe:	d407      	bmi.n	800b210 <__swsetup_r+0x30>
 800b200:	2209      	movs	r2, #9
 800b202:	602a      	str	r2, [r5, #0]
 800b204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b20e:	e033      	b.n	800b278 <__swsetup_r+0x98>
 800b210:	0758      	lsls	r0, r3, #29
 800b212:	d512      	bpl.n	800b23a <__swsetup_r+0x5a>
 800b214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b216:	b141      	cbz	r1, 800b22a <__swsetup_r+0x4a>
 800b218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b21c:	4299      	cmp	r1, r3
 800b21e:	d002      	beq.n	800b226 <__swsetup_r+0x46>
 800b220:	4628      	mov	r0, r5
 800b222:	f7ff fdf3 	bl	800ae0c <_free_r>
 800b226:	2300      	movs	r3, #0
 800b228:	6363      	str	r3, [r4, #52]	@ 0x34
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b230:	81a3      	strh	r3, [r4, #12]
 800b232:	2300      	movs	r3, #0
 800b234:	6063      	str	r3, [r4, #4]
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f043 0308 	orr.w	r3, r3, #8
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	b94b      	cbnz	r3, 800b25a <__swsetup_r+0x7a>
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b250:	d003      	beq.n	800b25a <__swsetup_r+0x7a>
 800b252:	4621      	mov	r1, r4
 800b254:	4628      	mov	r0, r5
 800b256:	f000 f83f 	bl	800b2d8 <__smakebuf_r>
 800b25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25e:	f013 0201 	ands.w	r2, r3, #1
 800b262:	d00a      	beq.n	800b27a <__swsetup_r+0x9a>
 800b264:	2200      	movs	r2, #0
 800b266:	60a2      	str	r2, [r4, #8]
 800b268:	6962      	ldr	r2, [r4, #20]
 800b26a:	4252      	negs	r2, r2
 800b26c:	61a2      	str	r2, [r4, #24]
 800b26e:	6922      	ldr	r2, [r4, #16]
 800b270:	b942      	cbnz	r2, 800b284 <__swsetup_r+0xa4>
 800b272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b276:	d1c5      	bne.n	800b204 <__swsetup_r+0x24>
 800b278:	bd38      	pop	{r3, r4, r5, pc}
 800b27a:	0799      	lsls	r1, r3, #30
 800b27c:	bf58      	it	pl
 800b27e:	6962      	ldrpl	r2, [r4, #20]
 800b280:	60a2      	str	r2, [r4, #8]
 800b282:	e7f4      	b.n	800b26e <__swsetup_r+0x8e>
 800b284:	2000      	movs	r0, #0
 800b286:	e7f7      	b.n	800b278 <__swsetup_r+0x98>
 800b288:	20000184 	.word	0x20000184

0800b28c <__swhatbuf_r>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	460c      	mov	r4, r1
 800b290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b294:	2900      	cmp	r1, #0
 800b296:	b096      	sub	sp, #88	@ 0x58
 800b298:	4615      	mov	r5, r2
 800b29a:	461e      	mov	r6, r3
 800b29c:	da0d      	bge.n	800b2ba <__swhatbuf_r+0x2e>
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2a4:	f04f 0100 	mov.w	r1, #0
 800b2a8:	bf14      	ite	ne
 800b2aa:	2340      	movne	r3, #64	@ 0x40
 800b2ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	6031      	str	r1, [r6, #0]
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	b016      	add	sp, #88	@ 0x58
 800b2b8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ba:	466a      	mov	r2, sp
 800b2bc:	f000 f89c 	bl	800b3f8 <_fstat_r>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	dbec      	blt.n	800b29e <__swhatbuf_r+0x12>
 800b2c4:	9901      	ldr	r1, [sp, #4]
 800b2c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2ce:	4259      	negs	r1, r3
 800b2d0:	4159      	adcs	r1, r3
 800b2d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2d6:	e7eb      	b.n	800b2b0 <__swhatbuf_r+0x24>

0800b2d8 <__smakebuf_r>:
 800b2d8:	898b      	ldrh	r3, [r1, #12]
 800b2da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2dc:	079d      	lsls	r5, r3, #30
 800b2de:	4606      	mov	r6, r0
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	d507      	bpl.n	800b2f4 <__smakebuf_r+0x1c>
 800b2e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	6123      	str	r3, [r4, #16]
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	6163      	str	r3, [r4, #20]
 800b2f0:	b003      	add	sp, #12
 800b2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f4:	ab01      	add	r3, sp, #4
 800b2f6:	466a      	mov	r2, sp
 800b2f8:	f7ff ffc8 	bl	800b28c <__swhatbuf_r>
 800b2fc:	9f00      	ldr	r7, [sp, #0]
 800b2fe:	4605      	mov	r5, r0
 800b300:	4639      	mov	r1, r7
 800b302:	4630      	mov	r0, r6
 800b304:	f7fe fe6e 	bl	8009fe4 <_malloc_r>
 800b308:	b948      	cbnz	r0, 800b31e <__smakebuf_r+0x46>
 800b30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b30e:	059a      	lsls	r2, r3, #22
 800b310:	d4ee      	bmi.n	800b2f0 <__smakebuf_r+0x18>
 800b312:	f023 0303 	bic.w	r3, r3, #3
 800b316:	f043 0302 	orr.w	r3, r3, #2
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	e7e2      	b.n	800b2e4 <__smakebuf_r+0xc>
 800b31e:	89a3      	ldrh	r3, [r4, #12]
 800b320:	6020      	str	r0, [r4, #0]
 800b322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b326:	81a3      	strh	r3, [r4, #12]
 800b328:	9b01      	ldr	r3, [sp, #4]
 800b32a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b32e:	b15b      	cbz	r3, 800b348 <__smakebuf_r+0x70>
 800b330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b334:	4630      	mov	r0, r6
 800b336:	f000 f83b 	bl	800b3b0 <_isatty_r>
 800b33a:	b128      	cbz	r0, 800b348 <__smakebuf_r+0x70>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	431d      	orrs	r5, r3
 800b34c:	81a5      	strh	r5, [r4, #12]
 800b34e:	e7cf      	b.n	800b2f0 <__smakebuf_r+0x18>

0800b350 <_raise_r>:
 800b350:	291f      	cmp	r1, #31
 800b352:	b538      	push	{r3, r4, r5, lr}
 800b354:	4605      	mov	r5, r0
 800b356:	460c      	mov	r4, r1
 800b358:	d904      	bls.n	800b364 <_raise_r+0x14>
 800b35a:	2316      	movs	r3, #22
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b366:	b112      	cbz	r2, 800b36e <_raise_r+0x1e>
 800b368:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b36c:	b94b      	cbnz	r3, 800b382 <_raise_r+0x32>
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 f840 	bl	800b3f4 <_getpid_r>
 800b374:	4622      	mov	r2, r4
 800b376:	4601      	mov	r1, r0
 800b378:	4628      	mov	r0, r5
 800b37a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b37e:	f000 b827 	b.w	800b3d0 <_kill_r>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d00a      	beq.n	800b39c <_raise_r+0x4c>
 800b386:	1c59      	adds	r1, r3, #1
 800b388:	d103      	bne.n	800b392 <_raise_r+0x42>
 800b38a:	2316      	movs	r3, #22
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	2001      	movs	r0, #1
 800b390:	e7e7      	b.n	800b362 <_raise_r+0x12>
 800b392:	2100      	movs	r1, #0
 800b394:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b398:	4620      	mov	r0, r4
 800b39a:	4798      	blx	r3
 800b39c:	2000      	movs	r0, #0
 800b39e:	e7e0      	b.n	800b362 <_raise_r+0x12>

0800b3a0 <raise>:
 800b3a0:	4b02      	ldr	r3, [pc, #8]	@ (800b3ac <raise+0xc>)
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	6818      	ldr	r0, [r3, #0]
 800b3a6:	f7ff bfd3 	b.w	800b350 <_raise_r>
 800b3aa:	bf00      	nop
 800b3ac:	20000184 	.word	0x20000184

0800b3b0 <_isatty_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d06      	ldr	r5, [pc, #24]	@ (800b3cc <_isatty_r+0x1c>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	f7f6 fafb 	bl	80019b6 <_isatty>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_isatty_r+0x1a>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_isatty_r+0x1a>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	20000440 	.word	0x20000440

0800b3d0 <_kill_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4d07      	ldr	r5, [pc, #28]	@ (800b3f0 <_kill_r+0x20>)
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	4611      	mov	r1, r2
 800b3dc:	602b      	str	r3, [r5, #0]
 800b3de:	f7f6 fa7a 	bl	80018d6 <_kill>
 800b3e2:	1c43      	adds	r3, r0, #1
 800b3e4:	d102      	bne.n	800b3ec <_kill_r+0x1c>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	b103      	cbz	r3, 800b3ec <_kill_r+0x1c>
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000440 	.word	0x20000440

0800b3f4 <_getpid_r>:
 800b3f4:	f7f6 ba67 	b.w	80018c6 <_getpid>

0800b3f8 <_fstat_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	@ (800b418 <_fstat_r+0x20>)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	f7f6 fac6 	bl	8001996 <_fstat>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d102      	bne.n	800b414 <_fstat_r+0x1c>
 800b40e:	682b      	ldr	r3, [r5, #0]
 800b410:	b103      	cbz	r3, 800b414 <_fstat_r+0x1c>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd38      	pop	{r3, r4, r5, pc}
 800b416:	bf00      	nop
 800b418:	20000440 	.word	0x20000440

0800b41c <_init>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	bf00      	nop
 800b420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b422:	bc08      	pop	{r3}
 800b424:	469e      	mov	lr, r3
 800b426:	4770      	bx	lr

0800b428 <_fini>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	bf00      	nop
 800b42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b42e:	bc08      	pop	{r3}
 800b430:	469e      	mov	lr, r3
 800b432:	4770      	bx	lr
