
lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004990  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b4c  08004b4c  00005b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b8c  08004b8c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b8c  08004b8c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b8c  08004b8c  00005b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b90  08004b90  00005b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08004ba0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08004ba0  00006094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1dd  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c17  00000000  00000000  00011219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00012e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f0  00000000  00000000  000138d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a968  00000000  00000000  000140c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2d0  00000000  00000000  0003ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109d04  00000000  00000000  00049cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001539fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  00153a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00156540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004b34 	.word	0x08004b34

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004b34 	.word	0x08004b34

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fb10 	bl	8000826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f843 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f92b 	bl	8000464 <MX_GPIO_Init>
  MX_ADC1_Init();
 800020e:	f000 f891 	bl	8000334 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int state = 0;  // keep track of state
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(USER_PB_GPIO_Port, USER_PB_Pin) == 0) {
 8000216:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800021a:	481b      	ldr	r0, [pc, #108]	@ (8000288 <main+0x8c>)
 800021c:	f002 ffb2 	bl	8003184 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d117      	bne.n	8000256 <main+0x5a>
		  HAL_Delay(50); // help with button debounce
 8000226:	2032      	movs	r0, #50	@ 0x32
 8000228:	f000 fb72 	bl	8000910 <HAL_Delay>
		  if (HAL_GPIO_ReadPin(USER_PB_GPIO_Port, USER_PB_Pin) == 0) {
 800022c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000230:	4815      	ldr	r0, [pc, #84]	@ (8000288 <main+0x8c>)
 8000232:	f002 ffa7 	bl	8003184 <HAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d10c      	bne.n	8000256 <main+0x5a>
			  state ^= 1; // XOR to switch between states
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	f083 0301 	eor.w	r3, r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
			  while (HAL_GPIO_ReadPin(USER_PB_GPIO_Port, USER_PB_Pin) == 0);
 8000244:	bf00      	nop
 8000246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024a:	480f      	ldr	r0, [pc, #60]	@ (8000288 <main+0x8c>)
 800024c:	f002 ff9a 	bl	8003184 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f7      	beq.n	8000246 <main+0x4a>
		  }
	  }

	  switch (state) {
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d003      	beq.n	8000264 <main+0x68>
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d006      	beq.n	8000270 <main+0x74>
 8000262:	e00b      	b.n	800027c <main+0x80>
		  case 0:
			  voltage = getVoltage(&hadc1);
 8000264:	4809      	ldr	r0, [pc, #36]	@ (800028c <main+0x90>)
 8000266:	f000 f953 	bl	8000510 <getVoltage>
 800026a:	ed87 0a01 	vstr	s0, [r7, #4]
			  break;
 800026e:	e005      	b.n	800027c <main+0x80>

		  case 1:
			  temperature = getTemperature(&hadc1);
 8000270:	4806      	ldr	r0, [pc, #24]	@ (800028c <main+0x90>)
 8000272:	f000 f98b 	bl	800058c <getTemperature>
 8000276:	ed87 0a02 	vstr	s0, [r7, #8]
			  break;
 800027a:	bf00      	nop
	  }
	  HAL_Delay(1000);
 800027c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000280:	f000 fb46 	bl	8000910 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(USER_PB_GPIO_Port, USER_PB_Pin) == 0) {
 8000284:	e7c7      	b.n	8000216 <main+0x1a>
 8000286:	bf00      	nop
 8000288:	48000800 	.word	0x48000800
 800028c:	20000028 	.word	0x20000028

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b096      	sub	sp, #88	@ 0x58
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2244      	movs	r2, #68	@ 0x44
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 fc1c 	bl	8004adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002b2:	2000      	movs	r0, #0
 80002b4:	f002 ffb6 	bl	8003224 <HAL_PWREx_ControlVoltageScaling>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002be:	f000 f921 	bl	8000504 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c2:	2310      	movs	r3, #16
 80002c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ce:	2360      	movs	r3, #96	@ 0x60
 80002d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002d6:	2301      	movs	r3, #1
 80002d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002da:	2301      	movs	r3, #1
 80002dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002de:	233c      	movs	r3, #60	@ 0x3c
 80002e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e2:	2302      	movs	r3, #2
 80002e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 f83a 	bl	800336c <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002fe:	f000 f901 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2303      	movs	r3, #3
 8000308:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	2105      	movs	r1, #5
 800031a:	4618      	mov	r0, r3
 800031c:	f003 fc40 	bl	8003ba0 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000326:	f000 f8ed 	bl	8000504 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3758      	adds	r7, #88	@ 0x58
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b094      	sub	sp, #80	@ 0x50
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]
 800034a:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2234      	movs	r2, #52	@ 0x34
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 fbc2 	bl	8004adc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000358:	4b3e      	ldr	r3, [pc, #248]	@ (8000454 <MX_ADC1_Init+0x120>)
 800035a:	4a3f      	ldr	r2, [pc, #252]	@ (8000458 <MX_ADC1_Init+0x124>)
 800035c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035e:	4b3d      	ldr	r3, [pc, #244]	@ (8000454 <MX_ADC1_Init+0x120>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000364:	4b3b      	ldr	r3, [pc, #236]	@ (8000454 <MX_ADC1_Init+0x120>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036a:	4b3a      	ldr	r3, [pc, #232]	@ (8000454 <MX_ADC1_Init+0x120>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000370:	4b38      	ldr	r3, [pc, #224]	@ (8000454 <MX_ADC1_Init+0x120>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	4b37      	ldr	r3, [pc, #220]	@ (8000454 <MX_ADC1_Init+0x120>)
 8000378:	2204      	movs	r2, #4
 800037a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b35      	ldr	r3, [pc, #212]	@ (8000454 <MX_ADC1_Init+0x120>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000382:	4b34      	ldr	r3, [pc, #208]	@ (8000454 <MX_ADC1_Init+0x120>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000388:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <MX_ADC1_Init+0x120>)
 800038a:	2201      	movs	r2, #1
 800038c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b31      	ldr	r3, [pc, #196]	@ (8000454 <MX_ADC1_Init+0x120>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000396:	4b2f      	ldr	r3, [pc, #188]	@ (8000454 <MX_ADC1_Init+0x120>)
 8000398:	2200      	movs	r2, #0
 800039a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039c:	4b2d      	ldr	r3, [pc, #180]	@ (8000454 <MX_ADC1_Init+0x120>)
 800039e:	2200      	movs	r2, #0
 80003a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <MX_ADC1_Init+0x120>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000454 <MX_ADC1_Init+0x120>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003b0:	4b28      	ldr	r3, [pc, #160]	@ (8000454 <MX_ADC1_Init+0x120>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b8:	4826      	ldr	r0, [pc, #152]	@ (8000454 <MX_ADC1_Init+0x120>)
 80003ba:	f000 fcf5 	bl	8000da8 <HAL_ADC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80003c4:	f000 f89e 	bl	8000504 <Error_Handler>
  }

  /** Disable Injected Queue
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc1);
 80003c8:	4822      	ldr	r0, [pc, #136]	@ (8000454 <MX_ADC1_Init+0x120>)
 80003ca:	f002 fc3b 	bl	8002c44 <HAL_ADCEx_DisableInjectedQueue>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80003ce:	4b23      	ldr	r3, [pc, #140]	@ (800045c <MX_ADC1_Init+0x128>)
 80003d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d2:	2306      	movs	r3, #6
 80003d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80003d6:	2306      	movs	r3, #6
 80003d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003da:	237f      	movs	r3, #127	@ 0x7f
 80003dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003de:	2304      	movs	r3, #4
 80003e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.Offset = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003ea:	4619      	mov	r1, r3
 80003ec:	4819      	ldr	r0, [pc, #100]	@ (8000454 <MX_ADC1_Init+0x120>)
 80003ee:	f000 ff53 	bl	8001298 <HAL_ADC_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80003f8:	f000 f884 	bl	8000504 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <MX_ADC1_Init+0x12c>)
 80003fe:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000400:	2308      	movs	r3, #8
 8000402:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000404:	2306      	movs	r3, #6
 8000406:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000408:	237f      	movs	r3, #127	@ 0x7f
 800040a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800040c:	2304      	movs	r3, #4
 800040e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000414:	2301      	movs	r3, #1
 8000416:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800042a:	2300      	movs	r3, #0
 800042c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 800042e:	2300      	movs	r3, #0
 8000430:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_ADC1_Init+0x120>)
 800043e:	f001 ff47 	bl	80022d0 <HAL_ADCEx_InjectedConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000448:	f000 f85c 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3750      	adds	r7, #80	@ 0x50
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000028 	.word	0x20000028
 8000458:	50040000 	.word	0x50040000
 800045c:	80000001 	.word	0x80000001
 8000460:	c7520000 	.word	0xc7520000

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b1f      	ldr	r3, [pc, #124]	@ (80004f8 <MX_GPIO_Init+0x94>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047e:	4a1e      	ldr	r2, [pc, #120]	@ (80004f8 <MX_GPIO_Init+0x94>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000486:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <MX_GPIO_Init+0x94>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <MX_GPIO_Init+0x94>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000496:	4a18      	ldr	r2, [pc, #96]	@ (80004f8 <MX_GPIO_Init+0x94>)
 8000498:	f043 0302 	orr.w	r3, r3, #2
 800049c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049e:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <MX_GPIO_Init+0x94>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	f003 0302 	and.w	r3, r3, #2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004b0:	4812      	ldr	r0, [pc, #72]	@ (80004fc <MX_GPIO_Init+0x98>)
 80004b2:	f002 fe7f 	bl	80031b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 80004b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	4619      	mov	r1, r3
 80004cc:	480c      	ldr	r0, [pc, #48]	@ (8000500 <MX_GPIO_Init+0x9c>)
 80004ce:	f002 fcc7 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80004d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4619      	mov	r1, r3
 80004ea:	4804      	ldr	r0, [pc, #16]	@ (80004fc <MX_GPIO_Init+0x98>)
 80004ec:	f002 fcb8 	bl	8002e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000400 	.word	0x48000400
 8000500:	48000800 	.word	0x48000800

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <getVoltage>:

#define VREFINT_ADDR  ((uint16_t*)0x1FFF75AA)
#define TS_CAL1_ADDR      ((uint16_t*)0x1FFF75A8) // 30°C
#define TS_CAL2_ADDR      ((uint16_t*)0x1FFF75CA) // 130°C

float getVoltage(ADC_HandleTypeDef *hadc) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    uint32_t adc_value;
    uint16_t vrefint_cal = *VREFINT_ADDR;
 8000518:	4b1b      	ldr	r3, [pc, #108]	@ (8000588 <getVoltage+0x78>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	82fb      	strh	r3, [r7, #22]

    if (HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED) != HAL_OK) {
 800051e:	217f      	movs	r1, #127	@ 0x7f
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f001 fdcb 	bl	80020bc <HAL_ADCEx_Calibration_Start>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <getVoltage+0x20>
      Error_Handler();
 800052c:	f7ff ffea 	bl	8000504 <Error_Handler>
    }

    HAL_ADC_Start(hadc);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 fd7f 	bl	8001034 <HAL_ADC_Start>
    HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f000 f9ea 	bl	8000910 <HAL_Delay>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 800053c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 fe0d 	bl	8001160 <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(hadc);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 fe99 	bl	800127e <HAL_ADC_GetValue>
 800054c:	6138      	str	r0, [r7, #16]
    HAL_ADC_Stop(hadc);
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 fdd3 	bl	80010fa <HAL_ADC_Stop>

    float vRefPlus = (3.0f * vrefint_cal) / adc_value;
 8000554:	8afb      	ldrh	r3, [r7, #22]
 8000556:	ee07 3a90 	vmov	s15, r3
 800055a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800055e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000562:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	ee07 3a90 	vmov	s15, r3
 800056c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000574:	edc7 7a03 	vstr	s15, [r7, #12]

    return vRefPlus;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	ee07 3a90 	vmov	s15, r3
}
 800057e:	eeb0 0a67 	vmov.f32	s0, s15
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	1fff75aa 	.word	0x1fff75aa

0800058c <getTemperature>:

float getTemperature(ADC_HandleTypeDef *hadc) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    uint32_t adc_value;
    uint16_t ts_cal1 = *TS_CAL1_ADDR;  // 30°C
 8000594:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <getTemperature+0x9c>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	83fb      	strh	r3, [r7, #30]
    uint16_t ts_cal2 = *TS_CAL2_ADDR;  // 130°C
 800059a:	4b24      	ldr	r3, [pc, #144]	@ (800062c <getTemperature+0xa0>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	83bb      	strh	r3, [r7, #28]

    // Read value from injected channel (which is responsible for TEMP)
    HAL_ADCEx_InjectedStart(hadc);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f001 fdeb 	bl	800217c <HAL_ADCEx_InjectedStart>
    HAL_Delay(1);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 f9b2 	bl	8000910 <HAL_Delay>
    adc_value = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 80005ac:	2108      	movs	r1, #8
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fe56 	bl	8002260 <HAL_ADCEx_InjectedGetValue>
 80005b4:	61b8      	str	r0, [r7, #24]

    float vRef = getVoltage(hadc);  // Read actual VREF+
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff ffaa 	bl	8000510 <getVoltage>
 80005bc:	ed87 0a05 	vstr	s0, [r7, #20]
    float adj_adc_value = adc_value * (vRef / 3.0f);
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	ee07 3a90 	vmov	s15, r3
 80005c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80005ce:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 80005d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80005d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005da:	edc7 7a04 	vstr	s15, [r7, #16]
    float temperature = ((100.0f / (float)(ts_cal2 - ts_cal1)) *
 80005de:	8bba      	ldrh	r2, [r7, #28]
 80005e0:	8bfb      	ldrh	r3, [r7, #30]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ec:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000630 <getTemperature+0xa4>
 80005f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                         (adj_adc_value - ts_cal1)) + 30.0f;
 80005f4:	8bfb      	ldrh	r3, [r7, #30]
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	edd7 6a04 	vldr	s13, [r7, #16]
 8000602:	ee76 7ae7 	vsub.f32	s15, s13, s15
    float temperature = ((100.0f / (float)(ts_cal2 - ts_cal1)) *
 8000606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800060a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800060e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000612:	edc7 7a03 	vstr	s15, [r7, #12]
    return temperature;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	ee07 3a90 	vmov	s15, r3
}
 800061c:	eeb0 0a67 	vmov.f32	s0, s15
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	1fff75a8 	.word	0x1fff75a8
 800062c:	1fff75ca 	.word	0x1fff75ca
 8000630:	42c80000 	.word	0x42c80000

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <HAL_MspInit+0x44>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <HAL_MspInit+0x44>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6613      	str	r3, [r2, #96]	@ 0x60
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <HAL_MspInit+0x44>)
 8000648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <HAL_MspInit+0x44>)
 8000654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <HAL_MspInit+0x44>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065c:	6593      	str	r3, [r2, #88]	@ 0x58
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_MspInit+0x44>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0ae      	sub	sp, #184	@ 0xb8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2294      	movs	r2, #148	@ 0x94
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f004 fa1d 	bl	8004adc <memset>
  if(hadc->Instance==ADC1)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a27      	ldr	r2, [pc, #156]	@ (8000744 <HAL_ADC_MspInit+0xc8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d146      	bne.n	800073a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006c2:	2318      	movs	r3, #24
 80006c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fce5 	bl	80040ac <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006e8:	f7ff ff0c 	bl	8000504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <HAL_ADC_MspInit+0xcc>)
 80006f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <HAL_ADC_MspInit+0xcc>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	4a0f      	ldr	r2, [pc, #60]	@ (8000748 <HAL_ADC_MspInit+0xcc>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000710:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <HAL_ADC_MspInit+0xcc>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071c:	2301      	movs	r3, #1
 800071e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000722:	230b      	movs	r3, #11
 8000724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	@ (800074c <HAL_ADC_MspInit+0xd0>)
 8000736:	f002 fb93 	bl	8002e60 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800073a:	bf00      	nop
 800073c:	37b8      	adds	r7, #184	@ 0xb8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	50040000 	.word	0x50040000
 8000748:	40021000 	.word	0x40021000
 800074c:	48000800 	.word	0x48000800

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <MemManage_Handler+0x4>

08000768 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <UsageFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f893 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <SystemInit+0x20>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ba:	4a05      	ldr	r2, [pc, #20]	@ (80007d0 <SystemInit+0x20>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800080c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff ffea 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f004 f973 	bl	8004aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000806:	f7ff fcf9 	bl	80001fc <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800080c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000818:	08004b94 	.word	0x08004b94
  ldr r2, =_sbss
 800081c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000820:	20000094 	.word	0x20000094

08000824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_IRQHandler>

08000826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f002 fae1 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f80e 	bl	8000858 <HAL_InitTick>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	e001      	b.n	800084c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000848:	f7ff fef4 	bl	8000634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <HAL_InitTick+0x6c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d023      	beq.n	80008b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800086c:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <HAL_InitTick+0x70>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_InitTick+0x6c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fadf 	bl	8002e46 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10f      	bne.n	80008ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d809      	bhi.n	80008a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800089c:	f002 fab7 	bl	8002e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a0:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <HAL_InitTick+0x74>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e004      	b.n	80008b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	e001      	b.n	80008b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_IncTick+0x20>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_IncTick+0x24>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <HAL_IncTick+0x24>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000090 	.word	0x20000090

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_GetTick+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000090 	.word	0x20000090

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff ffee 	bl	80008f8 <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffde 	bl	80008f8 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008

08000958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	431a      	orrs	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	609a      	str	r2, [r3, #8]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	431a      	orrs	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	609a      	str	r2, [r3, #8]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3360      	adds	r3, #96	@ 0x60
 80009d2:	461a      	mov	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <LL_ADC_SetOffset+0x44>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	4313      	orrs	r3, r2
 80009f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80009f8:	bf00      	nop
 80009fa:	371c      	adds	r7, #28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	03fff000 	.word	0x03fff000

08000a08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3360      	adds	r3, #96	@ 0x60
 8000a16:	461a      	mov	r2, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3360      	adds	r3, #96	@ 0x60
 8000a44:	461a      	mov	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a5e:	bf00      	nop
 8000a60:	371c      	adds	r7, #28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	615a      	str	r2, [r3, #20]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b087      	sub	sp, #28
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3330      	adds	r3, #48	@ 0x30
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	4413      	add	r3, r2
 8000ad4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	f003 031f 	and.w	r3, r3, #31
 8000ae0:	211f      	movs	r1, #31
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	401a      	ands	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0e9b      	lsrs	r3, r3, #26
 8000aee:	f003 011f 	and.w	r1, r3, #31
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	431a      	orrs	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b02:	bf00      	nop
 8000b04:	371c      	adds	r7, #28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b087      	sub	sp, #28
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3314      	adds	r3, #20
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	0e5b      	lsrs	r3, r3, #25
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	4413      	add	r3, r2
 8000b2c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	0d1b      	lsrs	r3, r3, #20
 8000b36:	f003 031f 	and.w	r3, r3, #31
 8000b3a:	2107      	movs	r1, #7
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	401a      	ands	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	0d1b      	lsrs	r3, r3, #20
 8000b48:	f003 031f 	and.w	r3, r3, #31
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	431a      	orrs	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b58:	bf00      	nop
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	401a      	ands	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0318 	and.w	r3, r3, #24
 8000b86:	4908      	ldr	r1, [pc, #32]	@ (8000ba8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b88:	40d9      	lsrs	r1, r3
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b92:	431a      	orrs	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	0007ffff 	.word	0x0007ffff

08000bac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	6093      	str	r3, [r2, #8]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000be4:	d101      	bne.n	8000bea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c34:	d101      	bne.n	8000c3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c5c:	f043 0201 	orr.w	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c84:	f043 0202 	orr.w	r2, r3, #2
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <LL_ADC_IsEnabled+0x18>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <LL_ADC_IsEnabled+0x1a>
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d101      	bne.n	8000cd6 <LL_ADC_IsDisableOngoing+0x18>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <LL_ADC_IsDisableOngoing+0x1a>
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cf8:	f043 0204 	orr.w	r2, r3, #4
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d20:	f043 0210 	orr.w	r2, r3, #16
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d101      	bne.n	8000d4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d6e:	f043 0220 	orr.w	r2, r3, #32
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d101      	bne.n	8000d9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e129      	b.n	8001016 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d109      	bne.n	8000de4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fc53 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fef1 	bl	8000bd0 <LL_ADC_IsDeepPowerDownEnabled>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fed7 	bl	8000bac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff0c 	bl	8000c20 <LL_ADC_IsInternalRegulatorEnabled>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d115      	bne.n	8000e3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fef0 	bl	8000bf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e18:	4b81      	ldr	r3, [pc, #516]	@ (8001020 <HAL_ADC_Init+0x278>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	099b      	lsrs	r3, r3, #6
 8000e1e:	4a81      	ldr	r2, [pc, #516]	@ (8001024 <HAL_ADC_Init+0x27c>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	099b      	lsrs	r3, r3, #6
 8000e26:	3301      	adds	r3, #1
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e2c:	e002      	b.n	8000e34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff feee 	bl	8000c20 <LL_ADC_IsInternalRegulatorEnabled>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10d      	bne.n	8000e66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4e:	f043 0210 	orr.w	r2, r3, #16
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff62 	bl	8000d34 <LL_ADC_REG_IsConversionOngoing>
 8000e70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 80c2 	bne.w	8001004 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 80be 	bne.w	8001004 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e90:	f043 0202 	orr.w	r2, r3, #2
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fefb 	bl	8000c98 <LL_ADC_IsEnabled>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10b      	bne.n	8000ec0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ea8:	485f      	ldr	r0, [pc, #380]	@ (8001028 <HAL_ADC_Init+0x280>)
 8000eaa:	f7ff fef5 	bl	8000c98 <LL_ADC_IsEnabled>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	485c      	ldr	r0, [pc, #368]	@ (800102c <HAL_ADC_Init+0x284>)
 8000ebc:	f7ff fd4c 	bl	8000958 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7e5b      	ldrb	r3, [r3, #25]
 8000ec4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000eca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000ed0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000ed6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ede:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d106      	bne.n	8000efc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	045b      	lsls	r3, r3, #17
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	4b44      	ldr	r3, [pc, #272]	@ (8001030 <HAL_ADC_Init+0x288>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff26 	bl	8000d82 <LL_ADC_INJ_IsConversionOngoing>
 8000f36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d140      	bne.n	8000fc0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d13d      	bne.n	8000fc0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7e1b      	ldrb	r3, [r3, #24]
 8000f4c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f4e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f66:	f023 0306 	bic.w	r3, r3, #6
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	430b      	orrs	r3, r1
 8000f72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d118      	bne.n	8000fb0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f88:	f023 0304 	bic.w	r3, r3, #4
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000f94:	4311      	orrs	r1, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000f9a:	4311      	orrs	r1, r2
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0201 	orr.w	r2, r2, #1
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	e007      	b.n	8000fc0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10c      	bne.n	8000fe2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f023 010f 	bic.w	r1, r3, #15
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fe0:	e007      	b.n	8000ff2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 020f 	bic.w	r2, r2, #15
 8000ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	f023 0303 	bic.w	r3, r3, #3
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	659a      	str	r2, [r3, #88]	@ 0x58
 8001002:	e007      	b.n	8001014 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	f043 0210 	orr.w	r2, r3, #16
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001014:	7ffb      	ldrb	r3, [r7, #31]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	053e2d63 	.word	0x053e2d63
 8001028:	50040000 	.word	0x50040000
 800102c:	50040300 	.word	0x50040300
 8001030:	fff0c007 	.word	0xfff0c007

08001034 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fe77 	bl	8000d34 <LL_ADC_REG_IsConversionOngoing>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d14f      	bne.n	80010ec <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_ADC_Start+0x26>
 8001056:	2302      	movs	r3, #2
 8001058:	e04b      	b.n	80010f2 <HAL_ADC_Start+0xbe>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fdd0 	bl	8001c08 <ADC_Enable>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d137      	bne.n	80010e2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800108e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001092:	d106      	bne.n	80010a2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001098:	f023 0206 	bic.w	r2, r3, #6
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010a0:	e002      	b.n	80010a8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	221c      	movs	r2, #28
 80010ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d007      	beq.n	80010d6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe02 	bl	8000ce4 <LL_ADC_REG_StartConversion>
 80010e0:	e006      	b.n	80010f0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80010ea:	e001      	b.n	80010f0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010ec:	2302      	movs	r3, #2
 80010ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_ADC_Stop+0x16>
 800110c:	2302      	movs	r3, #2
 800110e:	e023      	b.n	8001158 <HAL_ADC_Stop+0x5e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001118:	2103      	movs	r1, #3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fcb8 	bl	8001a90 <ADC_ConversionStop>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d111      	bne.n	800114e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fdf2 	bl	8001d14 <ADC_Disable>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d102      	bne.n	8001178 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001172:	2308      	movs	r3, #8
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e010      	b.n	800119a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118a:	f043 0220 	orr.w	r2, r3, #32
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e06f      	b.n	8001276 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001196:	2304      	movs	r3, #4
 8001198:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800119a:	f7ff fbad 	bl	80008f8 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011a0:	e021      	b.n	80011e6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011a8:	d01d      	beq.n	80011e6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80011aa:	f7ff fba5 	bl	80008f8 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d302      	bcc.n	80011c0 <HAL_ADC_PollForConversion+0x60>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d112      	bne.n	80011e6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10b      	bne.n	80011e6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	f043 0204 	orr.w	r2, r3, #4
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e047      	b.n	8001276 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0d6      	beq.n	80011a2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fc43 	bl	8000a90 <LL_ADC_REG_IsTriggerSourceSWStart>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01c      	beq.n	800124a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7e5b      	ldrb	r3, [r3, #25]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d118      	bne.n	800124a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b08      	cmp	r3, #8
 8001224:	d111      	bne.n	800124a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b08      	cmp	r3, #8
 8001256:	d104      	bne.n	8001262 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2208      	movs	r2, #8
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e008      	b.n	8001274 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d103      	bne.n	8001274 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	220c      	movs	r2, #12
 8001272:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0b6      	sub	sp, #216	@ 0xd8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x22>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e3d5      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x7ce>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd34 	bl	8000d34 <LL_ADC_REG_IsConversionOngoing>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 83ba 	bne.w	8001a48 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d824      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	3b02      	subs	r3, #2
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d81b      	bhi.n	8001326 <HAL_ADC_ConfigChannel+0x8e>
 80012ee:	a201      	add	r2, pc, #4	@ (adr r2, 80012f4 <HAL_ADC_ConfigChannel+0x5c>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001305 	.word	0x08001305
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001315 	.word	0x08001315
 8001300:	0800131d 	.word	0x0800131d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001304:	230c      	movs	r3, #12
 8001306:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800130a:	e010      	b.n	800132e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800130c:	2312      	movs	r3, #18
 800130e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001312:	e00c      	b.n	800132e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001314:	2318      	movs	r3, #24
 8001316:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800131a:	e008      	b.n	800132e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800131c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001324:	e003      	b.n	800132e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001326:	2306      	movs	r3, #6
 8001328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800132c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800133c:	f7ff fbbb 	bl	8000ab6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fcf5 	bl	8000d34 <LL_ADC_REG_IsConversionOngoing>
 800134a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd15 	bl	8000d82 <LL_ADC_INJ_IsConversionOngoing>
 8001358:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800135c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 81bf 	bne.w	80016e4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800136a:	2b00      	cmp	r3, #0
 800136c:	f040 81ba 	bne.w	80016e4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001378:	d10f      	bne.n	800139a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fbc2 	bl	8000b0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb69 	bl	8000a6a <LL_ADC_SetSamplingTimeCommonConfig>
 8001398:	e00e      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f7ff fbb1 	bl	8000b0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb59 	bl	8000a6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d00a      	beq.n	80013f0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6919      	ldr	r1, [r3, #16]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80013ea:	f7ff fae9 	bl	80009c0 <LL_ADC_SetOffset>
 80013ee:	e179      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb06 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10a      	bne.n	800141c <HAL_ADC_ConfigChannel+0x184>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fafb 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	0e9b      	lsrs	r3, r3, #26
 8001416:	f003 021f 	and.w	r2, r3, #31
 800141a:	e01e      	b.n	800145a <HAL_ADC_ConfigChannel+0x1c2>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff faf0 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800143a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800143e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800144a:	2320      	movs	r3, #32
 800144c:	e004      	b.n	8001458 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800144e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001462:	2b00      	cmp	r3, #0
 8001464:	d105      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x1da>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0e9b      	lsrs	r3, r3, #26
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	e018      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x20c>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800147e:	fa93 f3a3 	rbit	r3, r3
 8001482:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800148a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800148e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001496:	2320      	movs	r3, #32
 8001498:	e004      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800149a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fabf 	bl	8000a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff faa3 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10a      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x24a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fa98 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	0e9b      	lsrs	r3, r3, #26
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	e01e      	b.n	8001520 <HAL_ADC_ConfigChannel+0x288>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fa8d 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001500:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001510:	2320      	movs	r3, #32
 8001512:	e004      	b.n	800151e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x2a0>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0e9b      	lsrs	r3, r3, #26
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	e018      	b.n	800156a <HAL_ADC_ConfigChannel+0x2d2>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800154c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800155c:	2320      	movs	r3, #32
 800155e:	e004      	b.n	800156a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800156a:	429a      	cmp	r2, r3
 800156c:	d106      	bne.n	800157c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fa5c 	bl	8000a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fa40 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10a      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x310>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2102      	movs	r1, #2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fa35 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	0e9b      	lsrs	r3, r3, #26
 80015a2:	f003 021f 	and.w	r2, r3, #31
 80015a6:	e01e      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x34e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2102      	movs	r1, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fa2a 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80015c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80015ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80015d6:	2320      	movs	r3, #32
 80015d8:	e004      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80015da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d105      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x366>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0e9b      	lsrs	r3, r3, #26
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	e014      	b.n	8001628 <HAL_ADC_ConfigChannel+0x390>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800160c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800160e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001612:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800161a:	2320      	movs	r3, #32
 800161c:	e004      	b.n	8001628 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800161e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001628:	429a      	cmp	r2, r3
 800162a:	d106      	bne.n	800163a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff f9fd 	bl	8000a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2103      	movs	r1, #3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f9e1 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x3ce>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2103      	movs	r1, #3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f9d6 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	0e9b      	lsrs	r3, r3, #26
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	e017      	b.n	8001696 <HAL_ADC_ConfigChannel+0x3fe>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2103      	movs	r1, #3
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f9cb 	bl	8000a08 <LL_ADC_GetOffsetChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800167e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001680:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001688:	2320      	movs	r3, #32
 800168a:	e003      	b.n	8001694 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800168c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x416>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0e9b      	lsrs	r3, r3, #26
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	e011      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x43a>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80016bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016be:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80016c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80016c6:	2320      	movs	r3, #32
 80016c8:	e003      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80016ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d106      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	2103      	movs	r1, #3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f9a8 	bl	8000a34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fad5 	bl	8000c98 <LL_ADC_IsEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 813f 	bne.w	8001974 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	461a      	mov	r2, r3
 8001704:	f7ff fa2e 	bl	8000b64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a8e      	ldr	r2, [pc, #568]	@ (8001948 <HAL_ADC_ConfigChannel+0x6b0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	f040 8130 	bne.w	8001974 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10b      	bne.n	800173c <HAL_ADC_ConfigChannel+0x4a4>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0e9b      	lsrs	r3, r3, #26
 800172a:	3301      	adds	r3, #1
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2b09      	cmp	r3, #9
 8001732:	bf94      	ite	ls
 8001734:	2301      	movls	r3, #1
 8001736:	2300      	movhi	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e019      	b.n	8001770 <HAL_ADC_ConfigChannel+0x4d8>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800174a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800174c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800174e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001754:	2320      	movs	r3, #32
 8001756:	e003      	b.n	8001760 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3301      	adds	r3, #1
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2b09      	cmp	r3, #9
 8001768:	bf94      	ite	ls
 800176a:	2301      	movls	r3, #1
 800176c:	2300      	movhi	r3, #0
 800176e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001770:	2b00      	cmp	r3, #0
 8001772:	d079      	beq.n	8001868 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x4f8>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0e9b      	lsrs	r3, r3, #26
 8001786:	3301      	adds	r3, #1
 8001788:	069b      	lsls	r3, r3, #26
 800178a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800178e:	e015      	b.n	80017bc <HAL_ADC_ConfigChannel+0x524>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800179e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80017a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80017a8:	2320      	movs	r3, #32
 80017aa:	e003      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80017ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	069b      	lsls	r3, r3, #26
 80017b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x544>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0e9b      	lsrs	r3, r3, #26
 80017ce:	3301      	adds	r3, #1
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	e017      	b.n	800180c <HAL_ADC_ConfigChannel+0x574>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80017ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80017ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80017f4:	2320      	movs	r3, #32
 80017f6:	e003      	b.n	8001800 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80017f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	ea42 0103 	orr.w	r1, r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10a      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x59a>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0e9b      	lsrs	r3, r3, #26
 8001822:	3301      	adds	r3, #1
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	051b      	lsls	r3, r3, #20
 8001830:	e018      	b.n	8001864 <HAL_ADC_ConfigChannel+0x5cc>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800184a:	2320      	movs	r3, #32
 800184c:	e003      	b.n	8001856 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	3301      	adds	r3, #1
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001864:	430b      	orrs	r3, r1
 8001866:	e080      	b.n	800196a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x5ec>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0e9b      	lsrs	r3, r3, #26
 800187a:	3301      	adds	r3, #1
 800187c:	069b      	lsls	r3, r3, #26
 800187e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001882:	e015      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x618>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800189c:	2320      	movs	r3, #32
 800189e:	e003      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80018a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	069b      	lsls	r3, r3, #26
 80018ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x638>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0e9b      	lsrs	r3, r3, #26
 80018c2:	3301      	adds	r3, #1
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	e017      	b.n	8001900 <HAL_ADC_ConfigChannel+0x668>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	61bb      	str	r3, [r7, #24]
  return result;
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e003      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2101      	movs	r1, #1
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	ea42 0103 	orr.w	r1, r2, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10d      	bne.n	800192c <HAL_ADC_ConfigChannel+0x694>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	3301      	adds	r3, #1
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	3b1e      	subs	r3, #30
 8001924:	051b      	lsls	r3, r3, #20
 8001926:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800192a:	e01d      	b.n	8001968 <HAL_ADC_ConfigChannel+0x6d0>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	60fb      	str	r3, [r7, #12]
  return result;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001944:	2320      	movs	r3, #32
 8001946:	e005      	b.n	8001954 <HAL_ADC_ConfigChannel+0x6bc>
 8001948:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	3301      	adds	r3, #1
 8001956:	f003 021f 	and.w	r2, r3, #31
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	3b1e      	subs	r3, #30
 8001962:	051b      	lsls	r3, r3, #20
 8001964:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001968:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f8cd 	bl	8000b0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <HAL_ADC_ConfigChannel+0x7d8>)
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d06c      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001980:	483c      	ldr	r0, [pc, #240]	@ (8001a74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001982:	f7ff f80f 	bl	80009a4 <LL_ADC_GetCommonPathInternalCh>
 8001986:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a78 <HAL_ADC_ConfigChannel+0x7e0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d127      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001994:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d121      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a35      	ldr	r2, [pc, #212]	@ (8001a7c <HAL_ADC_ConfigChannel+0x7e4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d157      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019b2:	4619      	mov	r1, r3
 80019b4:	482f      	ldr	r0, [pc, #188]	@ (8001a74 <HAL_ADC_ConfigChannel+0x7dc>)
 80019b6:	f7fe ffe2 	bl	800097e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019ba:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <HAL_ADC_ConfigChannel+0x7e8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	4a30      	ldr	r2, [pc, #192]	@ (8001a84 <HAL_ADC_ConfigChannel+0x7ec>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019d4:	e002      	b.n	80019dc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019e2:	e03a      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a27      	ldr	r2, [pc, #156]	@ (8001a88 <HAL_ADC_ConfigChannel+0x7f0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d113      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10d      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d12a      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4819      	ldr	r0, [pc, #100]	@ (8001a74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a10:	f7fe ffb5 	bl	800097e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a14:	e021      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a8c <HAL_ADC_ConfigChannel+0x7f4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d11c      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d116      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d111      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	@ (8001a74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a42:	f7fe ff9c 	bl	800097e <LL_ADC_SetCommonPathInternalCh>
 8001a46:	e008      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	f043 0220 	orr.w	r2, r3, #32
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001a62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	37d8      	adds	r7, #216	@ 0xd8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	80080000 	.word	0x80080000
 8001a74:	50040300 	.word	0x50040300
 8001a78:	c7520000 	.word	0xc7520000
 8001a7c:	50040000 	.word	0x50040000
 8001a80:	20000000 	.word	0x20000000
 8001a84:	053e2d63 	.word	0x053e2d63
 8001a88:	cb840000 	.word	0xcb840000
 8001a8c:	80000001 	.word	0x80000001

08001a90 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f944 	bl	8000d34 <LL_ADC_REG_IsConversionOngoing>
 8001aac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f965 	bl	8000d82 <LL_ADC_INJ_IsConversionOngoing>
 8001ab8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8098 	beq.w	8001bf8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d02a      	beq.n	8001b2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7e5b      	ldrb	r3, [r3, #25]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d126      	bne.n	8001b2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e1b      	ldrb	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d122      	bne.n	8001b2c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001aea:	e014      	b.n	8001b16 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4a45      	ldr	r2, [pc, #276]	@ (8001c04 <ADC_ConversionStop+0x174>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d90d      	bls.n	8001b10 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af8:	f043 0210 	orr.w	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e074      	b.n	8001bfa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3301      	adds	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b20:	2b40      	cmp	r3, #64	@ 0x40
 8001b22:	d1e3      	bne.n	8001aec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2240      	movs	r2, #64	@ 0x40
 8001b2a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d014      	beq.n	8001b5c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f8fc 	bl	8000d34 <LL_ADC_REG_IsConversionOngoing>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f8b9 	bl	8000cbe <LL_ADC_IsDisableOngoing>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f8d8 	bl	8000d0c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d014      	beq.n	8001b8c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f90b 	bl	8000d82 <LL_ADC_INJ_IsConversionOngoing>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8a1 	bl	8000cbe <LL_ADC_IsDisableOngoing>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d104      	bne.n	8001b8c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f8e7 	bl	8000d5a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d005      	beq.n	8001b9e <ADC_ConversionStop+0x10e>
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d105      	bne.n	8001ba4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001b98:	230c      	movs	r3, #12
 8001b9a:	617b      	str	r3, [r7, #20]
        break;
 8001b9c:	e005      	b.n	8001baa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	617b      	str	r3, [r7, #20]
        break;
 8001ba2:	e002      	b.n	8001baa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	617b      	str	r3, [r7, #20]
        break;
 8001ba8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001baa:	f7fe fea5 	bl	80008f8 <HAL_GetTick>
 8001bae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001bb0:	e01b      	b.n	8001bea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001bb2:	f7fe fea1 	bl	80008f8 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d914      	bls.n	8001bea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00d      	beq.n	8001bea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	f043 0210 	orr.w	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e007      	b.n	8001bfa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1dc      	bne.n	8001bb2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	a33fffff 	.word	0xa33fffff

08001c08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f83d 	bl	8000c98 <LL_ADC_IsEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d169      	bne.n	8001cf8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <ADC_Enable+0xfc>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00d      	beq.n	8001c4e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e055      	b.n	8001cfa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fff8 	bl	8000c48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c58:	482b      	ldr	r0, [pc, #172]	@ (8001d08 <ADC_Enable+0x100>)
 8001c5a:	f7fe fea3 	bl	80009a4 <LL_ADC_GetCommonPathInternalCh>
 8001c5e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c68:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <ADC_Enable+0x104>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	4a28      	ldr	r2, [pc, #160]	@ (8001d10 <ADC_Enable+0x108>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c82:	e002      	b.n	8001c8a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f9      	bne.n	8001c84 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c90:	f7fe fe32 	bl	80008f8 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c96:	e028      	b.n	8001cea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fffb 	bl	8000c98 <LL_ADC_IsEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ffcb 	bl	8000c48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cb2:	f7fe fe21 	bl	80008f8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d914      	bls.n	8001cea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d00d      	beq.n	8001cea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	f043 0210 	orr.w	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e007      	b.n	8001cfa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d1cf      	bne.n	8001c98 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	8000003f 	.word	0x8000003f
 8001d08:	50040300 	.word	0x50040300
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	053e2d63 	.word	0x053e2d63

08001d14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ffcc 	bl	8000cbe <LL_ADC_IsDisableOngoing>
 8001d26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ffb3 	bl	8000c98 <LL_ADC_IsEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d047      	beq.n	8001dc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d144      	bne.n	8001dc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030d 	and.w	r3, r3, #13
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ff8d 	bl	8000c70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d5e:	f7fe fdcb 	bl	80008f8 <HAL_GetTick>
 8001d62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d64:	e029      	b.n	8001dba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	f043 0210 	orr.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e023      	b.n	8001dca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d82:	f7fe fdb9 	bl	80008f8 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d914      	bls.n	8001dba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f043 0210 	orr.w	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e007      	b.n	8001dca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1dc      	bne.n	8001d82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <LL_ADC_SetCommonPathInternalCh>:
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_GetCommonPathInternalCh>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_SetOffset>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3360      	adds	r3, #96	@ 0x60
 8001e26:	461a      	mov	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <LL_ADC_SetOffset+0x44>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	03fff000 	.word	0x03fff000

08001e5c <LL_ADC_GetOffsetChannel>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3360      	adds	r3, #96	@ 0x60
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_SetOffsetState>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3360      	adds	r3, #96	@ 0x60
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	615a      	str	r2, [r3, #20]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_INJ_GetTrigAuto>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_INJ_SetQueueMode>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60da      	str	r2, [r3, #12]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_SetChannelSamplingTime>:
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3314      	adds	r3, #20
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	0e5b      	lsrs	r3, r3, #25
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0d1b      	lsrs	r3, r3, #20
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2107      	movs	r1, #7
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0d1b      	lsrs	r3, r3, #20
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_SetChannelSingleDiff>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0318 	and.w	r3, r3, #24
 8001fa2:	4908      	ldr	r1, [pc, #32]	@ (8001fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fa4:	40d9      	lsrs	r1, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	400b      	ands	r3, r1
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	0007ffff 	.word	0x0007ffff

08001fc8 <LL_ADC_IsEnabled>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <LL_ADC_IsEnabled+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_ADC_IsEnabled+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_StartCalibration>:
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800200a:	4313      	orrs	r3, r2
 800200c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_IsCalibrationOnGoing>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002034:	d101      	bne.n	800203a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_REG_IsConversionOngoing>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b04      	cmp	r3, #4
 800205a:	d101      	bne.n	8002060 <LL_ADC_REG_IsConversionOngoing+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_INJ_StartConversion>:
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800207e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002082:	f043 0208 	orr.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	609a      	str	r2, [r3, #8]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d101      	bne.n	80020ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e04d      	b.n	8002174 <HAL_ADCEx_Calibration_Start+0xb8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fe17 	bl	8001d14 <ADC_Disable>
 80020e6:	4603      	mov	r3, r0
 80020e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d136      	bne.n	800215e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020f8:	f023 0302 	bic.w	r3, r3, #2
 80020fc:	f043 0202 	orr.w	r2, r3, #2
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6839      	ldr	r1, [r7, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff6f 	bl	8001fee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002110:	e014      	b.n	800213c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800211e:	d30d      	bcc.n	800213c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002124:	f023 0312 	bic.w	r3, r3, #18
 8002128:	f043 0210 	orr.w	r2, r3, #16
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e01b      	b.n	8002174 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff6d 	bl	8002020 <LL_ADC_IsCalibrationOnGoing>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e2      	bne.n	8002112 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	f023 0303 	bic.w	r3, r3, #3
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	659a      	str	r2, [r3, #88]	@ 0x58
 800215c:	e005      	b.n	800216a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff84 	bl	8002096 <LL_ADC_INJ_IsConversionOngoing>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_ADCEx_InjectedStart+0x1c>
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
 8002196:	e05f      	b.n	8002258 <HAL_ADCEx_InjectedStart+0xdc>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021a2:	60fb      	str	r3, [r7, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_ADCEx_InjectedStart+0x4c>
        && (tmp_config_injected_queue == 0UL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <HAL_ADCEx_InjectedStart+0x4c>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e047      	b.n	8002258 <HAL_ADCEx_InjectedStart+0xdc>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADCEx_InjectedStart+0x5a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e040      	b.n	8002258 <HAL_ADCEx_InjectedStart+0xdc>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fd12 	bl	8001c08 <ADC_Enable>
 80021e4:	4603      	mov	r3, r0
 80021e6:	72fb      	strb	r3, [r7, #11]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021e8:	7afb      	ldrb	r3, [r7, #11]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d12f      	bne.n	800224e <HAL_ADCEx_InjectedStart+0xd2>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_ADCEx_InjectedStart+0x8c>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	f023 0208 	bic.w	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002206:	e002      	b.n	800220e <HAL_ADCEx_InjectedStart+0x92>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2260      	movs	r2, #96	@ 0x60
 8002228:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
#else
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fe54 	bl	8001ee4 <LL_ADC_INJ_GetTrigAuto>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_ADCEx_InjectedStart+0xda>
      {
        /* Start ADC group injected conversion */
        LL_ADC_INJ_StartConversion(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff11 	bl	800206e <LL_ADC_INJ_StartConversion>
 800224c:	e003      	b.n	8002256 <HAL_ADCEx_InjectedStart+0xda>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 8002256:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(const ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f240 321a 	movw	r2, #794	@ 0x31a
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_ADCEx_InjectedGetValue+0x30>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f240 321a 	movw	r2, #794	@ 0x31a
 800227a:	4293      	cmp	r3, r2
 800227c:	d81a      	bhi.n	80022b4 <HAL_ADCEx_InjectedGetValue+0x54>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8002284:	d010      	beq.n	80022a8 <HAL_ADCEx_InjectedGetValue+0x48>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 800228c:	d006      	beq.n	800229c <HAL_ADCEx_InjectedGetValue+0x3c>
 800228e:	e011      	b.n	80022b4 <HAL_ADCEx_InjectedGetValue+0x54>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002298:	60fb      	str	r3, [r7, #12]
      break;
 800229a:	e011      	b.n	80022c0 <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a4:	60fb      	str	r3, [r7, #12]
      break;
 80022a6:	e00b      	b.n	80022c0 <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b0:	60fb      	str	r3, [r7, #12]
      break;
 80022b2:	e005      	b.n	80022c0 <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022bc:	60fb      	str	r3, [r7, #12]
      break;
 80022be:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80022c0:	68fb      	ldr	r3, [r7, #12]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b6      	sub	sp, #216	@ 0xd8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d102      	bne.n	80022fa <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80022f4:	2302      	movs	r3, #2
 80022f6:	f000 bc90 	b.w	8002c1a <HAL_ADCEx_InjectedConfigChannel+0x94a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800230e:	2b01      	cmp	r3, #1
 8002310:	d130      	bne.n	8002374 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d179      	bne.n	800240e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	f403 52f8 	and.w	r2, r3, #7936	@ 0x1f00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002336:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002342:	e007      	b.n	8002354 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800235a:	4b96      	ldr	r3, [pc, #600]	@ (80025b4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 800235c:	4013      	ands	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002366:	430b      	orrs	r3, r1
 8002368:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002370:	661a      	str	r2, [r3, #96]	@ 0x60
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002372:	e04c      	b.n	800240e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11d      	bne.n	80023b8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80023a0:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023ac:	e004      	b.n	80023b8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023fe:	4b6d      	ldr	r3, [pc, #436]	@ (80025b4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	430b      	orrs	r3, r1
 800240c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fe3f 	bl	8002096 <LL_ADC_INJ_IsConversionOngoing>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d120      	bne.n	8002460 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7f5b      	ldrb	r3, [r3, #29]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d110      	bne.n	8002448 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	7f9b      	ldrb	r3, [r3, #30]
 8002434:	055a      	lsls	r2, r3, #21
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	7f1b      	ldrb	r3, [r3, #28]
 800243a:	051b      	lsls	r3, r3, #20
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	e00b      	b.n	8002460 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	7f9b      	ldrb	r3, [r3, #30]
 8002456:	055a      	lsls	r2, r3, #21
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fdef 	bl	8002048 <LL_ADC_REG_IsConversionOngoing>
 800246a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fe0f 	bl	8002096 <LL_ADC_INJ_IsConversionOngoing>
 8002478:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800247c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 8213 	bne.w	80028ac <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 820e 	bne.w	80028ac <HAL_ADCEx_InjectedConfigChannel+0x5dc>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d115      	bne.n	80024cc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	7f5b      	ldrb	r3, [r3, #29]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80024b6:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80024b8:	e01e      	b.n	80024f8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80024c8:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80024ca:	e015      	b.n	80024f8 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	7f5b      	ldrb	r3, [r3, #29]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d109      	bne.n	80024e8 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	659a      	str	r2, [r3, #88]	@ 0x58

        tmp_hal_status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80024e6:	e007      	b.n	80024f8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80024f6:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d110      	bne.n	8002524 <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	430b      	orrs	r3, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0202 	orr.w	r2, r2, #2
 8002520:	611a      	str	r2, [r3, #16]
 8002522:	e007      	b.n	8002534 <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0202 	bic.w	r2, r2, #2
 8002532:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800253c:	d10f      	bne.n	800255e <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	4619      	mov	r1, r3
 800254a:	f7ff fcee 	bl	8001f2a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fcb1 	bl	8001ebe <LL_ADC_SetSamplingTimeCommonConfig>
 800255c:	e00e      	b.n	800257c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800256a:	461a      	mov	r2, r3
 800256c:	f7ff fcdd 	bl	8001f2a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fca1 	bl	8001ebe <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d00c      	beq.n	80025b8 <HAL_ADCEx_InjectedConfigChannel+0x2e8>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6919      	ldr	r1, [r3, #16]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ae:	f7ff fc31 	bl	8001e14 <LL_ADC_SetOffset>
 80025b2:	e17b      	b.n	80028ac <HAL_ADCEx_InjectedConfigChannel+0x5dc>
 80025b4:	82082000 	.word	0x82082000
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc4c 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fc41 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 021f 	and.w	r2, r3, #31
 80025e2:	e01e      	b.n	8002622 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fc36 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002606:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800260a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADCEx_InjectedConfigChannel+0x346>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e004      	b.n	8002620 <HAL_ADCEx_InjectedConfigChannel+0x350>
  return __builtin_clz(value);
 8002616:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <HAL_ADCEx_InjectedConfigChannel+0x36a>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	e018      	b.n	800266c <HAL_ADCEx_InjectedConfigChannel+0x39c>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800264e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002656:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADCEx_InjectedConfigChannel+0x392>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e004      	b.n	800266c <HAL_ADCEx_InjectedConfigChannel+0x39c>
  return __builtin_clz(value);
 8002662:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800266c:	429a      	cmp	r2, r3
 800266e:	d106      	bne.n	800267e <HAL_ADCEx_InjectedConfigChannel+0x3ae>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fc05 	bl	8001e88 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbe9 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbde 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	e01e      	b.n	80026e8 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fbd3 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADCEx_InjectedConfigChannel+0x40c>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e004      	b.n	80026e6 <HAL_ADCEx_InjectedConfigChannel+0x416>
  return __builtin_clz(value);
 80026dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_ADCEx_InjectedConfigChannel+0x430>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0e9b      	lsrs	r3, r3, #26
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	e018      	b.n	8002732 <HAL_ADCEx_InjectedConfigChannel+0x462>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002714:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800271c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADCEx_InjectedConfigChannel+0x458>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e004      	b.n	8002732 <HAL_ADCEx_InjectedConfigChannel+0x462>
  return __builtin_clz(value);
 8002728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002732:	429a      	cmp	r2, r3
 8002734:	d106      	bne.n	8002744 <HAL_ADCEx_InjectedConfigChannel+0x474>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fba2 	bl	8001e88 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fb86 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fb7b 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	f003 021f 	and.w	r2, r3, #31
 800276e:	e01e      	b.n	80027ae <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2102      	movs	r1, #2
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fb70 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800278e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e004      	b.n	80027ac <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 80027a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	0e9b      	lsrs	r3, r3, #26
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	e014      	b.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x520>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADCEx_InjectedConfigChannel+0x516>
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e004      	b.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x520>
  return __builtin_clz(value);
 80027e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d106      	bne.n	8002802 <HAL_ADCEx_InjectedConfigChannel+0x532>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb43 	bl	8001e88 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2103      	movs	r1, #3
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fb27 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2103      	movs	r1, #3
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fb1c 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	e017      	b.n	800285e <HAL_ADCEx_InjectedConfigChannel+0x58e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2103      	movs	r1, #3
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fb11 	bl	8001e5c <LL_ADC_GetOffsetChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002848:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800284a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADCEx_InjectedConfigChannel+0x584>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <HAL_ADCEx_InjectedConfigChannel+0x58c>
  return __builtin_clz(value);
 8002854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	e011      	b.n	800289a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002886:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e003      	b.n	800289a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8002892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800289a:	429a      	cmp	r2, r3
 800289c:	d106      	bne.n	80028ac <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2103      	movs	r1, #3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff faee 	bl	8001e88 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fb89 	bl	8001fc8 <LL_ADC_IsEnabled>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 813f 	bne.w	8002b3c <HAL_ADCEx_InjectedConfigChannel+0x86c>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f7ff fb58 	bl	8001f80 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002b10 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f040 8130 	bne.w	8002b3c <HAL_ADCEx_InjectedConfigChannel+0x86c>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_ADCEx_InjectedConfigChannel+0x634>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e019      	b.n	8002938 <HAL_ADCEx_InjectedConfigChannel+0x668>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002914:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADCEx_InjectedConfigChannel+0x650>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e003      	b.n	8002928 <HAL_ADCEx_InjectedConfigChannel+0x658>
  return __builtin_clz(value);
 8002920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3301      	adds	r3, #1
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2b09      	cmp	r3, #9
 8002930:	bf94      	ite	ls
 8002932:	2301      	movls	r3, #1
 8002934:	2300      	movhi	r3, #0
 8002936:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002938:	2b00      	cmp	r3, #0
 800293a:	d079      	beq.n	8002a30 <HAL_ADCEx_InjectedConfigChannel+0x760>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_ADCEx_InjectedConfigChannel+0x688>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002956:	e015      	b.n	8002984 <HAL_ADCEx_InjectedConfigChannel+0x6b4>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002968:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800296a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_ADCEx_InjectedConfigChannel+0x6a4>
    return 32U;
 8002970:	2320      	movs	r3, #32
 8002972:	e003      	b.n	800297c <HAL_ADCEx_InjectedConfigChannel+0x6ac>
  return __builtin_clz(value);
 8002974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_ADCEx_InjectedConfigChannel+0x6d4>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	e017      	b.n	80029d4 <HAL_ADCEx_InjectedConfigChannel+0x704>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADCEx_InjectedConfigChannel+0x6f8>
  return __builtin_clz(value);
 80029c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_ADCEx_InjectedConfigChannel+0x72a>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	3301      	adds	r3, #1
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	051b      	lsls	r3, r3, #20
 80029f8:	e018      	b.n	8002a2c <HAL_ADCEx_InjectedConfigChannel+0x75c>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADCEx_InjectedConfigChannel+0x746>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e003      	b.n	8002a1e <HAL_ADCEx_InjectedConfigChannel+0x74e>
  return __builtin_clz(value);
 8002a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	e080      	b.n	8002b32 <HAL_ADCEx_InjectedConfigChannel+0x862>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_ADCEx_InjectedConfigChannel+0x77c>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	069b      	lsls	r3, r3, #26
 8002a46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a4a:	e015      	b.n	8002a78 <HAL_ADCEx_InjectedConfigChannel+0x7a8>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADCEx_InjectedConfigChannel+0x798>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e003      	b.n	8002a70 <HAL_ADCEx_InjectedConfigChannel+0x7a0>
  return __builtin_clz(value);
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADCEx_InjectedConfigChannel+0x7c8>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	e017      	b.n	8002ac8 <HAL_ADCEx_InjectedConfigChannel+0x7f8>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	61bb      	str	r3, [r7, #24]
  return result;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADCEx_InjectedConfigChannel+0x7e4>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADCEx_InjectedConfigChannel+0x7ec>
  return __builtin_clz(value);
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <HAL_ADCEx_InjectedConfigChannel+0x824>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	051b      	lsls	r3, r3, #20
 8002aee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	e01d      	b.n	8002b30 <HAL_ADCEx_InjectedConfigChannel+0x860>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	60fb      	str	r3, [r7, #12]
  return result;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_ADCEx_InjectedConfigChannel+0x844>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e005      	b.n	8002b1c <HAL_ADCEx_InjectedConfigChannel+0x84c>
 8002b10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f003 021f 	and.w	r2, r3, #31
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	3b1e      	subs	r3, #30
 8002b2a:	051b      	lsls	r3, r3, #20
 8002b2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b30:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7ff f9f7 	bl	8001f2a <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <HAL_ADCEx_InjectedConfigChannel+0x954>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d062      	beq.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b48:	4837      	ldr	r0, [pc, #220]	@ (8002c28 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8002b4a:	f7ff f955 	bl	8001df8 <LL_ADC_GetCommonPathInternalCh>
 8002b4e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <HAL_ADCEx_InjectedConfigChannel+0x95c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d127      	bne.n	8002bac <HAL_ADCEx_InjectedConfigChannel+0x8dc>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d121      	bne.n	8002bac <HAL_ADCEx_InjectedConfigChannel+0x8dc>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a30      	ldr	r2, [pc, #192]	@ (8002c30 <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d14d      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	482a      	ldr	r0, [pc, #168]	@ (8002c28 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8002b7e:	f7ff f928 	bl	8001dd2 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8002b82:	4b2c      	ldr	r3, [pc, #176]	@ (8002c34 <HAL_ADCEx_InjectedConfigChannel+0x964>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	4a2b      	ldr	r2, [pc, #172]	@ (8002c38 <HAL_ADCEx_InjectedConfigChannel+0x968>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	099a      	lsrs	r2, r3, #6
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002b9a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8002b9c:	e002      	b.n	8002ba4 <HAL_ADCEx_InjectedConfigChannel+0x8d4>
        {
          wait_loop_index--;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f9      	bne.n	8002b9e <HAL_ADCEx_InjectedConfigChannel+0x8ce>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002baa:	e030      	b.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a22      	ldr	r2, [pc, #136]	@ (8002c3c <HAL_ADCEx_InjectedConfigChannel+0x96c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d113      	bne.n	8002bde <HAL_ADCEx_InjectedConfigChannel+0x90e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10d      	bne.n	8002bde <HAL_ADCEx_InjectedConfigChannel+0x90e>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c30 <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d120      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4814      	ldr	r0, [pc, #80]	@ (8002c28 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8002bd8:	f7ff f8fb 	bl	8001dd2 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bdc:	e017      	b.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <HAL_ADCEx_InjectedConfigChannel+0x970>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d112      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10c      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c30 <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d107      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c06:	4619      	mov	r1, r3
 8002c08:	4807      	ldr	r0, [pc, #28]	@ (8002c28 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8002c0a:	f7ff f8e2 	bl	8001dd2 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	37d8      	adds	r7, #216	@ 0xd8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	80080000 	.word	0x80080000
 8002c28:	50040300 	.word	0x50040300
 8002c2c:	c7520000 	.word	0xc7520000
 8002c30:	50040000 	.word	0x50040000
 8002c34:	20000000 	.word	0x20000000
 8002c38:	053e2d63 	.word	0x053e2d63
 8002c3c:	cb840000 	.word	0xcb840000
 8002c40:	80000001 	.word	0x80000001

08002c44 <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f9f9 	bl	8002048 <LL_ADC_REG_IsConversionOngoing>
 8002c56:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fa1a 	bl	8002096 <LL_ADC_INJ_IsConversionOngoing>
 8002c62:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f941 	bl	8001f00 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]
 8002c82:	e001      	b.n	8002c88 <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0307 	and.w	r3, r3, #7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	@ (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	@ (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	@ 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	@ 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff47 	bl	8002c94 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff5c 	bl	8002cdc <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff8e 	bl	8002d4c <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5d 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffb0 	bl	8002db4 <SysTick_Config>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6e:	e166      	b.n	800313e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8158 	beq.w	8003138 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d005      	beq.n	8002ea0 <HAL_GPIO_Init+0x40>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d130      	bne.n	8002f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0201 	and.w	r2, r3, #1
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d017      	beq.n	8002f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d123      	bne.n	8002f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	6939      	ldr	r1, [r7, #16]
 8002f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80b2 	beq.w	8003138 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd4:	4b61      	ldr	r3, [pc, #388]	@ (800315c <HAL_GPIO_Init+0x2fc>)
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd8:	4a60      	ldr	r2, [pc, #384]	@ (800315c <HAL_GPIO_Init+0x2fc>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800315c <HAL_GPIO_Init+0x2fc>)
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fec:	4a5c      	ldr	r2, [pc, #368]	@ (8003160 <HAL_GPIO_Init+0x300>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003016:	d02b      	beq.n	8003070 <HAL_GPIO_Init+0x210>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a52      	ldr	r2, [pc, #328]	@ (8003164 <HAL_GPIO_Init+0x304>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d025      	beq.n	800306c <HAL_GPIO_Init+0x20c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a51      	ldr	r2, [pc, #324]	@ (8003168 <HAL_GPIO_Init+0x308>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d01f      	beq.n	8003068 <HAL_GPIO_Init+0x208>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a50      	ldr	r2, [pc, #320]	@ (800316c <HAL_GPIO_Init+0x30c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d019      	beq.n	8003064 <HAL_GPIO_Init+0x204>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a4f      	ldr	r2, [pc, #316]	@ (8003170 <HAL_GPIO_Init+0x310>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <HAL_GPIO_Init+0x200>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a4e      	ldr	r2, [pc, #312]	@ (8003174 <HAL_GPIO_Init+0x314>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00d      	beq.n	800305c <HAL_GPIO_Init+0x1fc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a4d      	ldr	r2, [pc, #308]	@ (8003178 <HAL_GPIO_Init+0x318>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <HAL_GPIO_Init+0x1f8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a4c      	ldr	r2, [pc, #304]	@ (800317c <HAL_GPIO_Init+0x31c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_GPIO_Init+0x1f4>
 8003050:	2307      	movs	r3, #7
 8003052:	e00e      	b.n	8003072 <HAL_GPIO_Init+0x212>
 8003054:	2308      	movs	r3, #8
 8003056:	e00c      	b.n	8003072 <HAL_GPIO_Init+0x212>
 8003058:	2306      	movs	r3, #6
 800305a:	e00a      	b.n	8003072 <HAL_GPIO_Init+0x212>
 800305c:	2305      	movs	r3, #5
 800305e:	e008      	b.n	8003072 <HAL_GPIO_Init+0x212>
 8003060:	2304      	movs	r3, #4
 8003062:	e006      	b.n	8003072 <HAL_GPIO_Init+0x212>
 8003064:	2303      	movs	r3, #3
 8003066:	e004      	b.n	8003072 <HAL_GPIO_Init+0x212>
 8003068:	2302      	movs	r3, #2
 800306a:	e002      	b.n	8003072 <HAL_GPIO_Init+0x212>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_GPIO_Init+0x212>
 8003070:	2300      	movs	r3, #0
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	f002 0203 	and.w	r2, r2, #3
 8003078:	0092      	lsls	r2, r2, #2
 800307a:	4093      	lsls	r3, r2
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003082:	4937      	ldr	r1, [pc, #220]	@ (8003160 <HAL_GPIO_Init+0x300>)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003090:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_GPIO_Init+0x320>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b4:	4a32      	ldr	r2, [pc, #200]	@ (8003180 <HAL_GPIO_Init+0x320>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030ba:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_GPIO_Init+0x320>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030de:	4a28      	ldr	r2, [pc, #160]	@ (8003180 <HAL_GPIO_Init+0x320>)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030e4:	4b26      	ldr	r3, [pc, #152]	@ (8003180 <HAL_GPIO_Init+0x320>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003108:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <HAL_GPIO_Init+0x320>)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800310e:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <HAL_GPIO_Init+0x320>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003132:	4a13      	ldr	r2, [pc, #76]	@ (8003180 <HAL_GPIO_Init+0x320>)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3301      	adds	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f ae91 	bne.w	8002e70 <HAL_GPIO_Init+0x10>
  }
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000
 8003164:	48000400 	.word	0x48000400
 8003168:	48000800 	.word	0x48000800
 800316c:	48000c00 	.word	0x48000c00
 8003170:	48001000 	.word	0x48001000
 8003174:	48001400 	.word	0x48001400
 8003178:	48001800 	.word	0x48001800
 800317c:	48001c00 	.word	0x48001c00
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	e001      	b.n	80031a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
 80031c0:	4613      	mov	r3, r2
 80031c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031c4:	787b      	ldrb	r3, [r7, #1]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ca:	887a      	ldrh	r2, [r7, #2]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031d0:	e002      	b.n	80031d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f4:	d102      	bne.n	80031fc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80031f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031fa:	e00b      	b.n	8003214 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80031fc:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320a:	d102      	bne.n	8003212 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800320c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003210:	e000      	b.n	8003214 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003212:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40007000 	.word	0x40007000

08003224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d141      	bne.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003232:	4b4b      	ldr	r3, [pc, #300]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323e:	d131      	bne.n	80032a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003240:	4b47      	ldr	r3, [pc, #284]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003246:	4a46      	ldr	r2, [pc, #280]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800324c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003250:	4b43      	ldr	r3, [pc, #268]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003258:	4a41      	ldr	r2, [pc, #260]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800325e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003260:	4b40      	ldr	r3, [pc, #256]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2232      	movs	r2, #50	@ 0x32
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a3f      	ldr	r2, [pc, #252]	@ (8003368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	0c9b      	lsrs	r3, r3, #18
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003276:	e002      	b.n	800327e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3b01      	subs	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327e:	4b38      	ldr	r3, [pc, #224]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d102      	bne.n	8003292 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f2      	bne.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003292:	4b33      	ldr	r3, [pc, #204]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329e:	d158      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e057      	b.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032b4:	e04d      	b.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032bc:	d141      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032be:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ca:	d131      	bne.n	8003330 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032cc:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d2:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2232      	movs	r2, #50	@ 0x32
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	0c9b      	lsrs	r3, r3, #18
 80032fe:	3301      	adds	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003302:	e002      	b.n	800330a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3b01      	subs	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800330a:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003316:	d102      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f2      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800331e:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332a:	d112      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e011      	b.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003330:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003336:	4a0a      	ldr	r2, [pc, #40]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003340:	e007      	b.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800334a:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003350:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40007000 	.word	0x40007000
 8003364:	20000000 	.word	0x20000000
 8003368:	431bde83 	.word	0x431bde83

0800336c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f000 bc08 	b.w	8003b90 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003380:	4b96      	ldr	r3, [pc, #600]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800338a:	4b94      	ldr	r3, [pc, #592]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80e4 	beq.w	800356a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4c>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	f040 808b 	bne.w	80034c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f040 8087 	bne.w	80034c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033b8:	4b88      	ldr	r3, [pc, #544]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_OscConfig+0x64>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e3df      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	4b81      	ldr	r3, [pc, #516]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d004      	beq.n	80033ea <HAL_RCC_OscConfig+0x7e>
 80033e0:	4b7e      	ldr	r3, [pc, #504]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e8:	e005      	b.n	80033f6 <HAL_RCC_OscConfig+0x8a>
 80033ea:	4b7c      	ldr	r3, [pc, #496]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80033ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d223      	bcs.n	8003442 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fd94 	bl	8003f2c <RCC_SetFlashLatencyFromMSIRange>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e3c0      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340e:	4b73      	ldr	r3, [pc, #460]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a72      	ldr	r2, [pc, #456]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b70      	ldr	r3, [pc, #448]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	496d      	ldr	r1, [pc, #436]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342c:	4b6b      	ldr	r3, [pc, #428]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4968      	ldr	r1, [pc, #416]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	e025      	b.n	800348e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003442:	4b66      	ldr	r3, [pc, #408]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a65      	ldr	r2, [pc, #404]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b63      	ldr	r3, [pc, #396]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4960      	ldr	r1, [pc, #384]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003460:	4b5e      	ldr	r3, [pc, #376]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	495b      	ldr	r1, [pc, #364]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd54 	bl	8003f2c <RCC_SetFlashLatencyFromMSIRange>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e380      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800348e:	f000 fcc1 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003492:	4602      	mov	r2, r0
 8003494:	4b51      	ldr	r3, [pc, #324]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	4950      	ldr	r1, [pc, #320]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034a0:	5ccb      	ldrb	r3, [r1, r3]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a4e      	ldr	r2, [pc, #312]	@ (80035e4 <HAL_RCC_OscConfig+0x278>)
 80034ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034ae:	4b4e      	ldr	r3, [pc, #312]	@ (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd f9d0 	bl	8000858 <HAL_InitTick>
 80034b8:	4603      	mov	r3, r0
 80034ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d052      	beq.n	8003568 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	e364      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d032      	beq.n	8003534 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ce:	4b43      	ldr	r3, [pc, #268]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a42      	ldr	r2, [pc, #264]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034da:	f7fd fa0d 	bl	80008f8 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e2:	f7fd fa09 	bl	80008f8 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e34d      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f4:	4b39      	ldr	r3, [pc, #228]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003500:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a35      	ldr	r2, [pc, #212]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b33      	ldr	r3, [pc, #204]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4930      	ldr	r1, [pc, #192]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351e:	4b2f      	ldr	r3, [pc, #188]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	492b      	ldr	r1, [pc, #172]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
 8003532:	e01a      	b.n	800356a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003534:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003540:	f7fd f9da 	bl	80008f8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003548:	f7fd f9d6 	bl	80008f8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e31a      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800355a:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1dc>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d073      	beq.n	800365e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x21c>
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d10e      	bne.n	80035a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d063      	beq.n	800365c <HAL_RCC_OscConfig+0x2f0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d15f      	bne.n	800365c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e2f7      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x24c>
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a0b      	ldr	r2, [pc, #44]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e025      	b.n	8003604 <HAL_RCC_OscConfig+0x298>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c0:	d114      	bne.n	80035ec <HAL_RCC_OscConfig+0x280>
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b03      	ldr	r3, [pc, #12]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a02      	ldr	r2, [pc, #8]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e013      	b.n	8003604 <HAL_RCC_OscConfig+0x298>
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08004b4c 	.word	0x08004b4c
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004
 80035ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd f974 	bl	80008f8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd f970 	bl	80008f8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e2b4      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003626:	4b92      	ldr	r3, [pc, #584]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x2a8>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd f960 	bl	80008f8 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd f95c 	bl	80008f8 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e2a0      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800364e:	4b88      	ldr	r3, [pc, #544]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x2d0>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d060      	beq.n	800372c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d005      	beq.n	800367c <HAL_RCC_OscConfig+0x310>
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b0c      	cmp	r3, #12
 8003674:	d119      	bne.n	80036aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d116      	bne.n	80036aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800367c:	4b7c      	ldr	r3, [pc, #496]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x328>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e27d      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b76      	ldr	r3, [pc, #472]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	4973      	ldr	r1, [pc, #460]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a8:	e040      	b.n	800372c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d023      	beq.n	80036fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fd f91b 	bl	80008f8 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c6:	f7fd f917 	bl	80008f8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e25b      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d8:	4b65      	ldr	r3, [pc, #404]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b62      	ldr	r3, [pc, #392]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	495f      	ldr	r1, [pc, #380]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
 80036f8:	e018      	b.n	800372c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd f8f7 	bl	80008f8 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370e:	f7fd f8f3 	bl	80008f8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e237      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003720:	4b53      	ldr	r3, [pc, #332]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01c      	beq.n	800377a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003740:	4b4b      	ldr	r3, [pc, #300]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003746:	4a4a      	ldr	r2, [pc, #296]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd f8d2 	bl	80008f8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003758:	f7fd f8ce 	bl	80008f8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e212      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376a:	4b41      	ldr	r3, [pc, #260]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 800376c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ef      	beq.n	8003758 <HAL_RCC_OscConfig+0x3ec>
 8003778:	e01b      	b.n	80037b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377a:	4b3d      	ldr	r3, [pc, #244]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 800377c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003780:	4a3b      	ldr	r2, [pc, #236]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fd f8b5 	bl	80008f8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fd f8b1 	bl	80008f8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1f5      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a4:	4b32      	ldr	r3, [pc, #200]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ef      	bne.n	8003792 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80a6 	beq.w	800390c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c0:	2300      	movs	r3, #0
 80037c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d4:	4a26      	ldr	r2, [pc, #152]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037da:	6593      	str	r3, [r2, #88]	@ 0x58
 80037dc:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ec:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <HAL_RCC_OscConfig+0x508>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d118      	bne.n	800382a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003874 <HAL_RCC_OscConfig+0x508>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <HAL_RCC_OscConfig+0x508>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003804:	f7fd f878 	bl	80008f8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380c:	f7fd f874 	bl	80008f8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e1b8      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <HAL_RCC_OscConfig+0x508>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d108      	bne.n	8003844 <HAL_RCC_OscConfig+0x4d8>
 8003832:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003838:	4a0d      	ldr	r2, [pc, #52]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003842:	e029      	b.n	8003898 <HAL_RCC_OscConfig+0x52c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b05      	cmp	r3, #5
 800384a:	d115      	bne.n	8003878 <HAL_RCC_OscConfig+0x50c>
 800384c:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	4a07      	ldr	r2, [pc, #28]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800385c:	4b04      	ldr	r3, [pc, #16]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	4a03      	ldr	r2, [pc, #12]	@ (8003870 <HAL_RCC_OscConfig+0x504>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800386c:	e014      	b.n	8003898 <HAL_RCC_OscConfig+0x52c>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
 8003878:	4b9d      	ldr	r3, [pc, #628]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	4a9c      	ldr	r2, [pc, #624]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003888:	4b99      	ldr	r3, [pc, #612]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	4a98      	ldr	r2, [pc, #608]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d016      	beq.n	80038ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd f82a 	bl	80008f8 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7fd f826 	bl	80008f8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e168      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038be:	4b8c      	ldr	r3, [pc, #560]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ed      	beq.n	80038a8 <HAL_RCC_OscConfig+0x53c>
 80038cc:	e015      	b.n	80038fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ce:	f7fd f813 	bl	80008f8 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fd f80f 	bl	80008f8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e151      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ec:	4b80      	ldr	r3, [pc, #512]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ed      	bne.n	80038d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fa:	7ffb      	ldrb	r3, [r7, #31]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d105      	bne.n	800390c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003900:	4b7b      	ldr	r3, [pc, #492]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	4a7a      	ldr	r2, [pc, #488]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03c      	beq.n	8003992 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01c      	beq.n	800395a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003920:	4b73      	ldr	r3, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003926:	4a72      	ldr	r2, [pc, #456]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fc ffe2 	bl	80008f8 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003938:	f7fc ffde 	bl	80008f8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e122      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800394a:	4b69      	ldr	r3, [pc, #420]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 800394c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <HAL_RCC_OscConfig+0x5cc>
 8003958:	e01b      	b.n	8003992 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800395a:	4b65      	ldr	r3, [pc, #404]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 800395c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003960:	4a63      	ldr	r2, [pc, #396]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fc ffc5 	bl	80008f8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003972:	f7fc ffc1 	bl	80008f8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e105      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003984:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ef      	bne.n	8003972 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80f9 	beq.w	8003b8e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	f040 80cf 	bne.w	8003b44 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039a6:	4b52      	ldr	r3, [pc, #328]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0203 	and.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d12c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	3b01      	subs	r3, #1
 80039c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d123      	bne.n	8003a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d11b      	bne.n	8003a14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d113      	bne.n	8003a14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d109      	bne.n	8003a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d071      	beq.n	8003af8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d068      	beq.n	8003aec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a1a:	4b35      	ldr	r3, [pc, #212]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0ac      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a36:	4b2e      	ldr	r3, [pc, #184]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003a3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a42:	f7fc ff59 	bl	80008f8 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fc ff55 	bl	80008f8 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e099      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a5c:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a68:	4b21      	ldr	r3, [pc, #132]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <HAL_RCC_OscConfig+0x788>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a82:	0212      	lsls	r2, r2, #8
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0552      	lsls	r2, r2, #21
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a96:	0852      	lsrs	r2, r2, #1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0652      	lsls	r2, r2, #25
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003aa2:	06d2      	lsls	r2, r2, #27
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	4912      	ldr	r1, [pc, #72]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003aac:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a0c      	ldr	r2, [pc, #48]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac4:	f7fc ff18 	bl	80008f8 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fc ff14 	bl	80008f8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e058      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <HAL_RCC_OscConfig+0x784>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aea:	e050      	b.n	8003b8e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e04f      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
 8003af0:	40021000 	.word	0x40021000
 8003af4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af8:	4b27      	ldr	r3, [pc, #156]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d144      	bne.n	8003b8e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b04:	4b24      	ldr	r3, [pc, #144]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a23      	ldr	r2, [pc, #140]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b10:	4b21      	ldr	r3, [pc, #132]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a20      	ldr	r2, [pc, #128]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b1c:	f7fc feec 	bl	80008f8 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fc fee8 	bl	80008f8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e02c      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	4b18      	ldr	r3, [pc, #96]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x7b8>
 8003b42:	e024      	b.n	8003b8e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d01f      	beq.n	8003b8a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4a:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fc fecf 	bl	80008f8 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7fc fecb 	bl	80008f8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e00f      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b70:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b7c:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	4905      	ldr	r1, [pc, #20]	@ (8003b98 <HAL_RCC_OscConfig+0x82c>)
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_OscConfig+0x830>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60cb      	str	r3, [r1, #12]
 8003b88:	e001      	b.n	8003b8e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	feeefffc 	.word	0xfeeefffc

08003ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e11d      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b90      	ldr	r3, [pc, #576]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d910      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b8d      	ldr	r3, [pc, #564]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 020f 	bic.w	r2, r3, #15
 8003bce:	498b      	ldr	r1, [pc, #556]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b89      	ldr	r3, [pc, #548]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e105      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	4b81      	ldr	r3, [pc, #516]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d908      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b7e      	ldr	r3, [pc, #504]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	497b      	ldr	r1, [pc, #492]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d079      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d11e      	bne.n	8003c68 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2a:	4b75      	ldr	r3, [pc, #468]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0dc      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c3a:	f000 f9d1 	bl	8003fe0 <RCC_GetSysClockFreqFromPLLSource>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4a70      	ldr	r2, [pc, #448]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d946      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c46:	4b6e      	ldr	r3, [pc, #440]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d140      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c52:	4b6b      	ldr	r3, [pc, #428]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c5a:	4a69      	ldr	r2, [pc, #420]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e035      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c70:	4b63      	ldr	r3, [pc, #396]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d115      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0b9      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c88:	4b5d      	ldr	r3, [pc, #372]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0ad      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c98:	4b59      	ldr	r3, [pc, #356]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0a5      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ca8:	f000 f8b4 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a55      	ldr	r2, [pc, #340]	@ (8003e04 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d90f      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003cb4:	4b52      	ldr	r3, [pc, #328]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 0203 	bic.w	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4947      	ldr	r1, [pc, #284]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce6:	f7fc fe07 	bl	80008f8 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cee:	f7fc fe03 	bl	80008f8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e077      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d04:	4b3e      	ldr	r3, [pc, #248]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 020c 	and.w	r2, r3, #12
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d1eb      	bne.n	8003cee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b80      	cmp	r3, #128	@ 0x80
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d1c:	4b38      	ldr	r3, [pc, #224]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a37      	ldr	r2, [pc, #220]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d26:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b31      	ldr	r3, [pc, #196]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d208      	bcs.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d44:	4b2e      	ldr	r3, [pc, #184]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	492b      	ldr	r1, [pc, #172]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d56:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d210      	bcs.n	8003d86 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d64:	4b25      	ldr	r3, [pc, #148]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 020f 	bic.w	r2, r3, #15
 8003d6c:	4923      	ldr	r1, [pc, #140]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <HAL_RCC_ClockConfig+0x25c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e036      	b.n	8003df4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d92:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	4918      	ldr	r1, [pc, #96]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db0:	4b13      	ldr	r3, [pc, #76]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4910      	ldr	r1, [pc, #64]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dc4:	f000 f826 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_RCC_ClockConfig+0x260>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <HAL_RCC_ClockConfig+0x268>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8003de0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <HAL_RCC_ClockConfig+0x26c>)
 8003de2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003de4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <HAL_RCC_ClockConfig+0x270>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fd35 	bl	8000858 <HAL_InitTick>
 8003dee:	4603      	mov	r3, r0
 8003df0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40022000 	.word	0x40022000
 8003e00:	40021000 	.word	0x40021000
 8003e04:	04c4b400 	.word	0x04c4b400
 8003e08:	08004b4c 	.word	0x08004b4c
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	20000004 	.word	0x20000004

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	@ 0x24
 8003e18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e22:	4b3e      	ldr	r3, [pc, #248]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x34>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d121      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d11e      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e48:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e005      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e64:	4b2d      	ldr	r3, [pc, #180]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e70:	4a2b      	ldr	r2, [pc, #172]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d102      	bne.n	8003e92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e8c:	4b25      	ldr	r3, [pc, #148]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e004      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e98:	4b23      	ldr	r3, [pc, #140]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d134      	bne.n	8003f0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0xa6>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8003eb8:	e005      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ebc:	617b      	str	r3, [r7, #20]
      break;
 8003ebe:	e005      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ec2:	617b      	str	r3, [r7, #20]
      break;
 8003ec4:	e002      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	617b      	str	r3, [r7, #20]
      break;
 8003eca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	fb03 f202 	mul.w	r2, r3, r2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	0e5b      	lsrs	r3, r3, #25
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	3301      	adds	r3, #1
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3724      	adds	r7, #36	@ 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	08004b5c 	.word	0x08004b5c
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200

08003f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f38:	4b27      	ldr	r3, [pc, #156]	@ (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f44:	f7ff f94e 	bl	80031e4 <HAL_PWREx_GetVoltageRange>
 8003f48:	6178      	str	r0, [r7, #20]
 8003f4a:	e014      	b.n	8003f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f4c:	4b22      	ldr	r3, [pc, #136]	@ (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f50:	4a21      	ldr	r2, [pc, #132]	@ (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f58:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f64:	f7ff f93e 	bl	80031e4 <HAL_PWREx_GetVoltageRange>
 8003f68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f7c:	d10b      	bne.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b80      	cmp	r3, #128	@ 0x80
 8003f82:	d913      	bls.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f88:	d902      	bls.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	e00d      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f90:	2301      	movs	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	e00a      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f9a:	d902      	bls.n	8003fa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	e004      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b70      	cmp	r3, #112	@ 0x70
 8003fa6:	d101      	bne.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa8:	2301      	movs	r3, #1
 8003faa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fac:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f023 020f 	bic.w	r2, r3, #15
 8003fb4:	4909      	ldr	r1, [pc, #36]	@ (8003fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fbc:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40022000 	.word	0x40022000

08003fe0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800409c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d00b      	beq.n	800400e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d825      	bhi.n	8004048 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d008      	beq.n	8004014 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d11f      	bne.n	8004048 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004008:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800400a:	613b      	str	r3, [r7, #16]
    break;
 800400c:	e01f      	b.n	800404e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800400e:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004010:	613b      	str	r3, [r7, #16]
    break;
 8004012:	e01c      	b.n	800404e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004014:	4b21      	ldr	r3, [pc, #132]	@ (800409c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e005      	b.n	800403c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800403c:	4a1a      	ldr	r2, [pc, #104]	@ (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	613b      	str	r3, [r7, #16]
    break;
 8004046:	e002      	b.n	800404e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
    break;
 800404c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800404e:	4b13      	ldr	r3, [pc, #76]	@ (800409c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	3301      	adds	r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800405c:	4b0f      	ldr	r3, [pc, #60]	@ (800409c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	fb03 f202 	mul.w	r2, r3, r2
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004074:	4b09      	ldr	r3, [pc, #36]	@ (800409c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	0e5b      	lsrs	r3, r3, #25
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800408e:	683b      	ldr	r3, [r7, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40021000 	.word	0x40021000
 80040a0:	00f42400 	.word	0x00f42400
 80040a4:	007a1200 	.word	0x007a1200
 80040a8:	08004b5c 	.word	0x08004b5c

080040ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040b4:	2300      	movs	r3, #0
 80040b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040b8:	2300      	movs	r3, #0
 80040ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d040      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040cc:	2b80      	cmp	r3, #128	@ 0x80
 80040ce:	d02a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d825      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040d4:	2b60      	cmp	r3, #96	@ 0x60
 80040d6:	d026      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040d8:	2b60      	cmp	r3, #96	@ 0x60
 80040da:	d821      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d006      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80040e0:	2b40      	cmp	r3, #64	@ 0x40
 80040e2:	d81d      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d010      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040ec:	e018      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040ee:	4b89      	ldr	r3, [pc, #548]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4a88      	ldr	r2, [pc, #544]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040fa:	e015      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fb02 	bl	800470c <RCCEx_PLLSAI1_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800410c:	e00c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3320      	adds	r3, #32
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fbed 	bl	80048f4 <RCCEx_PLLSAI2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	74fb      	strb	r3, [r7, #19]
      break;
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800412e:	4b79      	ldr	r3, [pc, #484]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004134:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413c:	4975      	ldr	r1, [pc, #468]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004144:	e001      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d047      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d030      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004164:	d82a      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800416a:	d02a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800416c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004170:	d824      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004176:	d008      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800417c:	d81e      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004186:	d010      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004188:	e018      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800418a:	4b62      	ldr	r3, [pc, #392]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a61      	ldr	r2, [pc, #388]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004194:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004196:	e015      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fab4 	bl	800470c <RCCEx_PLLSAI1_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a8:	e00c      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3320      	adds	r3, #32
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fb9f 	bl	80048f4 <RCCEx_PLLSAI2_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041ba:	e003      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	74fb      	strb	r3, [r7, #19]
      break;
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80041c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ca:	4b52      	ldr	r3, [pc, #328]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d8:	494e      	ldr	r1, [pc, #312]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80041e0:	e001      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 809f 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f4:	2300      	movs	r3, #0
 80041f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f8:	4b46      	ldr	r3, [pc, #280]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	4b41      	ldr	r3, [pc, #260]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004212:	4a40      	ldr	r2, [pc, #256]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004218:	6593      	str	r3, [r2, #88]	@ 0x58
 800421a:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004226:	2301      	movs	r3, #1
 8004228:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422a:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a3a      	ldr	r2, [pc, #232]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004236:	f7fc fb5f 	bl	80008f8 <HAL_GetTick>
 800423a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800423c:	e009      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fc fb5b 	bl	80008f8 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d902      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	74fb      	strb	r3, [r7, #19]
        break;
 8004250:	e005      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004252:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ef      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d15b      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004264:	4b2b      	ldr	r3, [pc, #172]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01f      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	429a      	cmp	r2, r3
 8004280:	d019      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004282:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800428c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800428e:	4b21      	ldr	r3, [pc, #132]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800429e:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ae:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d016      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fc fb1a 	bl	80008f8 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c6:	e00b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fc fb16 	bl	80008f8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d902      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	74fb      	strb	r3, [r7, #19]
            break;
 80042de:	e006      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ec      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10c      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004304:	4903      	ldr	r1, [pc, #12]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800430c:	e008      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800430e:	7cfb      	ldrb	r3, [r7, #19]
 8004310:	74bb      	strb	r3, [r7, #18]
 8004312:	e005      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004320:	7c7b      	ldrb	r3, [r7, #17]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4ba0      	ldr	r3, [pc, #640]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	4a9f      	ldr	r2, [pc, #636]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433e:	4b9a      	ldr	r3, [pc, #616]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	4996      	ldr	r1, [pc, #600]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004360:	4b91      	ldr	r3, [pc, #580]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f023 020c 	bic.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	498e      	ldr	r1, [pc, #568]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004382:	4b89      	ldr	r3, [pc, #548]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004390:	4985      	ldr	r1, [pc, #532]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043a4:	4b80      	ldr	r3, [pc, #512]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	497d      	ldr	r1, [pc, #500]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043c6:	4b78      	ldr	r3, [pc, #480]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d4:	4974      	ldr	r1, [pc, #464]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e8:	4b6f      	ldr	r3, [pc, #444]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f6:	496c      	ldr	r1, [pc, #432]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b67      	ldr	r3, [pc, #412]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004418:	4963      	ldr	r1, [pc, #396]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800442c:	4b5e      	ldr	r3, [pc, #376]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443a:	495b      	ldr	r1, [pc, #364]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444e:	4b56      	ldr	r3, [pc, #344]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445c:	4952      	ldr	r1, [pc, #328]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004470:	4b4d      	ldr	r3, [pc, #308]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	494a      	ldr	r1, [pc, #296]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004492:	4b45      	ldr	r3, [pc, #276]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a0:	4941      	ldr	r1, [pc, #260]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044b4:	4b3c      	ldr	r3, [pc, #240]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c2:	4939      	ldr	r1, [pc, #228]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d028      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d6:	4b34      	ldr	r3, [pc, #208]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e4:	4930      	ldr	r1, [pc, #192]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044f4:	d106      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f6:	4b2c      	ldr	r3, [pc, #176]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4a2b      	ldr	r2, [pc, #172]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004500:	60d3      	str	r3, [r2, #12]
 8004502:	e011      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004508:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800450c:	d10c      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	2101      	movs	r1, #1
 8004514:	4618      	mov	r0, r3
 8004516:	f000 f8f9 	bl	800470c <RCCEx_PLLSAI1_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800451e:	7cfb      	ldrb	r3, [r7, #19]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d04d      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800453c:	d108      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004544:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800454a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800454e:	e012      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004550:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004552:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004556:	4a14      	ldr	r2, [pc, #80]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800455c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004560:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004566:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800456e:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800457a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457e:	d106      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004580:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800458a:	60d3      	str	r3, [r2, #12]
 800458c:	e020      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004596:	d109      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a2:	60d3      	str	r3, [r2, #12]
 80045a4:	e014      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 f8a5 	bl	800470c <RCCEx_PLLSAI1_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d028      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ea:	4947      	ldr	r1, [pc, #284]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045fa:	d106      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fc:	4b42      	ldr	r3, [pc, #264]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a41      	ldr	r2, [pc, #260]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004606:	60d3      	str	r3, [r2, #12]
 8004608:	e011      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800460e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004612:	d10c      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	2101      	movs	r1, #1
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f876 	bl	800470c <RCCEx_PLLSAI1_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01e      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800463a:	4b33      	ldr	r3, [pc, #204]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800464a:	492f      	ldr	r1, [pc, #188]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f851 	bl	800470c <RCCEx_PLLSAI1_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004684:	4b20      	ldr	r3, [pc, #128]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800468a:	f023 0204 	bic.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004694:	491c      	ldr	r1, [pc, #112]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046a8:	4b17      	ldr	r3, [pc, #92]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ae:	f023 0218 	bic.w	r2, r3, #24
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	4913      	ldr	r1, [pc, #76]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d017      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046dc:	490a      	ldr	r1, [pc, #40]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ee:	d105      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a04      	ldr	r2, [pc, #16]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000

0800470c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800471a:	4b72      	ldr	r3, [pc, #456]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00e      	beq.n	8004744 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004726:	4b6f      	ldr	r3, [pc, #444]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d103      	bne.n	800473e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
       ||
 800473a:	2b00      	cmp	r3, #0
 800473c:	d142      	bne.n	80047c4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e03f      	b.n	80047c4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d018      	beq.n	800477e <RCCEx_PLLSAI1_Config+0x72>
 800474c:	2b03      	cmp	r3, #3
 800474e:	d825      	bhi.n	800479c <RCCEx_PLLSAI1_Config+0x90>
 8004750:	2b01      	cmp	r3, #1
 8004752:	d002      	beq.n	800475a <RCCEx_PLLSAI1_Config+0x4e>
 8004754:	2b02      	cmp	r3, #2
 8004756:	d009      	beq.n	800476c <RCCEx_PLLSAI1_Config+0x60>
 8004758:	e020      	b.n	800479c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800475a:	4b62      	ldr	r3, [pc, #392]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11d      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476a:	e01a      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800476c:	4b5d      	ldr	r3, [pc, #372]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800477c:	e013      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800477e:	4b59      	ldr	r3, [pc, #356]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800478a:	4b56      	ldr	r3, [pc, #344]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800479a:	e006      	b.n	80047aa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e004      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d108      	bne.n	80047c4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047b2:	4b4c      	ldr	r3, [pc, #304]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4949      	ldr	r1, [pc, #292]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 8086 	bne.w	80048d8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047cc:	4b45      	ldr	r3, [pc, #276]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a44      	ldr	r2, [pc, #272]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d8:	f7fc f88e 	bl	80008f8 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e0:	f7fc f88a 	bl	80008f8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
        break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047f4:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ef      	bne.n	80047e0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d168      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d113      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800480c:	4b35      	ldr	r3, [pc, #212]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68d2      	ldr	r2, [r2, #12]
 800481e:	06d2      	lsls	r2, r2, #27
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	3a01      	subs	r2, #1
 8004828:	0112      	lsls	r2, r2, #4
 800482a:	430a      	orrs	r2, r1
 800482c:	492d      	ldr	r1, [pc, #180]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	610b      	str	r3, [r1, #16]
 8004832:	e02d      	b.n	8004890 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d115      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483a:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	0211      	lsls	r1, r2, #8
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6912      	ldr	r2, [r2, #16]
 800484c:	0852      	lsrs	r2, r2, #1
 800484e:	3a01      	subs	r2, #1
 8004850:	0552      	lsls	r2, r2, #21
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6852      	ldr	r2, [r2, #4]
 8004858:	3a01      	subs	r2, #1
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	430a      	orrs	r2, r1
 800485e:	4921      	ldr	r1, [pc, #132]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	610b      	str	r3, [r1, #16]
 8004864:	e014      	b.n	8004890 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004866:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6952      	ldr	r2, [r2, #20]
 8004878:	0852      	lsrs	r2, r2, #1
 800487a:	3a01      	subs	r2, #1
 800487c:	0652      	lsls	r2, r2, #25
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	3a01      	subs	r2, #1
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	430a      	orrs	r2, r1
 800488a:	4916      	ldr	r1, [pc, #88]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004890:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a13      	ldr	r2, [pc, #76]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004896:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800489a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fc f82c 	bl	80008f8 <HAL_GetTick>
 80048a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048a2:	e009      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a4:	f7fc f828 	bl	80008f8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d902      	bls.n	80048b8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	73fb      	strb	r3, [r7, #15]
          break;
 80048b6:	e005      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048b8:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ef      	beq.n	80048a4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	4904      	ldr	r1, [pc, #16]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	07ff800f 	.word	0x07ff800f
 80048ec:	ff9f800f 	.word	0xff9f800f
 80048f0:	f9ff800f 	.word	0xf9ff800f

080048f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004902:	4b72      	ldr	r3, [pc, #456]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00e      	beq.n	800492c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800490e:	4b6f      	ldr	r3, [pc, #444]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0203 	and.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d103      	bne.n	8004926 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
       ||
 8004922:	2b00      	cmp	r3, #0
 8004924:	d142      	bne.n	80049ac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e03f      	b.n	80049ac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d018      	beq.n	8004966 <RCCEx_PLLSAI2_Config+0x72>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d825      	bhi.n	8004984 <RCCEx_PLLSAI2_Config+0x90>
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <RCCEx_PLLSAI2_Config+0x4e>
 800493c:	2b02      	cmp	r3, #2
 800493e:	d009      	beq.n	8004954 <RCCEx_PLLSAI2_Config+0x60>
 8004940:	e020      	b.n	8004984 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004942:	4b62      	ldr	r3, [pc, #392]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11d      	bne.n	800498a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004952:	e01a      	b.n	800498a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004954:	4b5d      	ldr	r3, [pc, #372]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004964:	e013      	b.n	800498e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004966:	4b59      	ldr	r3, [pc, #356]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004972:	4b56      	ldr	r3, [pc, #344]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004982:	e006      	b.n	8004992 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      break;
 8004988:	e004      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004992:	bf00      	nop
    }

    if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d108      	bne.n	80049ac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800499a:	4b4c      	ldr	r3, [pc, #304]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4949      	ldr	r1, [pc, #292]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8086 	bne.w	8004ac0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049b4:	4b45      	ldr	r3, [pc, #276]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a44      	ldr	r2, [pc, #272]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fb ff9a 	bl	80008f8 <HAL_GetTick>
 80049c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049c6:	e009      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049c8:	f7fb ff96 	bl	80008f8 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d902      	bls.n	80049dc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	73fb      	strb	r3, [r7, #15]
        break;
 80049da:	e005      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049dc:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ef      	bne.n	80049c8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d168      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d113      	bne.n	8004a1c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049f4:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	4b35      	ldr	r3, [pc, #212]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6892      	ldr	r2, [r2, #8]
 8004a00:	0211      	lsls	r1, r2, #8
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68d2      	ldr	r2, [r2, #12]
 8004a06:	06d2      	lsls	r2, r2, #27
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6852      	ldr	r2, [r2, #4]
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	0112      	lsls	r2, r2, #4
 8004a12:	430a      	orrs	r2, r1
 8004a14:	492d      	ldr	r1, [pc, #180]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	614b      	str	r3, [r1, #20]
 8004a1a:	e02d      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d115      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a22:	4b2a      	ldr	r3, [pc, #168]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	0211      	lsls	r1, r2, #8
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6912      	ldr	r2, [r2, #16]
 8004a34:	0852      	lsrs	r2, r2, #1
 8004a36:	3a01      	subs	r2, #1
 8004a38:	0552      	lsls	r2, r2, #21
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6852      	ldr	r2, [r2, #4]
 8004a40:	3a01      	subs	r2, #1
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	430a      	orrs	r2, r1
 8004a46:	4921      	ldr	r1, [pc, #132]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	614b      	str	r3, [r1, #20]
 8004a4c:	e014      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	0211      	lsls	r1, r2, #8
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6952      	ldr	r2, [r2, #20]
 8004a60:	0852      	lsrs	r2, r2, #1
 8004a62:	3a01      	subs	r2, #1
 8004a64:	0652      	lsls	r2, r2, #25
 8004a66:	4311      	orrs	r1, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6852      	ldr	r2, [r2, #4]
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	430a      	orrs	r2, r1
 8004a72:	4916      	ldr	r1, [pc, #88]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a78:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fb ff38 	bl	80008f8 <HAL_GetTick>
 8004a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a8a:	e009      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a8c:	f7fb ff34 	bl	80008f8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a9e:	e005      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ef      	beq.n	8004a8c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	4904      	ldr	r1, [pc, #16]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	07ff800f 	.word	0x07ff800f
 8004ad4:	ff9f800f 	.word	0xff9f800f
 8004ad8:	f9ff800f 	.word	0xf9ff800f

08004adc <memset>:
 8004adc:	4402      	add	r2, r0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <memset+0xa>
 8004ae4:	4770      	bx	lr
 8004ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aea:	e7f9      	b.n	8004ae0 <memset+0x4>

08004aec <__libc_init_array>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	4d0d      	ldr	r5, [pc, #52]	@ (8004b24 <__libc_init_array+0x38>)
 8004af0:	4c0d      	ldr	r4, [pc, #52]	@ (8004b28 <__libc_init_array+0x3c>)
 8004af2:	1b64      	subs	r4, r4, r5
 8004af4:	10a4      	asrs	r4, r4, #2
 8004af6:	2600      	movs	r6, #0
 8004af8:	42a6      	cmp	r6, r4
 8004afa:	d109      	bne.n	8004b10 <__libc_init_array+0x24>
 8004afc:	4d0b      	ldr	r5, [pc, #44]	@ (8004b2c <__libc_init_array+0x40>)
 8004afe:	4c0c      	ldr	r4, [pc, #48]	@ (8004b30 <__libc_init_array+0x44>)
 8004b00:	f000 f818 	bl	8004b34 <_init>
 8004b04:	1b64      	subs	r4, r4, r5
 8004b06:	10a4      	asrs	r4, r4, #2
 8004b08:	2600      	movs	r6, #0
 8004b0a:	42a6      	cmp	r6, r4
 8004b0c:	d105      	bne.n	8004b1a <__libc_init_array+0x2e>
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
 8004b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b14:	4798      	blx	r3
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7ee      	b.n	8004af8 <__libc_init_array+0xc>
 8004b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1e:	4798      	blx	r3
 8004b20:	3601      	adds	r6, #1
 8004b22:	e7f2      	b.n	8004b0a <__libc_init_array+0x1e>
 8004b24:	08004b8c 	.word	0x08004b8c
 8004b28:	08004b8c 	.word	0x08004b8c
 8004b2c:	08004b8c 	.word	0x08004b8c
 8004b30:	08004b90 	.word	0x08004b90

08004b34 <_init>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr

08004b40 <_fini>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr
