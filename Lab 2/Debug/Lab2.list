
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b8c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08009d50  08009d50  0000ad50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a204  0800a204  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a204  0800a204  0000b204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a20c  0800a20c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a20c  0800a20c  0000b20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a210  0800a210  0000b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a214  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001d4  0800a3e8  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800a3e8  0000c3b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6b4  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de9  00000000  00000000  000178b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  000196a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000881  00000000  00000000  0001a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b71b  00000000  00000000  0001aa91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba65  00000000  00000000  000461ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010be00  00000000  00000000  00051c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015da11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  0015da54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00161db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009d34 	.word	0x08009d34

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08009d34 	.word	0x08009d34

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d2c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d30:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d013      	beq.n	8000d64 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d3c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d40:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000d44:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00b      	beq.n	8000d64 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d4c:	e000      	b.n	8000d50 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d4e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f9      	beq.n	8000d4e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d5a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <getVoltage>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float getVoltage(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
	float adc_value;
	HAL_ADC_Start(&hadc1);
 8000d7a:	4816      	ldr	r0, [pc, #88]	@ (8000dd4 <getVoltage+0x60>)
 8000d7c:	f001 f830 	bl	8001de0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d84:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <getVoltage+0x60>)
 8000d86:	f001 f8c1 	bl	8001f0c <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8000d8a:	4812      	ldr	r0, [pc, #72]	@ (8000dd4 <getVoltage+0x60>)
 8000d8c:	f001 f94d 	bl	800202a <HAL_ADC_GetValue>
 8000d90:	ee07 0a90 	vmov	s15, r0
 8000d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d98:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8000d9c:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <getVoltage+0x60>)
 8000d9e:	f001 f882 	bl	8001ea6 <HAL_ADC_Stop>
	float vRef = (3.0f * (* VREF_CAL_ADDR))/((float) adc_value);
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <getVoltage+0x64>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dae:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000db2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000db6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dbe:	edc7 7a00 	vstr	s15, [r7]
	return vRef;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	ee07 3a90 	vmov	s15, r3
}
 8000dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001f0 	.word	0x200001f0
 8000dd8:	1fff75aa 	.word	0x1fff75aa

08000ddc <getTemperature>:

int8_t getTemperature(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
    uint16_t ts_cal1 = *TS_CAL1_ADDR;  // Read calibration value at 30°C
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <getTemperature+0x74>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	81fb      	strh	r3, [r7, #14]
    uint16_t ts_cal2 = *TS_CAL2_ADDR;  // Read calibration value at 130°C
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <getTemperature+0x78>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	81bb      	strh	r3, [r7, #12]

	uint32_t adc_value;
	HAL_ADC_Start(&hadc1);
 8000dee:	481a      	ldr	r0, [pc, #104]	@ (8000e58 <getTemperature+0x7c>)
 8000df0:	f000 fff6 	bl	8001de0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000df8:	4817      	ldr	r0, [pc, #92]	@ (8000e58 <getTemperature+0x7c>)
 8000dfa:	f001 f887 	bl	8001f0c <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8000dfe:	4816      	ldr	r0, [pc, #88]	@ (8000e58 <getTemperature+0x7c>)
 8000e00:	f001 f913 	bl	800202a <HAL_ADC_GetValue>
 8000e04:	60b8      	str	r0, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8000e06:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <getTemperature+0x7c>)
 8000e08:	f001 f84d 	bl	8001ea6 <HAL_ADC_Stop>
	return (((float)(TS_CAL2_TEMP - TS_CAL1_TEMP)) / (float)(ts_cal2 - ts_cal1)) *
 8000e0c:	89ba      	ldrh	r2, [r7, #12]
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000e5c <getTemperature+0x80>
 8000e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	           (adc_value - ts_cal1) + TS_CAL1_TEMP;
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	1ad3      	subs	r3, r2, r3
	return (((float)(TS_CAL2_TEMP - TS_CAL1_TEMP)) / (float)(ts_cal2 - ts_cal1)) *
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e30:	ee67 7a27 	vmul.f32	s15, s14, s15
	           (adc_value - ts_cal1) + TS_CAL1_TEMP;
 8000e34:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e40:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e44:	793b      	ldrb	r3, [r7, #4]
 8000e46:	b25b      	sxtb	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	1fff75a8 	.word	0x1fff75a8
 8000e54:	1fff75ca 	.word	0x1fff75ca
 8000e58:	200001f0 	.word	0x200001f0
 8000e5c:	42c80000 	.word	0x42c80000

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0a2      	sub	sp, #136	@ 0x88
 8000e64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f000 fbb4 	bl	80015d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 f885 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6e:	f000 f96b 	bl	8001148 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e72:	f000 f8d3 	bl	800101c <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  switch (state){
 8000e76:	4b3c      	ldr	r3, [pc, #240]	@ (8000f68 <main+0x108>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <main+0x26>
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d024      	beq.n	8000ece <main+0x6e>
 8000e84:	e04e      	b.n	8000f24 <main+0xc4>
  		  case 0:
  			  voltage = getVoltage();
 8000e86:	f7ff ff75 	bl	8000d74 <getVoltage>
 8000e8a:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
  			  uartLen = sprintf(data, "The voltage is: %.2fV\n", voltage);
 8000e8e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000e90:	f7ff fb72 	bl	8000578 <__aeabi_f2d>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	1d38      	adds	r0, r7, #4
 8000e9a:	4934      	ldr	r1, [pc, #208]	@ (8000f6c <main+0x10c>)
 8000e9c:	f005 fa4e 	bl	800633c <siprintf>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  for (int i = 0; i < uartLen; i++){
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000eaa:	e00a      	b.n	8000ec2 <main+0x62>
  				ITM_SendChar(data[i]);
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff34 	bl	8000d24 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8000ebc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ec2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000ec6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbef      	blt.n	8000eac <main+0x4c>
  			  }
  			  break;
 8000ecc:	e047      	b.n	8000f5e <main+0xfe>

  		  case 1:
  			  temperature = getTemperature();
 8000ece:	f7ff ff85 	bl	8000ddc <getTemperature>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000edc:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  			  uartLen = sprintf(data, "The temperature is: %.2f%cC\n", temperature, 176);
 8000ee0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000ee2:	f7ff fb49 	bl	8000578 <__aeabi_f2d>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	1d38      	adds	r0, r7, #4
 8000eec:	21b0      	movs	r1, #176	@ 0xb0
 8000eee:	9100      	str	r1, [sp, #0]
 8000ef0:	491f      	ldr	r1, [pc, #124]	@ (8000f70 <main+0x110>)
 8000ef2:	f005 fa23 	bl	800633c <siprintf>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  for (int i = 0; i < uartLen; i++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000f00:	e00a      	b.n	8000f18 <main+0xb8>
  				ITM_SendChar(data[i]);
 8000f02:	1d3a      	adds	r2, r7, #4
 8000f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f06:	4413      	add	r3, r2
 8000f08:	f993 3000 	ldrsb.w	r3, [r3]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff09 	bl	8000d24 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8000f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f14:	3301      	adds	r3, #1
 8000f16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000f18:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f1c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbef      	blt.n	8000f02 <main+0xa2>
  			  }
  			  break;
 8000f22:	e01c      	b.n	8000f5e <main+0xfe>
  		  default:
  			  uartLen = sprintf("The state is: %d\n", state);
 8000f24:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <main+0x108>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <main+0x114>)
 8000f2e:	f005 fa05 	bl	800633c <siprintf>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  for (int i = 0; i < uartLen; i++){
 8000f38:	2300      	movs	r3, #0
 8000f3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f3c:	e00a      	b.n	8000f54 <main+0xf4>
  				ITM_SendChar(data[i]);
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f42:	4413      	add	r3, r2
 8000f44:	f993 3000 	ldrsb.w	r3, [r3]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff feeb 	bl	8000d24 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8000f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f50:	3301      	adds	r3, #1
 8000f52:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f54:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f58:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbef      	blt.n	8000f3e <main+0xde>
  			  }

  	  }
  	  HAL_Delay(1000);
 8000f5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f62:	f000 fbab 	bl	80016bc <HAL_Delay>
  	  switch (state){
 8000f66:	e786      	b.n	8000e76 <main+0x16>
 8000f68:	20000258 	.word	0x20000258
 8000f6c:	08009d50 	.word	0x08009d50
 8000f70:	08009d68 	.word	0x08009d68
 8000f74:	08009d88 	.word	0x08009d88

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b096      	sub	sp, #88	@ 0x58
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2244      	movs	r2, #68	@ 0x44
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 f950 	bl	800722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f002 ff06 	bl	8003dac <HAL_PWREx_ControlVoltageScaling>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000fa6:	f000 f947 	bl	8001238 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000faa:	2310      	movs	r3, #16
 8000fac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fb6:	2360      	movs	r3, #96	@ 0x60
 8000fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000fc6:	233c      	movs	r3, #60	@ 0x3c
 8000fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 ff8a 	bl	8003ef4 <HAL_RCC_OscConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fe6:	f000 f927 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	230f      	movs	r3, #15
 8000fec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2105      	movs	r1, #5
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fb90 	bl	8004728 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800100e:	f000 f913 	bl	8001238 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3758      	adds	r7, #88	@ 0x58
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	@ 0x50
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2234      	movs	r2, #52	@ 0x34
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f006 f8f6 	bl	800722c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001040:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <MX_ADC1_Init+0x120>)
 8001042:	4a3f      	ldr	r2, [pc, #252]	@ (8001140 <MX_ADC1_Init+0x124>)
 8001044:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001046:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <MX_ADC1_Init+0x120>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <MX_ADC1_Init+0x120>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001052:	4b3a      	ldr	r3, [pc, #232]	@ (800113c <MX_ADC1_Init+0x120>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001058:	4b38      	ldr	r3, [pc, #224]	@ (800113c <MX_ADC1_Init+0x120>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105e:	4b37      	ldr	r3, [pc, #220]	@ (800113c <MX_ADC1_Init+0x120>)
 8001060:	2204      	movs	r2, #4
 8001062:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001064:	4b35      	ldr	r3, [pc, #212]	@ (800113c <MX_ADC1_Init+0x120>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800106a:	4b34      	ldr	r3, [pc, #208]	@ (800113c <MX_ADC1_Init+0x120>)
 800106c:	2200      	movs	r2, #0
 800106e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <MX_ADC1_Init+0x120>)
 8001072:	2201      	movs	r2, #1
 8001074:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b31      	ldr	r3, [pc, #196]	@ (800113c <MX_ADC1_Init+0x120>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107e:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <MX_ADC1_Init+0x120>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001084:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <MX_ADC1_Init+0x120>)
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <MX_ADC1_Init+0x120>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001092:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <MX_ADC1_Init+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_ADC1_Init+0x120>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a0:	4826      	ldr	r0, [pc, #152]	@ (800113c <MX_ADC1_Init+0x120>)
 80010a2:	f000 fd57 	bl	8001b54 <HAL_ADC_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010ac:	f000 f8c4 	bl	8001238 <Error_Handler>
  }

  /** Disable Injected Queue
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc1);
 80010b0:	4822      	ldr	r0, [pc, #136]	@ (800113c <MX_ADC1_Init+0x120>)
 80010b2:	f002 fb45 	bl	8003740 <HAL_ADCEx_DisableInjectedQueue>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <MX_ADC1_Init+0x128>)
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ba:	2306      	movs	r3, #6
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80010be:	2306      	movs	r3, #6
 80010c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c2:	237f      	movs	r3, #127	@ 0x7f
 80010c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c6:	2304      	movs	r3, #4
 80010c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.Offset = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010d2:	4619      	mov	r1, r3
 80010d4:	4819      	ldr	r0, [pc, #100]	@ (800113c <MX_ADC1_Init+0x120>)
 80010d6:	f000 ffb5 	bl	8002044 <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010e0:	f000 f8aa 	bl	8001238 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 80010e4:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_ADC1_Init+0x128>)
 80010e6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80010e8:	2308      	movs	r3, #8
 80010ea:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80010ec:	2306      	movs	r3, #6
 80010ee:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80010f0:	237f      	movs	r3, #127	@ 0x7f
 80010f2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80010f4:	2304      	movs	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sConfigInjected.QueueInjectedContext = DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_ADC1_Init+0x120>)
 8001126:	f001 fe51 	bl	8002dcc <HAL_ADCEx_InjectedConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001130:	f000 f882 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	@ 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200001f0 	.word	0x200001f0
 8001140:	50040000 	.word	0x50040000
 8001144:	c7520000 	.word	0xc7520000

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <MX_GPIO_Init+0xa4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a22      	ldr	r2, [pc, #136]	@ (80011ec <MX_GPIO_Init+0xa4>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <MX_GPIO_Init+0xa4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_GPIO_Init+0xa4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <MX_GPIO_Init+0xa4>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_GPIO_Init+0xa4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001194:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <MX_GPIO_Init+0xa8>)
 8001196:	f002 fd9f 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800119a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <MX_GPIO_Init+0xac>)
 80011b2:	f002 fbff 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <MX_GPIO_Init+0xa8>)
 80011d0:	f002 fbf0 	bl	80039b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2028      	movs	r0, #40	@ 0x28
 80011da:	f002 fbb4 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011de:	2028      	movs	r0, #40	@ 0x28
 80011e0:	f002 fbcd 	bl	800397e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800

080011f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == User_Button_Pin) {
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001208:	d10d      	bne.n	8001226 <HAL_GPIO_EXTI_Callback+0x2e>
	state ^= 1;
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x38>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f083 0301 	eor.w	r3, r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x38>)
 8001218:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800121a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001220:	f002 fd72 	bl	8003d08 <HAL_GPIO_TogglePin>
//    HAL_Delay(1000);
  } else {
      __NOP();
  }
}
 8001224:	e000      	b.n	8001228 <HAL_GPIO_EXTI_Callback+0x30>
      __NOP();
 8001226:	bf00      	nop
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000258 	.word	0x20000258
 8001234:	48000400 	.word	0x48000400

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_MspInit+0x44>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6613      	str	r3, [r2, #96]	@ 0x60
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_MspInit+0x44>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <HAL_MspInit+0x44>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	6593      	str	r3, [r2, #88]	@ 0x58
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_MspInit+0x44>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ae      	sub	sp, #184	@ 0xb8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	2294      	movs	r2, #148	@ 0x94
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 ffbd 	bl	800722c <memset>
  if(hadc->Instance==ADC1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <HAL_ADC_MspInit+0xc8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d146      	bne.n	800134a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012ca:	2301      	movs	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012d2:	2318      	movs	r3, #24
 80012d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012da:	2302      	movs	r3, #2
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80012e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fca1 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012f8:	f7ff ff9e 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012fc:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_ADC_MspInit+0xcc>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001300:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <HAL_ADC_MspInit+0xcc>)
 8001302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001306:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <HAL_ADC_MspInit+0xcc>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <HAL_ADC_MspInit+0xcc>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a0f      	ldr	r2, [pc, #60]	@ (8001358 <HAL_ADC_MspInit+0xcc>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001320:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <HAL_ADC_MspInit+0xcc>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800132c:	2301      	movs	r3, #1
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001332:	230b      	movs	r3, #11
 8001334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <HAL_ADC_MspInit+0xd0>)
 8001346:	f002 fb35 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	37b8      	adds	r7, #184	@ 0xb8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	50040000 	.word	0x50040000
 8001358:	40021000 	.word	0x40021000
 800135c:	48000800 	.word	0x48000800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f000 f961 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}

080013be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80013c2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013c6:	f002 fcb9 	bl	8003d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_kill>:

int _kill(int pid, int sig)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e8:	f005 ff2c 	bl	8007244 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2216      	movs	r2, #22
 80013f0:	601a      	str	r2, [r3, #0]
  return -1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_exit>:

void _exit (int status)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001406:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffe7 	bl	80013de <_kill>
  while (1) {}    /* Make sure we hang here */
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <_exit+0x12>

08001414 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
  }

  return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e009      	b.n	8001474 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf1      	blt.n	8001460 <_write+0x12>
  }
  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_close>:

int _close(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ae:	605a      	str	r2, [r3, #4]
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_isatty>:

int _isatty(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f005 fe90 	bl	8007244 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200a0000 	.word	0x200a0000
 8001550:	00000400 	.word	0x00000400
 8001554:	2000025c 	.word	0x2000025c
 8001558:	200003b0 	.word	0x200003b0

0800155c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	@ (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001584:	f7ff ffea 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopForever+0x6>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <LoopForever+0xe>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	@ (80015cc <LoopForever+0x16>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f005 fe4f 	bl	8007250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015b2:	f7ff fc55 	bl	8000e60 <main>

080015b6 <LoopForever>:

LoopForever:
    b LoopForever
 80015b6:	e7fe      	b.n	80015b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015c4:	0800a214 	.word	0x0800a214
  ldr r2, =_sbss
 80015c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015cc:	200003b0 	.word	0x200003b0

080015d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_IRQHandler>

080015d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f002 f9a7 	bl	8003930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f80e 	bl	8001604 <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	e001      	b.n	80015f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f4:	f7ff fe26 	bl	8001244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <HAL_InitTick+0x6c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d023      	beq.n	8001660 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_InitTick+0x70>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_InitTick+0x6c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f002 f9b3 	bl	800399a <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d809      	bhi.n	8001654 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001648:	f002 f97d 	bl	8003946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164c:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_InitTick+0x74>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e007      	b.n	8001664 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e004      	b.n	8001664 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e001      	b.n	8001664 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000260 	.word	0x20000260

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000260 	.word	0x20000260

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008

08001704 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	609a      	str	r2, [r3, #8]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3360      	adds	r3, #96	@ 0x60
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <LL_ADC_SetOffset+0x44>)
 800178e:	4013      	ands	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	4313      	orrs	r3, r2
 800179c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	03fff000 	.word	0x03fff000

080017b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3360      	adds	r3, #96	@ 0x60
 80017c2:	461a      	mov	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3360      	adds	r3, #96	@ 0x60
 80017f0:	461a      	mov	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	431a      	orrs	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	615a      	str	r2, [r3, #20]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001862:	b480      	push	{r7}
 8001864:	b087      	sub	sp, #28
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3330      	adds	r3, #48	@ 0x30
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	4413      	add	r3, r2
 8001880:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	211f      	movs	r1, #31
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	401a      	ands	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0e9b      	lsrs	r3, r3, #26
 800189a:	f003 011f 	and.w	r1, r3, #31
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	431a      	orrs	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b087      	sub	sp, #28
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3314      	adds	r3, #20
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	0e5b      	lsrs	r3, r3, #25
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	0d1b      	lsrs	r3, r3, #20
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	2107      	movs	r1, #7
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	0d1b      	lsrs	r3, r3, #20
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0318 	and.w	r3, r3, #24
 8001932:	4908      	ldr	r1, [pc, #32]	@ (8001954 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001934:	40d9      	lsrs	r1, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	400b      	ands	r3, r1
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	431a      	orrs	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	0007ffff 	.word	0x0007ffff

08001958 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6093      	str	r3, [r2, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800198c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80019b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a30:	f043 0202 	orr.w	r2, r3, #2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <LL_ADC_IsEnabled+0x18>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <LL_ADC_IsEnabled+0x1a>
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d101      	bne.n	8001a82 <LL_ADC_IsDisableOngoing+0x18>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_ADC_IsDisableOngoing+0x1a>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aa4:	f043 0204 	orr.w	r2, r3, #4
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d101      	bne.n	8001af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b1a:	f043 0220 	orr.w	r2, r3, #32
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e129      	b.n	8001dc2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fb85 	bl	800128c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fef1 	bl	800197c <LL_ADC_IsDeepPowerDownEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fed7 	bl	8001958 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff0c 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d115      	bne.n	8001be6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fef0 	bl	80019a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc4:	4b81      	ldr	r3, [pc, #516]	@ (8001dcc <HAL_ADC_Init+0x278>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	4a81      	ldr	r2, [pc, #516]	@ (8001dd0 <HAL_ADC_Init+0x27c>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff feee 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10d      	bne.n	8001c12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	f043 0210 	orr.w	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff62 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001c1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 80c2 	bne.w	8001db0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 80be 	bne.w	8001db0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c3c:	f043 0202 	orr.w	r2, r3, #2
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fefb 	bl	8001a44 <LL_ADC_IsEnabled>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10b      	bne.n	8001c6c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c54:	485f      	ldr	r0, [pc, #380]	@ (8001dd4 <HAL_ADC_Init+0x280>)
 8001c56:	f7ff fef5 	bl	8001a44 <LL_ADC_IsEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4619      	mov	r1, r3
 8001c66:	485c      	ldr	r0, [pc, #368]	@ (8001dd8 <HAL_ADC_Init+0x284>)
 8001c68:	f7ff fd4c 	bl	8001704 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e5b      	ldrb	r3, [r3, #25]
 8001c70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d106      	bne.n	8001ca8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	045b      	lsls	r3, r3, #17
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b44      	ldr	r3, [pc, #272]	@ (8001ddc <HAL_ADC_Init+0x288>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff26 	bl	8001b2e <LL_ADC_INJ_IsConversionOngoing>
 8001ce2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d140      	bne.n	8001d6c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d13d      	bne.n	8001d6c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7e1b      	ldrb	r3, [r3, #24]
 8001cf8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cfa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d12:	f023 0306 	bic.w	r3, r3, #6
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d118      	bne.n	8001d5c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	e007      	b.n	8001d6c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d10c      	bne.n	8001d8e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f023 010f 	bic.w	r1, r3, #15
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d8c:	e007      	b.n	8001d9e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 020f 	bic.w	r2, r2, #15
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dae:	e007      	b.n	8001dc0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	053e2d63 	.word	0x053e2d63
 8001dd4:	50040000 	.word	0x50040000
 8001dd8:	50040300 	.word	0x50040300
 8001ddc:	fff0c007 	.word	0xfff0c007

08001de0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe77 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d14f      	bne.n	8001e98 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Start+0x26>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e04b      	b.n	8001e9e <HAL_ADC_Start+0xbe>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fdd0 	bl	80029b4 <ADC_Enable>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d137      	bne.n	8001e8e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	f023 0206 	bic.w	r2, r3, #6
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	221c      	movs	r2, #28
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe02 	bl	8001a90 <LL_ADC_REG_StartConversion>
 8001e8c:	e006      	b.n	8001e9c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001e96:	e001      	b.n	8001e9c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_Stop+0x16>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e023      	b.n	8001f04 <HAL_ADC_Stop+0x5e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fcb8 	bl	800283c <ADC_ConversionStop>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d111      	bne.n	8001efa <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fdf2 	bl	8002ac0 <ADC_Disable>
 8001edc:	4603      	mov	r3, r0
 8001ede:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d102      	bne.n	8001f24 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e010      	b.n	8001f46 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06f      	b.n	8002022 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001f42:	2304      	movs	r3, #4
 8001f44:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f46:	f7ff fbad 	bl	80016a4 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f4c:	e021      	b.n	8001f92 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f54:	d01d      	beq.n	8001f92 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f56:	f7ff fba5 	bl	80016a4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <HAL_ADC_PollForConversion+0x60>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d112      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10b      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	f043 0204 	orr.w	r2, r3, #4
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e047      	b.n	8002022 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0d6      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fc43 	bl	800183c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01c      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7e5b      	ldrb	r3, [r3, #25]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d118      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d111      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d104      	bne.n	800200e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2208      	movs	r2, #8
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e008      	b.n	8002020 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	220c      	movs	r2, #12
 800201e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0b6      	sub	sp, #216	@ 0xd8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x22>
 8002062:	2302      	movs	r3, #2
 8002064:	e3d5      	b.n	8002812 <HAL_ADC_ConfigChannel+0x7ce>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fd34 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 83ba 	bne.w	80027f4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b05      	cmp	r3, #5
 800208e:	d824      	bhi.n	80020da <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	3b02      	subs	r3, #2
 8002096:	2b03      	cmp	r3, #3
 8002098:	d81b      	bhi.n	80020d2 <HAL_ADC_ConfigChannel+0x8e>
 800209a:	a201      	add	r2, pc, #4	@ (adr r2, 80020a0 <HAL_ADC_ConfigChannel+0x5c>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	080020b1 	.word	0x080020b1
 80020a4:	080020b9 	.word	0x080020b9
 80020a8:	080020c1 	.word	0x080020c1
 80020ac:	080020c9 	.word	0x080020c9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020b0:	230c      	movs	r3, #12
 80020b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020b6:	e010      	b.n	80020da <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020b8:	2312      	movs	r3, #18
 80020ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020be:	e00c      	b.n	80020da <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020c0:	2318      	movs	r3, #24
 80020c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020c6:	e008      	b.n	80020da <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80020c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020d0:	e003      	b.n	80020da <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80020d2:	2306      	movs	r3, #6
 80020d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020d8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80020e8:	f7ff fbbb 	bl	8001862 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fcf5 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 80020f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fd15 	bl	8001b2e <LL_ADC_INJ_IsConversionOngoing>
 8002104:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002108:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 81bf 	bne.w	8002490 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 81ba 	bne.w	8002490 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002124:	d10f      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	4619      	mov	r1, r3
 8002132:	f7ff fbc2 	bl	80018ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fb69 	bl	8001816 <LL_ADC_SetSamplingTimeCommonConfig>
 8002144:	e00e      	b.n	8002164 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	461a      	mov	r2, r3
 8002154:	f7ff fbb1 	bl	80018ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fb59 	bl	8001816 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	08db      	lsrs	r3, r3, #3
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b04      	cmp	r3, #4
 8002184:	d00a      	beq.n	800219c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002196:	f7ff fae9 	bl	800176c <LL_ADC_SetOffset>
 800219a:	e179      	b.n	8002490 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fb06 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x184>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fafb 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	f003 021f 	and.w	r2, r3, #31
 80021c6:	e01e      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1c2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff faf0 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e004      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80021fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_ADC_ConfigChannel+0x1da>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0e9b      	lsrs	r3, r3, #26
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	e018      	b.n	8002250 <HAL_ADC_ConfigChannel+0x20c>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800223a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e004      	b.n	8002250 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fabf 	bl	80017e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff faa3 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <HAL_ADC_ConfigChannel+0x24a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fa98 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	e01e      	b.n	80022cc <HAL_ADC_ConfigChannel+0x288>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fa8d 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e004      	b.n	80022ca <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80022c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x2a0>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	e018      	b.n	8002316 <HAL_ADC_ConfigChannel+0x2d2>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80022f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e004      	b.n	8002316 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002316:	429a      	cmp	r2, r3
 8002318:	d106      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fa5c 	bl	80017e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2102      	movs	r1, #2
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fa40 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x310>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2102      	movs	r1, #2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fa35 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 021f 	and.w	r2, r3, #31
 8002352:	e01e      	b.n	8002392 <HAL_ADC_ConfigChannel+0x34e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fa2a 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800237a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e004      	b.n	8002390 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x366>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0e9b      	lsrs	r3, r3, #26
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	e014      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x390>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80023be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80023c6:	2320      	movs	r3, #32
 80023c8:	e004      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80023ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d106      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff f9fd 	bl	80017e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2103      	movs	r1, #3
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff f9e1 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x3ce>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2103      	movs	r1, #3
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff f9d6 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	e017      	b.n	8002442 <HAL_ADC_ConfigChannel+0x3fe>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2103      	movs	r1, #3
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff f9cb 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800242a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800242c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800242e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e003      	b.n	8002440 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_ADC_ConfigChannel+0x416>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	e011      	b.n	800247e <HAL_ADC_ConfigChannel+0x43a>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002468:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800246c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e003      	b.n	800247e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800247e:	429a      	cmp	r2, r3
 8002480:	d106      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	2103      	movs	r1, #3
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f9a8 	bl	80017e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fad5 	bl	8001a44 <LL_ADC_IsEnabled>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 813f 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	461a      	mov	r2, r3
 80024b0:	f7ff fa2e 	bl	8001910 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a8e      	ldr	r2, [pc, #568]	@ (80026f4 <HAL_ADC_ConfigChannel+0x6b0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f040 8130 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x4a4>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	3301      	adds	r3, #1
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2b09      	cmp	r3, #9
 80024de:	bf94      	ite	ls
 80024e0:	2301      	movls	r3, #1
 80024e2:	2300      	movhi	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e019      	b.n	800251c <HAL_ADC_ConfigChannel+0x4d8>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002504:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2b09      	cmp	r3, #9
 8002514:	bf94      	ite	ls
 8002516:	2301      	movls	r3, #1
 8002518:	2300      	movhi	r3, #0
 800251a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251c:	2b00      	cmp	r3, #0
 800251e:	d079      	beq.n	8002614 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x4f8>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	3301      	adds	r3, #1
 8002534:	069b      	lsls	r3, r3, #26
 8002536:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800253a:	e015      	b.n	8002568 <HAL_ADC_ConfigChannel+0x524>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800254a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800254c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800254e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e003      	b.n	8002560 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	069b      	lsls	r3, r3, #26
 8002564:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x544>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2101      	movs	r1, #1
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	e017      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x574>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002598:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800259a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e003      	b.n	80025ac <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80025a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	ea42 0103 	orr.w	r1, r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <HAL_ADC_ConfigChannel+0x59a>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	051b      	lsls	r3, r3, #20
 80025dc:	e018      	b.n	8002610 <HAL_ADC_ConfigChannel+0x5cc>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e003      	b.n	8002602 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80025fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002610:	430b      	orrs	r3, r1
 8002612:	e080      	b.n	8002716 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x5ec>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	3301      	adds	r3, #1
 8002628:	069b      	lsls	r3, r3, #26
 800262a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800262e:	e015      	b.n	800265c <HAL_ADC_ConfigChannel+0x618>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e003      	b.n	8002654 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800264c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	069b      	lsls	r3, r3, #26
 8002658:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_ADC_ConfigChannel+0x638>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	e017      	b.n	80026ac <HAL_ADC_ConfigChannel+0x668>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	61bb      	str	r3, [r7, #24]
  return result;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e003      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	ea42 0103 	orr.w	r1, r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x694>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	3b1e      	subs	r3, #30
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026d6:	e01d      	b.n	8002714 <HAL_ADC_ConfigChannel+0x6d0>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	60fb      	str	r3, [r7, #12]
  return result;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e005      	b.n	8002700 <HAL_ADC_ConfigChannel+0x6bc>
 80026f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	f003 021f 	and.w	r2, r3, #31
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	3b1e      	subs	r3, #30
 800270e:	051b      	lsls	r3, r3, #20
 8002710:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002714:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271a:	4619      	mov	r1, r3
 800271c:	f7ff f8cd 	bl	80018ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b3d      	ldr	r3, [pc, #244]	@ (800281c <HAL_ADC_ConfigChannel+0x7d8>)
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d06c      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800272c:	483c      	ldr	r0, [pc, #240]	@ (8002820 <HAL_ADC_ConfigChannel+0x7dc>)
 800272e:	f7ff f80f 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 8002732:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a3a      	ldr	r2, [pc, #232]	@ (8002824 <HAL_ADC_ConfigChannel+0x7e0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d127      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d121      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a35      	ldr	r2, [pc, #212]	@ (8002828 <HAL_ADC_ConfigChannel+0x7e4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d157      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800275a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800275e:	4619      	mov	r1, r3
 8002760:	482f      	ldr	r0, [pc, #188]	@ (8002820 <HAL_ADC_ConfigChannel+0x7dc>)
 8002762:	f7fe ffe2 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002766:	4b31      	ldr	r3, [pc, #196]	@ (800282c <HAL_ADC_ConfigChannel+0x7e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	4a30      	ldr	r2, [pc, #192]	@ (8002830 <HAL_ADC_ConfigChannel+0x7ec>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002780:	e002      	b.n	8002788 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3b01      	subs	r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800278e:	e03a      	b.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a27      	ldr	r2, [pc, #156]	@ (8002834 <HAL_ADC_ConfigChannel+0x7f0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d113      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800279a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800279e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <HAL_ADC_ConfigChannel+0x7e4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d12a      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b8:	4619      	mov	r1, r3
 80027ba:	4819      	ldr	r0, [pc, #100]	@ (8002820 <HAL_ADC_ConfigChannel+0x7dc>)
 80027bc:	f7fe ffb5 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c0:	e021      	b.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <HAL_ADC_ConfigChannel+0x7f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d11c      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d116      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <HAL_ADC_ConfigChannel+0x7e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d111      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027ea:	4619      	mov	r1, r3
 80027ec:	480c      	ldr	r0, [pc, #48]	@ (8002820 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ee:	f7fe ff9c 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
 80027f2:	e008      	b.n	8002806 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800280e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002812:	4618      	mov	r0, r3
 8002814:	37d8      	adds	r7, #216	@ 0xd8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	80080000 	.word	0x80080000
 8002820:	50040300 	.word	0x50040300
 8002824:	c7520000 	.word	0xc7520000
 8002828:	50040000 	.word	0x50040000
 800282c:	20000000 	.word	0x20000000
 8002830:	053e2d63 	.word	0x053e2d63
 8002834:	cb840000 	.word	0xcb840000
 8002838:	80000001 	.word	0x80000001

0800283c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f944 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8002858:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f965 	bl	8001b2e <LL_ADC_INJ_IsConversionOngoing>
 8002864:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8098 	beq.w	80029a4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d02a      	beq.n	80028d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7e5b      	ldrb	r3, [r3, #25]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d126      	bne.n	80028d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7e1b      	ldrb	r3, [r3, #24]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d122      	bne.n	80028d8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002892:	2301      	movs	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002896:	e014      	b.n	80028c2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4a45      	ldr	r2, [pc, #276]	@ (80029b0 <ADC_ConversionStop+0x174>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d90d      	bls.n	80028bc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	f043 0210 	orr.w	r2, r3, #16
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e074      	b.n	80029a6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	3301      	adds	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b40      	cmp	r3, #64	@ 0x40
 80028ce:	d1e3      	bne.n	8002898 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2240      	movs	r2, #64	@ 0x40
 80028d6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d014      	beq.n	8002908 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f8fc 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f8b9 	bl	8001a6a <LL_ADC_IsDisableOngoing>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f8d8 	bl	8001ab8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d014      	beq.n	8002938 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f90b 	bl	8001b2e <LL_ADC_INJ_IsConversionOngoing>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00c      	beq.n	8002938 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f8a1 	bl	8001a6a <LL_ADC_IsDisableOngoing>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f8e7 	bl	8001b06 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d005      	beq.n	800294a <ADC_ConversionStop+0x10e>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d105      	bne.n	8002950 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002944:	230c      	movs	r3, #12
 8002946:	617b      	str	r3, [r7, #20]
        break;
 8002948:	e005      	b.n	8002956 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800294a:	2308      	movs	r3, #8
 800294c:	617b      	str	r3, [r7, #20]
        break;
 800294e:	e002      	b.n	8002956 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002950:	2304      	movs	r3, #4
 8002952:	617b      	str	r3, [r7, #20]
        break;
 8002954:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002956:	f7fe fea5 	bl	80016a4 <HAL_GetTick>
 800295a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800295c:	e01b      	b.n	8002996 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800295e:	f7fe fea1 	bl	80016a4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b05      	cmp	r3, #5
 800296a:	d914      	bls.n	8002996 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e007      	b.n	80029a6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1dc      	bne.n	800295e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3720      	adds	r7, #32
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	a33fffff 	.word	0xa33fffff

080029b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f83d 	bl	8001a44 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d169      	bne.n	8002aa4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <ADC_Enable+0xfc>)
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e055      	b.n	8002aa6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fff8 	bl	80019f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a04:	482b      	ldr	r0, [pc, #172]	@ (8002ab4 <ADC_Enable+0x100>)
 8002a06:	f7fe fea3 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 8002a0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <ADC_Enable+0x104>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	4a28      	ldr	r2, [pc, #160]	@ (8002abc <ADC_Enable+0x108>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a2e:	e002      	b.n	8002a36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fe32 	bl	80016a4 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a42:	e028      	b.n	8002a96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe fffb 	bl	8001a44 <LL_ADC_IsEnabled>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe ffcb 	bl	80019f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a5e:	f7fe fe21 	bl	80016a4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d914      	bls.n	8002a96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d00d      	beq.n	8002a96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e007      	b.n	8002aa6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d1cf      	bne.n	8002a44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	8000003f 	.word	0x8000003f
 8002ab4:	50040300 	.word	0x50040300
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	053e2d63 	.word	0x053e2d63

08002ac0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe ffcc 	bl	8001a6a <LL_ADC_IsDisableOngoing>
 8002ad2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe ffb3 	bl	8001a44 <LL_ADC_IsEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d047      	beq.n	8002b74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d144      	bne.n	8002b74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030d 	and.w	r3, r3, #13
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10c      	bne.n	8002b12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe ff8d 	bl	8001a1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2203      	movs	r2, #3
 8002b08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b0a:	f7fe fdcb 	bl	80016a4 <HAL_GetTick>
 8002b0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b10:	e029      	b.n	8002b66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e023      	b.n	8002b76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b2e:	f7fe fdb9 	bl	80016a4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d914      	bls.n	8002b66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e007      	b.n	8002b76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1dc      	bne.n	8002b2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <LL_ADC_SetCommonPathInternalCh>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_GetCommonPathInternalCh>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_SetOffset>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3360      	adds	r3, #96	@ 0x60
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <LL_ADC_SetOffset+0x44>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	601a      	str	r2, [r3, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	03fff000 	.word	0x03fff000

08002c08 <LL_ADC_GetOffsetChannel>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3360      	adds	r3, #96	@ 0x60
 8002c16:	461a      	mov	r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_SetOffsetState>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3360      	adds	r3, #96	@ 0x60
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	601a      	str	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	615a      	str	r2, [r3, #20]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_INJ_SetQueueMode>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ca2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60da      	str	r2, [r3, #12]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_SetChannelSamplingTime>:
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	0e5b      	lsrs	r3, r3, #25
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	4413      	add	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	0d1b      	lsrs	r3, r3, #20
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2107      	movs	r1, #7
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	0d1b      	lsrs	r3, r3, #20
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	bf00      	nop
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_SetChannelSingleDiff>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0318 	and.w	r3, r3, #24
 8002d32:	4908      	ldr	r1, [pc, #32]	@ (8002d54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d34:	40d9      	lsrs	r1, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	400b      	ands	r3, r1
 8002d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	0007ffff 	.word	0x0007ffff

08002d58 <LL_ADC_IsEnabled>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_IsEnabled+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_IsEnabled+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d101      	bne.n	8002dbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b0b6      	sub	sp, #216	@ 0xd8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002df0:	2302      	movs	r3, #2
 8002df2:	f000 bc90 	b.w	8003716 <HAL_ADCEx_InjectedConfigChannel+0x94a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d130      	bne.n	8002e70 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d179      	bne.n	8002f0a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	f403 52f8 	and.w	r2, r3, #7936	@ 0x1f00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002e32:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e3e:	e007      	b.n	8002e50 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e56:	4b96      	ldr	r3, [pc, #600]	@ (80030b0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e62:	430b      	orrs	r3, r1
 8002e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e6c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002e6e:	e04c      	b.n	8002f0a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11d      	bne.n	8002eb4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002e9c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ea8:	e004      	b.n	8002eb4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ee2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002efa:	4b6d      	ldr	r3, [pc, #436]	@ (80030b0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff48 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d120      	bne.n	8002f5c <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	7f5b      	ldrb	r3, [r3, #29]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d110      	bne.n	8002f44 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	7f9b      	ldrb	r3, [r3, #30]
 8002f30:	055a      	lsls	r2, r3, #21
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	7f1b      	ldrb	r3, [r3, #28]
 8002f36:	051b      	lsls	r3, r3, #20
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	e00b      	b.n	8002f5c <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	7f9b      	ldrb	r3, [r3, #30]
 8002f52:	055a      	lsls	r2, r3, #21
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff0c 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 8002f66:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff18 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 8002f74:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 8213 	bne.w	80033a8 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 820e 	bne.w	80033a8 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d115      	bne.n	8002fc8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	7f5b      	ldrb	r3, [r3, #29]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d108      	bne.n	8002fb6 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002fb2:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002fb4:	e01e      	b.n	8002ff4 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002fc4:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002fc6:	e015      	b.n	8002ff4 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	7f5b      	ldrb	r3, [r3, #29]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d109      	bne.n	8002fe4 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	659a      	str	r2, [r3, #88]	@ 0x58

        tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002fe2:	e007      	b.n	8002ff4 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002ff2:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d110      	bne.n	8003020 <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	430b      	orrs	r3, r1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0202 	orr.w	r2, r2, #2
 800301c:	611a      	str	r2, [r3, #16]
 800301e:	e007      	b.n	8003030 <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0202 	bic.w	r2, r2, #2
 800302e:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003038:	d10f      	bne.n	800305a <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	4619      	mov	r1, r3
 8003046:	f7ff fe38 	bl	8002cba <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fe09 	bl	8002c6a <LL_ADC_SetSamplingTimeCommonConfig>
 8003058:	e00e      	b.n	8003078 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003066:	461a      	mov	r2, r3
 8003068:	f7ff fe27 	bl	8002cba <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fdf9 	bl	8002c6a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00c      	beq.n	80030b4 <HAL_ADCEx_InjectedConfigChannel+0x2e8>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030aa:	f7ff fd89 	bl	8002bc0 <LL_ADC_SetOffset>
 80030ae:	e17b      	b.n	80033a8 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
 80030b0:	82082000 	.word	0x82082000
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fda4 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_ADCEx_InjectedConfigChannel+0x314>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fd99 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	e01e      	b.n	800311e <HAL_ADCEx_InjectedConfigChannel+0x352>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fd8e 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80030fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003102:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_ADCEx_InjectedConfigChannel+0x346>
    return 32U;
 800310e:	2320      	movs	r3, #32
 8003110:	e004      	b.n	800311c <HAL_ADCEx_InjectedConfigChannel+0x350>
  return __builtin_clz(value);
 8003112:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_ADCEx_InjectedConfigChannel+0x36a>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	e018      	b.n	8003168 <HAL_ADCEx_InjectedConfigChannel+0x39c>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800314a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003152:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADCEx_InjectedConfigChannel+0x392>
    return 32U;
 800315a:	2320      	movs	r3, #32
 800315c:	e004      	b.n	8003168 <HAL_ADCEx_InjectedConfigChannel+0x39c>
  return __builtin_clz(value);
 800315e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_ADCEx_InjectedConfigChannel+0x3ae>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fd5d 	bl	8002c34 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2101      	movs	r1, #1
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fd41 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fd36 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	e01e      	b.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fd2b 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80031c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80031cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADCEx_InjectedConfigChannel+0x40c>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e004      	b.n	80031e2 <HAL_ADCEx_InjectedConfigChannel+0x416>
  return __builtin_clz(value);
 80031d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_ADCEx_InjectedConfigChannel+0x430>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	e018      	b.n	800322e <HAL_ADCEx_InjectedConfigChannel+0x462>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003210:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ADCEx_InjectedConfigChannel+0x458>
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e004      	b.n	800322e <HAL_ADCEx_InjectedConfigChannel+0x462>
  return __builtin_clz(value);
 8003224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800322e:	429a      	cmp	r2, r3
 8003230:	d106      	bne.n	8003240 <HAL_ADCEx_InjectedConfigChannel+0x474>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	2101      	movs	r1, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fcfa 	bl	8002c34 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fcde 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2102      	movs	r1, #2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fcd3 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	e01e      	b.n	80032aa <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fcc8 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800328a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800328e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADCEx_InjectedConfigChannel+0x4d2>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e004      	b.n	80032a8 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	e014      	b.n	80032ec <HAL_ADCEx_InjectedConfigChannel+0x520>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80032d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80032d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADCEx_InjectedConfigChannel+0x516>
    return 32U;
 80032de:	2320      	movs	r3, #32
 80032e0:	e004      	b.n	80032ec <HAL_ADCEx_InjectedConfigChannel+0x520>
  return __builtin_clz(value);
 80032e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d106      	bne.n	80032fe <HAL_ADCEx_InjectedConfigChannel+0x532>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fc9b 	bl	8002c34 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2103      	movs	r1, #3
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fc7f 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 800330a:	4603      	mov	r3, r0
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2103      	movs	r1, #3
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fc74 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	e017      	b.n	800335a <HAL_ADCEx_InjectedConfigChannel+0x58e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2103      	movs	r1, #3
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fc69 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003344:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADCEx_InjectedConfigChannel+0x584>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e003      	b.n	8003358 <HAL_ADCEx_InjectedConfigChannel+0x58c>
  return __builtin_clz(value);
 8003350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d105      	bne.n	8003372 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	e011      	b.n	8003396 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003382:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e003      	b.n	8003396 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800338e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003396:	429a      	cmp	r2, r3
 8003398:	d106      	bne.n	80033a8 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	2103      	movs	r1, #3
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fc46 	bl	8002c34 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fcd3 	bl	8002d58 <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 813f 	bne.w	8003638 <HAL_ADCEx_InjectedConfigChannel+0x86c>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7ff fca2 	bl	8002d10 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a8e      	ldr	r2, [pc, #568]	@ (800360c <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f040 8130 	bne.w	8003638 <HAL_ADCEx_InjectedConfigChannel+0x86c>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x634>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	bf94      	ite	ls
 80033f8:	2301      	movls	r3, #1
 80033fa:	2300      	movhi	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e019      	b.n	8003434 <HAL_ADCEx_InjectedConfigChannel+0x668>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800340e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003410:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADCEx_InjectedConfigChannel+0x650>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e003      	b.n	8003424 <HAL_ADCEx_InjectedConfigChannel+0x658>
  return __builtin_clz(value);
 800341c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2b09      	cmp	r3, #9
 800342c:	bf94      	ite	ls
 800342e:	2301      	movls	r3, #1
 8003430:	2300      	movhi	r3, #0
 8003432:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003434:	2b00      	cmp	r3, #0
 8003436:	d079      	beq.n	800352c <HAL_ADCEx_InjectedConfigChannel+0x760>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_ADCEx_InjectedConfigChannel+0x688>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	3301      	adds	r3, #1
 800344c:	069b      	lsls	r3, r3, #26
 800344e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003452:	e015      	b.n	8003480 <HAL_ADCEx_InjectedConfigChannel+0x6b4>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003464:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADCEx_InjectedConfigChannel+0x6a4>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADCEx_InjectedConfigChannel+0x6ac>
  return __builtin_clz(value);
 8003470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3301      	adds	r3, #1
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_ADCEx_InjectedConfigChannel+0x6d4>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	3301      	adds	r3, #1
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	e017      	b.n	80034d0 <HAL_ADCEx_InjectedConfigChannel+0x704>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80034ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80034b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADCEx_InjectedConfigChannel+0x6f0>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e003      	b.n	80034c4 <HAL_ADCEx_InjectedConfigChannel+0x6f8>
  return __builtin_clz(value);
 80034bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	ea42 0103 	orr.w	r1, r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_ADCEx_InjectedConfigChannel+0x72a>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	3301      	adds	r3, #1
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	051b      	lsls	r3, r3, #20
 80034f4:	e018      	b.n	8003528 <HAL_ADCEx_InjectedConfigChannel+0x75c>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADCEx_InjectedConfigChannel+0x746>
    return 32U;
 800350e:	2320      	movs	r3, #32
 8003510:	e003      	b.n	800351a <HAL_ADCEx_InjectedConfigChannel+0x74e>
  return __builtin_clz(value);
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003528:	430b      	orrs	r3, r1
 800352a:	e080      	b.n	800362e <HAL_ADCEx_InjectedConfigChannel+0x862>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_ADCEx_InjectedConfigChannel+0x77c>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	3301      	adds	r3, #1
 8003540:	069b      	lsls	r3, r3, #26
 8003542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003546:	e015      	b.n	8003574 <HAL_ADCEx_InjectedConfigChannel+0x7a8>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADCEx_InjectedConfigChannel+0x798>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADCEx_InjectedConfigChannel+0x7a0>
  return __builtin_clz(value);
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_ADCEx_InjectedConfigChannel+0x7c8>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	3301      	adds	r3, #1
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f303 	lsl.w	r3, r1, r3
 8003592:	e017      	b.n	80035c4 <HAL_ADCEx_InjectedConfigChannel+0x7f8>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	61bb      	str	r3, [r7, #24]
  return result;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_ADCEx_InjectedConfigChannel+0x7e4>
    return 32U;
 80035ac:	2320      	movs	r3, #32
 80035ae:	e003      	b.n	80035b8 <HAL_ADCEx_InjectedConfigChannel+0x7ec>
  return __builtin_clz(value);
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	ea42 0103 	orr.w	r1, r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <HAL_ADCEx_InjectedConfigChannel+0x824>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	3b1e      	subs	r3, #30
 80035e8:	051b      	lsls	r3, r3, #20
 80035ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035ee:	e01d      	b.n	800362c <HAL_ADCEx_InjectedConfigChannel+0x860>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	60fb      	str	r3, [r7, #12]
  return result;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <HAL_ADCEx_InjectedConfigChannel+0x844>
    return 32U;
 8003608:	2320      	movs	r3, #32
 800360a:	e005      	b.n	8003618 <HAL_ADCEx_InjectedConfigChannel+0x84c>
 800360c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f003 021f 	and.w	r2, r3, #31
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	3b1e      	subs	r3, #30
 8003626:	051b      	lsls	r3, r3, #20
 8003628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362c:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003632:	4619      	mov	r1, r3
 8003634:	f7ff fb41 	bl	8002cba <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b38      	ldr	r3, [pc, #224]	@ (8003720 <HAL_ADCEx_InjectedConfigChannel+0x954>)
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d062      	beq.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003644:	4837      	ldr	r0, [pc, #220]	@ (8003724 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003646:	f7ff faad 	bl	8002ba4 <LL_ADC_GetCommonPathInternalCh>
 800364a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a35      	ldr	r2, [pc, #212]	@ (8003728 <HAL_ADCEx_InjectedConfigChannel+0x95c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d127      	bne.n	80036a8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800365c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d121      	bne.n	80036a8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a30      	ldr	r2, [pc, #192]	@ (800372c <HAL_ADCEx_InjectedConfigChannel+0x960>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d14d      	bne.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800366e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003672:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003676:	4619      	mov	r1, r3
 8003678:	482a      	ldr	r0, [pc, #168]	@ (8003724 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 800367a:	f7ff fa80 	bl	8002b7e <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800367e:	4b2c      	ldr	r3, [pc, #176]	@ (8003730 <HAL_ADCEx_InjectedConfigChannel+0x964>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <HAL_ADCEx_InjectedConfigChannel+0x968>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	099a      	lsrs	r2, r3, #6
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003696:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003698:	e002      	b.n	80036a0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>
        {
          wait_loop_index--;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	3b01      	subs	r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f9      	bne.n	800369a <HAL_ADCEx_InjectedConfigChannel+0x8ce>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036a6:	e030      	b.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a22      	ldr	r2, [pc, #136]	@ (8003738 <HAL_ADCEx_InjectedConfigChannel+0x96c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <HAL_ADCEx_InjectedConfigChannel+0x90e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <HAL_ADCEx_InjectedConfigChannel+0x90e>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <HAL_ADCEx_InjectedConfigChannel+0x960>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d120      	bne.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036d0:	4619      	mov	r1, r3
 80036d2:	4814      	ldr	r0, [pc, #80]	@ (8003724 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 80036d4:	f7ff fa53 	bl	8002b7e <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d8:	e017      	b.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a17      	ldr	r2, [pc, #92]	@ (800373c <HAL_ADCEx_InjectedConfigChannel+0x970>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d112      	bne.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10c      	bne.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0d      	ldr	r2, [pc, #52]	@ (800372c <HAL_ADCEx_InjectedConfigChannel+0x960>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d107      	bne.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003702:	4619      	mov	r1, r3
 8003704:	4807      	ldr	r0, [pc, #28]	@ (8003724 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003706:	f7ff fa3a 	bl	8002b7e <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003712:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003716:	4618      	mov	r0, r3
 8003718:	37d8      	adds	r7, #216	@ 0xd8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	80080000 	.word	0x80080000
 8003724:	50040300 	.word	0x50040300
 8003728:	c7520000 	.word	0xc7520000
 800372c:	50040000 	.word	0x50040000
 8003730:	20000000 	.word	0x20000000
 8003734:	053e2d63 	.word	0x053e2d63
 8003738:	cb840000 	.word	0xcb840000
 800373c:	80000001 	.word	0x80000001

08003740 <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fb16 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 8003752:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fb23 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 800375e:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10c      	bne.n	8003780 <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fa8b 	bl	8002c90 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
 800377e:	e001      	b.n	8003784 <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8003784:	7dfb      	ldrb	r3, [r7, #23]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <__NVIC_SetPriorityGrouping>:
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a0:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037ac:	4013      	ands	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c2:	4a04      	ldr	r2, [pc, #16]	@ (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	60d3      	str	r3, [r2, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_GetPriorityGrouping>:
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037dc:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <__NVIC_GetPriorityGrouping+0x18>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 0307 	and.w	r3, r3, #7
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_EnableIRQ>:
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db0b      	blt.n	800381e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4907      	ldr	r1, [pc, #28]	@ (800382c <__NVIC_EnableIRQ+0x38>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <__NVIC_SetPriority>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	@ (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	@ (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <NVIC_EncodePriority>:
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf28      	it	cs
 80038a2:	2304      	movcs	r3, #4
 80038a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d902      	bls.n	80038b4 <NVIC_EncodePriority+0x30>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3b03      	subs	r3, #3
 80038b2:	e000      	b.n	80038b6 <NVIC_EncodePriority+0x32>
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43d9      	mvns	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	4313      	orrs	r3, r2
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	@ 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <SysTick_Config>:
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038fc:	d301      	bcc.n	8003902 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038fe:	2301      	movs	r3, #1
 8003900:	e00f      	b.n	8003922 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003902:	4a0a      	ldr	r2, [pc, #40]	@ (800392c <SysTick_Config+0x40>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390a:	210f      	movs	r1, #15
 800390c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003910:	f7ff ff8e 	bl	8003830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <SysTick_Config+0x40>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391a:	4b04      	ldr	r3, [pc, #16]	@ (800392c <SysTick_Config+0x40>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000e010 	.word	0xe000e010

08003930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff29 	bl	8003790 <__NVIC_SetPriorityGrouping>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003958:	f7ff ff3e 	bl	80037d8 <__NVIC_GetPriorityGrouping>
 800395c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff8e 	bl	8003884 <NVIC_EncodePriority>
 8003968:	4602      	mov	r2, r0
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff5d 	bl	8003830 <__NVIC_SetPriority>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff31 	bl	80037f4 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ffa2 	bl	80038ec <SysTick_Config>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c2:	e166      	b.n	8003c92 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8158 	beq.w	8003c8c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x40>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0201 	and.w	r2, r3, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d017      	beq.n	8003a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d123      	bne.n	8003ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80b2 	beq.w	8003c8c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	4b61      	ldr	r3, [pc, #388]	@ (8003cb0 <HAL_GPIO_Init+0x2fc>)
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2c:	4a60      	ldr	r2, [pc, #384]	@ (8003cb0 <HAL_GPIO_Init+0x2fc>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b34:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb0 <HAL_GPIO_Init+0x2fc>)
 8003b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b40:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb4 <HAL_GPIO_Init+0x300>)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_GPIO_Init+0x210>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a52      	ldr	r2, [pc, #328]	@ (8003cb8 <HAL_GPIO_Init+0x304>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d025      	beq.n	8003bc0 <HAL_GPIO_Init+0x20c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a51      	ldr	r2, [pc, #324]	@ (8003cbc <HAL_GPIO_Init+0x308>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01f      	beq.n	8003bbc <HAL_GPIO_Init+0x208>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a50      	ldr	r2, [pc, #320]	@ (8003cc0 <HAL_GPIO_Init+0x30c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d019      	beq.n	8003bb8 <HAL_GPIO_Init+0x204>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc4 <HAL_GPIO_Init+0x310>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_GPIO_Init+0x200>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a4e      	ldr	r2, [pc, #312]	@ (8003cc8 <HAL_GPIO_Init+0x314>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00d      	beq.n	8003bb0 <HAL_GPIO_Init+0x1fc>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a4d      	ldr	r2, [pc, #308]	@ (8003ccc <HAL_GPIO_Init+0x318>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <HAL_GPIO_Init+0x1f8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8003cd0 <HAL_GPIO_Init+0x31c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_GPIO_Init+0x1f4>
 8003ba4:	2307      	movs	r3, #7
 8003ba6:	e00e      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	e00c      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003bac:	2306      	movs	r3, #6
 8003bae:	e00a      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	e008      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e006      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e004      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e002      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_GPIO_Init+0x212>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	f002 0203 	and.w	r2, r2, #3
 8003bcc:	0092      	lsls	r2, r2, #2
 8003bce:	4093      	lsls	r3, r2
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd6:	4937      	ldr	r1, [pc, #220]	@ (8003cb4 <HAL_GPIO_Init+0x300>)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	3302      	adds	r3, #2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c08:	4a32      	ldr	r2, [pc, #200]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c0e:	4b31      	ldr	r3, [pc, #196]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c32:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c38:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c62:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c86:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <HAL_GPIO_Init+0x320>)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f ae91 	bne.w	80039c4 <HAL_GPIO_Init+0x10>
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	48000400 	.word	0x48000400
 8003cbc:	48000800 	.word	0x48000800
 8003cc0:	48000c00 	.word	0x48000c00
 8003cc4:	48001000 	.word	0x48001000
 8003cc8:	48001400 	.word	0x48001400
 8003ccc:	48001800 	.word	0x48001800
 8003cd0:	48001c00 	.word	0x48001c00
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce8:	787b      	ldrb	r3, [r7, #1]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cf4:	e002      	b.n	8003cfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	041a      	lsls	r2, r3, #16
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	43d9      	mvns	r1, r3
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	400b      	ands	r3, r1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d006      	beq.n	8003d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d52:	4a05      	ldr	r2, [pc, #20]	@ (8003d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fa4c 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40010400 	.word	0x40010400

08003d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d70:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7c:	d102      	bne.n	8003d84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d82:	e00b      	b.n	8003d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d84:	4b08      	ldr	r3, [pc, #32]	@ (8003da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d92:	d102      	bne.n	8003d9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d98:	e000      	b.n	8003d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40007000 	.word	0x40007000

08003dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d141      	bne.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dba:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc6:	d131      	bne.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dce:	4a46      	ldr	r2, [pc, #280]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003de0:	4a41      	ldr	r2, [pc, #260]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003de8:	4b40      	ldr	r3, [pc, #256]	@ (8003eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2232      	movs	r2, #50	@ 0x32
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	0c9b      	lsrs	r3, r3, #18
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfe:	e002      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	4b38      	ldr	r3, [pc, #224]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e12:	d102      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f2      	bne.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e26:	d158      	bne.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e057      	b.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e32:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e3c:	e04d      	b.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e44:	d141      	bne.n	8003eca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e46:	4b28      	ldr	r3, [pc, #160]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e52:	d131      	bne.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e54:	4b24      	ldr	r3, [pc, #144]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e64:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e74:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2232      	movs	r2, #50	@ 0x32
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	0c9b      	lsrs	r3, r3, #18
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e8a:	e002      	b.n	8003e92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e92:	4b15      	ldr	r3, [pc, #84]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9e:	d102      	bne.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f2      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ea6:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb2:	d112      	bne.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e011      	b.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ec8:	e007      	b.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003eca:	4b07      	ldr	r3, [pc, #28]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ed2:	4a05      	ldr	r2, [pc, #20]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ed8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	431bde83 	.word	0x431bde83

08003ef4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f000 bc08 	b.w	8004718 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f08:	4b96      	ldr	r3, [pc, #600]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f12:	4b94      	ldr	r3, [pc, #592]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80e4 	beq.w	80040f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4c>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	f040 808b 	bne.w	800404e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	f040 8087 	bne.w	800404e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f40:	4b88      	ldr	r3, [pc, #544]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_OscConfig+0x64>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e3df      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	4b81      	ldr	r3, [pc, #516]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_RCC_OscConfig+0x7e>
 8003f68:	4b7e      	ldr	r3, [pc, #504]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f70:	e005      	b.n	8003f7e <HAL_RCC_OscConfig+0x8a>
 8003f72:	4b7c      	ldr	r3, [pc, #496]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d223      	bcs.n	8003fca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fd94 	bl	8004ab4 <RCC_SetFlashLatencyFromMSIRange>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e3c0      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f96:	4b73      	ldr	r3, [pc, #460]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a72      	ldr	r2, [pc, #456]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	f043 0308 	orr.w	r3, r3, #8
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	496d      	ldr	r1, [pc, #436]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	4968      	ldr	r1, [pc, #416]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
 8003fc8:	e025      	b.n	8004016 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fca:	4b66      	ldr	r3, [pc, #408]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a65      	ldr	r2, [pc, #404]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b63      	ldr	r3, [pc, #396]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4960      	ldr	r1, [pc, #384]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	495b      	ldr	r1, [pc, #364]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fd54 	bl	8004ab4 <RCC_SetFlashLatencyFromMSIRange>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e380      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004016:	f000 fcc1 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b51      	ldr	r3, [pc, #324]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	4950      	ldr	r1, [pc, #320]	@ (8004168 <HAL_RCC_OscConfig+0x274>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a4e      	ldr	r2, [pc, #312]	@ (800416c <HAL_RCC_OscConfig+0x278>)
 8004034:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004036:	4b4e      	ldr	r3, [pc, #312]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd fae2 	bl	8001604 <HAL_InitTick>
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d052      	beq.n	80040f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	e364      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d032      	beq.n	80040bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004056:	4b43      	ldr	r3, [pc, #268]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a42      	ldr	r2, [pc, #264]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004062:	f7fd fb1f 	bl	80016a4 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800406a:	f7fd fb1b 	bl	80016a4 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e34d      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800407c:	4b39      	ldr	r3, [pc, #228]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004088:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a35      	ldr	r2, [pc, #212]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 800408e:	f043 0308 	orr.w	r3, r3, #8
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b33      	ldr	r3, [pc, #204]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	4930      	ldr	r1, [pc, #192]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	492b      	ldr	r1, [pc, #172]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	604b      	str	r3, [r1, #4]
 80040ba:	e01a      	b.n	80040f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040bc:	4b29      	ldr	r3, [pc, #164]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a28      	ldr	r2, [pc, #160]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c8:	f7fd faec 	bl	80016a4 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d0:	f7fd fae8 	bl	80016a4 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e31a      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040e2:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x1dc>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d073      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x21c>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d10e      	bne.n	8004128 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d10b      	bne.n	8004128 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d063      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2f0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d15f      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e2f7      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x24c>
 8004132:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a0b      	ldr	r2, [pc, #44]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e025      	b.n	800418c <HAL_RCC_OscConfig+0x298>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004148:	d114      	bne.n	8004174 <HAL_RCC_OscConfig+0x280>
 800414a:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a05      	ldr	r2, [pc, #20]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a02      	ldr	r2, [pc, #8]	@ (8004164 <HAL_RCC_OscConfig+0x270>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e013      	b.n	800418c <HAL_RCC_OscConfig+0x298>
 8004164:	40021000 	.word	0x40021000
 8004168:	08009d9c 	.word	0x08009d9c
 800416c:	20000000 	.word	0x20000000
 8004170:	20000004 	.word	0x20000004
 8004174:	4ba0      	ldr	r3, [pc, #640]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a9f      	ldr	r2, [pc, #636]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b9d      	ldr	r3, [pc, #628]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a9c      	ldr	r2, [pc, #624]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800418a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd fa86 	bl	80016a4 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800419c:	f7fd fa82 	bl	80016a4 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	@ 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e2b4      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ae:	4b92      	ldr	r3, [pc, #584]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x2a8>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd fa72 	bl	80016a4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fd fa6e 	bl	80016a4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	@ 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e2a0      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041d6:	4b88      	ldr	r3, [pc, #544]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x2d0>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d060      	beq.n	80042b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_OscConfig+0x310>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d119      	bne.n	8004232 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d116      	bne.n	8004232 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004204:	4b7c      	ldr	r3, [pc, #496]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_OscConfig+0x328>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e27d      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b76      	ldr	r3, [pc, #472]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	4973      	ldr	r1, [pc, #460]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004230:	e040      	b.n	80042b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d023      	beq.n	8004282 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423a:	4b6f      	ldr	r3, [pc, #444]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6e      	ldr	r2, [pc, #440]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd fa2d 	bl	80016a4 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd fa29 	bl	80016a4 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e25b      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004260:	4b65      	ldr	r3, [pc, #404]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b62      	ldr	r3, [pc, #392]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	495f      	ldr	r1, [pc, #380]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	e018      	b.n	80042b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b5d      	ldr	r3, [pc, #372]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5c      	ldr	r2, [pc, #368]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fa09 	bl	80016a4 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004296:	f7fd fa05 	bl	80016a4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e237      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a8:	4b53      	ldr	r3, [pc, #332]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d03c      	beq.n	800433a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01c      	beq.n	8004302 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c8:	4b4b      	ldr	r3, [pc, #300]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ce:	4a4a      	ldr	r2, [pc, #296]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd f9e4 	bl	80016a4 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e0:	f7fd f9e0 	bl	80016a4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e212      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f2:	4b41      	ldr	r3, [pc, #260]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ef      	beq.n	80042e0 <HAL_RCC_OscConfig+0x3ec>
 8004300:	e01b      	b.n	800433a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004302:	4b3d      	ldr	r3, [pc, #244]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004308:	4a3b      	ldr	r2, [pc, #236]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fd f9c7 	bl	80016a4 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431a:	f7fd f9c3 	bl	80016a4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1f5      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800432c:	4b32      	ldr	r3, [pc, #200]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ef      	bne.n	800431a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80a6 	beq.w	8004494 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800434c:	4b2a      	ldr	r3, [pc, #168]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004358:	4b27      	ldr	r3, [pc, #156]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435c:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004362:	6593      	str	r3, [r2, #88]	@ 0x58
 8004364:	4b24      	ldr	r3, [pc, #144]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004370:	2301      	movs	r3, #1
 8004372:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004374:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <HAL_RCC_OscConfig+0x508>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d118      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004380:	4b1e      	ldr	r3, [pc, #120]	@ (80043fc <HAL_RCC_OscConfig+0x508>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <HAL_RCC_OscConfig+0x508>)
 8004386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800438a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438c:	f7fd f98a 	bl	80016a4 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004394:	f7fd f986 	bl	80016a4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e1b8      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a6:	4b15      	ldr	r3, [pc, #84]	@ (80043fc <HAL_RCC_OscConfig+0x508>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d108      	bne.n	80043cc <HAL_RCC_OscConfig+0x4d8>
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c0:	4a0d      	ldr	r2, [pc, #52]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043ca:	e029      	b.n	8004420 <HAL_RCC_OscConfig+0x52c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d115      	bne.n	8004400 <HAL_RCC_OscConfig+0x50c>
 80043d4:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043da:	4a07      	ldr	r2, [pc, #28]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ea:	4a03      	ldr	r2, [pc, #12]	@ (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043f4:	e014      	b.n	8004420 <HAL_RCC_OscConfig+0x52c>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
 8004400:	4b9d      	ldr	r3, [pc, #628]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	4a9c      	ldr	r2, [pc, #624]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004410:	4b99      	ldr	r3, [pc, #612]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	4a98      	ldr	r2, [pc, #608]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004418:	f023 0304 	bic.w	r3, r3, #4
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d016      	beq.n	8004456 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fd f93c 	bl	80016a4 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd f938 	bl	80016a4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e168      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004446:	4b8c      	ldr	r3, [pc, #560]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ed      	beq.n	8004430 <HAL_RCC_OscConfig+0x53c>
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fd f925 	bl	80016a4 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fd f921 	bl	80016a4 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e151      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004474:	4b80      	ldr	r3, [pc, #512]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ed      	bne.n	800445e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004482:	7ffb      	ldrb	r3, [r7, #31]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004488:	4b7b      	ldr	r3, [pc, #492]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	4a7a      	ldr	r2, [pc, #488]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004492:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d03c      	beq.n	800451a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01c      	beq.n	80044e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044a8:	4b73      	ldr	r3, [pc, #460]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80044aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ae:	4a72      	ldr	r2, [pc, #456]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd f8f4 	bl	80016a4 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044c0:	f7fd f8f0 	bl	80016a4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e122      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044d2:	4b69      	ldr	r3, [pc, #420]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80044d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ef      	beq.n	80044c0 <HAL_RCC_OscConfig+0x5cc>
 80044e0:	e01b      	b.n	800451a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044e2:	4b65      	ldr	r3, [pc, #404]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80044e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044e8:	4a63      	ldr	r2, [pc, #396]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f2:	f7fd f8d7 	bl	80016a4 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044fa:	f7fd f8d3 	bl	80016a4 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e105      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800450c:	4b5a      	ldr	r3, [pc, #360]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 800450e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ef      	bne.n	80044fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80f9 	beq.w	8004716 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	2b02      	cmp	r3, #2
 800452a:	f040 80cf 	bne.w	80046cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800452e:	4b52      	ldr	r3, [pc, #328]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 0203 	and.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	429a      	cmp	r2, r3
 8004540:	d12c      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	3b01      	subs	r3, #1
 800454e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d123      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d11b      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d113      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	3b01      	subs	r3, #1
 8004582:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d109      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d071      	beq.n	8004680 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d068      	beq.n	8004674 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045a2:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045ae:	4b32      	ldr	r3, [pc, #200]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0ac      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045be:	4b2e      	ldr	r3, [pc, #184]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80045c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045ca:	f7fd f86b 	bl	80016a4 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d2:	f7fd f867 	bl	80016a4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e099      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e4:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f0:	4b21      	ldr	r3, [pc, #132]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b21      	ldr	r3, [pc, #132]	@ (800467c <HAL_RCC_OscConfig+0x788>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004600:	3a01      	subs	r2, #1
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800460a:	0212      	lsls	r2, r2, #8
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004612:	0852      	lsrs	r2, r2, #1
 8004614:	3a01      	subs	r2, #1
 8004616:	0552      	lsls	r2, r2, #21
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800461e:	0852      	lsrs	r2, r2, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	0652      	lsls	r2, r2, #25
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800462a:	06d2      	lsls	r2, r2, #27
 800462c:	430a      	orrs	r2, r1
 800462e:	4912      	ldr	r1, [pc, #72]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004630:	4313      	orrs	r3, r2
 8004632:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004634:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0f      	ldr	r2, [pc, #60]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004640:	4b0d      	ldr	r3, [pc, #52]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a0c      	ldr	r2, [pc, #48]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800464a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800464c:	f7fd f82a 	bl	80016a4 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd f826 	bl	80016a4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e058      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004666:	4b04      	ldr	r3, [pc, #16]	@ (8004678 <HAL_RCC_OscConfig+0x784>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004672:	e050      	b.n	8004716 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e04f      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
 8004678:	40021000 	.word	0x40021000
 800467c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004680:	4b27      	ldr	r3, [pc, #156]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d144      	bne.n	8004716 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800468c:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 8004692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004696:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004698:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 800469e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046a4:	f7fc fffe 	bl	80016a4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fc fffa 	bl	80016a4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e02c      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046be:	4b18      	ldr	r3, [pc, #96]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x7b8>
 80046ca:	e024      	b.n	8004716 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d01f      	beq.n	8004712 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b13      	ldr	r3, [pc, #76]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fc ffe1 	bl	80016a4 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fc ffdd 	bl	80016a4 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e00f      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	4905      	ldr	r1, [pc, #20]	@ (8004720 <HAL_RCC_OscConfig+0x82c>)
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_RCC_OscConfig+0x830>)
 800470c:	4013      	ands	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
 8004710:	e001      	b.n	8004716 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	feeefffc 	.word	0xfeeefffc

08004728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e11d      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b90      	ldr	r3, [pc, #576]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b8d      	ldr	r3, [pc, #564]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 020f 	bic.w	r2, r3, #15
 8004756:	498b      	ldr	r1, [pc, #556]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b89      	ldr	r3, [pc, #548]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e105      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	4b81      	ldr	r3, [pc, #516]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004788:	429a      	cmp	r2, r3
 800478a:	d908      	bls.n	800479e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478c:	4b7e      	ldr	r3, [pc, #504]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	497b      	ldr	r1, [pc, #492]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d079      	beq.n	800489e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d11e      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	4b75      	ldr	r3, [pc, #468]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0dc      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80047c2:	f000 f9d1 	bl	8004b68 <RCC_GetSysClockFreqFromPLLSource>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4a70      	ldr	r2, [pc, #448]	@ (800498c <HAL_RCC_ClockConfig+0x264>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d946      	bls.n	800485c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d140      	bne.n	800485c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047da:	4b6b      	ldr	r3, [pc, #428]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047e2:	4a69      	ldr	r2, [pc, #420]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047ea:	2380      	movs	r3, #128	@ 0x80
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e035      	b.n	800485c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f8:	4b63      	ldr	r3, [pc, #396]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d115      	bne.n	8004830 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0b9      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004810:	4b5d      	ldr	r3, [pc, #372]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0ad      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004820:	4b59      	ldr	r3, [pc, #356]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0a5      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004830:	f000 f8b4 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004834:	4603      	mov	r3, r0
 8004836:	4a55      	ldr	r2, [pc, #340]	@ (800498c <HAL_RCC_ClockConfig+0x264>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d90f      	bls.n	800485c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800483c:	4b52      	ldr	r3, [pc, #328]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004848:	4b4f      	ldr	r3, [pc, #316]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004850:	4a4d      	ldr	r2, [pc, #308]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004856:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800485c:	4b4a      	ldr	r3, [pc, #296]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4947      	ldr	r1, [pc, #284]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fc ff19 	bl	80016a4 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004874:	e00a      	b.n	800488c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004876:	f7fc ff15 	bl	80016a4 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e077      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488c:	4b3e      	ldr	r3, [pc, #248]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 020c 	and.w	r2, r3, #12
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	429a      	cmp	r2, r3
 800489c:	d1eb      	bne.n	8004876 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b80      	cmp	r3, #128	@ 0x80
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048a4:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a37      	ldr	r2, [pc, #220]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d010      	beq.n	80048de <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b31      	ldr	r3, [pc, #196]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d208      	bcs.n	80048de <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	492b      	ldr	r1, [pc, #172]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048de:	4b29      	ldr	r3, [pc, #164]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d210      	bcs.n	800490e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ec:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 020f 	bic.w	r2, r3, #15
 80048f4:	4923      	ldr	r1, [pc, #140]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fc:	4b21      	ldr	r3, [pc, #132]	@ (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e036      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491a:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4918      	ldr	r1, [pc, #96]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004938:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4910      	ldr	r1, [pc, #64]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800494c:	f000 f826 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	490c      	ldr	r1, [pc, #48]	@ (8004990 <HAL_RCC_ClockConfig+0x268>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
 8004968:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <HAL_RCC_ClockConfig+0x26c>)
 800496a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800496c:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <HAL_RCC_ClockConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7fc fe47 	bl	8001604 <HAL_InitTick>
 8004976:	4603      	mov	r3, r0
 8004978:	73fb      	strb	r3, [r7, #15]

  return status;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40022000 	.word	0x40022000
 8004988:	40021000 	.word	0x40021000
 800498c:	04c4b400 	.word	0x04c4b400
 8004990:	08009d9c 	.word	0x08009d9c
 8004994:	20000000 	.word	0x20000000
 8004998:	20000004 	.word	0x20000004

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	@ 0x24
 80049a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b4:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x34>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d121      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d11e      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049d0:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049dc:	4b31      	ldr	r3, [pc, #196]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e005      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049ec:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049f8:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10d      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d102      	bne.n	8004a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a14:	4b25      	ldr	r3, [pc, #148]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e004      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a20:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d134      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d003      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0xac>
 8004a40:	e005      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a42:	4b1a      	ldr	r3, [pc, #104]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a44:	617b      	str	r3, [r7, #20]
      break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a48:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	617b      	str	r3, [r7, #20]
      break;
 8004a52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	fb03 f202 	mul.w	r2, r3, r2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	0e5b      	lsrs	r3, r3, #25
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	3301      	adds	r3, #1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a94:	69bb      	ldr	r3, [r7, #24]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	@ 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08009dac 	.word	0x08009dac
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ac0:	4b27      	ldr	r3, [pc, #156]	@ (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004acc:	f7ff f94e 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004ad0:	6178      	str	r0, [r7, #20]
 8004ad2:	e014      	b.n	8004afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad4:	4b22      	ldr	r3, [pc, #136]	@ (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad8:	4a21      	ldr	r2, [pc, #132]	@ (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004aec:	f7ff f93e 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004af2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004afc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b04:	d10b      	bne.n	8004b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b80      	cmp	r3, #128	@ 0x80
 8004b0a:	d913      	bls.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b10:	d902      	bls.n	8004b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b12:	2302      	movs	r3, #2
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e00d      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b18:	2301      	movs	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	e00a      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b22:	d902      	bls.n	8004b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b24:	2302      	movs	r3, #2
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e004      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b70      	cmp	r3, #112	@ 0x70
 8004b2e:	d101      	bne.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b30:	2301      	movs	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f023 020f 	bic.w	r2, r3, #15
 8004b3c:	4909      	ldr	r1, [pc, #36]	@ (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d001      	beq.n	8004b56 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40022000 	.word	0x40022000

08004b68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d00b      	beq.n	8004b96 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d825      	bhi.n	8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d008      	beq.n	8004b9c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d11f      	bne.n	8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b90:	4b25      	ldr	r3, [pc, #148]	@ (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b92:	613b      	str	r3, [r7, #16]
    break;
 8004b94:	e01f      	b.n	8004bd6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b96:	4b25      	ldr	r3, [pc, #148]	@ (8004c2c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b98:	613b      	str	r3, [r7, #16]
    break;
 8004b9a:	e01c      	b.n	8004bd6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b9c:	4b21      	ldr	r3, [pc, #132]	@ (8004c24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d107      	bne.n	8004bb8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e005      	b.n	8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c30 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bcc:	613b      	str	r3, [r7, #16]
    break;
 8004bce:	e002      	b.n	8004bd6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
    break;
 8004bd4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bd6:	4b13      	ldr	r3, [pc, #76]	@ (8004c24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	3301      	adds	r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004be4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	fb03 f202 	mul.w	r2, r3, r2
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	0e5b      	lsrs	r3, r3, #25
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	3301      	adds	r3, #1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c16:	683b      	ldr	r3, [r7, #0]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40021000 	.word	0x40021000
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	007a1200 	.word	0x007a1200
 8004c30:	08009dac 	.word	0x08009dac

08004c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c40:	2300      	movs	r3, #0
 8004c42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d040      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c54:	2b80      	cmp	r3, #128	@ 0x80
 8004c56:	d02a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c58:	2b80      	cmp	r3, #128	@ 0x80
 8004c5a:	d825      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c5c:	2b60      	cmp	r3, #96	@ 0x60
 8004c5e:	d026      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c60:	2b60      	cmp	r3, #96	@ 0x60
 8004c62:	d821      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d006      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c68:	2b40      	cmp	r3, #64	@ 0x40
 8004c6a:	d81d      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d010      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c74:	e018      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c76:	4b89      	ldr	r3, [pc, #548]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a88      	ldr	r2, [pc, #544]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c80:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c82:	e015      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb02 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c94:	e00c      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3320      	adds	r3, #32
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fbed 	bl	800547c <RCCEx_PLLSAI2_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ca6:	e003      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	74fb      	strb	r3, [r7, #19]
      break;
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cb6:	4b79      	ldr	r3, [pc, #484]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cbc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc4:	4975      	ldr	r1, [pc, #468]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d047      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce6:	d030      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cec:	d82a      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf2:	d02a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004cf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf8:	d824      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d04:	d81e      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0e:	d010      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d10:	e018      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d12:	4b62      	ldr	r3, [pc, #392]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4a61      	ldr	r2, [pc, #388]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d1e:	e015      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fab4 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d30:	e00c      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3320      	adds	r3, #32
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fb9f 	bl	800547c <RCCEx_PLLSAI2_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d42:	e003      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	74fb      	strb	r3, [r7, #19]
      break;
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d52:	4b52      	ldr	r3, [pc, #328]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	494e      	ldr	r1, [pc, #312]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004d68:	e001      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 809f 	beq.w	8004eba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d80:	4b46      	ldr	r3, [pc, #280]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d96:	4b41      	ldr	r3, [pc, #260]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	4a40      	ldr	r2, [pc, #256]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da2:	4b3e      	ldr	r3, [pc, #248]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dae:	2301      	movs	r3, #1
 8004db0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dbe:	f7fc fc71 	bl	80016a4 <HAL_GetTick>
 8004dc2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dc4:	e009      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc6:	f7fc fc6d 	bl	80016a4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d902      	bls.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	74fb      	strb	r3, [r7, #19]
        break;
 8004dd8:	e005      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dda:	4b31      	ldr	r3, [pc, #196]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ef      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d15b      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dec:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01f      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d019      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e0a:	4b24      	ldr	r3, [pc, #144]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e16:	4b21      	ldr	r3, [pc, #132]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e26:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e36:	4a19      	ldr	r2, [pc, #100]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d016      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fc fc2c 	bl	80016a4 <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4e:	e00b      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fc fc28 	bl	80016a4 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d902      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	74fb      	strb	r3, [r7, #19]
            break;
 8004e66:	e006      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e68:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ec      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7c:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e94:	e008      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	74bb      	strb	r3, [r7, #18]
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea8:	7c7b      	ldrb	r3, [r7, #17]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eae:	4ba0      	ldr	r3, [pc, #640]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb2:	4a9f      	ldr	r2, [pc, #636]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ec6:	4b9a      	ldr	r3, [pc, #616]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f023 0203 	bic.w	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed4:	4996      	ldr	r1, [pc, #600]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ee8:	4b91      	ldr	r3, [pc, #580]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f023 020c 	bic.w	r2, r3, #12
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	498e      	ldr	r1, [pc, #568]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f0a:	4b89      	ldr	r3, [pc, #548]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f18:	4985      	ldr	r1, [pc, #532]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f2c:	4b80      	ldr	r3, [pc, #512]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f3a:	497d      	ldr	r1, [pc, #500]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f4e:	4b78      	ldr	r3, [pc, #480]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5c:	4974      	ldr	r1, [pc, #464]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f70:	4b6f      	ldr	r3, [pc, #444]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7e:	496c      	ldr	r1, [pc, #432]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f92:	4b67      	ldr	r3, [pc, #412]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa0:	4963      	ldr	r1, [pc, #396]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fc2:	495b      	ldr	r1, [pc, #364]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fd6:	4b56      	ldr	r3, [pc, #344]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fdc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	4952      	ldr	r1, [pc, #328]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005006:	494a      	ldr	r1, [pc, #296]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800501a:	4b45      	ldr	r3, [pc, #276]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	4941      	ldr	r1, [pc, #260]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800503c:	4b3c      	ldr	r3, [pc, #240]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005042:	f023 0203 	bic.w	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504a:	4939      	ldr	r1, [pc, #228]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d028      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800505e:	4b34      	ldr	r3, [pc, #208]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005064:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506c:	4930      	ldr	r1, [pc, #192]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800507c:	d106      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800507e:	4b2c      	ldr	r3, [pc, #176]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005084:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005088:	60d3      	str	r3, [r2, #12]
 800508a:	e011      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005094:	d10c      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	2101      	movs	r1, #1
 800509c:	4618      	mov	r0, r3
 800509e:	f000 f8f9 	bl	8005294 <RCCEx_PLLSAI1_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d04d      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050c4:	d108      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80050c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050cc:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80050d6:	e012      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050d8:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050de:	4a14      	ldr	r2, [pc, #80]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050f6:	490e      	ldr	r1, [pc, #56]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005106:	d106      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005108:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a08      	ldr	r2, [pc, #32]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800510e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005112:	60d3      	str	r3, [r2, #12]
 8005114:	e020      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800511a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800511e:	d109      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005120:	4b03      	ldr	r3, [pc, #12]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a02      	ldr	r2, [pc, #8]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800512a:	60d3      	str	r3, [r2, #12]
 800512c:	e014      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005138:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800513c:	d10c      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	2101      	movs	r1, #1
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f8a5 	bl	8005294 <RCCEx_PLLSAI1_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d028      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005164:	4b4a      	ldr	r3, [pc, #296]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005172:	4947      	ldr	r1, [pc, #284]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800517e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005182:	d106      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005184:	4b42      	ldr	r3, [pc, #264]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a41      	ldr	r2, [pc, #260]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518e:	60d3      	str	r3, [r2, #12]
 8005190:	e011      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005196:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800519a:	d10c      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	2101      	movs	r1, #1
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f876 	bl	8005294 <RCCEx_PLLSAI1_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01e      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051c2:	4b33      	ldr	r3, [pc, #204]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d2:	492f      	ldr	r1, [pc, #188]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051e4:	d10c      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	2102      	movs	r1, #2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f851 	bl	8005294 <RCCEx_PLLSAI1_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800520c:	4b20      	ldr	r3, [pc, #128]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005212:	f023 0204 	bic.w	r2, r3, #4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800521c:	491c      	ldr	r1, [pc, #112]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005230:	4b17      	ldr	r3, [pc, #92]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005236:	f023 0218 	bic.w	r2, r3, #24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005240:	4913      	ldr	r1, [pc, #76]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d017      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005254:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800525a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005264:	490a      	ldr	r1, [pc, #40]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005284:	7cbb      	ldrb	r3, [r7, #18]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000

08005294 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052a2:	4b72      	ldr	r3, [pc, #456]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00e      	beq.n	80052cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052ae:	4b6f      	ldr	r3, [pc, #444]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0203 	and.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d103      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
       ||
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d142      	bne.n	800534c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
 80052ca:	e03f      	b.n	800534c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d018      	beq.n	8005306 <RCCEx_PLLSAI1_Config+0x72>
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d825      	bhi.n	8005324 <RCCEx_PLLSAI1_Config+0x90>
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d002      	beq.n	80052e2 <RCCEx_PLLSAI1_Config+0x4e>
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d009      	beq.n	80052f4 <RCCEx_PLLSAI1_Config+0x60>
 80052e0:	e020      	b.n	8005324 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052e2:	4b62      	ldr	r3, [pc, #392]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11d      	bne.n	800532a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f2:	e01a      	b.n	800532a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052f4:	4b5d      	ldr	r3, [pc, #372]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005304:	e013      	b.n	800532e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005306:	4b59      	ldr	r3, [pc, #356]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005312:	4b56      	ldr	r3, [pc, #344]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005322:	e006      	b.n	8005332 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	e004      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005332:	bf00      	nop
    }

    if(status == HAL_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d108      	bne.n	800534c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800533a:	4b4c      	ldr	r3, [pc, #304]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f023 0203 	bic.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4949      	ldr	r1, [pc, #292]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f040 8086 	bne.w	8005460 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005354:	4b45      	ldr	r3, [pc, #276]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a44      	ldr	r2, [pc, #272]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800535a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800535e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005360:	f7fc f9a0 	bl	80016a4 <HAL_GetTick>
 8005364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005366:	e009      	b.n	800537c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005368:	f7fc f99c 	bl	80016a4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d902      	bls.n	800537c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	73fb      	strb	r3, [r7, #15]
        break;
 800537a:	e005      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800537c:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ef      	bne.n	8005368 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d168      	bne.n	8005460 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d113      	bne.n	80053bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005394:	4b35      	ldr	r3, [pc, #212]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539a:	4013      	ands	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6892      	ldr	r2, [r2, #8]
 80053a0:	0211      	lsls	r1, r2, #8
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	68d2      	ldr	r2, [r2, #12]
 80053a6:	06d2      	lsls	r2, r2, #27
 80053a8:	4311      	orrs	r1, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6852      	ldr	r2, [r2, #4]
 80053ae:	3a01      	subs	r2, #1
 80053b0:	0112      	lsls	r2, r2, #4
 80053b2:	430a      	orrs	r2, r1
 80053b4:	492d      	ldr	r1, [pc, #180]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	610b      	str	r3, [r1, #16]
 80053ba:	e02d      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d115      	bne.n	80053ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053c2:	4b2a      	ldr	r3, [pc, #168]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005474 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6892      	ldr	r2, [r2, #8]
 80053ce:	0211      	lsls	r1, r2, #8
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6912      	ldr	r2, [r2, #16]
 80053d4:	0852      	lsrs	r2, r2, #1
 80053d6:	3a01      	subs	r2, #1
 80053d8:	0552      	lsls	r2, r2, #21
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6852      	ldr	r2, [r2, #4]
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0112      	lsls	r2, r2, #4
 80053e4:	430a      	orrs	r2, r1
 80053e6:	4921      	ldr	r1, [pc, #132]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	610b      	str	r3, [r1, #16]
 80053ec:	e014      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ee:	4b1f      	ldr	r3, [pc, #124]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	4b21      	ldr	r3, [pc, #132]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6892      	ldr	r2, [r2, #8]
 80053fa:	0211      	lsls	r1, r2, #8
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6952      	ldr	r2, [r2, #20]
 8005400:	0852      	lsrs	r2, r2, #1
 8005402:	3a01      	subs	r2, #1
 8005404:	0652      	lsls	r2, r2, #25
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	3a01      	subs	r2, #1
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	430a      	orrs	r2, r1
 8005412:	4916      	ldr	r1, [pc, #88]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005418:	4b14      	ldr	r3, [pc, #80]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a13      	ldr	r2, [pc, #76]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800541e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005422:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fc f93e 	bl	80016a4 <HAL_GetTick>
 8005428:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800542a:	e009      	b.n	8005440 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800542c:	f7fc f93a 	bl	80016a4 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d902      	bls.n	8005440 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	73fb      	strb	r3, [r7, #15]
          break;
 800543e:	e005      	b.n	800544c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005440:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	4904      	ldr	r1, [pc, #16]	@ (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000
 8005470:	07ff800f 	.word	0x07ff800f
 8005474:	ff9f800f 	.word	0xff9f800f
 8005478:	f9ff800f 	.word	0xf9ff800f

0800547c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800548a:	4b72      	ldr	r3, [pc, #456]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00e      	beq.n	80054b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005496:	4b6f      	ldr	r3, [pc, #444]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0203 	and.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d103      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
       ||
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d142      	bne.n	8005534 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e03f      	b.n	8005534 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d018      	beq.n	80054ee <RCCEx_PLLSAI2_Config+0x72>
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d825      	bhi.n	800550c <RCCEx_PLLSAI2_Config+0x90>
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d002      	beq.n	80054ca <RCCEx_PLLSAI2_Config+0x4e>
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d009      	beq.n	80054dc <RCCEx_PLLSAI2_Config+0x60>
 80054c8:	e020      	b.n	800550c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ca:	4b62      	ldr	r3, [pc, #392]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11d      	bne.n	8005512 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054da:	e01a      	b.n	8005512 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054dc:	4b5d      	ldr	r3, [pc, #372]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e013      	b.n	8005516 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ee:	4b59      	ldr	r3, [pc, #356]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054fa:	4b56      	ldr	r3, [pc, #344]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800550a:	e006      	b.n	800551a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      break;
 8005510:	e004      	b.n	800551c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800551a:	bf00      	nop
    }

    if(status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005522:	4b4c      	ldr	r3, [pc, #304]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4949      	ldr	r1, [pc, #292]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005530:	4313      	orrs	r3, r2
 8005532:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f040 8086 	bne.w	8005648 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800553c:	4b45      	ldr	r3, [pc, #276]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a44      	ldr	r2, [pc, #272]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005548:	f7fc f8ac 	bl	80016a4 <HAL_GetTick>
 800554c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800554e:	e009      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005550:	f7fc f8a8 	bl	80016a4 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	73fb      	strb	r3, [r7, #15]
        break;
 8005562:	e005      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005564:	4b3b      	ldr	r3, [pc, #236]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1ef      	bne.n	8005550 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d168      	bne.n	8005648 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d113      	bne.n	80055a4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800557c:	4b35      	ldr	r3, [pc, #212]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	4b35      	ldr	r3, [pc, #212]	@ (8005658 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6892      	ldr	r2, [r2, #8]
 8005588:	0211      	lsls	r1, r2, #8
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68d2      	ldr	r2, [r2, #12]
 800558e:	06d2      	lsls	r2, r2, #27
 8005590:	4311      	orrs	r1, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6852      	ldr	r2, [r2, #4]
 8005596:	3a01      	subs	r2, #1
 8005598:	0112      	lsls	r2, r2, #4
 800559a:	430a      	orrs	r2, r1
 800559c:	492d      	ldr	r1, [pc, #180]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	614b      	str	r3, [r1, #20]
 80055a2:	e02d      	b.n	8005600 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d115      	bne.n	80055d6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	4b2b      	ldr	r3, [pc, #172]	@ (800565c <RCCEx_PLLSAI2_Config+0x1e0>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6892      	ldr	r2, [r2, #8]
 80055b6:	0211      	lsls	r1, r2, #8
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6912      	ldr	r2, [r2, #16]
 80055bc:	0852      	lsrs	r2, r2, #1
 80055be:	3a01      	subs	r2, #1
 80055c0:	0552      	lsls	r2, r2, #21
 80055c2:	4311      	orrs	r1, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6852      	ldr	r2, [r2, #4]
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0112      	lsls	r2, r2, #4
 80055cc:	430a      	orrs	r2, r1
 80055ce:	4921      	ldr	r1, [pc, #132]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	614b      	str	r3, [r1, #20]
 80055d4:	e014      	b.n	8005600 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	4b21      	ldr	r3, [pc, #132]	@ (8005660 <RCCEx_PLLSAI2_Config+0x1e4>)
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6952      	ldr	r2, [r2, #20]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	3a01      	subs	r2, #1
 80055ec:	0652      	lsls	r2, r2, #25
 80055ee:	4311      	orrs	r1, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	3a01      	subs	r2, #1
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	430a      	orrs	r2, r1
 80055fa:	4916      	ldr	r1, [pc, #88]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005600:	4b14      	ldr	r3, [pc, #80]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a13      	ldr	r2, [pc, #76]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800560a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fc f84a 	bl	80016a4 <HAL_GetTick>
 8005610:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005612:	e009      	b.n	8005628 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005614:	f7fc f846 	bl	80016a4 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d902      	bls.n	8005628 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	73fb      	strb	r3, [r7, #15]
          break;
 8005626:	e005      	b.n	8005634 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005628:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ef      	beq.n	8005614 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	4904      	ldr	r1, [pc, #16]	@ (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005644:	4313      	orrs	r3, r2
 8005646:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	07ff800f 	.word	0x07ff800f
 800565c:	ff9f800f 	.word	0xff9f800f
 8005660:	f9ff800f 	.word	0xf9ff800f

08005664 <__cvt>:
 8005664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	ec57 6b10 	vmov	r6, r7, d0
 800566c:	2f00      	cmp	r7, #0
 800566e:	460c      	mov	r4, r1
 8005670:	4619      	mov	r1, r3
 8005672:	463b      	mov	r3, r7
 8005674:	bfbb      	ittet	lt
 8005676:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800567a:	461f      	movlt	r7, r3
 800567c:	2300      	movge	r3, #0
 800567e:	232d      	movlt	r3, #45	@ 0x2d
 8005680:	700b      	strb	r3, [r1, #0]
 8005682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005684:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005688:	4691      	mov	r9, r2
 800568a:	f023 0820 	bic.w	r8, r3, #32
 800568e:	bfbc      	itt	lt
 8005690:	4632      	movlt	r2, r6
 8005692:	4616      	movlt	r6, r2
 8005694:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005698:	d005      	beq.n	80056a6 <__cvt+0x42>
 800569a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800569e:	d100      	bne.n	80056a2 <__cvt+0x3e>
 80056a0:	3401      	adds	r4, #1
 80056a2:	2102      	movs	r1, #2
 80056a4:	e000      	b.n	80056a8 <__cvt+0x44>
 80056a6:	2103      	movs	r1, #3
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	ab02      	add	r3, sp, #8
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	ec47 6b10 	vmov	d0, r6, r7
 80056b4:	4653      	mov	r3, sl
 80056b6:	4622      	mov	r2, r4
 80056b8:	f001 fe9a 	bl	80073f0 <_dtoa_r>
 80056bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056c0:	4605      	mov	r5, r0
 80056c2:	d119      	bne.n	80056f8 <__cvt+0x94>
 80056c4:	f019 0f01 	tst.w	r9, #1
 80056c8:	d00e      	beq.n	80056e8 <__cvt+0x84>
 80056ca:	eb00 0904 	add.w	r9, r0, r4
 80056ce:	2200      	movs	r2, #0
 80056d0:	2300      	movs	r3, #0
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fb fa0f 	bl	8000af8 <__aeabi_dcmpeq>
 80056da:	b108      	cbz	r0, 80056e0 <__cvt+0x7c>
 80056dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80056e0:	2230      	movs	r2, #48	@ 0x30
 80056e2:	9b03      	ldr	r3, [sp, #12]
 80056e4:	454b      	cmp	r3, r9
 80056e6:	d31e      	bcc.n	8005726 <__cvt+0xc2>
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056ec:	1b5b      	subs	r3, r3, r5
 80056ee:	4628      	mov	r0, r5
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	b004      	add	sp, #16
 80056f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056fc:	eb00 0904 	add.w	r9, r0, r4
 8005700:	d1e5      	bne.n	80056ce <__cvt+0x6a>
 8005702:	7803      	ldrb	r3, [r0, #0]
 8005704:	2b30      	cmp	r3, #48	@ 0x30
 8005706:	d10a      	bne.n	800571e <__cvt+0xba>
 8005708:	2200      	movs	r2, #0
 800570a:	2300      	movs	r3, #0
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f7fb f9f2 	bl	8000af8 <__aeabi_dcmpeq>
 8005714:	b918      	cbnz	r0, 800571e <__cvt+0xba>
 8005716:	f1c4 0401 	rsb	r4, r4, #1
 800571a:	f8ca 4000 	str.w	r4, [sl]
 800571e:	f8da 3000 	ldr.w	r3, [sl]
 8005722:	4499      	add	r9, r3
 8005724:	e7d3      	b.n	80056ce <__cvt+0x6a>
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	9103      	str	r1, [sp, #12]
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e7d9      	b.n	80056e2 <__cvt+0x7e>

0800572e <__exponent>:
 800572e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005730:	2900      	cmp	r1, #0
 8005732:	bfba      	itte	lt
 8005734:	4249      	neglt	r1, r1
 8005736:	232d      	movlt	r3, #45	@ 0x2d
 8005738:	232b      	movge	r3, #43	@ 0x2b
 800573a:	2909      	cmp	r1, #9
 800573c:	7002      	strb	r2, [r0, #0]
 800573e:	7043      	strb	r3, [r0, #1]
 8005740:	dd29      	ble.n	8005796 <__exponent+0x68>
 8005742:	f10d 0307 	add.w	r3, sp, #7
 8005746:	461d      	mov	r5, r3
 8005748:	270a      	movs	r7, #10
 800574a:	461a      	mov	r2, r3
 800574c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005750:	fb07 1416 	mls	r4, r7, r6, r1
 8005754:	3430      	adds	r4, #48	@ 0x30
 8005756:	f802 4c01 	strb.w	r4, [r2, #-1]
 800575a:	460c      	mov	r4, r1
 800575c:	2c63      	cmp	r4, #99	@ 0x63
 800575e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005762:	4631      	mov	r1, r6
 8005764:	dcf1      	bgt.n	800574a <__exponent+0x1c>
 8005766:	3130      	adds	r1, #48	@ 0x30
 8005768:	1e94      	subs	r4, r2, #2
 800576a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800576e:	1c41      	adds	r1, r0, #1
 8005770:	4623      	mov	r3, r4
 8005772:	42ab      	cmp	r3, r5
 8005774:	d30a      	bcc.n	800578c <__exponent+0x5e>
 8005776:	f10d 0309 	add.w	r3, sp, #9
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	42ac      	cmp	r4, r5
 800577e:	bf88      	it	hi
 8005780:	2300      	movhi	r3, #0
 8005782:	3302      	adds	r3, #2
 8005784:	4403      	add	r3, r0
 8005786:	1a18      	subs	r0, r3, r0
 8005788:	b003      	add	sp, #12
 800578a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005790:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005794:	e7ed      	b.n	8005772 <__exponent+0x44>
 8005796:	2330      	movs	r3, #48	@ 0x30
 8005798:	3130      	adds	r1, #48	@ 0x30
 800579a:	7083      	strb	r3, [r0, #2]
 800579c:	70c1      	strb	r1, [r0, #3]
 800579e:	1d03      	adds	r3, r0, #4
 80057a0:	e7f1      	b.n	8005786 <__exponent+0x58>
	...

080057a4 <_printf_float>:
 80057a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a8:	b08d      	sub	sp, #52	@ 0x34
 80057aa:	460c      	mov	r4, r1
 80057ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80057b0:	4616      	mov	r6, r2
 80057b2:	461f      	mov	r7, r3
 80057b4:	4605      	mov	r5, r0
 80057b6:	f001 fd41 	bl	800723c <_localeconv_r>
 80057ba:	6803      	ldr	r3, [r0, #0]
 80057bc:	9304      	str	r3, [sp, #16]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fd6e 	bl	80002a0 <strlen>
 80057c4:	2300      	movs	r3, #0
 80057c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80057c8:	f8d8 3000 	ldr.w	r3, [r8]
 80057cc:	9005      	str	r0, [sp, #20]
 80057ce:	3307      	adds	r3, #7
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	f103 0208 	add.w	r2, r3, #8
 80057d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057dc:	f8d4 b000 	ldr.w	fp, [r4]
 80057e0:	f8c8 2000 	str.w	r2, [r8]
 80057e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057ec:	9307      	str	r3, [sp, #28]
 80057ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80057f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057fa:	4b9c      	ldr	r3, [pc, #624]	@ (8005a6c <_printf_float+0x2c8>)
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005800:	f7fb f9ac 	bl	8000b5c <__aeabi_dcmpun>
 8005804:	bb70      	cbnz	r0, 8005864 <_printf_float+0xc0>
 8005806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580a:	4b98      	ldr	r3, [pc, #608]	@ (8005a6c <_printf_float+0x2c8>)
 800580c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005810:	f7fb f986 	bl	8000b20 <__aeabi_dcmple>
 8005814:	bb30      	cbnz	r0, 8005864 <_printf_float+0xc0>
 8005816:	2200      	movs	r2, #0
 8005818:	2300      	movs	r3, #0
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	f7fb f975 	bl	8000b0c <__aeabi_dcmplt>
 8005822:	b110      	cbz	r0, 800582a <_printf_float+0x86>
 8005824:	232d      	movs	r3, #45	@ 0x2d
 8005826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800582a:	4a91      	ldr	r2, [pc, #580]	@ (8005a70 <_printf_float+0x2cc>)
 800582c:	4b91      	ldr	r3, [pc, #580]	@ (8005a74 <_printf_float+0x2d0>)
 800582e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005832:	bf94      	ite	ls
 8005834:	4690      	movls	r8, r2
 8005836:	4698      	movhi	r8, r3
 8005838:	2303      	movs	r3, #3
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	f02b 0304 	bic.w	r3, fp, #4
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	f04f 0900 	mov.w	r9, #0
 8005846:	9700      	str	r7, [sp, #0]
 8005848:	4633      	mov	r3, r6
 800584a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800584c:	4621      	mov	r1, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f9d2 	bl	8005bf8 <_printf_common>
 8005854:	3001      	adds	r0, #1
 8005856:	f040 808d 	bne.w	8005974 <_printf_float+0x1d0>
 800585a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800585e:	b00d      	add	sp, #52	@ 0x34
 8005860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	f7fb f976 	bl	8000b5c <__aeabi_dcmpun>
 8005870:	b140      	cbz	r0, 8005884 <_printf_float+0xe0>
 8005872:	464b      	mov	r3, r9
 8005874:	2b00      	cmp	r3, #0
 8005876:	bfbc      	itt	lt
 8005878:	232d      	movlt	r3, #45	@ 0x2d
 800587a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800587e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a78 <_printf_float+0x2d4>)
 8005880:	4b7e      	ldr	r3, [pc, #504]	@ (8005a7c <_printf_float+0x2d8>)
 8005882:	e7d4      	b.n	800582e <_printf_float+0x8a>
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800588a:	9206      	str	r2, [sp, #24]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	d13b      	bne.n	8005908 <_printf_float+0x164>
 8005890:	2306      	movs	r3, #6
 8005892:	6063      	str	r3, [r4, #4]
 8005894:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005898:	2300      	movs	r3, #0
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	9303      	str	r3, [sp, #12]
 800589e:	ab0a      	add	r3, sp, #40	@ 0x28
 80058a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058a4:	ab09      	add	r3, sp, #36	@ 0x24
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	6861      	ldr	r1, [r4, #4]
 80058aa:	ec49 8b10 	vmov	d0, r8, r9
 80058ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80058b2:	4628      	mov	r0, r5
 80058b4:	f7ff fed6 	bl	8005664 <__cvt>
 80058b8:	9b06      	ldr	r3, [sp, #24]
 80058ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058bc:	2b47      	cmp	r3, #71	@ 0x47
 80058be:	4680      	mov	r8, r0
 80058c0:	d129      	bne.n	8005916 <_printf_float+0x172>
 80058c2:	1cc8      	adds	r0, r1, #3
 80058c4:	db02      	blt.n	80058cc <_printf_float+0x128>
 80058c6:	6863      	ldr	r3, [r4, #4]
 80058c8:	4299      	cmp	r1, r3
 80058ca:	dd41      	ble.n	8005950 <_printf_float+0x1ac>
 80058cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80058d0:	fa5f fa8a 	uxtb.w	sl, sl
 80058d4:	3901      	subs	r1, #1
 80058d6:	4652      	mov	r2, sl
 80058d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80058de:	f7ff ff26 	bl	800572e <__exponent>
 80058e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058e4:	1813      	adds	r3, r2, r0
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	4681      	mov	r9, r0
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	dc02      	bgt.n	80058f4 <_printf_float+0x150>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	07d2      	lsls	r2, r2, #31
 80058f2:	d501      	bpl.n	80058f8 <_printf_float+0x154>
 80058f4:	3301      	adds	r3, #1
 80058f6:	6123      	str	r3, [r4, #16]
 80058f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0a2      	beq.n	8005846 <_printf_float+0xa2>
 8005900:	232d      	movs	r3, #45	@ 0x2d
 8005902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005906:	e79e      	b.n	8005846 <_printf_float+0xa2>
 8005908:	9a06      	ldr	r2, [sp, #24]
 800590a:	2a47      	cmp	r2, #71	@ 0x47
 800590c:	d1c2      	bne.n	8005894 <_printf_float+0xf0>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1c0      	bne.n	8005894 <_printf_float+0xf0>
 8005912:	2301      	movs	r3, #1
 8005914:	e7bd      	b.n	8005892 <_printf_float+0xee>
 8005916:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800591a:	d9db      	bls.n	80058d4 <_printf_float+0x130>
 800591c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005920:	d118      	bne.n	8005954 <_printf_float+0x1b0>
 8005922:	2900      	cmp	r1, #0
 8005924:	6863      	ldr	r3, [r4, #4]
 8005926:	dd0b      	ble.n	8005940 <_printf_float+0x19c>
 8005928:	6121      	str	r1, [r4, #16]
 800592a:	b913      	cbnz	r3, 8005932 <_printf_float+0x18e>
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	07d0      	lsls	r0, r2, #31
 8005930:	d502      	bpl.n	8005938 <_printf_float+0x194>
 8005932:	3301      	adds	r3, #1
 8005934:	440b      	add	r3, r1
 8005936:	6123      	str	r3, [r4, #16]
 8005938:	65a1      	str	r1, [r4, #88]	@ 0x58
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	e7db      	b.n	80058f8 <_printf_float+0x154>
 8005940:	b913      	cbnz	r3, 8005948 <_printf_float+0x1a4>
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	07d2      	lsls	r2, r2, #31
 8005946:	d501      	bpl.n	800594c <_printf_float+0x1a8>
 8005948:	3302      	adds	r3, #2
 800594a:	e7f4      	b.n	8005936 <_printf_float+0x192>
 800594c:	2301      	movs	r3, #1
 800594e:	e7f2      	b.n	8005936 <_printf_float+0x192>
 8005950:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005956:	4299      	cmp	r1, r3
 8005958:	db05      	blt.n	8005966 <_printf_float+0x1c2>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	6121      	str	r1, [r4, #16]
 800595e:	07d8      	lsls	r0, r3, #31
 8005960:	d5ea      	bpl.n	8005938 <_printf_float+0x194>
 8005962:	1c4b      	adds	r3, r1, #1
 8005964:	e7e7      	b.n	8005936 <_printf_float+0x192>
 8005966:	2900      	cmp	r1, #0
 8005968:	bfd4      	ite	le
 800596a:	f1c1 0202 	rsble	r2, r1, #2
 800596e:	2201      	movgt	r2, #1
 8005970:	4413      	add	r3, r2
 8005972:	e7e0      	b.n	8005936 <_printf_float+0x192>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	055a      	lsls	r2, r3, #21
 8005978:	d407      	bmi.n	800598a <_printf_float+0x1e6>
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	4642      	mov	r2, r8
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	d12b      	bne.n	80059e0 <_printf_float+0x23c>
 8005988:	e767      	b.n	800585a <_printf_float+0xb6>
 800598a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800598e:	f240 80dd 	bls.w	8005b4c <_printf_float+0x3a8>
 8005992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	f7fb f8ad 	bl	8000af8 <__aeabi_dcmpeq>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d033      	beq.n	8005a0a <_printf_float+0x266>
 80059a2:	4a37      	ldr	r2, [pc, #220]	@ (8005a80 <_printf_float+0x2dc>)
 80059a4:	2301      	movs	r3, #1
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f af54 	beq.w	800585a <_printf_float+0xb6>
 80059b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80059b6:	4543      	cmp	r3, r8
 80059b8:	db02      	blt.n	80059c0 <_printf_float+0x21c>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	07d8      	lsls	r0, r3, #31
 80059be:	d50f      	bpl.n	80059e0 <_printf_float+0x23c>
 80059c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f af45 	beq.w	800585a <_printf_float+0xb6>
 80059d0:	f04f 0900 	mov.w	r9, #0
 80059d4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80059d8:	f104 0a1a 	add.w	sl, r4, #26
 80059dc:	45c8      	cmp	r8, r9
 80059de:	dc09      	bgt.n	80059f4 <_printf_float+0x250>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	079b      	lsls	r3, r3, #30
 80059e4:	f100 8103 	bmi.w	8005bee <_printf_float+0x44a>
 80059e8:	68e0      	ldr	r0, [r4, #12]
 80059ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059ec:	4298      	cmp	r0, r3
 80059ee:	bfb8      	it	lt
 80059f0:	4618      	movlt	r0, r3
 80059f2:	e734      	b.n	800585e <_printf_float+0xba>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4652      	mov	r2, sl
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f af2b 	beq.w	800585a <_printf_float+0xb6>
 8005a04:	f109 0901 	add.w	r9, r9, #1
 8005a08:	e7e8      	b.n	80059dc <_printf_float+0x238>
 8005a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	dc39      	bgt.n	8005a84 <_printf_float+0x2e0>
 8005a10:	4a1b      	ldr	r2, [pc, #108]	@ (8005a80 <_printf_float+0x2dc>)
 8005a12:	2301      	movs	r3, #1
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af1d 	beq.w	800585a <_printf_float+0xb6>
 8005a20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a24:	ea59 0303 	orrs.w	r3, r9, r3
 8005a28:	d102      	bne.n	8005a30 <_printf_float+0x28c>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	07d9      	lsls	r1, r3, #31
 8005a2e:	d5d7      	bpl.n	80059e0 <_printf_float+0x23c>
 8005a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a34:	4631      	mov	r1, r6
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b8      	blx	r7
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	f43f af0d 	beq.w	800585a <_printf_float+0xb6>
 8005a40:	f04f 0a00 	mov.w	sl, #0
 8005a44:	f104 0b1a 	add.w	fp, r4, #26
 8005a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a4a:	425b      	negs	r3, r3
 8005a4c:	4553      	cmp	r3, sl
 8005a4e:	dc01      	bgt.n	8005a54 <_printf_float+0x2b0>
 8005a50:	464b      	mov	r3, r9
 8005a52:	e793      	b.n	800597c <_printf_float+0x1d8>
 8005a54:	2301      	movs	r3, #1
 8005a56:	465a      	mov	r2, fp
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f aefb 	beq.w	800585a <_printf_float+0xb6>
 8005a64:	f10a 0a01 	add.w	sl, sl, #1
 8005a68:	e7ee      	b.n	8005a48 <_printf_float+0x2a4>
 8005a6a:	bf00      	nop
 8005a6c:	7fefffff 	.word	0x7fefffff
 8005a70:	08009ddc 	.word	0x08009ddc
 8005a74:	08009de0 	.word	0x08009de0
 8005a78:	08009de4 	.word	0x08009de4
 8005a7c:	08009de8 	.word	0x08009de8
 8005a80:	08009dec 	.word	0x08009dec
 8005a84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a8a:	4553      	cmp	r3, sl
 8005a8c:	bfa8      	it	ge
 8005a8e:	4653      	movge	r3, sl
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	4699      	mov	r9, r3
 8005a94:	dc36      	bgt.n	8005b04 <_printf_float+0x360>
 8005a96:	f04f 0b00 	mov.w	fp, #0
 8005a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a9e:	f104 021a 	add.w	r2, r4, #26
 8005aa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005aa4:	9306      	str	r3, [sp, #24]
 8005aa6:	eba3 0309 	sub.w	r3, r3, r9
 8005aaa:	455b      	cmp	r3, fp
 8005aac:	dc31      	bgt.n	8005b12 <_printf_float+0x36e>
 8005aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab0:	459a      	cmp	sl, r3
 8005ab2:	dc3a      	bgt.n	8005b2a <_printf_float+0x386>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	07da      	lsls	r2, r3, #31
 8005ab8:	d437      	bmi.n	8005b2a <_printf_float+0x386>
 8005aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005abc:	ebaa 0903 	sub.w	r9, sl, r3
 8005ac0:	9b06      	ldr	r3, [sp, #24]
 8005ac2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ac6:	4599      	cmp	r9, r3
 8005ac8:	bfa8      	it	ge
 8005aca:	4699      	movge	r9, r3
 8005acc:	f1b9 0f00 	cmp.w	r9, #0
 8005ad0:	dc33      	bgt.n	8005b3a <_printf_float+0x396>
 8005ad2:	f04f 0800 	mov.w	r8, #0
 8005ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ada:	f104 0b1a 	add.w	fp, r4, #26
 8005ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ae4:	eba3 0309 	sub.w	r3, r3, r9
 8005ae8:	4543      	cmp	r3, r8
 8005aea:	f77f af79 	ble.w	80059e0 <_printf_float+0x23c>
 8005aee:	2301      	movs	r3, #1
 8005af0:	465a      	mov	r2, fp
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	f43f aeae 	beq.w	800585a <_printf_float+0xb6>
 8005afe:	f108 0801 	add.w	r8, r8, #1
 8005b02:	e7ec      	b.n	8005ade <_printf_float+0x33a>
 8005b04:	4642      	mov	r2, r8
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d1c2      	bne.n	8005a96 <_printf_float+0x2f2>
 8005b10:	e6a3      	b.n	800585a <_printf_float+0xb6>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	9206      	str	r2, [sp, #24]
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f ae9c 	beq.w	800585a <_printf_float+0xb6>
 8005b22:	9a06      	ldr	r2, [sp, #24]
 8005b24:	f10b 0b01 	add.w	fp, fp, #1
 8005b28:	e7bb      	b.n	8005aa2 <_printf_float+0x2fe>
 8005b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	d1c0      	bne.n	8005aba <_printf_float+0x316>
 8005b38:	e68f      	b.n	800585a <_printf_float+0xb6>
 8005b3a:	9a06      	ldr	r2, [sp, #24]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	4442      	add	r2, r8
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	d1c3      	bne.n	8005ad2 <_printf_float+0x32e>
 8005b4a:	e686      	b.n	800585a <_printf_float+0xb6>
 8005b4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b50:	f1ba 0f01 	cmp.w	sl, #1
 8005b54:	dc01      	bgt.n	8005b5a <_printf_float+0x3b6>
 8005b56:	07db      	lsls	r3, r3, #31
 8005b58:	d536      	bpl.n	8005bc8 <_printf_float+0x424>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	f43f ae78 	beq.w	800585a <_printf_float+0xb6>
 8005b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f ae70 	beq.w	800585a <_printf_float+0xb6>
 8005b7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2300      	movs	r3, #0
 8005b82:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005b86:	f7fa ffb7 	bl	8000af8 <__aeabi_dcmpeq>
 8005b8a:	b9c0      	cbnz	r0, 8005bbe <_printf_float+0x41a>
 8005b8c:	4653      	mov	r3, sl
 8005b8e:	f108 0201 	add.w	r2, r8, #1
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d10c      	bne.n	8005bb6 <_printf_float+0x412>
 8005b9c:	e65d      	b.n	800585a <_printf_float+0xb6>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	465a      	mov	r2, fp
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f ae56 	beq.w	800585a <_printf_float+0xb6>
 8005bae:	f108 0801 	add.w	r8, r8, #1
 8005bb2:	45d0      	cmp	r8, sl
 8005bb4:	dbf3      	blt.n	8005b9e <_printf_float+0x3fa>
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bbc:	e6df      	b.n	800597e <_printf_float+0x1da>
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	f104 0b1a 	add.w	fp, r4, #26
 8005bc6:	e7f4      	b.n	8005bb2 <_printf_float+0x40e>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4642      	mov	r2, r8
 8005bcc:	e7e1      	b.n	8005b92 <_printf_float+0x3ee>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	464a      	mov	r2, r9
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b8      	blx	r7
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f43f ae3e 	beq.w	800585a <_printf_float+0xb6>
 8005bde:	f108 0801 	add.w	r8, r8, #1
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005be6:	1a5b      	subs	r3, r3, r1
 8005be8:	4543      	cmp	r3, r8
 8005bea:	dcf0      	bgt.n	8005bce <_printf_float+0x42a>
 8005bec:	e6fc      	b.n	80059e8 <_printf_float+0x244>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	f104 0919 	add.w	r9, r4, #25
 8005bf6:	e7f4      	b.n	8005be2 <_printf_float+0x43e>

08005bf8 <_printf_common>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	4698      	mov	r8, r3
 8005c00:	688a      	ldr	r2, [r1, #8]
 8005c02:	690b      	ldr	r3, [r1, #16]
 8005c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	bfb8      	it	lt
 8005c0c:	4613      	movlt	r3, r2
 8005c0e:	6033      	str	r3, [r6, #0]
 8005c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c14:	4607      	mov	r7, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	b10a      	cbz	r2, 8005c1e <_printf_common+0x26>
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	6033      	str	r3, [r6, #0]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	0699      	lsls	r1, r3, #26
 8005c22:	bf42      	ittt	mi
 8005c24:	6833      	ldrmi	r3, [r6, #0]
 8005c26:	3302      	addmi	r3, #2
 8005c28:	6033      	strmi	r3, [r6, #0]
 8005c2a:	6825      	ldr	r5, [r4, #0]
 8005c2c:	f015 0506 	ands.w	r5, r5, #6
 8005c30:	d106      	bne.n	8005c40 <_printf_common+0x48>
 8005c32:	f104 0a19 	add.w	sl, r4, #25
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	6832      	ldr	r2, [r6, #0]
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	dc26      	bgt.n	8005c8e <_printf_common+0x96>
 8005c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	3b00      	subs	r3, #0
 8005c48:	bf18      	it	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	0692      	lsls	r2, r2, #26
 8005c4e:	d42b      	bmi.n	8005ca8 <_printf_common+0xb0>
 8005c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c54:	4641      	mov	r1, r8
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c8      	blx	r9
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d01e      	beq.n	8005c9c <_printf_common+0xa4>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	f003 0306 	and.w	r3, r3, #6
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	bf02      	ittt	eq
 8005c6a:	68e5      	ldreq	r5, [r4, #12]
 8005c6c:	6833      	ldreq	r3, [r6, #0]
 8005c6e:	1aed      	subeq	r5, r5, r3
 8005c70:	68a3      	ldr	r3, [r4, #8]
 8005c72:	bf0c      	ite	eq
 8005c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c78:	2500      	movne	r5, #0
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bfc4      	itt	gt
 8005c7e:	1a9b      	subgt	r3, r3, r2
 8005c80:	18ed      	addgt	r5, r5, r3
 8005c82:	2600      	movs	r6, #0
 8005c84:	341a      	adds	r4, #26
 8005c86:	42b5      	cmp	r5, r6
 8005c88:	d11a      	bne.n	8005cc0 <_printf_common+0xc8>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e008      	b.n	8005ca0 <_printf_common+0xa8>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4652      	mov	r2, sl
 8005c92:	4641      	mov	r1, r8
 8005c94:	4638      	mov	r0, r7
 8005c96:	47c8      	blx	r9
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d103      	bne.n	8005ca4 <_printf_common+0xac>
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	e7c6      	b.n	8005c36 <_printf_common+0x3e>
 8005ca8:	18e1      	adds	r1, r4, r3
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	2030      	movs	r0, #48	@ 0x30
 8005cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cb2:	4422      	add	r2, r4
 8005cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	e7c7      	b.n	8005c50 <_printf_common+0x58>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c8      	blx	r9
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d0e6      	beq.n	8005c9c <_printf_common+0xa4>
 8005cce:	3601      	adds	r6, #1
 8005cd0:	e7d9      	b.n	8005c86 <_printf_common+0x8e>
	...

08005cd4 <_printf_i>:
 8005cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd8:	7e0f      	ldrb	r7, [r1, #24]
 8005cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cdc:	2f78      	cmp	r7, #120	@ 0x78
 8005cde:	4691      	mov	r9, r2
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	469a      	mov	sl, r3
 8005ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cea:	d807      	bhi.n	8005cfc <_printf_i+0x28>
 8005cec:	2f62      	cmp	r7, #98	@ 0x62
 8005cee:	d80a      	bhi.n	8005d06 <_printf_i+0x32>
 8005cf0:	2f00      	cmp	r7, #0
 8005cf2:	f000 80d2 	beq.w	8005e9a <_printf_i+0x1c6>
 8005cf6:	2f58      	cmp	r7, #88	@ 0x58
 8005cf8:	f000 80b9 	beq.w	8005e6e <_printf_i+0x19a>
 8005cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d04:	e03a      	b.n	8005d7c <_printf_i+0xa8>
 8005d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d0a:	2b15      	cmp	r3, #21
 8005d0c:	d8f6      	bhi.n	8005cfc <_printf_i+0x28>
 8005d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d14 <_printf_i+0x40>)
 8005d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005d81 	.word	0x08005d81
 8005d1c:	08005cfd 	.word	0x08005cfd
 8005d20:	08005cfd 	.word	0x08005cfd
 8005d24:	08005cfd 	.word	0x08005cfd
 8005d28:	08005cfd 	.word	0x08005cfd
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005cfd 	.word	0x08005cfd
 8005d34:	08005cfd 	.word	0x08005cfd
 8005d38:	08005cfd 	.word	0x08005cfd
 8005d3c:	08005cfd 	.word	0x08005cfd
 8005d40:	08005e81 	.word	0x08005e81
 8005d44:	08005dab 	.word	0x08005dab
 8005d48:	08005e3b 	.word	0x08005e3b
 8005d4c:	08005cfd 	.word	0x08005cfd
 8005d50:	08005cfd 	.word	0x08005cfd
 8005d54:	08005ea3 	.word	0x08005ea3
 8005d58:	08005cfd 	.word	0x08005cfd
 8005d5c:	08005dab 	.word	0x08005dab
 8005d60:	08005cfd 	.word	0x08005cfd
 8005d64:	08005cfd 	.word	0x08005cfd
 8005d68:	08005e43 	.word	0x08005e43
 8005d6c:	6833      	ldr	r3, [r6, #0]
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6032      	str	r2, [r6, #0]
 8005d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e09d      	b.n	8005ebc <_printf_i+0x1e8>
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	1d19      	adds	r1, r3, #4
 8005d86:	6031      	str	r1, [r6, #0]
 8005d88:	0606      	lsls	r6, r0, #24
 8005d8a:	d501      	bpl.n	8005d90 <_printf_i+0xbc>
 8005d8c:	681d      	ldr	r5, [r3, #0]
 8005d8e:	e003      	b.n	8005d98 <_printf_i+0xc4>
 8005d90:	0645      	lsls	r5, r0, #25
 8005d92:	d5fb      	bpl.n	8005d8c <_printf_i+0xb8>
 8005d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	da03      	bge.n	8005da4 <_printf_i+0xd0>
 8005d9c:	232d      	movs	r3, #45	@ 0x2d
 8005d9e:	426d      	negs	r5, r5
 8005da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005da4:	4859      	ldr	r0, [pc, #356]	@ (8005f0c <_printf_i+0x238>)
 8005da6:	230a      	movs	r3, #10
 8005da8:	e011      	b.n	8005dce <_printf_i+0xfa>
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	6833      	ldr	r3, [r6, #0]
 8005dae:	0608      	lsls	r0, r1, #24
 8005db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005db4:	d402      	bmi.n	8005dbc <_printf_i+0xe8>
 8005db6:	0649      	lsls	r1, r1, #25
 8005db8:	bf48      	it	mi
 8005dba:	b2ad      	uxthmi	r5, r5
 8005dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dbe:	4853      	ldr	r0, [pc, #332]	@ (8005f0c <_printf_i+0x238>)
 8005dc0:	6033      	str	r3, [r6, #0]
 8005dc2:	bf14      	ite	ne
 8005dc4:	230a      	movne	r3, #10
 8005dc6:	2308      	moveq	r3, #8
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dce:	6866      	ldr	r6, [r4, #4]
 8005dd0:	60a6      	str	r6, [r4, #8]
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	bfa2      	ittt	ge
 8005dd6:	6821      	ldrge	r1, [r4, #0]
 8005dd8:	f021 0104 	bicge.w	r1, r1, #4
 8005ddc:	6021      	strge	r1, [r4, #0]
 8005dde:	b90d      	cbnz	r5, 8005de4 <_printf_i+0x110>
 8005de0:	2e00      	cmp	r6, #0
 8005de2:	d04b      	beq.n	8005e7c <_printf_i+0x1a8>
 8005de4:	4616      	mov	r6, r2
 8005de6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dea:	fb03 5711 	mls	r7, r3, r1, r5
 8005dee:	5dc7      	ldrb	r7, [r0, r7]
 8005df0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005df4:	462f      	mov	r7, r5
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	460d      	mov	r5, r1
 8005dfa:	d9f4      	bls.n	8005de6 <_printf_i+0x112>
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d10b      	bne.n	8005e18 <_printf_i+0x144>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	07df      	lsls	r7, r3, #31
 8005e04:	d508      	bpl.n	8005e18 <_printf_i+0x144>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	6861      	ldr	r1, [r4, #4]
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	bfde      	ittt	le
 8005e0e:	2330      	movle	r3, #48	@ 0x30
 8005e10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e18:	1b92      	subs	r2, r2, r6
 8005e1a:	6122      	str	r2, [r4, #16]
 8005e1c:	f8cd a000 	str.w	sl, [sp]
 8005e20:	464b      	mov	r3, r9
 8005e22:	aa03      	add	r2, sp, #12
 8005e24:	4621      	mov	r1, r4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7ff fee6 	bl	8005bf8 <_printf_common>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d14a      	bne.n	8005ec6 <_printf_i+0x1f2>
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e34:	b004      	add	sp, #16
 8005e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	f043 0320 	orr.w	r3, r3, #32
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	4833      	ldr	r0, [pc, #204]	@ (8005f10 <_printf_i+0x23c>)
 8005e44:	2778      	movs	r7, #120	@ 0x78
 8005e46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	6831      	ldr	r1, [r6, #0]
 8005e4e:	061f      	lsls	r7, r3, #24
 8005e50:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e54:	d402      	bmi.n	8005e5c <_printf_i+0x188>
 8005e56:	065f      	lsls	r7, r3, #25
 8005e58:	bf48      	it	mi
 8005e5a:	b2ad      	uxthmi	r5, r5
 8005e5c:	6031      	str	r1, [r6, #0]
 8005e5e:	07d9      	lsls	r1, r3, #31
 8005e60:	bf44      	itt	mi
 8005e62:	f043 0320 	orrmi.w	r3, r3, #32
 8005e66:	6023      	strmi	r3, [r4, #0]
 8005e68:	b11d      	cbz	r5, 8005e72 <_printf_i+0x19e>
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	e7ac      	b.n	8005dc8 <_printf_i+0xf4>
 8005e6e:	4827      	ldr	r0, [pc, #156]	@ (8005f0c <_printf_i+0x238>)
 8005e70:	e7e9      	b.n	8005e46 <_printf_i+0x172>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f023 0320 	bic.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	e7f6      	b.n	8005e6a <_printf_i+0x196>
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	e7bd      	b.n	8005dfc <_printf_i+0x128>
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	6825      	ldr	r5, [r4, #0]
 8005e84:	6961      	ldr	r1, [r4, #20]
 8005e86:	1d18      	adds	r0, r3, #4
 8005e88:	6030      	str	r0, [r6, #0]
 8005e8a:	062e      	lsls	r6, r5, #24
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	d501      	bpl.n	8005e94 <_printf_i+0x1c0>
 8005e90:	6019      	str	r1, [r3, #0]
 8005e92:	e002      	b.n	8005e9a <_printf_i+0x1c6>
 8005e94:	0668      	lsls	r0, r5, #25
 8005e96:	d5fb      	bpl.n	8005e90 <_printf_i+0x1bc>
 8005e98:	8019      	strh	r1, [r3, #0]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	4616      	mov	r6, r2
 8005ea0:	e7bc      	b.n	8005e1c <_printf_i+0x148>
 8005ea2:	6833      	ldr	r3, [r6, #0]
 8005ea4:	1d1a      	adds	r2, r3, #4
 8005ea6:	6032      	str	r2, [r6, #0]
 8005ea8:	681e      	ldr	r6, [r3, #0]
 8005eaa:	6862      	ldr	r2, [r4, #4]
 8005eac:	2100      	movs	r1, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7fa f9a6 	bl	8000200 <memchr>
 8005eb4:	b108      	cbz	r0, 8005eba <_printf_i+0x1e6>
 8005eb6:	1b80      	subs	r0, r0, r6
 8005eb8:	6060      	str	r0, [r4, #4]
 8005eba:	6863      	ldr	r3, [r4, #4]
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec4:	e7aa      	b.n	8005e1c <_printf_i+0x148>
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	4632      	mov	r2, r6
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4640      	mov	r0, r8
 8005ece:	47d0      	blx	sl
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0ad      	beq.n	8005e30 <_printf_i+0x15c>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	079b      	lsls	r3, r3, #30
 8005ed8:	d413      	bmi.n	8005f02 <_printf_i+0x22e>
 8005eda:	68e0      	ldr	r0, [r4, #12]
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	4298      	cmp	r0, r3
 8005ee0:	bfb8      	it	lt
 8005ee2:	4618      	movlt	r0, r3
 8005ee4:	e7a6      	b.n	8005e34 <_printf_i+0x160>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4632      	mov	r2, r6
 8005eea:	4649      	mov	r1, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	47d0      	blx	sl
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d09d      	beq.n	8005e30 <_printf_i+0x15c>
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	68e3      	ldr	r3, [r4, #12]
 8005ef8:	9903      	ldr	r1, [sp, #12]
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	dcf2      	bgt.n	8005ee6 <_printf_i+0x212>
 8005f00:	e7eb      	b.n	8005eda <_printf_i+0x206>
 8005f02:	2500      	movs	r5, #0
 8005f04:	f104 0619 	add.w	r6, r4, #25
 8005f08:	e7f5      	b.n	8005ef6 <_printf_i+0x222>
 8005f0a:	bf00      	nop
 8005f0c:	08009dee 	.word	0x08009dee
 8005f10:	08009dff 	.word	0x08009dff

08005f14 <_scanf_float>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	4617      	mov	r7, r2
 8005f1c:	9303      	str	r3, [sp, #12]
 8005f1e:	688b      	ldr	r3, [r1, #8]
 8005f20:	1e5a      	subs	r2, r3, #1
 8005f22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005f26:	bf81      	itttt	hi
 8005f28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005f2c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005f30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005f34:	608b      	strhi	r3, [r1, #8]
 8005f36:	680b      	ldr	r3, [r1, #0]
 8005f38:	460a      	mov	r2, r1
 8005f3a:	f04f 0500 	mov.w	r5, #0
 8005f3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005f42:	f842 3b1c 	str.w	r3, [r2], #28
 8005f46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f4a:	4680      	mov	r8, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	bf98      	it	ls
 8005f50:	f04f 0b00 	movls.w	fp, #0
 8005f54:	9201      	str	r2, [sp, #4]
 8005f56:	4616      	mov	r6, r2
 8005f58:	46aa      	mov	sl, r5
 8005f5a:	46a9      	mov	r9, r5
 8005f5c:	9502      	str	r5, [sp, #8]
 8005f5e:	68a2      	ldr	r2, [r4, #8]
 8005f60:	b152      	cbz	r2, 8005f78 <_scanf_float+0x64>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b4e      	cmp	r3, #78	@ 0x4e
 8005f68:	d864      	bhi.n	8006034 <_scanf_float+0x120>
 8005f6a:	2b40      	cmp	r3, #64	@ 0x40
 8005f6c:	d83c      	bhi.n	8005fe8 <_scanf_float+0xd4>
 8005f6e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005f72:	b2c8      	uxtb	r0, r1
 8005f74:	280e      	cmp	r0, #14
 8005f76:	d93a      	bls.n	8005fee <_scanf_float+0xda>
 8005f78:	f1b9 0f00 	cmp.w	r9, #0
 8005f7c:	d003      	beq.n	8005f86 <_scanf_float+0x72>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005f8a:	f1ba 0f01 	cmp.w	sl, #1
 8005f8e:	f200 8117 	bhi.w	80061c0 <_scanf_float+0x2ac>
 8005f92:	9b01      	ldr	r3, [sp, #4]
 8005f94:	429e      	cmp	r6, r3
 8005f96:	f200 8108 	bhi.w	80061aa <_scanf_float+0x296>
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	b007      	add	sp, #28
 8005f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005fa6:	2a0d      	cmp	r2, #13
 8005fa8:	d8e6      	bhi.n	8005f78 <_scanf_float+0x64>
 8005faa:	a101      	add	r1, pc, #4	@ (adr r1, 8005fb0 <_scanf_float+0x9c>)
 8005fac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fb0:	080060f7 	.word	0x080060f7
 8005fb4:	08005f79 	.word	0x08005f79
 8005fb8:	08005f79 	.word	0x08005f79
 8005fbc:	08005f79 	.word	0x08005f79
 8005fc0:	08006157 	.word	0x08006157
 8005fc4:	0800612f 	.word	0x0800612f
 8005fc8:	08005f79 	.word	0x08005f79
 8005fcc:	08005f79 	.word	0x08005f79
 8005fd0:	08006105 	.word	0x08006105
 8005fd4:	08005f79 	.word	0x08005f79
 8005fd8:	08005f79 	.word	0x08005f79
 8005fdc:	08005f79 	.word	0x08005f79
 8005fe0:	08005f79 	.word	0x08005f79
 8005fe4:	080060bd 	.word	0x080060bd
 8005fe8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005fec:	e7db      	b.n	8005fa6 <_scanf_float+0x92>
 8005fee:	290e      	cmp	r1, #14
 8005ff0:	d8c2      	bhi.n	8005f78 <_scanf_float+0x64>
 8005ff2:	a001      	add	r0, pc, #4	@ (adr r0, 8005ff8 <_scanf_float+0xe4>)
 8005ff4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ff8:	080060ad 	.word	0x080060ad
 8005ffc:	08005f79 	.word	0x08005f79
 8006000:	080060ad 	.word	0x080060ad
 8006004:	08006143 	.word	0x08006143
 8006008:	08005f79 	.word	0x08005f79
 800600c:	08006055 	.word	0x08006055
 8006010:	08006093 	.word	0x08006093
 8006014:	08006093 	.word	0x08006093
 8006018:	08006093 	.word	0x08006093
 800601c:	08006093 	.word	0x08006093
 8006020:	08006093 	.word	0x08006093
 8006024:	08006093 	.word	0x08006093
 8006028:	08006093 	.word	0x08006093
 800602c:	08006093 	.word	0x08006093
 8006030:	08006093 	.word	0x08006093
 8006034:	2b6e      	cmp	r3, #110	@ 0x6e
 8006036:	d809      	bhi.n	800604c <_scanf_float+0x138>
 8006038:	2b60      	cmp	r3, #96	@ 0x60
 800603a:	d8b2      	bhi.n	8005fa2 <_scanf_float+0x8e>
 800603c:	2b54      	cmp	r3, #84	@ 0x54
 800603e:	d07b      	beq.n	8006138 <_scanf_float+0x224>
 8006040:	2b59      	cmp	r3, #89	@ 0x59
 8006042:	d199      	bne.n	8005f78 <_scanf_float+0x64>
 8006044:	2d07      	cmp	r5, #7
 8006046:	d197      	bne.n	8005f78 <_scanf_float+0x64>
 8006048:	2508      	movs	r5, #8
 800604a:	e02c      	b.n	80060a6 <_scanf_float+0x192>
 800604c:	2b74      	cmp	r3, #116	@ 0x74
 800604e:	d073      	beq.n	8006138 <_scanf_float+0x224>
 8006050:	2b79      	cmp	r3, #121	@ 0x79
 8006052:	e7f6      	b.n	8006042 <_scanf_float+0x12e>
 8006054:	6821      	ldr	r1, [r4, #0]
 8006056:	05c8      	lsls	r0, r1, #23
 8006058:	d51b      	bpl.n	8006092 <_scanf_float+0x17e>
 800605a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800605e:	6021      	str	r1, [r4, #0]
 8006060:	f109 0901 	add.w	r9, r9, #1
 8006064:	f1bb 0f00 	cmp.w	fp, #0
 8006068:	d003      	beq.n	8006072 <_scanf_float+0x15e>
 800606a:	3201      	adds	r2, #1
 800606c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006070:	60a2      	str	r2, [r4, #8]
 8006072:	68a3      	ldr	r3, [r4, #8]
 8006074:	3b01      	subs	r3, #1
 8006076:	60a3      	str	r3, [r4, #8]
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	3301      	adds	r3, #1
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3b01      	subs	r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	607b      	str	r3, [r7, #4]
 8006086:	f340 8087 	ble.w	8006198 <_scanf_float+0x284>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	3301      	adds	r3, #1
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	e765      	b.n	8005f5e <_scanf_float+0x4a>
 8006092:	eb1a 0105 	adds.w	r1, sl, r5
 8006096:	f47f af6f 	bne.w	8005f78 <_scanf_float+0x64>
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80060a0:	6022      	str	r2, [r4, #0]
 80060a2:	460d      	mov	r5, r1
 80060a4:	468a      	mov	sl, r1
 80060a6:	f806 3b01 	strb.w	r3, [r6], #1
 80060aa:	e7e2      	b.n	8006072 <_scanf_float+0x15e>
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	0610      	lsls	r0, r2, #24
 80060b0:	f57f af62 	bpl.w	8005f78 <_scanf_float+0x64>
 80060b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060b8:	6022      	str	r2, [r4, #0]
 80060ba:	e7f4      	b.n	80060a6 <_scanf_float+0x192>
 80060bc:	f1ba 0f00 	cmp.w	sl, #0
 80060c0:	d10e      	bne.n	80060e0 <_scanf_float+0x1cc>
 80060c2:	f1b9 0f00 	cmp.w	r9, #0
 80060c6:	d10e      	bne.n	80060e6 <_scanf_float+0x1d2>
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80060ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80060d2:	d108      	bne.n	80060e6 <_scanf_float+0x1d2>
 80060d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	f04f 0a01 	mov.w	sl, #1
 80060de:	e7e2      	b.n	80060a6 <_scanf_float+0x192>
 80060e0:	f1ba 0f02 	cmp.w	sl, #2
 80060e4:	d055      	beq.n	8006192 <_scanf_float+0x27e>
 80060e6:	2d01      	cmp	r5, #1
 80060e8:	d002      	beq.n	80060f0 <_scanf_float+0x1dc>
 80060ea:	2d04      	cmp	r5, #4
 80060ec:	f47f af44 	bne.w	8005f78 <_scanf_float+0x64>
 80060f0:	3501      	adds	r5, #1
 80060f2:	b2ed      	uxtb	r5, r5
 80060f4:	e7d7      	b.n	80060a6 <_scanf_float+0x192>
 80060f6:	f1ba 0f01 	cmp.w	sl, #1
 80060fa:	f47f af3d 	bne.w	8005f78 <_scanf_float+0x64>
 80060fe:	f04f 0a02 	mov.w	sl, #2
 8006102:	e7d0      	b.n	80060a6 <_scanf_float+0x192>
 8006104:	b97d      	cbnz	r5, 8006126 <_scanf_float+0x212>
 8006106:	f1b9 0f00 	cmp.w	r9, #0
 800610a:	f47f af38 	bne.w	8005f7e <_scanf_float+0x6a>
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006114:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006118:	f040 8108 	bne.w	800632c <_scanf_float+0x418>
 800611c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006120:	6022      	str	r2, [r4, #0]
 8006122:	2501      	movs	r5, #1
 8006124:	e7bf      	b.n	80060a6 <_scanf_float+0x192>
 8006126:	2d03      	cmp	r5, #3
 8006128:	d0e2      	beq.n	80060f0 <_scanf_float+0x1dc>
 800612a:	2d05      	cmp	r5, #5
 800612c:	e7de      	b.n	80060ec <_scanf_float+0x1d8>
 800612e:	2d02      	cmp	r5, #2
 8006130:	f47f af22 	bne.w	8005f78 <_scanf_float+0x64>
 8006134:	2503      	movs	r5, #3
 8006136:	e7b6      	b.n	80060a6 <_scanf_float+0x192>
 8006138:	2d06      	cmp	r5, #6
 800613a:	f47f af1d 	bne.w	8005f78 <_scanf_float+0x64>
 800613e:	2507      	movs	r5, #7
 8006140:	e7b1      	b.n	80060a6 <_scanf_float+0x192>
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	0591      	lsls	r1, r2, #22
 8006146:	f57f af17 	bpl.w	8005f78 <_scanf_float+0x64>
 800614a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	f8cd 9008 	str.w	r9, [sp, #8]
 8006154:	e7a7      	b.n	80060a6 <_scanf_float+0x192>
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800615c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006160:	d006      	beq.n	8006170 <_scanf_float+0x25c>
 8006162:	0550      	lsls	r0, r2, #21
 8006164:	f57f af08 	bpl.w	8005f78 <_scanf_float+0x64>
 8006168:	f1b9 0f00 	cmp.w	r9, #0
 800616c:	f000 80de 	beq.w	800632c <_scanf_float+0x418>
 8006170:	0591      	lsls	r1, r2, #22
 8006172:	bf58      	it	pl
 8006174:	9902      	ldrpl	r1, [sp, #8]
 8006176:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800617a:	bf58      	it	pl
 800617c:	eba9 0101 	subpl.w	r1, r9, r1
 8006180:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006184:	bf58      	it	pl
 8006186:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800618a:	6022      	str	r2, [r4, #0]
 800618c:	f04f 0900 	mov.w	r9, #0
 8006190:	e789      	b.n	80060a6 <_scanf_float+0x192>
 8006192:	f04f 0a03 	mov.w	sl, #3
 8006196:	e786      	b.n	80060a6 <_scanf_float+0x192>
 8006198:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800619c:	4639      	mov	r1, r7
 800619e:	4640      	mov	r0, r8
 80061a0:	4798      	blx	r3
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f43f aedb 	beq.w	8005f5e <_scanf_float+0x4a>
 80061a8:	e6e6      	b.n	8005f78 <_scanf_float+0x64>
 80061aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061b2:	463a      	mov	r2, r7
 80061b4:	4640      	mov	r0, r8
 80061b6:	4798      	blx	r3
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	e6e8      	b.n	8005f92 <_scanf_float+0x7e>
 80061c0:	1e6b      	subs	r3, r5, #1
 80061c2:	2b06      	cmp	r3, #6
 80061c4:	d824      	bhi.n	8006210 <_scanf_float+0x2fc>
 80061c6:	2d02      	cmp	r5, #2
 80061c8:	d836      	bhi.n	8006238 <_scanf_float+0x324>
 80061ca:	9b01      	ldr	r3, [sp, #4]
 80061cc:	429e      	cmp	r6, r3
 80061ce:	f67f aee4 	bls.w	8005f9a <_scanf_float+0x86>
 80061d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061da:	463a      	mov	r2, r7
 80061dc:	4640      	mov	r0, r8
 80061de:	4798      	blx	r3
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	6123      	str	r3, [r4, #16]
 80061e6:	e7f0      	b.n	80061ca <_scanf_float+0x2b6>
 80061e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80061f0:	463a      	mov	r2, r7
 80061f2:	4640      	mov	r0, r8
 80061f4:	4798      	blx	r3
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006200:	fa5f fa8a 	uxtb.w	sl, sl
 8006204:	f1ba 0f02 	cmp.w	sl, #2
 8006208:	d1ee      	bne.n	80061e8 <_scanf_float+0x2d4>
 800620a:	3d03      	subs	r5, #3
 800620c:	b2ed      	uxtb	r5, r5
 800620e:	1b76      	subs	r6, r6, r5
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	05da      	lsls	r2, r3, #23
 8006214:	d530      	bpl.n	8006278 <_scanf_float+0x364>
 8006216:	055b      	lsls	r3, r3, #21
 8006218:	d511      	bpl.n	800623e <_scanf_float+0x32a>
 800621a:	9b01      	ldr	r3, [sp, #4]
 800621c:	429e      	cmp	r6, r3
 800621e:	f67f aebc 	bls.w	8005f9a <_scanf_float+0x86>
 8006222:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006226:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800622a:	463a      	mov	r2, r7
 800622c:	4640      	mov	r0, r8
 800622e:	4798      	blx	r3
 8006230:	6923      	ldr	r3, [r4, #16]
 8006232:	3b01      	subs	r3, #1
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	e7f0      	b.n	800621a <_scanf_float+0x306>
 8006238:	46aa      	mov	sl, r5
 800623a:	46b3      	mov	fp, r6
 800623c:	e7de      	b.n	80061fc <_scanf_float+0x2e8>
 800623e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	2965      	cmp	r1, #101	@ 0x65
 8006246:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800624a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	d00c      	beq.n	800626c <_scanf_float+0x358>
 8006252:	2945      	cmp	r1, #69	@ 0x45
 8006254:	d00a      	beq.n	800626c <_scanf_float+0x358>
 8006256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800625a:	463a      	mov	r2, r7
 800625c:	4640      	mov	r0, r8
 800625e:	4798      	blx	r3
 8006260:	6923      	ldr	r3, [r4, #16]
 8006262:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006266:	3b01      	subs	r3, #1
 8006268:	1eb5      	subs	r5, r6, #2
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006270:	463a      	mov	r2, r7
 8006272:	4640      	mov	r0, r8
 8006274:	4798      	blx	r3
 8006276:	462e      	mov	r6, r5
 8006278:	6822      	ldr	r2, [r4, #0]
 800627a:	f012 0210 	ands.w	r2, r2, #16
 800627e:	d001      	beq.n	8006284 <_scanf_float+0x370>
 8006280:	2000      	movs	r0, #0
 8006282:	e68b      	b.n	8005f9c <_scanf_float+0x88>
 8006284:	7032      	strb	r2, [r6, #0]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800628c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006290:	d11c      	bne.n	80062cc <_scanf_float+0x3b8>
 8006292:	9b02      	ldr	r3, [sp, #8]
 8006294:	454b      	cmp	r3, r9
 8006296:	eba3 0209 	sub.w	r2, r3, r9
 800629a:	d123      	bne.n	80062e4 <_scanf_float+0x3d0>
 800629c:	9901      	ldr	r1, [sp, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	4640      	mov	r0, r8
 80062a2:	f000 ff11 	bl	80070c8 <_strtod_r>
 80062a6:	9b03      	ldr	r3, [sp, #12]
 80062a8:	6821      	ldr	r1, [r4, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f011 0f02 	tst.w	r1, #2
 80062b0:	ec57 6b10 	vmov	r6, r7, d0
 80062b4:	f103 0204 	add.w	r2, r3, #4
 80062b8:	d01f      	beq.n	80062fa <_scanf_float+0x3e6>
 80062ba:	9903      	ldr	r1, [sp, #12]
 80062bc:	600a      	str	r2, [r1, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	e9c3 6700 	strd	r6, r7, [r3]
 80062c4:	68e3      	ldr	r3, [r4, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60e3      	str	r3, [r4, #12]
 80062ca:	e7d9      	b.n	8006280 <_scanf_float+0x36c>
 80062cc:	9b04      	ldr	r3, [sp, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0e4      	beq.n	800629c <_scanf_float+0x388>
 80062d2:	9905      	ldr	r1, [sp, #20]
 80062d4:	230a      	movs	r3, #10
 80062d6:	3101      	adds	r1, #1
 80062d8:	4640      	mov	r0, r8
 80062da:	f000 ff75 	bl	80071c8 <_strtol_r>
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	9e05      	ldr	r6, [sp, #20]
 80062e2:	1ac2      	subs	r2, r0, r3
 80062e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80062e8:	429e      	cmp	r6, r3
 80062ea:	bf28      	it	cs
 80062ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80062f0:	4910      	ldr	r1, [pc, #64]	@ (8006334 <_scanf_float+0x420>)
 80062f2:	4630      	mov	r0, r6
 80062f4:	f000 f822 	bl	800633c <siprintf>
 80062f8:	e7d0      	b.n	800629c <_scanf_float+0x388>
 80062fa:	f011 0f04 	tst.w	r1, #4
 80062fe:	9903      	ldr	r1, [sp, #12]
 8006300:	600a      	str	r2, [r1, #0]
 8006302:	d1dc      	bne.n	80062be <_scanf_float+0x3aa>
 8006304:	681d      	ldr	r5, [r3, #0]
 8006306:	4632      	mov	r2, r6
 8006308:	463b      	mov	r3, r7
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7fa fc25 	bl	8000b5c <__aeabi_dcmpun>
 8006312:	b128      	cbz	r0, 8006320 <_scanf_float+0x40c>
 8006314:	4808      	ldr	r0, [pc, #32]	@ (8006338 <_scanf_float+0x424>)
 8006316:	f000 ffdb 	bl	80072d0 <nanf>
 800631a:	ed85 0a00 	vstr	s0, [r5]
 800631e:	e7d1      	b.n	80062c4 <_scanf_float+0x3b0>
 8006320:	4630      	mov	r0, r6
 8006322:	4639      	mov	r1, r7
 8006324:	f7fa fc78 	bl	8000c18 <__aeabi_d2f>
 8006328:	6028      	str	r0, [r5, #0]
 800632a:	e7cb      	b.n	80062c4 <_scanf_float+0x3b0>
 800632c:	f04f 0900 	mov.w	r9, #0
 8006330:	e629      	b.n	8005f86 <_scanf_float+0x72>
 8006332:	bf00      	nop
 8006334:	08009e10 	.word	0x08009e10
 8006338:	0800a203 	.word	0x0800a203

0800633c <siprintf>:
 800633c:	b40e      	push	{r1, r2, r3}
 800633e:	b500      	push	{lr}
 8006340:	b09c      	sub	sp, #112	@ 0x70
 8006342:	ab1d      	add	r3, sp, #116	@ 0x74
 8006344:	9002      	str	r0, [sp, #8]
 8006346:	9006      	str	r0, [sp, #24]
 8006348:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800634c:	4809      	ldr	r0, [pc, #36]	@ (8006374 <siprintf+0x38>)
 800634e:	9107      	str	r1, [sp, #28]
 8006350:	9104      	str	r1, [sp, #16]
 8006352:	4909      	ldr	r1, [pc, #36]	@ (8006378 <siprintf+0x3c>)
 8006354:	f853 2b04 	ldr.w	r2, [r3], #4
 8006358:	9105      	str	r1, [sp, #20]
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	a902      	add	r1, sp, #8
 8006360:	f002 f99e 	bl	80086a0 <_svfiprintf_r>
 8006364:	9b02      	ldr	r3, [sp, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	b01c      	add	sp, #112	@ 0x70
 800636c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006370:	b003      	add	sp, #12
 8006372:	4770      	bx	lr
 8006374:	20000184 	.word	0x20000184
 8006378:	ffff0208 	.word	0xffff0208

0800637c <std>:
 800637c:	2300      	movs	r3, #0
 800637e:	b510      	push	{r4, lr}
 8006380:	4604      	mov	r4, r0
 8006382:	e9c0 3300 	strd	r3, r3, [r0]
 8006386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800638a:	6083      	str	r3, [r0, #8]
 800638c:	8181      	strh	r1, [r0, #12]
 800638e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006390:	81c2      	strh	r2, [r0, #14]
 8006392:	6183      	str	r3, [r0, #24]
 8006394:	4619      	mov	r1, r3
 8006396:	2208      	movs	r2, #8
 8006398:	305c      	adds	r0, #92	@ 0x5c
 800639a:	f000 ff47 	bl	800722c <memset>
 800639e:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <std+0x58>)
 80063a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80063a2:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <std+0x5c>)
 80063a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063a6:	4b0d      	ldr	r3, [pc, #52]	@ (80063dc <std+0x60>)
 80063a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063aa:	4b0d      	ldr	r3, [pc, #52]	@ (80063e0 <std+0x64>)
 80063ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80063ae:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <std+0x68>)
 80063b0:	6224      	str	r4, [r4, #32]
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d006      	beq.n	80063c4 <std+0x48>
 80063b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063ba:	4294      	cmp	r4, r2
 80063bc:	d002      	beq.n	80063c4 <std+0x48>
 80063be:	33d0      	adds	r3, #208	@ 0xd0
 80063c0:	429c      	cmp	r4, r3
 80063c2:	d105      	bne.n	80063d0 <std+0x54>
 80063c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063cc:	f000 bf64 	b.w	8007298 <__retarget_lock_init_recursive>
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	bf00      	nop
 80063d4:	080094e5 	.word	0x080094e5
 80063d8:	08009507 	.word	0x08009507
 80063dc:	0800953f 	.word	0x0800953f
 80063e0:	08009563 	.word	0x08009563
 80063e4:	20000264 	.word	0x20000264

080063e8 <stdio_exit_handler>:
 80063e8:	4a02      	ldr	r2, [pc, #8]	@ (80063f4 <stdio_exit_handler+0xc>)
 80063ea:	4903      	ldr	r1, [pc, #12]	@ (80063f8 <stdio_exit_handler+0x10>)
 80063ec:	4803      	ldr	r0, [pc, #12]	@ (80063fc <stdio_exit_handler+0x14>)
 80063ee:	f000 beed 	b.w	80071cc <_fwalk_sglue>
 80063f2:	bf00      	nop
 80063f4:	2000000c 	.word	0x2000000c
 80063f8:	08008b19 	.word	0x08008b19
 80063fc:	20000188 	.word	0x20000188

08006400 <cleanup_stdio>:
 8006400:	6841      	ldr	r1, [r0, #4]
 8006402:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <cleanup_stdio+0x34>)
 8006404:	4299      	cmp	r1, r3
 8006406:	b510      	push	{r4, lr}
 8006408:	4604      	mov	r4, r0
 800640a:	d001      	beq.n	8006410 <cleanup_stdio+0x10>
 800640c:	f002 fb84 	bl	8008b18 <_fflush_r>
 8006410:	68a1      	ldr	r1, [r4, #8]
 8006412:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <cleanup_stdio+0x38>)
 8006414:	4299      	cmp	r1, r3
 8006416:	d002      	beq.n	800641e <cleanup_stdio+0x1e>
 8006418:	4620      	mov	r0, r4
 800641a:	f002 fb7d 	bl	8008b18 <_fflush_r>
 800641e:	68e1      	ldr	r1, [r4, #12]
 8006420:	4b06      	ldr	r3, [pc, #24]	@ (800643c <cleanup_stdio+0x3c>)
 8006422:	4299      	cmp	r1, r3
 8006424:	d004      	beq.n	8006430 <cleanup_stdio+0x30>
 8006426:	4620      	mov	r0, r4
 8006428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800642c:	f002 bb74 	b.w	8008b18 <_fflush_r>
 8006430:	bd10      	pop	{r4, pc}
 8006432:	bf00      	nop
 8006434:	20000264 	.word	0x20000264
 8006438:	200002cc 	.word	0x200002cc
 800643c:	20000334 	.word	0x20000334

08006440 <global_stdio_init.part.0>:
 8006440:	b510      	push	{r4, lr}
 8006442:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <global_stdio_init.part.0+0x30>)
 8006444:	4c0b      	ldr	r4, [pc, #44]	@ (8006474 <global_stdio_init.part.0+0x34>)
 8006446:	4a0c      	ldr	r2, [pc, #48]	@ (8006478 <global_stdio_init.part.0+0x38>)
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	4620      	mov	r0, r4
 800644c:	2200      	movs	r2, #0
 800644e:	2104      	movs	r1, #4
 8006450:	f7ff ff94 	bl	800637c <std>
 8006454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006458:	2201      	movs	r2, #1
 800645a:	2109      	movs	r1, #9
 800645c:	f7ff ff8e 	bl	800637c <std>
 8006460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006464:	2202      	movs	r2, #2
 8006466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800646a:	2112      	movs	r1, #18
 800646c:	f7ff bf86 	b.w	800637c <std>
 8006470:	2000039c 	.word	0x2000039c
 8006474:	20000264 	.word	0x20000264
 8006478:	080063e9 	.word	0x080063e9

0800647c <__sfp_lock_acquire>:
 800647c:	4801      	ldr	r0, [pc, #4]	@ (8006484 <__sfp_lock_acquire+0x8>)
 800647e:	f000 bf0c 	b.w	800729a <__retarget_lock_acquire_recursive>
 8006482:	bf00      	nop
 8006484:	200003a1 	.word	0x200003a1

08006488 <__sfp_lock_release>:
 8006488:	4801      	ldr	r0, [pc, #4]	@ (8006490 <__sfp_lock_release+0x8>)
 800648a:	f000 bf07 	b.w	800729c <__retarget_lock_release_recursive>
 800648e:	bf00      	nop
 8006490:	200003a1 	.word	0x200003a1

08006494 <__sinit>:
 8006494:	b510      	push	{r4, lr}
 8006496:	4604      	mov	r4, r0
 8006498:	f7ff fff0 	bl	800647c <__sfp_lock_acquire>
 800649c:	6a23      	ldr	r3, [r4, #32]
 800649e:	b11b      	cbz	r3, 80064a8 <__sinit+0x14>
 80064a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a4:	f7ff bff0 	b.w	8006488 <__sfp_lock_release>
 80064a8:	4b04      	ldr	r3, [pc, #16]	@ (80064bc <__sinit+0x28>)
 80064aa:	6223      	str	r3, [r4, #32]
 80064ac:	4b04      	ldr	r3, [pc, #16]	@ (80064c0 <__sinit+0x2c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f5      	bne.n	80064a0 <__sinit+0xc>
 80064b4:	f7ff ffc4 	bl	8006440 <global_stdio_init.part.0>
 80064b8:	e7f2      	b.n	80064a0 <__sinit+0xc>
 80064ba:	bf00      	nop
 80064bc:	08006401 	.word	0x08006401
 80064c0:	2000039c 	.word	0x2000039c

080064c4 <sulp>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4604      	mov	r4, r0
 80064c8:	460d      	mov	r5, r1
 80064ca:	ec45 4b10 	vmov	d0, r4, r5
 80064ce:	4616      	mov	r6, r2
 80064d0:	f002 feca 	bl	8009268 <__ulp>
 80064d4:	ec51 0b10 	vmov	r0, r1, d0
 80064d8:	b17e      	cbz	r6, 80064fa <sulp+0x36>
 80064da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80064de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dd09      	ble.n	80064fa <sulp+0x36>
 80064e6:	051b      	lsls	r3, r3, #20
 80064e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80064ec:	2400      	movs	r4, #0
 80064ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80064f2:	4622      	mov	r2, r4
 80064f4:	462b      	mov	r3, r5
 80064f6:	f7fa f897 	bl	8000628 <__aeabi_dmul>
 80064fa:	ec41 0b10 	vmov	d0, r0, r1
 80064fe:	bd70      	pop	{r4, r5, r6, pc}

08006500 <_strtod_l>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	b09f      	sub	sp, #124	@ 0x7c
 8006506:	460c      	mov	r4, r1
 8006508:	9217      	str	r2, [sp, #92]	@ 0x5c
 800650a:	2200      	movs	r2, #0
 800650c:	921a      	str	r2, [sp, #104]	@ 0x68
 800650e:	9005      	str	r0, [sp, #20]
 8006510:	f04f 0a00 	mov.w	sl, #0
 8006514:	f04f 0b00 	mov.w	fp, #0
 8006518:	460a      	mov	r2, r1
 800651a:	9219      	str	r2, [sp, #100]	@ 0x64
 800651c:	7811      	ldrb	r1, [r2, #0]
 800651e:	292b      	cmp	r1, #43	@ 0x2b
 8006520:	d04a      	beq.n	80065b8 <_strtod_l+0xb8>
 8006522:	d838      	bhi.n	8006596 <_strtod_l+0x96>
 8006524:	290d      	cmp	r1, #13
 8006526:	d832      	bhi.n	800658e <_strtod_l+0x8e>
 8006528:	2908      	cmp	r1, #8
 800652a:	d832      	bhi.n	8006592 <_strtod_l+0x92>
 800652c:	2900      	cmp	r1, #0
 800652e:	d03b      	beq.n	80065a8 <_strtod_l+0xa8>
 8006530:	2200      	movs	r2, #0
 8006532:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006534:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006536:	782a      	ldrb	r2, [r5, #0]
 8006538:	2a30      	cmp	r2, #48	@ 0x30
 800653a:	f040 80b3 	bne.w	80066a4 <_strtod_l+0x1a4>
 800653e:	786a      	ldrb	r2, [r5, #1]
 8006540:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006544:	2a58      	cmp	r2, #88	@ 0x58
 8006546:	d16e      	bne.n	8006626 <_strtod_l+0x126>
 8006548:	9302      	str	r3, [sp, #8]
 800654a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4a8e      	ldr	r2, [pc, #568]	@ (800678c <_strtod_l+0x28c>)
 8006554:	9805      	ldr	r0, [sp, #20]
 8006556:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006558:	a919      	add	r1, sp, #100	@ 0x64
 800655a:	f001 fd75 	bl	8008048 <__gethex>
 800655e:	f010 060f 	ands.w	r6, r0, #15
 8006562:	4604      	mov	r4, r0
 8006564:	d005      	beq.n	8006572 <_strtod_l+0x72>
 8006566:	2e06      	cmp	r6, #6
 8006568:	d128      	bne.n	80065bc <_strtod_l+0xbc>
 800656a:	3501      	adds	r5, #1
 800656c:	2300      	movs	r3, #0
 800656e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006572:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 858e 	bne.w	8007096 <_strtod_l+0xb96>
 800657a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800657c:	b1cb      	cbz	r3, 80065b2 <_strtod_l+0xb2>
 800657e:	4652      	mov	r2, sl
 8006580:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006584:	ec43 2b10 	vmov	d0, r2, r3
 8006588:	b01f      	add	sp, #124	@ 0x7c
 800658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658e:	2920      	cmp	r1, #32
 8006590:	d1ce      	bne.n	8006530 <_strtod_l+0x30>
 8006592:	3201      	adds	r2, #1
 8006594:	e7c1      	b.n	800651a <_strtod_l+0x1a>
 8006596:	292d      	cmp	r1, #45	@ 0x2d
 8006598:	d1ca      	bne.n	8006530 <_strtod_l+0x30>
 800659a:	2101      	movs	r1, #1
 800659c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800659e:	1c51      	adds	r1, r2, #1
 80065a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80065a2:	7852      	ldrb	r2, [r2, #1]
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	d1c5      	bne.n	8006534 <_strtod_l+0x34>
 80065a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 8570 	bne.w	8007092 <_strtod_l+0xb92>
 80065b2:	4652      	mov	r2, sl
 80065b4:	465b      	mov	r3, fp
 80065b6:	e7e5      	b.n	8006584 <_strtod_l+0x84>
 80065b8:	2100      	movs	r1, #0
 80065ba:	e7ef      	b.n	800659c <_strtod_l+0x9c>
 80065bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065be:	b13a      	cbz	r2, 80065d0 <_strtod_l+0xd0>
 80065c0:	2135      	movs	r1, #53	@ 0x35
 80065c2:	a81c      	add	r0, sp, #112	@ 0x70
 80065c4:	f002 ff4a 	bl	800945c <__copybits>
 80065c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065ca:	9805      	ldr	r0, [sp, #20]
 80065cc:	f002 fb18 	bl	8008c00 <_Bfree>
 80065d0:	3e01      	subs	r6, #1
 80065d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80065d4:	2e04      	cmp	r6, #4
 80065d6:	d806      	bhi.n	80065e6 <_strtod_l+0xe6>
 80065d8:	e8df f006 	tbb	[pc, r6]
 80065dc:	201d0314 	.word	0x201d0314
 80065e0:	14          	.byte	0x14
 80065e1:	00          	.byte	0x00
 80065e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80065e6:	05e1      	lsls	r1, r4, #23
 80065e8:	bf48      	it	mi
 80065ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80065ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80065f2:	0d1b      	lsrs	r3, r3, #20
 80065f4:	051b      	lsls	r3, r3, #20
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1bb      	bne.n	8006572 <_strtod_l+0x72>
 80065fa:	f000 fe23 	bl	8007244 <__errno>
 80065fe:	2322      	movs	r3, #34	@ 0x22
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	e7b6      	b.n	8006572 <_strtod_l+0x72>
 8006604:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006608:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800660c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006610:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006614:	e7e7      	b.n	80065e6 <_strtod_l+0xe6>
 8006616:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006794 <_strtod_l+0x294>
 800661a:	e7e4      	b.n	80065e6 <_strtod_l+0xe6>
 800661c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006620:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006624:	e7df      	b.n	80065e6 <_strtod_l+0xe6>
 8006626:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	9219      	str	r2, [sp, #100]	@ 0x64
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b30      	cmp	r3, #48	@ 0x30
 8006630:	d0f9      	beq.n	8006626 <_strtod_l+0x126>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d09d      	beq.n	8006572 <_strtod_l+0x72>
 8006636:	2301      	movs	r3, #1
 8006638:	9309      	str	r3, [sp, #36]	@ 0x24
 800663a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800663c:	930c      	str	r3, [sp, #48]	@ 0x30
 800663e:	2300      	movs	r3, #0
 8006640:	9308      	str	r3, [sp, #32]
 8006642:	930a      	str	r3, [sp, #40]	@ 0x28
 8006644:	461f      	mov	r7, r3
 8006646:	220a      	movs	r2, #10
 8006648:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800664a:	7805      	ldrb	r5, [r0, #0]
 800664c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006650:	b2d9      	uxtb	r1, r3
 8006652:	2909      	cmp	r1, #9
 8006654:	d928      	bls.n	80066a8 <_strtod_l+0x1a8>
 8006656:	494e      	ldr	r1, [pc, #312]	@ (8006790 <_strtod_l+0x290>)
 8006658:	2201      	movs	r2, #1
 800665a:	f000 fdd5 	bl	8007208 <strncmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	d032      	beq.n	80066c8 <_strtod_l+0x1c8>
 8006662:	2000      	movs	r0, #0
 8006664:	462a      	mov	r2, r5
 8006666:	4681      	mov	r9, r0
 8006668:	463d      	mov	r5, r7
 800666a:	4603      	mov	r3, r0
 800666c:	2a65      	cmp	r2, #101	@ 0x65
 800666e:	d001      	beq.n	8006674 <_strtod_l+0x174>
 8006670:	2a45      	cmp	r2, #69	@ 0x45
 8006672:	d114      	bne.n	800669e <_strtod_l+0x19e>
 8006674:	b91d      	cbnz	r5, 800667e <_strtod_l+0x17e>
 8006676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006678:	4302      	orrs	r2, r0
 800667a:	d095      	beq.n	80065a8 <_strtod_l+0xa8>
 800667c:	2500      	movs	r5, #0
 800667e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006680:	1c62      	adds	r2, r4, #1
 8006682:	9219      	str	r2, [sp, #100]	@ 0x64
 8006684:	7862      	ldrb	r2, [r4, #1]
 8006686:	2a2b      	cmp	r2, #43	@ 0x2b
 8006688:	d077      	beq.n	800677a <_strtod_l+0x27a>
 800668a:	2a2d      	cmp	r2, #45	@ 0x2d
 800668c:	d07b      	beq.n	8006786 <_strtod_l+0x286>
 800668e:	f04f 0c00 	mov.w	ip, #0
 8006692:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006696:	2909      	cmp	r1, #9
 8006698:	f240 8082 	bls.w	80067a0 <_strtod_l+0x2a0>
 800669c:	9419      	str	r4, [sp, #100]	@ 0x64
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	e0a2      	b.n	80067ea <_strtod_l+0x2ea>
 80066a4:	2300      	movs	r3, #0
 80066a6:	e7c7      	b.n	8006638 <_strtod_l+0x138>
 80066a8:	2f08      	cmp	r7, #8
 80066aa:	bfd5      	itete	le
 80066ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80066ae:	9908      	ldrgt	r1, [sp, #32]
 80066b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80066b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80066b8:	f100 0001 	add.w	r0, r0, #1
 80066bc:	bfd4      	ite	le
 80066be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80066c0:	9308      	strgt	r3, [sp, #32]
 80066c2:	3701      	adds	r7, #1
 80066c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80066c6:	e7bf      	b.n	8006648 <_strtod_l+0x148>
 80066c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80066ce:	785a      	ldrb	r2, [r3, #1]
 80066d0:	b37f      	cbz	r7, 8006732 <_strtod_l+0x232>
 80066d2:	4681      	mov	r9, r0
 80066d4:	463d      	mov	r5, r7
 80066d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80066da:	2b09      	cmp	r3, #9
 80066dc:	d912      	bls.n	8006704 <_strtod_l+0x204>
 80066de:	2301      	movs	r3, #1
 80066e0:	e7c4      	b.n	800666c <_strtod_l+0x16c>
 80066e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80066e8:	785a      	ldrb	r2, [r3, #1]
 80066ea:	3001      	adds	r0, #1
 80066ec:	2a30      	cmp	r2, #48	@ 0x30
 80066ee:	d0f8      	beq.n	80066e2 <_strtod_l+0x1e2>
 80066f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	f200 84d3 	bhi.w	80070a0 <_strtod_l+0xba0>
 80066fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80066fe:	4681      	mov	r9, r0
 8006700:	2000      	movs	r0, #0
 8006702:	4605      	mov	r5, r0
 8006704:	3a30      	subs	r2, #48	@ 0x30
 8006706:	f100 0301 	add.w	r3, r0, #1
 800670a:	d02a      	beq.n	8006762 <_strtod_l+0x262>
 800670c:	4499      	add	r9, r3
 800670e:	eb00 0c05 	add.w	ip, r0, r5
 8006712:	462b      	mov	r3, r5
 8006714:	210a      	movs	r1, #10
 8006716:	4563      	cmp	r3, ip
 8006718:	d10d      	bne.n	8006736 <_strtod_l+0x236>
 800671a:	1c69      	adds	r1, r5, #1
 800671c:	4401      	add	r1, r0
 800671e:	4428      	add	r0, r5
 8006720:	2808      	cmp	r0, #8
 8006722:	dc16      	bgt.n	8006752 <_strtod_l+0x252>
 8006724:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006726:	230a      	movs	r3, #10
 8006728:	fb03 2300 	mla	r3, r3, r0, r2
 800672c:	930a      	str	r3, [sp, #40]	@ 0x28
 800672e:	2300      	movs	r3, #0
 8006730:	e018      	b.n	8006764 <_strtod_l+0x264>
 8006732:	4638      	mov	r0, r7
 8006734:	e7da      	b.n	80066ec <_strtod_l+0x1ec>
 8006736:	2b08      	cmp	r3, #8
 8006738:	f103 0301 	add.w	r3, r3, #1
 800673c:	dc03      	bgt.n	8006746 <_strtod_l+0x246>
 800673e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006740:	434e      	muls	r6, r1
 8006742:	960a      	str	r6, [sp, #40]	@ 0x28
 8006744:	e7e7      	b.n	8006716 <_strtod_l+0x216>
 8006746:	2b10      	cmp	r3, #16
 8006748:	bfde      	ittt	le
 800674a:	9e08      	ldrle	r6, [sp, #32]
 800674c:	434e      	mulle	r6, r1
 800674e:	9608      	strle	r6, [sp, #32]
 8006750:	e7e1      	b.n	8006716 <_strtod_l+0x216>
 8006752:	280f      	cmp	r0, #15
 8006754:	dceb      	bgt.n	800672e <_strtod_l+0x22e>
 8006756:	9808      	ldr	r0, [sp, #32]
 8006758:	230a      	movs	r3, #10
 800675a:	fb03 2300 	mla	r3, r3, r0, r2
 800675e:	9308      	str	r3, [sp, #32]
 8006760:	e7e5      	b.n	800672e <_strtod_l+0x22e>
 8006762:	4629      	mov	r1, r5
 8006764:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006766:	1c50      	adds	r0, r2, #1
 8006768:	9019      	str	r0, [sp, #100]	@ 0x64
 800676a:	7852      	ldrb	r2, [r2, #1]
 800676c:	4618      	mov	r0, r3
 800676e:	460d      	mov	r5, r1
 8006770:	e7b1      	b.n	80066d6 <_strtod_l+0x1d6>
 8006772:	f04f 0900 	mov.w	r9, #0
 8006776:	2301      	movs	r3, #1
 8006778:	e77d      	b.n	8006676 <_strtod_l+0x176>
 800677a:	f04f 0c00 	mov.w	ip, #0
 800677e:	1ca2      	adds	r2, r4, #2
 8006780:	9219      	str	r2, [sp, #100]	@ 0x64
 8006782:	78a2      	ldrb	r2, [r4, #2]
 8006784:	e785      	b.n	8006692 <_strtod_l+0x192>
 8006786:	f04f 0c01 	mov.w	ip, #1
 800678a:	e7f8      	b.n	800677e <_strtod_l+0x27e>
 800678c:	08009e2c 	.word	0x08009e2c
 8006790:	08009e15 	.word	0x08009e15
 8006794:	7ff00000 	.word	0x7ff00000
 8006798:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800679a:	1c51      	adds	r1, r2, #1
 800679c:	9119      	str	r1, [sp, #100]	@ 0x64
 800679e:	7852      	ldrb	r2, [r2, #1]
 80067a0:	2a30      	cmp	r2, #48	@ 0x30
 80067a2:	d0f9      	beq.n	8006798 <_strtod_l+0x298>
 80067a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80067a8:	2908      	cmp	r1, #8
 80067aa:	f63f af78 	bhi.w	800669e <_strtod_l+0x19e>
 80067ae:	3a30      	subs	r2, #48	@ 0x30
 80067b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80067b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80067b6:	f04f 080a 	mov.w	r8, #10
 80067ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067bc:	1c56      	adds	r6, r2, #1
 80067be:	9619      	str	r6, [sp, #100]	@ 0x64
 80067c0:	7852      	ldrb	r2, [r2, #1]
 80067c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80067c6:	f1be 0f09 	cmp.w	lr, #9
 80067ca:	d939      	bls.n	8006840 <_strtod_l+0x340>
 80067cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80067ce:	1a76      	subs	r6, r6, r1
 80067d0:	2e08      	cmp	r6, #8
 80067d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80067d6:	dc03      	bgt.n	80067e0 <_strtod_l+0x2e0>
 80067d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80067da:	4588      	cmp	r8, r1
 80067dc:	bfa8      	it	ge
 80067de:	4688      	movge	r8, r1
 80067e0:	f1bc 0f00 	cmp.w	ip, #0
 80067e4:	d001      	beq.n	80067ea <_strtod_l+0x2ea>
 80067e6:	f1c8 0800 	rsb	r8, r8, #0
 80067ea:	2d00      	cmp	r5, #0
 80067ec:	d14e      	bne.n	800688c <_strtod_l+0x38c>
 80067ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067f0:	4308      	orrs	r0, r1
 80067f2:	f47f aebe 	bne.w	8006572 <_strtod_l+0x72>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f47f aed6 	bne.w	80065a8 <_strtod_l+0xa8>
 80067fc:	2a69      	cmp	r2, #105	@ 0x69
 80067fe:	d028      	beq.n	8006852 <_strtod_l+0x352>
 8006800:	dc25      	bgt.n	800684e <_strtod_l+0x34e>
 8006802:	2a49      	cmp	r2, #73	@ 0x49
 8006804:	d025      	beq.n	8006852 <_strtod_l+0x352>
 8006806:	2a4e      	cmp	r2, #78	@ 0x4e
 8006808:	f47f aece 	bne.w	80065a8 <_strtod_l+0xa8>
 800680c:	499b      	ldr	r1, [pc, #620]	@ (8006a7c <_strtod_l+0x57c>)
 800680e:	a819      	add	r0, sp, #100	@ 0x64
 8006810:	f001 fe3c 	bl	800848c <__match>
 8006814:	2800      	cmp	r0, #0
 8006816:	f43f aec7 	beq.w	80065a8 <_strtod_l+0xa8>
 800681a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b28      	cmp	r3, #40	@ 0x28
 8006820:	d12e      	bne.n	8006880 <_strtod_l+0x380>
 8006822:	4997      	ldr	r1, [pc, #604]	@ (8006a80 <_strtod_l+0x580>)
 8006824:	aa1c      	add	r2, sp, #112	@ 0x70
 8006826:	a819      	add	r0, sp, #100	@ 0x64
 8006828:	f001 fe44 	bl	80084b4 <__hexnan>
 800682c:	2805      	cmp	r0, #5
 800682e:	d127      	bne.n	8006880 <_strtod_l+0x380>
 8006830:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006832:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006836:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800683a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800683e:	e698      	b.n	8006572 <_strtod_l+0x72>
 8006840:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006842:	fb08 2101 	mla	r1, r8, r1, r2
 8006846:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800684a:	920e      	str	r2, [sp, #56]	@ 0x38
 800684c:	e7b5      	b.n	80067ba <_strtod_l+0x2ba>
 800684e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006850:	e7da      	b.n	8006808 <_strtod_l+0x308>
 8006852:	498c      	ldr	r1, [pc, #560]	@ (8006a84 <_strtod_l+0x584>)
 8006854:	a819      	add	r0, sp, #100	@ 0x64
 8006856:	f001 fe19 	bl	800848c <__match>
 800685a:	2800      	cmp	r0, #0
 800685c:	f43f aea4 	beq.w	80065a8 <_strtod_l+0xa8>
 8006860:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006862:	4989      	ldr	r1, [pc, #548]	@ (8006a88 <_strtod_l+0x588>)
 8006864:	3b01      	subs	r3, #1
 8006866:	a819      	add	r0, sp, #100	@ 0x64
 8006868:	9319      	str	r3, [sp, #100]	@ 0x64
 800686a:	f001 fe0f 	bl	800848c <__match>
 800686e:	b910      	cbnz	r0, 8006876 <_strtod_l+0x376>
 8006870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006872:	3301      	adds	r3, #1
 8006874:	9319      	str	r3, [sp, #100]	@ 0x64
 8006876:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006a98 <_strtod_l+0x598>
 800687a:	f04f 0a00 	mov.w	sl, #0
 800687e:	e678      	b.n	8006572 <_strtod_l+0x72>
 8006880:	4882      	ldr	r0, [pc, #520]	@ (8006a8c <_strtod_l+0x58c>)
 8006882:	f000 fd1d 	bl	80072c0 <nan>
 8006886:	ec5b ab10 	vmov	sl, fp, d0
 800688a:	e672      	b.n	8006572 <_strtod_l+0x72>
 800688c:	eba8 0309 	sub.w	r3, r8, r9
 8006890:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006892:	9309      	str	r3, [sp, #36]	@ 0x24
 8006894:	2f00      	cmp	r7, #0
 8006896:	bf08      	it	eq
 8006898:	462f      	moveq	r7, r5
 800689a:	2d10      	cmp	r5, #16
 800689c:	462c      	mov	r4, r5
 800689e:	bfa8      	it	ge
 80068a0:	2410      	movge	r4, #16
 80068a2:	f7f9 fe47 	bl	8000534 <__aeabi_ui2d>
 80068a6:	2d09      	cmp	r5, #9
 80068a8:	4682      	mov	sl, r0
 80068aa:	468b      	mov	fp, r1
 80068ac:	dc13      	bgt.n	80068d6 <_strtod_l+0x3d6>
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f43f ae5e 	beq.w	8006572 <_strtod_l+0x72>
 80068b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b8:	dd78      	ble.n	80069ac <_strtod_l+0x4ac>
 80068ba:	2b16      	cmp	r3, #22
 80068bc:	dc5f      	bgt.n	800697e <_strtod_l+0x47e>
 80068be:	4974      	ldr	r1, [pc, #464]	@ (8006a90 <_strtod_l+0x590>)
 80068c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c8:	4652      	mov	r2, sl
 80068ca:	465b      	mov	r3, fp
 80068cc:	f7f9 feac 	bl	8000628 <__aeabi_dmul>
 80068d0:	4682      	mov	sl, r0
 80068d2:	468b      	mov	fp, r1
 80068d4:	e64d      	b.n	8006572 <_strtod_l+0x72>
 80068d6:	4b6e      	ldr	r3, [pc, #440]	@ (8006a90 <_strtod_l+0x590>)
 80068d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80068e0:	f7f9 fea2 	bl	8000628 <__aeabi_dmul>
 80068e4:	4682      	mov	sl, r0
 80068e6:	9808      	ldr	r0, [sp, #32]
 80068e8:	468b      	mov	fp, r1
 80068ea:	f7f9 fe23 	bl	8000534 <__aeabi_ui2d>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4650      	mov	r0, sl
 80068f4:	4659      	mov	r1, fp
 80068f6:	f7f9 fce1 	bl	80002bc <__adddf3>
 80068fa:	2d0f      	cmp	r5, #15
 80068fc:	4682      	mov	sl, r0
 80068fe:	468b      	mov	fp, r1
 8006900:	ddd5      	ble.n	80068ae <_strtod_l+0x3ae>
 8006902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006904:	1b2c      	subs	r4, r5, r4
 8006906:	441c      	add	r4, r3
 8006908:	2c00      	cmp	r4, #0
 800690a:	f340 8096 	ble.w	8006a3a <_strtod_l+0x53a>
 800690e:	f014 030f 	ands.w	r3, r4, #15
 8006912:	d00a      	beq.n	800692a <_strtod_l+0x42a>
 8006914:	495e      	ldr	r1, [pc, #376]	@ (8006a90 <_strtod_l+0x590>)
 8006916:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800691a:	4652      	mov	r2, sl
 800691c:	465b      	mov	r3, fp
 800691e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006922:	f7f9 fe81 	bl	8000628 <__aeabi_dmul>
 8006926:	4682      	mov	sl, r0
 8006928:	468b      	mov	fp, r1
 800692a:	f034 040f 	bics.w	r4, r4, #15
 800692e:	d073      	beq.n	8006a18 <_strtod_l+0x518>
 8006930:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006934:	dd48      	ble.n	80069c8 <_strtod_l+0x4c8>
 8006936:	2400      	movs	r4, #0
 8006938:	46a0      	mov	r8, r4
 800693a:	940a      	str	r4, [sp, #40]	@ 0x28
 800693c:	46a1      	mov	r9, r4
 800693e:	9a05      	ldr	r2, [sp, #20]
 8006940:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006a98 <_strtod_l+0x598>
 8006944:	2322      	movs	r3, #34	@ 0x22
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	f04f 0a00 	mov.w	sl, #0
 800694c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	f43f ae0f 	beq.w	8006572 <_strtod_l+0x72>
 8006954:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006956:	9805      	ldr	r0, [sp, #20]
 8006958:	f002 f952 	bl	8008c00 <_Bfree>
 800695c:	9805      	ldr	r0, [sp, #20]
 800695e:	4649      	mov	r1, r9
 8006960:	f002 f94e 	bl	8008c00 <_Bfree>
 8006964:	9805      	ldr	r0, [sp, #20]
 8006966:	4641      	mov	r1, r8
 8006968:	f002 f94a 	bl	8008c00 <_Bfree>
 800696c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800696e:	9805      	ldr	r0, [sp, #20]
 8006970:	f002 f946 	bl	8008c00 <_Bfree>
 8006974:	9805      	ldr	r0, [sp, #20]
 8006976:	4621      	mov	r1, r4
 8006978:	f002 f942 	bl	8008c00 <_Bfree>
 800697c:	e5f9      	b.n	8006572 <_strtod_l+0x72>
 800697e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006980:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006984:	4293      	cmp	r3, r2
 8006986:	dbbc      	blt.n	8006902 <_strtod_l+0x402>
 8006988:	4c41      	ldr	r4, [pc, #260]	@ (8006a90 <_strtod_l+0x590>)
 800698a:	f1c5 050f 	rsb	r5, r5, #15
 800698e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006992:	4652      	mov	r2, sl
 8006994:	465b      	mov	r3, fp
 8006996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800699a:	f7f9 fe45 	bl	8000628 <__aeabi_dmul>
 800699e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a0:	1b5d      	subs	r5, r3, r5
 80069a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80069a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069aa:	e78f      	b.n	80068cc <_strtod_l+0x3cc>
 80069ac:	3316      	adds	r3, #22
 80069ae:	dba8      	blt.n	8006902 <_strtod_l+0x402>
 80069b0:	4b37      	ldr	r3, [pc, #220]	@ (8006a90 <_strtod_l+0x590>)
 80069b2:	eba9 0808 	sub.w	r8, r9, r8
 80069b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80069ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80069be:	4650      	mov	r0, sl
 80069c0:	4659      	mov	r1, fp
 80069c2:	f7f9 ff5b 	bl	800087c <__aeabi_ddiv>
 80069c6:	e783      	b.n	80068d0 <_strtod_l+0x3d0>
 80069c8:	4b32      	ldr	r3, [pc, #200]	@ (8006a94 <_strtod_l+0x594>)
 80069ca:	9308      	str	r3, [sp, #32]
 80069cc:	2300      	movs	r3, #0
 80069ce:	1124      	asrs	r4, r4, #4
 80069d0:	4650      	mov	r0, sl
 80069d2:	4659      	mov	r1, fp
 80069d4:	461e      	mov	r6, r3
 80069d6:	2c01      	cmp	r4, #1
 80069d8:	dc21      	bgt.n	8006a1e <_strtod_l+0x51e>
 80069da:	b10b      	cbz	r3, 80069e0 <_strtod_l+0x4e0>
 80069dc:	4682      	mov	sl, r0
 80069de:	468b      	mov	fp, r1
 80069e0:	492c      	ldr	r1, [pc, #176]	@ (8006a94 <_strtod_l+0x594>)
 80069e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80069e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80069ea:	4652      	mov	r2, sl
 80069ec:	465b      	mov	r3, fp
 80069ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f2:	f7f9 fe19 	bl	8000628 <__aeabi_dmul>
 80069f6:	4b28      	ldr	r3, [pc, #160]	@ (8006a98 <_strtod_l+0x598>)
 80069f8:	460a      	mov	r2, r1
 80069fa:	400b      	ands	r3, r1
 80069fc:	4927      	ldr	r1, [pc, #156]	@ (8006a9c <_strtod_l+0x59c>)
 80069fe:	428b      	cmp	r3, r1
 8006a00:	4682      	mov	sl, r0
 8006a02:	d898      	bhi.n	8006936 <_strtod_l+0x436>
 8006a04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	bf86      	itte	hi
 8006a0c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006aa0 <_strtod_l+0x5a0>
 8006a10:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006a14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9308      	str	r3, [sp, #32]
 8006a1c:	e07a      	b.n	8006b14 <_strtod_l+0x614>
 8006a1e:	07e2      	lsls	r2, r4, #31
 8006a20:	d505      	bpl.n	8006a2e <_strtod_l+0x52e>
 8006a22:	9b08      	ldr	r3, [sp, #32]
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fdfe 	bl	8000628 <__aeabi_dmul>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	9a08      	ldr	r2, [sp, #32]
 8006a30:	3208      	adds	r2, #8
 8006a32:	3601      	adds	r6, #1
 8006a34:	1064      	asrs	r4, r4, #1
 8006a36:	9208      	str	r2, [sp, #32]
 8006a38:	e7cd      	b.n	80069d6 <_strtod_l+0x4d6>
 8006a3a:	d0ed      	beq.n	8006a18 <_strtod_l+0x518>
 8006a3c:	4264      	negs	r4, r4
 8006a3e:	f014 020f 	ands.w	r2, r4, #15
 8006a42:	d00a      	beq.n	8006a5a <_strtod_l+0x55a>
 8006a44:	4b12      	ldr	r3, [pc, #72]	@ (8006a90 <_strtod_l+0x590>)
 8006a46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 ff13 	bl	800087c <__aeabi_ddiv>
 8006a56:	4682      	mov	sl, r0
 8006a58:	468b      	mov	fp, r1
 8006a5a:	1124      	asrs	r4, r4, #4
 8006a5c:	d0dc      	beq.n	8006a18 <_strtod_l+0x518>
 8006a5e:	2c1f      	cmp	r4, #31
 8006a60:	dd20      	ble.n	8006aa4 <_strtod_l+0x5a4>
 8006a62:	2400      	movs	r4, #0
 8006a64:	46a0      	mov	r8, r4
 8006a66:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a68:	46a1      	mov	r9, r4
 8006a6a:	9a05      	ldr	r2, [sp, #20]
 8006a6c:	2322      	movs	r3, #34	@ 0x22
 8006a6e:	f04f 0a00 	mov.w	sl, #0
 8006a72:	f04f 0b00 	mov.w	fp, #0
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	e768      	b.n	800694c <_strtod_l+0x44c>
 8006a7a:	bf00      	nop
 8006a7c:	08009de9 	.word	0x08009de9
 8006a80:	08009e18 	.word	0x08009e18
 8006a84:	08009de1 	.word	0x08009de1
 8006a88:	08009f74 	.word	0x08009f74
 8006a8c:	0800a203 	.word	0x0800a203
 8006a90:	0800a100 	.word	0x0800a100
 8006a94:	0800a0d8 	.word	0x0800a0d8
 8006a98:	7ff00000 	.word	0x7ff00000
 8006a9c:	7ca00000 	.word	0x7ca00000
 8006aa0:	7fefffff 	.word	0x7fefffff
 8006aa4:	f014 0310 	ands.w	r3, r4, #16
 8006aa8:	bf18      	it	ne
 8006aaa:	236a      	movne	r3, #106	@ 0x6a
 8006aac:	4ea9      	ldr	r6, [pc, #676]	@ (8006d54 <_strtod_l+0x854>)
 8006aae:	9308      	str	r3, [sp, #32]
 8006ab0:	4650      	mov	r0, sl
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	07e2      	lsls	r2, r4, #31
 8006ab8:	d504      	bpl.n	8006ac4 <_strtod_l+0x5c4>
 8006aba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006abe:	f7f9 fdb3 	bl	8000628 <__aeabi_dmul>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	1064      	asrs	r4, r4, #1
 8006ac6:	f106 0608 	add.w	r6, r6, #8
 8006aca:	d1f4      	bne.n	8006ab6 <_strtod_l+0x5b6>
 8006acc:	b10b      	cbz	r3, 8006ad2 <_strtod_l+0x5d2>
 8006ace:	4682      	mov	sl, r0
 8006ad0:	468b      	mov	fp, r1
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	b1b3      	cbz	r3, 8006b04 <_strtod_l+0x604>
 8006ad6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ada:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	dd0f      	ble.n	8006b04 <_strtod_l+0x604>
 8006ae4:	2b1f      	cmp	r3, #31
 8006ae6:	dd55      	ble.n	8006b94 <_strtod_l+0x694>
 8006ae8:	2b34      	cmp	r3, #52	@ 0x34
 8006aea:	bfde      	ittt	le
 8006aec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006af0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006af4:	4093      	lslle	r3, r2
 8006af6:	f04f 0a00 	mov.w	sl, #0
 8006afa:	bfcc      	ite	gt
 8006afc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006b00:	ea03 0b01 	andle.w	fp, r3, r1
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	4650      	mov	r0, sl
 8006b0a:	4659      	mov	r1, fp
 8006b0c:	f7f9 fff4 	bl	8000af8 <__aeabi_dcmpeq>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d1a6      	bne.n	8006a62 <_strtod_l+0x562>
 8006b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b1a:	9805      	ldr	r0, [sp, #20]
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	463a      	mov	r2, r7
 8006b20:	f002 f8d6 	bl	8008cd0 <__s2b>
 8006b24:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f af05 	beq.w	8006936 <_strtod_l+0x436>
 8006b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	eba9 0308 	sub.w	r3, r9, r8
 8006b34:	bfa8      	it	ge
 8006b36:	2300      	movge	r3, #0
 8006b38:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b3a:	2400      	movs	r4, #0
 8006b3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b40:	9316      	str	r3, [sp, #88]	@ 0x58
 8006b42:	46a0      	mov	r8, r4
 8006b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b46:	9805      	ldr	r0, [sp, #20]
 8006b48:	6859      	ldr	r1, [r3, #4]
 8006b4a:	f002 f819 	bl	8008b80 <_Balloc>
 8006b4e:	4681      	mov	r9, r0
 8006b50:	2800      	cmp	r0, #0
 8006b52:	f43f aef4 	beq.w	800693e <_strtod_l+0x43e>
 8006b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	3202      	adds	r2, #2
 8006b5c:	f103 010c 	add.w	r1, r3, #12
 8006b60:	0092      	lsls	r2, r2, #2
 8006b62:	300c      	adds	r0, #12
 8006b64:	f000 fb9b 	bl	800729e <memcpy>
 8006b68:	ec4b ab10 	vmov	d0, sl, fp
 8006b6c:	9805      	ldr	r0, [sp, #20]
 8006b6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006b70:	a91b      	add	r1, sp, #108	@ 0x6c
 8006b72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006b76:	f002 fbe7 	bl	8009348 <__d2b>
 8006b7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f43f aede 	beq.w	800693e <_strtod_l+0x43e>
 8006b82:	9805      	ldr	r0, [sp, #20]
 8006b84:	2101      	movs	r1, #1
 8006b86:	f002 f939 	bl	8008dfc <__i2b>
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	b948      	cbnz	r0, 8006ba2 <_strtod_l+0x6a2>
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	e6d4      	b.n	800693e <_strtod_l+0x43e>
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b98:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9c:	ea03 0a0a 	and.w	sl, r3, sl
 8006ba0:	e7b0      	b.n	8006b04 <_strtod_l+0x604>
 8006ba2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006ba4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	bfab      	itete	ge
 8006baa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006bac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006bae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006bb0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006bb2:	bfac      	ite	ge
 8006bb4:	18ef      	addge	r7, r5, r3
 8006bb6:	1b5e      	sublt	r6, r3, r5
 8006bb8:	9b08      	ldr	r3, [sp, #32]
 8006bba:	1aed      	subs	r5, r5, r3
 8006bbc:	4415      	add	r5, r2
 8006bbe:	4b66      	ldr	r3, [pc, #408]	@ (8006d58 <_strtod_l+0x858>)
 8006bc0:	3d01      	subs	r5, #1
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006bc8:	da50      	bge.n	8006c6c <_strtod_l+0x76c>
 8006bca:	1b5b      	subs	r3, r3, r5
 8006bcc:	2b1f      	cmp	r3, #31
 8006bce:	eba2 0203 	sub.w	r2, r2, r3
 8006bd2:	f04f 0101 	mov.w	r1, #1
 8006bd6:	dc3d      	bgt.n	8006c54 <_strtod_l+0x754>
 8006bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bde:	2300      	movs	r3, #0
 8006be0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006be2:	18bd      	adds	r5, r7, r2
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	42af      	cmp	r7, r5
 8006be8:	4416      	add	r6, r2
 8006bea:	441e      	add	r6, r3
 8006bec:	463b      	mov	r3, r7
 8006bee:	bfa8      	it	ge
 8006bf0:	462b      	movge	r3, r5
 8006bf2:	42b3      	cmp	r3, r6
 8006bf4:	bfa8      	it	ge
 8006bf6:	4633      	movge	r3, r6
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bfc2      	ittt	gt
 8006bfc:	1aed      	subgt	r5, r5, r3
 8006bfe:	1af6      	subgt	r6, r6, r3
 8006c00:	1aff      	subgt	r7, r7, r3
 8006c02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd16      	ble.n	8006c36 <_strtod_l+0x736>
 8006c08:	4641      	mov	r1, r8
 8006c0a:	9805      	ldr	r0, [sp, #20]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f002 f9b5 	bl	8008f7c <__pow5mult>
 8006c12:	4680      	mov	r8, r0
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d0ba      	beq.n	8006b8e <_strtod_l+0x68e>
 8006c18:	4601      	mov	r1, r0
 8006c1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c1c:	9805      	ldr	r0, [sp, #20]
 8006c1e:	f002 f903 	bl	8008e28 <__multiply>
 8006c22:	900e      	str	r0, [sp, #56]	@ 0x38
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f43f ae8a 	beq.w	800693e <_strtod_l+0x43e>
 8006c2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c2c:	9805      	ldr	r0, [sp, #20]
 8006c2e:	f001 ffe7 	bl	8008c00 <_Bfree>
 8006c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c34:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	dc1d      	bgt.n	8006c76 <_strtod_l+0x776>
 8006c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dd23      	ble.n	8006c88 <_strtod_l+0x788>
 8006c40:	4649      	mov	r1, r9
 8006c42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006c44:	9805      	ldr	r0, [sp, #20]
 8006c46:	f002 f999 	bl	8008f7c <__pow5mult>
 8006c4a:	4681      	mov	r9, r0
 8006c4c:	b9e0      	cbnz	r0, 8006c88 <_strtod_l+0x788>
 8006c4e:	f04f 0900 	mov.w	r9, #0
 8006c52:	e674      	b.n	800693e <_strtod_l+0x43e>
 8006c54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006c58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006c5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006c60:	35e2      	adds	r5, #226	@ 0xe2
 8006c62:	fa01 f305 	lsl.w	r3, r1, r5
 8006c66:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006c6a:	e7ba      	b.n	8006be2 <_strtod_l+0x6e2>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c70:	2301      	movs	r3, #1
 8006c72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c74:	e7b5      	b.n	8006be2 <_strtod_l+0x6e2>
 8006c76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c78:	9805      	ldr	r0, [sp, #20]
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	f002 f9d8 	bl	8009030 <__lshift>
 8006c80:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d1d9      	bne.n	8006c3a <_strtod_l+0x73a>
 8006c86:	e65a      	b.n	800693e <_strtod_l+0x43e>
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	dd07      	ble.n	8006c9c <_strtod_l+0x79c>
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	9805      	ldr	r0, [sp, #20]
 8006c90:	4632      	mov	r2, r6
 8006c92:	f002 f9cd 	bl	8009030 <__lshift>
 8006c96:	4681      	mov	r9, r0
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d0d8      	beq.n	8006c4e <_strtod_l+0x74e>
 8006c9c:	2f00      	cmp	r7, #0
 8006c9e:	dd08      	ble.n	8006cb2 <_strtod_l+0x7b2>
 8006ca0:	4641      	mov	r1, r8
 8006ca2:	9805      	ldr	r0, [sp, #20]
 8006ca4:	463a      	mov	r2, r7
 8006ca6:	f002 f9c3 	bl	8009030 <__lshift>
 8006caa:	4680      	mov	r8, r0
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f43f ae46 	beq.w	800693e <_strtod_l+0x43e>
 8006cb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cb4:	9805      	ldr	r0, [sp, #20]
 8006cb6:	464a      	mov	r2, r9
 8006cb8:	f002 fa42 	bl	8009140 <__mdiff>
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f43f ae3d 	beq.w	800693e <_strtod_l+0x43e>
 8006cc4:	68c3      	ldr	r3, [r0, #12]
 8006cc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60c3      	str	r3, [r0, #12]
 8006ccc:	4641      	mov	r1, r8
 8006cce:	f002 fa1b 	bl	8009108 <__mcmp>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	da46      	bge.n	8006d64 <_strtod_l+0x864>
 8006cd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cd8:	ea53 030a 	orrs.w	r3, r3, sl
 8006cdc:	d16c      	bne.n	8006db8 <_strtod_l+0x8b8>
 8006cde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d168      	bne.n	8006db8 <_strtod_l+0x8b8>
 8006ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006cea:	0d1b      	lsrs	r3, r3, #20
 8006cec:	051b      	lsls	r3, r3, #20
 8006cee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006cf2:	d961      	bls.n	8006db8 <_strtod_l+0x8b8>
 8006cf4:	6963      	ldr	r3, [r4, #20]
 8006cf6:	b913      	cbnz	r3, 8006cfe <_strtod_l+0x7fe>
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	dd5c      	ble.n	8006db8 <_strtod_l+0x8b8>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	2201      	movs	r2, #1
 8006d02:	9805      	ldr	r0, [sp, #20]
 8006d04:	f002 f994 	bl	8009030 <__lshift>
 8006d08:	4641      	mov	r1, r8
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	f002 f9fc 	bl	8009108 <__mcmp>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	dd51      	ble.n	8006db8 <_strtod_l+0x8b8>
 8006d14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d18:	9a08      	ldr	r2, [sp, #32]
 8006d1a:	0d1b      	lsrs	r3, r3, #20
 8006d1c:	051b      	lsls	r3, r3, #20
 8006d1e:	2a00      	cmp	r2, #0
 8006d20:	d06b      	beq.n	8006dfa <_strtod_l+0x8fa>
 8006d22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d26:	d868      	bhi.n	8006dfa <_strtod_l+0x8fa>
 8006d28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006d2c:	f67f ae9d 	bls.w	8006a6a <_strtod_l+0x56a>
 8006d30:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <_strtod_l+0x85c>)
 8006d32:	4650      	mov	r0, sl
 8006d34:	4659      	mov	r1, fp
 8006d36:	2200      	movs	r2, #0
 8006d38:	f7f9 fc76 	bl	8000628 <__aeabi_dmul>
 8006d3c:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <_strtod_l+0x860>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	4682      	mov	sl, r0
 8006d42:	468b      	mov	fp, r1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f47f ae05 	bne.w	8006954 <_strtod_l+0x454>
 8006d4a:	9a05      	ldr	r2, [sp, #20]
 8006d4c:	2322      	movs	r3, #34	@ 0x22
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	e600      	b.n	8006954 <_strtod_l+0x454>
 8006d52:	bf00      	nop
 8006d54:	08009e40 	.word	0x08009e40
 8006d58:	fffffc02 	.word	0xfffffc02
 8006d5c:	39500000 	.word	0x39500000
 8006d60:	7ff00000 	.word	0x7ff00000
 8006d64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006d68:	d165      	bne.n	8006e36 <_strtod_l+0x936>
 8006d6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006d6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d70:	b35a      	cbz	r2, 8006dca <_strtod_l+0x8ca>
 8006d72:	4a9f      	ldr	r2, [pc, #636]	@ (8006ff0 <_strtod_l+0xaf0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d12b      	bne.n	8006dd0 <_strtod_l+0x8d0>
 8006d78:	9b08      	ldr	r3, [sp, #32]
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	b303      	cbz	r3, 8006dc0 <_strtod_l+0x8c0>
 8006d7e:	4b9d      	ldr	r3, [pc, #628]	@ (8006ff4 <_strtod_l+0xaf4>)
 8006d80:	465a      	mov	r2, fp
 8006d82:	4013      	ands	r3, r2
 8006d84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d8c:	d81b      	bhi.n	8006dc6 <_strtod_l+0x8c6>
 8006d8e:	0d1b      	lsrs	r3, r3, #20
 8006d90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d94:	fa02 f303 	lsl.w	r3, r2, r3
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d119      	bne.n	8006dd0 <_strtod_l+0x8d0>
 8006d9c:	4b96      	ldr	r3, [pc, #600]	@ (8006ff8 <_strtod_l+0xaf8>)
 8006d9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d102      	bne.n	8006daa <_strtod_l+0x8aa>
 8006da4:	3101      	adds	r1, #1
 8006da6:	f43f adca 	beq.w	800693e <_strtod_l+0x43e>
 8006daa:	4b92      	ldr	r3, [pc, #584]	@ (8006ff4 <_strtod_l+0xaf4>)
 8006dac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dae:	401a      	ands	r2, r3
 8006db0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006db4:	f04f 0a00 	mov.w	sl, #0
 8006db8:	9b08      	ldr	r3, [sp, #32]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1b8      	bne.n	8006d30 <_strtod_l+0x830>
 8006dbe:	e5c9      	b.n	8006954 <_strtod_l+0x454>
 8006dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dc4:	e7e8      	b.n	8006d98 <_strtod_l+0x898>
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	e7e6      	b.n	8006d98 <_strtod_l+0x898>
 8006dca:	ea53 030a 	orrs.w	r3, r3, sl
 8006dce:	d0a1      	beq.n	8006d14 <_strtod_l+0x814>
 8006dd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dd2:	b1db      	cbz	r3, 8006e0c <_strtod_l+0x90c>
 8006dd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dd6:	4213      	tst	r3, r2
 8006dd8:	d0ee      	beq.n	8006db8 <_strtod_l+0x8b8>
 8006dda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ddc:	9a08      	ldr	r2, [sp, #32]
 8006dde:	4650      	mov	r0, sl
 8006de0:	4659      	mov	r1, fp
 8006de2:	b1bb      	cbz	r3, 8006e14 <_strtod_l+0x914>
 8006de4:	f7ff fb6e 	bl	80064c4 <sulp>
 8006de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dec:	ec53 2b10 	vmov	r2, r3, d0
 8006df0:	f7f9 fa64 	bl	80002bc <__adddf3>
 8006df4:	4682      	mov	sl, r0
 8006df6:	468b      	mov	fp, r1
 8006df8:	e7de      	b.n	8006db8 <_strtod_l+0x8b8>
 8006dfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006dfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e06:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006e0a:	e7d5      	b.n	8006db8 <_strtod_l+0x8b8>
 8006e0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e0e:	ea13 0f0a 	tst.w	r3, sl
 8006e12:	e7e1      	b.n	8006dd8 <_strtod_l+0x8d8>
 8006e14:	f7ff fb56 	bl	80064c4 <sulp>
 8006e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e1c:	ec53 2b10 	vmov	r2, r3, d0
 8006e20:	f7f9 fa4a 	bl	80002b8 <__aeabi_dsub>
 8006e24:	2200      	movs	r2, #0
 8006e26:	2300      	movs	r3, #0
 8006e28:	4682      	mov	sl, r0
 8006e2a:	468b      	mov	fp, r1
 8006e2c:	f7f9 fe64 	bl	8000af8 <__aeabi_dcmpeq>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d0c1      	beq.n	8006db8 <_strtod_l+0x8b8>
 8006e34:	e619      	b.n	8006a6a <_strtod_l+0x56a>
 8006e36:	4641      	mov	r1, r8
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f002 fadd 	bl	80093f8 <__ratio>
 8006e3e:	ec57 6b10 	vmov	r6, r7, d0
 8006e42:	2200      	movs	r2, #0
 8006e44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fe68 	bl	8000b20 <__aeabi_dcmple>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d06f      	beq.n	8006f34 <_strtod_l+0xa34>
 8006e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d17a      	bne.n	8006f50 <_strtod_l+0xa50>
 8006e5a:	f1ba 0f00 	cmp.w	sl, #0
 8006e5e:	d158      	bne.n	8006f12 <_strtod_l+0xa12>
 8006e60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d15a      	bne.n	8006f20 <_strtod_l+0xa20>
 8006e6a:	4b64      	ldr	r3, [pc, #400]	@ (8006ffc <_strtod_l+0xafc>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fe4b 	bl	8000b0c <__aeabi_dcmplt>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d159      	bne.n	8006f2e <_strtod_l+0xa2e>
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	4b60      	ldr	r3, [pc, #384]	@ (8007000 <_strtod_l+0xb00>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	f7f9 fbd1 	bl	8000628 <__aeabi_dmul>
 8006e86:	4606      	mov	r6, r0
 8006e88:	460f      	mov	r7, r1
 8006e8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006e8e:	9606      	str	r6, [sp, #24]
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e96:	4d57      	ldr	r5, [pc, #348]	@ (8006ff4 <_strtod_l+0xaf4>)
 8006e98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e9e:	401d      	ands	r5, r3
 8006ea0:	4b58      	ldr	r3, [pc, #352]	@ (8007004 <_strtod_l+0xb04>)
 8006ea2:	429d      	cmp	r5, r3
 8006ea4:	f040 80b2 	bne.w	800700c <_strtod_l+0xb0c>
 8006ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006eae:	ec4b ab10 	vmov	d0, sl, fp
 8006eb2:	f002 f9d9 	bl	8009268 <__ulp>
 8006eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eba:	ec51 0b10 	vmov	r0, r1, d0
 8006ebe:	f7f9 fbb3 	bl	8000628 <__aeabi_dmul>
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	465b      	mov	r3, fp
 8006ec6:	f7f9 f9f9 	bl	80002bc <__adddf3>
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4949      	ldr	r1, [pc, #292]	@ (8006ff4 <_strtod_l+0xaf4>)
 8006ece:	4a4e      	ldr	r2, [pc, #312]	@ (8007008 <_strtod_l+0xb08>)
 8006ed0:	4019      	ands	r1, r3
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	4682      	mov	sl, r0
 8006ed6:	d942      	bls.n	8006f5e <_strtod_l+0xa5e>
 8006ed8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006eda:	4b47      	ldr	r3, [pc, #284]	@ (8006ff8 <_strtod_l+0xaf8>)
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d103      	bne.n	8006ee8 <_strtod_l+0x9e8>
 8006ee0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	f43f ad2b 	beq.w	800693e <_strtod_l+0x43e>
 8006ee8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006ff8 <_strtod_l+0xaf8>
 8006eec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006ef0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ef2:	9805      	ldr	r0, [sp, #20]
 8006ef4:	f001 fe84 	bl	8008c00 <_Bfree>
 8006ef8:	9805      	ldr	r0, [sp, #20]
 8006efa:	4649      	mov	r1, r9
 8006efc:	f001 fe80 	bl	8008c00 <_Bfree>
 8006f00:	9805      	ldr	r0, [sp, #20]
 8006f02:	4641      	mov	r1, r8
 8006f04:	f001 fe7c 	bl	8008c00 <_Bfree>
 8006f08:	9805      	ldr	r0, [sp, #20]
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	f001 fe78 	bl	8008c00 <_Bfree>
 8006f10:	e618      	b.n	8006b44 <_strtod_l+0x644>
 8006f12:	f1ba 0f01 	cmp.w	sl, #1
 8006f16:	d103      	bne.n	8006f20 <_strtod_l+0xa20>
 8006f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f43f ada5 	beq.w	8006a6a <_strtod_l+0x56a>
 8006f20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006fd0 <_strtod_l+0xad0>
 8006f24:	4f35      	ldr	r7, [pc, #212]	@ (8006ffc <_strtod_l+0xafc>)
 8006f26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	e7b1      	b.n	8006e92 <_strtod_l+0x992>
 8006f2e:	4f34      	ldr	r7, [pc, #208]	@ (8007000 <_strtod_l+0xb00>)
 8006f30:	2600      	movs	r6, #0
 8006f32:	e7aa      	b.n	8006e8a <_strtod_l+0x98a>
 8006f34:	4b32      	ldr	r3, [pc, #200]	@ (8007000 <_strtod_l+0xb00>)
 8006f36:	4630      	mov	r0, r6
 8006f38:	4639      	mov	r1, r7
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f7f9 fb74 	bl	8000628 <__aeabi_dmul>
 8006f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f42:	4606      	mov	r6, r0
 8006f44:	460f      	mov	r7, r1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d09f      	beq.n	8006e8a <_strtod_l+0x98a>
 8006f4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006f4e:	e7a0      	b.n	8006e92 <_strtod_l+0x992>
 8006f50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006fd8 <_strtod_l+0xad8>
 8006f54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f58:	ec57 6b17 	vmov	r6, r7, d7
 8006f5c:	e799      	b.n	8006e92 <_strtod_l+0x992>
 8006f5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006f62:	9b08      	ldr	r3, [sp, #32]
 8006f64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1c1      	bne.n	8006ef0 <_strtod_l+0x9f0>
 8006f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f70:	0d1b      	lsrs	r3, r3, #20
 8006f72:	051b      	lsls	r3, r3, #20
 8006f74:	429d      	cmp	r5, r3
 8006f76:	d1bb      	bne.n	8006ef0 <_strtod_l+0x9f0>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fe9c 	bl	8000cb8 <__aeabi_d2lz>
 8006f80:	f7f9 fb24 	bl	80005cc <__aeabi_l2d>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	f7f9 f994 	bl	80002b8 <__aeabi_dsub>
 8006f90:	460b      	mov	r3, r1
 8006f92:	4602      	mov	r2, r0
 8006f94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006f98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f9e:	ea46 060a 	orr.w	r6, r6, sl
 8006fa2:	431e      	orrs	r6, r3
 8006fa4:	d06f      	beq.n	8007086 <_strtod_l+0xb86>
 8006fa6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006fe0 <_strtod_l+0xae0>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 fdae 	bl	8000b0c <__aeabi_dcmplt>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f47f accf 	bne.w	8006954 <_strtod_l+0x454>
 8006fb6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006fe8 <_strtod_l+0xae8>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc0:	f7f9 fdc2 	bl	8000b48 <__aeabi_dcmpgt>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d093      	beq.n	8006ef0 <_strtod_l+0x9f0>
 8006fc8:	e4c4      	b.n	8006954 <_strtod_l+0x454>
 8006fca:	bf00      	nop
 8006fcc:	f3af 8000 	nop.w
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	bff00000 	.word	0xbff00000
 8006fd8:	00000000 	.word	0x00000000
 8006fdc:	3ff00000 	.word	0x3ff00000
 8006fe0:	94a03595 	.word	0x94a03595
 8006fe4:	3fdfffff 	.word	0x3fdfffff
 8006fe8:	35afe535 	.word	0x35afe535
 8006fec:	3fe00000 	.word	0x3fe00000
 8006ff0:	000fffff 	.word	0x000fffff
 8006ff4:	7ff00000 	.word	0x7ff00000
 8006ff8:	7fefffff 	.word	0x7fefffff
 8006ffc:	3ff00000 	.word	0x3ff00000
 8007000:	3fe00000 	.word	0x3fe00000
 8007004:	7fe00000 	.word	0x7fe00000
 8007008:	7c9fffff 	.word	0x7c9fffff
 800700c:	9b08      	ldr	r3, [sp, #32]
 800700e:	b323      	cbz	r3, 800705a <_strtod_l+0xb5a>
 8007010:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007014:	d821      	bhi.n	800705a <_strtod_l+0xb5a>
 8007016:	a328      	add	r3, pc, #160	@ (adr r3, 80070b8 <_strtod_l+0xbb8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4630      	mov	r0, r6
 800701e:	4639      	mov	r1, r7
 8007020:	f7f9 fd7e 	bl	8000b20 <__aeabi_dcmple>
 8007024:	b1a0      	cbz	r0, 8007050 <_strtod_l+0xb50>
 8007026:	4639      	mov	r1, r7
 8007028:	4630      	mov	r0, r6
 800702a:	f7f9 fdd5 	bl	8000bd8 <__aeabi_d2uiz>
 800702e:	2801      	cmp	r0, #1
 8007030:	bf38      	it	cc
 8007032:	2001      	movcc	r0, #1
 8007034:	f7f9 fa7e 	bl	8000534 <__aeabi_ui2d>
 8007038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800703a:	4606      	mov	r6, r0
 800703c:	460f      	mov	r7, r1
 800703e:	b9fb      	cbnz	r3, 8007080 <_strtod_l+0xb80>
 8007040:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007044:	9014      	str	r0, [sp, #80]	@ 0x50
 8007046:	9315      	str	r3, [sp, #84]	@ 0x54
 8007048:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800704c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007050:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007052:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007056:	1b5b      	subs	r3, r3, r5
 8007058:	9311      	str	r3, [sp, #68]	@ 0x44
 800705a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800705e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007062:	f002 f901 	bl	8009268 <__ulp>
 8007066:	4650      	mov	r0, sl
 8007068:	ec53 2b10 	vmov	r2, r3, d0
 800706c:	4659      	mov	r1, fp
 800706e:	f7f9 fadb 	bl	8000628 <__aeabi_dmul>
 8007072:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007076:	f7f9 f921 	bl	80002bc <__adddf3>
 800707a:	4682      	mov	sl, r0
 800707c:	468b      	mov	fp, r1
 800707e:	e770      	b.n	8006f62 <_strtod_l+0xa62>
 8007080:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007084:	e7e0      	b.n	8007048 <_strtod_l+0xb48>
 8007086:	a30e      	add	r3, pc, #56	@ (adr r3, 80070c0 <_strtod_l+0xbc0>)
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	f7f9 fd3e 	bl	8000b0c <__aeabi_dcmplt>
 8007090:	e798      	b.n	8006fc4 <_strtod_l+0xac4>
 8007092:	2300      	movs	r3, #0
 8007094:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007096:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007098:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	f7ff ba6d 	b.w	800657a <_strtod_l+0x7a>
 80070a0:	2a65      	cmp	r2, #101	@ 0x65
 80070a2:	f43f ab66 	beq.w	8006772 <_strtod_l+0x272>
 80070a6:	2a45      	cmp	r2, #69	@ 0x45
 80070a8:	f43f ab63 	beq.w	8006772 <_strtod_l+0x272>
 80070ac:	2301      	movs	r3, #1
 80070ae:	f7ff bb9e 	b.w	80067ee <_strtod_l+0x2ee>
 80070b2:	bf00      	nop
 80070b4:	f3af 8000 	nop.w
 80070b8:	ffc00000 	.word	0xffc00000
 80070bc:	41dfffff 	.word	0x41dfffff
 80070c0:	94a03595 	.word	0x94a03595
 80070c4:	3fcfffff 	.word	0x3fcfffff

080070c8 <_strtod_r>:
 80070c8:	4b01      	ldr	r3, [pc, #4]	@ (80070d0 <_strtod_r+0x8>)
 80070ca:	f7ff ba19 	b.w	8006500 <_strtod_l>
 80070ce:	bf00      	nop
 80070d0:	20000018 	.word	0x20000018

080070d4 <_strtol_l.constprop.0>:
 80070d4:	2b24      	cmp	r3, #36	@ 0x24
 80070d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070da:	4686      	mov	lr, r0
 80070dc:	4690      	mov	r8, r2
 80070de:	d801      	bhi.n	80070e4 <_strtol_l.constprop.0+0x10>
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d106      	bne.n	80070f2 <_strtol_l.constprop.0+0x1e>
 80070e4:	f000 f8ae 	bl	8007244 <__errno>
 80070e8:	2316      	movs	r3, #22
 80070ea:	6003      	str	r3, [r0, #0]
 80070ec:	2000      	movs	r0, #0
 80070ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f2:	4834      	ldr	r0, [pc, #208]	@ (80071c4 <_strtol_l.constprop.0+0xf0>)
 80070f4:	460d      	mov	r5, r1
 80070f6:	462a      	mov	r2, r5
 80070f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070fc:	5d06      	ldrb	r6, [r0, r4]
 80070fe:	f016 0608 	ands.w	r6, r6, #8
 8007102:	d1f8      	bne.n	80070f6 <_strtol_l.constprop.0+0x22>
 8007104:	2c2d      	cmp	r4, #45	@ 0x2d
 8007106:	d12d      	bne.n	8007164 <_strtol_l.constprop.0+0x90>
 8007108:	782c      	ldrb	r4, [r5, #0]
 800710a:	2601      	movs	r6, #1
 800710c:	1c95      	adds	r5, r2, #2
 800710e:	f033 0210 	bics.w	r2, r3, #16
 8007112:	d109      	bne.n	8007128 <_strtol_l.constprop.0+0x54>
 8007114:	2c30      	cmp	r4, #48	@ 0x30
 8007116:	d12a      	bne.n	800716e <_strtol_l.constprop.0+0x9a>
 8007118:	782a      	ldrb	r2, [r5, #0]
 800711a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800711e:	2a58      	cmp	r2, #88	@ 0x58
 8007120:	d125      	bne.n	800716e <_strtol_l.constprop.0+0x9a>
 8007122:	786c      	ldrb	r4, [r5, #1]
 8007124:	2310      	movs	r3, #16
 8007126:	3502      	adds	r5, #2
 8007128:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800712c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007130:	2200      	movs	r2, #0
 8007132:	fbbc f9f3 	udiv	r9, ip, r3
 8007136:	4610      	mov	r0, r2
 8007138:	fb03 ca19 	mls	sl, r3, r9, ip
 800713c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007140:	2f09      	cmp	r7, #9
 8007142:	d81b      	bhi.n	800717c <_strtol_l.constprop.0+0xa8>
 8007144:	463c      	mov	r4, r7
 8007146:	42a3      	cmp	r3, r4
 8007148:	dd27      	ble.n	800719a <_strtol_l.constprop.0+0xc6>
 800714a:	1c57      	adds	r7, r2, #1
 800714c:	d007      	beq.n	800715e <_strtol_l.constprop.0+0x8a>
 800714e:	4581      	cmp	r9, r0
 8007150:	d320      	bcc.n	8007194 <_strtol_l.constprop.0+0xc0>
 8007152:	d101      	bne.n	8007158 <_strtol_l.constprop.0+0x84>
 8007154:	45a2      	cmp	sl, r4
 8007156:	db1d      	blt.n	8007194 <_strtol_l.constprop.0+0xc0>
 8007158:	fb00 4003 	mla	r0, r0, r3, r4
 800715c:	2201      	movs	r2, #1
 800715e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007162:	e7eb      	b.n	800713c <_strtol_l.constprop.0+0x68>
 8007164:	2c2b      	cmp	r4, #43	@ 0x2b
 8007166:	bf04      	itt	eq
 8007168:	782c      	ldrbeq	r4, [r5, #0]
 800716a:	1c95      	addeq	r5, r2, #2
 800716c:	e7cf      	b.n	800710e <_strtol_l.constprop.0+0x3a>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1da      	bne.n	8007128 <_strtol_l.constprop.0+0x54>
 8007172:	2c30      	cmp	r4, #48	@ 0x30
 8007174:	bf0c      	ite	eq
 8007176:	2308      	moveq	r3, #8
 8007178:	230a      	movne	r3, #10
 800717a:	e7d5      	b.n	8007128 <_strtol_l.constprop.0+0x54>
 800717c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007180:	2f19      	cmp	r7, #25
 8007182:	d801      	bhi.n	8007188 <_strtol_l.constprop.0+0xb4>
 8007184:	3c37      	subs	r4, #55	@ 0x37
 8007186:	e7de      	b.n	8007146 <_strtol_l.constprop.0+0x72>
 8007188:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800718c:	2f19      	cmp	r7, #25
 800718e:	d804      	bhi.n	800719a <_strtol_l.constprop.0+0xc6>
 8007190:	3c57      	subs	r4, #87	@ 0x57
 8007192:	e7d8      	b.n	8007146 <_strtol_l.constprop.0+0x72>
 8007194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007198:	e7e1      	b.n	800715e <_strtol_l.constprop.0+0x8a>
 800719a:	1c53      	adds	r3, r2, #1
 800719c:	d108      	bne.n	80071b0 <_strtol_l.constprop.0+0xdc>
 800719e:	2322      	movs	r3, #34	@ 0x22
 80071a0:	f8ce 3000 	str.w	r3, [lr]
 80071a4:	4660      	mov	r0, ip
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	d0a0      	beq.n	80070ee <_strtol_l.constprop.0+0x1a>
 80071ac:	1e69      	subs	r1, r5, #1
 80071ae:	e006      	b.n	80071be <_strtol_l.constprop.0+0xea>
 80071b0:	b106      	cbz	r6, 80071b4 <_strtol_l.constprop.0+0xe0>
 80071b2:	4240      	negs	r0, r0
 80071b4:	f1b8 0f00 	cmp.w	r8, #0
 80071b8:	d099      	beq.n	80070ee <_strtol_l.constprop.0+0x1a>
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	d1f6      	bne.n	80071ac <_strtol_l.constprop.0+0xd8>
 80071be:	f8c8 1000 	str.w	r1, [r8]
 80071c2:	e794      	b.n	80070ee <_strtol_l.constprop.0+0x1a>
 80071c4:	08009e71 	.word	0x08009e71

080071c8 <_strtol_r>:
 80071c8:	f7ff bf84 	b.w	80070d4 <_strtol_l.constprop.0>

080071cc <_fwalk_sglue>:
 80071cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d0:	4607      	mov	r7, r0
 80071d2:	4688      	mov	r8, r1
 80071d4:	4614      	mov	r4, r2
 80071d6:	2600      	movs	r6, #0
 80071d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071dc:	f1b9 0901 	subs.w	r9, r9, #1
 80071e0:	d505      	bpl.n	80071ee <_fwalk_sglue+0x22>
 80071e2:	6824      	ldr	r4, [r4, #0]
 80071e4:	2c00      	cmp	r4, #0
 80071e6:	d1f7      	bne.n	80071d8 <_fwalk_sglue+0xc>
 80071e8:	4630      	mov	r0, r6
 80071ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d907      	bls.n	8007204 <_fwalk_sglue+0x38>
 80071f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f8:	3301      	adds	r3, #1
 80071fa:	d003      	beq.n	8007204 <_fwalk_sglue+0x38>
 80071fc:	4629      	mov	r1, r5
 80071fe:	4638      	mov	r0, r7
 8007200:	47c0      	blx	r8
 8007202:	4306      	orrs	r6, r0
 8007204:	3568      	adds	r5, #104	@ 0x68
 8007206:	e7e9      	b.n	80071dc <_fwalk_sglue+0x10>

08007208 <strncmp>:
 8007208:	b510      	push	{r4, lr}
 800720a:	b16a      	cbz	r2, 8007228 <strncmp+0x20>
 800720c:	3901      	subs	r1, #1
 800720e:	1884      	adds	r4, r0, r2
 8007210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007214:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007218:	429a      	cmp	r2, r3
 800721a:	d103      	bne.n	8007224 <strncmp+0x1c>
 800721c:	42a0      	cmp	r0, r4
 800721e:	d001      	beq.n	8007224 <strncmp+0x1c>
 8007220:	2a00      	cmp	r2, #0
 8007222:	d1f5      	bne.n	8007210 <strncmp+0x8>
 8007224:	1ad0      	subs	r0, r2, r3
 8007226:	bd10      	pop	{r4, pc}
 8007228:	4610      	mov	r0, r2
 800722a:	e7fc      	b.n	8007226 <strncmp+0x1e>

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <_localeconv_r>:
 800723c:	4800      	ldr	r0, [pc, #0]	@ (8007240 <_localeconv_r+0x4>)
 800723e:	4770      	bx	lr
 8007240:	20000108 	.word	0x20000108

08007244 <__errno>:
 8007244:	4b01      	ldr	r3, [pc, #4]	@ (800724c <__errno+0x8>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000184 	.word	0x20000184

08007250 <__libc_init_array>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4d0d      	ldr	r5, [pc, #52]	@ (8007288 <__libc_init_array+0x38>)
 8007254:	4c0d      	ldr	r4, [pc, #52]	@ (800728c <__libc_init_array+0x3c>)
 8007256:	1b64      	subs	r4, r4, r5
 8007258:	10a4      	asrs	r4, r4, #2
 800725a:	2600      	movs	r6, #0
 800725c:	42a6      	cmp	r6, r4
 800725e:	d109      	bne.n	8007274 <__libc_init_array+0x24>
 8007260:	4d0b      	ldr	r5, [pc, #44]	@ (8007290 <__libc_init_array+0x40>)
 8007262:	4c0c      	ldr	r4, [pc, #48]	@ (8007294 <__libc_init_array+0x44>)
 8007264:	f002 fd66 	bl	8009d34 <_init>
 8007268:	1b64      	subs	r4, r4, r5
 800726a:	10a4      	asrs	r4, r4, #2
 800726c:	2600      	movs	r6, #0
 800726e:	42a6      	cmp	r6, r4
 8007270:	d105      	bne.n	800727e <__libc_init_array+0x2e>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	f855 3b04 	ldr.w	r3, [r5], #4
 8007278:	4798      	blx	r3
 800727a:	3601      	adds	r6, #1
 800727c:	e7ee      	b.n	800725c <__libc_init_array+0xc>
 800727e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007282:	4798      	blx	r3
 8007284:	3601      	adds	r6, #1
 8007286:	e7f2      	b.n	800726e <__libc_init_array+0x1e>
 8007288:	0800a20c 	.word	0x0800a20c
 800728c:	0800a20c 	.word	0x0800a20c
 8007290:	0800a20c 	.word	0x0800a20c
 8007294:	0800a210 	.word	0x0800a210

08007298 <__retarget_lock_init_recursive>:
 8007298:	4770      	bx	lr

0800729a <__retarget_lock_acquire_recursive>:
 800729a:	4770      	bx	lr

0800729c <__retarget_lock_release_recursive>:
 800729c:	4770      	bx	lr

0800729e <memcpy>:
 800729e:	440a      	add	r2, r1
 80072a0:	4291      	cmp	r1, r2
 80072a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80072a6:	d100      	bne.n	80072aa <memcpy+0xc>
 80072a8:	4770      	bx	lr
 80072aa:	b510      	push	{r4, lr}
 80072ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072b4:	4291      	cmp	r1, r2
 80072b6:	d1f9      	bne.n	80072ac <memcpy+0xe>
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	0000      	movs	r0, r0
 80072bc:	0000      	movs	r0, r0
	...

080072c0 <nan>:
 80072c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80072c8 <nan+0x8>
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	00000000 	.word	0x00000000
 80072cc:	7ff80000 	.word	0x7ff80000

080072d0 <nanf>:
 80072d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80072d8 <nanf+0x8>
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	7fc00000 	.word	0x7fc00000

080072dc <quorem>:
 80072dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	6903      	ldr	r3, [r0, #16]
 80072e2:	690c      	ldr	r4, [r1, #16]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	4607      	mov	r7, r0
 80072e8:	db7e      	blt.n	80073e8 <quorem+0x10c>
 80072ea:	3c01      	subs	r4, #1
 80072ec:	f101 0814 	add.w	r8, r1, #20
 80072f0:	00a3      	lsls	r3, r4, #2
 80072f2:	f100 0514 	add.w	r5, r0, #20
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007306:	3301      	adds	r3, #1
 8007308:	429a      	cmp	r2, r3
 800730a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800730e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007312:	d32e      	bcc.n	8007372 <quorem+0x96>
 8007314:	f04f 0a00 	mov.w	sl, #0
 8007318:	46c4      	mov	ip, r8
 800731a:	46ae      	mov	lr, r5
 800731c:	46d3      	mov	fp, sl
 800731e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007322:	b298      	uxth	r0, r3
 8007324:	fb06 a000 	mla	r0, r6, r0, sl
 8007328:	0c02      	lsrs	r2, r0, #16
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	fb06 2303 	mla	r3, r6, r3, r2
 8007330:	f8de 2000 	ldr.w	r2, [lr]
 8007334:	b280      	uxth	r0, r0
 8007336:	b292      	uxth	r2, r2
 8007338:	1a12      	subs	r2, r2, r0
 800733a:	445a      	add	r2, fp
 800733c:	f8de 0000 	ldr.w	r0, [lr]
 8007340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007344:	b29b      	uxth	r3, r3
 8007346:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800734a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800734e:	b292      	uxth	r2, r2
 8007350:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007354:	45e1      	cmp	r9, ip
 8007356:	f84e 2b04 	str.w	r2, [lr], #4
 800735a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800735e:	d2de      	bcs.n	800731e <quorem+0x42>
 8007360:	9b00      	ldr	r3, [sp, #0]
 8007362:	58eb      	ldr	r3, [r5, r3]
 8007364:	b92b      	cbnz	r3, 8007372 <quorem+0x96>
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	3b04      	subs	r3, #4
 800736a:	429d      	cmp	r5, r3
 800736c:	461a      	mov	r2, r3
 800736e:	d32f      	bcc.n	80073d0 <quorem+0xf4>
 8007370:	613c      	str	r4, [r7, #16]
 8007372:	4638      	mov	r0, r7
 8007374:	f001 fec8 	bl	8009108 <__mcmp>
 8007378:	2800      	cmp	r0, #0
 800737a:	db25      	blt.n	80073c8 <quorem+0xec>
 800737c:	4629      	mov	r1, r5
 800737e:	2000      	movs	r0, #0
 8007380:	f858 2b04 	ldr.w	r2, [r8], #4
 8007384:	f8d1 c000 	ldr.w	ip, [r1]
 8007388:	fa1f fe82 	uxth.w	lr, r2
 800738c:	fa1f f38c 	uxth.w	r3, ip
 8007390:	eba3 030e 	sub.w	r3, r3, lr
 8007394:	4403      	add	r3, r0
 8007396:	0c12      	lsrs	r2, r2, #16
 8007398:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800739c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073a6:	45c1      	cmp	r9, r8
 80073a8:	f841 3b04 	str.w	r3, [r1], #4
 80073ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073b0:	d2e6      	bcs.n	8007380 <quorem+0xa4>
 80073b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ba:	b922      	cbnz	r2, 80073c6 <quorem+0xea>
 80073bc:	3b04      	subs	r3, #4
 80073be:	429d      	cmp	r5, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	d30b      	bcc.n	80073dc <quorem+0x100>
 80073c4:	613c      	str	r4, [r7, #16]
 80073c6:	3601      	adds	r6, #1
 80073c8:	4630      	mov	r0, r6
 80073ca:	b003      	add	sp, #12
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	3b04      	subs	r3, #4
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	d1cb      	bne.n	8007370 <quorem+0x94>
 80073d8:	3c01      	subs	r4, #1
 80073da:	e7c6      	b.n	800736a <quorem+0x8e>
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	3b04      	subs	r3, #4
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	d1ef      	bne.n	80073c4 <quorem+0xe8>
 80073e4:	3c01      	subs	r4, #1
 80073e6:	e7ea      	b.n	80073be <quorem+0xe2>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e7ee      	b.n	80073ca <quorem+0xee>
 80073ec:	0000      	movs	r0, r0
	...

080073f0 <_dtoa_r>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	69c7      	ldr	r7, [r0, #28]
 80073f6:	b099      	sub	sp, #100	@ 0x64
 80073f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073fc:	ec55 4b10 	vmov	r4, r5, d0
 8007400:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007402:	9109      	str	r1, [sp, #36]	@ 0x24
 8007404:	4683      	mov	fp, r0
 8007406:	920e      	str	r2, [sp, #56]	@ 0x38
 8007408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800740a:	b97f      	cbnz	r7, 800742c <_dtoa_r+0x3c>
 800740c:	2010      	movs	r0, #16
 800740e:	f001 fa43 	bl	8008898 <malloc>
 8007412:	4602      	mov	r2, r0
 8007414:	f8cb 001c 	str.w	r0, [fp, #28]
 8007418:	b920      	cbnz	r0, 8007424 <_dtoa_r+0x34>
 800741a:	4ba7      	ldr	r3, [pc, #668]	@ (80076b8 <_dtoa_r+0x2c8>)
 800741c:	21ef      	movs	r1, #239	@ 0xef
 800741e:	48a7      	ldr	r0, [pc, #668]	@ (80076bc <_dtoa_r+0x2cc>)
 8007420:	f002 f94e 	bl	80096c0 <__assert_func>
 8007424:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007428:	6007      	str	r7, [r0, #0]
 800742a:	60c7      	str	r7, [r0, #12]
 800742c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007430:	6819      	ldr	r1, [r3, #0]
 8007432:	b159      	cbz	r1, 800744c <_dtoa_r+0x5c>
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	604a      	str	r2, [r1, #4]
 8007438:	2301      	movs	r3, #1
 800743a:	4093      	lsls	r3, r2
 800743c:	608b      	str	r3, [r1, #8]
 800743e:	4658      	mov	r0, fp
 8007440:	f001 fbde 	bl	8008c00 <_Bfree>
 8007444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	1e2b      	subs	r3, r5, #0
 800744e:	bfb9      	ittee	lt
 8007450:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007454:	9303      	strlt	r3, [sp, #12]
 8007456:	2300      	movge	r3, #0
 8007458:	6033      	strge	r3, [r6, #0]
 800745a:	9f03      	ldr	r7, [sp, #12]
 800745c:	4b98      	ldr	r3, [pc, #608]	@ (80076c0 <_dtoa_r+0x2d0>)
 800745e:	bfbc      	itt	lt
 8007460:	2201      	movlt	r2, #1
 8007462:	6032      	strlt	r2, [r6, #0]
 8007464:	43bb      	bics	r3, r7
 8007466:	d112      	bne.n	800748e <_dtoa_r+0x9e>
 8007468:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800746a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007474:	4323      	orrs	r3, r4
 8007476:	f000 854d 	beq.w	8007f14 <_dtoa_r+0xb24>
 800747a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800747c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80076d4 <_dtoa_r+0x2e4>
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 854f 	beq.w	8007f24 <_dtoa_r+0xb34>
 8007486:	f10a 0303 	add.w	r3, sl, #3
 800748a:	f000 bd49 	b.w	8007f20 <_dtoa_r+0xb30>
 800748e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	ec51 0b17 	vmov	r0, r1, d7
 8007498:	2300      	movs	r3, #0
 800749a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800749e:	f7f9 fb2b 	bl	8000af8 <__aeabi_dcmpeq>
 80074a2:	4680      	mov	r8, r0
 80074a4:	b158      	cbz	r0, 80074be <_dtoa_r+0xce>
 80074a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80074a8:	2301      	movs	r3, #1
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074ae:	b113      	cbz	r3, 80074b6 <_dtoa_r+0xc6>
 80074b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80074b2:	4b84      	ldr	r3, [pc, #528]	@ (80076c4 <_dtoa_r+0x2d4>)
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80076d8 <_dtoa_r+0x2e8>
 80074ba:	f000 bd33 	b.w	8007f24 <_dtoa_r+0xb34>
 80074be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80074c2:	aa16      	add	r2, sp, #88	@ 0x58
 80074c4:	a917      	add	r1, sp, #92	@ 0x5c
 80074c6:	4658      	mov	r0, fp
 80074c8:	f001 ff3e 	bl	8009348 <__d2b>
 80074cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80074d0:	4681      	mov	r9, r0
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	d077      	beq.n	80075c6 <_dtoa_r+0x1d6>
 80074d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80074dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074f0:	4619      	mov	r1, r3
 80074f2:	2200      	movs	r2, #0
 80074f4:	4b74      	ldr	r3, [pc, #464]	@ (80076c8 <_dtoa_r+0x2d8>)
 80074f6:	f7f8 fedf 	bl	80002b8 <__aeabi_dsub>
 80074fa:	a369      	add	r3, pc, #420	@ (adr r3, 80076a0 <_dtoa_r+0x2b0>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f9 f892 	bl	8000628 <__aeabi_dmul>
 8007504:	a368      	add	r3, pc, #416	@ (adr r3, 80076a8 <_dtoa_r+0x2b8>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f8 fed7 	bl	80002bc <__adddf3>
 800750e:	4604      	mov	r4, r0
 8007510:	4630      	mov	r0, r6
 8007512:	460d      	mov	r5, r1
 8007514:	f7f9 f81e 	bl	8000554 <__aeabi_i2d>
 8007518:	a365      	add	r3, pc, #404	@ (adr r3, 80076b0 <_dtoa_r+0x2c0>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f7f9 f883 	bl	8000628 <__aeabi_dmul>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f8 fec7 	bl	80002bc <__adddf3>
 800752e:	4604      	mov	r4, r0
 8007530:	460d      	mov	r5, r1
 8007532:	f7f9 fb29 	bl	8000b88 <__aeabi_d2iz>
 8007536:	2200      	movs	r2, #0
 8007538:	4607      	mov	r7, r0
 800753a:	2300      	movs	r3, #0
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	f7f9 fae4 	bl	8000b0c <__aeabi_dcmplt>
 8007544:	b140      	cbz	r0, 8007558 <_dtoa_r+0x168>
 8007546:	4638      	mov	r0, r7
 8007548:	f7f9 f804 	bl	8000554 <__aeabi_i2d>
 800754c:	4622      	mov	r2, r4
 800754e:	462b      	mov	r3, r5
 8007550:	f7f9 fad2 	bl	8000af8 <__aeabi_dcmpeq>
 8007554:	b900      	cbnz	r0, 8007558 <_dtoa_r+0x168>
 8007556:	3f01      	subs	r7, #1
 8007558:	2f16      	cmp	r7, #22
 800755a:	d851      	bhi.n	8007600 <_dtoa_r+0x210>
 800755c:	4b5b      	ldr	r3, [pc, #364]	@ (80076cc <_dtoa_r+0x2dc>)
 800755e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800756a:	f7f9 facf 	bl	8000b0c <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d048      	beq.n	8007604 <_dtoa_r+0x214>
 8007572:	3f01      	subs	r7, #1
 8007574:	2300      	movs	r3, #0
 8007576:	9312      	str	r3, [sp, #72]	@ 0x48
 8007578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800757a:	1b9b      	subs	r3, r3, r6
 800757c:	1e5a      	subs	r2, r3, #1
 800757e:	bf44      	itt	mi
 8007580:	f1c3 0801 	rsbmi	r8, r3, #1
 8007584:	2300      	movmi	r3, #0
 8007586:	9208      	str	r2, [sp, #32]
 8007588:	bf54      	ite	pl
 800758a:	f04f 0800 	movpl.w	r8, #0
 800758e:	9308      	strmi	r3, [sp, #32]
 8007590:	2f00      	cmp	r7, #0
 8007592:	db39      	blt.n	8007608 <_dtoa_r+0x218>
 8007594:	9b08      	ldr	r3, [sp, #32]
 8007596:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007598:	443b      	add	r3, r7
 800759a:	9308      	str	r3, [sp, #32]
 800759c:	2300      	movs	r3, #0
 800759e:	930a      	str	r3, [sp, #40]	@ 0x28
 80075a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	d864      	bhi.n	8007670 <_dtoa_r+0x280>
 80075a6:	2b05      	cmp	r3, #5
 80075a8:	bfc4      	itt	gt
 80075aa:	3b04      	subgt	r3, #4
 80075ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80075ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b0:	f1a3 0302 	sub.w	r3, r3, #2
 80075b4:	bfcc      	ite	gt
 80075b6:	2400      	movgt	r4, #0
 80075b8:	2401      	movle	r4, #1
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d863      	bhi.n	8007686 <_dtoa_r+0x296>
 80075be:	e8df f003 	tbb	[pc, r3]
 80075c2:	372a      	.short	0x372a
 80075c4:	5535      	.short	0x5535
 80075c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80075ca:	441e      	add	r6, r3
 80075cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	bfc1      	itttt	gt
 80075d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075d8:	409f      	lslgt	r7, r3
 80075da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075e2:	bfd6      	itet	le
 80075e4:	f1c3 0320 	rsble	r3, r3, #32
 80075e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80075ec:	fa04 f003 	lslle.w	r0, r4, r3
 80075f0:	f7f8 ffa0 	bl	8000534 <__aeabi_ui2d>
 80075f4:	2201      	movs	r2, #1
 80075f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075fa:	3e01      	subs	r6, #1
 80075fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80075fe:	e777      	b.n	80074f0 <_dtoa_r+0x100>
 8007600:	2301      	movs	r3, #1
 8007602:	e7b8      	b.n	8007576 <_dtoa_r+0x186>
 8007604:	9012      	str	r0, [sp, #72]	@ 0x48
 8007606:	e7b7      	b.n	8007578 <_dtoa_r+0x188>
 8007608:	427b      	negs	r3, r7
 800760a:	930a      	str	r3, [sp, #40]	@ 0x28
 800760c:	2300      	movs	r3, #0
 800760e:	eba8 0807 	sub.w	r8, r8, r7
 8007612:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007614:	e7c4      	b.n	80075a0 <_dtoa_r+0x1b0>
 8007616:	2300      	movs	r3, #0
 8007618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800761a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	dc35      	bgt.n	800768c <_dtoa_r+0x29c>
 8007620:	2301      	movs	r3, #1
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	9307      	str	r3, [sp, #28]
 8007626:	461a      	mov	r2, r3
 8007628:	920e      	str	r2, [sp, #56]	@ 0x38
 800762a:	e00b      	b.n	8007644 <_dtoa_r+0x254>
 800762c:	2301      	movs	r3, #1
 800762e:	e7f3      	b.n	8007618 <_dtoa_r+0x228>
 8007630:	2300      	movs	r3, #0
 8007632:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	2b01      	cmp	r3, #1
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	bfb8      	it	lt
 8007642:	2301      	movlt	r3, #1
 8007644:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007648:	2100      	movs	r1, #0
 800764a:	2204      	movs	r2, #4
 800764c:	f102 0514 	add.w	r5, r2, #20
 8007650:	429d      	cmp	r5, r3
 8007652:	d91f      	bls.n	8007694 <_dtoa_r+0x2a4>
 8007654:	6041      	str	r1, [r0, #4]
 8007656:	4658      	mov	r0, fp
 8007658:	f001 fa92 	bl	8008b80 <_Balloc>
 800765c:	4682      	mov	sl, r0
 800765e:	2800      	cmp	r0, #0
 8007660:	d13c      	bne.n	80076dc <_dtoa_r+0x2ec>
 8007662:	4b1b      	ldr	r3, [pc, #108]	@ (80076d0 <_dtoa_r+0x2e0>)
 8007664:	4602      	mov	r2, r0
 8007666:	f240 11af 	movw	r1, #431	@ 0x1af
 800766a:	e6d8      	b.n	800741e <_dtoa_r+0x2e>
 800766c:	2301      	movs	r3, #1
 800766e:	e7e0      	b.n	8007632 <_dtoa_r+0x242>
 8007670:	2401      	movs	r4, #1
 8007672:	2300      	movs	r3, #0
 8007674:	9309      	str	r3, [sp, #36]	@ 0x24
 8007676:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	2200      	movs	r2, #0
 8007682:	2312      	movs	r3, #18
 8007684:	e7d0      	b.n	8007628 <_dtoa_r+0x238>
 8007686:	2301      	movs	r3, #1
 8007688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800768a:	e7f5      	b.n	8007678 <_dtoa_r+0x288>
 800768c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	e7d7      	b.n	8007644 <_dtoa_r+0x254>
 8007694:	3101      	adds	r1, #1
 8007696:	0052      	lsls	r2, r2, #1
 8007698:	e7d8      	b.n	800764c <_dtoa_r+0x25c>
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w
 80076a0:	636f4361 	.word	0x636f4361
 80076a4:	3fd287a7 	.word	0x3fd287a7
 80076a8:	8b60c8b3 	.word	0x8b60c8b3
 80076ac:	3fc68a28 	.word	0x3fc68a28
 80076b0:	509f79fb 	.word	0x509f79fb
 80076b4:	3fd34413 	.word	0x3fd34413
 80076b8:	08009f7e 	.word	0x08009f7e
 80076bc:	08009f95 	.word	0x08009f95
 80076c0:	7ff00000 	.word	0x7ff00000
 80076c4:	08009ded 	.word	0x08009ded
 80076c8:	3ff80000 	.word	0x3ff80000
 80076cc:	0800a100 	.word	0x0800a100
 80076d0:	08009fed 	.word	0x08009fed
 80076d4:	08009f7a 	.word	0x08009f7a
 80076d8:	08009dec 	.word	0x08009dec
 80076dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076e0:	6018      	str	r0, [r3, #0]
 80076e2:	9b07      	ldr	r3, [sp, #28]
 80076e4:	2b0e      	cmp	r3, #14
 80076e6:	f200 80a4 	bhi.w	8007832 <_dtoa_r+0x442>
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	f000 80a1 	beq.w	8007832 <_dtoa_r+0x442>
 80076f0:	2f00      	cmp	r7, #0
 80076f2:	dd33      	ble.n	800775c <_dtoa_r+0x36c>
 80076f4:	4bad      	ldr	r3, [pc, #692]	@ (80079ac <_dtoa_r+0x5bc>)
 80076f6:	f007 020f 	and.w	r2, r7, #15
 80076fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076fe:	ed93 7b00 	vldr	d7, [r3]
 8007702:	05f8      	lsls	r0, r7, #23
 8007704:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007708:	ea4f 1427 	mov.w	r4, r7, asr #4
 800770c:	d516      	bpl.n	800773c <_dtoa_r+0x34c>
 800770e:	4ba8      	ldr	r3, [pc, #672]	@ (80079b0 <_dtoa_r+0x5c0>)
 8007710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007718:	f7f9 f8b0 	bl	800087c <__aeabi_ddiv>
 800771c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007720:	f004 040f 	and.w	r4, r4, #15
 8007724:	2603      	movs	r6, #3
 8007726:	4da2      	ldr	r5, [pc, #648]	@ (80079b0 <_dtoa_r+0x5c0>)
 8007728:	b954      	cbnz	r4, 8007740 <_dtoa_r+0x350>
 800772a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800772e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007732:	f7f9 f8a3 	bl	800087c <__aeabi_ddiv>
 8007736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800773a:	e028      	b.n	800778e <_dtoa_r+0x39e>
 800773c:	2602      	movs	r6, #2
 800773e:	e7f2      	b.n	8007726 <_dtoa_r+0x336>
 8007740:	07e1      	lsls	r1, r4, #31
 8007742:	d508      	bpl.n	8007756 <_dtoa_r+0x366>
 8007744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800774c:	f7f8 ff6c 	bl	8000628 <__aeabi_dmul>
 8007750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007754:	3601      	adds	r6, #1
 8007756:	1064      	asrs	r4, r4, #1
 8007758:	3508      	adds	r5, #8
 800775a:	e7e5      	b.n	8007728 <_dtoa_r+0x338>
 800775c:	f000 80d2 	beq.w	8007904 <_dtoa_r+0x514>
 8007760:	427c      	negs	r4, r7
 8007762:	4b92      	ldr	r3, [pc, #584]	@ (80079ac <_dtoa_r+0x5bc>)
 8007764:	4d92      	ldr	r5, [pc, #584]	@ (80079b0 <_dtoa_r+0x5c0>)
 8007766:	f004 020f 	and.w	r2, r4, #15
 800776a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007776:	f7f8 ff57 	bl	8000628 <__aeabi_dmul>
 800777a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800777e:	1124      	asrs	r4, r4, #4
 8007780:	2300      	movs	r3, #0
 8007782:	2602      	movs	r6, #2
 8007784:	2c00      	cmp	r4, #0
 8007786:	f040 80b2 	bne.w	80078ee <_dtoa_r+0x4fe>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1d3      	bne.n	8007736 <_dtoa_r+0x346>
 800778e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007790:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80b7 	beq.w	8007908 <_dtoa_r+0x518>
 800779a:	4b86      	ldr	r3, [pc, #536]	@ (80079b4 <_dtoa_r+0x5c4>)
 800779c:	2200      	movs	r2, #0
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f9 f9b3 	bl	8000b0c <__aeabi_dcmplt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f000 80ae 	beq.w	8007908 <_dtoa_r+0x518>
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80aa 	beq.w	8007908 <_dtoa_r+0x518>
 80077b4:	9b00      	ldr	r3, [sp, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dd37      	ble.n	800782a <_dtoa_r+0x43a>
 80077ba:	1e7b      	subs	r3, r7, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	4620      	mov	r0, r4
 80077c0:	4b7d      	ldr	r3, [pc, #500]	@ (80079b8 <_dtoa_r+0x5c8>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	4629      	mov	r1, r5
 80077c6:	f7f8 ff2f 	bl	8000628 <__aeabi_dmul>
 80077ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ce:	9c00      	ldr	r4, [sp, #0]
 80077d0:	3601      	adds	r6, #1
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7f8 febe 	bl	8000554 <__aeabi_i2d>
 80077d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077dc:	f7f8 ff24 	bl	8000628 <__aeabi_dmul>
 80077e0:	4b76      	ldr	r3, [pc, #472]	@ (80079bc <_dtoa_r+0x5cc>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	f7f8 fd6a 	bl	80002bc <__adddf3>
 80077e8:	4605      	mov	r5, r0
 80077ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077ee:	2c00      	cmp	r4, #0
 80077f0:	f040 808d 	bne.w	800790e <_dtoa_r+0x51e>
 80077f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f8:	4b71      	ldr	r3, [pc, #452]	@ (80079c0 <_dtoa_r+0x5d0>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	f7f8 fd5c 	bl	80002b8 <__aeabi_dsub>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007808:	462a      	mov	r2, r5
 800780a:	4633      	mov	r3, r6
 800780c:	f7f9 f99c 	bl	8000b48 <__aeabi_dcmpgt>
 8007810:	2800      	cmp	r0, #0
 8007812:	f040 828b 	bne.w	8007d2c <_dtoa_r+0x93c>
 8007816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800781a:	462a      	mov	r2, r5
 800781c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007820:	f7f9 f974 	bl	8000b0c <__aeabi_dcmplt>
 8007824:	2800      	cmp	r0, #0
 8007826:	f040 8128 	bne.w	8007a7a <_dtoa_r+0x68a>
 800782a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800782e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007834:	2b00      	cmp	r3, #0
 8007836:	f2c0 815a 	blt.w	8007aee <_dtoa_r+0x6fe>
 800783a:	2f0e      	cmp	r7, #14
 800783c:	f300 8157 	bgt.w	8007aee <_dtoa_r+0x6fe>
 8007840:	4b5a      	ldr	r3, [pc, #360]	@ (80079ac <_dtoa_r+0x5bc>)
 8007842:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007846:	ed93 7b00 	vldr	d7, [r3]
 800784a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800784c:	2b00      	cmp	r3, #0
 800784e:	ed8d 7b00 	vstr	d7, [sp]
 8007852:	da03      	bge.n	800785c <_dtoa_r+0x46c>
 8007854:	9b07      	ldr	r3, [sp, #28]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f340 8101 	ble.w	8007a5e <_dtoa_r+0x66e>
 800785c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007860:	4656      	mov	r6, sl
 8007862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f9 f807 	bl	800087c <__aeabi_ddiv>
 800786e:	f7f9 f98b 	bl	8000b88 <__aeabi_d2iz>
 8007872:	4680      	mov	r8, r0
 8007874:	f7f8 fe6e 	bl	8000554 <__aeabi_i2d>
 8007878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800787c:	f7f8 fed4 	bl	8000628 <__aeabi_dmul>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800788c:	f7f8 fd14 	bl	80002b8 <__aeabi_dsub>
 8007890:	f806 4b01 	strb.w	r4, [r6], #1
 8007894:	9d07      	ldr	r5, [sp, #28]
 8007896:	eba6 040a 	sub.w	r4, r6, sl
 800789a:	42a5      	cmp	r5, r4
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	f040 8117 	bne.w	8007ad2 <_dtoa_r+0x6e2>
 80078a4:	f7f8 fd0a 	bl	80002bc <__adddf3>
 80078a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ac:	4604      	mov	r4, r0
 80078ae:	460d      	mov	r5, r1
 80078b0:	f7f9 f94a 	bl	8000b48 <__aeabi_dcmpgt>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f040 80f9 	bne.w	8007aac <_dtoa_r+0x6bc>
 80078ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f9 f919 	bl	8000af8 <__aeabi_dcmpeq>
 80078c6:	b118      	cbz	r0, 80078d0 <_dtoa_r+0x4e0>
 80078c8:	f018 0f01 	tst.w	r8, #1
 80078cc:	f040 80ee 	bne.w	8007aac <_dtoa_r+0x6bc>
 80078d0:	4649      	mov	r1, r9
 80078d2:	4658      	mov	r0, fp
 80078d4:	f001 f994 	bl	8008c00 <_Bfree>
 80078d8:	2300      	movs	r3, #0
 80078da:	7033      	strb	r3, [r6, #0]
 80078dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078de:	3701      	adds	r7, #1
 80078e0:	601f      	str	r7, [r3, #0]
 80078e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 831d 	beq.w	8007f24 <_dtoa_r+0xb34>
 80078ea:	601e      	str	r6, [r3, #0]
 80078ec:	e31a      	b.n	8007f24 <_dtoa_r+0xb34>
 80078ee:	07e2      	lsls	r2, r4, #31
 80078f0:	d505      	bpl.n	80078fe <_dtoa_r+0x50e>
 80078f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078f6:	f7f8 fe97 	bl	8000628 <__aeabi_dmul>
 80078fa:	3601      	adds	r6, #1
 80078fc:	2301      	movs	r3, #1
 80078fe:	1064      	asrs	r4, r4, #1
 8007900:	3508      	adds	r5, #8
 8007902:	e73f      	b.n	8007784 <_dtoa_r+0x394>
 8007904:	2602      	movs	r6, #2
 8007906:	e742      	b.n	800778e <_dtoa_r+0x39e>
 8007908:	9c07      	ldr	r4, [sp, #28]
 800790a:	9704      	str	r7, [sp, #16]
 800790c:	e761      	b.n	80077d2 <_dtoa_r+0x3e2>
 800790e:	4b27      	ldr	r3, [pc, #156]	@ (80079ac <_dtoa_r+0x5bc>)
 8007910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007916:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800791a:	4454      	add	r4, sl
 800791c:	2900      	cmp	r1, #0
 800791e:	d053      	beq.n	80079c8 <_dtoa_r+0x5d8>
 8007920:	4928      	ldr	r1, [pc, #160]	@ (80079c4 <_dtoa_r+0x5d4>)
 8007922:	2000      	movs	r0, #0
 8007924:	f7f8 ffaa 	bl	800087c <__aeabi_ddiv>
 8007928:	4633      	mov	r3, r6
 800792a:	462a      	mov	r2, r5
 800792c:	f7f8 fcc4 	bl	80002b8 <__aeabi_dsub>
 8007930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007934:	4656      	mov	r6, sl
 8007936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793a:	f7f9 f925 	bl	8000b88 <__aeabi_d2iz>
 800793e:	4605      	mov	r5, r0
 8007940:	f7f8 fe08 	bl	8000554 <__aeabi_i2d>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794c:	f7f8 fcb4 	bl	80002b8 <__aeabi_dsub>
 8007950:	3530      	adds	r5, #48	@ 0x30
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800795a:	f806 5b01 	strb.w	r5, [r6], #1
 800795e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007962:	f7f9 f8d3 	bl	8000b0c <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	d171      	bne.n	8007a4e <_dtoa_r+0x65e>
 800796a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800796e:	4911      	ldr	r1, [pc, #68]	@ (80079b4 <_dtoa_r+0x5c4>)
 8007970:	2000      	movs	r0, #0
 8007972:	f7f8 fca1 	bl	80002b8 <__aeabi_dsub>
 8007976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800797a:	f7f9 f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800797e:	2800      	cmp	r0, #0
 8007980:	f040 8095 	bne.w	8007aae <_dtoa_r+0x6be>
 8007984:	42a6      	cmp	r6, r4
 8007986:	f43f af50 	beq.w	800782a <_dtoa_r+0x43a>
 800798a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800798e:	4b0a      	ldr	r3, [pc, #40]	@ (80079b8 <_dtoa_r+0x5c8>)
 8007990:	2200      	movs	r2, #0
 8007992:	f7f8 fe49 	bl	8000628 <__aeabi_dmul>
 8007996:	4b08      	ldr	r3, [pc, #32]	@ (80079b8 <_dtoa_r+0x5c8>)
 8007998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800799c:	2200      	movs	r2, #0
 800799e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a2:	f7f8 fe41 	bl	8000628 <__aeabi_dmul>
 80079a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079aa:	e7c4      	b.n	8007936 <_dtoa_r+0x546>
 80079ac:	0800a100 	.word	0x0800a100
 80079b0:	0800a0d8 	.word	0x0800a0d8
 80079b4:	3ff00000 	.word	0x3ff00000
 80079b8:	40240000 	.word	0x40240000
 80079bc:	401c0000 	.word	0x401c0000
 80079c0:	40140000 	.word	0x40140000
 80079c4:	3fe00000 	.word	0x3fe00000
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	f7f8 fe2c 	bl	8000628 <__aeabi_dmul>
 80079d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80079d6:	4656      	mov	r6, sl
 80079d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079dc:	f7f9 f8d4 	bl	8000b88 <__aeabi_d2iz>
 80079e0:	4605      	mov	r5, r0
 80079e2:	f7f8 fdb7 	bl	8000554 <__aeabi_i2d>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ee:	f7f8 fc63 	bl	80002b8 <__aeabi_dsub>
 80079f2:	3530      	adds	r5, #48	@ 0x30
 80079f4:	f806 5b01 	strb.w	r5, [r6], #1
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	42a6      	cmp	r6, r4
 80079fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	d124      	bne.n	8007a52 <_dtoa_r+0x662>
 8007a08:	4bac      	ldr	r3, [pc, #688]	@ (8007cbc <_dtoa_r+0x8cc>)
 8007a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a0e:	f7f8 fc55 	bl	80002bc <__adddf3>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a1a:	f7f9 f895 	bl	8000b48 <__aeabi_dcmpgt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d145      	bne.n	8007aae <_dtoa_r+0x6be>
 8007a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a26:	49a5      	ldr	r1, [pc, #660]	@ (8007cbc <_dtoa_r+0x8cc>)
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7f8 fc45 	bl	80002b8 <__aeabi_dsub>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a36:	f7f9 f869 	bl	8000b0c <__aeabi_dcmplt>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f43f aef5 	beq.w	800782a <_dtoa_r+0x43a>
 8007a40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007a42:	1e73      	subs	r3, r6, #1
 8007a44:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a4a:	2b30      	cmp	r3, #48	@ 0x30
 8007a4c:	d0f8      	beq.n	8007a40 <_dtoa_r+0x650>
 8007a4e:	9f04      	ldr	r7, [sp, #16]
 8007a50:	e73e      	b.n	80078d0 <_dtoa_r+0x4e0>
 8007a52:	4b9b      	ldr	r3, [pc, #620]	@ (8007cc0 <_dtoa_r+0x8d0>)
 8007a54:	f7f8 fde8 	bl	8000628 <__aeabi_dmul>
 8007a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a5c:	e7bc      	b.n	80079d8 <_dtoa_r+0x5e8>
 8007a5e:	d10c      	bne.n	8007a7a <_dtoa_r+0x68a>
 8007a60:	4b98      	ldr	r3, [pc, #608]	@ (8007cc4 <_dtoa_r+0x8d4>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a68:	f7f8 fdde 	bl	8000628 <__aeabi_dmul>
 8007a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a70:	f7f9 f860 	bl	8000b34 <__aeabi_dcmpge>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f000 8157 	beq.w	8007d28 <_dtoa_r+0x938>
 8007a7a:	2400      	movs	r4, #0
 8007a7c:	4625      	mov	r5, r4
 8007a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a80:	43db      	mvns	r3, r3
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	4656      	mov	r6, sl
 8007a86:	2700      	movs	r7, #0
 8007a88:	4621      	mov	r1, r4
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f001 f8b8 	bl	8008c00 <_Bfree>
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	d0dc      	beq.n	8007a4e <_dtoa_r+0x65e>
 8007a94:	b12f      	cbz	r7, 8007aa2 <_dtoa_r+0x6b2>
 8007a96:	42af      	cmp	r7, r5
 8007a98:	d003      	beq.n	8007aa2 <_dtoa_r+0x6b2>
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	f001 f8af 	bl	8008c00 <_Bfree>
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4658      	mov	r0, fp
 8007aa6:	f001 f8ab 	bl	8008c00 <_Bfree>
 8007aaa:	e7d0      	b.n	8007a4e <_dtoa_r+0x65e>
 8007aac:	9704      	str	r7, [sp, #16]
 8007aae:	4633      	mov	r3, r6
 8007ab0:	461e      	mov	r6, r3
 8007ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ab6:	2a39      	cmp	r2, #57	@ 0x39
 8007ab8:	d107      	bne.n	8007aca <_dtoa_r+0x6da>
 8007aba:	459a      	cmp	sl, r3
 8007abc:	d1f8      	bne.n	8007ab0 <_dtoa_r+0x6c0>
 8007abe:	9a04      	ldr	r2, [sp, #16]
 8007ac0:	3201      	adds	r2, #1
 8007ac2:	9204      	str	r2, [sp, #16]
 8007ac4:	2230      	movs	r2, #48	@ 0x30
 8007ac6:	f88a 2000 	strb.w	r2, [sl]
 8007aca:	781a      	ldrb	r2, [r3, #0]
 8007acc:	3201      	adds	r2, #1
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e7bd      	b.n	8007a4e <_dtoa_r+0x65e>
 8007ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8007cc0 <_dtoa_r+0x8d0>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f7f8 fda7 	bl	8000628 <__aeabi_dmul>
 8007ada:	2200      	movs	r2, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	f7f9 f809 	bl	8000af8 <__aeabi_dcmpeq>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f43f aebb 	beq.w	8007862 <_dtoa_r+0x472>
 8007aec:	e6f0      	b.n	80078d0 <_dtoa_r+0x4e0>
 8007aee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007af0:	2a00      	cmp	r2, #0
 8007af2:	f000 80db 	beq.w	8007cac <_dtoa_r+0x8bc>
 8007af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007af8:	2a01      	cmp	r2, #1
 8007afa:	f300 80bf 	bgt.w	8007c7c <_dtoa_r+0x88c>
 8007afe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	f000 80b7 	beq.w	8007c74 <_dtoa_r+0x884>
 8007b06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007b0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b0c:	4646      	mov	r6, r8
 8007b0e:	9a08      	ldr	r2, [sp, #32]
 8007b10:	2101      	movs	r1, #1
 8007b12:	441a      	add	r2, r3
 8007b14:	4658      	mov	r0, fp
 8007b16:	4498      	add	r8, r3
 8007b18:	9208      	str	r2, [sp, #32]
 8007b1a:	f001 f96f 	bl	8008dfc <__i2b>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b15e      	cbz	r6, 8007b3a <_dtoa_r+0x74a>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dd08      	ble.n	8007b3a <_dtoa_r+0x74a>
 8007b28:	42b3      	cmp	r3, r6
 8007b2a:	9a08      	ldr	r2, [sp, #32]
 8007b2c:	bfa8      	it	ge
 8007b2e:	4633      	movge	r3, r6
 8007b30:	eba8 0803 	sub.w	r8, r8, r3
 8007b34:	1af6      	subs	r6, r6, r3
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	9308      	str	r3, [sp, #32]
 8007b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b3c:	b1f3      	cbz	r3, 8007b7c <_dtoa_r+0x78c>
 8007b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80b7 	beq.w	8007cb4 <_dtoa_r+0x8c4>
 8007b46:	b18c      	cbz	r4, 8007b6c <_dtoa_r+0x77c>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f001 fa15 	bl	8008f7c <__pow5mult>
 8007b52:	464a      	mov	r2, r9
 8007b54:	4601      	mov	r1, r0
 8007b56:	4605      	mov	r5, r0
 8007b58:	4658      	mov	r0, fp
 8007b5a:	f001 f965 	bl	8008e28 <__multiply>
 8007b5e:	4649      	mov	r1, r9
 8007b60:	9004      	str	r0, [sp, #16]
 8007b62:	4658      	mov	r0, fp
 8007b64:	f001 f84c 	bl	8008c00 <_Bfree>
 8007b68:	9b04      	ldr	r3, [sp, #16]
 8007b6a:	4699      	mov	r9, r3
 8007b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b6e:	1b1a      	subs	r2, r3, r4
 8007b70:	d004      	beq.n	8007b7c <_dtoa_r+0x78c>
 8007b72:	4649      	mov	r1, r9
 8007b74:	4658      	mov	r0, fp
 8007b76:	f001 fa01 	bl	8008f7c <__pow5mult>
 8007b7a:	4681      	mov	r9, r0
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	4658      	mov	r0, fp
 8007b80:	f001 f93c 	bl	8008dfc <__i2b>
 8007b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b86:	4604      	mov	r4, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 81cf 	beq.w	8007f2c <_dtoa_r+0xb3c>
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4601      	mov	r1, r0
 8007b92:	4658      	mov	r0, fp
 8007b94:	f001 f9f2 	bl	8008f7c <__pow5mult>
 8007b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	f300 8095 	bgt.w	8007ccc <_dtoa_r+0x8dc>
 8007ba2:	9b02      	ldr	r3, [sp, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f040 8087 	bne.w	8007cb8 <_dtoa_r+0x8c8>
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 8089 	bne.w	8007cc8 <_dtoa_r+0x8d8>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bbc:	0d1b      	lsrs	r3, r3, #20
 8007bbe:	051b      	lsls	r3, r3, #20
 8007bc0:	b12b      	cbz	r3, 8007bce <_dtoa_r+0x7de>
 8007bc2:	9b08      	ldr	r3, [sp, #32]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	9308      	str	r3, [sp, #32]
 8007bc8:	f108 0801 	add.w	r8, r8, #1
 8007bcc:	2301      	movs	r3, #1
 8007bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 81b0 	beq.w	8007f38 <_dtoa_r+0xb48>
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bde:	6918      	ldr	r0, [r3, #16]
 8007be0:	f001 f8c0 	bl	8008d64 <__hi0bits>
 8007be4:	f1c0 0020 	rsb	r0, r0, #32
 8007be8:	9b08      	ldr	r3, [sp, #32]
 8007bea:	4418      	add	r0, r3
 8007bec:	f010 001f 	ands.w	r0, r0, #31
 8007bf0:	d077      	beq.n	8007ce2 <_dtoa_r+0x8f2>
 8007bf2:	f1c0 0320 	rsb	r3, r0, #32
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	dd6b      	ble.n	8007cd2 <_dtoa_r+0x8e2>
 8007bfa:	9b08      	ldr	r3, [sp, #32]
 8007bfc:	f1c0 001c 	rsb	r0, r0, #28
 8007c00:	4403      	add	r3, r0
 8007c02:	4480      	add	r8, r0
 8007c04:	4406      	add	r6, r0
 8007c06:	9308      	str	r3, [sp, #32]
 8007c08:	f1b8 0f00 	cmp.w	r8, #0
 8007c0c:	dd05      	ble.n	8007c1a <_dtoa_r+0x82a>
 8007c0e:	4649      	mov	r1, r9
 8007c10:	4642      	mov	r2, r8
 8007c12:	4658      	mov	r0, fp
 8007c14:	f001 fa0c 	bl	8009030 <__lshift>
 8007c18:	4681      	mov	r9, r0
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dd05      	ble.n	8007c2c <_dtoa_r+0x83c>
 8007c20:	4621      	mov	r1, r4
 8007c22:	461a      	mov	r2, r3
 8007c24:	4658      	mov	r0, fp
 8007c26:	f001 fa03 	bl	8009030 <__lshift>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d059      	beq.n	8007ce6 <_dtoa_r+0x8f6>
 8007c32:	4621      	mov	r1, r4
 8007c34:	4648      	mov	r0, r9
 8007c36:	f001 fa67 	bl	8009108 <__mcmp>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	da53      	bge.n	8007ce6 <_dtoa_r+0x8f6>
 8007c3e:	1e7b      	subs	r3, r7, #1
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	4649      	mov	r1, r9
 8007c44:	2300      	movs	r3, #0
 8007c46:	220a      	movs	r2, #10
 8007c48:	4658      	mov	r0, fp
 8007c4a:	f000 fffb 	bl	8008c44 <__multadd>
 8007c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c50:	4681      	mov	r9, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8172 	beq.w	8007f3c <_dtoa_r+0xb4c>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	220a      	movs	r2, #10
 8007c5e:	4658      	mov	r0, fp
 8007c60:	f000 fff0 	bl	8008c44 <__multadd>
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	4605      	mov	r5, r0
 8007c6a:	dc67      	bgt.n	8007d3c <_dtoa_r+0x94c>
 8007c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	dc41      	bgt.n	8007cf6 <_dtoa_r+0x906>
 8007c72:	e063      	b.n	8007d3c <_dtoa_r+0x94c>
 8007c74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c7a:	e746      	b.n	8007b0a <_dtoa_r+0x71a>
 8007c7c:	9b07      	ldr	r3, [sp, #28]
 8007c7e:	1e5c      	subs	r4, r3, #1
 8007c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	bfbf      	itttt	lt
 8007c86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c8c:	1ae3      	sublt	r3, r4, r3
 8007c8e:	bfb4      	ite	lt
 8007c90:	18d2      	addlt	r2, r2, r3
 8007c92:	1b1c      	subge	r4, r3, r4
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	bfbc      	itt	lt
 8007c98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c9a:	2400      	movlt	r4, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfb5      	itete	lt
 8007ca0:	eba8 0603 	sublt.w	r6, r8, r3
 8007ca4:	9b07      	ldrge	r3, [sp, #28]
 8007ca6:	2300      	movlt	r3, #0
 8007ca8:	4646      	movge	r6, r8
 8007caa:	e730      	b.n	8007b0e <_dtoa_r+0x71e>
 8007cac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007cae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007cb0:	4646      	mov	r6, r8
 8007cb2:	e735      	b.n	8007b20 <_dtoa_r+0x730>
 8007cb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cb6:	e75c      	b.n	8007b72 <_dtoa_r+0x782>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e788      	b.n	8007bce <_dtoa_r+0x7de>
 8007cbc:	3fe00000 	.word	0x3fe00000
 8007cc0:	40240000 	.word	0x40240000
 8007cc4:	40140000 	.word	0x40140000
 8007cc8:	9b02      	ldr	r3, [sp, #8]
 8007cca:	e780      	b.n	8007bce <_dtoa_r+0x7de>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cd0:	e782      	b.n	8007bd8 <_dtoa_r+0x7e8>
 8007cd2:	d099      	beq.n	8007c08 <_dtoa_r+0x818>
 8007cd4:	9a08      	ldr	r2, [sp, #32]
 8007cd6:	331c      	adds	r3, #28
 8007cd8:	441a      	add	r2, r3
 8007cda:	4498      	add	r8, r3
 8007cdc:	441e      	add	r6, r3
 8007cde:	9208      	str	r2, [sp, #32]
 8007ce0:	e792      	b.n	8007c08 <_dtoa_r+0x818>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	e7f6      	b.n	8007cd4 <_dtoa_r+0x8e4>
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	9704      	str	r7, [sp, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc20      	bgt.n	8007d30 <_dtoa_r+0x940>
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	dd1e      	ble.n	8007d34 <_dtoa_r+0x944>
 8007cf6:	9b00      	ldr	r3, [sp, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f47f aec0 	bne.w	8007a7e <_dtoa_r+0x68e>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	2205      	movs	r2, #5
 8007d02:	4658      	mov	r0, fp
 8007d04:	f000 ff9e 	bl	8008c44 <__multadd>
 8007d08:	4601      	mov	r1, r0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4648      	mov	r0, r9
 8007d0e:	f001 f9fb 	bl	8009108 <__mcmp>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f77f aeb3 	ble.w	8007a7e <_dtoa_r+0x68e>
 8007d18:	4656      	mov	r6, sl
 8007d1a:	2331      	movs	r3, #49	@ 0x31
 8007d1c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	3301      	adds	r3, #1
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	e6ae      	b.n	8007a86 <_dtoa_r+0x696>
 8007d28:	9c07      	ldr	r4, [sp, #28]
 8007d2a:	9704      	str	r7, [sp, #16]
 8007d2c:	4625      	mov	r5, r4
 8007d2e:	e7f3      	b.n	8007d18 <_dtoa_r+0x928>
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 8104 	beq.w	8007f44 <_dtoa_r+0xb54>
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	dd05      	ble.n	8007d4c <_dtoa_r+0x95c>
 8007d40:	4629      	mov	r1, r5
 8007d42:	4632      	mov	r2, r6
 8007d44:	4658      	mov	r0, fp
 8007d46:	f001 f973 	bl	8009030 <__lshift>
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d05a      	beq.n	8007e08 <_dtoa_r+0xa18>
 8007d52:	6869      	ldr	r1, [r5, #4]
 8007d54:	4658      	mov	r0, fp
 8007d56:	f000 ff13 	bl	8008b80 <_Balloc>
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	b928      	cbnz	r0, 8007d6a <_dtoa_r+0x97a>
 8007d5e:	4b84      	ldr	r3, [pc, #528]	@ (8007f70 <_dtoa_r+0xb80>)
 8007d60:	4602      	mov	r2, r0
 8007d62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d66:	f7ff bb5a 	b.w	800741e <_dtoa_r+0x2e>
 8007d6a:	692a      	ldr	r2, [r5, #16]
 8007d6c:	3202      	adds	r2, #2
 8007d6e:	0092      	lsls	r2, r2, #2
 8007d70:	f105 010c 	add.w	r1, r5, #12
 8007d74:	300c      	adds	r0, #12
 8007d76:	f7ff fa92 	bl	800729e <memcpy>
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f001 f956 	bl	8009030 <__lshift>
 8007d84:	f10a 0301 	add.w	r3, sl, #1
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	9b00      	ldr	r3, [sp, #0]
 8007d8c:	4453      	add	r3, sl
 8007d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	462f      	mov	r7, r5
 8007d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	9b07      	ldr	r3, [sp, #28]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	3b01      	subs	r3, #1
 8007da2:	4648      	mov	r0, r9
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	f7ff fa99 	bl	80072dc <quorem>
 8007daa:	4639      	mov	r1, r7
 8007dac:	9002      	str	r0, [sp, #8]
 8007dae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007db2:	4648      	mov	r0, r9
 8007db4:	f001 f9a8 	bl	8009108 <__mcmp>
 8007db8:	462a      	mov	r2, r5
 8007dba:	9008      	str	r0, [sp, #32]
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f001 f9be 	bl	8009140 <__mdiff>
 8007dc4:	68c2      	ldr	r2, [r0, #12]
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	bb02      	cbnz	r2, 8007e0c <_dtoa_r+0xa1c>
 8007dca:	4601      	mov	r1, r0
 8007dcc:	4648      	mov	r0, r9
 8007dce:	f001 f99b 	bl	8009108 <__mcmp>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4658      	mov	r0, fp
 8007dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dda:	f000 ff11 	bl	8008c00 <_Bfree>
 8007dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007de2:	9e07      	ldr	r6, [sp, #28]
 8007de4:	ea43 0102 	orr.w	r1, r3, r2
 8007de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dea:	4319      	orrs	r1, r3
 8007dec:	d110      	bne.n	8007e10 <_dtoa_r+0xa20>
 8007dee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007df2:	d029      	beq.n	8007e48 <_dtoa_r+0xa58>
 8007df4:	9b08      	ldr	r3, [sp, #32]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dd02      	ble.n	8007e00 <_dtoa_r+0xa10>
 8007dfa:	9b02      	ldr	r3, [sp, #8]
 8007dfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	f883 8000 	strb.w	r8, [r3]
 8007e06:	e63f      	b.n	8007a88 <_dtoa_r+0x698>
 8007e08:	4628      	mov	r0, r5
 8007e0a:	e7bb      	b.n	8007d84 <_dtoa_r+0x994>
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	e7e1      	b.n	8007dd4 <_dtoa_r+0x9e4>
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	db04      	blt.n	8007e20 <_dtoa_r+0xa30>
 8007e16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e18:	430b      	orrs	r3, r1
 8007e1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	d120      	bne.n	8007e62 <_dtoa_r+0xa72>
 8007e20:	2a00      	cmp	r2, #0
 8007e22:	dded      	ble.n	8007e00 <_dtoa_r+0xa10>
 8007e24:	4649      	mov	r1, r9
 8007e26:	2201      	movs	r2, #1
 8007e28:	4658      	mov	r0, fp
 8007e2a:	f001 f901 	bl	8009030 <__lshift>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4681      	mov	r9, r0
 8007e32:	f001 f969 	bl	8009108 <__mcmp>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	dc03      	bgt.n	8007e42 <_dtoa_r+0xa52>
 8007e3a:	d1e1      	bne.n	8007e00 <_dtoa_r+0xa10>
 8007e3c:	f018 0f01 	tst.w	r8, #1
 8007e40:	d0de      	beq.n	8007e00 <_dtoa_r+0xa10>
 8007e42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e46:	d1d8      	bne.n	8007dfa <_dtoa_r+0xa0a>
 8007e48:	9a00      	ldr	r2, [sp, #0]
 8007e4a:	2339      	movs	r3, #57	@ 0x39
 8007e4c:	7013      	strb	r3, [r2, #0]
 8007e4e:	4633      	mov	r3, r6
 8007e50:	461e      	mov	r6, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e58:	2a39      	cmp	r2, #57	@ 0x39
 8007e5a:	d052      	beq.n	8007f02 <_dtoa_r+0xb12>
 8007e5c:	3201      	adds	r2, #1
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	e612      	b.n	8007a88 <_dtoa_r+0x698>
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	dd07      	ble.n	8007e76 <_dtoa_r+0xa86>
 8007e66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e6a:	d0ed      	beq.n	8007e48 <_dtoa_r+0xa58>
 8007e6c:	9a00      	ldr	r2, [sp, #0]
 8007e6e:	f108 0301 	add.w	r3, r8, #1
 8007e72:	7013      	strb	r3, [r2, #0]
 8007e74:	e608      	b.n	8007a88 <_dtoa_r+0x698>
 8007e76:	9b07      	ldr	r3, [sp, #28]
 8007e78:	9a07      	ldr	r2, [sp, #28]
 8007e7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d028      	beq.n	8007ed6 <_dtoa_r+0xae6>
 8007e84:	4649      	mov	r1, r9
 8007e86:	2300      	movs	r3, #0
 8007e88:	220a      	movs	r2, #10
 8007e8a:	4658      	mov	r0, fp
 8007e8c:	f000 feda 	bl	8008c44 <__multadd>
 8007e90:	42af      	cmp	r7, r5
 8007e92:	4681      	mov	r9, r0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	f04f 020a 	mov.w	r2, #10
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	d107      	bne.n	8007eb2 <_dtoa_r+0xac2>
 8007ea2:	f000 fecf 	bl	8008c44 <__multadd>
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	9b07      	ldr	r3, [sp, #28]
 8007eac:	3301      	adds	r3, #1
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	e774      	b.n	8007d9c <_dtoa_r+0x9ac>
 8007eb2:	f000 fec7 	bl	8008c44 <__multadd>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4607      	mov	r7, r0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	220a      	movs	r2, #10
 8007ebe:	4658      	mov	r0, fp
 8007ec0:	f000 fec0 	bl	8008c44 <__multadd>
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	e7f0      	b.n	8007eaa <_dtoa_r+0xaba>
 8007ec8:	9b00      	ldr	r3, [sp, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bfcc      	ite	gt
 8007ece:	461e      	movgt	r6, r3
 8007ed0:	2601      	movle	r6, #1
 8007ed2:	4456      	add	r6, sl
 8007ed4:	2700      	movs	r7, #0
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	2201      	movs	r2, #1
 8007eda:	4658      	mov	r0, fp
 8007edc:	f001 f8a8 	bl	8009030 <__lshift>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4681      	mov	r9, r0
 8007ee4:	f001 f910 	bl	8009108 <__mcmp>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	dcb0      	bgt.n	8007e4e <_dtoa_r+0xa5e>
 8007eec:	d102      	bne.n	8007ef4 <_dtoa_r+0xb04>
 8007eee:	f018 0f01 	tst.w	r8, #1
 8007ef2:	d1ac      	bne.n	8007e4e <_dtoa_r+0xa5e>
 8007ef4:	4633      	mov	r3, r6
 8007ef6:	461e      	mov	r6, r3
 8007ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007efc:	2a30      	cmp	r2, #48	@ 0x30
 8007efe:	d0fa      	beq.n	8007ef6 <_dtoa_r+0xb06>
 8007f00:	e5c2      	b.n	8007a88 <_dtoa_r+0x698>
 8007f02:	459a      	cmp	sl, r3
 8007f04:	d1a4      	bne.n	8007e50 <_dtoa_r+0xa60>
 8007f06:	9b04      	ldr	r3, [sp, #16]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	2331      	movs	r3, #49	@ 0x31
 8007f0e:	f88a 3000 	strb.w	r3, [sl]
 8007f12:	e5b9      	b.n	8007a88 <_dtoa_r+0x698>
 8007f14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f74 <_dtoa_r+0xb84>
 8007f1a:	b11b      	cbz	r3, 8007f24 <_dtoa_r+0xb34>
 8007f1c:	f10a 0308 	add.w	r3, sl, #8
 8007f20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4650      	mov	r0, sl
 8007f26:	b019      	add	sp, #100	@ 0x64
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	f77f ae37 	ble.w	8007ba2 <_dtoa_r+0x7b2>
 8007f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f38:	2001      	movs	r0, #1
 8007f3a:	e655      	b.n	8007be8 <_dtoa_r+0x7f8>
 8007f3c:	9b00      	ldr	r3, [sp, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f77f aed6 	ble.w	8007cf0 <_dtoa_r+0x900>
 8007f44:	4656      	mov	r6, sl
 8007f46:	4621      	mov	r1, r4
 8007f48:	4648      	mov	r0, r9
 8007f4a:	f7ff f9c7 	bl	80072dc <quorem>
 8007f4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f52:	f806 8b01 	strb.w	r8, [r6], #1
 8007f56:	9b00      	ldr	r3, [sp, #0]
 8007f58:	eba6 020a 	sub.w	r2, r6, sl
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	ddb3      	ble.n	8007ec8 <_dtoa_r+0xad8>
 8007f60:	4649      	mov	r1, r9
 8007f62:	2300      	movs	r3, #0
 8007f64:	220a      	movs	r2, #10
 8007f66:	4658      	mov	r0, fp
 8007f68:	f000 fe6c 	bl	8008c44 <__multadd>
 8007f6c:	4681      	mov	r9, r0
 8007f6e:	e7ea      	b.n	8007f46 <_dtoa_r+0xb56>
 8007f70:	08009fed 	.word	0x08009fed
 8007f74:	08009f71 	.word	0x08009f71

08007f78 <rshift>:
 8007f78:	6903      	ldr	r3, [r0, #16]
 8007f7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f86:	f100 0414 	add.w	r4, r0, #20
 8007f8a:	dd45      	ble.n	8008018 <rshift+0xa0>
 8007f8c:	f011 011f 	ands.w	r1, r1, #31
 8007f90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f98:	d10c      	bne.n	8007fb4 <rshift+0x3c>
 8007f9a:	f100 0710 	add.w	r7, r0, #16
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	42b1      	cmp	r1, r6
 8007fa2:	d334      	bcc.n	800800e <rshift+0x96>
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	1eea      	subs	r2, r5, #3
 8007faa:	4296      	cmp	r6, r2
 8007fac:	bf38      	it	cc
 8007fae:	2300      	movcc	r3, #0
 8007fb0:	4423      	add	r3, r4
 8007fb2:	e015      	b.n	8007fe0 <rshift+0x68>
 8007fb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fb8:	f1c1 0820 	rsb	r8, r1, #32
 8007fbc:	40cf      	lsrs	r7, r1
 8007fbe:	f105 0e04 	add.w	lr, r5, #4
 8007fc2:	46a1      	mov	r9, r4
 8007fc4:	4576      	cmp	r6, lr
 8007fc6:	46f4      	mov	ip, lr
 8007fc8:	d815      	bhi.n	8007ff6 <rshift+0x7e>
 8007fca:	1a9a      	subs	r2, r3, r2
 8007fcc:	0092      	lsls	r2, r2, #2
 8007fce:	3a04      	subs	r2, #4
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	42ae      	cmp	r6, r5
 8007fd4:	bf38      	it	cc
 8007fd6:	2200      	movcc	r2, #0
 8007fd8:	18a3      	adds	r3, r4, r2
 8007fda:	50a7      	str	r7, [r4, r2]
 8007fdc:	b107      	cbz	r7, 8007fe0 <rshift+0x68>
 8007fde:	3304      	adds	r3, #4
 8007fe0:	1b1a      	subs	r2, r3, r4
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fe8:	bf08      	it	eq
 8007fea:	2300      	moveq	r3, #0
 8007fec:	6102      	str	r2, [r0, #16]
 8007fee:	bf08      	it	eq
 8007ff0:	6143      	streq	r3, [r0, #20]
 8007ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	f8dc c000 	ldr.w	ip, [ip]
 8007ffa:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ffe:	ea4c 0707 	orr.w	r7, ip, r7
 8008002:	f849 7b04 	str.w	r7, [r9], #4
 8008006:	f85e 7b04 	ldr.w	r7, [lr], #4
 800800a:	40cf      	lsrs	r7, r1
 800800c:	e7da      	b.n	8007fc4 <rshift+0x4c>
 800800e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008012:	f847 cf04 	str.w	ip, [r7, #4]!
 8008016:	e7c3      	b.n	8007fa0 <rshift+0x28>
 8008018:	4623      	mov	r3, r4
 800801a:	e7e1      	b.n	8007fe0 <rshift+0x68>

0800801c <__hexdig_fun>:
 800801c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008020:	2b09      	cmp	r3, #9
 8008022:	d802      	bhi.n	800802a <__hexdig_fun+0xe>
 8008024:	3820      	subs	r0, #32
 8008026:	b2c0      	uxtb	r0, r0
 8008028:	4770      	bx	lr
 800802a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800802e:	2b05      	cmp	r3, #5
 8008030:	d801      	bhi.n	8008036 <__hexdig_fun+0x1a>
 8008032:	3847      	subs	r0, #71	@ 0x47
 8008034:	e7f7      	b.n	8008026 <__hexdig_fun+0xa>
 8008036:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800803a:	2b05      	cmp	r3, #5
 800803c:	d801      	bhi.n	8008042 <__hexdig_fun+0x26>
 800803e:	3827      	subs	r0, #39	@ 0x27
 8008040:	e7f1      	b.n	8008026 <__hexdig_fun+0xa>
 8008042:	2000      	movs	r0, #0
 8008044:	4770      	bx	lr
	...

08008048 <__gethex>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	b085      	sub	sp, #20
 800804e:	468a      	mov	sl, r1
 8008050:	9302      	str	r3, [sp, #8]
 8008052:	680b      	ldr	r3, [r1, #0]
 8008054:	9001      	str	r0, [sp, #4]
 8008056:	4690      	mov	r8, r2
 8008058:	1c9c      	adds	r4, r3, #2
 800805a:	46a1      	mov	r9, r4
 800805c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008060:	2830      	cmp	r0, #48	@ 0x30
 8008062:	d0fa      	beq.n	800805a <__gethex+0x12>
 8008064:	eba9 0303 	sub.w	r3, r9, r3
 8008068:	f1a3 0b02 	sub.w	fp, r3, #2
 800806c:	f7ff ffd6 	bl	800801c <__hexdig_fun>
 8008070:	4605      	mov	r5, r0
 8008072:	2800      	cmp	r0, #0
 8008074:	d168      	bne.n	8008148 <__gethex+0x100>
 8008076:	49a0      	ldr	r1, [pc, #640]	@ (80082f8 <__gethex+0x2b0>)
 8008078:	2201      	movs	r2, #1
 800807a:	4648      	mov	r0, r9
 800807c:	f7ff f8c4 	bl	8007208 <strncmp>
 8008080:	4607      	mov	r7, r0
 8008082:	2800      	cmp	r0, #0
 8008084:	d167      	bne.n	8008156 <__gethex+0x10e>
 8008086:	f899 0001 	ldrb.w	r0, [r9, #1]
 800808a:	4626      	mov	r6, r4
 800808c:	f7ff ffc6 	bl	800801c <__hexdig_fun>
 8008090:	2800      	cmp	r0, #0
 8008092:	d062      	beq.n	800815a <__gethex+0x112>
 8008094:	4623      	mov	r3, r4
 8008096:	7818      	ldrb	r0, [r3, #0]
 8008098:	2830      	cmp	r0, #48	@ 0x30
 800809a:	4699      	mov	r9, r3
 800809c:	f103 0301 	add.w	r3, r3, #1
 80080a0:	d0f9      	beq.n	8008096 <__gethex+0x4e>
 80080a2:	f7ff ffbb 	bl	800801c <__hexdig_fun>
 80080a6:	fab0 f580 	clz	r5, r0
 80080aa:	096d      	lsrs	r5, r5, #5
 80080ac:	f04f 0b01 	mov.w	fp, #1
 80080b0:	464a      	mov	r2, r9
 80080b2:	4616      	mov	r6, r2
 80080b4:	3201      	adds	r2, #1
 80080b6:	7830      	ldrb	r0, [r6, #0]
 80080b8:	f7ff ffb0 	bl	800801c <__hexdig_fun>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1f8      	bne.n	80080b2 <__gethex+0x6a>
 80080c0:	498d      	ldr	r1, [pc, #564]	@ (80082f8 <__gethex+0x2b0>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff f89f 	bl	8007208 <strncmp>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d13f      	bne.n	800814e <__gethex+0x106>
 80080ce:	b944      	cbnz	r4, 80080e2 <__gethex+0x9a>
 80080d0:	1c74      	adds	r4, r6, #1
 80080d2:	4622      	mov	r2, r4
 80080d4:	4616      	mov	r6, r2
 80080d6:	3201      	adds	r2, #1
 80080d8:	7830      	ldrb	r0, [r6, #0]
 80080da:	f7ff ff9f 	bl	800801c <__hexdig_fun>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d1f8      	bne.n	80080d4 <__gethex+0x8c>
 80080e2:	1ba4      	subs	r4, r4, r6
 80080e4:	00a7      	lsls	r7, r4, #2
 80080e6:	7833      	ldrb	r3, [r6, #0]
 80080e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80080ec:	2b50      	cmp	r3, #80	@ 0x50
 80080ee:	d13e      	bne.n	800816e <__gethex+0x126>
 80080f0:	7873      	ldrb	r3, [r6, #1]
 80080f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80080f4:	d033      	beq.n	800815e <__gethex+0x116>
 80080f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80080f8:	d034      	beq.n	8008164 <__gethex+0x11c>
 80080fa:	1c71      	adds	r1, r6, #1
 80080fc:	2400      	movs	r4, #0
 80080fe:	7808      	ldrb	r0, [r1, #0]
 8008100:	f7ff ff8c 	bl	800801c <__hexdig_fun>
 8008104:	1e43      	subs	r3, r0, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b18      	cmp	r3, #24
 800810a:	d830      	bhi.n	800816e <__gethex+0x126>
 800810c:	f1a0 0210 	sub.w	r2, r0, #16
 8008110:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008114:	f7ff ff82 	bl	800801c <__hexdig_fun>
 8008118:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800811c:	fa5f fc8c 	uxtb.w	ip, ip
 8008120:	f1bc 0f18 	cmp.w	ip, #24
 8008124:	f04f 030a 	mov.w	r3, #10
 8008128:	d91e      	bls.n	8008168 <__gethex+0x120>
 800812a:	b104      	cbz	r4, 800812e <__gethex+0xe6>
 800812c:	4252      	negs	r2, r2
 800812e:	4417      	add	r7, r2
 8008130:	f8ca 1000 	str.w	r1, [sl]
 8008134:	b1ed      	cbz	r5, 8008172 <__gethex+0x12a>
 8008136:	f1bb 0f00 	cmp.w	fp, #0
 800813a:	bf0c      	ite	eq
 800813c:	2506      	moveq	r5, #6
 800813e:	2500      	movne	r5, #0
 8008140:	4628      	mov	r0, r5
 8008142:	b005      	add	sp, #20
 8008144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008148:	2500      	movs	r5, #0
 800814a:	462c      	mov	r4, r5
 800814c:	e7b0      	b.n	80080b0 <__gethex+0x68>
 800814e:	2c00      	cmp	r4, #0
 8008150:	d1c7      	bne.n	80080e2 <__gethex+0x9a>
 8008152:	4627      	mov	r7, r4
 8008154:	e7c7      	b.n	80080e6 <__gethex+0x9e>
 8008156:	464e      	mov	r6, r9
 8008158:	462f      	mov	r7, r5
 800815a:	2501      	movs	r5, #1
 800815c:	e7c3      	b.n	80080e6 <__gethex+0x9e>
 800815e:	2400      	movs	r4, #0
 8008160:	1cb1      	adds	r1, r6, #2
 8008162:	e7cc      	b.n	80080fe <__gethex+0xb6>
 8008164:	2401      	movs	r4, #1
 8008166:	e7fb      	b.n	8008160 <__gethex+0x118>
 8008168:	fb03 0002 	mla	r0, r3, r2, r0
 800816c:	e7ce      	b.n	800810c <__gethex+0xc4>
 800816e:	4631      	mov	r1, r6
 8008170:	e7de      	b.n	8008130 <__gethex+0xe8>
 8008172:	eba6 0309 	sub.w	r3, r6, r9
 8008176:	3b01      	subs	r3, #1
 8008178:	4629      	mov	r1, r5
 800817a:	2b07      	cmp	r3, #7
 800817c:	dc0a      	bgt.n	8008194 <__gethex+0x14c>
 800817e:	9801      	ldr	r0, [sp, #4]
 8008180:	f000 fcfe 	bl	8008b80 <_Balloc>
 8008184:	4604      	mov	r4, r0
 8008186:	b940      	cbnz	r0, 800819a <__gethex+0x152>
 8008188:	4b5c      	ldr	r3, [pc, #368]	@ (80082fc <__gethex+0x2b4>)
 800818a:	4602      	mov	r2, r0
 800818c:	21e4      	movs	r1, #228	@ 0xe4
 800818e:	485c      	ldr	r0, [pc, #368]	@ (8008300 <__gethex+0x2b8>)
 8008190:	f001 fa96 	bl	80096c0 <__assert_func>
 8008194:	3101      	adds	r1, #1
 8008196:	105b      	asrs	r3, r3, #1
 8008198:	e7ef      	b.n	800817a <__gethex+0x132>
 800819a:	f100 0a14 	add.w	sl, r0, #20
 800819e:	2300      	movs	r3, #0
 80081a0:	4655      	mov	r5, sl
 80081a2:	469b      	mov	fp, r3
 80081a4:	45b1      	cmp	r9, r6
 80081a6:	d337      	bcc.n	8008218 <__gethex+0x1d0>
 80081a8:	f845 bb04 	str.w	fp, [r5], #4
 80081ac:	eba5 050a 	sub.w	r5, r5, sl
 80081b0:	10ad      	asrs	r5, r5, #2
 80081b2:	6125      	str	r5, [r4, #16]
 80081b4:	4658      	mov	r0, fp
 80081b6:	f000 fdd5 	bl	8008d64 <__hi0bits>
 80081ba:	016d      	lsls	r5, r5, #5
 80081bc:	f8d8 6000 	ldr.w	r6, [r8]
 80081c0:	1a2d      	subs	r5, r5, r0
 80081c2:	42b5      	cmp	r5, r6
 80081c4:	dd54      	ble.n	8008270 <__gethex+0x228>
 80081c6:	1bad      	subs	r5, r5, r6
 80081c8:	4629      	mov	r1, r5
 80081ca:	4620      	mov	r0, r4
 80081cc:	f001 f969 	bl	80094a2 <__any_on>
 80081d0:	4681      	mov	r9, r0
 80081d2:	b178      	cbz	r0, 80081f4 <__gethex+0x1ac>
 80081d4:	1e6b      	subs	r3, r5, #1
 80081d6:	1159      	asrs	r1, r3, #5
 80081d8:	f003 021f 	and.w	r2, r3, #31
 80081dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80081e0:	f04f 0901 	mov.w	r9, #1
 80081e4:	fa09 f202 	lsl.w	r2, r9, r2
 80081e8:	420a      	tst	r2, r1
 80081ea:	d003      	beq.n	80081f4 <__gethex+0x1ac>
 80081ec:	454b      	cmp	r3, r9
 80081ee:	dc36      	bgt.n	800825e <__gethex+0x216>
 80081f0:	f04f 0902 	mov.w	r9, #2
 80081f4:	4629      	mov	r1, r5
 80081f6:	4620      	mov	r0, r4
 80081f8:	f7ff febe 	bl	8007f78 <rshift>
 80081fc:	442f      	add	r7, r5
 80081fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008202:	42bb      	cmp	r3, r7
 8008204:	da42      	bge.n	800828c <__gethex+0x244>
 8008206:	9801      	ldr	r0, [sp, #4]
 8008208:	4621      	mov	r1, r4
 800820a:	f000 fcf9 	bl	8008c00 <_Bfree>
 800820e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008210:	2300      	movs	r3, #0
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	25a3      	movs	r5, #163	@ 0xa3
 8008216:	e793      	b.n	8008140 <__gethex+0xf8>
 8008218:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800821c:	2a2e      	cmp	r2, #46	@ 0x2e
 800821e:	d012      	beq.n	8008246 <__gethex+0x1fe>
 8008220:	2b20      	cmp	r3, #32
 8008222:	d104      	bne.n	800822e <__gethex+0x1e6>
 8008224:	f845 bb04 	str.w	fp, [r5], #4
 8008228:	f04f 0b00 	mov.w	fp, #0
 800822c:	465b      	mov	r3, fp
 800822e:	7830      	ldrb	r0, [r6, #0]
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	f7ff fef3 	bl	800801c <__hexdig_fun>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	f000 000f 	and.w	r0, r0, #15
 800823c:	4098      	lsls	r0, r3
 800823e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008242:	3304      	adds	r3, #4
 8008244:	e7ae      	b.n	80081a4 <__gethex+0x15c>
 8008246:	45b1      	cmp	r9, r6
 8008248:	d8ea      	bhi.n	8008220 <__gethex+0x1d8>
 800824a:	492b      	ldr	r1, [pc, #172]	@ (80082f8 <__gethex+0x2b0>)
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	4630      	mov	r0, r6
 8008252:	f7fe ffd9 	bl	8007208 <strncmp>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	2800      	cmp	r0, #0
 800825a:	d1e1      	bne.n	8008220 <__gethex+0x1d8>
 800825c:	e7a2      	b.n	80081a4 <__gethex+0x15c>
 800825e:	1ea9      	subs	r1, r5, #2
 8008260:	4620      	mov	r0, r4
 8008262:	f001 f91e 	bl	80094a2 <__any_on>
 8008266:	2800      	cmp	r0, #0
 8008268:	d0c2      	beq.n	80081f0 <__gethex+0x1a8>
 800826a:	f04f 0903 	mov.w	r9, #3
 800826e:	e7c1      	b.n	80081f4 <__gethex+0x1ac>
 8008270:	da09      	bge.n	8008286 <__gethex+0x23e>
 8008272:	1b75      	subs	r5, r6, r5
 8008274:	4621      	mov	r1, r4
 8008276:	9801      	ldr	r0, [sp, #4]
 8008278:	462a      	mov	r2, r5
 800827a:	f000 fed9 	bl	8009030 <__lshift>
 800827e:	1b7f      	subs	r7, r7, r5
 8008280:	4604      	mov	r4, r0
 8008282:	f100 0a14 	add.w	sl, r0, #20
 8008286:	f04f 0900 	mov.w	r9, #0
 800828a:	e7b8      	b.n	80081fe <__gethex+0x1b6>
 800828c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008290:	42bd      	cmp	r5, r7
 8008292:	dd6f      	ble.n	8008374 <__gethex+0x32c>
 8008294:	1bed      	subs	r5, r5, r7
 8008296:	42ae      	cmp	r6, r5
 8008298:	dc34      	bgt.n	8008304 <__gethex+0x2bc>
 800829a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d022      	beq.n	80082e8 <__gethex+0x2a0>
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d024      	beq.n	80082f0 <__gethex+0x2a8>
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d115      	bne.n	80082d6 <__gethex+0x28e>
 80082aa:	42ae      	cmp	r6, r5
 80082ac:	d113      	bne.n	80082d6 <__gethex+0x28e>
 80082ae:	2e01      	cmp	r6, #1
 80082b0:	d10b      	bne.n	80082ca <__gethex+0x282>
 80082b2:	9a02      	ldr	r2, [sp, #8]
 80082b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	2301      	movs	r3, #1
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	f8ca 3000 	str.w	r3, [sl]
 80082c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082c4:	2562      	movs	r5, #98	@ 0x62
 80082c6:	601c      	str	r4, [r3, #0]
 80082c8:	e73a      	b.n	8008140 <__gethex+0xf8>
 80082ca:	1e71      	subs	r1, r6, #1
 80082cc:	4620      	mov	r0, r4
 80082ce:	f001 f8e8 	bl	80094a2 <__any_on>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d1ed      	bne.n	80082b2 <__gethex+0x26a>
 80082d6:	9801      	ldr	r0, [sp, #4]
 80082d8:	4621      	mov	r1, r4
 80082da:	f000 fc91 	bl	8008c00 <_Bfree>
 80082de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082e0:	2300      	movs	r3, #0
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	2550      	movs	r5, #80	@ 0x50
 80082e6:	e72b      	b.n	8008140 <__gethex+0xf8>
 80082e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f3      	bne.n	80082d6 <__gethex+0x28e>
 80082ee:	e7e0      	b.n	80082b2 <__gethex+0x26a>
 80082f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1dd      	bne.n	80082b2 <__gethex+0x26a>
 80082f6:	e7ee      	b.n	80082d6 <__gethex+0x28e>
 80082f8:	08009e15 	.word	0x08009e15
 80082fc:	08009fed 	.word	0x08009fed
 8008300:	08009ffe 	.word	0x08009ffe
 8008304:	1e6f      	subs	r7, r5, #1
 8008306:	f1b9 0f00 	cmp.w	r9, #0
 800830a:	d130      	bne.n	800836e <__gethex+0x326>
 800830c:	b127      	cbz	r7, 8008318 <__gethex+0x2d0>
 800830e:	4639      	mov	r1, r7
 8008310:	4620      	mov	r0, r4
 8008312:	f001 f8c6 	bl	80094a2 <__any_on>
 8008316:	4681      	mov	r9, r0
 8008318:	117a      	asrs	r2, r7, #5
 800831a:	2301      	movs	r3, #1
 800831c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008320:	f007 071f 	and.w	r7, r7, #31
 8008324:	40bb      	lsls	r3, r7
 8008326:	4213      	tst	r3, r2
 8008328:	4629      	mov	r1, r5
 800832a:	4620      	mov	r0, r4
 800832c:	bf18      	it	ne
 800832e:	f049 0902 	orrne.w	r9, r9, #2
 8008332:	f7ff fe21 	bl	8007f78 <rshift>
 8008336:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800833a:	1b76      	subs	r6, r6, r5
 800833c:	2502      	movs	r5, #2
 800833e:	f1b9 0f00 	cmp.w	r9, #0
 8008342:	d047      	beq.n	80083d4 <__gethex+0x38c>
 8008344:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d015      	beq.n	8008378 <__gethex+0x330>
 800834c:	2b03      	cmp	r3, #3
 800834e:	d017      	beq.n	8008380 <__gethex+0x338>
 8008350:	2b01      	cmp	r3, #1
 8008352:	d109      	bne.n	8008368 <__gethex+0x320>
 8008354:	f019 0f02 	tst.w	r9, #2
 8008358:	d006      	beq.n	8008368 <__gethex+0x320>
 800835a:	f8da 3000 	ldr.w	r3, [sl]
 800835e:	ea49 0903 	orr.w	r9, r9, r3
 8008362:	f019 0f01 	tst.w	r9, #1
 8008366:	d10e      	bne.n	8008386 <__gethex+0x33e>
 8008368:	f045 0510 	orr.w	r5, r5, #16
 800836c:	e032      	b.n	80083d4 <__gethex+0x38c>
 800836e:	f04f 0901 	mov.w	r9, #1
 8008372:	e7d1      	b.n	8008318 <__gethex+0x2d0>
 8008374:	2501      	movs	r5, #1
 8008376:	e7e2      	b.n	800833e <__gethex+0x2f6>
 8008378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800837a:	f1c3 0301 	rsb	r3, r3, #1
 800837e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f0      	beq.n	8008368 <__gethex+0x320>
 8008386:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800838a:	f104 0314 	add.w	r3, r4, #20
 800838e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008392:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008396:	f04f 0c00 	mov.w	ip, #0
 800839a:	4618      	mov	r0, r3
 800839c:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80083a4:	d01b      	beq.n	80083de <__gethex+0x396>
 80083a6:	3201      	adds	r2, #1
 80083a8:	6002      	str	r2, [r0, #0]
 80083aa:	2d02      	cmp	r5, #2
 80083ac:	f104 0314 	add.w	r3, r4, #20
 80083b0:	d13c      	bne.n	800842c <__gethex+0x3e4>
 80083b2:	f8d8 2000 	ldr.w	r2, [r8]
 80083b6:	3a01      	subs	r2, #1
 80083b8:	42b2      	cmp	r2, r6
 80083ba:	d109      	bne.n	80083d0 <__gethex+0x388>
 80083bc:	1171      	asrs	r1, r6, #5
 80083be:	2201      	movs	r2, #1
 80083c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083c4:	f006 061f 	and.w	r6, r6, #31
 80083c8:	fa02 f606 	lsl.w	r6, r2, r6
 80083cc:	421e      	tst	r6, r3
 80083ce:	d13a      	bne.n	8008446 <__gethex+0x3fe>
 80083d0:	f045 0520 	orr.w	r5, r5, #32
 80083d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d6:	601c      	str	r4, [r3, #0]
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	601f      	str	r7, [r3, #0]
 80083dc:	e6b0      	b.n	8008140 <__gethex+0xf8>
 80083de:	4299      	cmp	r1, r3
 80083e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80083e4:	d8d9      	bhi.n	800839a <__gethex+0x352>
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	459b      	cmp	fp, r3
 80083ea:	db17      	blt.n	800841c <__gethex+0x3d4>
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	9801      	ldr	r0, [sp, #4]
 80083f0:	3101      	adds	r1, #1
 80083f2:	f000 fbc5 	bl	8008b80 <_Balloc>
 80083f6:	4681      	mov	r9, r0
 80083f8:	b918      	cbnz	r0, 8008402 <__gethex+0x3ba>
 80083fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008464 <__gethex+0x41c>)
 80083fc:	4602      	mov	r2, r0
 80083fe:	2184      	movs	r1, #132	@ 0x84
 8008400:	e6c5      	b.n	800818e <__gethex+0x146>
 8008402:	6922      	ldr	r2, [r4, #16]
 8008404:	3202      	adds	r2, #2
 8008406:	f104 010c 	add.w	r1, r4, #12
 800840a:	0092      	lsls	r2, r2, #2
 800840c:	300c      	adds	r0, #12
 800840e:	f7fe ff46 	bl	800729e <memcpy>
 8008412:	4621      	mov	r1, r4
 8008414:	9801      	ldr	r0, [sp, #4]
 8008416:	f000 fbf3 	bl	8008c00 <_Bfree>
 800841a:	464c      	mov	r4, r9
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008424:	6122      	str	r2, [r4, #16]
 8008426:	2201      	movs	r2, #1
 8008428:	615a      	str	r2, [r3, #20]
 800842a:	e7be      	b.n	80083aa <__gethex+0x362>
 800842c:	6922      	ldr	r2, [r4, #16]
 800842e:	455a      	cmp	r2, fp
 8008430:	dd0b      	ble.n	800844a <__gethex+0x402>
 8008432:	2101      	movs	r1, #1
 8008434:	4620      	mov	r0, r4
 8008436:	f7ff fd9f 	bl	8007f78 <rshift>
 800843a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800843e:	3701      	adds	r7, #1
 8008440:	42bb      	cmp	r3, r7
 8008442:	f6ff aee0 	blt.w	8008206 <__gethex+0x1be>
 8008446:	2501      	movs	r5, #1
 8008448:	e7c2      	b.n	80083d0 <__gethex+0x388>
 800844a:	f016 061f 	ands.w	r6, r6, #31
 800844e:	d0fa      	beq.n	8008446 <__gethex+0x3fe>
 8008450:	4453      	add	r3, sl
 8008452:	f1c6 0620 	rsb	r6, r6, #32
 8008456:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800845a:	f000 fc83 	bl	8008d64 <__hi0bits>
 800845e:	42b0      	cmp	r0, r6
 8008460:	dbe7      	blt.n	8008432 <__gethex+0x3ea>
 8008462:	e7f0      	b.n	8008446 <__gethex+0x3fe>
 8008464:	08009fed 	.word	0x08009fed

08008468 <L_shift>:
 8008468:	f1c2 0208 	rsb	r2, r2, #8
 800846c:	0092      	lsls	r2, r2, #2
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	f1c2 0620 	rsb	r6, r2, #32
 8008474:	6843      	ldr	r3, [r0, #4]
 8008476:	6804      	ldr	r4, [r0, #0]
 8008478:	fa03 f506 	lsl.w	r5, r3, r6
 800847c:	432c      	orrs	r4, r5
 800847e:	40d3      	lsrs	r3, r2
 8008480:	6004      	str	r4, [r0, #0]
 8008482:	f840 3f04 	str.w	r3, [r0, #4]!
 8008486:	4288      	cmp	r0, r1
 8008488:	d3f4      	bcc.n	8008474 <L_shift+0xc>
 800848a:	bd70      	pop	{r4, r5, r6, pc}

0800848c <__match>:
 800848c:	b530      	push	{r4, r5, lr}
 800848e:	6803      	ldr	r3, [r0, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008496:	b914      	cbnz	r4, 800849e <__match+0x12>
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	2001      	movs	r0, #1
 800849c:	bd30      	pop	{r4, r5, pc}
 800849e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80084a6:	2d19      	cmp	r5, #25
 80084a8:	bf98      	it	ls
 80084aa:	3220      	addls	r2, #32
 80084ac:	42a2      	cmp	r2, r4
 80084ae:	d0f0      	beq.n	8008492 <__match+0x6>
 80084b0:	2000      	movs	r0, #0
 80084b2:	e7f3      	b.n	800849c <__match+0x10>

080084b4 <__hexnan>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	680b      	ldr	r3, [r1, #0]
 80084ba:	6801      	ldr	r1, [r0, #0]
 80084bc:	115e      	asrs	r6, r3, #5
 80084be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084c2:	f013 031f 	ands.w	r3, r3, #31
 80084c6:	b087      	sub	sp, #28
 80084c8:	bf18      	it	ne
 80084ca:	3604      	addne	r6, #4
 80084cc:	2500      	movs	r5, #0
 80084ce:	1f37      	subs	r7, r6, #4
 80084d0:	4682      	mov	sl, r0
 80084d2:	4690      	mov	r8, r2
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80084da:	46b9      	mov	r9, r7
 80084dc:	463c      	mov	r4, r7
 80084de:	9502      	str	r5, [sp, #8]
 80084e0:	46ab      	mov	fp, r5
 80084e2:	784a      	ldrb	r2, [r1, #1]
 80084e4:	1c4b      	adds	r3, r1, #1
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	b342      	cbz	r2, 800853c <__hexnan+0x88>
 80084ea:	4610      	mov	r0, r2
 80084ec:	9105      	str	r1, [sp, #20]
 80084ee:	9204      	str	r2, [sp, #16]
 80084f0:	f7ff fd94 	bl	800801c <__hexdig_fun>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d151      	bne.n	800859c <__hexnan+0xe8>
 80084f8:	9a04      	ldr	r2, [sp, #16]
 80084fa:	9905      	ldr	r1, [sp, #20]
 80084fc:	2a20      	cmp	r2, #32
 80084fe:	d818      	bhi.n	8008532 <__hexnan+0x7e>
 8008500:	9b02      	ldr	r3, [sp, #8]
 8008502:	459b      	cmp	fp, r3
 8008504:	dd13      	ble.n	800852e <__hexnan+0x7a>
 8008506:	454c      	cmp	r4, r9
 8008508:	d206      	bcs.n	8008518 <__hexnan+0x64>
 800850a:	2d07      	cmp	r5, #7
 800850c:	dc04      	bgt.n	8008518 <__hexnan+0x64>
 800850e:	462a      	mov	r2, r5
 8008510:	4649      	mov	r1, r9
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff ffa8 	bl	8008468 <L_shift>
 8008518:	4544      	cmp	r4, r8
 800851a:	d952      	bls.n	80085c2 <__hexnan+0x10e>
 800851c:	2300      	movs	r3, #0
 800851e:	f1a4 0904 	sub.w	r9, r4, #4
 8008522:	f844 3c04 	str.w	r3, [r4, #-4]
 8008526:	f8cd b008 	str.w	fp, [sp, #8]
 800852a:	464c      	mov	r4, r9
 800852c:	461d      	mov	r5, r3
 800852e:	9903      	ldr	r1, [sp, #12]
 8008530:	e7d7      	b.n	80084e2 <__hexnan+0x2e>
 8008532:	2a29      	cmp	r2, #41	@ 0x29
 8008534:	d157      	bne.n	80085e6 <__hexnan+0x132>
 8008536:	3102      	adds	r1, #2
 8008538:	f8ca 1000 	str.w	r1, [sl]
 800853c:	f1bb 0f00 	cmp.w	fp, #0
 8008540:	d051      	beq.n	80085e6 <__hexnan+0x132>
 8008542:	454c      	cmp	r4, r9
 8008544:	d206      	bcs.n	8008554 <__hexnan+0xa0>
 8008546:	2d07      	cmp	r5, #7
 8008548:	dc04      	bgt.n	8008554 <__hexnan+0xa0>
 800854a:	462a      	mov	r2, r5
 800854c:	4649      	mov	r1, r9
 800854e:	4620      	mov	r0, r4
 8008550:	f7ff ff8a 	bl	8008468 <L_shift>
 8008554:	4544      	cmp	r4, r8
 8008556:	d936      	bls.n	80085c6 <__hexnan+0x112>
 8008558:	f1a8 0204 	sub.w	r2, r8, #4
 800855c:	4623      	mov	r3, r4
 800855e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008562:	f842 1f04 	str.w	r1, [r2, #4]!
 8008566:	429f      	cmp	r7, r3
 8008568:	d2f9      	bcs.n	800855e <__hexnan+0xaa>
 800856a:	1b3b      	subs	r3, r7, r4
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	3304      	adds	r3, #4
 8008572:	3401      	adds	r4, #1
 8008574:	3e03      	subs	r6, #3
 8008576:	42b4      	cmp	r4, r6
 8008578:	bf88      	it	hi
 800857a:	2304      	movhi	r3, #4
 800857c:	4443      	add	r3, r8
 800857e:	2200      	movs	r2, #0
 8008580:	f843 2b04 	str.w	r2, [r3], #4
 8008584:	429f      	cmp	r7, r3
 8008586:	d2fb      	bcs.n	8008580 <__hexnan+0xcc>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	b91b      	cbnz	r3, 8008594 <__hexnan+0xe0>
 800858c:	4547      	cmp	r7, r8
 800858e:	d128      	bne.n	80085e2 <__hexnan+0x12e>
 8008590:	2301      	movs	r3, #1
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	2005      	movs	r0, #5
 8008596:	b007      	add	sp, #28
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	3501      	adds	r5, #1
 800859e:	2d08      	cmp	r5, #8
 80085a0:	f10b 0b01 	add.w	fp, fp, #1
 80085a4:	dd06      	ble.n	80085b4 <__hexnan+0x100>
 80085a6:	4544      	cmp	r4, r8
 80085a8:	d9c1      	bls.n	800852e <__hexnan+0x7a>
 80085aa:	2300      	movs	r3, #0
 80085ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80085b0:	2501      	movs	r5, #1
 80085b2:	3c04      	subs	r4, #4
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	f000 000f 	and.w	r0, r0, #15
 80085ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80085be:	6020      	str	r0, [r4, #0]
 80085c0:	e7b5      	b.n	800852e <__hexnan+0x7a>
 80085c2:	2508      	movs	r5, #8
 80085c4:	e7b3      	b.n	800852e <__hexnan+0x7a>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0dd      	beq.n	8008588 <__hexnan+0xd4>
 80085cc:	f1c3 0320 	rsb	r3, r3, #32
 80085d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085d4:	40da      	lsrs	r2, r3
 80085d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80085da:	4013      	ands	r3, r2
 80085dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80085e0:	e7d2      	b.n	8008588 <__hexnan+0xd4>
 80085e2:	3f04      	subs	r7, #4
 80085e4:	e7d0      	b.n	8008588 <__hexnan+0xd4>
 80085e6:	2004      	movs	r0, #4
 80085e8:	e7d5      	b.n	8008596 <__hexnan+0xe2>

080085ea <__ssputs_r>:
 80085ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ee:	688e      	ldr	r6, [r1, #8]
 80085f0:	461f      	mov	r7, r3
 80085f2:	42be      	cmp	r6, r7
 80085f4:	680b      	ldr	r3, [r1, #0]
 80085f6:	4682      	mov	sl, r0
 80085f8:	460c      	mov	r4, r1
 80085fa:	4690      	mov	r8, r2
 80085fc:	d82d      	bhi.n	800865a <__ssputs_r+0x70>
 80085fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008602:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008606:	d026      	beq.n	8008656 <__ssputs_r+0x6c>
 8008608:	6965      	ldr	r5, [r4, #20]
 800860a:	6909      	ldr	r1, [r1, #16]
 800860c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008610:	eba3 0901 	sub.w	r9, r3, r1
 8008614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008618:	1c7b      	adds	r3, r7, #1
 800861a:	444b      	add	r3, r9
 800861c:	106d      	asrs	r5, r5, #1
 800861e:	429d      	cmp	r5, r3
 8008620:	bf38      	it	cc
 8008622:	461d      	movcc	r5, r3
 8008624:	0553      	lsls	r3, r2, #21
 8008626:	d527      	bpl.n	8008678 <__ssputs_r+0x8e>
 8008628:	4629      	mov	r1, r5
 800862a:	f000 f95f 	bl	80088ec <_malloc_r>
 800862e:	4606      	mov	r6, r0
 8008630:	b360      	cbz	r0, 800868c <__ssputs_r+0xa2>
 8008632:	6921      	ldr	r1, [r4, #16]
 8008634:	464a      	mov	r2, r9
 8008636:	f7fe fe32 	bl	800729e <memcpy>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	6126      	str	r6, [r4, #16]
 8008648:	6165      	str	r5, [r4, #20]
 800864a:	444e      	add	r6, r9
 800864c:	eba5 0509 	sub.w	r5, r5, r9
 8008650:	6026      	str	r6, [r4, #0]
 8008652:	60a5      	str	r5, [r4, #8]
 8008654:	463e      	mov	r6, r7
 8008656:	42be      	cmp	r6, r7
 8008658:	d900      	bls.n	800865c <__ssputs_r+0x72>
 800865a:	463e      	mov	r6, r7
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4632      	mov	r2, r6
 8008660:	4641      	mov	r1, r8
 8008662:	f000 ffbd 	bl	80095e0 <memmove>
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	1b9b      	subs	r3, r3, r6
 800866a:	60a3      	str	r3, [r4, #8]
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	4433      	add	r3, r6
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	2000      	movs	r0, #0
 8008674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008678:	462a      	mov	r2, r5
 800867a:	f000 ff76 	bl	800956a <_realloc_r>
 800867e:	4606      	mov	r6, r0
 8008680:	2800      	cmp	r0, #0
 8008682:	d1e0      	bne.n	8008646 <__ssputs_r+0x5c>
 8008684:	6921      	ldr	r1, [r4, #16]
 8008686:	4650      	mov	r0, sl
 8008688:	f001 f84c 	bl	8009724 <_free_r>
 800868c:	230c      	movs	r3, #12
 800868e:	f8ca 3000 	str.w	r3, [sl]
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800869e:	e7e9      	b.n	8008674 <__ssputs_r+0x8a>

080086a0 <_svfiprintf_r>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	4698      	mov	r8, r3
 80086a6:	898b      	ldrh	r3, [r1, #12]
 80086a8:	061b      	lsls	r3, r3, #24
 80086aa:	b09d      	sub	sp, #116	@ 0x74
 80086ac:	4607      	mov	r7, r0
 80086ae:	460d      	mov	r5, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	d510      	bpl.n	80086d6 <_svfiprintf_r+0x36>
 80086b4:	690b      	ldr	r3, [r1, #16]
 80086b6:	b973      	cbnz	r3, 80086d6 <_svfiprintf_r+0x36>
 80086b8:	2140      	movs	r1, #64	@ 0x40
 80086ba:	f000 f917 	bl	80088ec <_malloc_r>
 80086be:	6028      	str	r0, [r5, #0]
 80086c0:	6128      	str	r0, [r5, #16]
 80086c2:	b930      	cbnz	r0, 80086d2 <_svfiprintf_r+0x32>
 80086c4:	230c      	movs	r3, #12
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086cc:	b01d      	add	sp, #116	@ 0x74
 80086ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d2:	2340      	movs	r3, #64	@ 0x40
 80086d4:	616b      	str	r3, [r5, #20]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086da:	2320      	movs	r3, #32
 80086dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e4:	2330      	movs	r3, #48	@ 0x30
 80086e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008884 <_svfiprintf_r+0x1e4>
 80086ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086ee:	f04f 0901 	mov.w	r9, #1
 80086f2:	4623      	mov	r3, r4
 80086f4:	469a      	mov	sl, r3
 80086f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fa:	b10a      	cbz	r2, 8008700 <_svfiprintf_r+0x60>
 80086fc:	2a25      	cmp	r2, #37	@ 0x25
 80086fe:	d1f9      	bne.n	80086f4 <_svfiprintf_r+0x54>
 8008700:	ebba 0b04 	subs.w	fp, sl, r4
 8008704:	d00b      	beq.n	800871e <_svfiprintf_r+0x7e>
 8008706:	465b      	mov	r3, fp
 8008708:	4622      	mov	r2, r4
 800870a:	4629      	mov	r1, r5
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff ff6c 	bl	80085ea <__ssputs_r>
 8008712:	3001      	adds	r0, #1
 8008714:	f000 80a7 	beq.w	8008866 <_svfiprintf_r+0x1c6>
 8008718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800871a:	445a      	add	r2, fp
 800871c:	9209      	str	r2, [sp, #36]	@ 0x24
 800871e:	f89a 3000 	ldrb.w	r3, [sl]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 809f 	beq.w	8008866 <_svfiprintf_r+0x1c6>
 8008728:	2300      	movs	r3, #0
 800872a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800872e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008732:	f10a 0a01 	add.w	sl, sl, #1
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	9307      	str	r3, [sp, #28]
 800873a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800873e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008740:	4654      	mov	r4, sl
 8008742:	2205      	movs	r2, #5
 8008744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008748:	484e      	ldr	r0, [pc, #312]	@ (8008884 <_svfiprintf_r+0x1e4>)
 800874a:	f7f7 fd59 	bl	8000200 <memchr>
 800874e:	9a04      	ldr	r2, [sp, #16]
 8008750:	b9d8      	cbnz	r0, 800878a <_svfiprintf_r+0xea>
 8008752:	06d0      	lsls	r0, r2, #27
 8008754:	bf44      	itt	mi
 8008756:	2320      	movmi	r3, #32
 8008758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800875c:	0711      	lsls	r1, r2, #28
 800875e:	bf44      	itt	mi
 8008760:	232b      	movmi	r3, #43	@ 0x2b
 8008762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008766:	f89a 3000 	ldrb.w	r3, [sl]
 800876a:	2b2a      	cmp	r3, #42	@ 0x2a
 800876c:	d015      	beq.n	800879a <_svfiprintf_r+0xfa>
 800876e:	9a07      	ldr	r2, [sp, #28]
 8008770:	4654      	mov	r4, sl
 8008772:	2000      	movs	r0, #0
 8008774:	f04f 0c0a 	mov.w	ip, #10
 8008778:	4621      	mov	r1, r4
 800877a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877e:	3b30      	subs	r3, #48	@ 0x30
 8008780:	2b09      	cmp	r3, #9
 8008782:	d94b      	bls.n	800881c <_svfiprintf_r+0x17c>
 8008784:	b1b0      	cbz	r0, 80087b4 <_svfiprintf_r+0x114>
 8008786:	9207      	str	r2, [sp, #28]
 8008788:	e014      	b.n	80087b4 <_svfiprintf_r+0x114>
 800878a:	eba0 0308 	sub.w	r3, r0, r8
 800878e:	fa09 f303 	lsl.w	r3, r9, r3
 8008792:	4313      	orrs	r3, r2
 8008794:	9304      	str	r3, [sp, #16]
 8008796:	46a2      	mov	sl, r4
 8008798:	e7d2      	b.n	8008740 <_svfiprintf_r+0xa0>
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	1d19      	adds	r1, r3, #4
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	9103      	str	r1, [sp, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bfbb      	ittet	lt
 80087a6:	425b      	neglt	r3, r3
 80087a8:	f042 0202 	orrlt.w	r2, r2, #2
 80087ac:	9307      	strge	r3, [sp, #28]
 80087ae:	9307      	strlt	r3, [sp, #28]
 80087b0:	bfb8      	it	lt
 80087b2:	9204      	strlt	r2, [sp, #16]
 80087b4:	7823      	ldrb	r3, [r4, #0]
 80087b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80087b8:	d10a      	bne.n	80087d0 <_svfiprintf_r+0x130>
 80087ba:	7863      	ldrb	r3, [r4, #1]
 80087bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80087be:	d132      	bne.n	8008826 <_svfiprintf_r+0x186>
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	1d1a      	adds	r2, r3, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	9203      	str	r2, [sp, #12]
 80087c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087cc:	3402      	adds	r4, #2
 80087ce:	9305      	str	r3, [sp, #20]
 80087d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008894 <_svfiprintf_r+0x1f4>
 80087d4:	7821      	ldrb	r1, [r4, #0]
 80087d6:	2203      	movs	r2, #3
 80087d8:	4650      	mov	r0, sl
 80087da:	f7f7 fd11 	bl	8000200 <memchr>
 80087de:	b138      	cbz	r0, 80087f0 <_svfiprintf_r+0x150>
 80087e0:	9b04      	ldr	r3, [sp, #16]
 80087e2:	eba0 000a 	sub.w	r0, r0, sl
 80087e6:	2240      	movs	r2, #64	@ 0x40
 80087e8:	4082      	lsls	r2, r0
 80087ea:	4313      	orrs	r3, r2
 80087ec:	3401      	adds	r4, #1
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f4:	4824      	ldr	r0, [pc, #144]	@ (8008888 <_svfiprintf_r+0x1e8>)
 80087f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087fa:	2206      	movs	r2, #6
 80087fc:	f7f7 fd00 	bl	8000200 <memchr>
 8008800:	2800      	cmp	r0, #0
 8008802:	d036      	beq.n	8008872 <_svfiprintf_r+0x1d2>
 8008804:	4b21      	ldr	r3, [pc, #132]	@ (800888c <_svfiprintf_r+0x1ec>)
 8008806:	bb1b      	cbnz	r3, 8008850 <_svfiprintf_r+0x1b0>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	3307      	adds	r3, #7
 800880c:	f023 0307 	bic.w	r3, r3, #7
 8008810:	3308      	adds	r3, #8
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008816:	4433      	add	r3, r6
 8008818:	9309      	str	r3, [sp, #36]	@ 0x24
 800881a:	e76a      	b.n	80086f2 <_svfiprintf_r+0x52>
 800881c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008820:	460c      	mov	r4, r1
 8008822:	2001      	movs	r0, #1
 8008824:	e7a8      	b.n	8008778 <_svfiprintf_r+0xd8>
 8008826:	2300      	movs	r3, #0
 8008828:	3401      	adds	r4, #1
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	4619      	mov	r1, r3
 800882e:	f04f 0c0a 	mov.w	ip, #10
 8008832:	4620      	mov	r0, r4
 8008834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008838:	3a30      	subs	r2, #48	@ 0x30
 800883a:	2a09      	cmp	r2, #9
 800883c:	d903      	bls.n	8008846 <_svfiprintf_r+0x1a6>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0c6      	beq.n	80087d0 <_svfiprintf_r+0x130>
 8008842:	9105      	str	r1, [sp, #20]
 8008844:	e7c4      	b.n	80087d0 <_svfiprintf_r+0x130>
 8008846:	fb0c 2101 	mla	r1, ip, r1, r2
 800884a:	4604      	mov	r4, r0
 800884c:	2301      	movs	r3, #1
 800884e:	e7f0      	b.n	8008832 <_svfiprintf_r+0x192>
 8008850:	ab03      	add	r3, sp, #12
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	462a      	mov	r2, r5
 8008856:	4b0e      	ldr	r3, [pc, #56]	@ (8008890 <_svfiprintf_r+0x1f0>)
 8008858:	a904      	add	r1, sp, #16
 800885a:	4638      	mov	r0, r7
 800885c:	f7fc ffa2 	bl	80057a4 <_printf_float>
 8008860:	1c42      	adds	r2, r0, #1
 8008862:	4606      	mov	r6, r0
 8008864:	d1d6      	bne.n	8008814 <_svfiprintf_r+0x174>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	065b      	lsls	r3, r3, #25
 800886a:	f53f af2d 	bmi.w	80086c8 <_svfiprintf_r+0x28>
 800886e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008870:	e72c      	b.n	80086cc <_svfiprintf_r+0x2c>
 8008872:	ab03      	add	r3, sp, #12
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	462a      	mov	r2, r5
 8008878:	4b05      	ldr	r3, [pc, #20]	@ (8008890 <_svfiprintf_r+0x1f0>)
 800887a:	a904      	add	r1, sp, #16
 800887c:	4638      	mov	r0, r7
 800887e:	f7fd fa29 	bl	8005cd4 <_printf_i>
 8008882:	e7ed      	b.n	8008860 <_svfiprintf_r+0x1c0>
 8008884:	0800a05e 	.word	0x0800a05e
 8008888:	0800a068 	.word	0x0800a068
 800888c:	080057a5 	.word	0x080057a5
 8008890:	080085eb 	.word	0x080085eb
 8008894:	0800a064 	.word	0x0800a064

08008898 <malloc>:
 8008898:	4b02      	ldr	r3, [pc, #8]	@ (80088a4 <malloc+0xc>)
 800889a:	4601      	mov	r1, r0
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f000 b825 	b.w	80088ec <_malloc_r>
 80088a2:	bf00      	nop
 80088a4:	20000184 	.word	0x20000184

080088a8 <sbrk_aligned>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4e0f      	ldr	r6, [pc, #60]	@ (80088e8 <sbrk_aligned+0x40>)
 80088ac:	460c      	mov	r4, r1
 80088ae:	6831      	ldr	r1, [r6, #0]
 80088b0:	4605      	mov	r5, r0
 80088b2:	b911      	cbnz	r1, 80088ba <sbrk_aligned+0x12>
 80088b4:	f000 fee2 	bl	800967c <_sbrk_r>
 80088b8:	6030      	str	r0, [r6, #0]
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 fedd 	bl	800967c <_sbrk_r>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d103      	bne.n	80088ce <sbrk_aligned+0x26>
 80088c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80088ca:	4620      	mov	r0, r4
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d0f8      	beq.n	80088ca <sbrk_aligned+0x22>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 fece 	bl	800967c <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d1f2      	bne.n	80088ca <sbrk_aligned+0x22>
 80088e4:	e7ef      	b.n	80088c6 <sbrk_aligned+0x1e>
 80088e6:	bf00      	nop
 80088e8:	200003a4 	.word	0x200003a4

080088ec <_malloc_r>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	1ccd      	adds	r5, r1, #3
 80088f2:	f025 0503 	bic.w	r5, r5, #3
 80088f6:	3508      	adds	r5, #8
 80088f8:	2d0c      	cmp	r5, #12
 80088fa:	bf38      	it	cc
 80088fc:	250c      	movcc	r5, #12
 80088fe:	2d00      	cmp	r5, #0
 8008900:	4606      	mov	r6, r0
 8008902:	db01      	blt.n	8008908 <_malloc_r+0x1c>
 8008904:	42a9      	cmp	r1, r5
 8008906:	d904      	bls.n	8008912 <_malloc_r+0x26>
 8008908:	230c      	movs	r3, #12
 800890a:	6033      	str	r3, [r6, #0]
 800890c:	2000      	movs	r0, #0
 800890e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089e8 <_malloc_r+0xfc>
 8008916:	f000 f927 	bl	8008b68 <__malloc_lock>
 800891a:	f8d8 3000 	ldr.w	r3, [r8]
 800891e:	461c      	mov	r4, r3
 8008920:	bb44      	cbnz	r4, 8008974 <_malloc_r+0x88>
 8008922:	4629      	mov	r1, r5
 8008924:	4630      	mov	r0, r6
 8008926:	f7ff ffbf 	bl	80088a8 <sbrk_aligned>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	4604      	mov	r4, r0
 800892e:	d158      	bne.n	80089e2 <_malloc_r+0xf6>
 8008930:	f8d8 4000 	ldr.w	r4, [r8]
 8008934:	4627      	mov	r7, r4
 8008936:	2f00      	cmp	r7, #0
 8008938:	d143      	bne.n	80089c2 <_malloc_r+0xd6>
 800893a:	2c00      	cmp	r4, #0
 800893c:	d04b      	beq.n	80089d6 <_malloc_r+0xea>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	4639      	mov	r1, r7
 8008942:	4630      	mov	r0, r6
 8008944:	eb04 0903 	add.w	r9, r4, r3
 8008948:	f000 fe98 	bl	800967c <_sbrk_r>
 800894c:	4581      	cmp	r9, r0
 800894e:	d142      	bne.n	80089d6 <_malloc_r+0xea>
 8008950:	6821      	ldr	r1, [r4, #0]
 8008952:	1a6d      	subs	r5, r5, r1
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ffa6 	bl	80088a8 <sbrk_aligned>
 800895c:	3001      	adds	r0, #1
 800895e:	d03a      	beq.n	80089d6 <_malloc_r+0xea>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	442b      	add	r3, r5
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	f8d8 3000 	ldr.w	r3, [r8]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	bb62      	cbnz	r2, 80089c8 <_malloc_r+0xdc>
 800896e:	f8c8 7000 	str.w	r7, [r8]
 8008972:	e00f      	b.n	8008994 <_malloc_r+0xa8>
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	1b52      	subs	r2, r2, r5
 8008978:	d420      	bmi.n	80089bc <_malloc_r+0xd0>
 800897a:	2a0b      	cmp	r2, #11
 800897c:	d917      	bls.n	80089ae <_malloc_r+0xc2>
 800897e:	1961      	adds	r1, r4, r5
 8008980:	42a3      	cmp	r3, r4
 8008982:	6025      	str	r5, [r4, #0]
 8008984:	bf18      	it	ne
 8008986:	6059      	strne	r1, [r3, #4]
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	bf08      	it	eq
 800898c:	f8c8 1000 	streq.w	r1, [r8]
 8008990:	5162      	str	r2, [r4, r5]
 8008992:	604b      	str	r3, [r1, #4]
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f8ed 	bl	8008b74 <__malloc_unlock>
 800899a:	f104 000b 	add.w	r0, r4, #11
 800899e:	1d23      	adds	r3, r4, #4
 80089a0:	f020 0007 	bic.w	r0, r0, #7
 80089a4:	1ac2      	subs	r2, r0, r3
 80089a6:	bf1c      	itt	ne
 80089a8:	1a1b      	subne	r3, r3, r0
 80089aa:	50a3      	strne	r3, [r4, r2]
 80089ac:	e7af      	b.n	800890e <_malloc_r+0x22>
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	bf0c      	ite	eq
 80089b4:	f8c8 2000 	streq.w	r2, [r8]
 80089b8:	605a      	strne	r2, [r3, #4]
 80089ba:	e7eb      	b.n	8008994 <_malloc_r+0xa8>
 80089bc:	4623      	mov	r3, r4
 80089be:	6864      	ldr	r4, [r4, #4]
 80089c0:	e7ae      	b.n	8008920 <_malloc_r+0x34>
 80089c2:	463c      	mov	r4, r7
 80089c4:	687f      	ldr	r7, [r7, #4]
 80089c6:	e7b6      	b.n	8008936 <_malloc_r+0x4a>
 80089c8:	461a      	mov	r2, r3
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d1fb      	bne.n	80089c8 <_malloc_r+0xdc>
 80089d0:	2300      	movs	r3, #0
 80089d2:	6053      	str	r3, [r2, #4]
 80089d4:	e7de      	b.n	8008994 <_malloc_r+0xa8>
 80089d6:	230c      	movs	r3, #12
 80089d8:	6033      	str	r3, [r6, #0]
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 f8ca 	bl	8008b74 <__malloc_unlock>
 80089e0:	e794      	b.n	800890c <_malloc_r+0x20>
 80089e2:	6005      	str	r5, [r0, #0]
 80089e4:	e7d6      	b.n	8008994 <_malloc_r+0xa8>
 80089e6:	bf00      	nop
 80089e8:	200003a8 	.word	0x200003a8

080089ec <__ascii_mbtowc>:
 80089ec:	b082      	sub	sp, #8
 80089ee:	b901      	cbnz	r1, 80089f2 <__ascii_mbtowc+0x6>
 80089f0:	a901      	add	r1, sp, #4
 80089f2:	b142      	cbz	r2, 8008a06 <__ascii_mbtowc+0x1a>
 80089f4:	b14b      	cbz	r3, 8008a0a <__ascii_mbtowc+0x1e>
 80089f6:	7813      	ldrb	r3, [r2, #0]
 80089f8:	600b      	str	r3, [r1, #0]
 80089fa:	7812      	ldrb	r2, [r2, #0]
 80089fc:	1e10      	subs	r0, r2, #0
 80089fe:	bf18      	it	ne
 8008a00:	2001      	movne	r0, #1
 8008a02:	b002      	add	sp, #8
 8008a04:	4770      	bx	lr
 8008a06:	4610      	mov	r0, r2
 8008a08:	e7fb      	b.n	8008a02 <__ascii_mbtowc+0x16>
 8008a0a:	f06f 0001 	mvn.w	r0, #1
 8008a0e:	e7f8      	b.n	8008a02 <__ascii_mbtowc+0x16>

08008a10 <__sflush_r>:
 8008a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a18:	0716      	lsls	r6, r2, #28
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	d454      	bmi.n	8008aca <__sflush_r+0xba>
 8008a20:	684b      	ldr	r3, [r1, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dc02      	bgt.n	8008a2c <__sflush_r+0x1c>
 8008a26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dd48      	ble.n	8008abe <__sflush_r+0xae>
 8008a2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a2e:	2e00      	cmp	r6, #0
 8008a30:	d045      	beq.n	8008abe <__sflush_r+0xae>
 8008a32:	2300      	movs	r3, #0
 8008a34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a38:	682f      	ldr	r7, [r5, #0]
 8008a3a:	6a21      	ldr	r1, [r4, #32]
 8008a3c:	602b      	str	r3, [r5, #0]
 8008a3e:	d030      	beq.n	8008aa2 <__sflush_r+0x92>
 8008a40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	0759      	lsls	r1, r3, #29
 8008a46:	d505      	bpl.n	8008a54 <__sflush_r+0x44>
 8008a48:	6863      	ldr	r3, [r4, #4]
 8008a4a:	1ad2      	subs	r2, r2, r3
 8008a4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a4e:	b10b      	cbz	r3, 8008a54 <__sflush_r+0x44>
 8008a50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a52:	1ad2      	subs	r2, r2, r3
 8008a54:	2300      	movs	r3, #0
 8008a56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a58:	6a21      	ldr	r1, [r4, #32]
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b0      	blx	r6
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	d106      	bne.n	8008a72 <__sflush_r+0x62>
 8008a64:	6829      	ldr	r1, [r5, #0]
 8008a66:	291d      	cmp	r1, #29
 8008a68:	d82b      	bhi.n	8008ac2 <__sflush_r+0xb2>
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b14 <__sflush_r+0x104>)
 8008a6c:	410a      	asrs	r2, r1
 8008a6e:	07d6      	lsls	r6, r2, #31
 8008a70:	d427      	bmi.n	8008ac2 <__sflush_r+0xb2>
 8008a72:	2200      	movs	r2, #0
 8008a74:	6062      	str	r2, [r4, #4]
 8008a76:	04d9      	lsls	r1, r3, #19
 8008a78:	6922      	ldr	r2, [r4, #16]
 8008a7a:	6022      	str	r2, [r4, #0]
 8008a7c:	d504      	bpl.n	8008a88 <__sflush_r+0x78>
 8008a7e:	1c42      	adds	r2, r0, #1
 8008a80:	d101      	bne.n	8008a86 <__sflush_r+0x76>
 8008a82:	682b      	ldr	r3, [r5, #0]
 8008a84:	b903      	cbnz	r3, 8008a88 <__sflush_r+0x78>
 8008a86:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a8a:	602f      	str	r7, [r5, #0]
 8008a8c:	b1b9      	cbz	r1, 8008abe <__sflush_r+0xae>
 8008a8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a92:	4299      	cmp	r1, r3
 8008a94:	d002      	beq.n	8008a9c <__sflush_r+0x8c>
 8008a96:	4628      	mov	r0, r5
 8008a98:	f000 fe44 	bl	8009724 <_free_r>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aa0:	e00d      	b.n	8008abe <__sflush_r+0xae>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b0      	blx	r6
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	1c50      	adds	r0, r2, #1
 8008aac:	d1c9      	bne.n	8008a42 <__sflush_r+0x32>
 8008aae:	682b      	ldr	r3, [r5, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0c6      	beq.n	8008a42 <__sflush_r+0x32>
 8008ab4:	2b1d      	cmp	r3, #29
 8008ab6:	d001      	beq.n	8008abc <__sflush_r+0xac>
 8008ab8:	2b16      	cmp	r3, #22
 8008aba:	d11e      	bne.n	8008afa <__sflush_r+0xea>
 8008abc:	602f      	str	r7, [r5, #0]
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e022      	b.n	8008b08 <__sflush_r+0xf8>
 8008ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac6:	b21b      	sxth	r3, r3
 8008ac8:	e01b      	b.n	8008b02 <__sflush_r+0xf2>
 8008aca:	690f      	ldr	r7, [r1, #16]
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	d0f6      	beq.n	8008abe <__sflush_r+0xae>
 8008ad0:	0793      	lsls	r3, r2, #30
 8008ad2:	680e      	ldr	r6, [r1, #0]
 8008ad4:	bf08      	it	eq
 8008ad6:	694b      	ldreq	r3, [r1, #20]
 8008ad8:	600f      	str	r7, [r1, #0]
 8008ada:	bf18      	it	ne
 8008adc:	2300      	movne	r3, #0
 8008ade:	eba6 0807 	sub.w	r8, r6, r7
 8008ae2:	608b      	str	r3, [r1, #8]
 8008ae4:	f1b8 0f00 	cmp.w	r8, #0
 8008ae8:	dde9      	ble.n	8008abe <__sflush_r+0xae>
 8008aea:	6a21      	ldr	r1, [r4, #32]
 8008aec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008aee:	4643      	mov	r3, r8
 8008af0:	463a      	mov	r2, r7
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b0      	blx	r6
 8008af6:	2800      	cmp	r0, #0
 8008af8:	dc08      	bgt.n	8008b0c <__sflush_r+0xfc>
 8008afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b0c:	4407      	add	r7, r0
 8008b0e:	eba8 0800 	sub.w	r8, r8, r0
 8008b12:	e7e7      	b.n	8008ae4 <__sflush_r+0xd4>
 8008b14:	dfbffffe 	.word	0xdfbffffe

08008b18 <_fflush_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	690b      	ldr	r3, [r1, #16]
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	b913      	cbnz	r3, 8008b28 <_fflush_r+0x10>
 8008b22:	2500      	movs	r5, #0
 8008b24:	4628      	mov	r0, r5
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	b118      	cbz	r0, 8008b32 <_fflush_r+0x1a>
 8008b2a:	6a03      	ldr	r3, [r0, #32]
 8008b2c:	b90b      	cbnz	r3, 8008b32 <_fflush_r+0x1a>
 8008b2e:	f7fd fcb1 	bl	8006494 <__sinit>
 8008b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0f3      	beq.n	8008b22 <_fflush_r+0xa>
 8008b3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b3c:	07d0      	lsls	r0, r2, #31
 8008b3e:	d404      	bmi.n	8008b4a <_fflush_r+0x32>
 8008b40:	0599      	lsls	r1, r3, #22
 8008b42:	d402      	bmi.n	8008b4a <_fflush_r+0x32>
 8008b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b46:	f7fe fba8 	bl	800729a <__retarget_lock_acquire_recursive>
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	f7ff ff5f 	bl	8008a10 <__sflush_r>
 8008b52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b54:	07da      	lsls	r2, r3, #31
 8008b56:	4605      	mov	r5, r0
 8008b58:	d4e4      	bmi.n	8008b24 <_fflush_r+0xc>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	059b      	lsls	r3, r3, #22
 8008b5e:	d4e1      	bmi.n	8008b24 <_fflush_r+0xc>
 8008b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b62:	f7fe fb9b 	bl	800729c <__retarget_lock_release_recursive>
 8008b66:	e7dd      	b.n	8008b24 <_fflush_r+0xc>

08008b68 <__malloc_lock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	@ (8008b70 <__malloc_lock+0x8>)
 8008b6a:	f7fe bb96 	b.w	800729a <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	200003a0 	.word	0x200003a0

08008b74 <__malloc_unlock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	@ (8008b7c <__malloc_unlock+0x8>)
 8008b76:	f7fe bb91 	b.w	800729c <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	200003a0 	.word	0x200003a0

08008b80 <_Balloc>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	69c6      	ldr	r6, [r0, #28]
 8008b84:	4604      	mov	r4, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	b976      	cbnz	r6, 8008ba8 <_Balloc+0x28>
 8008b8a:	2010      	movs	r0, #16
 8008b8c:	f7ff fe84 	bl	8008898 <malloc>
 8008b90:	4602      	mov	r2, r0
 8008b92:	61e0      	str	r0, [r4, #28]
 8008b94:	b920      	cbnz	r0, 8008ba0 <_Balloc+0x20>
 8008b96:	4b18      	ldr	r3, [pc, #96]	@ (8008bf8 <_Balloc+0x78>)
 8008b98:	4818      	ldr	r0, [pc, #96]	@ (8008bfc <_Balloc+0x7c>)
 8008b9a:	216b      	movs	r1, #107	@ 0x6b
 8008b9c:	f000 fd90 	bl	80096c0 <__assert_func>
 8008ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ba4:	6006      	str	r6, [r0, #0]
 8008ba6:	60c6      	str	r6, [r0, #12]
 8008ba8:	69e6      	ldr	r6, [r4, #28]
 8008baa:	68f3      	ldr	r3, [r6, #12]
 8008bac:	b183      	cbz	r3, 8008bd0 <_Balloc+0x50>
 8008bae:	69e3      	ldr	r3, [r4, #28]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bb6:	b9b8      	cbnz	r0, 8008be8 <_Balloc+0x68>
 8008bb8:	2101      	movs	r1, #1
 8008bba:	fa01 f605 	lsl.w	r6, r1, r5
 8008bbe:	1d72      	adds	r2, r6, #5
 8008bc0:	0092      	lsls	r2, r2, #2
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 fd9a 	bl	80096fc <_calloc_r>
 8008bc8:	b160      	cbz	r0, 8008be4 <_Balloc+0x64>
 8008bca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bce:	e00e      	b.n	8008bee <_Balloc+0x6e>
 8008bd0:	2221      	movs	r2, #33	@ 0x21
 8008bd2:	2104      	movs	r1, #4
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f000 fd91 	bl	80096fc <_calloc_r>
 8008bda:	69e3      	ldr	r3, [r4, #28]
 8008bdc:	60f0      	str	r0, [r6, #12]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e4      	bne.n	8008bae <_Balloc+0x2e>
 8008be4:	2000      	movs	r0, #0
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	6802      	ldr	r2, [r0, #0]
 8008bea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bf4:	e7f7      	b.n	8008be6 <_Balloc+0x66>
 8008bf6:	bf00      	nop
 8008bf8:	08009f7e 	.word	0x08009f7e
 8008bfc:	0800a06f 	.word	0x0800a06f

08008c00 <_Bfree>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	69c6      	ldr	r6, [r0, #28]
 8008c04:	4605      	mov	r5, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	b976      	cbnz	r6, 8008c28 <_Bfree+0x28>
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	f7ff fe44 	bl	8008898 <malloc>
 8008c10:	4602      	mov	r2, r0
 8008c12:	61e8      	str	r0, [r5, #28]
 8008c14:	b920      	cbnz	r0, 8008c20 <_Bfree+0x20>
 8008c16:	4b09      	ldr	r3, [pc, #36]	@ (8008c3c <_Bfree+0x3c>)
 8008c18:	4809      	ldr	r0, [pc, #36]	@ (8008c40 <_Bfree+0x40>)
 8008c1a:	218f      	movs	r1, #143	@ 0x8f
 8008c1c:	f000 fd50 	bl	80096c0 <__assert_func>
 8008c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c24:	6006      	str	r6, [r0, #0]
 8008c26:	60c6      	str	r6, [r0, #12]
 8008c28:	b13c      	cbz	r4, 8008c3a <_Bfree+0x3a>
 8008c2a:	69eb      	ldr	r3, [r5, #28]
 8008c2c:	6862      	ldr	r2, [r4, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c34:	6021      	str	r1, [r4, #0]
 8008c36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	08009f7e 	.word	0x08009f7e
 8008c40:	0800a06f 	.word	0x0800a06f

08008c44 <__multadd>:
 8008c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	690d      	ldr	r5, [r1, #16]
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	461e      	mov	r6, r3
 8008c50:	f101 0c14 	add.w	ip, r1, #20
 8008c54:	2000      	movs	r0, #0
 8008c56:	f8dc 3000 	ldr.w	r3, [ip]
 8008c5a:	b299      	uxth	r1, r3
 8008c5c:	fb02 6101 	mla	r1, r2, r1, r6
 8008c60:	0c1e      	lsrs	r6, r3, #16
 8008c62:	0c0b      	lsrs	r3, r1, #16
 8008c64:	fb02 3306 	mla	r3, r2, r6, r3
 8008c68:	b289      	uxth	r1, r1
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c70:	4285      	cmp	r5, r0
 8008c72:	f84c 1b04 	str.w	r1, [ip], #4
 8008c76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c7a:	dcec      	bgt.n	8008c56 <__multadd+0x12>
 8008c7c:	b30e      	cbz	r6, 8008cc2 <__multadd+0x7e>
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	dc19      	bgt.n	8008cb8 <__multadd+0x74>
 8008c84:	6861      	ldr	r1, [r4, #4]
 8008c86:	4638      	mov	r0, r7
 8008c88:	3101      	adds	r1, #1
 8008c8a:	f7ff ff79 	bl	8008b80 <_Balloc>
 8008c8e:	4680      	mov	r8, r0
 8008c90:	b928      	cbnz	r0, 8008c9e <__multadd+0x5a>
 8008c92:	4602      	mov	r2, r0
 8008c94:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc8 <__multadd+0x84>)
 8008c96:	480d      	ldr	r0, [pc, #52]	@ (8008ccc <__multadd+0x88>)
 8008c98:	21ba      	movs	r1, #186	@ 0xba
 8008c9a:	f000 fd11 	bl	80096c0 <__assert_func>
 8008c9e:	6922      	ldr	r2, [r4, #16]
 8008ca0:	3202      	adds	r2, #2
 8008ca2:	f104 010c 	add.w	r1, r4, #12
 8008ca6:	0092      	lsls	r2, r2, #2
 8008ca8:	300c      	adds	r0, #12
 8008caa:	f7fe faf8 	bl	800729e <memcpy>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff ffa5 	bl	8008c00 <_Bfree>
 8008cb6:	4644      	mov	r4, r8
 8008cb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	615e      	str	r6, [r3, #20]
 8008cc0:	6125      	str	r5, [r4, #16]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	08009fed 	.word	0x08009fed
 8008ccc:	0800a06f 	.word	0x0800a06f

08008cd0 <__s2b>:
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	4615      	mov	r5, r2
 8008cd8:	461f      	mov	r7, r3
 8008cda:	2209      	movs	r2, #9
 8008cdc:	3308      	adds	r3, #8
 8008cde:	4606      	mov	r6, r0
 8008ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	db09      	blt.n	8008d00 <__s2b+0x30>
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff ff47 	bl	8008b80 <_Balloc>
 8008cf2:	b940      	cbnz	r0, 8008d06 <__s2b+0x36>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	4b19      	ldr	r3, [pc, #100]	@ (8008d5c <__s2b+0x8c>)
 8008cf8:	4819      	ldr	r0, [pc, #100]	@ (8008d60 <__s2b+0x90>)
 8008cfa:	21d3      	movs	r1, #211	@ 0xd3
 8008cfc:	f000 fce0 	bl	80096c0 <__assert_func>
 8008d00:	0052      	lsls	r2, r2, #1
 8008d02:	3101      	adds	r1, #1
 8008d04:	e7f0      	b.n	8008ce8 <__s2b+0x18>
 8008d06:	9b08      	ldr	r3, [sp, #32]
 8008d08:	6143      	str	r3, [r0, #20]
 8008d0a:	2d09      	cmp	r5, #9
 8008d0c:	f04f 0301 	mov.w	r3, #1
 8008d10:	6103      	str	r3, [r0, #16]
 8008d12:	dd16      	ble.n	8008d42 <__s2b+0x72>
 8008d14:	f104 0909 	add.w	r9, r4, #9
 8008d18:	46c8      	mov	r8, r9
 8008d1a:	442c      	add	r4, r5
 8008d1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d20:	4601      	mov	r1, r0
 8008d22:	3b30      	subs	r3, #48	@ 0x30
 8008d24:	220a      	movs	r2, #10
 8008d26:	4630      	mov	r0, r6
 8008d28:	f7ff ff8c 	bl	8008c44 <__multadd>
 8008d2c:	45a0      	cmp	r8, r4
 8008d2e:	d1f5      	bne.n	8008d1c <__s2b+0x4c>
 8008d30:	f1a5 0408 	sub.w	r4, r5, #8
 8008d34:	444c      	add	r4, r9
 8008d36:	1b2d      	subs	r5, r5, r4
 8008d38:	1963      	adds	r3, r4, r5
 8008d3a:	42bb      	cmp	r3, r7
 8008d3c:	db04      	blt.n	8008d48 <__s2b+0x78>
 8008d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d42:	340a      	adds	r4, #10
 8008d44:	2509      	movs	r5, #9
 8008d46:	e7f6      	b.n	8008d36 <__s2b+0x66>
 8008d48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	3b30      	subs	r3, #48	@ 0x30
 8008d50:	220a      	movs	r2, #10
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7ff ff76 	bl	8008c44 <__multadd>
 8008d58:	e7ee      	b.n	8008d38 <__s2b+0x68>
 8008d5a:	bf00      	nop
 8008d5c:	08009fed 	.word	0x08009fed
 8008d60:	0800a06f 	.word	0x0800a06f

08008d64 <__hi0bits>:
 8008d64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d68:	4603      	mov	r3, r0
 8008d6a:	bf36      	itet	cc
 8008d6c:	0403      	lslcc	r3, r0, #16
 8008d6e:	2000      	movcs	r0, #0
 8008d70:	2010      	movcc	r0, #16
 8008d72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d76:	bf3c      	itt	cc
 8008d78:	021b      	lslcc	r3, r3, #8
 8008d7a:	3008      	addcc	r0, #8
 8008d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d80:	bf3c      	itt	cc
 8008d82:	011b      	lslcc	r3, r3, #4
 8008d84:	3004      	addcc	r0, #4
 8008d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d8a:	bf3c      	itt	cc
 8008d8c:	009b      	lslcc	r3, r3, #2
 8008d8e:	3002      	addcc	r0, #2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	db05      	blt.n	8008da0 <__hi0bits+0x3c>
 8008d94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d98:	f100 0001 	add.w	r0, r0, #1
 8008d9c:	bf08      	it	eq
 8008d9e:	2020      	moveq	r0, #32
 8008da0:	4770      	bx	lr

08008da2 <__lo0bits>:
 8008da2:	6803      	ldr	r3, [r0, #0]
 8008da4:	4602      	mov	r2, r0
 8008da6:	f013 0007 	ands.w	r0, r3, #7
 8008daa:	d00b      	beq.n	8008dc4 <__lo0bits+0x22>
 8008dac:	07d9      	lsls	r1, r3, #31
 8008dae:	d421      	bmi.n	8008df4 <__lo0bits+0x52>
 8008db0:	0798      	lsls	r0, r3, #30
 8008db2:	bf49      	itett	mi
 8008db4:	085b      	lsrmi	r3, r3, #1
 8008db6:	089b      	lsrpl	r3, r3, #2
 8008db8:	2001      	movmi	r0, #1
 8008dba:	6013      	strmi	r3, [r2, #0]
 8008dbc:	bf5c      	itt	pl
 8008dbe:	6013      	strpl	r3, [r2, #0]
 8008dc0:	2002      	movpl	r0, #2
 8008dc2:	4770      	bx	lr
 8008dc4:	b299      	uxth	r1, r3
 8008dc6:	b909      	cbnz	r1, 8008dcc <__lo0bits+0x2a>
 8008dc8:	0c1b      	lsrs	r3, r3, #16
 8008dca:	2010      	movs	r0, #16
 8008dcc:	b2d9      	uxtb	r1, r3
 8008dce:	b909      	cbnz	r1, 8008dd4 <__lo0bits+0x32>
 8008dd0:	3008      	adds	r0, #8
 8008dd2:	0a1b      	lsrs	r3, r3, #8
 8008dd4:	0719      	lsls	r1, r3, #28
 8008dd6:	bf04      	itt	eq
 8008dd8:	091b      	lsreq	r3, r3, #4
 8008dda:	3004      	addeq	r0, #4
 8008ddc:	0799      	lsls	r1, r3, #30
 8008dde:	bf04      	itt	eq
 8008de0:	089b      	lsreq	r3, r3, #2
 8008de2:	3002      	addeq	r0, #2
 8008de4:	07d9      	lsls	r1, r3, #31
 8008de6:	d403      	bmi.n	8008df0 <__lo0bits+0x4e>
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	f100 0001 	add.w	r0, r0, #1
 8008dee:	d003      	beq.n	8008df8 <__lo0bits+0x56>
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	4770      	bx	lr
 8008df4:	2000      	movs	r0, #0
 8008df6:	4770      	bx	lr
 8008df8:	2020      	movs	r0, #32
 8008dfa:	4770      	bx	lr

08008dfc <__i2b>:
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	460c      	mov	r4, r1
 8008e00:	2101      	movs	r1, #1
 8008e02:	f7ff febd 	bl	8008b80 <_Balloc>
 8008e06:	4602      	mov	r2, r0
 8008e08:	b928      	cbnz	r0, 8008e16 <__i2b+0x1a>
 8008e0a:	4b05      	ldr	r3, [pc, #20]	@ (8008e20 <__i2b+0x24>)
 8008e0c:	4805      	ldr	r0, [pc, #20]	@ (8008e24 <__i2b+0x28>)
 8008e0e:	f240 1145 	movw	r1, #325	@ 0x145
 8008e12:	f000 fc55 	bl	80096c0 <__assert_func>
 8008e16:	2301      	movs	r3, #1
 8008e18:	6144      	str	r4, [r0, #20]
 8008e1a:	6103      	str	r3, [r0, #16]
 8008e1c:	bd10      	pop	{r4, pc}
 8008e1e:	bf00      	nop
 8008e20:	08009fed 	.word	0x08009fed
 8008e24:	0800a06f 	.word	0x0800a06f

08008e28 <__multiply>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	690a      	ldr	r2, [r1, #16]
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bfa8      	it	ge
 8008e36:	4623      	movge	r3, r4
 8008e38:	460f      	mov	r7, r1
 8008e3a:	bfa4      	itt	ge
 8008e3c:	460c      	movge	r4, r1
 8008e3e:	461f      	movge	r7, r3
 8008e40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	6861      	ldr	r1, [r4, #4]
 8008e4c:	eb0a 0609 	add.w	r6, sl, r9
 8008e50:	42b3      	cmp	r3, r6
 8008e52:	b085      	sub	sp, #20
 8008e54:	bfb8      	it	lt
 8008e56:	3101      	addlt	r1, #1
 8008e58:	f7ff fe92 	bl	8008b80 <_Balloc>
 8008e5c:	b930      	cbnz	r0, 8008e6c <__multiply+0x44>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	4b44      	ldr	r3, [pc, #272]	@ (8008f74 <__multiply+0x14c>)
 8008e62:	4845      	ldr	r0, [pc, #276]	@ (8008f78 <__multiply+0x150>)
 8008e64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e68:	f000 fc2a 	bl	80096c0 <__assert_func>
 8008e6c:	f100 0514 	add.w	r5, r0, #20
 8008e70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e74:	462b      	mov	r3, r5
 8008e76:	2200      	movs	r2, #0
 8008e78:	4543      	cmp	r3, r8
 8008e7a:	d321      	bcc.n	8008ec0 <__multiply+0x98>
 8008e7c:	f107 0114 	add.w	r1, r7, #20
 8008e80:	f104 0214 	add.w	r2, r4, #20
 8008e84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e8c:	9302      	str	r3, [sp, #8]
 8008e8e:	1b13      	subs	r3, r2, r4
 8008e90:	3b15      	subs	r3, #21
 8008e92:	f023 0303 	bic.w	r3, r3, #3
 8008e96:	3304      	adds	r3, #4
 8008e98:	f104 0715 	add.w	r7, r4, #21
 8008e9c:	42ba      	cmp	r2, r7
 8008e9e:	bf38      	it	cc
 8008ea0:	2304      	movcc	r3, #4
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	9b02      	ldr	r3, [sp, #8]
 8008ea6:	9103      	str	r1, [sp, #12]
 8008ea8:	428b      	cmp	r3, r1
 8008eaa:	d80c      	bhi.n	8008ec6 <__multiply+0x9e>
 8008eac:	2e00      	cmp	r6, #0
 8008eae:	dd03      	ble.n	8008eb8 <__multiply+0x90>
 8008eb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d05b      	beq.n	8008f70 <__multiply+0x148>
 8008eb8:	6106      	str	r6, [r0, #16]
 8008eba:	b005      	add	sp, #20
 8008ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec0:	f843 2b04 	str.w	r2, [r3], #4
 8008ec4:	e7d8      	b.n	8008e78 <__multiply+0x50>
 8008ec6:	f8b1 a000 	ldrh.w	sl, [r1]
 8008eca:	f1ba 0f00 	cmp.w	sl, #0
 8008ece:	d024      	beq.n	8008f1a <__multiply+0xf2>
 8008ed0:	f104 0e14 	add.w	lr, r4, #20
 8008ed4:	46a9      	mov	r9, r5
 8008ed6:	f04f 0c00 	mov.w	ip, #0
 8008eda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ede:	f8d9 3000 	ldr.w	r3, [r9]
 8008ee2:	fa1f fb87 	uxth.w	fp, r7
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008eec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ef0:	f8d9 7000 	ldr.w	r7, [r9]
 8008ef4:	4463      	add	r3, ip
 8008ef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008efa:	fb0a c70b 	mla	r7, sl, fp, ip
 8008efe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f08:	4572      	cmp	r2, lr
 8008f0a:	f849 3b04 	str.w	r3, [r9], #4
 8008f0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f12:	d8e2      	bhi.n	8008eda <__multiply+0xb2>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	f845 c003 	str.w	ip, [r5, r3]
 8008f1a:	9b03      	ldr	r3, [sp, #12]
 8008f1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f20:	3104      	adds	r1, #4
 8008f22:	f1b9 0f00 	cmp.w	r9, #0
 8008f26:	d021      	beq.n	8008f6c <__multiply+0x144>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	f104 0c14 	add.w	ip, r4, #20
 8008f2e:	46ae      	mov	lr, r5
 8008f30:	f04f 0a00 	mov.w	sl, #0
 8008f34:	f8bc b000 	ldrh.w	fp, [ip]
 8008f38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f3c:	fb09 770b 	mla	r7, r9, fp, r7
 8008f40:	4457      	add	r7, sl
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f48:	f84e 3b04 	str.w	r3, [lr], #4
 8008f4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f54:	f8be 3000 	ldrh.w	r3, [lr]
 8008f58:	fb09 330a 	mla	r3, r9, sl, r3
 8008f5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f60:	4562      	cmp	r2, ip
 8008f62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f66:	d8e5      	bhi.n	8008f34 <__multiply+0x10c>
 8008f68:	9f01      	ldr	r7, [sp, #4]
 8008f6a:	51eb      	str	r3, [r5, r7]
 8008f6c:	3504      	adds	r5, #4
 8008f6e:	e799      	b.n	8008ea4 <__multiply+0x7c>
 8008f70:	3e01      	subs	r6, #1
 8008f72:	e79b      	b.n	8008eac <__multiply+0x84>
 8008f74:	08009fed 	.word	0x08009fed
 8008f78:	0800a06f 	.word	0x0800a06f

08008f7c <__pow5mult>:
 8008f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f80:	4615      	mov	r5, r2
 8008f82:	f012 0203 	ands.w	r2, r2, #3
 8008f86:	4607      	mov	r7, r0
 8008f88:	460e      	mov	r6, r1
 8008f8a:	d007      	beq.n	8008f9c <__pow5mult+0x20>
 8008f8c:	4c25      	ldr	r4, [pc, #148]	@ (8009024 <__pow5mult+0xa8>)
 8008f8e:	3a01      	subs	r2, #1
 8008f90:	2300      	movs	r3, #0
 8008f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f96:	f7ff fe55 	bl	8008c44 <__multadd>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	10ad      	asrs	r5, r5, #2
 8008f9e:	d03d      	beq.n	800901c <__pow5mult+0xa0>
 8008fa0:	69fc      	ldr	r4, [r7, #28]
 8008fa2:	b97c      	cbnz	r4, 8008fc4 <__pow5mult+0x48>
 8008fa4:	2010      	movs	r0, #16
 8008fa6:	f7ff fc77 	bl	8008898 <malloc>
 8008faa:	4602      	mov	r2, r0
 8008fac:	61f8      	str	r0, [r7, #28]
 8008fae:	b928      	cbnz	r0, 8008fbc <__pow5mult+0x40>
 8008fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009028 <__pow5mult+0xac>)
 8008fb2:	481e      	ldr	r0, [pc, #120]	@ (800902c <__pow5mult+0xb0>)
 8008fb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fb8:	f000 fb82 	bl	80096c0 <__assert_func>
 8008fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc0:	6004      	str	r4, [r0, #0]
 8008fc2:	60c4      	str	r4, [r0, #12]
 8008fc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fcc:	b94c      	cbnz	r4, 8008fe2 <__pow5mult+0x66>
 8008fce:	f240 2171 	movw	r1, #625	@ 0x271
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f7ff ff12 	bl	8008dfc <__i2b>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fde:	4604      	mov	r4, r0
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	f04f 0900 	mov.w	r9, #0
 8008fe6:	07eb      	lsls	r3, r5, #31
 8008fe8:	d50a      	bpl.n	8009000 <__pow5mult+0x84>
 8008fea:	4631      	mov	r1, r6
 8008fec:	4622      	mov	r2, r4
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff ff1a 	bl	8008e28 <__multiply>
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff fe01 	bl	8008c00 <_Bfree>
 8008ffe:	4646      	mov	r6, r8
 8009000:	106d      	asrs	r5, r5, #1
 8009002:	d00b      	beq.n	800901c <__pow5mult+0xa0>
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	b938      	cbnz	r0, 8009018 <__pow5mult+0x9c>
 8009008:	4622      	mov	r2, r4
 800900a:	4621      	mov	r1, r4
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff ff0b 	bl	8008e28 <__multiply>
 8009012:	6020      	str	r0, [r4, #0]
 8009014:	f8c0 9000 	str.w	r9, [r0]
 8009018:	4604      	mov	r4, r0
 800901a:	e7e4      	b.n	8008fe6 <__pow5mult+0x6a>
 800901c:	4630      	mov	r0, r6
 800901e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009022:	bf00      	nop
 8009024:	0800a0c8 	.word	0x0800a0c8
 8009028:	08009f7e 	.word	0x08009f7e
 800902c:	0800a06f 	.word	0x0800a06f

08009030 <__lshift>:
 8009030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009034:	460c      	mov	r4, r1
 8009036:	6849      	ldr	r1, [r1, #4]
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	4607      	mov	r7, r0
 8009042:	4691      	mov	r9, r2
 8009044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009048:	f108 0601 	add.w	r6, r8, #1
 800904c:	42b3      	cmp	r3, r6
 800904e:	db0b      	blt.n	8009068 <__lshift+0x38>
 8009050:	4638      	mov	r0, r7
 8009052:	f7ff fd95 	bl	8008b80 <_Balloc>
 8009056:	4605      	mov	r5, r0
 8009058:	b948      	cbnz	r0, 800906e <__lshift+0x3e>
 800905a:	4602      	mov	r2, r0
 800905c:	4b28      	ldr	r3, [pc, #160]	@ (8009100 <__lshift+0xd0>)
 800905e:	4829      	ldr	r0, [pc, #164]	@ (8009104 <__lshift+0xd4>)
 8009060:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009064:	f000 fb2c 	bl	80096c0 <__assert_func>
 8009068:	3101      	adds	r1, #1
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	e7ee      	b.n	800904c <__lshift+0x1c>
 800906e:	2300      	movs	r3, #0
 8009070:	f100 0114 	add.w	r1, r0, #20
 8009074:	f100 0210 	add.w	r2, r0, #16
 8009078:	4618      	mov	r0, r3
 800907a:	4553      	cmp	r3, sl
 800907c:	db33      	blt.n	80090e6 <__lshift+0xb6>
 800907e:	6920      	ldr	r0, [r4, #16]
 8009080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009084:	f104 0314 	add.w	r3, r4, #20
 8009088:	f019 091f 	ands.w	r9, r9, #31
 800908c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009094:	d02b      	beq.n	80090ee <__lshift+0xbe>
 8009096:	f1c9 0e20 	rsb	lr, r9, #32
 800909a:	468a      	mov	sl, r1
 800909c:	2200      	movs	r2, #0
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	fa00 f009 	lsl.w	r0, r0, r9
 80090a4:	4310      	orrs	r0, r2
 80090a6:	f84a 0b04 	str.w	r0, [sl], #4
 80090aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ae:	459c      	cmp	ip, r3
 80090b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80090b4:	d8f3      	bhi.n	800909e <__lshift+0x6e>
 80090b6:	ebac 0304 	sub.w	r3, ip, r4
 80090ba:	3b15      	subs	r3, #21
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	3304      	adds	r3, #4
 80090c2:	f104 0015 	add.w	r0, r4, #21
 80090c6:	4584      	cmp	ip, r0
 80090c8:	bf38      	it	cc
 80090ca:	2304      	movcc	r3, #4
 80090cc:	50ca      	str	r2, [r1, r3]
 80090ce:	b10a      	cbz	r2, 80090d4 <__lshift+0xa4>
 80090d0:	f108 0602 	add.w	r6, r8, #2
 80090d4:	3e01      	subs	r6, #1
 80090d6:	4638      	mov	r0, r7
 80090d8:	612e      	str	r6, [r5, #16]
 80090da:	4621      	mov	r1, r4
 80090dc:	f7ff fd90 	bl	8008c00 <_Bfree>
 80090e0:	4628      	mov	r0, r5
 80090e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ea:	3301      	adds	r3, #1
 80090ec:	e7c5      	b.n	800907a <__lshift+0x4a>
 80090ee:	3904      	subs	r1, #4
 80090f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80090f8:	459c      	cmp	ip, r3
 80090fa:	d8f9      	bhi.n	80090f0 <__lshift+0xc0>
 80090fc:	e7ea      	b.n	80090d4 <__lshift+0xa4>
 80090fe:	bf00      	nop
 8009100:	08009fed 	.word	0x08009fed
 8009104:	0800a06f 	.word	0x0800a06f

08009108 <__mcmp>:
 8009108:	690a      	ldr	r2, [r1, #16]
 800910a:	4603      	mov	r3, r0
 800910c:	6900      	ldr	r0, [r0, #16]
 800910e:	1a80      	subs	r0, r0, r2
 8009110:	b530      	push	{r4, r5, lr}
 8009112:	d10e      	bne.n	8009132 <__mcmp+0x2a>
 8009114:	3314      	adds	r3, #20
 8009116:	3114      	adds	r1, #20
 8009118:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800911c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009120:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009124:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009128:	4295      	cmp	r5, r2
 800912a:	d003      	beq.n	8009134 <__mcmp+0x2c>
 800912c:	d205      	bcs.n	800913a <__mcmp+0x32>
 800912e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009132:	bd30      	pop	{r4, r5, pc}
 8009134:	42a3      	cmp	r3, r4
 8009136:	d3f3      	bcc.n	8009120 <__mcmp+0x18>
 8009138:	e7fb      	b.n	8009132 <__mcmp+0x2a>
 800913a:	2001      	movs	r0, #1
 800913c:	e7f9      	b.n	8009132 <__mcmp+0x2a>
	...

08009140 <__mdiff>:
 8009140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	4689      	mov	r9, r1
 8009146:	4606      	mov	r6, r0
 8009148:	4611      	mov	r1, r2
 800914a:	4648      	mov	r0, r9
 800914c:	4614      	mov	r4, r2
 800914e:	f7ff ffdb 	bl	8009108 <__mcmp>
 8009152:	1e05      	subs	r5, r0, #0
 8009154:	d112      	bne.n	800917c <__mdiff+0x3c>
 8009156:	4629      	mov	r1, r5
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff fd11 	bl	8008b80 <_Balloc>
 800915e:	4602      	mov	r2, r0
 8009160:	b928      	cbnz	r0, 800916e <__mdiff+0x2e>
 8009162:	4b3f      	ldr	r3, [pc, #252]	@ (8009260 <__mdiff+0x120>)
 8009164:	f240 2137 	movw	r1, #567	@ 0x237
 8009168:	483e      	ldr	r0, [pc, #248]	@ (8009264 <__mdiff+0x124>)
 800916a:	f000 faa9 	bl	80096c0 <__assert_func>
 800916e:	2301      	movs	r3, #1
 8009170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009174:	4610      	mov	r0, r2
 8009176:	b003      	add	sp, #12
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	bfbc      	itt	lt
 800917e:	464b      	movlt	r3, r9
 8009180:	46a1      	movlt	r9, r4
 8009182:	4630      	mov	r0, r6
 8009184:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009188:	bfba      	itte	lt
 800918a:	461c      	movlt	r4, r3
 800918c:	2501      	movlt	r5, #1
 800918e:	2500      	movge	r5, #0
 8009190:	f7ff fcf6 	bl	8008b80 <_Balloc>
 8009194:	4602      	mov	r2, r0
 8009196:	b918      	cbnz	r0, 80091a0 <__mdiff+0x60>
 8009198:	4b31      	ldr	r3, [pc, #196]	@ (8009260 <__mdiff+0x120>)
 800919a:	f240 2145 	movw	r1, #581	@ 0x245
 800919e:	e7e3      	b.n	8009168 <__mdiff+0x28>
 80091a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091a4:	6926      	ldr	r6, [r4, #16]
 80091a6:	60c5      	str	r5, [r0, #12]
 80091a8:	f109 0310 	add.w	r3, r9, #16
 80091ac:	f109 0514 	add.w	r5, r9, #20
 80091b0:	f104 0e14 	add.w	lr, r4, #20
 80091b4:	f100 0b14 	add.w	fp, r0, #20
 80091b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	46d9      	mov	r9, fp
 80091c4:	f04f 0c00 	mov.w	ip, #0
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	fa1f f38a 	uxth.w	r3, sl
 80091d8:	4619      	mov	r1, r3
 80091da:	b283      	uxth	r3, r0
 80091dc:	1acb      	subs	r3, r1, r3
 80091de:	0c00      	lsrs	r0, r0, #16
 80091e0:	4463      	add	r3, ip
 80091e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091f0:	4576      	cmp	r6, lr
 80091f2:	f849 3b04 	str.w	r3, [r9], #4
 80091f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091fa:	d8e5      	bhi.n	80091c8 <__mdiff+0x88>
 80091fc:	1b33      	subs	r3, r6, r4
 80091fe:	3b15      	subs	r3, #21
 8009200:	f023 0303 	bic.w	r3, r3, #3
 8009204:	3415      	adds	r4, #21
 8009206:	3304      	adds	r3, #4
 8009208:	42a6      	cmp	r6, r4
 800920a:	bf38      	it	cc
 800920c:	2304      	movcc	r3, #4
 800920e:	441d      	add	r5, r3
 8009210:	445b      	add	r3, fp
 8009212:	461e      	mov	r6, r3
 8009214:	462c      	mov	r4, r5
 8009216:	4544      	cmp	r4, r8
 8009218:	d30e      	bcc.n	8009238 <__mdiff+0xf8>
 800921a:	f108 0103 	add.w	r1, r8, #3
 800921e:	1b49      	subs	r1, r1, r5
 8009220:	f021 0103 	bic.w	r1, r1, #3
 8009224:	3d03      	subs	r5, #3
 8009226:	45a8      	cmp	r8, r5
 8009228:	bf38      	it	cc
 800922a:	2100      	movcc	r1, #0
 800922c:	440b      	add	r3, r1
 800922e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009232:	b191      	cbz	r1, 800925a <__mdiff+0x11a>
 8009234:	6117      	str	r7, [r2, #16]
 8009236:	e79d      	b.n	8009174 <__mdiff+0x34>
 8009238:	f854 1b04 	ldr.w	r1, [r4], #4
 800923c:	46e6      	mov	lr, ip
 800923e:	0c08      	lsrs	r0, r1, #16
 8009240:	fa1c fc81 	uxtah	ip, ip, r1
 8009244:	4471      	add	r1, lr
 8009246:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800924a:	b289      	uxth	r1, r1
 800924c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009250:	f846 1b04 	str.w	r1, [r6], #4
 8009254:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009258:	e7dd      	b.n	8009216 <__mdiff+0xd6>
 800925a:	3f01      	subs	r7, #1
 800925c:	e7e7      	b.n	800922e <__mdiff+0xee>
 800925e:	bf00      	nop
 8009260:	08009fed 	.word	0x08009fed
 8009264:	0800a06f 	.word	0x0800a06f

08009268 <__ulp>:
 8009268:	b082      	sub	sp, #8
 800926a:	ed8d 0b00 	vstr	d0, [sp]
 800926e:	9a01      	ldr	r2, [sp, #4]
 8009270:	4b0f      	ldr	r3, [pc, #60]	@ (80092b0 <__ulp+0x48>)
 8009272:	4013      	ands	r3, r2
 8009274:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009278:	2b00      	cmp	r3, #0
 800927a:	dc08      	bgt.n	800928e <__ulp+0x26>
 800927c:	425b      	negs	r3, r3
 800927e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009282:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009286:	da04      	bge.n	8009292 <__ulp+0x2a>
 8009288:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800928c:	4113      	asrs	r3, r2
 800928e:	2200      	movs	r2, #0
 8009290:	e008      	b.n	80092a4 <__ulp+0x3c>
 8009292:	f1a2 0314 	sub.w	r3, r2, #20
 8009296:	2b1e      	cmp	r3, #30
 8009298:	bfda      	itte	le
 800929a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800929e:	40da      	lsrle	r2, r3
 80092a0:	2201      	movgt	r2, #1
 80092a2:	2300      	movs	r3, #0
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	ec41 0b10 	vmov	d0, r0, r1
 80092ac:	b002      	add	sp, #8
 80092ae:	4770      	bx	lr
 80092b0:	7ff00000 	.word	0x7ff00000

080092b4 <__b2d>:
 80092b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b8:	6906      	ldr	r6, [r0, #16]
 80092ba:	f100 0814 	add.w	r8, r0, #20
 80092be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092c2:	1f37      	subs	r7, r6, #4
 80092c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092c8:	4610      	mov	r0, r2
 80092ca:	f7ff fd4b 	bl	8008d64 <__hi0bits>
 80092ce:	f1c0 0320 	rsb	r3, r0, #32
 80092d2:	280a      	cmp	r0, #10
 80092d4:	600b      	str	r3, [r1, #0]
 80092d6:	491b      	ldr	r1, [pc, #108]	@ (8009344 <__b2d+0x90>)
 80092d8:	dc15      	bgt.n	8009306 <__b2d+0x52>
 80092da:	f1c0 0c0b 	rsb	ip, r0, #11
 80092de:	fa22 f30c 	lsr.w	r3, r2, ip
 80092e2:	45b8      	cmp	r8, r7
 80092e4:	ea43 0501 	orr.w	r5, r3, r1
 80092e8:	bf34      	ite	cc
 80092ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092ee:	2300      	movcs	r3, #0
 80092f0:	3015      	adds	r0, #21
 80092f2:	fa02 f000 	lsl.w	r0, r2, r0
 80092f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80092fa:	4303      	orrs	r3, r0
 80092fc:	461c      	mov	r4, r3
 80092fe:	ec45 4b10 	vmov	d0, r4, r5
 8009302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009306:	45b8      	cmp	r8, r7
 8009308:	bf3a      	itte	cc
 800930a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800930e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009312:	2300      	movcs	r3, #0
 8009314:	380b      	subs	r0, #11
 8009316:	d012      	beq.n	800933e <__b2d+0x8a>
 8009318:	f1c0 0120 	rsb	r1, r0, #32
 800931c:	fa23 f401 	lsr.w	r4, r3, r1
 8009320:	4082      	lsls	r2, r0
 8009322:	4322      	orrs	r2, r4
 8009324:	4547      	cmp	r7, r8
 8009326:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800932a:	bf8c      	ite	hi
 800932c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009330:	2200      	movls	r2, #0
 8009332:	4083      	lsls	r3, r0
 8009334:	40ca      	lsrs	r2, r1
 8009336:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800933a:	4313      	orrs	r3, r2
 800933c:	e7de      	b.n	80092fc <__b2d+0x48>
 800933e:	ea42 0501 	orr.w	r5, r2, r1
 8009342:	e7db      	b.n	80092fc <__b2d+0x48>
 8009344:	3ff00000 	.word	0x3ff00000

08009348 <__d2b>:
 8009348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800934c:	460f      	mov	r7, r1
 800934e:	2101      	movs	r1, #1
 8009350:	ec59 8b10 	vmov	r8, r9, d0
 8009354:	4616      	mov	r6, r2
 8009356:	f7ff fc13 	bl	8008b80 <_Balloc>
 800935a:	4604      	mov	r4, r0
 800935c:	b930      	cbnz	r0, 800936c <__d2b+0x24>
 800935e:	4602      	mov	r2, r0
 8009360:	4b23      	ldr	r3, [pc, #140]	@ (80093f0 <__d2b+0xa8>)
 8009362:	4824      	ldr	r0, [pc, #144]	@ (80093f4 <__d2b+0xac>)
 8009364:	f240 310f 	movw	r1, #783	@ 0x30f
 8009368:	f000 f9aa 	bl	80096c0 <__assert_func>
 800936c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009374:	b10d      	cbz	r5, 800937a <__d2b+0x32>
 8009376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f1b8 0300 	subs.w	r3, r8, #0
 8009380:	d023      	beq.n	80093ca <__d2b+0x82>
 8009382:	4668      	mov	r0, sp
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	f7ff fd0c 	bl	8008da2 <__lo0bits>
 800938a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800938e:	b1d0      	cbz	r0, 80093c6 <__d2b+0x7e>
 8009390:	f1c0 0320 	rsb	r3, r0, #32
 8009394:	fa02 f303 	lsl.w	r3, r2, r3
 8009398:	430b      	orrs	r3, r1
 800939a:	40c2      	lsrs	r2, r0
 800939c:	6163      	str	r3, [r4, #20]
 800939e:	9201      	str	r2, [sp, #4]
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	61a3      	str	r3, [r4, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bf0c      	ite	eq
 80093a8:	2201      	moveq	r2, #1
 80093aa:	2202      	movne	r2, #2
 80093ac:	6122      	str	r2, [r4, #16]
 80093ae:	b1a5      	cbz	r5, 80093da <__d2b+0x92>
 80093b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093b4:	4405      	add	r5, r0
 80093b6:	603d      	str	r5, [r7, #0]
 80093b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093bc:	6030      	str	r0, [r6, #0]
 80093be:	4620      	mov	r0, r4
 80093c0:	b003      	add	sp, #12
 80093c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c6:	6161      	str	r1, [r4, #20]
 80093c8:	e7ea      	b.n	80093a0 <__d2b+0x58>
 80093ca:	a801      	add	r0, sp, #4
 80093cc:	f7ff fce9 	bl	8008da2 <__lo0bits>
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	6163      	str	r3, [r4, #20]
 80093d4:	3020      	adds	r0, #32
 80093d6:	2201      	movs	r2, #1
 80093d8:	e7e8      	b.n	80093ac <__d2b+0x64>
 80093da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093e2:	6038      	str	r0, [r7, #0]
 80093e4:	6918      	ldr	r0, [r3, #16]
 80093e6:	f7ff fcbd 	bl	8008d64 <__hi0bits>
 80093ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093ee:	e7e5      	b.n	80093bc <__d2b+0x74>
 80093f0:	08009fed 	.word	0x08009fed
 80093f4:	0800a06f 	.word	0x0800a06f

080093f8 <__ratio>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	b085      	sub	sp, #20
 80093fe:	e9cd 1000 	strd	r1, r0, [sp]
 8009402:	a902      	add	r1, sp, #8
 8009404:	f7ff ff56 	bl	80092b4 <__b2d>
 8009408:	9800      	ldr	r0, [sp, #0]
 800940a:	a903      	add	r1, sp, #12
 800940c:	ec55 4b10 	vmov	r4, r5, d0
 8009410:	f7ff ff50 	bl	80092b4 <__b2d>
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	6919      	ldr	r1, [r3, #16]
 8009418:	9b00      	ldr	r3, [sp, #0]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	1ac9      	subs	r1, r1, r3
 800941e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009422:	1a9b      	subs	r3, r3, r2
 8009424:	ec5b ab10 	vmov	sl, fp, d0
 8009428:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfce      	itee	gt
 8009430:	462a      	movgt	r2, r5
 8009432:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009436:	465a      	movle	r2, fp
 8009438:	462f      	mov	r7, r5
 800943a:	46d9      	mov	r9, fp
 800943c:	bfcc      	ite	gt
 800943e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009442:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009446:	464b      	mov	r3, r9
 8009448:	4652      	mov	r2, sl
 800944a:	4620      	mov	r0, r4
 800944c:	4639      	mov	r1, r7
 800944e:	f7f7 fa15 	bl	800087c <__aeabi_ddiv>
 8009452:	ec41 0b10 	vmov	d0, r0, r1
 8009456:	b005      	add	sp, #20
 8009458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800945c <__copybits>:
 800945c:	3901      	subs	r1, #1
 800945e:	b570      	push	{r4, r5, r6, lr}
 8009460:	1149      	asrs	r1, r1, #5
 8009462:	6914      	ldr	r4, [r2, #16]
 8009464:	3101      	adds	r1, #1
 8009466:	f102 0314 	add.w	r3, r2, #20
 800946a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800946e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009472:	1f05      	subs	r5, r0, #4
 8009474:	42a3      	cmp	r3, r4
 8009476:	d30c      	bcc.n	8009492 <__copybits+0x36>
 8009478:	1aa3      	subs	r3, r4, r2
 800947a:	3b11      	subs	r3, #17
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	3211      	adds	r2, #17
 8009482:	42a2      	cmp	r2, r4
 8009484:	bf88      	it	hi
 8009486:	2300      	movhi	r3, #0
 8009488:	4418      	add	r0, r3
 800948a:	2300      	movs	r3, #0
 800948c:	4288      	cmp	r0, r1
 800948e:	d305      	bcc.n	800949c <__copybits+0x40>
 8009490:	bd70      	pop	{r4, r5, r6, pc}
 8009492:	f853 6b04 	ldr.w	r6, [r3], #4
 8009496:	f845 6f04 	str.w	r6, [r5, #4]!
 800949a:	e7eb      	b.n	8009474 <__copybits+0x18>
 800949c:	f840 3b04 	str.w	r3, [r0], #4
 80094a0:	e7f4      	b.n	800948c <__copybits+0x30>

080094a2 <__any_on>:
 80094a2:	f100 0214 	add.w	r2, r0, #20
 80094a6:	6900      	ldr	r0, [r0, #16]
 80094a8:	114b      	asrs	r3, r1, #5
 80094aa:	4298      	cmp	r0, r3
 80094ac:	b510      	push	{r4, lr}
 80094ae:	db11      	blt.n	80094d4 <__any_on+0x32>
 80094b0:	dd0a      	ble.n	80094c8 <__any_on+0x26>
 80094b2:	f011 011f 	ands.w	r1, r1, #31
 80094b6:	d007      	beq.n	80094c8 <__any_on+0x26>
 80094b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094bc:	fa24 f001 	lsr.w	r0, r4, r1
 80094c0:	fa00 f101 	lsl.w	r1, r0, r1
 80094c4:	428c      	cmp	r4, r1
 80094c6:	d10b      	bne.n	80094e0 <__any_on+0x3e>
 80094c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d803      	bhi.n	80094d8 <__any_on+0x36>
 80094d0:	2000      	movs	r0, #0
 80094d2:	bd10      	pop	{r4, pc}
 80094d4:	4603      	mov	r3, r0
 80094d6:	e7f7      	b.n	80094c8 <__any_on+0x26>
 80094d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094dc:	2900      	cmp	r1, #0
 80094de:	d0f5      	beq.n	80094cc <__any_on+0x2a>
 80094e0:	2001      	movs	r0, #1
 80094e2:	e7f6      	b.n	80094d2 <__any_on+0x30>

080094e4 <__sread>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ec:	f000 f8b4 	bl	8009658 <_read_r>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	bfab      	itete	ge
 80094f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094f6:	89a3      	ldrhlt	r3, [r4, #12]
 80094f8:	181b      	addge	r3, r3, r0
 80094fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094fe:	bfac      	ite	ge
 8009500:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009502:	81a3      	strhlt	r3, [r4, #12]
 8009504:	bd10      	pop	{r4, pc}

08009506 <__swrite>:
 8009506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950a:	461f      	mov	r7, r3
 800950c:	898b      	ldrh	r3, [r1, #12]
 800950e:	05db      	lsls	r3, r3, #23
 8009510:	4605      	mov	r5, r0
 8009512:	460c      	mov	r4, r1
 8009514:	4616      	mov	r6, r2
 8009516:	d505      	bpl.n	8009524 <__swrite+0x1e>
 8009518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951c:	2302      	movs	r3, #2
 800951e:	2200      	movs	r2, #0
 8009520:	f000 f888 	bl	8009634 <_lseek_r>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800952a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	4632      	mov	r2, r6
 8009532:	463b      	mov	r3, r7
 8009534:	4628      	mov	r0, r5
 8009536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800953a:	f000 b8af 	b.w	800969c <_write_r>

0800953e <__sseek>:
 800953e:	b510      	push	{r4, lr}
 8009540:	460c      	mov	r4, r1
 8009542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009546:	f000 f875 	bl	8009634 <_lseek_r>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	bf15      	itete	ne
 8009550:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009552:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009556:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800955a:	81a3      	strheq	r3, [r4, #12]
 800955c:	bf18      	it	ne
 800955e:	81a3      	strhne	r3, [r4, #12]
 8009560:	bd10      	pop	{r4, pc}

08009562 <__sclose>:
 8009562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009566:	f000 b855 	b.w	8009614 <_close_r>

0800956a <_realloc_r>:
 800956a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956e:	4680      	mov	r8, r0
 8009570:	4615      	mov	r5, r2
 8009572:	460c      	mov	r4, r1
 8009574:	b921      	cbnz	r1, 8009580 <_realloc_r+0x16>
 8009576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	4611      	mov	r1, r2
 800957c:	f7ff b9b6 	b.w	80088ec <_malloc_r>
 8009580:	b92a      	cbnz	r2, 800958e <_realloc_r+0x24>
 8009582:	f000 f8cf 	bl	8009724 <_free_r>
 8009586:	2400      	movs	r4, #0
 8009588:	4620      	mov	r0, r4
 800958a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800958e:	f000 f913 	bl	80097b8 <_malloc_usable_size_r>
 8009592:	4285      	cmp	r5, r0
 8009594:	4606      	mov	r6, r0
 8009596:	d802      	bhi.n	800959e <_realloc_r+0x34>
 8009598:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800959c:	d8f4      	bhi.n	8009588 <_realloc_r+0x1e>
 800959e:	4629      	mov	r1, r5
 80095a0:	4640      	mov	r0, r8
 80095a2:	f7ff f9a3 	bl	80088ec <_malloc_r>
 80095a6:	4607      	mov	r7, r0
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d0ec      	beq.n	8009586 <_realloc_r+0x1c>
 80095ac:	42b5      	cmp	r5, r6
 80095ae:	462a      	mov	r2, r5
 80095b0:	4621      	mov	r1, r4
 80095b2:	bf28      	it	cs
 80095b4:	4632      	movcs	r2, r6
 80095b6:	f7fd fe72 	bl	800729e <memcpy>
 80095ba:	4621      	mov	r1, r4
 80095bc:	4640      	mov	r0, r8
 80095be:	f000 f8b1 	bl	8009724 <_free_r>
 80095c2:	463c      	mov	r4, r7
 80095c4:	e7e0      	b.n	8009588 <_realloc_r+0x1e>

080095c6 <__ascii_wctomb>:
 80095c6:	4603      	mov	r3, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	b141      	cbz	r1, 80095de <__ascii_wctomb+0x18>
 80095cc:	2aff      	cmp	r2, #255	@ 0xff
 80095ce:	d904      	bls.n	80095da <__ascii_wctomb+0x14>
 80095d0:	228a      	movs	r2, #138	@ 0x8a
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095d8:	4770      	bx	lr
 80095da:	700a      	strb	r2, [r1, #0]
 80095dc:	2001      	movs	r0, #1
 80095de:	4770      	bx	lr

080095e0 <memmove>:
 80095e0:	4288      	cmp	r0, r1
 80095e2:	b510      	push	{r4, lr}
 80095e4:	eb01 0402 	add.w	r4, r1, r2
 80095e8:	d902      	bls.n	80095f0 <memmove+0x10>
 80095ea:	4284      	cmp	r4, r0
 80095ec:	4623      	mov	r3, r4
 80095ee:	d807      	bhi.n	8009600 <memmove+0x20>
 80095f0:	1e43      	subs	r3, r0, #1
 80095f2:	42a1      	cmp	r1, r4
 80095f4:	d008      	beq.n	8009608 <memmove+0x28>
 80095f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095fe:	e7f8      	b.n	80095f2 <memmove+0x12>
 8009600:	4402      	add	r2, r0
 8009602:	4601      	mov	r1, r0
 8009604:	428a      	cmp	r2, r1
 8009606:	d100      	bne.n	800960a <memmove+0x2a>
 8009608:	bd10      	pop	{r4, pc}
 800960a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800960e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009612:	e7f7      	b.n	8009604 <memmove+0x24>

08009614 <_close_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d06      	ldr	r5, [pc, #24]	@ (8009630 <_close_r+0x1c>)
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	602b      	str	r3, [r5, #0]
 8009620:	f7f7 ff31 	bl	8001486 <_close>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_close_r+0x1a>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_close_r+0x1a>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	200003ac 	.word	0x200003ac

08009634 <_lseek_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d07      	ldr	r5, [pc, #28]	@ (8009654 <_lseek_r+0x20>)
 8009638:	4604      	mov	r4, r0
 800963a:	4608      	mov	r0, r1
 800963c:	4611      	mov	r1, r2
 800963e:	2200      	movs	r2, #0
 8009640:	602a      	str	r2, [r5, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	f7f7 ff46 	bl	80014d4 <_lseek>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d102      	bne.n	8009652 <_lseek_r+0x1e>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	b103      	cbz	r3, 8009652 <_lseek_r+0x1e>
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	200003ac 	.word	0x200003ac

08009658 <_read_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d07      	ldr	r5, [pc, #28]	@ (8009678 <_read_r+0x20>)
 800965c:	4604      	mov	r4, r0
 800965e:	4608      	mov	r0, r1
 8009660:	4611      	mov	r1, r2
 8009662:	2200      	movs	r2, #0
 8009664:	602a      	str	r2, [r5, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	f7f7 fed4 	bl	8001414 <_read>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_read_r+0x1e>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_read_r+0x1e>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	200003ac 	.word	0x200003ac

0800967c <_sbrk_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d06      	ldr	r5, [pc, #24]	@ (8009698 <_sbrk_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f7 ff32 	bl	80014f0 <_sbrk>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_sbrk_r+0x1a>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_sbrk_r+0x1a>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	200003ac 	.word	0x200003ac

0800969c <_write_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d07      	ldr	r5, [pc, #28]	@ (80096bc <_write_r+0x20>)
 80096a0:	4604      	mov	r4, r0
 80096a2:	4608      	mov	r0, r1
 80096a4:	4611      	mov	r1, r2
 80096a6:	2200      	movs	r2, #0
 80096a8:	602a      	str	r2, [r5, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	f7f7 fecf 	bl	800144e <_write>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_write_r+0x1e>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_write_r+0x1e>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	200003ac 	.word	0x200003ac

080096c0 <__assert_func>:
 80096c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096c2:	4614      	mov	r4, r2
 80096c4:	461a      	mov	r2, r3
 80096c6:	4b09      	ldr	r3, [pc, #36]	@ (80096ec <__assert_func+0x2c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4605      	mov	r5, r0
 80096cc:	68d8      	ldr	r0, [r3, #12]
 80096ce:	b954      	cbnz	r4, 80096e6 <__assert_func+0x26>
 80096d0:	4b07      	ldr	r3, [pc, #28]	@ (80096f0 <__assert_func+0x30>)
 80096d2:	461c      	mov	r4, r3
 80096d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096d8:	9100      	str	r1, [sp, #0]
 80096da:	462b      	mov	r3, r5
 80096dc:	4905      	ldr	r1, [pc, #20]	@ (80096f4 <__assert_func+0x34>)
 80096de:	f000 f873 	bl	80097c8 <fiprintf>
 80096e2:	f000 f883 	bl	80097ec <abort>
 80096e6:	4b04      	ldr	r3, [pc, #16]	@ (80096f8 <__assert_func+0x38>)
 80096e8:	e7f4      	b.n	80096d4 <__assert_func+0x14>
 80096ea:	bf00      	nop
 80096ec:	20000184 	.word	0x20000184
 80096f0:	0800a203 	.word	0x0800a203
 80096f4:	0800a1d5 	.word	0x0800a1d5
 80096f8:	0800a1c8 	.word	0x0800a1c8

080096fc <_calloc_r>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	fba1 5402 	umull	r5, r4, r1, r2
 8009702:	b93c      	cbnz	r4, 8009714 <_calloc_r+0x18>
 8009704:	4629      	mov	r1, r5
 8009706:	f7ff f8f1 	bl	80088ec <_malloc_r>
 800970a:	4606      	mov	r6, r0
 800970c:	b928      	cbnz	r0, 800971a <_calloc_r+0x1e>
 800970e:	2600      	movs	r6, #0
 8009710:	4630      	mov	r0, r6
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	220c      	movs	r2, #12
 8009716:	6002      	str	r2, [r0, #0]
 8009718:	e7f9      	b.n	800970e <_calloc_r+0x12>
 800971a:	462a      	mov	r2, r5
 800971c:	4621      	mov	r1, r4
 800971e:	f7fd fd85 	bl	800722c <memset>
 8009722:	e7f5      	b.n	8009710 <_calloc_r+0x14>

08009724 <_free_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4605      	mov	r5, r0
 8009728:	2900      	cmp	r1, #0
 800972a:	d041      	beq.n	80097b0 <_free_r+0x8c>
 800972c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009730:	1f0c      	subs	r4, r1, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	bfb8      	it	lt
 8009736:	18e4      	addlt	r4, r4, r3
 8009738:	f7ff fa16 	bl	8008b68 <__malloc_lock>
 800973c:	4a1d      	ldr	r2, [pc, #116]	@ (80097b4 <_free_r+0x90>)
 800973e:	6813      	ldr	r3, [r2, #0]
 8009740:	b933      	cbnz	r3, 8009750 <_free_r+0x2c>
 8009742:	6063      	str	r3, [r4, #4]
 8009744:	6014      	str	r4, [r2, #0]
 8009746:	4628      	mov	r0, r5
 8009748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800974c:	f7ff ba12 	b.w	8008b74 <__malloc_unlock>
 8009750:	42a3      	cmp	r3, r4
 8009752:	d908      	bls.n	8009766 <_free_r+0x42>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	1821      	adds	r1, r4, r0
 8009758:	428b      	cmp	r3, r1
 800975a:	bf01      	itttt	eq
 800975c:	6819      	ldreq	r1, [r3, #0]
 800975e:	685b      	ldreq	r3, [r3, #4]
 8009760:	1809      	addeq	r1, r1, r0
 8009762:	6021      	streq	r1, [r4, #0]
 8009764:	e7ed      	b.n	8009742 <_free_r+0x1e>
 8009766:	461a      	mov	r2, r3
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	b10b      	cbz	r3, 8009770 <_free_r+0x4c>
 800976c:	42a3      	cmp	r3, r4
 800976e:	d9fa      	bls.n	8009766 <_free_r+0x42>
 8009770:	6811      	ldr	r1, [r2, #0]
 8009772:	1850      	adds	r0, r2, r1
 8009774:	42a0      	cmp	r0, r4
 8009776:	d10b      	bne.n	8009790 <_free_r+0x6c>
 8009778:	6820      	ldr	r0, [r4, #0]
 800977a:	4401      	add	r1, r0
 800977c:	1850      	adds	r0, r2, r1
 800977e:	4283      	cmp	r3, r0
 8009780:	6011      	str	r1, [r2, #0]
 8009782:	d1e0      	bne.n	8009746 <_free_r+0x22>
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	6053      	str	r3, [r2, #4]
 800978a:	4408      	add	r0, r1
 800978c:	6010      	str	r0, [r2, #0]
 800978e:	e7da      	b.n	8009746 <_free_r+0x22>
 8009790:	d902      	bls.n	8009798 <_free_r+0x74>
 8009792:	230c      	movs	r3, #12
 8009794:	602b      	str	r3, [r5, #0]
 8009796:	e7d6      	b.n	8009746 <_free_r+0x22>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	1821      	adds	r1, r4, r0
 800979c:	428b      	cmp	r3, r1
 800979e:	bf04      	itt	eq
 80097a0:	6819      	ldreq	r1, [r3, #0]
 80097a2:	685b      	ldreq	r3, [r3, #4]
 80097a4:	6063      	str	r3, [r4, #4]
 80097a6:	bf04      	itt	eq
 80097a8:	1809      	addeq	r1, r1, r0
 80097aa:	6021      	streq	r1, [r4, #0]
 80097ac:	6054      	str	r4, [r2, #4]
 80097ae:	e7ca      	b.n	8009746 <_free_r+0x22>
 80097b0:	bd38      	pop	{r3, r4, r5, pc}
 80097b2:	bf00      	nop
 80097b4:	200003a8 	.word	0x200003a8

080097b8 <_malloc_usable_size_r>:
 80097b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097bc:	1f18      	subs	r0, r3, #4
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bfbc      	itt	lt
 80097c2:	580b      	ldrlt	r3, [r1, r0]
 80097c4:	18c0      	addlt	r0, r0, r3
 80097c6:	4770      	bx	lr

080097c8 <fiprintf>:
 80097c8:	b40e      	push	{r1, r2, r3}
 80097ca:	b503      	push	{r0, r1, lr}
 80097cc:	4601      	mov	r1, r0
 80097ce:	ab03      	add	r3, sp, #12
 80097d0:	4805      	ldr	r0, [pc, #20]	@ (80097e8 <fiprintf+0x20>)
 80097d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d6:	6800      	ldr	r0, [r0, #0]
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	f000 f837 	bl	800984c <_vfiprintf_r>
 80097de:	b002      	add	sp, #8
 80097e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097e4:	b003      	add	sp, #12
 80097e6:	4770      	bx	lr
 80097e8:	20000184 	.word	0x20000184

080097ec <abort>:
 80097ec:	b508      	push	{r3, lr}
 80097ee:	2006      	movs	r0, #6
 80097f0:	f000 fa84 	bl	8009cfc <raise>
 80097f4:	2001      	movs	r0, #1
 80097f6:	f7f7 fe02 	bl	80013fe <_exit>

080097fa <__sfputc_r>:
 80097fa:	6893      	ldr	r3, [r2, #8]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	b410      	push	{r4}
 8009802:	6093      	str	r3, [r2, #8]
 8009804:	da08      	bge.n	8009818 <__sfputc_r+0x1e>
 8009806:	6994      	ldr	r4, [r2, #24]
 8009808:	42a3      	cmp	r3, r4
 800980a:	db01      	blt.n	8009810 <__sfputc_r+0x16>
 800980c:	290a      	cmp	r1, #10
 800980e:	d103      	bne.n	8009818 <__sfputc_r+0x1e>
 8009810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009814:	f000 b932 	b.w	8009a7c <__swbuf_r>
 8009818:	6813      	ldr	r3, [r2, #0]
 800981a:	1c58      	adds	r0, r3, #1
 800981c:	6010      	str	r0, [r2, #0]
 800981e:	7019      	strb	r1, [r3, #0]
 8009820:	4608      	mov	r0, r1
 8009822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009826:	4770      	bx	lr

08009828 <__sfputs_r>:
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	4614      	mov	r4, r2
 8009830:	18d5      	adds	r5, r2, r3
 8009832:	42ac      	cmp	r4, r5
 8009834:	d101      	bne.n	800983a <__sfputs_r+0x12>
 8009836:	2000      	movs	r0, #0
 8009838:	e007      	b.n	800984a <__sfputs_r+0x22>
 800983a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983e:	463a      	mov	r2, r7
 8009840:	4630      	mov	r0, r6
 8009842:	f7ff ffda 	bl	80097fa <__sfputc_r>
 8009846:	1c43      	adds	r3, r0, #1
 8009848:	d1f3      	bne.n	8009832 <__sfputs_r+0xa>
 800984a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800984c <_vfiprintf_r>:
 800984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	460d      	mov	r5, r1
 8009852:	b09d      	sub	sp, #116	@ 0x74
 8009854:	4614      	mov	r4, r2
 8009856:	4698      	mov	r8, r3
 8009858:	4606      	mov	r6, r0
 800985a:	b118      	cbz	r0, 8009864 <_vfiprintf_r+0x18>
 800985c:	6a03      	ldr	r3, [r0, #32]
 800985e:	b90b      	cbnz	r3, 8009864 <_vfiprintf_r+0x18>
 8009860:	f7fc fe18 	bl	8006494 <__sinit>
 8009864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009866:	07d9      	lsls	r1, r3, #31
 8009868:	d405      	bmi.n	8009876 <_vfiprintf_r+0x2a>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	059a      	lsls	r2, r3, #22
 800986e:	d402      	bmi.n	8009876 <_vfiprintf_r+0x2a>
 8009870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009872:	f7fd fd12 	bl	800729a <__retarget_lock_acquire_recursive>
 8009876:	89ab      	ldrh	r3, [r5, #12]
 8009878:	071b      	lsls	r3, r3, #28
 800987a:	d501      	bpl.n	8009880 <_vfiprintf_r+0x34>
 800987c:	692b      	ldr	r3, [r5, #16]
 800987e:	b99b      	cbnz	r3, 80098a8 <_vfiprintf_r+0x5c>
 8009880:	4629      	mov	r1, r5
 8009882:	4630      	mov	r0, r6
 8009884:	f000 f938 	bl	8009af8 <__swsetup_r>
 8009888:	b170      	cbz	r0, 80098a8 <_vfiprintf_r+0x5c>
 800988a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800988c:	07dc      	lsls	r4, r3, #31
 800988e:	d504      	bpl.n	800989a <_vfiprintf_r+0x4e>
 8009890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009894:	b01d      	add	sp, #116	@ 0x74
 8009896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	0598      	lsls	r0, r3, #22
 800989e:	d4f7      	bmi.n	8009890 <_vfiprintf_r+0x44>
 80098a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098a2:	f7fd fcfb 	bl	800729c <__retarget_lock_release_recursive>
 80098a6:	e7f3      	b.n	8009890 <_vfiprintf_r+0x44>
 80098a8:	2300      	movs	r3, #0
 80098aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ac:	2320      	movs	r3, #32
 80098ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b6:	2330      	movs	r3, #48	@ 0x30
 80098b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a68 <_vfiprintf_r+0x21c>
 80098bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098c0:	f04f 0901 	mov.w	r9, #1
 80098c4:	4623      	mov	r3, r4
 80098c6:	469a      	mov	sl, r3
 80098c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098cc:	b10a      	cbz	r2, 80098d2 <_vfiprintf_r+0x86>
 80098ce:	2a25      	cmp	r2, #37	@ 0x25
 80098d0:	d1f9      	bne.n	80098c6 <_vfiprintf_r+0x7a>
 80098d2:	ebba 0b04 	subs.w	fp, sl, r4
 80098d6:	d00b      	beq.n	80098f0 <_vfiprintf_r+0xa4>
 80098d8:	465b      	mov	r3, fp
 80098da:	4622      	mov	r2, r4
 80098dc:	4629      	mov	r1, r5
 80098de:	4630      	mov	r0, r6
 80098e0:	f7ff ffa2 	bl	8009828 <__sfputs_r>
 80098e4:	3001      	adds	r0, #1
 80098e6:	f000 80a7 	beq.w	8009a38 <_vfiprintf_r+0x1ec>
 80098ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ec:	445a      	add	r2, fp
 80098ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80098f0:	f89a 3000 	ldrb.w	r3, [sl]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 809f 	beq.w	8009a38 <_vfiprintf_r+0x1ec>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009904:	f10a 0a01 	add.w	sl, sl, #1
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	9307      	str	r3, [sp, #28]
 800990c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009910:	931a      	str	r3, [sp, #104]	@ 0x68
 8009912:	4654      	mov	r4, sl
 8009914:	2205      	movs	r2, #5
 8009916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991a:	4853      	ldr	r0, [pc, #332]	@ (8009a68 <_vfiprintf_r+0x21c>)
 800991c:	f7f6 fc70 	bl	8000200 <memchr>
 8009920:	9a04      	ldr	r2, [sp, #16]
 8009922:	b9d8      	cbnz	r0, 800995c <_vfiprintf_r+0x110>
 8009924:	06d1      	lsls	r1, r2, #27
 8009926:	bf44      	itt	mi
 8009928:	2320      	movmi	r3, #32
 800992a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800992e:	0713      	lsls	r3, r2, #28
 8009930:	bf44      	itt	mi
 8009932:	232b      	movmi	r3, #43	@ 0x2b
 8009934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009938:	f89a 3000 	ldrb.w	r3, [sl]
 800993c:	2b2a      	cmp	r3, #42	@ 0x2a
 800993e:	d015      	beq.n	800996c <_vfiprintf_r+0x120>
 8009940:	9a07      	ldr	r2, [sp, #28]
 8009942:	4654      	mov	r4, sl
 8009944:	2000      	movs	r0, #0
 8009946:	f04f 0c0a 	mov.w	ip, #10
 800994a:	4621      	mov	r1, r4
 800994c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009950:	3b30      	subs	r3, #48	@ 0x30
 8009952:	2b09      	cmp	r3, #9
 8009954:	d94b      	bls.n	80099ee <_vfiprintf_r+0x1a2>
 8009956:	b1b0      	cbz	r0, 8009986 <_vfiprintf_r+0x13a>
 8009958:	9207      	str	r2, [sp, #28]
 800995a:	e014      	b.n	8009986 <_vfiprintf_r+0x13a>
 800995c:	eba0 0308 	sub.w	r3, r0, r8
 8009960:	fa09 f303 	lsl.w	r3, r9, r3
 8009964:	4313      	orrs	r3, r2
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	46a2      	mov	sl, r4
 800996a:	e7d2      	b.n	8009912 <_vfiprintf_r+0xc6>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	1d19      	adds	r1, r3, #4
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	9103      	str	r1, [sp, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfbb      	ittet	lt
 8009978:	425b      	neglt	r3, r3
 800997a:	f042 0202 	orrlt.w	r2, r2, #2
 800997e:	9307      	strge	r3, [sp, #28]
 8009980:	9307      	strlt	r3, [sp, #28]
 8009982:	bfb8      	it	lt
 8009984:	9204      	strlt	r2, [sp, #16]
 8009986:	7823      	ldrb	r3, [r4, #0]
 8009988:	2b2e      	cmp	r3, #46	@ 0x2e
 800998a:	d10a      	bne.n	80099a2 <_vfiprintf_r+0x156>
 800998c:	7863      	ldrb	r3, [r4, #1]
 800998e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009990:	d132      	bne.n	80099f8 <_vfiprintf_r+0x1ac>
 8009992:	9b03      	ldr	r3, [sp, #12]
 8009994:	1d1a      	adds	r2, r3, #4
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	9203      	str	r2, [sp, #12]
 800999a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800999e:	3402      	adds	r4, #2
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a78 <_vfiprintf_r+0x22c>
 80099a6:	7821      	ldrb	r1, [r4, #0]
 80099a8:	2203      	movs	r2, #3
 80099aa:	4650      	mov	r0, sl
 80099ac:	f7f6 fc28 	bl	8000200 <memchr>
 80099b0:	b138      	cbz	r0, 80099c2 <_vfiprintf_r+0x176>
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	eba0 000a 	sub.w	r0, r0, sl
 80099b8:	2240      	movs	r2, #64	@ 0x40
 80099ba:	4082      	lsls	r2, r0
 80099bc:	4313      	orrs	r3, r2
 80099be:	3401      	adds	r4, #1
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c6:	4829      	ldr	r0, [pc, #164]	@ (8009a6c <_vfiprintf_r+0x220>)
 80099c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099cc:	2206      	movs	r2, #6
 80099ce:	f7f6 fc17 	bl	8000200 <memchr>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d03f      	beq.n	8009a56 <_vfiprintf_r+0x20a>
 80099d6:	4b26      	ldr	r3, [pc, #152]	@ (8009a70 <_vfiprintf_r+0x224>)
 80099d8:	bb1b      	cbnz	r3, 8009a22 <_vfiprintf_r+0x1d6>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	3307      	adds	r3, #7
 80099de:	f023 0307 	bic.w	r3, r3, #7
 80099e2:	3308      	adds	r3, #8
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e8:	443b      	add	r3, r7
 80099ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ec:	e76a      	b.n	80098c4 <_vfiprintf_r+0x78>
 80099ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f2:	460c      	mov	r4, r1
 80099f4:	2001      	movs	r0, #1
 80099f6:	e7a8      	b.n	800994a <_vfiprintf_r+0xfe>
 80099f8:	2300      	movs	r3, #0
 80099fa:	3401      	adds	r4, #1
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	4619      	mov	r1, r3
 8009a00:	f04f 0c0a 	mov.w	ip, #10
 8009a04:	4620      	mov	r0, r4
 8009a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0a:	3a30      	subs	r2, #48	@ 0x30
 8009a0c:	2a09      	cmp	r2, #9
 8009a0e:	d903      	bls.n	8009a18 <_vfiprintf_r+0x1cc>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0c6      	beq.n	80099a2 <_vfiprintf_r+0x156>
 8009a14:	9105      	str	r1, [sp, #20]
 8009a16:	e7c4      	b.n	80099a2 <_vfiprintf_r+0x156>
 8009a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e7f0      	b.n	8009a04 <_vfiprintf_r+0x1b8>
 8009a22:	ab03      	add	r3, sp, #12
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	462a      	mov	r2, r5
 8009a28:	4b12      	ldr	r3, [pc, #72]	@ (8009a74 <_vfiprintf_r+0x228>)
 8009a2a:	a904      	add	r1, sp, #16
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7fb feb9 	bl	80057a4 <_printf_float>
 8009a32:	4607      	mov	r7, r0
 8009a34:	1c78      	adds	r0, r7, #1
 8009a36:	d1d6      	bne.n	80099e6 <_vfiprintf_r+0x19a>
 8009a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	d405      	bmi.n	8009a4a <_vfiprintf_r+0x1fe>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	059a      	lsls	r2, r3, #22
 8009a42:	d402      	bmi.n	8009a4a <_vfiprintf_r+0x1fe>
 8009a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a46:	f7fd fc29 	bl	800729c <__retarget_lock_release_recursive>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	065b      	lsls	r3, r3, #25
 8009a4e:	f53f af1f 	bmi.w	8009890 <_vfiprintf_r+0x44>
 8009a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a54:	e71e      	b.n	8009894 <_vfiprintf_r+0x48>
 8009a56:	ab03      	add	r3, sp, #12
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4b05      	ldr	r3, [pc, #20]	@ (8009a74 <_vfiprintf_r+0x228>)
 8009a5e:	a904      	add	r1, sp, #16
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7fc f937 	bl	8005cd4 <_printf_i>
 8009a66:	e7e4      	b.n	8009a32 <_vfiprintf_r+0x1e6>
 8009a68:	0800a05e 	.word	0x0800a05e
 8009a6c:	0800a068 	.word	0x0800a068
 8009a70:	080057a5 	.word	0x080057a5
 8009a74:	08009829 	.word	0x08009829
 8009a78:	0800a064 	.word	0x0800a064

08009a7c <__swbuf_r>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	460e      	mov	r6, r1
 8009a80:	4614      	mov	r4, r2
 8009a82:	4605      	mov	r5, r0
 8009a84:	b118      	cbz	r0, 8009a8e <__swbuf_r+0x12>
 8009a86:	6a03      	ldr	r3, [r0, #32]
 8009a88:	b90b      	cbnz	r3, 8009a8e <__swbuf_r+0x12>
 8009a8a:	f7fc fd03 	bl	8006494 <__sinit>
 8009a8e:	69a3      	ldr	r3, [r4, #24]
 8009a90:	60a3      	str	r3, [r4, #8]
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	071a      	lsls	r2, r3, #28
 8009a96:	d501      	bpl.n	8009a9c <__swbuf_r+0x20>
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	b943      	cbnz	r3, 8009aae <__swbuf_r+0x32>
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 f82a 	bl	8009af8 <__swsetup_r>
 8009aa4:	b118      	cbz	r0, 8009aae <__swbuf_r+0x32>
 8009aa6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009aaa:	4638      	mov	r0, r7
 8009aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	6922      	ldr	r2, [r4, #16]
 8009ab2:	1a98      	subs	r0, r3, r2
 8009ab4:	6963      	ldr	r3, [r4, #20]
 8009ab6:	b2f6      	uxtb	r6, r6
 8009ab8:	4283      	cmp	r3, r0
 8009aba:	4637      	mov	r7, r6
 8009abc:	dc05      	bgt.n	8009aca <__swbuf_r+0x4e>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f7ff f829 	bl	8008b18 <_fflush_r>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d1ed      	bne.n	8009aa6 <__swbuf_r+0x2a>
 8009aca:	68a3      	ldr	r3, [r4, #8]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	60a3      	str	r3, [r4, #8]
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	6022      	str	r2, [r4, #0]
 8009ad6:	701e      	strb	r6, [r3, #0]
 8009ad8:	6962      	ldr	r2, [r4, #20]
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d004      	beq.n	8009aea <__swbuf_r+0x6e>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	07db      	lsls	r3, r3, #31
 8009ae4:	d5e1      	bpl.n	8009aaa <__swbuf_r+0x2e>
 8009ae6:	2e0a      	cmp	r6, #10
 8009ae8:	d1df      	bne.n	8009aaa <__swbuf_r+0x2e>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4628      	mov	r0, r5
 8009aee:	f7ff f813 	bl	8008b18 <_fflush_r>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d0d9      	beq.n	8009aaa <__swbuf_r+0x2e>
 8009af6:	e7d6      	b.n	8009aa6 <__swbuf_r+0x2a>

08009af8 <__swsetup_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4b29      	ldr	r3, [pc, #164]	@ (8009ba0 <__swsetup_r+0xa8>)
 8009afc:	4605      	mov	r5, r0
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	460c      	mov	r4, r1
 8009b02:	b118      	cbz	r0, 8009b0c <__swsetup_r+0x14>
 8009b04:	6a03      	ldr	r3, [r0, #32]
 8009b06:	b90b      	cbnz	r3, 8009b0c <__swsetup_r+0x14>
 8009b08:	f7fc fcc4 	bl	8006494 <__sinit>
 8009b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b10:	0719      	lsls	r1, r3, #28
 8009b12:	d422      	bmi.n	8009b5a <__swsetup_r+0x62>
 8009b14:	06da      	lsls	r2, r3, #27
 8009b16:	d407      	bmi.n	8009b28 <__swsetup_r+0x30>
 8009b18:	2209      	movs	r2, #9
 8009b1a:	602a      	str	r2, [r5, #0]
 8009b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b26:	e033      	b.n	8009b90 <__swsetup_r+0x98>
 8009b28:	0758      	lsls	r0, r3, #29
 8009b2a:	d512      	bpl.n	8009b52 <__swsetup_r+0x5a>
 8009b2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b2e:	b141      	cbz	r1, 8009b42 <__swsetup_r+0x4a>
 8009b30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b34:	4299      	cmp	r1, r3
 8009b36:	d002      	beq.n	8009b3e <__swsetup_r+0x46>
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f7ff fdf3 	bl	8009724 <_free_r>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6063      	str	r3, [r4, #4]
 8009b4e:	6923      	ldr	r3, [r4, #16]
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	f043 0308 	orr.w	r3, r3, #8
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	b94b      	cbnz	r3, 8009b72 <__swsetup_r+0x7a>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b68:	d003      	beq.n	8009b72 <__swsetup_r+0x7a>
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f000 f83f 	bl	8009bf0 <__smakebuf_r>
 8009b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b76:	f013 0201 	ands.w	r2, r3, #1
 8009b7a:	d00a      	beq.n	8009b92 <__swsetup_r+0x9a>
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	60a2      	str	r2, [r4, #8]
 8009b80:	6962      	ldr	r2, [r4, #20]
 8009b82:	4252      	negs	r2, r2
 8009b84:	61a2      	str	r2, [r4, #24]
 8009b86:	6922      	ldr	r2, [r4, #16]
 8009b88:	b942      	cbnz	r2, 8009b9c <__swsetup_r+0xa4>
 8009b8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b8e:	d1c5      	bne.n	8009b1c <__swsetup_r+0x24>
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
 8009b92:	0799      	lsls	r1, r3, #30
 8009b94:	bf58      	it	pl
 8009b96:	6962      	ldrpl	r2, [r4, #20]
 8009b98:	60a2      	str	r2, [r4, #8]
 8009b9a:	e7f4      	b.n	8009b86 <__swsetup_r+0x8e>
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	e7f7      	b.n	8009b90 <__swsetup_r+0x98>
 8009ba0:	20000184 	.word	0x20000184

08009ba4 <__swhatbuf_r>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	b096      	sub	sp, #88	@ 0x58
 8009bb0:	4615      	mov	r5, r2
 8009bb2:	461e      	mov	r6, r3
 8009bb4:	da0d      	bge.n	8009bd2 <__swhatbuf_r+0x2e>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009bbc:	f04f 0100 	mov.w	r1, #0
 8009bc0:	bf14      	ite	ne
 8009bc2:	2340      	movne	r3, #64	@ 0x40
 8009bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009bc8:	2000      	movs	r0, #0
 8009bca:	6031      	str	r1, [r6, #0]
 8009bcc:	602b      	str	r3, [r5, #0]
 8009bce:	b016      	add	sp, #88	@ 0x58
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	466a      	mov	r2, sp
 8009bd4:	f000 f848 	bl	8009c68 <_fstat_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	dbec      	blt.n	8009bb6 <__swhatbuf_r+0x12>
 8009bdc:	9901      	ldr	r1, [sp, #4]
 8009bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009be6:	4259      	negs	r1, r3
 8009be8:	4159      	adcs	r1, r3
 8009bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bee:	e7eb      	b.n	8009bc8 <__swhatbuf_r+0x24>

08009bf0 <__smakebuf_r>:
 8009bf0:	898b      	ldrh	r3, [r1, #12]
 8009bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bf4:	079d      	lsls	r5, r3, #30
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	d507      	bpl.n	8009c0c <__smakebuf_r+0x1c>
 8009bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	2301      	movs	r3, #1
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	b003      	add	sp, #12
 8009c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c0c:	ab01      	add	r3, sp, #4
 8009c0e:	466a      	mov	r2, sp
 8009c10:	f7ff ffc8 	bl	8009ba4 <__swhatbuf_r>
 8009c14:	9f00      	ldr	r7, [sp, #0]
 8009c16:	4605      	mov	r5, r0
 8009c18:	4639      	mov	r1, r7
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7fe fe66 	bl	80088ec <_malloc_r>
 8009c20:	b948      	cbnz	r0, 8009c36 <__smakebuf_r+0x46>
 8009c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c26:	059a      	lsls	r2, r3, #22
 8009c28:	d4ee      	bmi.n	8009c08 <__smakebuf_r+0x18>
 8009c2a:	f023 0303 	bic.w	r3, r3, #3
 8009c2e:	f043 0302 	orr.w	r3, r3, #2
 8009c32:	81a3      	strh	r3, [r4, #12]
 8009c34:	e7e2      	b.n	8009bfc <__smakebuf_r+0xc>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	6020      	str	r0, [r4, #0]
 8009c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c46:	b15b      	cbz	r3, 8009c60 <__smakebuf_r+0x70>
 8009c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 f81d 	bl	8009c8c <_isatty_r>
 8009c52:	b128      	cbz	r0, 8009c60 <__smakebuf_r+0x70>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	f043 0301 	orr.w	r3, r3, #1
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	431d      	orrs	r5, r3
 8009c64:	81a5      	strh	r5, [r4, #12]
 8009c66:	e7cf      	b.n	8009c08 <__smakebuf_r+0x18>

08009c68 <_fstat_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	@ (8009c88 <_fstat_r+0x20>)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	4611      	mov	r1, r2
 8009c74:	602b      	str	r3, [r5, #0]
 8009c76:	f7f7 fc12 	bl	800149e <_fstat>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	d102      	bne.n	8009c84 <_fstat_r+0x1c>
 8009c7e:	682b      	ldr	r3, [r5, #0]
 8009c80:	b103      	cbz	r3, 8009c84 <_fstat_r+0x1c>
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	bf00      	nop
 8009c88:	200003ac 	.word	0x200003ac

08009c8c <_isatty_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d06      	ldr	r5, [pc, #24]	@ (8009ca8 <_isatty_r+0x1c>)
 8009c90:	2300      	movs	r3, #0
 8009c92:	4604      	mov	r4, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	f7f7 fc11 	bl	80014be <_isatty>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_isatty_r+0x1a>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_isatty_r+0x1a>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	200003ac 	.word	0x200003ac

08009cac <_raise_r>:
 8009cac:	291f      	cmp	r1, #31
 8009cae:	b538      	push	{r3, r4, r5, lr}
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	d904      	bls.n	8009cc0 <_raise_r+0x14>
 8009cb6:	2316      	movs	r3, #22
 8009cb8:	6003      	str	r3, [r0, #0]
 8009cba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cc2:	b112      	cbz	r2, 8009cca <_raise_r+0x1e>
 8009cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cc8:	b94b      	cbnz	r3, 8009cde <_raise_r+0x32>
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f830 	bl	8009d30 <_getpid_r>
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cda:	f000 b817 	b.w	8009d0c <_kill_r>
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d00a      	beq.n	8009cf8 <_raise_r+0x4c>
 8009ce2:	1c59      	adds	r1, r3, #1
 8009ce4:	d103      	bne.n	8009cee <_raise_r+0x42>
 8009ce6:	2316      	movs	r3, #22
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	2001      	movs	r0, #1
 8009cec:	e7e7      	b.n	8009cbe <_raise_r+0x12>
 8009cee:	2100      	movs	r1, #0
 8009cf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	4798      	blx	r3
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e7e0      	b.n	8009cbe <_raise_r+0x12>

08009cfc <raise>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	@ (8009d08 <raise+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f7ff bfd3 	b.w	8009cac <_raise_r>
 8009d06:	bf00      	nop
 8009d08:	20000184 	.word	0x20000184

08009d0c <_kill_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d07      	ldr	r5, [pc, #28]	@ (8009d2c <_kill_r+0x20>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f7f7 fb60 	bl	80013de <_kill>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	d102      	bne.n	8009d28 <_kill_r+0x1c>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	b103      	cbz	r3, 8009d28 <_kill_r+0x1c>
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200003ac 	.word	0x200003ac

08009d30 <_getpid_r>:
 8009d30:	f7f7 bb4d 	b.w	80013ce <_getpid>

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
