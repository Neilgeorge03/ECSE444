
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae34  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800aff8  0800aff8  0000bff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4dc  0800b4dc  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4dc  0800b4dc  0000c4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e4  0800b4e4  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e4  0800b4e4  0000c4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4e8  0800b4e8  0000c4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b4ec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  0800b6c0  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800b6c0  0000d444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001180c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023dd  00000000  00000000  0001ea10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00020df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0e  00000000  00000000  00021c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c33b  00000000  00000000  0002276e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001067e  00000000  00000000  0004eaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001121fc  00000000  00000000  0005f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171323  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  00171368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001764e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800afdc 	.word	0x0800afdc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800afdc 	.word	0x0800afdc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001020:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800102c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001030:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001034:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800103c:	e000      	b.n	8001040 <ITM_SendChar+0x2c>
    {
      __NOP();
 800103e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001040:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f9      	beq.n	800103e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800104a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <getVoltage>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float getVoltage(){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	float adc_value;
	HAL_ADC_Start(&hadc1);
 800106a:	4816      	ldr	r0, [pc, #88]	@ (80010c4 <getVoltage+0x60>)
 800106c:	f001 f8d6 	bl	800221c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001070:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001074:	4813      	ldr	r0, [pc, #76]	@ (80010c4 <getVoltage+0x60>)
 8001076:	f001 f967 	bl	8002348 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 800107a:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <getVoltage+0x60>)
 800107c:	f001 f9f3 	bl	8002466 <HAL_ADC_GetValue>
 8001080:	ee07 0a90 	vmov	s15, r0
 8001084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001088:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800108c:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <getVoltage+0x60>)
 800108e:	f001 f928 	bl	80022e2 <HAL_ADC_Stop>
	float vRef = (3.0f * (* VREF_CAL_ADDR))/((float) adc_value);
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <getVoltage+0x64>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80010a2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80010aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ae:	edc7 7a00 	vstr	s15, [r7]
	return vRef;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ee07 3a90 	vmov	s15, r3
}
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001f0 	.word	0x200001f0
 80010c8:	1fff75aa 	.word	0x1fff75aa

080010cc <getTemperature>:

int8_t getTemperature(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
    uint16_t ts_cal1 = *TS_CAL1_ADDR;  // Read calibration value at 30°C
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <getTemperature+0x74>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	81fb      	strh	r3, [r7, #14]
    uint16_t ts_cal2 = *TS_CAL2_ADDR;  // Read calibration value at 130°C
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <getTemperature+0x78>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	81bb      	strh	r3, [r7, #12]

	uint32_t adc_value;
	HAL_ADC_Start(&hadc1);
 80010de:	481a      	ldr	r0, [pc, #104]	@ (8001148 <getTemperature+0x7c>)
 80010e0:	f001 f89c 	bl	800221c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010e8:	4817      	ldr	r0, [pc, #92]	@ (8001148 <getTemperature+0x7c>)
 80010ea:	f001 f92d 	bl	8002348 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 80010ee:	4816      	ldr	r0, [pc, #88]	@ (8001148 <getTemperature+0x7c>)
 80010f0:	f001 f9b9 	bl	8002466 <HAL_ADC_GetValue>
 80010f4:	60b8      	str	r0, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 80010f6:	4814      	ldr	r0, [pc, #80]	@ (8001148 <getTemperature+0x7c>)
 80010f8:	f001 f8f3 	bl	80022e2 <HAL_ADC_Stop>
	return ((100.0f) / (float)(ts_cal2 - ts_cal1)) *
 80010fc:	89ba      	ldrh	r2, [r7, #12]
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800114c <getTemperature+0x80>
 800110e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	           (adc_value - ts_cal1) + TS_CAL1_TEMP;
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	1ad3      	subs	r3, r2, r3
	return ((100.0f) / (float)(ts_cal2 - ts_cal1)) *
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001120:	ee67 7a27 	vmul.f32	s15, s14, s15
	           (adc_value - ts_cal1) + TS_CAL1_TEMP;
 8001124:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001130:	edc7 7a01 	vstr	s15, [r7, #4]
 8001134:	793b      	ldrb	r3, [r7, #4]
 8001136:	b25b      	sxtb	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	1fff75a8 	.word	0x1fff75a8
 8001144:	1fff75ca 	.word	0x1fff75ca
 8001148:	200001f0 	.word	0x200001f0
 800114c:	42c80000 	.word	0x42c80000

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0a0      	sub	sp, #128	@ 0x80
 8001154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f000 fc5a 	bl	8001a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f875 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f000 f9a7 	bl	80014b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001162:	f000 f8c3 	bl	80012ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001166:	f000 f957 	bl	8001418 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  switch (state){
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <main+0xe4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <main+0x2a>
 8001174:	2b01      	cmp	r3, #1
 8001176:	d019      	beq.n	80011ac <main+0x5c>
 8001178:	e039      	b.n	80011ee <main+0x9e>
  		  case 0:
  			  voltage = getVoltage();
 800117a:	f7ff ff73 	bl	8001064 <getVoltage>
 800117e:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
  			  uartLen = sprintf(data, "The voltage is: %.2fV\n", voltage);
 8001182:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001184:	f7ff f9f8 	bl	8000578 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	1d38      	adds	r0, r7, #4
 800118e:	492a      	ldr	r1, [pc, #168]	@ (8001238 <main+0xe8>)
 8001190:	f006 fa26 	bl	80075e0 <siprintf>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  HAL_UART_Transmit(&huart1, data, uartLen, 1000);
 800119a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800119e:	b29a      	uxth	r2, r3
 80011a0:	1d39      	adds	r1, r7, #4
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	4825      	ldr	r0, [pc, #148]	@ (800123c <main+0xec>)
 80011a8:	f004 fd02 	bl	8005bb0 <HAL_UART_Transmit>
//  				ITM_SendChar(data[i]);
//  			  }
//  			  break;

  		  case 1:
  			  temperature = getTemperature();
 80011ac:	f7ff ff8e 	bl	80010cc <getTemperature>
 80011b0:	4603      	mov	r3, r0
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
  			  uartLen = sprintf(data, "The temperature is: %.2f%cC\n", temperature, 176);
 80011be:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80011c0:	f7ff f9da 	bl	8000578 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	1d38      	adds	r0, r7, #4
 80011ca:	21b0      	movs	r1, #176	@ 0xb0
 80011cc:	9100      	str	r1, [sp, #0]
 80011ce:	491c      	ldr	r1, [pc, #112]	@ (8001240 <main+0xf0>)
 80011d0:	f006 fa06 	bl	80075e0 <siprintf>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  HAL_UART_Transmit(&huart1, data, uartLen, 1000);
 80011da:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80011de:	b29a      	uxth	r2, r3
 80011e0:	1d39      	adds	r1, r7, #4
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <main+0xec>)
 80011e8:	f004 fce2 	bl	8005bb0 <HAL_UART_Transmit>

//  			  for (int i = 0; i < uartLen; i++){
//  				ITM_SendChar(data[i]);
//  			  }
  			  break;
 80011ec:	e01c      	b.n	8001228 <main+0xd8>
  		  default:
  			  uartLen = sprintf("The state is: %d\n", state);
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <main+0xe4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <main+0xf4>)
 80011f8:	f006 f9f2 	bl	80075e0 <siprintf>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  			  for (int i = 0; i < uartLen; i++){
 8001202:	2300      	movs	r3, #0
 8001204:	677b      	str	r3, [r7, #116]	@ 0x74
 8001206:	e00a      	b.n	800121e <main+0xce>
  				ITM_SendChar(data[i]);
 8001208:	1d3a      	adds	r2, r7, #4
 800120a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800120c:	4413      	add	r3, r2
 800120e:	f993 3000 	ldrsb.w	r3, [r3]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fefe 	bl	8001014 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8001218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800121a:	3301      	adds	r3, #1
 800121c:	677b      	str	r3, [r7, #116]	@ 0x74
 800121e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001222:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001224:	429a      	cmp	r2, r3
 8001226:	dbef      	blt.n	8001208 <main+0xb8>
  			  }

  	  }
  	  HAL_Delay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122c:	f000 fc64 	bl	8001af8 <HAL_Delay>
  	  switch (state){
 8001230:	e79b      	b.n	800116a <main+0x1a>
 8001232:	bf00      	nop
 8001234:	200002ec 	.word	0x200002ec
 8001238:	0800aff8 	.word	0x0800aff8
 800123c:	20000258 	.word	0x20000258
 8001240:	0800b010 	.word	0x0800b010
 8001244:	0800b030 	.word	0x0800b030

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b096      	sub	sp, #88	@ 0x58
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2244      	movs	r2, #68	@ 0x44
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f007 f93c 	bl	80084d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800126a:	2000      	movs	r0, #0
 800126c:	f002 ffbc 	bl	80041e8 <HAL_PWREx_ControlVoltageScaling>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001276:	f000 f99f 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800127a:	2310      	movs	r3, #16
 800127c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001286:	2360      	movs	r3, #96	@ 0x60
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800128e:	2301      	movs	r3, #1
 8001290:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001296:	233c      	movs	r3, #60	@ 0x3c
 8001298:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 f840 	bl	8004330 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012b6:	f000 f97f 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ba:	230f      	movs	r3, #15
 80012bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2303      	movs	r3, #3
 80012c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	2105      	movs	r1, #5
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fc46 	bl	8004b64 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012de:	f000 f96b 	bl	80015b8 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3758      	adds	r7, #88	@ 0x58
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	@ 0x50
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2234      	movs	r2, #52	@ 0x34
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 f8e2 	bl	80084d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001310:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <MX_ADC1_Init+0x120>)
 8001312:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <MX_ADC1_Init+0x124>)
 8001314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001316:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <MX_ADC1_Init+0x120>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800131c:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <MX_ADC1_Init+0x120>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001322:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <MX_ADC1_Init+0x120>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001328:	4b38      	ldr	r3, [pc, #224]	@ (800140c <MX_ADC1_Init+0x120>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <MX_ADC1_Init+0x120>)
 8001330:	2204      	movs	r2, #4
 8001332:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001334:	4b35      	ldr	r3, [pc, #212]	@ (800140c <MX_ADC1_Init+0x120>)
 8001336:	2200      	movs	r2, #0
 8001338:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <MX_ADC1_Init+0x120>)
 800133c:	2200      	movs	r2, #0
 800133e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <MX_ADC1_Init+0x120>)
 8001342:	2201      	movs	r2, #1
 8001344:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <MX_ADC1_Init+0x120>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134e:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <MX_ADC1_Init+0x120>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <MX_ADC1_Init+0x120>)
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800135a:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <MX_ADC1_Init+0x120>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_ADC1_Init+0x120>)
 8001364:	2200      	movs	r2, #0
 8001366:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <MX_ADC1_Init+0x120>)
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001370:	4826      	ldr	r0, [pc, #152]	@ (800140c <MX_ADC1_Init+0x120>)
 8001372:	f000 fe0d 	bl	8001f90 <HAL_ADC_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800137c:	f000 f91c 	bl	80015b8 <Error_Handler>
  }

  /** Disable Injected Queue
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc1);
 8001380:	4822      	ldr	r0, [pc, #136]	@ (800140c <MX_ADC1_Init+0x120>)
 8001382:	f002 fbfb 	bl	8003b7c <HAL_ADCEx_DisableInjectedQueue>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <MX_ADC1_Init+0x128>)
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	2306      	movs	r3, #6
 800138c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800138e:	2306      	movs	r3, #6
 8001390:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001392:	237f      	movs	r3, #127	@ 0x7f
 8001394:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001396:	2304      	movs	r3, #4
 8001398:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.Offset = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013a2:	4619      	mov	r1, r3
 80013a4:	4819      	ldr	r0, [pc, #100]	@ (800140c <MX_ADC1_Init+0x120>)
 80013a6:	f001 f86b 	bl	8002480 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013b0:	f000 f902 	bl	80015b8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_ADC1_Init+0x128>)
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013b8:	2308      	movs	r3, #8
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80013bc:	2306      	movs	r3, #6
 80013be:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80013c0:	237f      	movs	r3, #127	@ 0x7f
 80013c2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80013c4:	2304      	movs	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sConfigInjected.QueueInjectedContext = DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_ADC1_Init+0x120>)
 80013f6:	f001 ff07 	bl	8003208 <HAL_ADCEx_InjectedConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001400:	f000 f8da 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3750      	adds	r7, #80	@ 0x50
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200001f0 	.word	0x200001f0
 8001410:	50040000 	.word	0x50040000
 8001414:	c7520000 	.word	0xc7520000

08001418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 800141e:	4a23      	ldr	r2, [pc, #140]	@ (80014ac <MX_USART1_UART_Init+0x94>)
 8001420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001460:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001462:	f004 fb55 	bl	8005b10 <HAL_UART_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800146c:	f000 f8a4 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001474:	f005 f97e 	bl	8006774 <HAL_UARTEx_SetTxFifoThreshold>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800147e:	f000 f89b 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001486:	f005 f9b3 	bl	80067f0 <HAL_UARTEx_SetRxFifoThreshold>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001490:	f000 f892 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_USART1_UART_Init+0x90>)
 8001496:	f005 f934 	bl	8006702 <HAL_UARTEx_DisableFifoMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f000 f88a 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000258 	.word	0x20000258
 80014ac:	40013800 	.word	0x40013800

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	4a28      	ldr	r2, [pc, #160]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a22      	ldr	r2, [pc, #136]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <MX_GPIO_Init+0xbc>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_GPIO_Init+0xbc>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001514:	4816      	ldr	r0, [pc, #88]	@ (8001570 <MX_GPIO_Init+0xc0>)
 8001516:	f002 fdfd 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001520:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	4810      	ldr	r0, [pc, #64]	@ (8001574 <MX_GPIO_Init+0xc4>)
 8001532:	f002 fc5d 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001536:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	4808      	ldr	r0, [pc, #32]	@ (8001570 <MX_GPIO_Init+0xc0>)
 8001550:	f002 fc4e 	bl	8003df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2028      	movs	r0, #40	@ 0x28
 800155a:	f002 fc12 	bl	8003d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800155e:	2028      	movs	r0, #40	@ 0x28
 8001560:	f002 fc2b 	bl	8003dba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	48000400 	.word	0x48000400
 8001574:	48000800 	.word	0x48000800

08001578 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == User_Button_Pin) {
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001588:	d10d      	bne.n	80015a6 <HAL_GPIO_EXTI_Callback+0x2e>
	state ^= 1;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_GPIO_EXTI_Callback+0x38>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001598:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800159a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80015a0:	f002 fdd0 	bl	8004144 <HAL_GPIO_TogglePin>
//    HAL_Delay(1000);
  } else {
      __NOP();
  }
}
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_EXTI_Callback+0x30>
      __NOP();
 80015a6:	bf00      	nop
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200002ec 	.word	0x200002ec
 80015b4:	48000400 	.word	0x48000400

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <Error_Handler+0x8>

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_MspInit+0x44>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_MspInit+0x44>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0ae      	sub	sp, #184	@ 0xb8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2294      	movs	r2, #148	@ 0x94
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f006 ff51 	bl	80084d4 <memset>
  if(hadc->Instance==ADC1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a27      	ldr	r2, [pc, #156]	@ (80016d4 <HAL_ADC_MspInit+0xc8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d146      	bne.n	80016ca <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800163c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001640:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001642:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800164a:	2301      	movs	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001652:	2318      	movs	r3, #24
 8001654:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001662:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fd37 	bl	80050e0 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001678:	f7ff ff9e 	bl	80015b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_ADC_MspInit+0xcc>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <HAL_ADC_MspInit+0xcc>)
 8001682:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <HAL_ADC_MspInit+0xcc>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <HAL_ADC_MspInit+0xcc>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <HAL_ADC_MspInit+0xcc>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <HAL_ADC_MspInit+0xcc>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016b2:	230b      	movs	r3, #11
 80016b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <HAL_ADC_MspInit+0xd0>)
 80016c6:	f002 fb93 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	37b8      	adds	r7, #184	@ 0xb8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	50040000 	.word	0x50040000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000800 	.word	0x48000800

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0ae      	sub	sp, #184	@ 0xb8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2294      	movs	r2, #148	@ 0x94
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f006 fee7 	bl	80084d4 <memset>
  if(huart->Instance==USART1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <HAL_UART_MspInit+0xb4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d13c      	bne.n	800178a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001714:	2300      	movs	r3, #0
 8001716:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fcdf 	bl	80050e0 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001728:	f7ff ff46 	bl	80015b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <HAL_UART_MspInit+0xb8>)
 800172e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001730:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <HAL_UART_MspInit+0xb8>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001736:	6613      	str	r3, [r2, #96]	@ 0x60
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <HAL_UART_MspInit+0xb8>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <HAL_UART_MspInit+0xb8>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	4a13      	ldr	r2, [pc, #76]	@ (8001798 <HAL_UART_MspInit+0xb8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_UART_MspInit+0xb8>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800175c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001760:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001776:	2307      	movs	r3, #7
 8001778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001786:	f002 fb33 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	37b8      	adds	r7, #184	@ 0xb8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40013800 	.word	0x40013800
 8001798:	40021000 	.word	0x40021000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 f961 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}

080017fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80017fe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001802:	f002 fcb9 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}

0800180a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_kill>:

int _kill(int pid, int sig)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001824:	f006 fe62 	bl	80084ec <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	2216      	movs	r2, #22
 800182c:	601a      	str	r2, [r3, #0]
  return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_exit>:

void _exit (int status)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001842:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffe7 	bl	800181a <_kill>
  while (1) {}    /* Make sure we hang here */
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <_exit+0x12>

08001850 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e00a      	b.n	8001878 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001862:	f3af 8000 	nop.w
 8001866:	4601      	mov	r1, r0
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	b2ca      	uxtb	r2, r1
 8001870:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbf0      	blt.n	8001862 <_read+0x12>
  }

  return len;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e009      	b.n	80018b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf1      	blt.n	800189c <_write+0x12>
  }
  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_close>:

int _close(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ea:	605a      	str	r2, [r3, #4]
  return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_isatty>:

int _isatty(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <_sbrk+0x5c>)
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <_sbrk+0x60>)
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800195c:	f006 fdc6 	bl	80084ec <__errno>
 8001960:	4603      	mov	r3, r0
 8001962:	220c      	movs	r2, #12
 8001964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200a0000 	.word	0x200a0000
 800198c:	00000400 	.word	0x00000400
 8001990:	200002f0 	.word	0x200002f0
 8001994:	20000448 	.word	0x20000448

08001998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff ffea 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f006 fd85 	bl	80084f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ee:	f7ff fbaf 	bl	8001150 <main>

080019f2 <LoopForever>:

LoopForever:
    b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019f4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a00:	0800b4ec 	.word	0x0800b4ec
  ldr r2, =_sbss
 8001a04:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a08:	20000444 	.word	0x20000444

08001a0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_IRQHandler>

08001a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f002 f9a7 	bl	8003d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f80e 	bl	8001a40 <HAL_InitTick>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	71fb      	strb	r3, [r7, #7]
 8001a2e:	e001      	b.n	8001a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a30:	f7ff fdc8 	bl	80015c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a34:	79fb      	ldrb	r3, [r7, #7]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a4c:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_InitTick+0x6c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d023      	beq.n	8001a9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_InitTick+0x70>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <HAL_InitTick+0x6c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 f9b3 	bl	8003dd6 <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d809      	bhi.n	8001a90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a84:	f002 f97d 	bl	8003d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <HAL_InitTick+0x74>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e007      	b.n	8001aa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e004      	b.n	8001aa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e001      	b.n	8001aa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	200002f4 	.word	0x200002f4

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200002f4 	.word	0x200002f4

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffee 	bl	8001ae0 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008

08001b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3360      	adds	r3, #96	@ 0x60
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <LL_ADC_SetOffset+0x44>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	03fff000 	.word	0x03fff000

08001bf0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3360      	adds	r3, #96	@ 0x60
 8001bfe:	461a      	mov	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3360      	adds	r3, #96	@ 0x60
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	615a      	str	r2, [r3, #20]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b087      	sub	sp, #28
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3330      	adds	r3, #48	@ 0x30
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	4413      	add	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	211f      	movs	r1, #31
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 011f 	and.w	r1, r3, #31
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3314      	adds	r3, #20
 8001d06:	461a      	mov	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	0e5b      	lsrs	r3, r3, #25
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	0d1b      	lsrs	r3, r3, #20
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2107      	movs	r1, #7
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0d1b      	lsrs	r3, r3, #20
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0318 	and.w	r3, r3, #24
 8001d6e:	4908      	ldr	r1, [pc, #32]	@ (8001d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d70:	40d9      	lsrs	r1, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	400b      	ands	r3, r1
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	0007ffff 	.word	0x0007ffff

08001d94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001da4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6093      	str	r3, [r2, #8]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dcc:	d101      	bne.n	8001dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001df4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e1c:	d101      	bne.n	8001e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e6c:	f043 0202 	orr.w	r2, r3, #2
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <LL_ADC_IsEnabled+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_ADC_IsEnabled+0x1a>
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsDisableOngoing+0x18>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsDisableOngoing+0x1a>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001edc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ee0:	f043 0204 	orr.w	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f08:	f043 0210 	orr.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d101      	bne.n	8001f34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f52:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f56:	f043 0220 	orr.w	r2, r3, #32
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d101      	bne.n	8001f82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e129      	b.n	80021fe <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fb27 	bl	800160c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fef1 	bl	8001db8 <LL_ADC_IsDeepPowerDownEnabled>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fed7 	bl	8001d94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff0c 	bl	8001e08 <LL_ADC_IsInternalRegulatorEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fef0 	bl	8001de0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002000:	4b81      	ldr	r3, [pc, #516]	@ (8002208 <HAL_ADC_Init+0x278>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	4a81      	ldr	r2, [pc, #516]	@ (800220c <HAL_ADC_Init+0x27c>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	3301      	adds	r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002014:	e002      	b.n	800201c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3b01      	subs	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff feee 	bl	8001e08 <LL_ADC_IsInternalRegulatorEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff62 	bl	8001f1c <LL_ADC_REG_IsConversionOngoing>
 8002058:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 80c2 	bne.w	80021ec <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80be 	bne.w	80021ec <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002078:	f043 0202 	orr.w	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fefb 	bl	8001e80 <LL_ADC_IsEnabled>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002090:	485f      	ldr	r0, [pc, #380]	@ (8002210 <HAL_ADC_Init+0x280>)
 8002092:	f7ff fef5 	bl	8001e80 <LL_ADC_IsEnabled>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4619      	mov	r1, r3
 80020a2:	485c      	ldr	r0, [pc, #368]	@ (8002214 <HAL_ADC_Init+0x284>)
 80020a4:	f7ff fd4c 	bl	8001b40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e5b      	ldrb	r3, [r3, #25]
 80020ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d106      	bne.n	80020e4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	045b      	lsls	r3, r3, #17
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <HAL_ADC_Init+0x288>)
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	430b      	orrs	r3, r1
 8002112:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff26 	bl	8001f6a <LL_ADC_INJ_IsConversionOngoing>
 800211e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d140      	bne.n	80021a8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d13d      	bne.n	80021a8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7e1b      	ldrb	r3, [r3, #24]
 8002134:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002136:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800213e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800214e:	f023 0306 	bic.w	r3, r3, #6
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	430b      	orrs	r3, r1
 800215a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002162:	2b01      	cmp	r3, #1
 8002164:	d118      	bne.n	8002198 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002188:	430a      	orrs	r2, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	611a      	str	r2, [r3, #16]
 8002196:	e007      	b.n	80021a8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10c      	bne.n	80021ca <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f023 010f 	bic.w	r1, r3, #15
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	1e5a      	subs	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021c8:	e007      	b.n	80021da <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 020f 	bic.w	r2, r2, #15
 80021d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80021ea:	e007      	b.n	80021fc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000
 800220c:	053e2d63 	.word	0x053e2d63
 8002210:	50040000 	.word	0x50040000
 8002214:	50040300 	.word	0x50040300
 8002218:	fff0c007 	.word	0xfff0c007

0800221c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fe77 	bl	8001f1c <LL_ADC_REG_IsConversionOngoing>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d14f      	bne.n	80022d4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Start+0x26>
 800223e:	2302      	movs	r3, #2
 8002240:	e04b      	b.n	80022da <HAL_ADC_Start+0xbe>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fdd0 	bl	8002df0 <ADC_Enable>
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d137      	bne.n	80022ca <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800227a:	d106      	bne.n	800228a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	f023 0206 	bic.w	r2, r3, #6
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002288:	e002      	b.n	8002290 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	221c      	movs	r2, #28
 8002296:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fe02 	bl	8001ecc <LL_ADC_REG_StartConversion>
 80022c8:	e006      	b.n	80022d8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_Stop+0x16>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e023      	b.n	8002340 <HAL_ADC_Stop+0x5e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002300:	2103      	movs	r1, #3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fcb8 	bl	8002c78 <ADC_ConversionStop>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d111      	bne.n	8002336 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fdf2 	bl	8002efc <ADC_Disable>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002326:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d102      	bne.n	8002360 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800235a:	2308      	movs	r3, #8
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e010      	b.n	8002382 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	f043 0220 	orr.w	r2, r3, #32
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06f      	b.n	800245e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800237e:	2304      	movs	r3, #4
 8002380:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002382:	f7ff fbad 	bl	8001ae0 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002388:	e021      	b.n	80023ce <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002390:	d01d      	beq.n	80023ce <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002392:	f7ff fba5 	bl	8001ae0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <HAL_ADC_PollForConversion+0x60>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d112      	bne.n	80023ce <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10b      	bne.n	80023ce <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f043 0204 	orr.w	r2, r3, #4
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e047      	b.n	800245e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0d6      	beq.n	800238a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fc43 	bl	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e5b      	ldrb	r3, [r3, #25]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d111      	bne.n	8002432 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d104      	bne.n	800244a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2208      	movs	r2, #8
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e008      	b.n	800245c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	220c      	movs	r2, #12
 800245a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0b6      	sub	sp, #216	@ 0xd8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x22>
 800249e:	2302      	movs	r3, #2
 80024a0:	e3d5      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x7ce>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fd34 	bl	8001f1c <LL_ADC_REG_IsConversionOngoing>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 83ba 	bne.w	8002c30 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d824      	bhi.n	8002516 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	3b02      	subs	r3, #2
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d81b      	bhi.n	800250e <HAL_ADC_ConfigChannel+0x8e>
 80024d6:	a201      	add	r2, pc, #4	@ (adr r2, 80024dc <HAL_ADC_ConfigChannel+0x5c>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	080024f5 	.word	0x080024f5
 80024e4:	080024fd 	.word	0x080024fd
 80024e8:	08002505 	.word	0x08002505
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024ec:	230c      	movs	r3, #12
 80024ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024f2:	e010      	b.n	8002516 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024f4:	2312      	movs	r3, #18
 80024f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024fa:	e00c      	b.n	8002516 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024fc:	2318      	movs	r3, #24
 80024fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002502:	e008      	b.n	8002516 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800250e:	2306      	movs	r3, #6
 8002510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002514:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002524:	f7ff fbbb 	bl	8001c9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fcf5 	bl	8001f1c <LL_ADC_REG_IsConversionOngoing>
 8002532:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fd15 	bl	8001f6a <LL_ADC_INJ_IsConversionOngoing>
 8002540:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 81bf 	bne.w	80028cc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800254e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 81ba 	bne.w	80028cc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002560:	d10f      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	4619      	mov	r1, r3
 800256e:	f7ff fbc2 	bl	8001cf6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fb69 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonConfig>
 8002580:	e00e      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	461a      	mov	r2, r3
 8002590:	f7ff fbb1 	bl	8001cf6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fb59 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d00a      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6919      	ldr	r1, [r3, #16]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025d2:	f7ff fae9 	bl	8001ba8 <LL_ADC_SetOffset>
 80025d6:	e179      	b.n	80028cc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb06 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x184>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fafb 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	e01e      	b.n	8002642 <HAL_ADC_ConfigChannel+0x1c2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff faf0 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002626:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800262a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002636:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_ADC_ConfigChannel+0x1da>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	e018      	b.n	800268c <HAL_ADC_ConfigChannel+0x20c>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800266e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002676:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002682:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fabf 	bl	8001c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff faa3 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x24a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fa98 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	e01e      	b.n	8002708 <HAL_ADC_ConfigChannel+0x288>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fa8d 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e004      	b.n	8002706 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80026fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x2a0>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	e018      	b.n	8002752 <HAL_ADC_ConfigChannel+0x2d2>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002734:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800273c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e004      	b.n	8002752 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002752:	429a      	cmp	r2, r3
 8002754:	d106      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fa5c 	bl	8001c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2102      	movs	r1, #2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa40 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x310>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2102      	movs	r1, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fa35 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	e01e      	b.n	80027ce <HAL_ADC_ConfigChannel+0x34e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2102      	movs	r1, #2
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fa2a 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80027ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80027b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e004      	b.n	80027cc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80027c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x366>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	e014      	b.n	8002810 <HAL_ADC_ConfigChannel+0x390>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e004      	b.n	8002810 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002806:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002810:	429a      	cmp	r2, r3
 8002812:	d106      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	2102      	movs	r1, #2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff f9fd 	bl	8001c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2103      	movs	r1, #3
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f9e1 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <HAL_ADC_ConfigChannel+0x3ce>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2103      	movs	r1, #3
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f9d6 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	e017      	b.n	800287e <HAL_ADC_ConfigChannel+0x3fe>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2103      	movs	r1, #3
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f9cb 	bl	8001bf0 <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002868:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800286a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e003      	b.n	800287c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002874:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x416>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0e9b      	lsrs	r3, r3, #26
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	e011      	b.n	80028ba <HAL_ADC_ConfigChannel+0x43a>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80028a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80028a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e003      	b.n	80028ba <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80028b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d106      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2103      	movs	r1, #3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f9a8 	bl	8001c1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fad5 	bl	8001e80 <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f040 813f 	bne.w	8002b5c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f7ff fa2e 	bl	8001d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a8e      	ldr	r2, [pc, #568]	@ (8002b30 <HAL_ADC_ConfigChannel+0x6b0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	f040 8130 	bne.w	8002b5c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x4a4>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0e9b      	lsrs	r3, r3, #26
 8002912:	3301      	adds	r3, #1
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2b09      	cmp	r3, #9
 800291a:	bf94      	ite	ls
 800291c:	2301      	movls	r3, #1
 800291e:	2300      	movhi	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e019      	b.n	8002958 <HAL_ADC_ConfigChannel+0x4d8>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e003      	b.n	8002948 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	3301      	adds	r3, #1
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2b09      	cmp	r3, #9
 8002950:	bf94      	ite	ls
 8002952:	2301      	movls	r3, #1
 8002954:	2300      	movhi	r3, #0
 8002956:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002958:	2b00      	cmp	r3, #0
 800295a:	d079      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x4f8>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	069b      	lsls	r3, r3, #26
 8002972:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002976:	e015      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x524>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002988:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800298a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	069b      	lsls	r3, r3, #26
 80029a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x544>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0e9b      	lsrs	r3, r3, #26
 80029b6:	3301      	adds	r3, #1
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	e017      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x574>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e003      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80029e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	ea42 0103 	orr.w	r1, r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x59a>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	051b      	lsls	r3, r3, #20
 8002a18:	e018      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x5cc>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002a32:	2320      	movs	r3, #32
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	e080      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x5ec>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	069b      	lsls	r3, r3, #26
 8002a66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6a:	e015      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x618>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	069b      	lsls	r3, r3, #26
 8002a94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x638>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	e017      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x668>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e003      	b.n	8002adc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	ea42 0103 	orr.w	r1, r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10d      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x694>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b1e      	subs	r3, #30
 8002b0c:	051b      	lsls	r3, r3, #20
 8002b0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	e01d      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x6d0>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	60fb      	str	r3, [r7, #12]
  return result;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d103      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e005      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x6bc>
 8002b30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 021f 	and.w	r2, r3, #31
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	3b1e      	subs	r3, #30
 8002b4a:	051b      	lsls	r3, r3, #20
 8002b4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7ff f8cd 	bl	8001cf6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b3d      	ldr	r3, [pc, #244]	@ (8002c58 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d06c      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b68:	483c      	ldr	r0, [pc, #240]	@ (8002c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002b6a:	f7ff f80f 	bl	8001b8c <LL_ADC_GetCommonPathInternalCh>
 8002b6e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3a      	ldr	r2, [pc, #232]	@ (8002c60 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d127      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d121      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a35      	ldr	r2, [pc, #212]	@ (8002c64 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d157      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	482f      	ldr	r0, [pc, #188]	@ (8002c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002b9e:	f7fe ffe2 	bl	8001b66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba2:	4b31      	ldr	r3, [pc, #196]	@ (8002c68 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	4a30      	ldr	r2, [pc, #192]	@ (8002c6c <HAL_ADC_ConfigChannel+0x7ec>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bbc:	e002      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f9      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bca:	e03a      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a27      	ldr	r2, [pc, #156]	@ (8002c70 <HAL_ADC_ConfigChannel+0x7f0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d113      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c64 <HAL_ADC_ConfigChannel+0x7e4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d12a      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4819      	ldr	r0, [pc, #100]	@ (8002c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002bf8:	f7fe ffb5 	bl	8001b66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bfc:	e021      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1c      	ldr	r2, [pc, #112]	@ (8002c74 <HAL_ADC_ConfigChannel+0x7f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d11c      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c26:	4619      	mov	r1, r3
 8002c28:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002c2a:	f7fe ff9c 	bl	8001b66 <LL_ADC_SetCommonPathInternalCh>
 8002c2e:	e008      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	37d8      	adds	r7, #216	@ 0xd8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	80080000 	.word	0x80080000
 8002c5c:	50040300 	.word	0x50040300
 8002c60:	c7520000 	.word	0xc7520000
 8002c64:	50040000 	.word	0x50040000
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	053e2d63 	.word	0x053e2d63
 8002c70:	cb840000 	.word	0xcb840000
 8002c74:	80000001 	.word	0x80000001

08002c78 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f944 	bl	8001f1c <LL_ADC_REG_IsConversionOngoing>
 8002c94:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f965 	bl	8001f6a <LL_ADC_INJ_IsConversionOngoing>
 8002ca0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d103      	bne.n	8002cb0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8098 	beq.w	8002de0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02a      	beq.n	8002d14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7e5b      	ldrb	r3, [r3, #25]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d126      	bne.n	8002d14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e1b      	ldrb	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d122      	bne.n	8002d14 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cd2:	e014      	b.n	8002cfe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4a45      	ldr	r2, [pc, #276]	@ (8002dec <ADC_ConversionStop+0x174>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d90d      	bls.n	8002cf8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce0:	f043 0210 	orr.w	r2, r3, #16
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e074      	b.n	8002de2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d08:	2b40      	cmp	r3, #64	@ 0x40
 8002d0a:	d1e3      	bne.n	8002cd4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d014      	beq.n	8002d44 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f8fc 	bl	8001f1c <LL_ADC_REG_IsConversionOngoing>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f8b9 	bl	8001ea6 <LL_ADC_IsDisableOngoing>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f8d8 	bl	8001ef4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d014      	beq.n	8002d74 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f90b 	bl	8001f6a <LL_ADC_INJ_IsConversionOngoing>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff f8a1 	bl	8001ea6 <LL_ADC_IsDisableOngoing>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f8e7 	bl	8001f42 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d005      	beq.n	8002d86 <ADC_ConversionStop+0x10e>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d105      	bne.n	8002d8c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002d80:	230c      	movs	r3, #12
 8002d82:	617b      	str	r3, [r7, #20]
        break;
 8002d84:	e005      	b.n	8002d92 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d86:	2308      	movs	r3, #8
 8002d88:	617b      	str	r3, [r7, #20]
        break;
 8002d8a:	e002      	b.n	8002d92 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	617b      	str	r3, [r7, #20]
        break;
 8002d90:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d92:	f7fe fea5 	bl	8001ae0 <HAL_GetTick>
 8002d96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d98:	e01b      	b.n	8002dd2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d9a:	f7fe fea1 	bl	8001ae0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d914      	bls.n	8002dd2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e007      	b.n	8002de2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1dc      	bne.n	8002d9a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	a33fffff 	.word	0xa33fffff

08002df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f83d 	bl	8001e80 <LL_ADC_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d169      	bne.n	8002ee0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <ADC_Enable+0xfc>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e055      	b.n	8002ee2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fff8 	bl	8001e30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e40:	482b      	ldr	r0, [pc, #172]	@ (8002ef0 <ADC_Enable+0x100>)
 8002e42:	f7fe fea3 	bl	8001b8c <LL_ADC_GetCommonPathInternalCh>
 8002e46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e50:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <ADC_Enable+0x104>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	4a28      	ldr	r2, [pc, #160]	@ (8002ef8 <ADC_Enable+0x108>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e6a:	e002      	b.n	8002e72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fe32 	bl	8001ae0 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	e028      	b.n	8002ed2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fffb 	bl	8001e80 <LL_ADC_IsEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ffcb 	bl	8001e30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e9a:	f7fe fe21 	bl	8001ae0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d914      	bls.n	8002ed2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d00d      	beq.n	8002ed2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d1cf      	bne.n	8002e80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	8000003f 	.word	0x8000003f
 8002ef0:	50040300 	.word	0x50040300
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	053e2d63 	.word	0x053e2d63

08002efc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe ffcc 	bl	8001ea6 <LL_ADC_IsDisableOngoing>
 8002f0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe ffb3 	bl	8001e80 <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d047      	beq.n	8002fb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d144      	bne.n	8002fb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030d 	and.w	r3, r3, #13
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10c      	bne.n	8002f4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe ff8d 	bl	8001e58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2203      	movs	r2, #3
 8002f44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f46:	f7fe fdcb 	bl	8001ae0 <HAL_GetTick>
 8002f4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f4c:	e029      	b.n	8002fa2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e023      	b.n	8002fb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f6a:	f7fe fdb9 	bl	8001ae0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d914      	bls.n	8002fa2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8a:	f043 0210 	orr.w	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	f043 0201 	orr.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e007      	b.n	8002fb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1dc      	bne.n	8002f6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <LL_ADC_SetCommonPathInternalCh>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_GetCommonPathInternalCh>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_SetOffset>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3360      	adds	r3, #96	@ 0x60
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <LL_ADC_SetOffset+0x44>)
 800301e:	4013      	ands	r3, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	4313      	orrs	r3, r2
 800302c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	601a      	str	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	03fff000 	.word	0x03fff000

08003044 <LL_ADC_GetOffsetChannel>:
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3360      	adds	r3, #96	@ 0x60
 8003052:	461a      	mov	r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_SetOffsetState>:
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3360      	adds	r3, #96	@ 0x60
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	431a      	orrs	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	601a      	str	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	615a      	str	r2, [r3, #20]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_INJ_SetQueueMode>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60da      	str	r2, [r3, #12]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_SetChannelSamplingTime>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3314      	adds	r3, #20
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	0e5b      	lsrs	r3, r3, #25
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0d1b      	lsrs	r3, r3, #20
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2107      	movs	r1, #7
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	0d1b      	lsrs	r3, r3, #20
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	431a      	orrs	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	601a      	str	r2, [r3, #0]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_SetChannelSingleDiff>:
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0318 	and.w	r3, r3, #24
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003170:	40d9      	lsrs	r1, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	400b      	ands	r3, r1
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	431a      	orrs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	0007ffff 	.word	0x0007ffff

08003194 <LL_ADC_IsEnabled>:
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <LL_ADC_IsEnabled+0x18>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <LL_ADC_IsEnabled+0x1a>
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_ADC_REG_IsConversionOngoing>:
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d101      	bne.n	80031d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_INJ_IsConversionOngoing>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d101      	bne.n	80031f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b0b6      	sub	sp, #216	@ 0xd8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003228:	2b01      	cmp	r3, #1
 800322a:	d102      	bne.n	8003232 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800322c:	2302      	movs	r3, #2
 800322e:	f000 bc90 	b.w	8003b52 <HAL_ADCEx_InjectedConfigChannel+0x94a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003246:	2b01      	cmp	r3, #1
 8003248:	d130      	bne.n	80032ac <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b08      	cmp	r3, #8
 8003250:	d179      	bne.n	8003346 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d010      	beq.n	800327c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	f403 52f8 	and.w	r2, r3, #7936	@ 0x1f00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800326e:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800327a:	e007      	b.n	800328c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8003288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003292:	4b96      	ldr	r3, [pc, #600]	@ (80034ec <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800329e:	430b      	orrs	r3, r1
 80032a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032a8:	661a      	str	r2, [r3, #96]	@ 0x60
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80032aa:	e04c      	b.n	8003346 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11d      	bne.n	80032f0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80032d8:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e4:	e004      	b.n	80032f0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	f003 021f 	and.w	r2, r3, #31
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800331e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	661a      	str	r2, [r3, #96]	@ 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003336:	4b6d      	ldr	r3, [pc, #436]	@ (80034ec <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	430b      	orrs	r3, r1
 8003344:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff48 	bl	80031e0 <LL_ADC_INJ_IsConversionOngoing>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d120      	bne.n	8003398 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	7f5b      	ldrb	r3, [r3, #29]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d110      	bne.n	8003380 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	7f9b      	ldrb	r3, [r3, #30]
 800336c:	055a      	lsls	r2, r3, #21
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	7f1b      	ldrb	r3, [r3, #28]
 8003372:	051b      	lsls	r3, r3, #20
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	e00b      	b.n	8003398 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	7f9b      	ldrb	r3, [r3, #30]
 800338e:	055a      	lsls	r2, r3, #21
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff0c 	bl	80031ba <LL_ADC_REG_IsConversionOngoing>
 80033a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff18 	bl	80031e0 <LL_ADC_INJ_IsConversionOngoing>
 80033b0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8213 	bne.w	80037e4 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 820e 	bne.w	80037e4 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d115      	bne.n	8003404 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	7f5b      	ldrb	r3, [r3, #29]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d108      	bne.n	80033f2 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80033ee:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80033f0:	e01e      	b.n	8003430 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003400:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003402:	e015      	b.n	8003430 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	7f5b      	ldrb	r3, [r3, #29]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d109      	bne.n	8003420 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	659a      	str	r2, [r3, #88]	@ 0x58

        tmp_hal_status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800341e:	e007      	b.n	8003430 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800342e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003436:	2b01      	cmp	r3, #1
 8003438:	d110      	bne.n	800345c <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	430b      	orrs	r3, r1
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0202 	orr.w	r2, r2, #2
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	e007      	b.n	800346c <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0202 	bic.w	r2, r2, #2
 800346a:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003474:	d10f      	bne.n	8003496 <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	4619      	mov	r1, r3
 8003482:	f7ff fe38 	bl	80030f6 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fe09 	bl	80030a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003494:	e00e      	b.n	80034b4 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7ff fe27 	bl	80030f6 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fdf9 	bl	80030a6 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d00c      	beq.n	80034f0 <HAL_ADCEx_InjectedConfigChannel+0x2e8>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6919      	ldr	r1, [r3, #16]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034e6:	f7ff fd89 	bl	8002ffc <LL_ADC_SetOffset>
 80034ea:	e17b      	b.n	80037e4 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
 80034ec:	82082000 	.word	0x82082000
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fda4 	bl	8003044 <LL_ADC_GetOffsetChannel>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fd99 	bl	8003044 <LL_ADC_GetOffsetChannel>
 8003512:	4603      	mov	r3, r0
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	f003 021f 	and.w	r2, r3, #31
 800351a:	e01e      	b.n	800355a <HAL_ADCEx_InjectedConfigChannel+0x352>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fd8e 	bl	8003044 <LL_ADC_GetOffsetChannel>
 8003528:	4603      	mov	r3, r0
 800352a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800353a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800353e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003542:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_ADCEx_InjectedConfigChannel+0x346>
    return 32U;
 800354a:	2320      	movs	r3, #32
 800354c:	e004      	b.n	8003558 <HAL_ADCEx_InjectedConfigChannel+0x350>
  return __builtin_clz(value);
 800354e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_ADCEx_InjectedConfigChannel+0x36a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0e9b      	lsrs	r3, r3, #26
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	e018      	b.n	80035a4 <HAL_ADCEx_InjectedConfigChannel+0x39c>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800358a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800358e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADCEx_InjectedConfigChannel+0x392>
    return 32U;
 8003596:	2320      	movs	r3, #32
 8003598:	e004      	b.n	80035a4 <HAL_ADCEx_InjectedConfigChannel+0x39c>
  return __builtin_clz(value);
 800359a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d106      	bne.n	80035b6 <HAL_ADCEx_InjectedConfigChannel+0x3ae>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fd5d 	bl	8003070 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fd41 	bl	8003044 <LL_ADC_GetOffsetChannel>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fd36 	bl	8003044 <LL_ADC_GetOffsetChannel>
 80035d8:	4603      	mov	r3, r0
 80035da:	0e9b      	lsrs	r3, r3, #26
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	e01e      	b.n	8003620 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fd2b 	bl	8003044 <LL_ADC_GetOffsetChannel>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003604:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003608:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADCEx_InjectedConfigChannel+0x40c>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e004      	b.n	800361e <HAL_ADCEx_InjectedConfigChannel+0x416>
  return __builtin_clz(value);
 8003614:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_ADCEx_InjectedConfigChannel+0x430>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	e018      	b.n	800366a <HAL_ADCEx_InjectedConfigChannel+0x462>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800364c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADCEx_InjectedConfigChannel+0x458>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e004      	b.n	800366a <HAL_ADCEx_InjectedConfigChannel+0x462>
  return __builtin_clz(value);
 8003660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800366a:	429a      	cmp	r2, r3
 800366c:	d106      	bne.n	800367c <HAL_ADCEx_InjectedConfigChannel+0x474>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	2101      	movs	r1, #1
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fcfa 	bl	8003070 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fcde 	bl	8003044 <LL_ADC_GetOffsetChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fcd3 	bl	8003044 <LL_ADC_GetOffsetChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	f003 021f 	and.w	r2, r3, #31
 80036a6:	e01e      	b.n	80036e6 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fcc8 	bl	8003044 <LL_ADC_GetOffsetChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80036c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80036ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADCEx_InjectedConfigChannel+0x4d2>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e004      	b.n	80036e4 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
  return __builtin_clz(value);
 80036da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d105      	bne.n	80036fe <HAL_ADCEx_InjectedConfigChannel+0x4f6>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0e9b      	lsrs	r3, r3, #26
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	e014      	b.n	8003728 <HAL_ADCEx_InjectedConfigChannel+0x520>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800370c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800370e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003712:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADCEx_InjectedConfigChannel+0x516>
    return 32U;
 800371a:	2320      	movs	r3, #32
 800371c:	e004      	b.n	8003728 <HAL_ADCEx_InjectedConfigChannel+0x520>
  return __builtin_clz(value);
 800371e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003728:	429a      	cmp	r2, r3
 800372a:	d106      	bne.n	800373a <HAL_ADCEx_InjectedConfigChannel+0x532>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2200      	movs	r2, #0
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fc9b 	bl	8003070 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2103      	movs	r1, #3
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fc7f 	bl	8003044 <LL_ADC_GetOffsetChannel>
 8003746:	4603      	mov	r3, r0
 8003748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2103      	movs	r1, #3
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fc74 	bl	8003044 <LL_ADC_GetOffsetChannel>
 800375c:	4603      	mov	r3, r0
 800375e:	0e9b      	lsrs	r3, r3, #26
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	e017      	b.n	8003796 <HAL_ADCEx_InjectedConfigChannel+0x58e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2103      	movs	r1, #3
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fc69 	bl	8003044 <LL_ADC_GetOffsetChannel>
 8003772:	4603      	mov	r3, r0
 8003774:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800377e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003780:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003782:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_ADCEx_InjectedConfigChannel+0x584>
    return 32U;
 8003788:	2320      	movs	r3, #32
 800378a:	e003      	b.n	8003794 <HAL_ADCEx_InjectedConfigChannel+0x58c>
  return __builtin_clz(value);
 800378c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	0e9b      	lsrs	r3, r3, #26
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	e011      	b.n	80037d2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80037bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037be:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80037c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80037c6:	2320      	movs	r3, #32
 80037c8:	e003      	b.n	80037d2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80037ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d106      	bne.n	80037e4 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	2103      	movs	r1, #3
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fc46 	bl	8003070 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fcd3 	bl	8003194 <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f040 813f 	bne.w	8003a74 <HAL_ADCEx_InjectedConfigChannel+0x86c>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f7ff fca2 	bl	800314c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a8e      	ldr	r2, [pc, #568]	@ (8003a48 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f040 8130 	bne.w	8003a74 <HAL_ADCEx_InjectedConfigChannel+0x86c>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10b      	bne.n	800383c <HAL_ADCEx_InjectedConfigChannel+0x634>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	3301      	adds	r3, #1
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2b09      	cmp	r3, #9
 8003832:	bf94      	ite	ls
 8003834:	2301      	movls	r3, #1
 8003836:	2300      	movhi	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e019      	b.n	8003870 <HAL_ADCEx_InjectedConfigChannel+0x668>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800384a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800384e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_ADCEx_InjectedConfigChannel+0x650>
    return 32U;
 8003854:	2320      	movs	r3, #32
 8003856:	e003      	b.n	8003860 <HAL_ADCEx_InjectedConfigChannel+0x658>
  return __builtin_clz(value);
 8003858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	3301      	adds	r3, #1
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2b09      	cmp	r3, #9
 8003868:	bf94      	ite	ls
 800386a:	2301      	movls	r3, #1
 800386c:	2300      	movhi	r3, #0
 800386e:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003870:	2b00      	cmp	r3, #0
 8003872:	d079      	beq.n	8003968 <HAL_ADCEx_InjectedConfigChannel+0x760>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_ADCEx_InjectedConfigChannel+0x688>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	069b      	lsls	r3, r3, #26
 800388a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800388e:	e015      	b.n	80038bc <HAL_ADCEx_InjectedConfigChannel+0x6b4>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800389e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80038a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADCEx_InjectedConfigChannel+0x6a4>
    return 32U;
 80038a8:	2320      	movs	r3, #32
 80038aa:	e003      	b.n	80038b4 <HAL_ADCEx_InjectedConfigChannel+0x6ac>
  return __builtin_clz(value);
 80038ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	069b      	lsls	r3, r3, #26
 80038b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <HAL_ADCEx_InjectedConfigChannel+0x6d4>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0e9b      	lsrs	r3, r3, #26
 80038ce:	3301      	adds	r3, #1
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	e017      	b.n	800390c <HAL_ADCEx_InjectedConfigChannel+0x704>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80038ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80038ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
    return 32U;
 80038f4:	2320      	movs	r3, #32
 80038f6:	e003      	b.n	8003900 <HAL_ADCEx_InjectedConfigChannel+0x6f8>
  return __builtin_clz(value);
 80038f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	3301      	adds	r3, #1
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	ea42 0103 	orr.w	r1, r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_ADCEx_InjectedConfigChannel+0x72a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	3301      	adds	r3, #1
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	051b      	lsls	r3, r3, #20
 8003930:	e018      	b.n	8003964 <HAL_ADCEx_InjectedConfigChannel+0x75c>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_ADCEx_InjectedConfigChannel+0x746>
    return 32U;
 800394a:	2320      	movs	r3, #32
 800394c:	e003      	b.n	8003956 <HAL_ADCEx_InjectedConfigChannel+0x74e>
  return __builtin_clz(value);
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	b2db      	uxtb	r3, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003964:	430b      	orrs	r3, r1
 8003966:	e080      	b.n	8003a6a <HAL_ADCEx_InjectedConfigChannel+0x862>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_ADCEx_InjectedConfigChannel+0x77c>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	3301      	adds	r3, #1
 800397c:	069b      	lsls	r3, r3, #26
 800397e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003982:	e015      	b.n	80039b0 <HAL_ADCEx_InjectedConfigChannel+0x7a8>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADCEx_InjectedConfigChannel+0x798>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e003      	b.n	80039a8 <HAL_ADCEx_InjectedConfigChannel+0x7a0>
  return __builtin_clz(value);
 80039a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	069b      	lsls	r3, r3, #26
 80039ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_ADCEx_InjectedConfigChannel+0x7c8>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0e9b      	lsrs	r3, r3, #26
 80039c2:	3301      	adds	r3, #1
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2101      	movs	r1, #1
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	e017      	b.n	8003a00 <HAL_ADCEx_InjectedConfigChannel+0x7f8>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	61bb      	str	r3, [r7, #24]
  return result;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADCEx_InjectedConfigChannel+0x7e4>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e003      	b.n	80039f4 <HAL_ADCEx_InjectedConfigChannel+0x7ec>
  return __builtin_clz(value);
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	ea42 0103 	orr.w	r1, r2, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_ADCEx_InjectedConfigChannel+0x824>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	0e9b      	lsrs	r3, r3, #26
 8003a16:	3301      	adds	r3, #1
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	3b1e      	subs	r3, #30
 8003a24:	051b      	lsls	r3, r3, #20
 8003a26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	e01d      	b.n	8003a68 <HAL_ADCEx_InjectedConfigChannel+0x860>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	60fb      	str	r3, [r7, #12]
  return result;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <HAL_ADCEx_InjectedConfigChannel+0x844>
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e005      	b.n	8003a54 <HAL_ADCEx_InjectedConfigChannel+0x84c>
 8003a48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 021f 	and.w	r2, r3, #31
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b1e      	subs	r3, #30
 8003a62:	051b      	lsls	r3, r3, #20
 8003a64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a68:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7ff fb41 	bl	80030f6 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b38      	ldr	r3, [pc, #224]	@ (8003b5c <HAL_ADCEx_InjectedConfigChannel+0x954>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d062      	beq.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a80:	4837      	ldr	r0, [pc, #220]	@ (8003b60 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003a82:	f7ff faad 	bl	8002fe0 <LL_ADC_GetCommonPathInternalCh>
 8003a86:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <HAL_ADCEx_InjectedConfigChannel+0x95c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d127      	bne.n	8003ae4 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d121      	bne.n	8003ae4 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	@ (8003b68 <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d14d      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	482a      	ldr	r0, [pc, #168]	@ (8003b60 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003ab6:	f7ff fa80 	bl	8002fba <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003aba:	4b2c      	ldr	r3, [pc, #176]	@ (8003b6c <HAL_ADCEx_InjectedConfigChannel+0x964>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b70 <HAL_ADCEx_InjectedConfigChannel+0x968>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	099a      	lsrs	r2, r3, #6
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003ad2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003ad4:	e002      	b.n	8003adc <HAL_ADCEx_InjectedConfigChannel+0x8d4>
        {
          wait_loop_index--;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f9      	bne.n	8003ad6 <HAL_ADCEx_InjectedConfigChannel+0x8ce>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae2:	e030      	b.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	@ (8003b74 <HAL_ADCEx_InjectedConfigChannel+0x96c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d113      	bne.n	8003b16 <HAL_ADCEx_InjectedConfigChannel+0x90e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_ADCEx_InjectedConfigChannel+0x90e>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1a      	ldr	r2, [pc, #104]	@ (8003b68 <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d120      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4814      	ldr	r0, [pc, #80]	@ (8003b60 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003b10:	f7ff fa53 	bl	8002fba <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b14:	e017      	b.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <HAL_ADCEx_InjectedConfigChannel+0x970>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d112      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10c      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	@ (8003b68 <HAL_ADCEx_InjectedConfigChannel+0x960>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d107      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x93e>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4807      	ldr	r0, [pc, #28]	@ (8003b60 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003b42:	f7ff fa3a 	bl	8002fba <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003b4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	37d8      	adds	r7, #216	@ 0xd8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	80080000 	.word	0x80080000
 8003b60:	50040300 	.word	0x50040300
 8003b64:	c7520000 	.word	0xc7520000
 8003b68:	50040000 	.word	0x50040000
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	053e2d63 	.word	0x053e2d63
 8003b74:	cb840000 	.word	0xcb840000
 8003b78:	80000001 	.word	0x80000001

08003b7c <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fb16 	bl	80031ba <LL_ADC_REG_IsConversionOngoing>
 8003b8e:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fb23 	bl	80031e0 <LL_ADC_INJ_IsConversionOngoing>
 8003b9a:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fa8b 	bl	80030cc <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
 8003bba:	e001      	b.n	8003bc0 <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <__NVIC_SetPriorityGrouping>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <__NVIC_SetPriorityGrouping+0x44>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003be8:	4013      	ands	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bfe:	4a04      	ldr	r2, [pc, #16]	@ (8003c10 <__NVIC_SetPriorityGrouping+0x44>)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	60d3      	str	r3, [r2, #12]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <__NVIC_GetPriorityGrouping>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c18:	4b04      	ldr	r3, [pc, #16]	@ (8003c2c <__NVIC_GetPriorityGrouping+0x18>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 0307 	and.w	r3, r3, #7
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_EnableIRQ>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	db0b      	blt.n	8003c5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	4907      	ldr	r1, [pc, #28]	@ (8003c68 <__NVIC_EnableIRQ+0x38>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2001      	movs	r0, #1
 8003c52:	fa00 f202 	lsl.w	r2, r0, r2
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000e100 	.word	0xe000e100

08003c6c <__NVIC_SetPriority>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db0a      	blt.n	8003c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	490c      	ldr	r1, [pc, #48]	@ (8003cb8 <__NVIC_SetPriority+0x4c>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	440b      	add	r3, r1
 8003c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c94:	e00a      	b.n	8003cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4908      	ldr	r1, [pc, #32]	@ (8003cbc <__NVIC_SetPriority+0x50>)
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	3b04      	subs	r3, #4
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	440b      	add	r3, r1
 8003caa:	761a      	strb	r2, [r3, #24]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	e000e100 	.word	0xe000e100
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <NVIC_EncodePriority>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f1c3 0307 	rsb	r3, r3, #7
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	bf28      	it	cs
 8003cde:	2304      	movcs	r3, #4
 8003ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d902      	bls.n	8003cf0 <NVIC_EncodePriority+0x30>
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3b03      	subs	r3, #3
 8003cee:	e000      	b.n	8003cf2 <NVIC_EncodePriority+0x32>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	401a      	ands	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	43d9      	mvns	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	4313      	orrs	r3, r2
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3724      	adds	r7, #36	@ 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <SysTick_Config>:
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d38:	d301      	bcc.n	8003d3e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e00f      	b.n	8003d5e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d68 <SysTick_Config+0x40>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d46:	210f      	movs	r1, #15
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d4c:	f7ff ff8e 	bl	8003c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <SysTick_Config+0x40>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d56:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <SysTick_Config+0x40>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	e000e010 	.word	0xe000e010

08003d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff29 	bl	8003bcc <__NVIC_SetPriorityGrouping>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	4603      	mov	r3, r0
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d94:	f7ff ff3e 	bl	8003c14 <__NVIC_GetPriorityGrouping>
 8003d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f7ff ff8e 	bl	8003cc0 <NVIC_EncodePriority>
 8003da4:	4602      	mov	r2, r0
 8003da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff5d 	bl	8003c6c <__NVIC_SetPriority>
}
 8003db2:	bf00      	nop
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff31 	bl	8003c30 <__NVIC_EnableIRQ>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ffa2 	bl	8003d28 <SysTick_Config>
 8003de4:	4603      	mov	r3, r0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfe:	e166      	b.n	80040ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8158 	beq.w	80040c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_GPIO_Init+0x40>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d130      	bne.n	8003e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e66:	2201      	movs	r2, #1
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 0201 	and.w	r2, r3, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d017      	beq.n	8003ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d123      	bne.n	8003f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	6939      	ldr	r1, [r7, #16]
 8003f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0203 	and.w	r2, r3, #3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80b2 	beq.w	80040c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f64:	4b61      	ldr	r3, [pc, #388]	@ (80040ec <HAL_GPIO_Init+0x2fc>)
 8003f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f68:	4a60      	ldr	r2, [pc, #384]	@ (80040ec <HAL_GPIO_Init+0x2fc>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f70:	4b5e      	ldr	r3, [pc, #376]	@ (80040ec <HAL_GPIO_Init+0x2fc>)
 8003f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f7c:	4a5c      	ldr	r2, [pc, #368]	@ (80040f0 <HAL_GPIO_Init+0x300>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3302      	adds	r3, #2
 8003f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fa6:	d02b      	beq.n	8004000 <HAL_GPIO_Init+0x210>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a52      	ldr	r2, [pc, #328]	@ (80040f4 <HAL_GPIO_Init+0x304>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d025      	beq.n	8003ffc <HAL_GPIO_Init+0x20c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a51      	ldr	r2, [pc, #324]	@ (80040f8 <HAL_GPIO_Init+0x308>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d01f      	beq.n	8003ff8 <HAL_GPIO_Init+0x208>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a50      	ldr	r2, [pc, #320]	@ (80040fc <HAL_GPIO_Init+0x30c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d019      	beq.n	8003ff4 <HAL_GPIO_Init+0x204>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8004100 <HAL_GPIO_Init+0x310>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_GPIO_Init+0x200>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a4e      	ldr	r2, [pc, #312]	@ (8004104 <HAL_GPIO_Init+0x314>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00d      	beq.n	8003fec <HAL_GPIO_Init+0x1fc>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a4d      	ldr	r2, [pc, #308]	@ (8004108 <HAL_GPIO_Init+0x318>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <HAL_GPIO_Init+0x1f8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a4c      	ldr	r2, [pc, #304]	@ (800410c <HAL_GPIO_Init+0x31c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_GPIO_Init+0x1f4>
 8003fe0:	2307      	movs	r3, #7
 8003fe2:	e00e      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	e00c      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8003fe8:	2306      	movs	r3, #6
 8003fea:	e00a      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8003fec:	2305      	movs	r3, #5
 8003fee:	e008      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	e006      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e004      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e002      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_GPIO_Init+0x212>
 8004000:	2300      	movs	r3, #0
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	f002 0203 	and.w	r2, r2, #3
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	4093      	lsls	r3, r2
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004012:	4937      	ldr	r1, [pc, #220]	@ (80040f0 <HAL_GPIO_Init+0x300>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004020:	4b3b      	ldr	r3, [pc, #236]	@ (8004110 <HAL_GPIO_Init+0x320>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004044:	4a32      	ldr	r2, [pc, #200]	@ (8004110 <HAL_GPIO_Init+0x320>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800404a:	4b31      	ldr	r3, [pc, #196]	@ (8004110 <HAL_GPIO_Init+0x320>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43db      	mvns	r3, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800406e:	4a28      	ldr	r2, [pc, #160]	@ (8004110 <HAL_GPIO_Init+0x320>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004074:	4b26      	ldr	r3, [pc, #152]	@ (8004110 <HAL_GPIO_Init+0x320>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43db      	mvns	r3, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004098:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <HAL_GPIO_Init+0x320>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800409e:	4b1c      	ldr	r3, [pc, #112]	@ (8004110 <HAL_GPIO_Init+0x320>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040c2:	4a13      	ldr	r2, [pc, #76]	@ (8004110 <HAL_GPIO_Init+0x320>)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f ae91 	bne.w	8003e00 <HAL_GPIO_Init+0x10>
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40010000 	.word	0x40010000
 80040f4:	48000400 	.word	0x48000400
 80040f8:	48000800 	.word	0x48000800
 80040fc:	48000c00 	.word	0x48000c00
 8004100:	48001000 	.word	0x48001000
 8004104:	48001400 	.word	0x48001400
 8004108:	48001800 	.word	0x48001800
 800410c:	48001c00 	.word	0x48001c00
 8004110:	40010400 	.word	0x40010400

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004130:	e002      	b.n	8004138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4013      	ands	r3, r2
 800415c:	041a      	lsls	r2, r3, #16
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43d9      	mvns	r1, r3
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	400b      	ands	r3, r1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	619a      	str	r2, [r3, #24]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004182:	4b08      	ldr	r3, [pc, #32]	@ (80041a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800418e:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd f9ee 	bl	8001578 <HAL_GPIO_EXTI_Callback>
  }
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40010400 	.word	0x40010400

080041a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ac:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b8:	d102      	bne.n	80041c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041be:	e00b      	b.n	80041d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041c0:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ce:	d102      	bne.n	80041d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041d4:	e000      	b.n	80041d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40007000 	.word	0x40007000

080041e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d141      	bne.n	800427a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004202:	d131      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004204:	4b47      	ldr	r3, [pc, #284]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800420a:	4a46      	ldr	r2, [pc, #280]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004210:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004214:	4b43      	ldr	r3, [pc, #268]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800421c:	4a41      	ldr	r2, [pc, #260]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004224:	4b40      	ldr	r3, [pc, #256]	@ (8004328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2232      	movs	r2, #50	@ 0x32
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	4a3f      	ldr	r2, [pc, #252]	@ (800432c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	0c9b      	lsrs	r3, r3, #18
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800423a:	e002      	b.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3b01      	subs	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004242:	4b38      	ldr	r3, [pc, #224]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424e:	d102      	bne.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f2      	bne.n	800423c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004256:	4b33      	ldr	r3, [pc, #204]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004262:	d158      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e057      	b.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004268:	4b2e      	ldr	r3, [pc, #184]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800426e:	4a2d      	ldr	r2, [pc, #180]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004278:	e04d      	b.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004280:	d141      	bne.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004282:	4b28      	ldr	r3, [pc, #160]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428e:	d131      	bne.n	80042f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004290:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004296:	4a23      	ldr	r2, [pc, #140]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800429c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a0:	4b20      	ldr	r3, [pc, #128]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2232      	movs	r2, #50	@ 0x32
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	4a1c      	ldr	r2, [pc, #112]	@ (800432c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	0c9b      	lsrs	r3, r3, #18
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c6:	e002      	b.n	80042ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ce:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042da:	d102      	bne.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f2      	bne.n	80042c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ee:	d112      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e011      	b.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004304:	e007      	b.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004306:	4b07      	ldr	r3, [pc, #28]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800430e:	4a05      	ldr	r2, [pc, #20]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004314:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40007000 	.word	0x40007000
 8004328:	20000000 	.word	0x20000000
 800432c:	431bde83 	.word	0x431bde83

08004330 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f000 bc08 	b.w	8004b54 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004344:	4b96      	ldr	r3, [pc, #600]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
 800434c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434e:	4b94      	ldr	r3, [pc, #592]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80e4 	beq.w	800452e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <HAL_RCC_OscConfig+0x4c>
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	f040 808b 	bne.w	800448a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b01      	cmp	r3, #1
 8004378:	f040 8087 	bne.w	800448a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800437c:	4b88      	ldr	r3, [pc, #544]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_OscConfig+0x64>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e3df      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	4b81      	ldr	r3, [pc, #516]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_RCC_OscConfig+0x7e>
 80043a4:	4b7e      	ldr	r3, [pc, #504]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ac:	e005      	b.n	80043ba <HAL_RCC_OscConfig+0x8a>
 80043ae:	4b7c      	ldr	r3, [pc, #496]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d223      	bcs.n	8004406 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fdcc 	bl	8004f60 <RCC_SetFlashLatencyFromMSIRange>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e3c0      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d2:	4b73      	ldr	r3, [pc, #460]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a72      	ldr	r2, [pc, #456]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80043d8:	f043 0308 	orr.w	r3, r3, #8
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b70      	ldr	r3, [pc, #448]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	496d      	ldr	r1, [pc, #436]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f0:	4b6b      	ldr	r3, [pc, #428]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	4968      	ldr	r1, [pc, #416]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
 8004404:	e025      	b.n	8004452 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004406:	4b66      	ldr	r3, [pc, #408]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a65      	ldr	r2, [pc, #404]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 800440c:	f043 0308 	orr.w	r3, r3, #8
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b63      	ldr	r3, [pc, #396]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4960      	ldr	r1, [pc, #384]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004424:	4b5e      	ldr	r3, [pc, #376]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	495b      	ldr	r1, [pc, #364]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fd8c 	bl	8004f60 <RCC_SetFlashLatencyFromMSIRange>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e380      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004452:	f000 fcc1 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004456:	4602      	mov	r2, r0
 8004458:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	4950      	ldr	r1, [pc, #320]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004464:	5ccb      	ldrb	r3, [r1, r3]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	4a4e      	ldr	r2, [pc, #312]	@ (80045a8 <HAL_RCC_OscConfig+0x278>)
 8004470:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004472:	4b4e      	ldr	r3, [pc, #312]	@ (80045ac <HAL_RCC_OscConfig+0x27c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fae2 	bl	8001a40 <HAL_InitTick>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d052      	beq.n	800452c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	e364      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d032      	beq.n	80044f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004492:	4b43      	ldr	r3, [pc, #268]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a42      	ldr	r2, [pc, #264]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800449e:	f7fd fb1f 	bl	8001ae0 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a6:	f7fd fb1b 	bl	8001ae0 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e34d      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b8:	4b39      	ldr	r3, [pc, #228]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044c4:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a35      	ldr	r2, [pc, #212]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044ca:	f043 0308 	orr.w	r3, r3, #8
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b33      	ldr	r3, [pc, #204]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4930      	ldr	r1, [pc, #192]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e2:	4b2f      	ldr	r3, [pc, #188]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	492b      	ldr	r1, [pc, #172]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
 80044f6:	e01a      	b.n	800452e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044f8:	4b29      	ldr	r3, [pc, #164]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004504:	f7fd faec 	bl	8001ae0 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800450c:	f7fd fae8 	bl	8001ae0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e31a      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800451e:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x1dc>
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800452c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d073      	beq.n	8004622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d005      	beq.n	800454c <HAL_RCC_OscConfig+0x21c>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d10e      	bne.n	8004564 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d10b      	bne.n	8004564 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	4b14      	ldr	r3, [pc, #80]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d063      	beq.n	8004620 <HAL_RCC_OscConfig+0x2f0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d15f      	bne.n	8004620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e2f7      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800456c:	d106      	bne.n	800457c <HAL_RCC_OscConfig+0x24c>
 800456e:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a0b      	ldr	r2, [pc, #44]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e025      	b.n	80045c8 <HAL_RCC_OscConfig+0x298>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004584:	d114      	bne.n	80045b0 <HAL_RCC_OscConfig+0x280>
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 800458c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a02      	ldr	r2, [pc, #8]	@ (80045a0 <HAL_RCC_OscConfig+0x270>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e013      	b.n	80045c8 <HAL_RCC_OscConfig+0x298>
 80045a0:	40021000 	.word	0x40021000
 80045a4:	0800b044 	.word	0x0800b044
 80045a8:	20000000 	.word	0x20000000
 80045ac:	20000004 	.word	0x20000004
 80045b0:	4ba0      	ldr	r3, [pc, #640]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a9f      	ldr	r2, [pc, #636]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b9d      	ldr	r3, [pc, #628]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd fa86 	bl	8001ae0 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd fa82 	bl	8001ae0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e2b4      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ea:	4b92      	ldr	r3, [pc, #584]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2a8>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fa72 	bl	8001ae0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004600:	f7fd fa6e 	bl	8001ae0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e2a0      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004612:	4b88      	ldr	r3, [pc, #544]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x2d0>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d060      	beq.n	80046f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d005      	beq.n	8004640 <HAL_RCC_OscConfig+0x310>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d119      	bne.n	800466e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d116      	bne.n	800466e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004640:	4b7c      	ldr	r3, [pc, #496]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_OscConfig+0x328>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e27d      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004658:	4b76      	ldr	r3, [pc, #472]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	4973      	ldr	r1, [pc, #460]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800466c:	e040      	b.n	80046f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d023      	beq.n	80046be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004676:	4b6f      	ldr	r3, [pc, #444]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6e      	ldr	r2, [pc, #440]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fd fa2d 	bl	8001ae0 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468a:	f7fd fa29 	bl	8001ae0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e25b      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800469c:	4b65      	ldr	r3, [pc, #404]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b62      	ldr	r3, [pc, #392]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	495f      	ldr	r1, [pc, #380]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
 80046bc:	e018      	b.n	80046f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046be:	4b5d      	ldr	r3, [pc, #372]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80046c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fa09 	bl	8001ae0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd fa05 	bl	8001ae0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e237      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e4:	4b53      	ldr	r3, [pc, #332]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d03c      	beq.n	8004776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01c      	beq.n	800473e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004704:	4b4b      	ldr	r3, [pc, #300]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470a:	4a4a      	ldr	r2, [pc, #296]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd f9e4 	bl	8001ae0 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471c:	f7fd f9e0 	bl	8001ae0 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e212      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800472e:	4b41      	ldr	r3, [pc, #260]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ef      	beq.n	800471c <HAL_RCC_OscConfig+0x3ec>
 800473c:	e01b      	b.n	8004776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473e:	4b3d      	ldr	r3, [pc, #244]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004744:	4a3b      	ldr	r2, [pc, #236]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fd f9c7 	bl	8001ae0 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004756:	f7fd f9c3 	bl	8001ae0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e1f5      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004768:	4b32      	ldr	r3, [pc, #200]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ef      	bne.n	8004756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80a6 	beq.w	80048d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004788:	4b2a      	ldr	r3, [pc, #168]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10d      	bne.n	80047b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004794:	4b27      	ldr	r3, [pc, #156]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004798:	4a26      	ldr	r2, [pc, #152]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 800479a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479e:	6593      	str	r3, [r2, #88]	@ 0x58
 80047a0:	4b24      	ldr	r3, [pc, #144]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80047a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ac:	2301      	movs	r3, #1
 80047ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b0:	4b21      	ldr	r3, [pc, #132]	@ (8004838 <HAL_RCC_OscConfig+0x508>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d118      	bne.n	80047ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <HAL_RCC_OscConfig+0x508>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004838 <HAL_RCC_OscConfig+0x508>)
 80047c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c8:	f7fd f98a 	bl	8001ae0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d0:	f7fd f986 	bl	8001ae0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e1b8      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e2:	4b15      	ldr	r3, [pc, #84]	@ (8004838 <HAL_RCC_OscConfig+0x508>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d108      	bne.n	8004808 <HAL_RCC_OscConfig+0x4d8>
 80047f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004806:	e029      	b.n	800485c <HAL_RCC_OscConfig+0x52c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b05      	cmp	r3, #5
 800480e:	d115      	bne.n	800483c <HAL_RCC_OscConfig+0x50c>
 8004810:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	4a07      	ldr	r2, [pc, #28]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004820:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004826:	4a03      	ldr	r2, [pc, #12]	@ (8004834 <HAL_RCC_OscConfig+0x504>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004830:	e014      	b.n	800485c <HAL_RCC_OscConfig+0x52c>
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	40007000 	.word	0x40007000
 800483c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	4a9c      	ldr	r2, [pc, #624]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800484c:	4b99      	ldr	r3, [pc, #612]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	4a98      	ldr	r2, [pc, #608]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d016      	beq.n	8004892 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd f93c 	bl	8001ae0 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd f938 	bl	8001ae0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e168      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004882:	4b8c      	ldr	r3, [pc, #560]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ed      	beq.n	800486c <HAL_RCC_OscConfig+0x53c>
 8004890:	e015      	b.n	80048be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fd f925 	bl	8001ae0 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd f921 	bl	8001ae0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e151      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b0:	4b80      	ldr	r3, [pc, #512]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ed      	bne.n	800489a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048be:	7ffb      	ldrb	r3, [r7, #31]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03c      	beq.n	8004956 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01c      	beq.n	800491e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048e4:	4b73      	ldr	r3, [pc, #460]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80048e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ea:	4a72      	ldr	r2, [pc, #456]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd f8f4 	bl	8001ae0 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048fc:	f7fd f8f0 	bl	8001ae0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e122      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800490e:	4b69      	ldr	r3, [pc, #420]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ef      	beq.n	80048fc <HAL_RCC_OscConfig+0x5cc>
 800491c:	e01b      	b.n	8004956 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800491e:	4b65      	ldr	r3, [pc, #404]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004924:	4a63      	ldr	r2, [pc, #396]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fd f8d7 	bl	8001ae0 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004936:	f7fd f8d3 	bl	8001ae0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e105      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004948:	4b5a      	ldr	r3, [pc, #360]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 800494a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ef      	bne.n	8004936 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80f9 	beq.w	8004b52 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	2b02      	cmp	r3, #2
 8004966:	f040 80cf 	bne.w	8004b08 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800496a:	4b52      	ldr	r3, [pc, #328]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 0203 	and.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	429a      	cmp	r2, r3
 800497c:	d12c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	3b01      	subs	r3, #1
 800498a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d123      	bne.n	80049d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d11b      	bne.n	80049d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d113      	bne.n	80049d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d109      	bne.n	80049d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	3b01      	subs	r3, #1
 80049d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d071      	beq.n	8004abc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d068      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049de:	4b35      	ldr	r3, [pc, #212]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049ea:	4b32      	ldr	r3, [pc, #200]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e0ac      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049fa:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a06:	f7fd f86b 	bl	8001ae0 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fd f867 	bl	8001ae0 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e099      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a20:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a2c:	4b21      	ldr	r3, [pc, #132]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	4b21      	ldr	r3, [pc, #132]	@ (8004ab8 <HAL_RCC_OscConfig+0x788>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a46:	0212      	lsls	r2, r2, #8
 8004a48:	4311      	orrs	r1, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a4e:	0852      	lsrs	r2, r2, #1
 8004a50:	3a01      	subs	r2, #1
 8004a52:	0552      	lsls	r2, r2, #21
 8004a54:	4311      	orrs	r1, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a5a:	0852      	lsrs	r2, r2, #1
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	0652      	lsls	r2, r2, #25
 8004a60:	4311      	orrs	r1, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a66:	06d2      	lsls	r2, r2, #27
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	4912      	ldr	r1, [pc, #72]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a70:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a88:	f7fd f82a 	bl	8001ae0 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fd f826 	bl	8001ae0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e058      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa2:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <HAL_RCC_OscConfig+0x784>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aae:	e050      	b.n	8004b52 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e04f      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abc:	4b27      	ldr	r3, [pc, #156]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d144      	bne.n	8004b52 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ac8:	4b24      	ldr	r3, [pc, #144]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a23      	ldr	r2, [pc, #140]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ad4:	4b21      	ldr	r3, [pc, #132]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ae0:	f7fc fffe 	bl	8001ae0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fc fffa 	bl	8001ae0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e02c      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afa:	4b18      	ldr	r3, [pc, #96]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x7b8>
 8004b06:	e024      	b.n	8004b52 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d01f      	beq.n	8004b4e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0e:	4b13      	ldr	r3, [pc, #76]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a12      	ldr	r2, [pc, #72]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004b14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7fc ffe1 	bl	8001ae0 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b22:	f7fc ffdd 	bl	8001ae0 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e00f      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b34:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b40:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	4905      	ldr	r1, [pc, #20]	@ (8004b5c <HAL_RCC_OscConfig+0x82c>)
 8004b46:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <HAL_RCC_OscConfig+0x830>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60cb      	str	r3, [r1, #12]
 8004b4c:	e001      	b.n	8004b52 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	feeefffc 	.word	0xfeeefffc

08004b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e11d      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b90      	ldr	r3, [pc, #576]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d910      	bls.n	8004bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 020f 	bic.w	r2, r3, #15
 8004b92:	498b      	ldr	r1, [pc, #556]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b89      	ldr	r3, [pc, #548]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e105      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	4b81      	ldr	r3, [pc, #516]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d908      	bls.n	8004bda <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	497b      	ldr	r1, [pc, #492]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d079      	beq.n	8004cda <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d11e      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bee:	4b75      	ldr	r3, [pc, #468]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0dc      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004bfe:	f000 fa09 	bl	8005014 <RCC_GetSysClockFreqFromPLLSource>
 8004c02:	4603      	mov	r3, r0
 8004c04:	4a70      	ldr	r2, [pc, #448]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d946      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d140      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c16:	4b6b      	ldr	r3, [pc, #428]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c1e:	4a69      	ldr	r2, [pc, #420]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c26:	2380      	movs	r3, #128	@ 0x80
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e035      	b.n	8004c98 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c34:	4b63      	ldr	r3, [pc, #396]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d115      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0b9      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0ad      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5c:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0a5      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004c6c:	f000 f8b4 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4a55      	ldr	r2, [pc, #340]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d90f      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c78:	4b52      	ldr	r3, [pc, #328]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c84:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c8c:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c92:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c94:	2380      	movs	r3, #128	@ 0x80
 8004c96:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c98:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f023 0203 	bic.w	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4947      	ldr	r1, [pc, #284]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004caa:	f7fc ff19 	bl	8001ae0 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb2:	f7fc ff15 	bl	8001ae0 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e077      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 020c 	and.w	r2, r3, #12
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d1eb      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b80      	cmp	r3, #128	@ 0x80
 8004cde:	d105      	bne.n	8004cec <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ce0:	4b38      	ldr	r3, [pc, #224]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a37      	ldr	r2, [pc, #220]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cea:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d208      	bcs.n	8004d1a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	492b      	ldr	r1, [pc, #172]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d210      	bcs.n	8004d4a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 020f 	bic.w	r2, r3, #15
 8004d30:	4923      	ldr	r1, [pc, #140]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d38:	4b21      	ldr	r3, [pc, #132]	@ (8004dc0 <HAL_RCC_ClockConfig+0x25c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e036      	b.n	8004db8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d56:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4918      	ldr	r1, [pc, #96]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d74:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4910      	ldr	r1, [pc, #64]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d88:	f000 f826 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	490c      	ldr	r1, [pc, #48]	@ (8004dcc <HAL_RCC_ClockConfig+0x268>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
 8004da4:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd0 <HAL_RCC_ClockConfig+0x26c>)
 8004da6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fc fe47 	bl	8001a40 <HAL_InitTick>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]

  return status;
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	04c4b400 	.word	0x04c4b400
 8004dcc:	0800b044 	.word	0x0800b044
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	@ 0x24
 8004ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d121      	bne.n	8004e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d11e      	bne.n	8004e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e18:	4b31      	ldr	r3, [pc, #196]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	e005      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e28:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e34:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e48:	e00a      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d102      	bne.n	8004e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e50:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e004      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e5c:	4b23      	ldr	r3, [pc, #140]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x114>)
 8004e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d134      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e66:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d003      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0xac>
 8004e7c:	e005      	b.n	8004e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e80:	617b      	str	r3, [r7, #20]
      break;
 8004e82:	e005      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e84:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x114>)
 8004e86:	617b      	str	r3, [r7, #20]
      break;
 8004e88:	e002      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	617b      	str	r3, [r7, #20]
      break;
 8004e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e90:	4b13      	ldr	r3, [pc, #76]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	fb03 f202 	mul.w	r2, r3, r2
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	0e5b      	lsrs	r3, r3, #25
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3724      	adds	r7, #36	@ 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	0800b05c 	.word	0x0800b05c
 8004ee8:	00f42400 	.word	0x00f42400
 8004eec:	007a1200 	.word	0x007a1200

08004ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef4:	4b03      	ldr	r3, [pc, #12]	@ (8004f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000000 	.word	0x20000000

08004f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f0c:	f7ff fff0 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4904      	ldr	r1, [pc, #16]	@ (8004f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	0800b054 	.word	0x0800b054

08004f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f38:	f7ff ffda 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	0adb      	lsrs	r3, r3, #11
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	4904      	ldr	r1, [pc, #16]	@ (8004f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f4a:	5ccb      	ldrb	r3, [r1, r3]
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	0800b054 	.word	0x0800b054

08004f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f6c:	4b27      	ldr	r3, [pc, #156]	@ (800500c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f78:	f7ff f916 	bl	80041a8 <HAL_PWREx_GetVoltageRange>
 8004f7c:	6178      	str	r0, [r7, #20]
 8004f7e:	e014      	b.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f80:	4b22      	ldr	r3, [pc, #136]	@ (800500c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f84:	4a21      	ldr	r2, [pc, #132]	@ (800500c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800500c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f98:	f7ff f906 	bl	80041a8 <HAL_PWREx_GetVoltageRange>
 8004f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800500c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800500c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb0:	d10b      	bne.n	8004fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b80      	cmp	r3, #128	@ 0x80
 8004fb6:	d913      	bls.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2ba0      	cmp	r3, #160	@ 0xa0
 8004fbc:	d902      	bls.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e00d      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	e00a      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fce:	d902      	bls.n	8004fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e004      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b70      	cmp	r3, #112	@ 0x70
 8004fda:	d101      	bne.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fdc:	2301      	movs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 020f 	bic.w	r2, r3, #15
 8004fe8:	4909      	ldr	r1, [pc, #36]	@ (8005010 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ff0:	4b07      	ldr	r3, [pc, #28]	@ (8005010 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d001      	beq.n	8005002 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000
 8005010:	40022000 	.word	0x40022000

08005014 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800501a:	4b2d      	ldr	r3, [pc, #180]	@ (80050d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d00b      	beq.n	8005042 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d825      	bhi.n	800507c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d008      	beq.n	8005048 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d11f      	bne.n	800507c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800503c:	4b25      	ldr	r3, [pc, #148]	@ (80050d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800503e:	613b      	str	r3, [r7, #16]
    break;
 8005040:	e01f      	b.n	8005082 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005042:	4b25      	ldr	r3, [pc, #148]	@ (80050d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005044:	613b      	str	r3, [r7, #16]
    break;
 8005046:	e01c      	b.n	8005082 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005048:	4b21      	ldr	r3, [pc, #132]	@ (80050d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005054:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e005      	b.n	8005070 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005064:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005070:	4a1a      	ldr	r2, [pc, #104]	@ (80050dc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005078:	613b      	str	r3, [r7, #16]
    break;
 800507a:	e002      	b.n	8005082 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
    break;
 8005080:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005082:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	3301      	adds	r3, #1
 800508e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005090:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	fb03 f202 	mul.w	r2, r3, r2
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050a8:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	0e5b      	lsrs	r3, r3, #25
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3301      	adds	r3, #1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050c2:	683b      	ldr	r3, [r7, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40021000 	.word	0x40021000
 80050d4:	00f42400 	.word	0x00f42400
 80050d8:	007a1200 	.word	0x007a1200
 80050dc:	0800b05c 	.word	0x0800b05c

080050e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050e8:	2300      	movs	r3, #0
 80050ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050ec:	2300      	movs	r3, #0
 80050ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d040      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005100:	2b80      	cmp	r3, #128	@ 0x80
 8005102:	d02a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005104:	2b80      	cmp	r3, #128	@ 0x80
 8005106:	d825      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005108:	2b60      	cmp	r3, #96	@ 0x60
 800510a:	d026      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800510c:	2b60      	cmp	r3, #96	@ 0x60
 800510e:	d821      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005110:	2b40      	cmp	r3, #64	@ 0x40
 8005112:	d006      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d81d      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d009      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800511c:	2b20      	cmp	r3, #32
 800511e:	d010      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005120:	e018      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005122:	4b89      	ldr	r3, [pc, #548]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	4a88      	ldr	r2, [pc, #544]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800512c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800512e:	e015      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fb02 	bl	8005740 <RCCEx_PLLSAI1_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005140:	e00c      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3320      	adds	r3, #32
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fbed 	bl	8005928 <RCCEx_PLLSAI2_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005152:	e003      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	74fb      	strb	r3, [r7, #19]
      break;
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800515a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005162:	4b79      	ldr	r3, [pc, #484]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005164:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005168:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005170:	4975      	ldr	r1, [pc, #468]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005178:	e001      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d047      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005192:	d030      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005198:	d82a      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800519a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800519e:	d02a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051a4:	d824      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051aa:	d008      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b0:	d81e      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ba:	d010      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051bc:	e018      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051be:	4b62      	ldr	r3, [pc, #392]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4a61      	ldr	r2, [pc, #388]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ca:	e015      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3304      	adds	r3, #4
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fab4 	bl	8005740 <RCCEx_PLLSAI1_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051dc:	e00c      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3320      	adds	r3, #32
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fb9f 	bl	8005928 <RCCEx_PLLSAI2_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ee:	e003      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	74fb      	strb	r3, [r7, #19]
      break;
 80051f4:	e000      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80051f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f8:	7cfb      	ldrb	r3, [r7, #19]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051fe:	4b52      	ldr	r3, [pc, #328]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005200:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520c:	494e      	ldr	r1, [pc, #312]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005214:	e001      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005216:	7cfb      	ldrb	r3, [r7, #19]
 8005218:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 809f 	beq.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005228:	2300      	movs	r3, #0
 800522a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800522c:	4b46      	ldr	r3, [pc, #280]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800522e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005242:	4b41      	ldr	r3, [pc, #260]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005246:	4a40      	ldr	r2, [pc, #256]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524c:	6593      	str	r3, [r2, #88]	@ 0x58
 800524e:	4b3e      	ldr	r3, [pc, #248]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525a:	2301      	movs	r3, #1
 800525c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800525e:	4b3b      	ldr	r3, [pc, #236]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a3a      	ldr	r2, [pc, #232]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526a:	f7fc fc39 	bl	8001ae0 <HAL_GetTick>
 800526e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005270:	e009      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005272:	f7fc fc35 	bl	8001ae0 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d902      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	74fb      	strb	r3, [r7, #19]
        break;
 8005284:	e005      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005286:	4b31      	ldr	r3, [pc, #196]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0ef      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d15b      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005298:	4b2b      	ldr	r3, [pc, #172]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01f      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d019      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052b6:	4b24      	ldr	r3, [pc, #144]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c2:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e2:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d016      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fc fbf4 	bl	8001ae0 <HAL_GetTick>
 80052f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fa:	e00b      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fc fbf0 	bl	8001ae0 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d902      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	74fb      	strb	r3, [r7, #19]
            break;
 8005312:	e006      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005314:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ec      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10c      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005328:	4b07      	ldr	r3, [pc, #28]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005338:	4903      	ldr	r1, [pc, #12]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005340:	e008      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	74bb      	strb	r3, [r7, #18]
 8005346:	e005      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005348:	40021000 	.word	0x40021000
 800534c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005354:	7c7b      	ldrb	r3, [r7, #17]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535a:	4ba0      	ldr	r3, [pc, #640]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	4a9f      	ldr	r2, [pc, #636]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005364:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005372:	4b9a      	ldr	r3, [pc, #616]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	f023 0203 	bic.w	r2, r3, #3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005380:	4996      	ldr	r1, [pc, #600]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005394:	4b91      	ldr	r3, [pc, #580]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539a:	f023 020c 	bic.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	498e      	ldr	r1, [pc, #568]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b6:	4b89      	ldr	r3, [pc, #548]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c4:	4985      	ldr	r1, [pc, #532]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053d8:	4b80      	ldr	r3, [pc, #512]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e6:	497d      	ldr	r1, [pc, #500]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fa:	4b78      	ldr	r3, [pc, #480]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005408:	4974      	ldr	r1, [pc, #464]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800541c:	4b6f      	ldr	r3, [pc, #444]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542a:	496c      	ldr	r1, [pc, #432]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800543e:	4b67      	ldr	r3, [pc, #412]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005444:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800544c:	4963      	ldr	r1, [pc, #396]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005460:	4b5e      	ldr	r3, [pc, #376]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800546e:	495b      	ldr	r1, [pc, #364]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005482:	4b56      	ldr	r3, [pc, #344]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005490:	4952      	ldr	r1, [pc, #328]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a4:	4b4d      	ldr	r3, [pc, #308]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	494a      	ldr	r1, [pc, #296]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c6:	4b45      	ldr	r3, [pc, #276]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	4941      	ldr	r1, [pc, #260]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054e8:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ee:	f023 0203 	bic.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f6:	4939      	ldr	r1, [pc, #228]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d028      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005518:	4930      	ldr	r1, [pc, #192]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005528:	d106      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552a:	4b2c      	ldr	r3, [pc, #176]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	4a2b      	ldr	r2, [pc, #172]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005534:	60d3      	str	r3, [r2, #12]
 8005536:	e011      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800553c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005540:	d10c      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3304      	adds	r3, #4
 8005546:	2101      	movs	r1, #1
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f8f9 	bl	8005740 <RCCEx_PLLSAI1_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005552:	7cfb      	ldrb	r3, [r7, #19]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d04d      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800556c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005570:	d108      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005572:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005578:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800557a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800557e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005582:	e012      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005584:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800558a:	4a14      	ldr	r2, [pc, #80]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800558c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005590:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005594:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055a2:	490e      	ldr	r1, [pc, #56]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055b2:	d106      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b4:	4b09      	ldr	r3, [pc, #36]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4a08      	ldr	r2, [pc, #32]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055be:	60d3      	str	r3, [r2, #12]
 80055c0:	e020      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ca:	d109      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055cc:	4b03      	ldr	r3, [pc, #12]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a02      	ldr	r2, [pc, #8]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d6:	60d3      	str	r3, [r2, #12]
 80055d8:	e014      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	2101      	movs	r1, #1
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f8a5 	bl	8005740 <RCCEx_PLLSAI1_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d028      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005610:	4b4a      	ldr	r3, [pc, #296]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800561e:	4947      	ldr	r1, [pc, #284]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800562a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800562e:	d106      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005630:	4b42      	ldr	r3, [pc, #264]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a41      	ldr	r2, [pc, #260]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800563a:	60d3      	str	r3, [r2, #12]
 800563c:	e011      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005642:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f876 	bl	8005740 <RCCEx_PLLSAI1_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01e      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800566e:	4b33      	ldr	r3, [pc, #204]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005674:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800567e:	492f      	ldr	r1, [pc, #188]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800568c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005690:	d10c      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3304      	adds	r3, #4
 8005696:	2102      	movs	r1, #2
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f851 	bl	8005740 <RCCEx_PLLSAI1_Config>
 800569e:	4603      	mov	r3, r0
 80056a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056b8:	4b20      	ldr	r3, [pc, #128]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056be:	f023 0204 	bic.w	r2, r3, #4
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c8:	491c      	ldr	r1, [pc, #112]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056dc:	4b17      	ldr	r3, [pc, #92]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056e2:	f023 0218 	bic.w	r2, r3, #24
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	4913      	ldr	r1, [pc, #76]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005700:	4b0e      	ldr	r3, [pc, #56]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005710:	490a      	ldr	r1, [pc, #40]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800571e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005722:	d105      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4a04      	ldr	r2, [pc, #16]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800572e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005730:	7cbb      	ldrb	r3, [r7, #18]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000

08005740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800574e:	4b72      	ldr	r3, [pc, #456]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800575a:	4b6f      	ldr	r3, [pc, #444]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0203 	and.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d103      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
       ||
 800576e:	2b00      	cmp	r3, #0
 8005770:	d142      	bne.n	80057f8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
 8005776:	e03f      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d018      	beq.n	80057b2 <RCCEx_PLLSAI1_Config+0x72>
 8005780:	2b03      	cmp	r3, #3
 8005782:	d825      	bhi.n	80057d0 <RCCEx_PLLSAI1_Config+0x90>
 8005784:	2b01      	cmp	r3, #1
 8005786:	d002      	beq.n	800578e <RCCEx_PLLSAI1_Config+0x4e>
 8005788:	2b02      	cmp	r3, #2
 800578a:	d009      	beq.n	80057a0 <RCCEx_PLLSAI1_Config+0x60>
 800578c:	e020      	b.n	80057d0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800578e:	4b62      	ldr	r3, [pc, #392]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d11d      	bne.n	80057d6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579e:	e01a      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d116      	bne.n	80057da <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b0:	e013      	b.n	80057da <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057b2:	4b59      	ldr	r3, [pc, #356]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10f      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057be:	4b56      	ldr	r3, [pc, #344]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ce:	e006      	b.n	80057de <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e004      	b.n	80057e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057d6:	bf00      	nop
 80057d8:	e002      	b.n	80057e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057de:	bf00      	nop
    }

    if(status == HAL_OK)
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d108      	bne.n	80057f8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80057e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4949      	ldr	r1, [pc, #292]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 8086 	bne.w	800590c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005800:	4b45      	ldr	r3, [pc, #276]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a44      	ldr	r2, [pc, #272]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005806:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800580a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580c:	f7fc f968 	bl	8001ae0 <HAL_GetTick>
 8005810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005812:	e009      	b.n	8005828 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005814:	f7fc f964 	bl	8001ae0 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d902      	bls.n	8005828 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	73fb      	strb	r3, [r7, #15]
        break;
 8005826:	e005      	b.n	8005834 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005828:	4b3b      	ldr	r3, [pc, #236]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ef      	bne.n	8005814 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d168      	bne.n	800590c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005840:	4b35      	ldr	r3, [pc, #212]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	4b35      	ldr	r3, [pc, #212]	@ (800591c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005846:	4013      	ands	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6892      	ldr	r2, [r2, #8]
 800584c:	0211      	lsls	r1, r2, #8
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68d2      	ldr	r2, [r2, #12]
 8005852:	06d2      	lsls	r2, r2, #27
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6852      	ldr	r2, [r2, #4]
 800585a:	3a01      	subs	r2, #1
 800585c:	0112      	lsls	r2, r2, #4
 800585e:	430a      	orrs	r2, r1
 8005860:	492d      	ldr	r1, [pc, #180]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
 8005866:	e02d      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d115      	bne.n	800589a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800586e:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005874:	4013      	ands	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6892      	ldr	r2, [r2, #8]
 800587a:	0211      	lsls	r1, r2, #8
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6912      	ldr	r2, [r2, #16]
 8005880:	0852      	lsrs	r2, r2, #1
 8005882:	3a01      	subs	r2, #1
 8005884:	0552      	lsls	r2, r2, #21
 8005886:	4311      	orrs	r1, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6852      	ldr	r2, [r2, #4]
 800588c:	3a01      	subs	r2, #1
 800588e:	0112      	lsls	r2, r2, #4
 8005890:	430a      	orrs	r2, r1
 8005892:	4921      	ldr	r1, [pc, #132]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	610b      	str	r3, [r1, #16]
 8005898:	e014      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800589a:	4b1f      	ldr	r3, [pc, #124]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	4b21      	ldr	r3, [pc, #132]	@ (8005924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6892      	ldr	r2, [r2, #8]
 80058a6:	0211      	lsls	r1, r2, #8
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6952      	ldr	r2, [r2, #20]
 80058ac:	0852      	lsrs	r2, r2, #1
 80058ae:	3a01      	subs	r2, #1
 80058b0:	0652      	lsls	r2, r2, #25
 80058b2:	4311      	orrs	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6852      	ldr	r2, [r2, #4]
 80058b8:	3a01      	subs	r2, #1
 80058ba:	0112      	lsls	r2, r2, #4
 80058bc:	430a      	orrs	r2, r1
 80058be:	4916      	ldr	r1, [pc, #88]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058c4:	4b14      	ldr	r3, [pc, #80]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a13      	ldr	r2, [pc, #76]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d0:	f7fc f906 	bl	8001ae0 <HAL_GetTick>
 80058d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058d6:	e009      	b.n	80058ec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058d8:	f7fc f902 	bl	8001ae0 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d902      	bls.n	80058ec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	73fb      	strb	r3, [r7, #15]
          break;
 80058ea:	e005      	b.n	80058f8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ef      	beq.n	80058d8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058fe:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	4904      	ldr	r1, [pc, #16]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40021000 	.word	0x40021000
 800591c:	07ff800f 	.word	0x07ff800f
 8005920:	ff9f800f 	.word	0xff9f800f
 8005924:	f9ff800f 	.word	0xf9ff800f

08005928 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005936:	4b72      	ldr	r3, [pc, #456]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005942:	4b6f      	ldr	r3, [pc, #444]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0203 	and.w	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d103      	bne.n	800595a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
       ||
 8005956:	2b00      	cmp	r3, #0
 8005958:	d142      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
 800595e:	e03f      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d018      	beq.n	800599a <RCCEx_PLLSAI2_Config+0x72>
 8005968:	2b03      	cmp	r3, #3
 800596a:	d825      	bhi.n	80059b8 <RCCEx_PLLSAI2_Config+0x90>
 800596c:	2b01      	cmp	r3, #1
 800596e:	d002      	beq.n	8005976 <RCCEx_PLLSAI2_Config+0x4e>
 8005970:	2b02      	cmp	r3, #2
 8005972:	d009      	beq.n	8005988 <RCCEx_PLLSAI2_Config+0x60>
 8005974:	e020      	b.n	80059b8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005976:	4b62      	ldr	r3, [pc, #392]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d11d      	bne.n	80059be <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005986:	e01a      	b.n	80059be <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005988:	4b5d      	ldr	r3, [pc, #372]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005990:	2b00      	cmp	r3, #0
 8005992:	d116      	bne.n	80059c2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005998:	e013      	b.n	80059c2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800599a:	4b59      	ldr	r3, [pc, #356]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059a6:	4b56      	ldr	r3, [pc, #344]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059b6:	e006      	b.n	80059c6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e004      	b.n	80059c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059be:	bf00      	nop
 80059c0:	e002      	b.n	80059c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d108      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f023 0203 	bic.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4949      	ldr	r1, [pc, #292]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 8086 	bne.w	8005af4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059e8:	4b45      	ldr	r3, [pc, #276]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a44      	ldr	r2, [pc, #272]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f4:	f7fc f874 	bl	8001ae0 <HAL_GetTick>
 80059f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059fa:	e009      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059fc:	f7fc f870 	bl	8001ae0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d902      	bls.n	8005a10 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0e:	e005      	b.n	8005a1c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a10:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1ef      	bne.n	80059fc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d168      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d113      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a28:	4b35      	ldr	r3, [pc, #212]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	0211      	lsls	r1, r2, #8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	06d2      	lsls	r2, r2, #27
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6852      	ldr	r2, [r2, #4]
 8005a42:	3a01      	subs	r2, #1
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	430a      	orrs	r2, r1
 8005a48:	492d      	ldr	r1, [pc, #180]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	614b      	str	r3, [r1, #20]
 8005a4e:	e02d      	b.n	8005aac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d115      	bne.n	8005a82 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a56:	4b2a      	ldr	r3, [pc, #168]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b08 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6892      	ldr	r2, [r2, #8]
 8005a62:	0211      	lsls	r1, r2, #8
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6912      	ldr	r2, [r2, #16]
 8005a68:	0852      	lsrs	r2, r2, #1
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	0552      	lsls	r2, r2, #21
 8005a6e:	4311      	orrs	r1, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6852      	ldr	r2, [r2, #4]
 8005a74:	3a01      	subs	r2, #1
 8005a76:	0112      	lsls	r2, r2, #4
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	4921      	ldr	r1, [pc, #132]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	614b      	str	r3, [r1, #20]
 8005a80:	e014      	b.n	8005aac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a82:	4b1f      	ldr	r3, [pc, #124]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	4b21      	ldr	r3, [pc, #132]	@ (8005b0c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6892      	ldr	r2, [r2, #8]
 8005a8e:	0211      	lsls	r1, r2, #8
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6952      	ldr	r2, [r2, #20]
 8005a94:	0852      	lsrs	r2, r2, #1
 8005a96:	3a01      	subs	r2, #1
 8005a98:	0652      	lsls	r2, r2, #25
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6852      	ldr	r2, [r2, #4]
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	0112      	lsls	r2, r2, #4
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	4916      	ldr	r1, [pc, #88]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005aac:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a13      	ldr	r2, [pc, #76]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fc f812 	bl	8001ae0 <HAL_GetTick>
 8005abc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005abe:	e009      	b.n	8005ad4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ac0:	f7fc f80e 	bl	8001ae0 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d902      	bls.n	8005ad4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ad2:	e005      	b.n	8005ae0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ef      	beq.n	8005ac0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	4904      	ldr	r1, [pc, #16]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000
 8005b04:	07ff800f 	.word	0x07ff800f
 8005b08:	ff9f800f 	.word	0xff9f800f
 8005b0c:	f9ff800f 	.word	0xf9ff800f

08005b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e042      	b.n	8005ba8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fb fdd3 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2224      	movs	r2, #36	@ 0x24
 8005b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fbb2 	bl	80062c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f8b3 	bl	8005ccc <UART_SetConfig>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e01b      	b.n	8005ba8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fc31 	bl	8006408 <UART_CheckIdleState>
 8005ba6:	4603      	mov	r3, r0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	@ 0x28
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d17b      	bne.n	8005cc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_Transmit+0x26>
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e074      	b.n	8005cc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2221      	movs	r2, #33	@ 0x21
 8005be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bea:	f7fb ff79 	bl	8001ae0 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	88fa      	ldrh	r2, [r7, #6]
 8005bfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c08:	d108      	bne.n	8005c1c <HAL_UART_Transmit+0x6c>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e003      	b.n	8005c24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c24:	e030      	b.n	8005c88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2180      	movs	r1, #128	@ 0x80
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fc93 	bl	800655c <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e03d      	b.n	8005cc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	881a      	ldrh	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	3302      	adds	r3, #2
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e007      	b.n	8005c76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1c8      	bne.n	8005c26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2140      	movs	r1, #64	@ 0x40
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fc5c 	bl	800655c <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e006      	b.n	8005cc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd0:	b08c      	sub	sp, #48	@ 0x30
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4baa      	ldr	r3, [pc, #680]	@ (8005fa4 <UART_SetConfig+0x2d8>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a9f      	ldr	r2, [pc, #636]	@ (8005fa8 <UART_SetConfig+0x2dc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d34:	4313      	orrs	r3, r2
 8005d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d56:	f023 010f 	bic.w	r1, r3, #15
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a90      	ldr	r2, [pc, #576]	@ (8005fac <UART_SetConfig+0x2e0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d125      	bne.n	8005dbc <UART_SetConfig+0xf0>
 8005d70:	4b8f      	ldr	r3, [pc, #572]	@ (8005fb0 <UART_SetConfig+0x2e4>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d81a      	bhi.n	8005db4 <UART_SetConfig+0xe8>
 8005d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <UART_SetConfig+0xb8>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005da5 	.word	0x08005da5
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005dad 	.word	0x08005dad
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9a:	e116      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da2:	e112      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005da4:	2304      	movs	r3, #4
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005daa:	e10e      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005dac:	2308      	movs	r3, #8
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db2:	e10a      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005db4:	2310      	movs	r3, #16
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dba:	e106      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a7c      	ldr	r2, [pc, #496]	@ (8005fb4 <UART_SetConfig+0x2e8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d138      	bne.n	8005e38 <UART_SetConfig+0x16c>
 8005dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8005fb0 <UART_SetConfig+0x2e4>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dcc:	f003 030c 	and.w	r3, r3, #12
 8005dd0:	2b0c      	cmp	r3, #12
 8005dd2:	d82d      	bhi.n	8005e30 <UART_SetConfig+0x164>
 8005dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x110>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e11 	.word	0x08005e11
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005e31 	.word	0x08005e31
 8005de8:	08005e31 	.word	0x08005e31
 8005dec:	08005e21 	.word	0x08005e21
 8005df0:	08005e31 	.word	0x08005e31
 8005df4:	08005e31 	.word	0x08005e31
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005e31 	.word	0x08005e31
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e0d8      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1e:	e0d4      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e26:	e0d0      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e2e:	e0cc      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e36:	e0c8      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8005fb8 <UART_SetConfig+0x2ec>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d125      	bne.n	8005e8e <UART_SetConfig+0x1c2>
 8005e42:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb0 <UART_SetConfig+0x2e4>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e4c:	2b30      	cmp	r3, #48	@ 0x30
 8005e4e:	d016      	beq.n	8005e7e <UART_SetConfig+0x1b2>
 8005e50:	2b30      	cmp	r3, #48	@ 0x30
 8005e52:	d818      	bhi.n	8005e86 <UART_SetConfig+0x1ba>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d00a      	beq.n	8005e6e <UART_SetConfig+0x1a2>
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d814      	bhi.n	8005e86 <UART_SetConfig+0x1ba>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <UART_SetConfig+0x19a>
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d008      	beq.n	8005e76 <UART_SetConfig+0x1aa>
 8005e64:	e00f      	b.n	8005e86 <UART_SetConfig+0x1ba>
 8005e66:	2300      	movs	r3, #0
 8005e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6c:	e0ad      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e74:	e0a9      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e76:	2304      	movs	r3, #4
 8005e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7c:	e0a5      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e7e:	2308      	movs	r3, #8
 8005e80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e84:	e0a1      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e86:	2310      	movs	r3, #16
 8005e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8c:	e09d      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4a      	ldr	r2, [pc, #296]	@ (8005fbc <UART_SetConfig+0x2f0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d125      	bne.n	8005ee4 <UART_SetConfig+0x218>
 8005e98:	4b45      	ldr	r3, [pc, #276]	@ (8005fb0 <UART_SetConfig+0x2e4>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ea2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ea4:	d016      	beq.n	8005ed4 <UART_SetConfig+0x208>
 8005ea6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ea8:	d818      	bhi.n	8005edc <UART_SetConfig+0x210>
 8005eaa:	2b80      	cmp	r3, #128	@ 0x80
 8005eac:	d00a      	beq.n	8005ec4 <UART_SetConfig+0x1f8>
 8005eae:	2b80      	cmp	r3, #128	@ 0x80
 8005eb0:	d814      	bhi.n	8005edc <UART_SetConfig+0x210>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <UART_SetConfig+0x1f0>
 8005eb6:	2b40      	cmp	r3, #64	@ 0x40
 8005eb8:	d008      	beq.n	8005ecc <UART_SetConfig+0x200>
 8005eba:	e00f      	b.n	8005edc <UART_SetConfig+0x210>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec2:	e082      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eca:	e07e      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed2:	e07a      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eda:	e076      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005edc:	2310      	movs	r3, #16
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee2:	e072      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a35      	ldr	r2, [pc, #212]	@ (8005fc0 <UART_SetConfig+0x2f4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d12a      	bne.n	8005f44 <UART_SetConfig+0x278>
 8005eee:	4b30      	ldr	r3, [pc, #192]	@ (8005fb0 <UART_SetConfig+0x2e4>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005efc:	d01a      	beq.n	8005f34 <UART_SetConfig+0x268>
 8005efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f02:	d81b      	bhi.n	8005f3c <UART_SetConfig+0x270>
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f08:	d00c      	beq.n	8005f24 <UART_SetConfig+0x258>
 8005f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0e:	d815      	bhi.n	8005f3c <UART_SetConfig+0x270>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <UART_SetConfig+0x250>
 8005f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f18:	d008      	beq.n	8005f2c <UART_SetConfig+0x260>
 8005f1a:	e00f      	b.n	8005f3c <UART_SetConfig+0x270>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f22:	e052      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f24:	2302      	movs	r3, #2
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2a:	e04e      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f32:	e04a      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3a:	e046      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f42:	e042      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <UART_SetConfig+0x2dc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d13a      	bne.n	8005fc4 <UART_SetConfig+0x2f8>
 8005f4e:	4b18      	ldr	r3, [pc, #96]	@ (8005fb0 <UART_SetConfig+0x2e4>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f5c:	d01a      	beq.n	8005f94 <UART_SetConfig+0x2c8>
 8005f5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f62:	d81b      	bhi.n	8005f9c <UART_SetConfig+0x2d0>
 8005f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f68:	d00c      	beq.n	8005f84 <UART_SetConfig+0x2b8>
 8005f6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f6e:	d815      	bhi.n	8005f9c <UART_SetConfig+0x2d0>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <UART_SetConfig+0x2b0>
 8005f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f78:	d008      	beq.n	8005f8c <UART_SetConfig+0x2c0>
 8005f7a:	e00f      	b.n	8005f9c <UART_SetConfig+0x2d0>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e022      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e01e      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f92:	e01a      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	e016      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fa2:	e012      	b.n	8005fca <UART_SetConfig+0x2fe>
 8005fa4:	cfff69f3 	.word	0xcfff69f3
 8005fa8:	40008000 	.word	0x40008000
 8005fac:	40013800 	.word	0x40013800
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40004400 	.word	0x40004400
 8005fb8:	40004800 	.word	0x40004800
 8005fbc:	40004c00 	.word	0x40004c00
 8005fc0:	40005000 	.word	0x40005000
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4aae      	ldr	r2, [pc, #696]	@ (8006288 <UART_SetConfig+0x5bc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	f040 8097 	bne.w	8006104 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d823      	bhi.n	8006026 <UART_SetConfig+0x35a>
 8005fde:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe4 <UART_SetConfig+0x318>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	08006027 	.word	0x08006027
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006027 	.word	0x08006027
 8005ff4:	08006017 	.word	0x08006017
 8005ff8:	08006027 	.word	0x08006027
 8005ffc:	08006027 	.word	0x08006027
 8006000:	08006027 	.word	0x08006027
 8006004:	0800601f 	.word	0x0800601f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006008:	f7fe ff7e 	bl	8004f08 <HAL_RCC_GetPCLK1Freq>
 800600c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800600e:	e010      	b.n	8006032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006010:	4b9e      	ldr	r3, [pc, #632]	@ (800628c <UART_SetConfig+0x5c0>)
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006014:	e00d      	b.n	8006032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006016:	f7fe fedf 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 800601a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800601c:	e009      	b.n	8006032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006024:	e005      	b.n	8006032 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006030:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8130 	beq.w	800629a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	4a94      	ldr	r2, [pc, #592]	@ (8006290 <UART_SetConfig+0x5c4>)
 8006040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006044:	461a      	mov	r2, r3
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	fbb3 f3f2 	udiv	r3, r3, r2
 800604c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	4413      	add	r3, r2
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	429a      	cmp	r2, r3
 800605c:	d305      	bcc.n	800606a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	429a      	cmp	r2, r3
 8006068:	d903      	bls.n	8006072 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006070:	e113      	b.n	800629a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	2200      	movs	r2, #0
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	60fa      	str	r2, [r7, #12]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	4a84      	ldr	r2, [pc, #528]	@ (8006290 <UART_SetConfig+0x5c4>)
 8006080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006084:	b29b      	uxth	r3, r3
 8006086:	2200      	movs	r2, #0
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006090:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006094:	f7fa fe10 	bl	8000cb8 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	020b      	lsls	r3, r1, #8
 80060aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060ae:	0202      	lsls	r2, r0, #8
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	6849      	ldr	r1, [r1, #4]
 80060b4:	0849      	lsrs	r1, r1, #1
 80060b6:	2000      	movs	r0, #0
 80060b8:	460c      	mov	r4, r1
 80060ba:	4605      	mov	r5, r0
 80060bc:	eb12 0804 	adds.w	r8, r2, r4
 80060c0:	eb43 0905 	adc.w	r9, r3, r5
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	469a      	mov	sl, r3
 80060cc:	4693      	mov	fp, r2
 80060ce:	4652      	mov	r2, sl
 80060d0:	465b      	mov	r3, fp
 80060d2:	4640      	mov	r0, r8
 80060d4:	4649      	mov	r1, r9
 80060d6:	f7fa fdef 	bl	8000cb8 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4613      	mov	r3, r2
 80060e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e8:	d308      	bcc.n	80060fc <UART_SetConfig+0x430>
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f0:	d204      	bcs.n	80060fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	e0ce      	b.n	800629a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006102:	e0ca      	b.n	800629a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800610c:	d166      	bne.n	80061dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800610e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006112:	2b08      	cmp	r3, #8
 8006114:	d827      	bhi.n	8006166 <UART_SetConfig+0x49a>
 8006116:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <UART_SetConfig+0x450>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006141 	.word	0x08006141
 8006120:	08006149 	.word	0x08006149
 8006124:	08006151 	.word	0x08006151
 8006128:	08006167 	.word	0x08006167
 800612c:	08006157 	.word	0x08006157
 8006130:	08006167 	.word	0x08006167
 8006134:	08006167 	.word	0x08006167
 8006138:	08006167 	.word	0x08006167
 800613c:	0800615f 	.word	0x0800615f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006140:	f7fe fee2 	bl	8004f08 <HAL_RCC_GetPCLK1Freq>
 8006144:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006146:	e014      	b.n	8006172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006148:	f7fe fef4 	bl	8004f34 <HAL_RCC_GetPCLK2Freq>
 800614c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800614e:	e010      	b.n	8006172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006150:	4b4e      	ldr	r3, [pc, #312]	@ (800628c <UART_SetConfig+0x5c0>)
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006154:	e00d      	b.n	8006172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006156:	f7fe fe3f 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 800615a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800615c:	e009      	b.n	8006172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006164:	e005      	b.n	8006172 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8090 	beq.w	800629a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	4a44      	ldr	r2, [pc, #272]	@ (8006290 <UART_SetConfig+0x5c4>)
 8006180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006184:	461a      	mov	r2, r3
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	fbb3 f3f2 	udiv	r3, r3, r2
 800618c:	005a      	lsls	r2, r3, #1
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	441a      	add	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	2b0f      	cmp	r3, #15
 80061a4:	d916      	bls.n	80061d4 <UART_SetConfig+0x508>
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ac:	d212      	bcs.n	80061d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f023 030f 	bic.w	r3, r3, #15
 80061b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	8bfb      	ldrh	r3, [r7, #30]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	8bfa      	ldrh	r2, [r7, #30]
 80061d0:	60da      	str	r2, [r3, #12]
 80061d2:	e062      	b.n	800629a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061da:	e05e      	b.n	800629a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d828      	bhi.n	8006236 <UART_SetConfig+0x56a>
 80061e4:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <UART_SetConfig+0x520>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006221 	.word	0x08006221
 80061f8:	08006237 	.word	0x08006237
 80061fc:	08006227 	.word	0x08006227
 8006200:	08006237 	.word	0x08006237
 8006204:	08006237 	.word	0x08006237
 8006208:	08006237 	.word	0x08006237
 800620c:	0800622f 	.word	0x0800622f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006210:	f7fe fe7a 	bl	8004f08 <HAL_RCC_GetPCLK1Freq>
 8006214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006216:	e014      	b.n	8006242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006218:	f7fe fe8c 	bl	8004f34 <HAL_RCC_GetPCLK2Freq>
 800621c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800621e:	e010      	b.n	8006242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006220:	4b1a      	ldr	r3, [pc, #104]	@ (800628c <UART_SetConfig+0x5c0>)
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006224:	e00d      	b.n	8006242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fe fdd7 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 800622a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800622c:	e009      	b.n	8006242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006234:	e005      	b.n	8006242 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006240:	bf00      	nop
    }

    if (pclk != 0U)
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d028      	beq.n	800629a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624c:	4a10      	ldr	r2, [pc, #64]	@ (8006290 <UART_SetConfig+0x5c4>)
 800624e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006252:	461a      	mov	r2, r3
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	fbb3 f2f2 	udiv	r2, r3, r2
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	441a      	add	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	fbb2 f3f3 	udiv	r3, r2, r3
 800626a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d910      	bls.n	8006294 <UART_SetConfig+0x5c8>
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006278:	d20c      	bcs.n	8006294 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	b29a      	uxth	r2, r3
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60da      	str	r2, [r3, #12]
 8006284:	e009      	b.n	800629a <UART_SetConfig+0x5ce>
 8006286:	bf00      	nop
 8006288:	40008000 	.word	0x40008000
 800628c:	00f42400 	.word	0x00f42400
 8006290:	0800b08c 	.word	0x0800b08c
      }
      else
      {
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2201      	movs	r2, #1
 800629e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2200      	movs	r2, #0
 80062ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2200      	movs	r2, #0
 80062b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80062b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3730      	adds	r7, #48	@ 0x30
 80062be:	46bd      	mov	sp, r7
 80062c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01a      	beq.n	80063da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063c2:	d10a      	bne.n	80063da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b098      	sub	sp, #96	@ 0x60
 800640c:	af02      	add	r7, sp, #8
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006418:	f7fb fb62 	bl	8001ae0 <HAL_GetTick>
 800641c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b08      	cmp	r3, #8
 800642a:	d12f      	bne.n	800648c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800642c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006434:	2200      	movs	r2, #0
 8006436:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f88e 	bl	800655c <UART_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d022      	beq.n	800648c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800645a:	653b      	str	r3, [r7, #80]	@ 0x50
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006464:	647b      	str	r3, [r7, #68]	@ 0x44
 8006466:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800646a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e6      	bne.n	8006446 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e063      	b.n	8006554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b04      	cmp	r3, #4
 8006498:	d149      	bne.n	800652e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a2:	2200      	movs	r2, #0
 80064a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f857 	bl	800655c <UART_WaitOnFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d03c      	beq.n	800652e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	623b      	str	r3, [r7, #32]
   return(result);
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80064d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006506:	61fa      	str	r2, [r7, #28]
 8006508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69b9      	ldr	r1, [r7, #24]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	617b      	str	r3, [r7, #20]
   return(result);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e012      	b.n	8006554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3758      	adds	r7, #88	@ 0x58
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	4613      	mov	r3, r2
 800656a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656c:	e04f      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006574:	d04b      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006576:	f7fb fab3 	bl	8001ae0 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	429a      	cmp	r2, r3
 8006584:	d302      	bcc.n	800658c <UART_WaitOnFlagUntilTimeout+0x30>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e04e      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d037      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xb2>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b80      	cmp	r3, #128	@ 0x80
 80065a2:	d034      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xb2>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d031      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d110      	bne.n	80065da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2208      	movs	r2, #8
 80065be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f838 	bl	8006636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2208      	movs	r2, #8
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e029      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e8:	d111      	bne.n	800660e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f81e 	bl	8006636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e00f      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	bf0c      	ite	eq
 800661e:	2301      	moveq	r3, #1
 8006620:	2300      	movne	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	429a      	cmp	r2, r3
 800662a:	d0a0      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006636:	b480      	push	{r7}
 8006638:	b095      	sub	sp, #84	@ 0x54
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800665c:	643b      	str	r3, [r7, #64]	@ 0x40
 800665e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e6      	bne.n	800663e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3308      	adds	r3, #8
 8006676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3308      	adds	r3, #8
 8006692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800669a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e3      	bne.n	8006670 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d118      	bne.n	80066e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6979      	ldr	r1, [r7, #20]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	613b      	str	r3, [r7, #16]
   return(result);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e6      	bne.n	80066b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066f6:	bf00      	nop
 80066f8:	3754      	adds	r7, #84	@ 0x54
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_UARTEx_DisableFifoMode+0x16>
 8006714:	2302      	movs	r3, #2
 8006716:	e027      	b.n	8006768 <HAL_UARTEx_DisableFifoMode+0x66>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2224      	movs	r2, #36	@ 0x24
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006788:	2302      	movs	r3, #2
 800678a:	e02d      	b.n	80067e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2224      	movs	r2, #36	@ 0x24
 8006798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f84f 	bl	800686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e02d      	b.n	8006864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2224      	movs	r2, #36	@ 0x24
 8006814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f811 	bl	800686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006878:	2b00      	cmp	r3, #0
 800687a:	d108      	bne.n	800688e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800688c:	e031      	b.n	80068f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800688e:	2308      	movs	r3, #8
 8006890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006892:	2308      	movs	r3, #8
 8006894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	0e5b      	lsrs	r3, r3, #25
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	0f5b      	lsrs	r3, r3, #29
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	7b3a      	ldrb	r2, [r7, #12]
 80068ba:	4911      	ldr	r1, [pc, #68]	@ (8006900 <UARTEx_SetNbDataToProcess+0x94>)
 80068bc:	5c8a      	ldrb	r2, [r1, r2]
 80068be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068c2:	7b3a      	ldrb	r2, [r7, #12]
 80068c4:	490f      	ldr	r1, [pc, #60]	@ (8006904 <UARTEx_SetNbDataToProcess+0x98>)
 80068c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	7b7a      	ldrb	r2, [r7, #13]
 80068d8:	4909      	ldr	r1, [pc, #36]	@ (8006900 <UARTEx_SetNbDataToProcess+0x94>)
 80068da:	5c8a      	ldrb	r2, [r1, r2]
 80068dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068e0:	7b7a      	ldrb	r2, [r7, #13]
 80068e2:	4908      	ldr	r1, [pc, #32]	@ (8006904 <UARTEx_SetNbDataToProcess+0x98>)
 80068e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	0800b0a4 	.word	0x0800b0a4
 8006904:	0800b0ac 	.word	0x0800b0ac

08006908 <__cvt>:
 8006908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800690c:	ec57 6b10 	vmov	r6, r7, d0
 8006910:	2f00      	cmp	r7, #0
 8006912:	460c      	mov	r4, r1
 8006914:	4619      	mov	r1, r3
 8006916:	463b      	mov	r3, r7
 8006918:	bfbb      	ittet	lt
 800691a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800691e:	461f      	movlt	r7, r3
 8006920:	2300      	movge	r3, #0
 8006922:	232d      	movlt	r3, #45	@ 0x2d
 8006924:	700b      	strb	r3, [r1, #0]
 8006926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006928:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800692c:	4691      	mov	r9, r2
 800692e:	f023 0820 	bic.w	r8, r3, #32
 8006932:	bfbc      	itt	lt
 8006934:	4632      	movlt	r2, r6
 8006936:	4616      	movlt	r6, r2
 8006938:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800693c:	d005      	beq.n	800694a <__cvt+0x42>
 800693e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006942:	d100      	bne.n	8006946 <__cvt+0x3e>
 8006944:	3401      	adds	r4, #1
 8006946:	2102      	movs	r1, #2
 8006948:	e000      	b.n	800694c <__cvt+0x44>
 800694a:	2103      	movs	r1, #3
 800694c:	ab03      	add	r3, sp, #12
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	ab02      	add	r3, sp, #8
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	ec47 6b10 	vmov	d0, r6, r7
 8006958:	4653      	mov	r3, sl
 800695a:	4622      	mov	r2, r4
 800695c:	f001 fe9c 	bl	8008698 <_dtoa_r>
 8006960:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006964:	4605      	mov	r5, r0
 8006966:	d119      	bne.n	800699c <__cvt+0x94>
 8006968:	f019 0f01 	tst.w	r9, #1
 800696c:	d00e      	beq.n	800698c <__cvt+0x84>
 800696e:	eb00 0904 	add.w	r9, r0, r4
 8006972:	2200      	movs	r2, #0
 8006974:	2300      	movs	r3, #0
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7fa f8bd 	bl	8000af8 <__aeabi_dcmpeq>
 800697e:	b108      	cbz	r0, 8006984 <__cvt+0x7c>
 8006980:	f8cd 900c 	str.w	r9, [sp, #12]
 8006984:	2230      	movs	r2, #48	@ 0x30
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	454b      	cmp	r3, r9
 800698a:	d31e      	bcc.n	80069ca <__cvt+0xc2>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006990:	1b5b      	subs	r3, r3, r5
 8006992:	4628      	mov	r0, r5
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	b004      	add	sp, #16
 8006998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069a0:	eb00 0904 	add.w	r9, r0, r4
 80069a4:	d1e5      	bne.n	8006972 <__cvt+0x6a>
 80069a6:	7803      	ldrb	r3, [r0, #0]
 80069a8:	2b30      	cmp	r3, #48	@ 0x30
 80069aa:	d10a      	bne.n	80069c2 <__cvt+0xba>
 80069ac:	2200      	movs	r2, #0
 80069ae:	2300      	movs	r3, #0
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7fa f8a0 	bl	8000af8 <__aeabi_dcmpeq>
 80069b8:	b918      	cbnz	r0, 80069c2 <__cvt+0xba>
 80069ba:	f1c4 0401 	rsb	r4, r4, #1
 80069be:	f8ca 4000 	str.w	r4, [sl]
 80069c2:	f8da 3000 	ldr.w	r3, [sl]
 80069c6:	4499      	add	r9, r3
 80069c8:	e7d3      	b.n	8006972 <__cvt+0x6a>
 80069ca:	1c59      	adds	r1, r3, #1
 80069cc:	9103      	str	r1, [sp, #12]
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e7d9      	b.n	8006986 <__cvt+0x7e>

080069d2 <__exponent>:
 80069d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069d4:	2900      	cmp	r1, #0
 80069d6:	bfba      	itte	lt
 80069d8:	4249      	neglt	r1, r1
 80069da:	232d      	movlt	r3, #45	@ 0x2d
 80069dc:	232b      	movge	r3, #43	@ 0x2b
 80069de:	2909      	cmp	r1, #9
 80069e0:	7002      	strb	r2, [r0, #0]
 80069e2:	7043      	strb	r3, [r0, #1]
 80069e4:	dd29      	ble.n	8006a3a <__exponent+0x68>
 80069e6:	f10d 0307 	add.w	r3, sp, #7
 80069ea:	461d      	mov	r5, r3
 80069ec:	270a      	movs	r7, #10
 80069ee:	461a      	mov	r2, r3
 80069f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80069f4:	fb07 1416 	mls	r4, r7, r6, r1
 80069f8:	3430      	adds	r4, #48	@ 0x30
 80069fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80069fe:	460c      	mov	r4, r1
 8006a00:	2c63      	cmp	r4, #99	@ 0x63
 8006a02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006a06:	4631      	mov	r1, r6
 8006a08:	dcf1      	bgt.n	80069ee <__exponent+0x1c>
 8006a0a:	3130      	adds	r1, #48	@ 0x30
 8006a0c:	1e94      	subs	r4, r2, #2
 8006a0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a12:	1c41      	adds	r1, r0, #1
 8006a14:	4623      	mov	r3, r4
 8006a16:	42ab      	cmp	r3, r5
 8006a18:	d30a      	bcc.n	8006a30 <__exponent+0x5e>
 8006a1a:	f10d 0309 	add.w	r3, sp, #9
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	42ac      	cmp	r4, r5
 8006a22:	bf88      	it	hi
 8006a24:	2300      	movhi	r3, #0
 8006a26:	3302      	adds	r3, #2
 8006a28:	4403      	add	r3, r0
 8006a2a:	1a18      	subs	r0, r3, r0
 8006a2c:	b003      	add	sp, #12
 8006a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a38:	e7ed      	b.n	8006a16 <__exponent+0x44>
 8006a3a:	2330      	movs	r3, #48	@ 0x30
 8006a3c:	3130      	adds	r1, #48	@ 0x30
 8006a3e:	7083      	strb	r3, [r0, #2]
 8006a40:	70c1      	strb	r1, [r0, #3]
 8006a42:	1d03      	adds	r3, r0, #4
 8006a44:	e7f1      	b.n	8006a2a <__exponent+0x58>
	...

08006a48 <_printf_float>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	b08d      	sub	sp, #52	@ 0x34
 8006a4e:	460c      	mov	r4, r1
 8006a50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a54:	4616      	mov	r6, r2
 8006a56:	461f      	mov	r7, r3
 8006a58:	4605      	mov	r5, r0
 8006a5a:	f001 fd43 	bl	80084e4 <_localeconv_r>
 8006a5e:	6803      	ldr	r3, [r0, #0]
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7f9 fc1c 	bl	80002a0 <strlen>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a70:	9005      	str	r0, [sp, #20]
 8006a72:	3307      	adds	r3, #7
 8006a74:	f023 0307 	bic.w	r3, r3, #7
 8006a78:	f103 0208 	add.w	r2, r3, #8
 8006a7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a80:	f8d4 b000 	ldr.w	fp, [r4]
 8006a84:	f8c8 2000 	str.w	r2, [r8]
 8006a88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a90:	9307      	str	r3, [sp, #28]
 8006a92:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a9e:	4b9c      	ldr	r3, [pc, #624]	@ (8006d10 <_printf_float+0x2c8>)
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006aa4:	f7fa f85a 	bl	8000b5c <__aeabi_dcmpun>
 8006aa8:	bb70      	cbnz	r0, 8006b08 <_printf_float+0xc0>
 8006aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aae:	4b98      	ldr	r3, [pc, #608]	@ (8006d10 <_printf_float+0x2c8>)
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ab4:	f7fa f834 	bl	8000b20 <__aeabi_dcmple>
 8006ab8:	bb30      	cbnz	r0, 8006b08 <_printf_float+0xc0>
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	4640      	mov	r0, r8
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	f7fa f823 	bl	8000b0c <__aeabi_dcmplt>
 8006ac6:	b110      	cbz	r0, 8006ace <_printf_float+0x86>
 8006ac8:	232d      	movs	r3, #45	@ 0x2d
 8006aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ace:	4a91      	ldr	r2, [pc, #580]	@ (8006d14 <_printf_float+0x2cc>)
 8006ad0:	4b91      	ldr	r3, [pc, #580]	@ (8006d18 <_printf_float+0x2d0>)
 8006ad2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ad6:	bf94      	ite	ls
 8006ad8:	4690      	movls	r8, r2
 8006ada:	4698      	movhi	r8, r3
 8006adc:	2303      	movs	r3, #3
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	f02b 0304 	bic.w	r3, fp, #4
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	f04f 0900 	mov.w	r9, #0
 8006aea:	9700      	str	r7, [sp, #0]
 8006aec:	4633      	mov	r3, r6
 8006aee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006af0:	4621      	mov	r1, r4
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 f9d2 	bl	8006e9c <_printf_common>
 8006af8:	3001      	adds	r0, #1
 8006afa:	f040 808d 	bne.w	8006c18 <_printf_float+0x1d0>
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b02:	b00d      	add	sp, #52	@ 0x34
 8006b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7fa f824 	bl	8000b5c <__aeabi_dcmpun>
 8006b14:	b140      	cbz	r0, 8006b28 <_printf_float+0xe0>
 8006b16:	464b      	mov	r3, r9
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bfbc      	itt	lt
 8006b1c:	232d      	movlt	r3, #45	@ 0x2d
 8006b1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b22:	4a7e      	ldr	r2, [pc, #504]	@ (8006d1c <_printf_float+0x2d4>)
 8006b24:	4b7e      	ldr	r3, [pc, #504]	@ (8006d20 <_printf_float+0x2d8>)
 8006b26:	e7d4      	b.n	8006ad2 <_printf_float+0x8a>
 8006b28:	6863      	ldr	r3, [r4, #4]
 8006b2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b2e:	9206      	str	r2, [sp, #24]
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	d13b      	bne.n	8006bac <_printf_float+0x164>
 8006b34:	2306      	movs	r3, #6
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6022      	str	r2, [r4, #0]
 8006b40:	9303      	str	r3, [sp, #12]
 8006b42:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b48:	ab09      	add	r3, sp, #36	@ 0x24
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	6861      	ldr	r1, [r4, #4]
 8006b4e:	ec49 8b10 	vmov	d0, r8, r9
 8006b52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b56:	4628      	mov	r0, r5
 8006b58:	f7ff fed6 	bl	8006908 <__cvt>
 8006b5c:	9b06      	ldr	r3, [sp, #24]
 8006b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b60:	2b47      	cmp	r3, #71	@ 0x47
 8006b62:	4680      	mov	r8, r0
 8006b64:	d129      	bne.n	8006bba <_printf_float+0x172>
 8006b66:	1cc8      	adds	r0, r1, #3
 8006b68:	db02      	blt.n	8006b70 <_printf_float+0x128>
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	dd41      	ble.n	8006bf4 <_printf_float+0x1ac>
 8006b70:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b74:	fa5f fa8a 	uxtb.w	sl, sl
 8006b78:	3901      	subs	r1, #1
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b80:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b82:	f7ff ff26 	bl	80069d2 <__exponent>
 8006b86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b88:	1813      	adds	r3, r2, r0
 8006b8a:	2a01      	cmp	r2, #1
 8006b8c:	4681      	mov	r9, r0
 8006b8e:	6123      	str	r3, [r4, #16]
 8006b90:	dc02      	bgt.n	8006b98 <_printf_float+0x150>
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	07d2      	lsls	r2, r2, #31
 8006b96:	d501      	bpl.n	8006b9c <_printf_float+0x154>
 8006b98:	3301      	adds	r3, #1
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0a2      	beq.n	8006aea <_printf_float+0xa2>
 8006ba4:	232d      	movs	r3, #45	@ 0x2d
 8006ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006baa:	e79e      	b.n	8006aea <_printf_float+0xa2>
 8006bac:	9a06      	ldr	r2, [sp, #24]
 8006bae:	2a47      	cmp	r2, #71	@ 0x47
 8006bb0:	d1c2      	bne.n	8006b38 <_printf_float+0xf0>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1c0      	bne.n	8006b38 <_printf_float+0xf0>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e7bd      	b.n	8006b36 <_printf_float+0xee>
 8006bba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bbe:	d9db      	bls.n	8006b78 <_printf_float+0x130>
 8006bc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bc4:	d118      	bne.n	8006bf8 <_printf_float+0x1b0>
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	6863      	ldr	r3, [r4, #4]
 8006bca:	dd0b      	ble.n	8006be4 <_printf_float+0x19c>
 8006bcc:	6121      	str	r1, [r4, #16]
 8006bce:	b913      	cbnz	r3, 8006bd6 <_printf_float+0x18e>
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	07d0      	lsls	r0, r2, #31
 8006bd4:	d502      	bpl.n	8006bdc <_printf_float+0x194>
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	440b      	add	r3, r1
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bde:	f04f 0900 	mov.w	r9, #0
 8006be2:	e7db      	b.n	8006b9c <_printf_float+0x154>
 8006be4:	b913      	cbnz	r3, 8006bec <_printf_float+0x1a4>
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	07d2      	lsls	r2, r2, #31
 8006bea:	d501      	bpl.n	8006bf0 <_printf_float+0x1a8>
 8006bec:	3302      	adds	r3, #2
 8006bee:	e7f4      	b.n	8006bda <_printf_float+0x192>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e7f2      	b.n	8006bda <_printf_float+0x192>
 8006bf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bfa:	4299      	cmp	r1, r3
 8006bfc:	db05      	blt.n	8006c0a <_printf_float+0x1c2>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	6121      	str	r1, [r4, #16]
 8006c02:	07d8      	lsls	r0, r3, #31
 8006c04:	d5ea      	bpl.n	8006bdc <_printf_float+0x194>
 8006c06:	1c4b      	adds	r3, r1, #1
 8006c08:	e7e7      	b.n	8006bda <_printf_float+0x192>
 8006c0a:	2900      	cmp	r1, #0
 8006c0c:	bfd4      	ite	le
 8006c0e:	f1c1 0202 	rsble	r2, r1, #2
 8006c12:	2201      	movgt	r2, #1
 8006c14:	4413      	add	r3, r2
 8006c16:	e7e0      	b.n	8006bda <_printf_float+0x192>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	055a      	lsls	r2, r3, #21
 8006c1c:	d407      	bmi.n	8006c2e <_printf_float+0x1e6>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	4642      	mov	r2, r8
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d12b      	bne.n	8006c84 <_printf_float+0x23c>
 8006c2c:	e767      	b.n	8006afe <_printf_float+0xb6>
 8006c2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c32:	f240 80dd 	bls.w	8006df0 <_printf_float+0x3a8>
 8006c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f7f9 ff5b 	bl	8000af8 <__aeabi_dcmpeq>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d033      	beq.n	8006cae <_printf_float+0x266>
 8006c46:	4a37      	ldr	r2, [pc, #220]	@ (8006d24 <_printf_float+0x2dc>)
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f af54 	beq.w	8006afe <_printf_float+0xb6>
 8006c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c5a:	4543      	cmp	r3, r8
 8006c5c:	db02      	blt.n	8006c64 <_printf_float+0x21c>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	07d8      	lsls	r0, r3, #31
 8006c62:	d50f      	bpl.n	8006c84 <_printf_float+0x23c>
 8006c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	47b8      	blx	r7
 8006c6e:	3001      	adds	r0, #1
 8006c70:	f43f af45 	beq.w	8006afe <_printf_float+0xb6>
 8006c74:	f04f 0900 	mov.w	r9, #0
 8006c78:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006c7c:	f104 0a1a 	add.w	sl, r4, #26
 8006c80:	45c8      	cmp	r8, r9
 8006c82:	dc09      	bgt.n	8006c98 <_printf_float+0x250>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	079b      	lsls	r3, r3, #30
 8006c88:	f100 8103 	bmi.w	8006e92 <_printf_float+0x44a>
 8006c8c:	68e0      	ldr	r0, [r4, #12]
 8006c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c90:	4298      	cmp	r0, r3
 8006c92:	bfb8      	it	lt
 8006c94:	4618      	movlt	r0, r3
 8006c96:	e734      	b.n	8006b02 <_printf_float+0xba>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	4652      	mov	r2, sl
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f af2b 	beq.w	8006afe <_printf_float+0xb6>
 8006ca8:	f109 0901 	add.w	r9, r9, #1
 8006cac:	e7e8      	b.n	8006c80 <_printf_float+0x238>
 8006cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc39      	bgt.n	8006d28 <_printf_float+0x2e0>
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d24 <_printf_float+0x2dc>)
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4628      	mov	r0, r5
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f43f af1d 	beq.w	8006afe <_printf_float+0xb6>
 8006cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006cc8:	ea59 0303 	orrs.w	r3, r9, r3
 8006ccc:	d102      	bne.n	8006cd4 <_printf_float+0x28c>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	07d9      	lsls	r1, r3, #31
 8006cd2:	d5d7      	bpl.n	8006c84 <_printf_float+0x23c>
 8006cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f43f af0d 	beq.w	8006afe <_printf_float+0xb6>
 8006ce4:	f04f 0a00 	mov.w	sl, #0
 8006ce8:	f104 0b1a 	add.w	fp, r4, #26
 8006cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cee:	425b      	negs	r3, r3
 8006cf0:	4553      	cmp	r3, sl
 8006cf2:	dc01      	bgt.n	8006cf8 <_printf_float+0x2b0>
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	e793      	b.n	8006c20 <_printf_float+0x1d8>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	465a      	mov	r2, fp
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f aefb 	beq.w	8006afe <_printf_float+0xb6>
 8006d08:	f10a 0a01 	add.w	sl, sl, #1
 8006d0c:	e7ee      	b.n	8006cec <_printf_float+0x2a4>
 8006d0e:	bf00      	nop
 8006d10:	7fefffff 	.word	0x7fefffff
 8006d14:	0800b0b4 	.word	0x0800b0b4
 8006d18:	0800b0b8 	.word	0x0800b0b8
 8006d1c:	0800b0bc 	.word	0x0800b0bc
 8006d20:	0800b0c0 	.word	0x0800b0c0
 8006d24:	0800b0c4 	.word	0x0800b0c4
 8006d28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d2e:	4553      	cmp	r3, sl
 8006d30:	bfa8      	it	ge
 8006d32:	4653      	movge	r3, sl
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	4699      	mov	r9, r3
 8006d38:	dc36      	bgt.n	8006da8 <_printf_float+0x360>
 8006d3a:	f04f 0b00 	mov.w	fp, #0
 8006d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d42:	f104 021a 	add.w	r2, r4, #26
 8006d46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d48:	9306      	str	r3, [sp, #24]
 8006d4a:	eba3 0309 	sub.w	r3, r3, r9
 8006d4e:	455b      	cmp	r3, fp
 8006d50:	dc31      	bgt.n	8006db6 <_printf_float+0x36e>
 8006d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d54:	459a      	cmp	sl, r3
 8006d56:	dc3a      	bgt.n	8006dce <_printf_float+0x386>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	07da      	lsls	r2, r3, #31
 8006d5c:	d437      	bmi.n	8006dce <_printf_float+0x386>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d60:	ebaa 0903 	sub.w	r9, sl, r3
 8006d64:	9b06      	ldr	r3, [sp, #24]
 8006d66:	ebaa 0303 	sub.w	r3, sl, r3
 8006d6a:	4599      	cmp	r9, r3
 8006d6c:	bfa8      	it	ge
 8006d6e:	4699      	movge	r9, r3
 8006d70:	f1b9 0f00 	cmp.w	r9, #0
 8006d74:	dc33      	bgt.n	8006dde <_printf_float+0x396>
 8006d76:	f04f 0800 	mov.w	r8, #0
 8006d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d7e:	f104 0b1a 	add.w	fp, r4, #26
 8006d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d84:	ebaa 0303 	sub.w	r3, sl, r3
 8006d88:	eba3 0309 	sub.w	r3, r3, r9
 8006d8c:	4543      	cmp	r3, r8
 8006d8e:	f77f af79 	ble.w	8006c84 <_printf_float+0x23c>
 8006d92:	2301      	movs	r3, #1
 8006d94:	465a      	mov	r2, fp
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f aeae 	beq.w	8006afe <_printf_float+0xb6>
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	e7ec      	b.n	8006d82 <_printf_float+0x33a>
 8006da8:	4642      	mov	r2, r8
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	d1c2      	bne.n	8006d3a <_printf_float+0x2f2>
 8006db4:	e6a3      	b.n	8006afe <_printf_float+0xb6>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	9206      	str	r2, [sp, #24]
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f ae9c 	beq.w	8006afe <_printf_float+0xb6>
 8006dc6:	9a06      	ldr	r2, [sp, #24]
 8006dc8:	f10b 0b01 	add.w	fp, fp, #1
 8006dcc:	e7bb      	b.n	8006d46 <_printf_float+0x2fe>
 8006dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d1c0      	bne.n	8006d5e <_printf_float+0x316>
 8006ddc:	e68f      	b.n	8006afe <_printf_float+0xb6>
 8006dde:	9a06      	ldr	r2, [sp, #24]
 8006de0:	464b      	mov	r3, r9
 8006de2:	4442      	add	r2, r8
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	d1c3      	bne.n	8006d76 <_printf_float+0x32e>
 8006dee:	e686      	b.n	8006afe <_printf_float+0xb6>
 8006df0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006df4:	f1ba 0f01 	cmp.w	sl, #1
 8006df8:	dc01      	bgt.n	8006dfe <_printf_float+0x3b6>
 8006dfa:	07db      	lsls	r3, r3, #31
 8006dfc:	d536      	bpl.n	8006e6c <_printf_float+0x424>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4642      	mov	r2, r8
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f ae78 	beq.w	8006afe <_printf_float+0xb6>
 8006e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f ae70 	beq.w	8006afe <_printf_float+0xb6>
 8006e1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e22:	2200      	movs	r2, #0
 8006e24:	2300      	movs	r3, #0
 8006e26:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006e2a:	f7f9 fe65 	bl	8000af8 <__aeabi_dcmpeq>
 8006e2e:	b9c0      	cbnz	r0, 8006e62 <_printf_float+0x41a>
 8006e30:	4653      	mov	r3, sl
 8006e32:	f108 0201 	add.w	r2, r8, #1
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d10c      	bne.n	8006e5a <_printf_float+0x412>
 8006e40:	e65d      	b.n	8006afe <_printf_float+0xb6>
 8006e42:	2301      	movs	r3, #1
 8006e44:	465a      	mov	r2, fp
 8006e46:	4631      	mov	r1, r6
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b8      	blx	r7
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	f43f ae56 	beq.w	8006afe <_printf_float+0xb6>
 8006e52:	f108 0801 	add.w	r8, r8, #1
 8006e56:	45d0      	cmp	r8, sl
 8006e58:	dbf3      	blt.n	8006e42 <_printf_float+0x3fa>
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e60:	e6df      	b.n	8006c22 <_printf_float+0x1da>
 8006e62:	f04f 0800 	mov.w	r8, #0
 8006e66:	f104 0b1a 	add.w	fp, r4, #26
 8006e6a:	e7f4      	b.n	8006e56 <_printf_float+0x40e>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4642      	mov	r2, r8
 8006e70:	e7e1      	b.n	8006e36 <_printf_float+0x3ee>
 8006e72:	2301      	movs	r3, #1
 8006e74:	464a      	mov	r2, r9
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f ae3e 	beq.w	8006afe <_printf_float+0xb6>
 8006e82:	f108 0801 	add.w	r8, r8, #1
 8006e86:	68e3      	ldr	r3, [r4, #12]
 8006e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e8a:	1a5b      	subs	r3, r3, r1
 8006e8c:	4543      	cmp	r3, r8
 8006e8e:	dcf0      	bgt.n	8006e72 <_printf_float+0x42a>
 8006e90:	e6fc      	b.n	8006c8c <_printf_float+0x244>
 8006e92:	f04f 0800 	mov.w	r8, #0
 8006e96:	f104 0919 	add.w	r9, r4, #25
 8006e9a:	e7f4      	b.n	8006e86 <_printf_float+0x43e>

08006e9c <_printf_common>:
 8006e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	4698      	mov	r8, r3
 8006ea4:	688a      	ldr	r2, [r1, #8]
 8006ea6:	690b      	ldr	r3, [r1, #16]
 8006ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eac:	4293      	cmp	r3, r2
 8006eae:	bfb8      	it	lt
 8006eb0:	4613      	movlt	r3, r2
 8006eb2:	6033      	str	r3, [r6, #0]
 8006eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006eb8:	4607      	mov	r7, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	b10a      	cbz	r2, 8006ec2 <_printf_common+0x26>
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	6033      	str	r3, [r6, #0]
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	0699      	lsls	r1, r3, #26
 8006ec6:	bf42      	ittt	mi
 8006ec8:	6833      	ldrmi	r3, [r6, #0]
 8006eca:	3302      	addmi	r3, #2
 8006ecc:	6033      	strmi	r3, [r6, #0]
 8006ece:	6825      	ldr	r5, [r4, #0]
 8006ed0:	f015 0506 	ands.w	r5, r5, #6
 8006ed4:	d106      	bne.n	8006ee4 <_printf_common+0x48>
 8006ed6:	f104 0a19 	add.w	sl, r4, #25
 8006eda:	68e3      	ldr	r3, [r4, #12]
 8006edc:	6832      	ldr	r2, [r6, #0]
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	dc26      	bgt.n	8006f32 <_printf_common+0x96>
 8006ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ee8:	6822      	ldr	r2, [r4, #0]
 8006eea:	3b00      	subs	r3, #0
 8006eec:	bf18      	it	ne
 8006eee:	2301      	movne	r3, #1
 8006ef0:	0692      	lsls	r2, r2, #26
 8006ef2:	d42b      	bmi.n	8006f4c <_printf_common+0xb0>
 8006ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ef8:	4641      	mov	r1, r8
 8006efa:	4638      	mov	r0, r7
 8006efc:	47c8      	blx	r9
 8006efe:	3001      	adds	r0, #1
 8006f00:	d01e      	beq.n	8006f40 <_printf_common+0xa4>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	6922      	ldr	r2, [r4, #16]
 8006f06:	f003 0306 	and.w	r3, r3, #6
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	bf02      	ittt	eq
 8006f0e:	68e5      	ldreq	r5, [r4, #12]
 8006f10:	6833      	ldreq	r3, [r6, #0]
 8006f12:	1aed      	subeq	r5, r5, r3
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	bf0c      	ite	eq
 8006f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f1c:	2500      	movne	r5, #0
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	bfc4      	itt	gt
 8006f22:	1a9b      	subgt	r3, r3, r2
 8006f24:	18ed      	addgt	r5, r5, r3
 8006f26:	2600      	movs	r6, #0
 8006f28:	341a      	adds	r4, #26
 8006f2a:	42b5      	cmp	r5, r6
 8006f2c:	d11a      	bne.n	8006f64 <_printf_common+0xc8>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	e008      	b.n	8006f44 <_printf_common+0xa8>
 8006f32:	2301      	movs	r3, #1
 8006f34:	4652      	mov	r2, sl
 8006f36:	4641      	mov	r1, r8
 8006f38:	4638      	mov	r0, r7
 8006f3a:	47c8      	blx	r9
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d103      	bne.n	8006f48 <_printf_common+0xac>
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f48:	3501      	adds	r5, #1
 8006f4a:	e7c6      	b.n	8006eda <_printf_common+0x3e>
 8006f4c:	18e1      	adds	r1, r4, r3
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	2030      	movs	r0, #48	@ 0x30
 8006f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f56:	4422      	add	r2, r4
 8006f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f60:	3302      	adds	r3, #2
 8006f62:	e7c7      	b.n	8006ef4 <_printf_common+0x58>
 8006f64:	2301      	movs	r3, #1
 8006f66:	4622      	mov	r2, r4
 8006f68:	4641      	mov	r1, r8
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	47c8      	blx	r9
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d0e6      	beq.n	8006f40 <_printf_common+0xa4>
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7d9      	b.n	8006f2a <_printf_common+0x8e>
	...

08006f78 <_printf_i>:
 8006f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	7e0f      	ldrb	r7, [r1, #24]
 8006f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f80:	2f78      	cmp	r7, #120	@ 0x78
 8006f82:	4691      	mov	r9, r2
 8006f84:	4680      	mov	r8, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	469a      	mov	sl, r3
 8006f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f8e:	d807      	bhi.n	8006fa0 <_printf_i+0x28>
 8006f90:	2f62      	cmp	r7, #98	@ 0x62
 8006f92:	d80a      	bhi.n	8006faa <_printf_i+0x32>
 8006f94:	2f00      	cmp	r7, #0
 8006f96:	f000 80d2 	beq.w	800713e <_printf_i+0x1c6>
 8006f9a:	2f58      	cmp	r7, #88	@ 0x58
 8006f9c:	f000 80b9 	beq.w	8007112 <_printf_i+0x19a>
 8006fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fa8:	e03a      	b.n	8007020 <_printf_i+0xa8>
 8006faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fae:	2b15      	cmp	r3, #21
 8006fb0:	d8f6      	bhi.n	8006fa0 <_printf_i+0x28>
 8006fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fb8 <_printf_i+0x40>)
 8006fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007025 	.word	0x08007025
 8006fc0:	08006fa1 	.word	0x08006fa1
 8006fc4:	08006fa1 	.word	0x08006fa1
 8006fc8:	08006fa1 	.word	0x08006fa1
 8006fcc:	08006fa1 	.word	0x08006fa1
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08006fa1 	.word	0x08006fa1
 8006fd8:	08006fa1 	.word	0x08006fa1
 8006fdc:	08006fa1 	.word	0x08006fa1
 8006fe0:	08006fa1 	.word	0x08006fa1
 8006fe4:	08007125 	.word	0x08007125
 8006fe8:	0800704f 	.word	0x0800704f
 8006fec:	080070df 	.word	0x080070df
 8006ff0:	08006fa1 	.word	0x08006fa1
 8006ff4:	08006fa1 	.word	0x08006fa1
 8006ff8:	08007147 	.word	0x08007147
 8006ffc:	08006fa1 	.word	0x08006fa1
 8007000:	0800704f 	.word	0x0800704f
 8007004:	08006fa1 	.word	0x08006fa1
 8007008:	08006fa1 	.word	0x08006fa1
 800700c:	080070e7 	.word	0x080070e7
 8007010:	6833      	ldr	r3, [r6, #0]
 8007012:	1d1a      	adds	r2, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6032      	str	r2, [r6, #0]
 8007018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800701c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007020:	2301      	movs	r3, #1
 8007022:	e09d      	b.n	8007160 <_printf_i+0x1e8>
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	1d19      	adds	r1, r3, #4
 800702a:	6031      	str	r1, [r6, #0]
 800702c:	0606      	lsls	r6, r0, #24
 800702e:	d501      	bpl.n	8007034 <_printf_i+0xbc>
 8007030:	681d      	ldr	r5, [r3, #0]
 8007032:	e003      	b.n	800703c <_printf_i+0xc4>
 8007034:	0645      	lsls	r5, r0, #25
 8007036:	d5fb      	bpl.n	8007030 <_printf_i+0xb8>
 8007038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800703c:	2d00      	cmp	r5, #0
 800703e:	da03      	bge.n	8007048 <_printf_i+0xd0>
 8007040:	232d      	movs	r3, #45	@ 0x2d
 8007042:	426d      	negs	r5, r5
 8007044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007048:	4859      	ldr	r0, [pc, #356]	@ (80071b0 <_printf_i+0x238>)
 800704a:	230a      	movs	r3, #10
 800704c:	e011      	b.n	8007072 <_printf_i+0xfa>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	0608      	lsls	r0, r1, #24
 8007054:	f853 5b04 	ldr.w	r5, [r3], #4
 8007058:	d402      	bmi.n	8007060 <_printf_i+0xe8>
 800705a:	0649      	lsls	r1, r1, #25
 800705c:	bf48      	it	mi
 800705e:	b2ad      	uxthmi	r5, r5
 8007060:	2f6f      	cmp	r7, #111	@ 0x6f
 8007062:	4853      	ldr	r0, [pc, #332]	@ (80071b0 <_printf_i+0x238>)
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	bf14      	ite	ne
 8007068:	230a      	movne	r3, #10
 800706a:	2308      	moveq	r3, #8
 800706c:	2100      	movs	r1, #0
 800706e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007072:	6866      	ldr	r6, [r4, #4]
 8007074:	60a6      	str	r6, [r4, #8]
 8007076:	2e00      	cmp	r6, #0
 8007078:	bfa2      	ittt	ge
 800707a:	6821      	ldrge	r1, [r4, #0]
 800707c:	f021 0104 	bicge.w	r1, r1, #4
 8007080:	6021      	strge	r1, [r4, #0]
 8007082:	b90d      	cbnz	r5, 8007088 <_printf_i+0x110>
 8007084:	2e00      	cmp	r6, #0
 8007086:	d04b      	beq.n	8007120 <_printf_i+0x1a8>
 8007088:	4616      	mov	r6, r2
 800708a:	fbb5 f1f3 	udiv	r1, r5, r3
 800708e:	fb03 5711 	mls	r7, r3, r1, r5
 8007092:	5dc7      	ldrb	r7, [r0, r7]
 8007094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007098:	462f      	mov	r7, r5
 800709a:	42bb      	cmp	r3, r7
 800709c:	460d      	mov	r5, r1
 800709e:	d9f4      	bls.n	800708a <_printf_i+0x112>
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d10b      	bne.n	80070bc <_printf_i+0x144>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	07df      	lsls	r7, r3, #31
 80070a8:	d508      	bpl.n	80070bc <_printf_i+0x144>
 80070aa:	6923      	ldr	r3, [r4, #16]
 80070ac:	6861      	ldr	r1, [r4, #4]
 80070ae:	4299      	cmp	r1, r3
 80070b0:	bfde      	ittt	le
 80070b2:	2330      	movle	r3, #48	@ 0x30
 80070b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80070bc:	1b92      	subs	r2, r2, r6
 80070be:	6122      	str	r2, [r4, #16]
 80070c0:	f8cd a000 	str.w	sl, [sp]
 80070c4:	464b      	mov	r3, r9
 80070c6:	aa03      	add	r2, sp, #12
 80070c8:	4621      	mov	r1, r4
 80070ca:	4640      	mov	r0, r8
 80070cc:	f7ff fee6 	bl	8006e9c <_printf_common>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d14a      	bne.n	800716a <_printf_i+0x1f2>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070d8:	b004      	add	sp, #16
 80070da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	4833      	ldr	r0, [pc, #204]	@ (80071b4 <_printf_i+0x23c>)
 80070e8:	2778      	movs	r7, #120	@ 0x78
 80070ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	6831      	ldr	r1, [r6, #0]
 80070f2:	061f      	lsls	r7, r3, #24
 80070f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070f8:	d402      	bmi.n	8007100 <_printf_i+0x188>
 80070fa:	065f      	lsls	r7, r3, #25
 80070fc:	bf48      	it	mi
 80070fe:	b2ad      	uxthmi	r5, r5
 8007100:	6031      	str	r1, [r6, #0]
 8007102:	07d9      	lsls	r1, r3, #31
 8007104:	bf44      	itt	mi
 8007106:	f043 0320 	orrmi.w	r3, r3, #32
 800710a:	6023      	strmi	r3, [r4, #0]
 800710c:	b11d      	cbz	r5, 8007116 <_printf_i+0x19e>
 800710e:	2310      	movs	r3, #16
 8007110:	e7ac      	b.n	800706c <_printf_i+0xf4>
 8007112:	4827      	ldr	r0, [pc, #156]	@ (80071b0 <_printf_i+0x238>)
 8007114:	e7e9      	b.n	80070ea <_printf_i+0x172>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	f023 0320 	bic.w	r3, r3, #32
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	e7f6      	b.n	800710e <_printf_i+0x196>
 8007120:	4616      	mov	r6, r2
 8007122:	e7bd      	b.n	80070a0 <_printf_i+0x128>
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	6825      	ldr	r5, [r4, #0]
 8007128:	6961      	ldr	r1, [r4, #20]
 800712a:	1d18      	adds	r0, r3, #4
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	062e      	lsls	r6, r5, #24
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	d501      	bpl.n	8007138 <_printf_i+0x1c0>
 8007134:	6019      	str	r1, [r3, #0]
 8007136:	e002      	b.n	800713e <_printf_i+0x1c6>
 8007138:	0668      	lsls	r0, r5, #25
 800713a:	d5fb      	bpl.n	8007134 <_printf_i+0x1bc>
 800713c:	8019      	strh	r1, [r3, #0]
 800713e:	2300      	movs	r3, #0
 8007140:	6123      	str	r3, [r4, #16]
 8007142:	4616      	mov	r6, r2
 8007144:	e7bc      	b.n	80070c0 <_printf_i+0x148>
 8007146:	6833      	ldr	r3, [r6, #0]
 8007148:	1d1a      	adds	r2, r3, #4
 800714a:	6032      	str	r2, [r6, #0]
 800714c:	681e      	ldr	r6, [r3, #0]
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	2100      	movs	r1, #0
 8007152:	4630      	mov	r0, r6
 8007154:	f7f9 f854 	bl	8000200 <memchr>
 8007158:	b108      	cbz	r0, 800715e <_printf_i+0x1e6>
 800715a:	1b80      	subs	r0, r0, r6
 800715c:	6060      	str	r0, [r4, #4]
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	2300      	movs	r3, #0
 8007164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007168:	e7aa      	b.n	80070c0 <_printf_i+0x148>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	4632      	mov	r2, r6
 800716e:	4649      	mov	r1, r9
 8007170:	4640      	mov	r0, r8
 8007172:	47d0      	blx	sl
 8007174:	3001      	adds	r0, #1
 8007176:	d0ad      	beq.n	80070d4 <_printf_i+0x15c>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	079b      	lsls	r3, r3, #30
 800717c:	d413      	bmi.n	80071a6 <_printf_i+0x22e>
 800717e:	68e0      	ldr	r0, [r4, #12]
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	4298      	cmp	r0, r3
 8007184:	bfb8      	it	lt
 8007186:	4618      	movlt	r0, r3
 8007188:	e7a6      	b.n	80070d8 <_printf_i+0x160>
 800718a:	2301      	movs	r3, #1
 800718c:	4632      	mov	r2, r6
 800718e:	4649      	mov	r1, r9
 8007190:	4640      	mov	r0, r8
 8007192:	47d0      	blx	sl
 8007194:	3001      	adds	r0, #1
 8007196:	d09d      	beq.n	80070d4 <_printf_i+0x15c>
 8007198:	3501      	adds	r5, #1
 800719a:	68e3      	ldr	r3, [r4, #12]
 800719c:	9903      	ldr	r1, [sp, #12]
 800719e:	1a5b      	subs	r3, r3, r1
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dcf2      	bgt.n	800718a <_printf_i+0x212>
 80071a4:	e7eb      	b.n	800717e <_printf_i+0x206>
 80071a6:	2500      	movs	r5, #0
 80071a8:	f104 0619 	add.w	r6, r4, #25
 80071ac:	e7f5      	b.n	800719a <_printf_i+0x222>
 80071ae:	bf00      	nop
 80071b0:	0800b0c6 	.word	0x0800b0c6
 80071b4:	0800b0d7 	.word	0x0800b0d7

080071b8 <_scanf_float>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	b087      	sub	sp, #28
 80071be:	4617      	mov	r7, r2
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	688b      	ldr	r3, [r1, #8]
 80071c4:	1e5a      	subs	r2, r3, #1
 80071c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80071ca:	bf81      	itttt	hi
 80071cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80071d0:	eb03 0b05 	addhi.w	fp, r3, r5
 80071d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80071d8:	608b      	strhi	r3, [r1, #8]
 80071da:	680b      	ldr	r3, [r1, #0]
 80071dc:	460a      	mov	r2, r1
 80071de:	f04f 0500 	mov.w	r5, #0
 80071e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80071e6:	f842 3b1c 	str.w	r3, [r2], #28
 80071ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071ee:	4680      	mov	r8, r0
 80071f0:	460c      	mov	r4, r1
 80071f2:	bf98      	it	ls
 80071f4:	f04f 0b00 	movls.w	fp, #0
 80071f8:	9201      	str	r2, [sp, #4]
 80071fa:	4616      	mov	r6, r2
 80071fc:	46aa      	mov	sl, r5
 80071fe:	46a9      	mov	r9, r5
 8007200:	9502      	str	r5, [sp, #8]
 8007202:	68a2      	ldr	r2, [r4, #8]
 8007204:	b152      	cbz	r2, 800721c <_scanf_float+0x64>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b4e      	cmp	r3, #78	@ 0x4e
 800720c:	d864      	bhi.n	80072d8 <_scanf_float+0x120>
 800720e:	2b40      	cmp	r3, #64	@ 0x40
 8007210:	d83c      	bhi.n	800728c <_scanf_float+0xd4>
 8007212:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007216:	b2c8      	uxtb	r0, r1
 8007218:	280e      	cmp	r0, #14
 800721a:	d93a      	bls.n	8007292 <_scanf_float+0xda>
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	d003      	beq.n	800722a <_scanf_float+0x72>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800722e:	f1ba 0f01 	cmp.w	sl, #1
 8007232:	f200 8117 	bhi.w	8007464 <_scanf_float+0x2ac>
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	429e      	cmp	r6, r3
 800723a:	f200 8108 	bhi.w	800744e <_scanf_float+0x296>
 800723e:	2001      	movs	r0, #1
 8007240:	b007      	add	sp, #28
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800724a:	2a0d      	cmp	r2, #13
 800724c:	d8e6      	bhi.n	800721c <_scanf_float+0x64>
 800724e:	a101      	add	r1, pc, #4	@ (adr r1, 8007254 <_scanf_float+0x9c>)
 8007250:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007254:	0800739b 	.word	0x0800739b
 8007258:	0800721d 	.word	0x0800721d
 800725c:	0800721d 	.word	0x0800721d
 8007260:	0800721d 	.word	0x0800721d
 8007264:	080073fb 	.word	0x080073fb
 8007268:	080073d3 	.word	0x080073d3
 800726c:	0800721d 	.word	0x0800721d
 8007270:	0800721d 	.word	0x0800721d
 8007274:	080073a9 	.word	0x080073a9
 8007278:	0800721d 	.word	0x0800721d
 800727c:	0800721d 	.word	0x0800721d
 8007280:	0800721d 	.word	0x0800721d
 8007284:	0800721d 	.word	0x0800721d
 8007288:	08007361 	.word	0x08007361
 800728c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007290:	e7db      	b.n	800724a <_scanf_float+0x92>
 8007292:	290e      	cmp	r1, #14
 8007294:	d8c2      	bhi.n	800721c <_scanf_float+0x64>
 8007296:	a001      	add	r0, pc, #4	@ (adr r0, 800729c <_scanf_float+0xe4>)
 8007298:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800729c:	08007351 	.word	0x08007351
 80072a0:	0800721d 	.word	0x0800721d
 80072a4:	08007351 	.word	0x08007351
 80072a8:	080073e7 	.word	0x080073e7
 80072ac:	0800721d 	.word	0x0800721d
 80072b0:	080072f9 	.word	0x080072f9
 80072b4:	08007337 	.word	0x08007337
 80072b8:	08007337 	.word	0x08007337
 80072bc:	08007337 	.word	0x08007337
 80072c0:	08007337 	.word	0x08007337
 80072c4:	08007337 	.word	0x08007337
 80072c8:	08007337 	.word	0x08007337
 80072cc:	08007337 	.word	0x08007337
 80072d0:	08007337 	.word	0x08007337
 80072d4:	08007337 	.word	0x08007337
 80072d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80072da:	d809      	bhi.n	80072f0 <_scanf_float+0x138>
 80072dc:	2b60      	cmp	r3, #96	@ 0x60
 80072de:	d8b2      	bhi.n	8007246 <_scanf_float+0x8e>
 80072e0:	2b54      	cmp	r3, #84	@ 0x54
 80072e2:	d07b      	beq.n	80073dc <_scanf_float+0x224>
 80072e4:	2b59      	cmp	r3, #89	@ 0x59
 80072e6:	d199      	bne.n	800721c <_scanf_float+0x64>
 80072e8:	2d07      	cmp	r5, #7
 80072ea:	d197      	bne.n	800721c <_scanf_float+0x64>
 80072ec:	2508      	movs	r5, #8
 80072ee:	e02c      	b.n	800734a <_scanf_float+0x192>
 80072f0:	2b74      	cmp	r3, #116	@ 0x74
 80072f2:	d073      	beq.n	80073dc <_scanf_float+0x224>
 80072f4:	2b79      	cmp	r3, #121	@ 0x79
 80072f6:	e7f6      	b.n	80072e6 <_scanf_float+0x12e>
 80072f8:	6821      	ldr	r1, [r4, #0]
 80072fa:	05c8      	lsls	r0, r1, #23
 80072fc:	d51b      	bpl.n	8007336 <_scanf_float+0x17e>
 80072fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007302:	6021      	str	r1, [r4, #0]
 8007304:	f109 0901 	add.w	r9, r9, #1
 8007308:	f1bb 0f00 	cmp.w	fp, #0
 800730c:	d003      	beq.n	8007316 <_scanf_float+0x15e>
 800730e:	3201      	adds	r2, #1
 8007310:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007314:	60a2      	str	r2, [r4, #8]
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	3b01      	subs	r3, #1
 800731a:	60a3      	str	r3, [r4, #8]
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	3301      	adds	r3, #1
 8007320:	6123      	str	r3, [r4, #16]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	607b      	str	r3, [r7, #4]
 800732a:	f340 8087 	ble.w	800743c <_scanf_float+0x284>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	e765      	b.n	8007202 <_scanf_float+0x4a>
 8007336:	eb1a 0105 	adds.w	r1, sl, r5
 800733a:	f47f af6f 	bne.w	800721c <_scanf_float+0x64>
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007344:	6022      	str	r2, [r4, #0]
 8007346:	460d      	mov	r5, r1
 8007348:	468a      	mov	sl, r1
 800734a:	f806 3b01 	strb.w	r3, [r6], #1
 800734e:	e7e2      	b.n	8007316 <_scanf_float+0x15e>
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	0610      	lsls	r0, r2, #24
 8007354:	f57f af62 	bpl.w	800721c <_scanf_float+0x64>
 8007358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	e7f4      	b.n	800734a <_scanf_float+0x192>
 8007360:	f1ba 0f00 	cmp.w	sl, #0
 8007364:	d10e      	bne.n	8007384 <_scanf_float+0x1cc>
 8007366:	f1b9 0f00 	cmp.w	r9, #0
 800736a:	d10e      	bne.n	800738a <_scanf_float+0x1d2>
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007372:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007376:	d108      	bne.n	800738a <_scanf_float+0x1d2>
 8007378:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800737c:	6022      	str	r2, [r4, #0]
 800737e:	f04f 0a01 	mov.w	sl, #1
 8007382:	e7e2      	b.n	800734a <_scanf_float+0x192>
 8007384:	f1ba 0f02 	cmp.w	sl, #2
 8007388:	d055      	beq.n	8007436 <_scanf_float+0x27e>
 800738a:	2d01      	cmp	r5, #1
 800738c:	d002      	beq.n	8007394 <_scanf_float+0x1dc>
 800738e:	2d04      	cmp	r5, #4
 8007390:	f47f af44 	bne.w	800721c <_scanf_float+0x64>
 8007394:	3501      	adds	r5, #1
 8007396:	b2ed      	uxtb	r5, r5
 8007398:	e7d7      	b.n	800734a <_scanf_float+0x192>
 800739a:	f1ba 0f01 	cmp.w	sl, #1
 800739e:	f47f af3d 	bne.w	800721c <_scanf_float+0x64>
 80073a2:	f04f 0a02 	mov.w	sl, #2
 80073a6:	e7d0      	b.n	800734a <_scanf_float+0x192>
 80073a8:	b97d      	cbnz	r5, 80073ca <_scanf_float+0x212>
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	f47f af38 	bne.w	8007222 <_scanf_float+0x6a>
 80073b2:	6822      	ldr	r2, [r4, #0]
 80073b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073bc:	f040 8108 	bne.w	80075d0 <_scanf_float+0x418>
 80073c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073c4:	6022      	str	r2, [r4, #0]
 80073c6:	2501      	movs	r5, #1
 80073c8:	e7bf      	b.n	800734a <_scanf_float+0x192>
 80073ca:	2d03      	cmp	r5, #3
 80073cc:	d0e2      	beq.n	8007394 <_scanf_float+0x1dc>
 80073ce:	2d05      	cmp	r5, #5
 80073d0:	e7de      	b.n	8007390 <_scanf_float+0x1d8>
 80073d2:	2d02      	cmp	r5, #2
 80073d4:	f47f af22 	bne.w	800721c <_scanf_float+0x64>
 80073d8:	2503      	movs	r5, #3
 80073da:	e7b6      	b.n	800734a <_scanf_float+0x192>
 80073dc:	2d06      	cmp	r5, #6
 80073de:	f47f af1d 	bne.w	800721c <_scanf_float+0x64>
 80073e2:	2507      	movs	r5, #7
 80073e4:	e7b1      	b.n	800734a <_scanf_float+0x192>
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	0591      	lsls	r1, r2, #22
 80073ea:	f57f af17 	bpl.w	800721c <_scanf_float+0x64>
 80073ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80073f8:	e7a7      	b.n	800734a <_scanf_float+0x192>
 80073fa:	6822      	ldr	r2, [r4, #0]
 80073fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007400:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007404:	d006      	beq.n	8007414 <_scanf_float+0x25c>
 8007406:	0550      	lsls	r0, r2, #21
 8007408:	f57f af08 	bpl.w	800721c <_scanf_float+0x64>
 800740c:	f1b9 0f00 	cmp.w	r9, #0
 8007410:	f000 80de 	beq.w	80075d0 <_scanf_float+0x418>
 8007414:	0591      	lsls	r1, r2, #22
 8007416:	bf58      	it	pl
 8007418:	9902      	ldrpl	r1, [sp, #8]
 800741a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800741e:	bf58      	it	pl
 8007420:	eba9 0101 	subpl.w	r1, r9, r1
 8007424:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007428:	bf58      	it	pl
 800742a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800742e:	6022      	str	r2, [r4, #0]
 8007430:	f04f 0900 	mov.w	r9, #0
 8007434:	e789      	b.n	800734a <_scanf_float+0x192>
 8007436:	f04f 0a03 	mov.w	sl, #3
 800743a:	e786      	b.n	800734a <_scanf_float+0x192>
 800743c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007440:	4639      	mov	r1, r7
 8007442:	4640      	mov	r0, r8
 8007444:	4798      	blx	r3
 8007446:	2800      	cmp	r0, #0
 8007448:	f43f aedb 	beq.w	8007202 <_scanf_float+0x4a>
 800744c:	e6e6      	b.n	800721c <_scanf_float+0x64>
 800744e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007452:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007456:	463a      	mov	r2, r7
 8007458:	4640      	mov	r0, r8
 800745a:	4798      	blx	r3
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	3b01      	subs	r3, #1
 8007460:	6123      	str	r3, [r4, #16]
 8007462:	e6e8      	b.n	8007236 <_scanf_float+0x7e>
 8007464:	1e6b      	subs	r3, r5, #1
 8007466:	2b06      	cmp	r3, #6
 8007468:	d824      	bhi.n	80074b4 <_scanf_float+0x2fc>
 800746a:	2d02      	cmp	r5, #2
 800746c:	d836      	bhi.n	80074dc <_scanf_float+0x324>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	429e      	cmp	r6, r3
 8007472:	f67f aee4 	bls.w	800723e <_scanf_float+0x86>
 8007476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800747a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800747e:	463a      	mov	r2, r7
 8007480:	4640      	mov	r0, r8
 8007482:	4798      	blx	r3
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	3b01      	subs	r3, #1
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	e7f0      	b.n	800746e <_scanf_float+0x2b6>
 800748c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007490:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007494:	463a      	mov	r2, r7
 8007496:	4640      	mov	r0, r8
 8007498:	4798      	blx	r3
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	3b01      	subs	r3, #1
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80074a4:	fa5f fa8a 	uxtb.w	sl, sl
 80074a8:	f1ba 0f02 	cmp.w	sl, #2
 80074ac:	d1ee      	bne.n	800748c <_scanf_float+0x2d4>
 80074ae:	3d03      	subs	r5, #3
 80074b0:	b2ed      	uxtb	r5, r5
 80074b2:	1b76      	subs	r6, r6, r5
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	05da      	lsls	r2, r3, #23
 80074b8:	d530      	bpl.n	800751c <_scanf_float+0x364>
 80074ba:	055b      	lsls	r3, r3, #21
 80074bc:	d511      	bpl.n	80074e2 <_scanf_float+0x32a>
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	429e      	cmp	r6, r3
 80074c2:	f67f aebc 	bls.w	800723e <_scanf_float+0x86>
 80074c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074ce:	463a      	mov	r2, r7
 80074d0:	4640      	mov	r0, r8
 80074d2:	4798      	blx	r3
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	e7f0      	b.n	80074be <_scanf_float+0x306>
 80074dc:	46aa      	mov	sl, r5
 80074de:	46b3      	mov	fp, r6
 80074e0:	e7de      	b.n	80074a0 <_scanf_float+0x2e8>
 80074e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	2965      	cmp	r1, #101	@ 0x65
 80074ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80074ee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	d00c      	beq.n	8007510 <_scanf_float+0x358>
 80074f6:	2945      	cmp	r1, #69	@ 0x45
 80074f8:	d00a      	beq.n	8007510 <_scanf_float+0x358>
 80074fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074fe:	463a      	mov	r2, r7
 8007500:	4640      	mov	r0, r8
 8007502:	4798      	blx	r3
 8007504:	6923      	ldr	r3, [r4, #16]
 8007506:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800750a:	3b01      	subs	r3, #1
 800750c:	1eb5      	subs	r5, r6, #2
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007514:	463a      	mov	r2, r7
 8007516:	4640      	mov	r0, r8
 8007518:	4798      	blx	r3
 800751a:	462e      	mov	r6, r5
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	f012 0210 	ands.w	r2, r2, #16
 8007522:	d001      	beq.n	8007528 <_scanf_float+0x370>
 8007524:	2000      	movs	r0, #0
 8007526:	e68b      	b.n	8007240 <_scanf_float+0x88>
 8007528:	7032      	strb	r2, [r6, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007534:	d11c      	bne.n	8007570 <_scanf_float+0x3b8>
 8007536:	9b02      	ldr	r3, [sp, #8]
 8007538:	454b      	cmp	r3, r9
 800753a:	eba3 0209 	sub.w	r2, r3, r9
 800753e:	d123      	bne.n	8007588 <_scanf_float+0x3d0>
 8007540:	9901      	ldr	r1, [sp, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	4640      	mov	r0, r8
 8007546:	f000 ff13 	bl	8008370 <_strtod_r>
 800754a:	9b03      	ldr	r3, [sp, #12]
 800754c:	6821      	ldr	r1, [r4, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f011 0f02 	tst.w	r1, #2
 8007554:	ec57 6b10 	vmov	r6, r7, d0
 8007558:	f103 0204 	add.w	r2, r3, #4
 800755c:	d01f      	beq.n	800759e <_scanf_float+0x3e6>
 800755e:	9903      	ldr	r1, [sp, #12]
 8007560:	600a      	str	r2, [r1, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	e9c3 6700 	strd	r6, r7, [r3]
 8007568:	68e3      	ldr	r3, [r4, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60e3      	str	r3, [r4, #12]
 800756e:	e7d9      	b.n	8007524 <_scanf_float+0x36c>
 8007570:	9b04      	ldr	r3, [sp, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0e4      	beq.n	8007540 <_scanf_float+0x388>
 8007576:	9905      	ldr	r1, [sp, #20]
 8007578:	230a      	movs	r3, #10
 800757a:	3101      	adds	r1, #1
 800757c:	4640      	mov	r0, r8
 800757e:	f000 ff77 	bl	8008470 <_strtol_r>
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	9e05      	ldr	r6, [sp, #20]
 8007586:	1ac2      	subs	r2, r0, r3
 8007588:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800758c:	429e      	cmp	r6, r3
 800758e:	bf28      	it	cs
 8007590:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007594:	4910      	ldr	r1, [pc, #64]	@ (80075d8 <_scanf_float+0x420>)
 8007596:	4630      	mov	r0, r6
 8007598:	f000 f822 	bl	80075e0 <siprintf>
 800759c:	e7d0      	b.n	8007540 <_scanf_float+0x388>
 800759e:	f011 0f04 	tst.w	r1, #4
 80075a2:	9903      	ldr	r1, [sp, #12]
 80075a4:	600a      	str	r2, [r1, #0]
 80075a6:	d1dc      	bne.n	8007562 <_scanf_float+0x3aa>
 80075a8:	681d      	ldr	r5, [r3, #0]
 80075aa:	4632      	mov	r2, r6
 80075ac:	463b      	mov	r3, r7
 80075ae:	4630      	mov	r0, r6
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f9 fad3 	bl	8000b5c <__aeabi_dcmpun>
 80075b6:	b128      	cbz	r0, 80075c4 <_scanf_float+0x40c>
 80075b8:	4808      	ldr	r0, [pc, #32]	@ (80075dc <_scanf_float+0x424>)
 80075ba:	f000 ffdd 	bl	8008578 <nanf>
 80075be:	ed85 0a00 	vstr	s0, [r5]
 80075c2:	e7d1      	b.n	8007568 <_scanf_float+0x3b0>
 80075c4:	4630      	mov	r0, r6
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f9 fb26 	bl	8000c18 <__aeabi_d2f>
 80075cc:	6028      	str	r0, [r5, #0]
 80075ce:	e7cb      	b.n	8007568 <_scanf_float+0x3b0>
 80075d0:	f04f 0900 	mov.w	r9, #0
 80075d4:	e629      	b.n	800722a <_scanf_float+0x72>
 80075d6:	bf00      	nop
 80075d8:	0800b0e8 	.word	0x0800b0e8
 80075dc:	0800b4db 	.word	0x0800b4db

080075e0 <siprintf>:
 80075e0:	b40e      	push	{r1, r2, r3}
 80075e2:	b500      	push	{lr}
 80075e4:	b09c      	sub	sp, #112	@ 0x70
 80075e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80075e8:	9002      	str	r0, [sp, #8]
 80075ea:	9006      	str	r0, [sp, #24]
 80075ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075f0:	4809      	ldr	r0, [pc, #36]	@ (8007618 <siprintf+0x38>)
 80075f2:	9107      	str	r1, [sp, #28]
 80075f4:	9104      	str	r1, [sp, #16]
 80075f6:	4909      	ldr	r1, [pc, #36]	@ (800761c <siprintf+0x3c>)
 80075f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fc:	9105      	str	r1, [sp, #20]
 80075fe:	6800      	ldr	r0, [r0, #0]
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	a902      	add	r1, sp, #8
 8007604:	f002 f9a0 	bl	8009948 <_svfiprintf_r>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	b01c      	add	sp, #112	@ 0x70
 8007610:	f85d eb04 	ldr.w	lr, [sp], #4
 8007614:	b003      	add	sp, #12
 8007616:	4770      	bx	lr
 8007618:	20000184 	.word	0x20000184
 800761c:	ffff0208 	.word	0xffff0208

08007620 <std>:
 8007620:	2300      	movs	r3, #0
 8007622:	b510      	push	{r4, lr}
 8007624:	4604      	mov	r4, r0
 8007626:	e9c0 3300 	strd	r3, r3, [r0]
 800762a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800762e:	6083      	str	r3, [r0, #8]
 8007630:	8181      	strh	r1, [r0, #12]
 8007632:	6643      	str	r3, [r0, #100]	@ 0x64
 8007634:	81c2      	strh	r2, [r0, #14]
 8007636:	6183      	str	r3, [r0, #24]
 8007638:	4619      	mov	r1, r3
 800763a:	2208      	movs	r2, #8
 800763c:	305c      	adds	r0, #92	@ 0x5c
 800763e:	f000 ff49 	bl	80084d4 <memset>
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <std+0x58>)
 8007644:	6263      	str	r3, [r4, #36]	@ 0x24
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <std+0x5c>)
 8007648:	62a3      	str	r3, [r4, #40]	@ 0x28
 800764a:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <std+0x60>)
 800764c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <std+0x64>)
 8007650:	6323      	str	r3, [r4, #48]	@ 0x30
 8007652:	4b0d      	ldr	r3, [pc, #52]	@ (8007688 <std+0x68>)
 8007654:	6224      	str	r4, [r4, #32]
 8007656:	429c      	cmp	r4, r3
 8007658:	d006      	beq.n	8007668 <std+0x48>
 800765a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800765e:	4294      	cmp	r4, r2
 8007660:	d002      	beq.n	8007668 <std+0x48>
 8007662:	33d0      	adds	r3, #208	@ 0xd0
 8007664:	429c      	cmp	r4, r3
 8007666:	d105      	bne.n	8007674 <std+0x54>
 8007668:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f000 bf66 	b.w	8008540 <__retarget_lock_init_recursive>
 8007674:	bd10      	pop	{r4, pc}
 8007676:	bf00      	nop
 8007678:	0800a78d 	.word	0x0800a78d
 800767c:	0800a7af 	.word	0x0800a7af
 8007680:	0800a7e7 	.word	0x0800a7e7
 8007684:	0800a80b 	.word	0x0800a80b
 8007688:	200002f8 	.word	0x200002f8

0800768c <stdio_exit_handler>:
 800768c:	4a02      	ldr	r2, [pc, #8]	@ (8007698 <stdio_exit_handler+0xc>)
 800768e:	4903      	ldr	r1, [pc, #12]	@ (800769c <stdio_exit_handler+0x10>)
 8007690:	4803      	ldr	r0, [pc, #12]	@ (80076a0 <stdio_exit_handler+0x14>)
 8007692:	f000 beef 	b.w	8008474 <_fwalk_sglue>
 8007696:	bf00      	nop
 8007698:	2000000c 	.word	0x2000000c
 800769c:	08009dc1 	.word	0x08009dc1
 80076a0:	20000188 	.word	0x20000188

080076a4 <cleanup_stdio>:
 80076a4:	6841      	ldr	r1, [r0, #4]
 80076a6:	4b0c      	ldr	r3, [pc, #48]	@ (80076d8 <cleanup_stdio+0x34>)
 80076a8:	4299      	cmp	r1, r3
 80076aa:	b510      	push	{r4, lr}
 80076ac:	4604      	mov	r4, r0
 80076ae:	d001      	beq.n	80076b4 <cleanup_stdio+0x10>
 80076b0:	f002 fb86 	bl	8009dc0 <_fflush_r>
 80076b4:	68a1      	ldr	r1, [r4, #8]
 80076b6:	4b09      	ldr	r3, [pc, #36]	@ (80076dc <cleanup_stdio+0x38>)
 80076b8:	4299      	cmp	r1, r3
 80076ba:	d002      	beq.n	80076c2 <cleanup_stdio+0x1e>
 80076bc:	4620      	mov	r0, r4
 80076be:	f002 fb7f 	bl	8009dc0 <_fflush_r>
 80076c2:	68e1      	ldr	r1, [r4, #12]
 80076c4:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <cleanup_stdio+0x3c>)
 80076c6:	4299      	cmp	r1, r3
 80076c8:	d004      	beq.n	80076d4 <cleanup_stdio+0x30>
 80076ca:	4620      	mov	r0, r4
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d0:	f002 bb76 	b.w	8009dc0 <_fflush_r>
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	bf00      	nop
 80076d8:	200002f8 	.word	0x200002f8
 80076dc:	20000360 	.word	0x20000360
 80076e0:	200003c8 	.word	0x200003c8

080076e4 <global_stdio_init.part.0>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007714 <global_stdio_init.part.0+0x30>)
 80076e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007718 <global_stdio_init.part.0+0x34>)
 80076ea:	4a0c      	ldr	r2, [pc, #48]	@ (800771c <global_stdio_init.part.0+0x38>)
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	4620      	mov	r0, r4
 80076f0:	2200      	movs	r2, #0
 80076f2:	2104      	movs	r1, #4
 80076f4:	f7ff ff94 	bl	8007620 <std>
 80076f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076fc:	2201      	movs	r2, #1
 80076fe:	2109      	movs	r1, #9
 8007700:	f7ff ff8e 	bl	8007620 <std>
 8007704:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007708:	2202      	movs	r2, #2
 800770a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800770e:	2112      	movs	r1, #18
 8007710:	f7ff bf86 	b.w	8007620 <std>
 8007714:	20000430 	.word	0x20000430
 8007718:	200002f8 	.word	0x200002f8
 800771c:	0800768d 	.word	0x0800768d

08007720 <__sfp_lock_acquire>:
 8007720:	4801      	ldr	r0, [pc, #4]	@ (8007728 <__sfp_lock_acquire+0x8>)
 8007722:	f000 bf0e 	b.w	8008542 <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	20000435 	.word	0x20000435

0800772c <__sfp_lock_release>:
 800772c:	4801      	ldr	r0, [pc, #4]	@ (8007734 <__sfp_lock_release+0x8>)
 800772e:	f000 bf09 	b.w	8008544 <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	20000435 	.word	0x20000435

08007738 <__sinit>:
 8007738:	b510      	push	{r4, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	f7ff fff0 	bl	8007720 <__sfp_lock_acquire>
 8007740:	6a23      	ldr	r3, [r4, #32]
 8007742:	b11b      	cbz	r3, 800774c <__sinit+0x14>
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	f7ff bff0 	b.w	800772c <__sfp_lock_release>
 800774c:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <__sinit+0x28>)
 800774e:	6223      	str	r3, [r4, #32]
 8007750:	4b04      	ldr	r3, [pc, #16]	@ (8007764 <__sinit+0x2c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f5      	bne.n	8007744 <__sinit+0xc>
 8007758:	f7ff ffc4 	bl	80076e4 <global_stdio_init.part.0>
 800775c:	e7f2      	b.n	8007744 <__sinit+0xc>
 800775e:	bf00      	nop
 8007760:	080076a5 	.word	0x080076a5
 8007764:	20000430 	.word	0x20000430

08007768 <sulp>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	ec45 4b10 	vmov	d0, r4, r5
 8007772:	4616      	mov	r6, r2
 8007774:	f002 fecc 	bl	800a510 <__ulp>
 8007778:	ec51 0b10 	vmov	r0, r1, d0
 800777c:	b17e      	cbz	r6, 800779e <sulp+0x36>
 800777e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007782:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd09      	ble.n	800779e <sulp+0x36>
 800778a:	051b      	lsls	r3, r3, #20
 800778c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007790:	2400      	movs	r4, #0
 8007792:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007796:	4622      	mov	r2, r4
 8007798:	462b      	mov	r3, r5
 800779a:	f7f8 ff45 	bl	8000628 <__aeabi_dmul>
 800779e:	ec41 0b10 	vmov	d0, r0, r1
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	0000      	movs	r0, r0
	...

080077a8 <_strtod_l>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	b09f      	sub	sp, #124	@ 0x7c
 80077ae:	460c      	mov	r4, r1
 80077b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077b2:	2200      	movs	r2, #0
 80077b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80077b6:	9005      	str	r0, [sp, #20]
 80077b8:	f04f 0a00 	mov.w	sl, #0
 80077bc:	f04f 0b00 	mov.w	fp, #0
 80077c0:	460a      	mov	r2, r1
 80077c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077c4:	7811      	ldrb	r1, [r2, #0]
 80077c6:	292b      	cmp	r1, #43	@ 0x2b
 80077c8:	d04a      	beq.n	8007860 <_strtod_l+0xb8>
 80077ca:	d838      	bhi.n	800783e <_strtod_l+0x96>
 80077cc:	290d      	cmp	r1, #13
 80077ce:	d832      	bhi.n	8007836 <_strtod_l+0x8e>
 80077d0:	2908      	cmp	r1, #8
 80077d2:	d832      	bhi.n	800783a <_strtod_l+0x92>
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d03b      	beq.n	8007850 <_strtod_l+0xa8>
 80077d8:	2200      	movs	r2, #0
 80077da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80077de:	782a      	ldrb	r2, [r5, #0]
 80077e0:	2a30      	cmp	r2, #48	@ 0x30
 80077e2:	f040 80b3 	bne.w	800794c <_strtod_l+0x1a4>
 80077e6:	786a      	ldrb	r2, [r5, #1]
 80077e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077ec:	2a58      	cmp	r2, #88	@ 0x58
 80077ee:	d16e      	bne.n	80078ce <_strtod_l+0x126>
 80077f0:	9302      	str	r3, [sp, #8]
 80077f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4a8e      	ldr	r2, [pc, #568]	@ (8007a34 <_strtod_l+0x28c>)
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007800:	a919      	add	r1, sp, #100	@ 0x64
 8007802:	f001 fd75 	bl	80092f0 <__gethex>
 8007806:	f010 060f 	ands.w	r6, r0, #15
 800780a:	4604      	mov	r4, r0
 800780c:	d005      	beq.n	800781a <_strtod_l+0x72>
 800780e:	2e06      	cmp	r6, #6
 8007810:	d128      	bne.n	8007864 <_strtod_l+0xbc>
 8007812:	3501      	adds	r5, #1
 8007814:	2300      	movs	r3, #0
 8007816:	9519      	str	r5, [sp, #100]	@ 0x64
 8007818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800781a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 858e 	bne.w	800833e <_strtod_l+0xb96>
 8007822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007824:	b1cb      	cbz	r3, 800785a <_strtod_l+0xb2>
 8007826:	4652      	mov	r2, sl
 8007828:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800782c:	ec43 2b10 	vmov	d0, r2, r3
 8007830:	b01f      	add	sp, #124	@ 0x7c
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	2920      	cmp	r1, #32
 8007838:	d1ce      	bne.n	80077d8 <_strtod_l+0x30>
 800783a:	3201      	adds	r2, #1
 800783c:	e7c1      	b.n	80077c2 <_strtod_l+0x1a>
 800783e:	292d      	cmp	r1, #45	@ 0x2d
 8007840:	d1ca      	bne.n	80077d8 <_strtod_l+0x30>
 8007842:	2101      	movs	r1, #1
 8007844:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007846:	1c51      	adds	r1, r2, #1
 8007848:	9119      	str	r1, [sp, #100]	@ 0x64
 800784a:	7852      	ldrb	r2, [r2, #1]
 800784c:	2a00      	cmp	r2, #0
 800784e:	d1c5      	bne.n	80077dc <_strtod_l+0x34>
 8007850:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007852:	9419      	str	r4, [sp, #100]	@ 0x64
 8007854:	2b00      	cmp	r3, #0
 8007856:	f040 8570 	bne.w	800833a <_strtod_l+0xb92>
 800785a:	4652      	mov	r2, sl
 800785c:	465b      	mov	r3, fp
 800785e:	e7e5      	b.n	800782c <_strtod_l+0x84>
 8007860:	2100      	movs	r1, #0
 8007862:	e7ef      	b.n	8007844 <_strtod_l+0x9c>
 8007864:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007866:	b13a      	cbz	r2, 8007878 <_strtod_l+0xd0>
 8007868:	2135      	movs	r1, #53	@ 0x35
 800786a:	a81c      	add	r0, sp, #112	@ 0x70
 800786c:	f002 ff4a 	bl	800a704 <__copybits>
 8007870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007872:	9805      	ldr	r0, [sp, #20]
 8007874:	f002 fb18 	bl	8009ea8 <_Bfree>
 8007878:	3e01      	subs	r6, #1
 800787a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800787c:	2e04      	cmp	r6, #4
 800787e:	d806      	bhi.n	800788e <_strtod_l+0xe6>
 8007880:	e8df f006 	tbb	[pc, r6]
 8007884:	201d0314 	.word	0x201d0314
 8007888:	14          	.byte	0x14
 8007889:	00          	.byte	0x00
 800788a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800788e:	05e1      	lsls	r1, r4, #23
 8007890:	bf48      	it	mi
 8007892:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800789a:	0d1b      	lsrs	r3, r3, #20
 800789c:	051b      	lsls	r3, r3, #20
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1bb      	bne.n	800781a <_strtod_l+0x72>
 80078a2:	f000 fe23 	bl	80084ec <__errno>
 80078a6:	2322      	movs	r3, #34	@ 0x22
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	e7b6      	b.n	800781a <_strtod_l+0x72>
 80078ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80078b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078bc:	e7e7      	b.n	800788e <_strtod_l+0xe6>
 80078be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007a3c <_strtod_l+0x294>
 80078c2:	e7e4      	b.n	800788e <_strtod_l+0xe6>
 80078c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80078c8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80078cc:	e7df      	b.n	800788e <_strtod_l+0xe6>
 80078ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b30      	cmp	r3, #48	@ 0x30
 80078d8:	d0f9      	beq.n	80078ce <_strtod_l+0x126>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d09d      	beq.n	800781a <_strtod_l+0x72>
 80078de:	2301      	movs	r3, #1
 80078e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80078e6:	2300      	movs	r3, #0
 80078e8:	9308      	str	r3, [sp, #32]
 80078ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ec:	461f      	mov	r7, r3
 80078ee:	220a      	movs	r2, #10
 80078f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80078f2:	7805      	ldrb	r5, [r0, #0]
 80078f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80078f8:	b2d9      	uxtb	r1, r3
 80078fa:	2909      	cmp	r1, #9
 80078fc:	d928      	bls.n	8007950 <_strtod_l+0x1a8>
 80078fe:	494e      	ldr	r1, [pc, #312]	@ (8007a38 <_strtod_l+0x290>)
 8007900:	2201      	movs	r2, #1
 8007902:	f000 fdd5 	bl	80084b0 <strncmp>
 8007906:	2800      	cmp	r0, #0
 8007908:	d032      	beq.n	8007970 <_strtod_l+0x1c8>
 800790a:	2000      	movs	r0, #0
 800790c:	462a      	mov	r2, r5
 800790e:	4681      	mov	r9, r0
 8007910:	463d      	mov	r5, r7
 8007912:	4603      	mov	r3, r0
 8007914:	2a65      	cmp	r2, #101	@ 0x65
 8007916:	d001      	beq.n	800791c <_strtod_l+0x174>
 8007918:	2a45      	cmp	r2, #69	@ 0x45
 800791a:	d114      	bne.n	8007946 <_strtod_l+0x19e>
 800791c:	b91d      	cbnz	r5, 8007926 <_strtod_l+0x17e>
 800791e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007920:	4302      	orrs	r2, r0
 8007922:	d095      	beq.n	8007850 <_strtod_l+0xa8>
 8007924:	2500      	movs	r5, #0
 8007926:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007928:	1c62      	adds	r2, r4, #1
 800792a:	9219      	str	r2, [sp, #100]	@ 0x64
 800792c:	7862      	ldrb	r2, [r4, #1]
 800792e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007930:	d077      	beq.n	8007a22 <_strtod_l+0x27a>
 8007932:	2a2d      	cmp	r2, #45	@ 0x2d
 8007934:	d07b      	beq.n	8007a2e <_strtod_l+0x286>
 8007936:	f04f 0c00 	mov.w	ip, #0
 800793a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800793e:	2909      	cmp	r1, #9
 8007940:	f240 8082 	bls.w	8007a48 <_strtod_l+0x2a0>
 8007944:	9419      	str	r4, [sp, #100]	@ 0x64
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	e0a2      	b.n	8007a92 <_strtod_l+0x2ea>
 800794c:	2300      	movs	r3, #0
 800794e:	e7c7      	b.n	80078e0 <_strtod_l+0x138>
 8007950:	2f08      	cmp	r7, #8
 8007952:	bfd5      	itete	le
 8007954:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007956:	9908      	ldrgt	r1, [sp, #32]
 8007958:	fb02 3301 	mlale	r3, r2, r1, r3
 800795c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007960:	f100 0001 	add.w	r0, r0, #1
 8007964:	bfd4      	ite	le
 8007966:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007968:	9308      	strgt	r3, [sp, #32]
 800796a:	3701      	adds	r7, #1
 800796c:	9019      	str	r0, [sp, #100]	@ 0x64
 800796e:	e7bf      	b.n	80078f0 <_strtod_l+0x148>
 8007970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	9219      	str	r2, [sp, #100]	@ 0x64
 8007976:	785a      	ldrb	r2, [r3, #1]
 8007978:	b37f      	cbz	r7, 80079da <_strtod_l+0x232>
 800797a:	4681      	mov	r9, r0
 800797c:	463d      	mov	r5, r7
 800797e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007982:	2b09      	cmp	r3, #9
 8007984:	d912      	bls.n	80079ac <_strtod_l+0x204>
 8007986:	2301      	movs	r3, #1
 8007988:	e7c4      	b.n	8007914 <_strtod_l+0x16c>
 800798a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007990:	785a      	ldrb	r2, [r3, #1]
 8007992:	3001      	adds	r0, #1
 8007994:	2a30      	cmp	r2, #48	@ 0x30
 8007996:	d0f8      	beq.n	800798a <_strtod_l+0x1e2>
 8007998:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800799c:	2b08      	cmp	r3, #8
 800799e:	f200 84d3 	bhi.w	8008348 <_strtod_l+0xba0>
 80079a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80079a6:	4681      	mov	r9, r0
 80079a8:	2000      	movs	r0, #0
 80079aa:	4605      	mov	r5, r0
 80079ac:	3a30      	subs	r2, #48	@ 0x30
 80079ae:	f100 0301 	add.w	r3, r0, #1
 80079b2:	d02a      	beq.n	8007a0a <_strtod_l+0x262>
 80079b4:	4499      	add	r9, r3
 80079b6:	eb00 0c05 	add.w	ip, r0, r5
 80079ba:	462b      	mov	r3, r5
 80079bc:	210a      	movs	r1, #10
 80079be:	4563      	cmp	r3, ip
 80079c0:	d10d      	bne.n	80079de <_strtod_l+0x236>
 80079c2:	1c69      	adds	r1, r5, #1
 80079c4:	4401      	add	r1, r0
 80079c6:	4428      	add	r0, r5
 80079c8:	2808      	cmp	r0, #8
 80079ca:	dc16      	bgt.n	80079fa <_strtod_l+0x252>
 80079cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079ce:	230a      	movs	r3, #10
 80079d0:	fb03 2300 	mla	r3, r3, r0, r2
 80079d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d6:	2300      	movs	r3, #0
 80079d8:	e018      	b.n	8007a0c <_strtod_l+0x264>
 80079da:	4638      	mov	r0, r7
 80079dc:	e7da      	b.n	8007994 <_strtod_l+0x1ec>
 80079de:	2b08      	cmp	r3, #8
 80079e0:	f103 0301 	add.w	r3, r3, #1
 80079e4:	dc03      	bgt.n	80079ee <_strtod_l+0x246>
 80079e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80079e8:	434e      	muls	r6, r1
 80079ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80079ec:	e7e7      	b.n	80079be <_strtod_l+0x216>
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	bfde      	ittt	le
 80079f2:	9e08      	ldrle	r6, [sp, #32]
 80079f4:	434e      	mulle	r6, r1
 80079f6:	9608      	strle	r6, [sp, #32]
 80079f8:	e7e1      	b.n	80079be <_strtod_l+0x216>
 80079fa:	280f      	cmp	r0, #15
 80079fc:	dceb      	bgt.n	80079d6 <_strtod_l+0x22e>
 80079fe:	9808      	ldr	r0, [sp, #32]
 8007a00:	230a      	movs	r3, #10
 8007a02:	fb03 2300 	mla	r3, r3, r0, r2
 8007a06:	9308      	str	r3, [sp, #32]
 8007a08:	e7e5      	b.n	80079d6 <_strtod_l+0x22e>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a0e:	1c50      	adds	r0, r2, #1
 8007a10:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a12:	7852      	ldrb	r2, [r2, #1]
 8007a14:	4618      	mov	r0, r3
 8007a16:	460d      	mov	r5, r1
 8007a18:	e7b1      	b.n	800797e <_strtod_l+0x1d6>
 8007a1a:	f04f 0900 	mov.w	r9, #0
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e77d      	b.n	800791e <_strtod_l+0x176>
 8007a22:	f04f 0c00 	mov.w	ip, #0
 8007a26:	1ca2      	adds	r2, r4, #2
 8007a28:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a2a:	78a2      	ldrb	r2, [r4, #2]
 8007a2c:	e785      	b.n	800793a <_strtod_l+0x192>
 8007a2e:	f04f 0c01 	mov.w	ip, #1
 8007a32:	e7f8      	b.n	8007a26 <_strtod_l+0x27e>
 8007a34:	0800b104 	.word	0x0800b104
 8007a38:	0800b0ed 	.word	0x0800b0ed
 8007a3c:	7ff00000 	.word	0x7ff00000
 8007a40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a42:	1c51      	adds	r1, r2, #1
 8007a44:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a46:	7852      	ldrb	r2, [r2, #1]
 8007a48:	2a30      	cmp	r2, #48	@ 0x30
 8007a4a:	d0f9      	beq.n	8007a40 <_strtod_l+0x298>
 8007a4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a50:	2908      	cmp	r1, #8
 8007a52:	f63f af78 	bhi.w	8007946 <_strtod_l+0x19e>
 8007a56:	3a30      	subs	r2, #48	@ 0x30
 8007a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a5e:	f04f 080a 	mov.w	r8, #10
 8007a62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a64:	1c56      	adds	r6, r2, #1
 8007a66:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a68:	7852      	ldrb	r2, [r2, #1]
 8007a6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007a6e:	f1be 0f09 	cmp.w	lr, #9
 8007a72:	d939      	bls.n	8007ae8 <_strtod_l+0x340>
 8007a74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a76:	1a76      	subs	r6, r6, r1
 8007a78:	2e08      	cmp	r6, #8
 8007a7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007a7e:	dc03      	bgt.n	8007a88 <_strtod_l+0x2e0>
 8007a80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007a82:	4588      	cmp	r8, r1
 8007a84:	bfa8      	it	ge
 8007a86:	4688      	movge	r8, r1
 8007a88:	f1bc 0f00 	cmp.w	ip, #0
 8007a8c:	d001      	beq.n	8007a92 <_strtod_l+0x2ea>
 8007a8e:	f1c8 0800 	rsb	r8, r8, #0
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	d14e      	bne.n	8007b34 <_strtod_l+0x38c>
 8007a96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a98:	4308      	orrs	r0, r1
 8007a9a:	f47f aebe 	bne.w	800781a <_strtod_l+0x72>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f47f aed6 	bne.w	8007850 <_strtod_l+0xa8>
 8007aa4:	2a69      	cmp	r2, #105	@ 0x69
 8007aa6:	d028      	beq.n	8007afa <_strtod_l+0x352>
 8007aa8:	dc25      	bgt.n	8007af6 <_strtod_l+0x34e>
 8007aaa:	2a49      	cmp	r2, #73	@ 0x49
 8007aac:	d025      	beq.n	8007afa <_strtod_l+0x352>
 8007aae:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ab0:	f47f aece 	bne.w	8007850 <_strtod_l+0xa8>
 8007ab4:	499b      	ldr	r1, [pc, #620]	@ (8007d24 <_strtod_l+0x57c>)
 8007ab6:	a819      	add	r0, sp, #100	@ 0x64
 8007ab8:	f001 fe3c 	bl	8009734 <__match>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f43f aec7 	beq.w	8007850 <_strtod_l+0xa8>
 8007ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b28      	cmp	r3, #40	@ 0x28
 8007ac8:	d12e      	bne.n	8007b28 <_strtod_l+0x380>
 8007aca:	4997      	ldr	r1, [pc, #604]	@ (8007d28 <_strtod_l+0x580>)
 8007acc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007ace:	a819      	add	r0, sp, #100	@ 0x64
 8007ad0:	f001 fe44 	bl	800975c <__hexnan>
 8007ad4:	2805      	cmp	r0, #5
 8007ad6:	d127      	bne.n	8007b28 <_strtod_l+0x380>
 8007ad8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ada:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007ade:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007ae2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ae6:	e698      	b.n	800781a <_strtod_l+0x72>
 8007ae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007aea:	fb08 2101 	mla	r1, r8, r1, r2
 8007aee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007af2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007af4:	e7b5      	b.n	8007a62 <_strtod_l+0x2ba>
 8007af6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007af8:	e7da      	b.n	8007ab0 <_strtod_l+0x308>
 8007afa:	498c      	ldr	r1, [pc, #560]	@ (8007d2c <_strtod_l+0x584>)
 8007afc:	a819      	add	r0, sp, #100	@ 0x64
 8007afe:	f001 fe19 	bl	8009734 <__match>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f43f aea4 	beq.w	8007850 <_strtod_l+0xa8>
 8007b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b0a:	4989      	ldr	r1, [pc, #548]	@ (8007d30 <_strtod_l+0x588>)
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	a819      	add	r0, sp, #100	@ 0x64
 8007b10:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b12:	f001 fe0f 	bl	8009734 <__match>
 8007b16:	b910      	cbnz	r0, 8007b1e <_strtod_l+0x376>
 8007b18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007d40 <_strtod_l+0x598>
 8007b22:	f04f 0a00 	mov.w	sl, #0
 8007b26:	e678      	b.n	800781a <_strtod_l+0x72>
 8007b28:	4882      	ldr	r0, [pc, #520]	@ (8007d34 <_strtod_l+0x58c>)
 8007b2a:	f000 fd1d 	bl	8008568 <nan>
 8007b2e:	ec5b ab10 	vmov	sl, fp, d0
 8007b32:	e672      	b.n	800781a <_strtod_l+0x72>
 8007b34:	eba8 0309 	sub.w	r3, r8, r9
 8007b38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3c:	2f00      	cmp	r7, #0
 8007b3e:	bf08      	it	eq
 8007b40:	462f      	moveq	r7, r5
 8007b42:	2d10      	cmp	r5, #16
 8007b44:	462c      	mov	r4, r5
 8007b46:	bfa8      	it	ge
 8007b48:	2410      	movge	r4, #16
 8007b4a:	f7f8 fcf3 	bl	8000534 <__aeabi_ui2d>
 8007b4e:	2d09      	cmp	r5, #9
 8007b50:	4682      	mov	sl, r0
 8007b52:	468b      	mov	fp, r1
 8007b54:	dc13      	bgt.n	8007b7e <_strtod_l+0x3d6>
 8007b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f43f ae5e 	beq.w	800781a <_strtod_l+0x72>
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	dd78      	ble.n	8007c54 <_strtod_l+0x4ac>
 8007b62:	2b16      	cmp	r3, #22
 8007b64:	dc5f      	bgt.n	8007c26 <_strtod_l+0x47e>
 8007b66:	4974      	ldr	r1, [pc, #464]	@ (8007d38 <_strtod_l+0x590>)
 8007b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b70:	4652      	mov	r2, sl
 8007b72:	465b      	mov	r3, fp
 8007b74:	f7f8 fd58 	bl	8000628 <__aeabi_dmul>
 8007b78:	4682      	mov	sl, r0
 8007b7a:	468b      	mov	fp, r1
 8007b7c:	e64d      	b.n	800781a <_strtod_l+0x72>
 8007b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8007d38 <_strtod_l+0x590>)
 8007b80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007b88:	f7f8 fd4e 	bl	8000628 <__aeabi_dmul>
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	9808      	ldr	r0, [sp, #32]
 8007b90:	468b      	mov	fp, r1
 8007b92:	f7f8 fccf 	bl	8000534 <__aeabi_ui2d>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	f7f8 fb8d 	bl	80002bc <__adddf3>
 8007ba2:	2d0f      	cmp	r5, #15
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	468b      	mov	fp, r1
 8007ba8:	ddd5      	ble.n	8007b56 <_strtod_l+0x3ae>
 8007baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bac:	1b2c      	subs	r4, r5, r4
 8007bae:	441c      	add	r4, r3
 8007bb0:	2c00      	cmp	r4, #0
 8007bb2:	f340 8096 	ble.w	8007ce2 <_strtod_l+0x53a>
 8007bb6:	f014 030f 	ands.w	r3, r4, #15
 8007bba:	d00a      	beq.n	8007bd2 <_strtod_l+0x42a>
 8007bbc:	495e      	ldr	r1, [pc, #376]	@ (8007d38 <_strtod_l+0x590>)
 8007bbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	465b      	mov	r3, fp
 8007bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bca:	f7f8 fd2d 	bl	8000628 <__aeabi_dmul>
 8007bce:	4682      	mov	sl, r0
 8007bd0:	468b      	mov	fp, r1
 8007bd2:	f034 040f 	bics.w	r4, r4, #15
 8007bd6:	d073      	beq.n	8007cc0 <_strtod_l+0x518>
 8007bd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007bdc:	dd48      	ble.n	8007c70 <_strtod_l+0x4c8>
 8007bde:	2400      	movs	r4, #0
 8007be0:	46a0      	mov	r8, r4
 8007be2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007be4:	46a1      	mov	r9, r4
 8007be6:	9a05      	ldr	r2, [sp, #20]
 8007be8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007d40 <_strtod_l+0x598>
 8007bec:	2322      	movs	r3, #34	@ 0x22
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	f04f 0a00 	mov.w	sl, #0
 8007bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f43f ae0f 	beq.w	800781a <_strtod_l+0x72>
 8007bfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bfe:	9805      	ldr	r0, [sp, #20]
 8007c00:	f002 f952 	bl	8009ea8 <_Bfree>
 8007c04:	9805      	ldr	r0, [sp, #20]
 8007c06:	4649      	mov	r1, r9
 8007c08:	f002 f94e 	bl	8009ea8 <_Bfree>
 8007c0c:	9805      	ldr	r0, [sp, #20]
 8007c0e:	4641      	mov	r1, r8
 8007c10:	f002 f94a 	bl	8009ea8 <_Bfree>
 8007c14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c16:	9805      	ldr	r0, [sp, #20]
 8007c18:	f002 f946 	bl	8009ea8 <_Bfree>
 8007c1c:	9805      	ldr	r0, [sp, #20]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	f002 f942 	bl	8009ea8 <_Bfree>
 8007c24:	e5f9      	b.n	800781a <_strtod_l+0x72>
 8007c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	dbbc      	blt.n	8007baa <_strtod_l+0x402>
 8007c30:	4c41      	ldr	r4, [pc, #260]	@ (8007d38 <_strtod_l+0x590>)
 8007c32:	f1c5 050f 	rsb	r5, r5, #15
 8007c36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c3a:	4652      	mov	r2, sl
 8007c3c:	465b      	mov	r3, fp
 8007c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c42:	f7f8 fcf1 	bl	8000628 <__aeabi_dmul>
 8007c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c48:	1b5d      	subs	r5, r3, r5
 8007c4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c52:	e78f      	b.n	8007b74 <_strtod_l+0x3cc>
 8007c54:	3316      	adds	r3, #22
 8007c56:	dba8      	blt.n	8007baa <_strtod_l+0x402>
 8007c58:	4b37      	ldr	r3, [pc, #220]	@ (8007d38 <_strtod_l+0x590>)
 8007c5a:	eba9 0808 	sub.w	r8, r9, r8
 8007c5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c66:	4650      	mov	r0, sl
 8007c68:	4659      	mov	r1, fp
 8007c6a:	f7f8 fe07 	bl	800087c <__aeabi_ddiv>
 8007c6e:	e783      	b.n	8007b78 <_strtod_l+0x3d0>
 8007c70:	4b32      	ldr	r3, [pc, #200]	@ (8007d3c <_strtod_l+0x594>)
 8007c72:	9308      	str	r3, [sp, #32]
 8007c74:	2300      	movs	r3, #0
 8007c76:	1124      	asrs	r4, r4, #4
 8007c78:	4650      	mov	r0, sl
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	461e      	mov	r6, r3
 8007c7e:	2c01      	cmp	r4, #1
 8007c80:	dc21      	bgt.n	8007cc6 <_strtod_l+0x51e>
 8007c82:	b10b      	cbz	r3, 8007c88 <_strtod_l+0x4e0>
 8007c84:	4682      	mov	sl, r0
 8007c86:	468b      	mov	fp, r1
 8007c88:	492c      	ldr	r1, [pc, #176]	@ (8007d3c <_strtod_l+0x594>)
 8007c8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007c8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007c92:	4652      	mov	r2, sl
 8007c94:	465b      	mov	r3, fp
 8007c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c9a:	f7f8 fcc5 	bl	8000628 <__aeabi_dmul>
 8007c9e:	4b28      	ldr	r3, [pc, #160]	@ (8007d40 <_strtod_l+0x598>)
 8007ca0:	460a      	mov	r2, r1
 8007ca2:	400b      	ands	r3, r1
 8007ca4:	4927      	ldr	r1, [pc, #156]	@ (8007d44 <_strtod_l+0x59c>)
 8007ca6:	428b      	cmp	r3, r1
 8007ca8:	4682      	mov	sl, r0
 8007caa:	d898      	bhi.n	8007bde <_strtod_l+0x436>
 8007cac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007cb0:	428b      	cmp	r3, r1
 8007cb2:	bf86      	itte	hi
 8007cb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007d48 <_strtod_l+0x5a0>
 8007cb8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007cbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9308      	str	r3, [sp, #32]
 8007cc4:	e07a      	b.n	8007dbc <_strtod_l+0x614>
 8007cc6:	07e2      	lsls	r2, r4, #31
 8007cc8:	d505      	bpl.n	8007cd6 <_strtod_l+0x52e>
 8007cca:	9b08      	ldr	r3, [sp, #32]
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fcaa 	bl	8000628 <__aeabi_dmul>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	9a08      	ldr	r2, [sp, #32]
 8007cd8:	3208      	adds	r2, #8
 8007cda:	3601      	adds	r6, #1
 8007cdc:	1064      	asrs	r4, r4, #1
 8007cde:	9208      	str	r2, [sp, #32]
 8007ce0:	e7cd      	b.n	8007c7e <_strtod_l+0x4d6>
 8007ce2:	d0ed      	beq.n	8007cc0 <_strtod_l+0x518>
 8007ce4:	4264      	negs	r4, r4
 8007ce6:	f014 020f 	ands.w	r2, r4, #15
 8007cea:	d00a      	beq.n	8007d02 <_strtod_l+0x55a>
 8007cec:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <_strtod_l+0x590>)
 8007cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 fdbf 	bl	800087c <__aeabi_ddiv>
 8007cfe:	4682      	mov	sl, r0
 8007d00:	468b      	mov	fp, r1
 8007d02:	1124      	asrs	r4, r4, #4
 8007d04:	d0dc      	beq.n	8007cc0 <_strtod_l+0x518>
 8007d06:	2c1f      	cmp	r4, #31
 8007d08:	dd20      	ble.n	8007d4c <_strtod_l+0x5a4>
 8007d0a:	2400      	movs	r4, #0
 8007d0c:	46a0      	mov	r8, r4
 8007d0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d10:	46a1      	mov	r9, r4
 8007d12:	9a05      	ldr	r2, [sp, #20]
 8007d14:	2322      	movs	r3, #34	@ 0x22
 8007d16:	f04f 0a00 	mov.w	sl, #0
 8007d1a:	f04f 0b00 	mov.w	fp, #0
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	e768      	b.n	8007bf4 <_strtod_l+0x44c>
 8007d22:	bf00      	nop
 8007d24:	0800b0c1 	.word	0x0800b0c1
 8007d28:	0800b0f0 	.word	0x0800b0f0
 8007d2c:	0800b0b9 	.word	0x0800b0b9
 8007d30:	0800b24c 	.word	0x0800b24c
 8007d34:	0800b4db 	.word	0x0800b4db
 8007d38:	0800b3d8 	.word	0x0800b3d8
 8007d3c:	0800b3b0 	.word	0x0800b3b0
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	7ca00000 	.word	0x7ca00000
 8007d48:	7fefffff 	.word	0x7fefffff
 8007d4c:	f014 0310 	ands.w	r3, r4, #16
 8007d50:	bf18      	it	ne
 8007d52:	236a      	movne	r3, #106	@ 0x6a
 8007d54:	4ea9      	ldr	r6, [pc, #676]	@ (8007ffc <_strtod_l+0x854>)
 8007d56:	9308      	str	r3, [sp, #32]
 8007d58:	4650      	mov	r0, sl
 8007d5a:	4659      	mov	r1, fp
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	07e2      	lsls	r2, r4, #31
 8007d60:	d504      	bpl.n	8007d6c <_strtod_l+0x5c4>
 8007d62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d66:	f7f8 fc5f 	bl	8000628 <__aeabi_dmul>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	1064      	asrs	r4, r4, #1
 8007d6e:	f106 0608 	add.w	r6, r6, #8
 8007d72:	d1f4      	bne.n	8007d5e <_strtod_l+0x5b6>
 8007d74:	b10b      	cbz	r3, 8007d7a <_strtod_l+0x5d2>
 8007d76:	4682      	mov	sl, r0
 8007d78:	468b      	mov	fp, r1
 8007d7a:	9b08      	ldr	r3, [sp, #32]
 8007d7c:	b1b3      	cbz	r3, 8007dac <_strtod_l+0x604>
 8007d7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	4659      	mov	r1, fp
 8007d8a:	dd0f      	ble.n	8007dac <_strtod_l+0x604>
 8007d8c:	2b1f      	cmp	r3, #31
 8007d8e:	dd55      	ble.n	8007e3c <_strtod_l+0x694>
 8007d90:	2b34      	cmp	r3, #52	@ 0x34
 8007d92:	bfde      	ittt	le
 8007d94:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007d98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007d9c:	4093      	lslle	r3, r2
 8007d9e:	f04f 0a00 	mov.w	sl, #0
 8007da2:	bfcc      	ite	gt
 8007da4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007da8:	ea03 0b01 	andle.w	fp, r3, r1
 8007dac:	2200      	movs	r2, #0
 8007dae:	2300      	movs	r3, #0
 8007db0:	4650      	mov	r0, sl
 8007db2:	4659      	mov	r1, fp
 8007db4:	f7f8 fea0 	bl	8000af8 <__aeabi_dcmpeq>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d1a6      	bne.n	8007d0a <_strtod_l+0x562>
 8007dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007dc2:	9805      	ldr	r0, [sp, #20]
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	463a      	mov	r2, r7
 8007dc8:	f002 f8d6 	bl	8009f78 <__s2b>
 8007dcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f af05 	beq.w	8007bde <_strtod_l+0x436>
 8007dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	eba9 0308 	sub.w	r3, r9, r8
 8007ddc:	bfa8      	it	ge
 8007dde:	2300      	movge	r3, #0
 8007de0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007de2:	2400      	movs	r4, #0
 8007de4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007de8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007dea:	46a0      	mov	r8, r4
 8007dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dee:	9805      	ldr	r0, [sp, #20]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	f002 f819 	bl	8009e28 <_Balloc>
 8007df6:	4681      	mov	r9, r0
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f43f aef4 	beq.w	8007be6 <_strtod_l+0x43e>
 8007dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	3202      	adds	r2, #2
 8007e04:	f103 010c 	add.w	r1, r3, #12
 8007e08:	0092      	lsls	r2, r2, #2
 8007e0a:	300c      	adds	r0, #12
 8007e0c:	f000 fb9b 	bl	8008546 <memcpy>
 8007e10:	ec4b ab10 	vmov	d0, sl, fp
 8007e14:	9805      	ldr	r0, [sp, #20]
 8007e16:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e18:	a91b      	add	r1, sp, #108	@ 0x6c
 8007e1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e1e:	f002 fbe7 	bl	800a5f0 <__d2b>
 8007e22:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f43f aede 	beq.w	8007be6 <_strtod_l+0x43e>
 8007e2a:	9805      	ldr	r0, [sp, #20]
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	f002 f939 	bl	800a0a4 <__i2b>
 8007e32:	4680      	mov	r8, r0
 8007e34:	b948      	cbnz	r0, 8007e4a <_strtod_l+0x6a2>
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	e6d4      	b.n	8007be6 <_strtod_l+0x43e>
 8007e3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	ea03 0a0a 	and.w	sl, r3, sl
 8007e48:	e7b0      	b.n	8007dac <_strtod_l+0x604>
 8007e4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	bfab      	itete	ge
 8007e52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e5a:	bfac      	ite	ge
 8007e5c:	18ef      	addge	r7, r5, r3
 8007e5e:	1b5e      	sublt	r6, r3, r5
 8007e60:	9b08      	ldr	r3, [sp, #32]
 8007e62:	1aed      	subs	r5, r5, r3
 8007e64:	4415      	add	r5, r2
 8007e66:	4b66      	ldr	r3, [pc, #408]	@ (8008000 <_strtod_l+0x858>)
 8007e68:	3d01      	subs	r5, #1
 8007e6a:	429d      	cmp	r5, r3
 8007e6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e70:	da50      	bge.n	8007f14 <_strtod_l+0x76c>
 8007e72:	1b5b      	subs	r3, r3, r5
 8007e74:	2b1f      	cmp	r3, #31
 8007e76:	eba2 0203 	sub.w	r2, r2, r3
 8007e7a:	f04f 0101 	mov.w	r1, #1
 8007e7e:	dc3d      	bgt.n	8007efc <_strtod_l+0x754>
 8007e80:	fa01 f303 	lsl.w	r3, r1, r3
 8007e84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e86:	2300      	movs	r3, #0
 8007e88:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e8a:	18bd      	adds	r5, r7, r2
 8007e8c:	9b08      	ldr	r3, [sp, #32]
 8007e8e:	42af      	cmp	r7, r5
 8007e90:	4416      	add	r6, r2
 8007e92:	441e      	add	r6, r3
 8007e94:	463b      	mov	r3, r7
 8007e96:	bfa8      	it	ge
 8007e98:	462b      	movge	r3, r5
 8007e9a:	42b3      	cmp	r3, r6
 8007e9c:	bfa8      	it	ge
 8007e9e:	4633      	movge	r3, r6
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bfc2      	ittt	gt
 8007ea4:	1aed      	subgt	r5, r5, r3
 8007ea6:	1af6      	subgt	r6, r6, r3
 8007ea8:	1aff      	subgt	r7, r7, r3
 8007eaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd16      	ble.n	8007ede <_strtod_l+0x736>
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	9805      	ldr	r0, [sp, #20]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f002 f9b5 	bl	800a224 <__pow5mult>
 8007eba:	4680      	mov	r8, r0
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d0ba      	beq.n	8007e36 <_strtod_l+0x68e>
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ec4:	9805      	ldr	r0, [sp, #20]
 8007ec6:	f002 f903 	bl	800a0d0 <__multiply>
 8007eca:	900e      	str	r0, [sp, #56]	@ 0x38
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	f43f ae8a 	beq.w	8007be6 <_strtod_l+0x43e>
 8007ed2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ed4:	9805      	ldr	r0, [sp, #20]
 8007ed6:	f001 ffe7 	bl	8009ea8 <_Bfree>
 8007eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	dc1d      	bgt.n	8007f1e <_strtod_l+0x776>
 8007ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dd23      	ble.n	8007f30 <_strtod_l+0x788>
 8007ee8:	4649      	mov	r1, r9
 8007eea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007eec:	9805      	ldr	r0, [sp, #20]
 8007eee:	f002 f999 	bl	800a224 <__pow5mult>
 8007ef2:	4681      	mov	r9, r0
 8007ef4:	b9e0      	cbnz	r0, 8007f30 <_strtod_l+0x788>
 8007ef6:	f04f 0900 	mov.w	r9, #0
 8007efa:	e674      	b.n	8007be6 <_strtod_l+0x43e>
 8007efc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007f08:	35e2      	adds	r5, #226	@ 0xe2
 8007f0a:	fa01 f305 	lsl.w	r3, r1, r5
 8007f0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f12:	e7ba      	b.n	8007e8a <_strtod_l+0x6e2>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f18:	2301      	movs	r3, #1
 8007f1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f1c:	e7b5      	b.n	8007e8a <_strtod_l+0x6e2>
 8007f1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f20:	9805      	ldr	r0, [sp, #20]
 8007f22:	462a      	mov	r2, r5
 8007f24:	f002 f9d8 	bl	800a2d8 <__lshift>
 8007f28:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d1d9      	bne.n	8007ee2 <_strtod_l+0x73a>
 8007f2e:	e65a      	b.n	8007be6 <_strtod_l+0x43e>
 8007f30:	2e00      	cmp	r6, #0
 8007f32:	dd07      	ble.n	8007f44 <_strtod_l+0x79c>
 8007f34:	4649      	mov	r1, r9
 8007f36:	9805      	ldr	r0, [sp, #20]
 8007f38:	4632      	mov	r2, r6
 8007f3a:	f002 f9cd 	bl	800a2d8 <__lshift>
 8007f3e:	4681      	mov	r9, r0
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d0d8      	beq.n	8007ef6 <_strtod_l+0x74e>
 8007f44:	2f00      	cmp	r7, #0
 8007f46:	dd08      	ble.n	8007f5a <_strtod_l+0x7b2>
 8007f48:	4641      	mov	r1, r8
 8007f4a:	9805      	ldr	r0, [sp, #20]
 8007f4c:	463a      	mov	r2, r7
 8007f4e:	f002 f9c3 	bl	800a2d8 <__lshift>
 8007f52:	4680      	mov	r8, r0
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f43f ae46 	beq.w	8007be6 <_strtod_l+0x43e>
 8007f5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	464a      	mov	r2, r9
 8007f60:	f002 fa42 	bl	800a3e8 <__mdiff>
 8007f64:	4604      	mov	r4, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f43f ae3d 	beq.w	8007be6 <_strtod_l+0x43e>
 8007f6c:	68c3      	ldr	r3, [r0, #12]
 8007f6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f70:	2300      	movs	r3, #0
 8007f72:	60c3      	str	r3, [r0, #12]
 8007f74:	4641      	mov	r1, r8
 8007f76:	f002 fa1b 	bl	800a3b0 <__mcmp>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	da46      	bge.n	800800c <_strtod_l+0x864>
 8007f7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f80:	ea53 030a 	orrs.w	r3, r3, sl
 8007f84:	d16c      	bne.n	8008060 <_strtod_l+0x8b8>
 8007f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d168      	bne.n	8008060 <_strtod_l+0x8b8>
 8007f8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f92:	0d1b      	lsrs	r3, r3, #20
 8007f94:	051b      	lsls	r3, r3, #20
 8007f96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f9a:	d961      	bls.n	8008060 <_strtod_l+0x8b8>
 8007f9c:	6963      	ldr	r3, [r4, #20]
 8007f9e:	b913      	cbnz	r3, 8007fa6 <_strtod_l+0x7fe>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	dd5c      	ble.n	8008060 <_strtod_l+0x8b8>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	2201      	movs	r2, #1
 8007faa:	9805      	ldr	r0, [sp, #20]
 8007fac:	f002 f994 	bl	800a2d8 <__lshift>
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	f002 f9fc 	bl	800a3b0 <__mcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	dd51      	ble.n	8008060 <_strtod_l+0x8b8>
 8007fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fc0:	9a08      	ldr	r2, [sp, #32]
 8007fc2:	0d1b      	lsrs	r3, r3, #20
 8007fc4:	051b      	lsls	r3, r3, #20
 8007fc6:	2a00      	cmp	r2, #0
 8007fc8:	d06b      	beq.n	80080a2 <_strtod_l+0x8fa>
 8007fca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fce:	d868      	bhi.n	80080a2 <_strtod_l+0x8fa>
 8007fd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007fd4:	f67f ae9d 	bls.w	8007d12 <_strtod_l+0x56a>
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008004 <_strtod_l+0x85c>)
 8007fda:	4650      	mov	r0, sl
 8007fdc:	4659      	mov	r1, fp
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f7f8 fb22 	bl	8000628 <__aeabi_dmul>
 8007fe4:	4b08      	ldr	r3, [pc, #32]	@ (8008008 <_strtod_l+0x860>)
 8007fe6:	400b      	ands	r3, r1
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f47f ae05 	bne.w	8007bfc <_strtod_l+0x454>
 8007ff2:	9a05      	ldr	r2, [sp, #20]
 8007ff4:	2322      	movs	r3, #34	@ 0x22
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	e600      	b.n	8007bfc <_strtod_l+0x454>
 8007ffa:	bf00      	nop
 8007ffc:	0800b118 	.word	0x0800b118
 8008000:	fffffc02 	.word	0xfffffc02
 8008004:	39500000 	.word	0x39500000
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008010:	d165      	bne.n	80080de <_strtod_l+0x936>
 8008012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008018:	b35a      	cbz	r2, 8008072 <_strtod_l+0x8ca>
 800801a:	4a9f      	ldr	r2, [pc, #636]	@ (8008298 <_strtod_l+0xaf0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d12b      	bne.n	8008078 <_strtod_l+0x8d0>
 8008020:	9b08      	ldr	r3, [sp, #32]
 8008022:	4651      	mov	r1, sl
 8008024:	b303      	cbz	r3, 8008068 <_strtod_l+0x8c0>
 8008026:	4b9d      	ldr	r3, [pc, #628]	@ (800829c <_strtod_l+0xaf4>)
 8008028:	465a      	mov	r2, fp
 800802a:	4013      	ands	r3, r2
 800802c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008034:	d81b      	bhi.n	800806e <_strtod_l+0x8c6>
 8008036:	0d1b      	lsrs	r3, r3, #20
 8008038:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	4299      	cmp	r1, r3
 8008042:	d119      	bne.n	8008078 <_strtod_l+0x8d0>
 8008044:	4b96      	ldr	r3, [pc, #600]	@ (80082a0 <_strtod_l+0xaf8>)
 8008046:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008048:	429a      	cmp	r2, r3
 800804a:	d102      	bne.n	8008052 <_strtod_l+0x8aa>
 800804c:	3101      	adds	r1, #1
 800804e:	f43f adca 	beq.w	8007be6 <_strtod_l+0x43e>
 8008052:	4b92      	ldr	r3, [pc, #584]	@ (800829c <_strtod_l+0xaf4>)
 8008054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008056:	401a      	ands	r2, r3
 8008058:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800805c:	f04f 0a00 	mov.w	sl, #0
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1b8      	bne.n	8007fd8 <_strtod_l+0x830>
 8008066:	e5c9      	b.n	8007bfc <_strtod_l+0x454>
 8008068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800806c:	e7e8      	b.n	8008040 <_strtod_l+0x898>
 800806e:	4613      	mov	r3, r2
 8008070:	e7e6      	b.n	8008040 <_strtod_l+0x898>
 8008072:	ea53 030a 	orrs.w	r3, r3, sl
 8008076:	d0a1      	beq.n	8007fbc <_strtod_l+0x814>
 8008078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800807a:	b1db      	cbz	r3, 80080b4 <_strtod_l+0x90c>
 800807c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800807e:	4213      	tst	r3, r2
 8008080:	d0ee      	beq.n	8008060 <_strtod_l+0x8b8>
 8008082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008084:	9a08      	ldr	r2, [sp, #32]
 8008086:	4650      	mov	r0, sl
 8008088:	4659      	mov	r1, fp
 800808a:	b1bb      	cbz	r3, 80080bc <_strtod_l+0x914>
 800808c:	f7ff fb6c 	bl	8007768 <sulp>
 8008090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008094:	ec53 2b10 	vmov	r2, r3, d0
 8008098:	f7f8 f910 	bl	80002bc <__adddf3>
 800809c:	4682      	mov	sl, r0
 800809e:	468b      	mov	fp, r1
 80080a0:	e7de      	b.n	8008060 <_strtod_l+0x8b8>
 80080a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80080a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080ae:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80080b2:	e7d5      	b.n	8008060 <_strtod_l+0x8b8>
 80080b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080b6:	ea13 0f0a 	tst.w	r3, sl
 80080ba:	e7e1      	b.n	8008080 <_strtod_l+0x8d8>
 80080bc:	f7ff fb54 	bl	8007768 <sulp>
 80080c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080c4:	ec53 2b10 	vmov	r2, r3, d0
 80080c8:	f7f8 f8f6 	bl	80002b8 <__aeabi_dsub>
 80080cc:	2200      	movs	r2, #0
 80080ce:	2300      	movs	r3, #0
 80080d0:	4682      	mov	sl, r0
 80080d2:	468b      	mov	fp, r1
 80080d4:	f7f8 fd10 	bl	8000af8 <__aeabi_dcmpeq>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d0c1      	beq.n	8008060 <_strtod_l+0x8b8>
 80080dc:	e619      	b.n	8007d12 <_strtod_l+0x56a>
 80080de:	4641      	mov	r1, r8
 80080e0:	4620      	mov	r0, r4
 80080e2:	f002 fadd 	bl	800a6a0 <__ratio>
 80080e6:	ec57 6b10 	vmov	r6, r7, d0
 80080ea:	2200      	movs	r2, #0
 80080ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 fd14 	bl	8000b20 <__aeabi_dcmple>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d06f      	beq.n	80081dc <_strtod_l+0xa34>
 80080fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d17a      	bne.n	80081f8 <_strtod_l+0xa50>
 8008102:	f1ba 0f00 	cmp.w	sl, #0
 8008106:	d158      	bne.n	80081ba <_strtod_l+0xa12>
 8008108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800810a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800810e:	2b00      	cmp	r3, #0
 8008110:	d15a      	bne.n	80081c8 <_strtod_l+0xa20>
 8008112:	4b64      	ldr	r3, [pc, #400]	@ (80082a4 <_strtod_l+0xafc>)
 8008114:	2200      	movs	r2, #0
 8008116:	4630      	mov	r0, r6
 8008118:	4639      	mov	r1, r7
 800811a:	f7f8 fcf7 	bl	8000b0c <__aeabi_dcmplt>
 800811e:	2800      	cmp	r0, #0
 8008120:	d159      	bne.n	80081d6 <_strtod_l+0xa2e>
 8008122:	4630      	mov	r0, r6
 8008124:	4639      	mov	r1, r7
 8008126:	4b60      	ldr	r3, [pc, #384]	@ (80082a8 <_strtod_l+0xb00>)
 8008128:	2200      	movs	r2, #0
 800812a:	f7f8 fa7d 	bl	8000628 <__aeabi_dmul>
 800812e:	4606      	mov	r6, r0
 8008130:	460f      	mov	r7, r1
 8008132:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008136:	9606      	str	r6, [sp, #24]
 8008138:	9307      	str	r3, [sp, #28]
 800813a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800813e:	4d57      	ldr	r5, [pc, #348]	@ (800829c <_strtod_l+0xaf4>)
 8008140:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008146:	401d      	ands	r5, r3
 8008148:	4b58      	ldr	r3, [pc, #352]	@ (80082ac <_strtod_l+0xb04>)
 800814a:	429d      	cmp	r5, r3
 800814c:	f040 80b2 	bne.w	80082b4 <_strtod_l+0xb0c>
 8008150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008152:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008156:	ec4b ab10 	vmov	d0, sl, fp
 800815a:	f002 f9d9 	bl	800a510 <__ulp>
 800815e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008162:	ec51 0b10 	vmov	r0, r1, d0
 8008166:	f7f8 fa5f 	bl	8000628 <__aeabi_dmul>
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	f7f8 f8a5 	bl	80002bc <__adddf3>
 8008172:	460b      	mov	r3, r1
 8008174:	4949      	ldr	r1, [pc, #292]	@ (800829c <_strtod_l+0xaf4>)
 8008176:	4a4e      	ldr	r2, [pc, #312]	@ (80082b0 <_strtod_l+0xb08>)
 8008178:	4019      	ands	r1, r3
 800817a:	4291      	cmp	r1, r2
 800817c:	4682      	mov	sl, r0
 800817e:	d942      	bls.n	8008206 <_strtod_l+0xa5e>
 8008180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008182:	4b47      	ldr	r3, [pc, #284]	@ (80082a0 <_strtod_l+0xaf8>)
 8008184:	429a      	cmp	r2, r3
 8008186:	d103      	bne.n	8008190 <_strtod_l+0x9e8>
 8008188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800818a:	3301      	adds	r3, #1
 800818c:	f43f ad2b 	beq.w	8007be6 <_strtod_l+0x43e>
 8008190:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80082a0 <_strtod_l+0xaf8>
 8008194:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800819a:	9805      	ldr	r0, [sp, #20]
 800819c:	f001 fe84 	bl	8009ea8 <_Bfree>
 80081a0:	9805      	ldr	r0, [sp, #20]
 80081a2:	4649      	mov	r1, r9
 80081a4:	f001 fe80 	bl	8009ea8 <_Bfree>
 80081a8:	9805      	ldr	r0, [sp, #20]
 80081aa:	4641      	mov	r1, r8
 80081ac:	f001 fe7c 	bl	8009ea8 <_Bfree>
 80081b0:	9805      	ldr	r0, [sp, #20]
 80081b2:	4621      	mov	r1, r4
 80081b4:	f001 fe78 	bl	8009ea8 <_Bfree>
 80081b8:	e618      	b.n	8007dec <_strtod_l+0x644>
 80081ba:	f1ba 0f01 	cmp.w	sl, #1
 80081be:	d103      	bne.n	80081c8 <_strtod_l+0xa20>
 80081c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f43f ada5 	beq.w	8007d12 <_strtod_l+0x56a>
 80081c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008278 <_strtod_l+0xad0>
 80081cc:	4f35      	ldr	r7, [pc, #212]	@ (80082a4 <_strtod_l+0xafc>)
 80081ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081d2:	2600      	movs	r6, #0
 80081d4:	e7b1      	b.n	800813a <_strtod_l+0x992>
 80081d6:	4f34      	ldr	r7, [pc, #208]	@ (80082a8 <_strtod_l+0xb00>)
 80081d8:	2600      	movs	r6, #0
 80081da:	e7aa      	b.n	8008132 <_strtod_l+0x98a>
 80081dc:	4b32      	ldr	r3, [pc, #200]	@ (80082a8 <_strtod_l+0xb00>)
 80081de:	4630      	mov	r0, r6
 80081e0:	4639      	mov	r1, r7
 80081e2:	2200      	movs	r2, #0
 80081e4:	f7f8 fa20 	bl	8000628 <__aeabi_dmul>
 80081e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ea:	4606      	mov	r6, r0
 80081ec:	460f      	mov	r7, r1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d09f      	beq.n	8008132 <_strtod_l+0x98a>
 80081f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081f6:	e7a0      	b.n	800813a <_strtod_l+0x992>
 80081f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008280 <_strtod_l+0xad8>
 80081fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008200:	ec57 6b17 	vmov	r6, r7, d7
 8008204:	e799      	b.n	800813a <_strtod_l+0x992>
 8008206:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800820a:	9b08      	ldr	r3, [sp, #32]
 800820c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1c1      	bne.n	8008198 <_strtod_l+0x9f0>
 8008214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008218:	0d1b      	lsrs	r3, r3, #20
 800821a:	051b      	lsls	r3, r3, #20
 800821c:	429d      	cmp	r5, r3
 800821e:	d1bb      	bne.n	8008198 <_strtod_l+0x9f0>
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fd60 	bl	8000ce8 <__aeabi_d2lz>
 8008228:	f7f8 f9d0 	bl	80005cc <__aeabi_l2d>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4630      	mov	r0, r6
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 f840 	bl	80002b8 <__aeabi_dsub>
 8008238:	460b      	mov	r3, r1
 800823a:	4602      	mov	r2, r0
 800823c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008240:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008246:	ea46 060a 	orr.w	r6, r6, sl
 800824a:	431e      	orrs	r6, r3
 800824c:	d06f      	beq.n	800832e <_strtod_l+0xb86>
 800824e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008288 <_strtod_l+0xae0>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 fc5a 	bl	8000b0c <__aeabi_dcmplt>
 8008258:	2800      	cmp	r0, #0
 800825a:	f47f accf 	bne.w	8007bfc <_strtod_l+0x454>
 800825e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008290 <_strtod_l+0xae8>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008268:	f7f8 fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 800826c:	2800      	cmp	r0, #0
 800826e:	d093      	beq.n	8008198 <_strtod_l+0x9f0>
 8008270:	e4c4      	b.n	8007bfc <_strtod_l+0x454>
 8008272:	bf00      	nop
 8008274:	f3af 8000 	nop.w
 8008278:	00000000 	.word	0x00000000
 800827c:	bff00000 	.word	0xbff00000
 8008280:	00000000 	.word	0x00000000
 8008284:	3ff00000 	.word	0x3ff00000
 8008288:	94a03595 	.word	0x94a03595
 800828c:	3fdfffff 	.word	0x3fdfffff
 8008290:	35afe535 	.word	0x35afe535
 8008294:	3fe00000 	.word	0x3fe00000
 8008298:	000fffff 	.word	0x000fffff
 800829c:	7ff00000 	.word	0x7ff00000
 80082a0:	7fefffff 	.word	0x7fefffff
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	3fe00000 	.word	0x3fe00000
 80082ac:	7fe00000 	.word	0x7fe00000
 80082b0:	7c9fffff 	.word	0x7c9fffff
 80082b4:	9b08      	ldr	r3, [sp, #32]
 80082b6:	b323      	cbz	r3, 8008302 <_strtod_l+0xb5a>
 80082b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80082bc:	d821      	bhi.n	8008302 <_strtod_l+0xb5a>
 80082be:	a328      	add	r3, pc, #160	@ (adr r3, 8008360 <_strtod_l+0xbb8>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 fc2a 	bl	8000b20 <__aeabi_dcmple>
 80082cc:	b1a0      	cbz	r0, 80082f8 <_strtod_l+0xb50>
 80082ce:	4639      	mov	r1, r7
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7f8 fc81 	bl	8000bd8 <__aeabi_d2uiz>
 80082d6:	2801      	cmp	r0, #1
 80082d8:	bf38      	it	cc
 80082da:	2001      	movcc	r0, #1
 80082dc:	f7f8 f92a 	bl	8000534 <__aeabi_ui2d>
 80082e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	b9fb      	cbnz	r3, 8008328 <_strtod_l+0xb80>
 80082e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80082ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80082f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80082f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80082fe:	1b5b      	subs	r3, r3, r5
 8008300:	9311      	str	r3, [sp, #68]	@ 0x44
 8008302:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008306:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800830a:	f002 f901 	bl	800a510 <__ulp>
 800830e:	4650      	mov	r0, sl
 8008310:	ec53 2b10 	vmov	r2, r3, d0
 8008314:	4659      	mov	r1, fp
 8008316:	f7f8 f987 	bl	8000628 <__aeabi_dmul>
 800831a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800831e:	f7f7 ffcd 	bl	80002bc <__adddf3>
 8008322:	4682      	mov	sl, r0
 8008324:	468b      	mov	fp, r1
 8008326:	e770      	b.n	800820a <_strtod_l+0xa62>
 8008328:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800832c:	e7e0      	b.n	80082f0 <_strtod_l+0xb48>
 800832e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008368 <_strtod_l+0xbc0>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f8 fbea 	bl	8000b0c <__aeabi_dcmplt>
 8008338:	e798      	b.n	800826c <_strtod_l+0xac4>
 800833a:	2300      	movs	r3, #0
 800833c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800833e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	f7ff ba6d 	b.w	8007822 <_strtod_l+0x7a>
 8008348:	2a65      	cmp	r2, #101	@ 0x65
 800834a:	f43f ab66 	beq.w	8007a1a <_strtod_l+0x272>
 800834e:	2a45      	cmp	r2, #69	@ 0x45
 8008350:	f43f ab63 	beq.w	8007a1a <_strtod_l+0x272>
 8008354:	2301      	movs	r3, #1
 8008356:	f7ff bb9e 	b.w	8007a96 <_strtod_l+0x2ee>
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w
 8008360:	ffc00000 	.word	0xffc00000
 8008364:	41dfffff 	.word	0x41dfffff
 8008368:	94a03595 	.word	0x94a03595
 800836c:	3fcfffff 	.word	0x3fcfffff

08008370 <_strtod_r>:
 8008370:	4b01      	ldr	r3, [pc, #4]	@ (8008378 <_strtod_r+0x8>)
 8008372:	f7ff ba19 	b.w	80077a8 <_strtod_l>
 8008376:	bf00      	nop
 8008378:	20000018 	.word	0x20000018

0800837c <_strtol_l.constprop.0>:
 800837c:	2b24      	cmp	r3, #36	@ 0x24
 800837e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008382:	4686      	mov	lr, r0
 8008384:	4690      	mov	r8, r2
 8008386:	d801      	bhi.n	800838c <_strtol_l.constprop.0+0x10>
 8008388:	2b01      	cmp	r3, #1
 800838a:	d106      	bne.n	800839a <_strtol_l.constprop.0+0x1e>
 800838c:	f000 f8ae 	bl	80084ec <__errno>
 8008390:	2316      	movs	r3, #22
 8008392:	6003      	str	r3, [r0, #0]
 8008394:	2000      	movs	r0, #0
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	4834      	ldr	r0, [pc, #208]	@ (800846c <_strtol_l.constprop.0+0xf0>)
 800839c:	460d      	mov	r5, r1
 800839e:	462a      	mov	r2, r5
 80083a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083a4:	5d06      	ldrb	r6, [r0, r4]
 80083a6:	f016 0608 	ands.w	r6, r6, #8
 80083aa:	d1f8      	bne.n	800839e <_strtol_l.constprop.0+0x22>
 80083ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80083ae:	d12d      	bne.n	800840c <_strtol_l.constprop.0+0x90>
 80083b0:	782c      	ldrb	r4, [r5, #0]
 80083b2:	2601      	movs	r6, #1
 80083b4:	1c95      	adds	r5, r2, #2
 80083b6:	f033 0210 	bics.w	r2, r3, #16
 80083ba:	d109      	bne.n	80083d0 <_strtol_l.constprop.0+0x54>
 80083bc:	2c30      	cmp	r4, #48	@ 0x30
 80083be:	d12a      	bne.n	8008416 <_strtol_l.constprop.0+0x9a>
 80083c0:	782a      	ldrb	r2, [r5, #0]
 80083c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083c6:	2a58      	cmp	r2, #88	@ 0x58
 80083c8:	d125      	bne.n	8008416 <_strtol_l.constprop.0+0x9a>
 80083ca:	786c      	ldrb	r4, [r5, #1]
 80083cc:	2310      	movs	r3, #16
 80083ce:	3502      	adds	r5, #2
 80083d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083d4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80083d8:	2200      	movs	r2, #0
 80083da:	fbbc f9f3 	udiv	r9, ip, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80083e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083e8:	2f09      	cmp	r7, #9
 80083ea:	d81b      	bhi.n	8008424 <_strtol_l.constprop.0+0xa8>
 80083ec:	463c      	mov	r4, r7
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	dd27      	ble.n	8008442 <_strtol_l.constprop.0+0xc6>
 80083f2:	1c57      	adds	r7, r2, #1
 80083f4:	d007      	beq.n	8008406 <_strtol_l.constprop.0+0x8a>
 80083f6:	4581      	cmp	r9, r0
 80083f8:	d320      	bcc.n	800843c <_strtol_l.constprop.0+0xc0>
 80083fa:	d101      	bne.n	8008400 <_strtol_l.constprop.0+0x84>
 80083fc:	45a2      	cmp	sl, r4
 80083fe:	db1d      	blt.n	800843c <_strtol_l.constprop.0+0xc0>
 8008400:	fb00 4003 	mla	r0, r0, r3, r4
 8008404:	2201      	movs	r2, #1
 8008406:	f815 4b01 	ldrb.w	r4, [r5], #1
 800840a:	e7eb      	b.n	80083e4 <_strtol_l.constprop.0+0x68>
 800840c:	2c2b      	cmp	r4, #43	@ 0x2b
 800840e:	bf04      	itt	eq
 8008410:	782c      	ldrbeq	r4, [r5, #0]
 8008412:	1c95      	addeq	r5, r2, #2
 8008414:	e7cf      	b.n	80083b6 <_strtol_l.constprop.0+0x3a>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1da      	bne.n	80083d0 <_strtol_l.constprop.0+0x54>
 800841a:	2c30      	cmp	r4, #48	@ 0x30
 800841c:	bf0c      	ite	eq
 800841e:	2308      	moveq	r3, #8
 8008420:	230a      	movne	r3, #10
 8008422:	e7d5      	b.n	80083d0 <_strtol_l.constprop.0+0x54>
 8008424:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008428:	2f19      	cmp	r7, #25
 800842a:	d801      	bhi.n	8008430 <_strtol_l.constprop.0+0xb4>
 800842c:	3c37      	subs	r4, #55	@ 0x37
 800842e:	e7de      	b.n	80083ee <_strtol_l.constprop.0+0x72>
 8008430:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008434:	2f19      	cmp	r7, #25
 8008436:	d804      	bhi.n	8008442 <_strtol_l.constprop.0+0xc6>
 8008438:	3c57      	subs	r4, #87	@ 0x57
 800843a:	e7d8      	b.n	80083ee <_strtol_l.constprop.0+0x72>
 800843c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008440:	e7e1      	b.n	8008406 <_strtol_l.constprop.0+0x8a>
 8008442:	1c53      	adds	r3, r2, #1
 8008444:	d108      	bne.n	8008458 <_strtol_l.constprop.0+0xdc>
 8008446:	2322      	movs	r3, #34	@ 0x22
 8008448:	f8ce 3000 	str.w	r3, [lr]
 800844c:	4660      	mov	r0, ip
 800844e:	f1b8 0f00 	cmp.w	r8, #0
 8008452:	d0a0      	beq.n	8008396 <_strtol_l.constprop.0+0x1a>
 8008454:	1e69      	subs	r1, r5, #1
 8008456:	e006      	b.n	8008466 <_strtol_l.constprop.0+0xea>
 8008458:	b106      	cbz	r6, 800845c <_strtol_l.constprop.0+0xe0>
 800845a:	4240      	negs	r0, r0
 800845c:	f1b8 0f00 	cmp.w	r8, #0
 8008460:	d099      	beq.n	8008396 <_strtol_l.constprop.0+0x1a>
 8008462:	2a00      	cmp	r2, #0
 8008464:	d1f6      	bne.n	8008454 <_strtol_l.constprop.0+0xd8>
 8008466:	f8c8 1000 	str.w	r1, [r8]
 800846a:	e794      	b.n	8008396 <_strtol_l.constprop.0+0x1a>
 800846c:	0800b149 	.word	0x0800b149

08008470 <_strtol_r>:
 8008470:	f7ff bf84 	b.w	800837c <_strtol_l.constprop.0>

08008474 <_fwalk_sglue>:
 8008474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008478:	4607      	mov	r7, r0
 800847a:	4688      	mov	r8, r1
 800847c:	4614      	mov	r4, r2
 800847e:	2600      	movs	r6, #0
 8008480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008484:	f1b9 0901 	subs.w	r9, r9, #1
 8008488:	d505      	bpl.n	8008496 <_fwalk_sglue+0x22>
 800848a:	6824      	ldr	r4, [r4, #0]
 800848c:	2c00      	cmp	r4, #0
 800848e:	d1f7      	bne.n	8008480 <_fwalk_sglue+0xc>
 8008490:	4630      	mov	r0, r6
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008496:	89ab      	ldrh	r3, [r5, #12]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d907      	bls.n	80084ac <_fwalk_sglue+0x38>
 800849c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084a0:	3301      	adds	r3, #1
 80084a2:	d003      	beq.n	80084ac <_fwalk_sglue+0x38>
 80084a4:	4629      	mov	r1, r5
 80084a6:	4638      	mov	r0, r7
 80084a8:	47c0      	blx	r8
 80084aa:	4306      	orrs	r6, r0
 80084ac:	3568      	adds	r5, #104	@ 0x68
 80084ae:	e7e9      	b.n	8008484 <_fwalk_sglue+0x10>

080084b0 <strncmp>:
 80084b0:	b510      	push	{r4, lr}
 80084b2:	b16a      	cbz	r2, 80084d0 <strncmp+0x20>
 80084b4:	3901      	subs	r1, #1
 80084b6:	1884      	adds	r4, r0, r2
 80084b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d103      	bne.n	80084cc <strncmp+0x1c>
 80084c4:	42a0      	cmp	r0, r4
 80084c6:	d001      	beq.n	80084cc <strncmp+0x1c>
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	d1f5      	bne.n	80084b8 <strncmp+0x8>
 80084cc:	1ad0      	subs	r0, r2, r3
 80084ce:	bd10      	pop	{r4, pc}
 80084d0:	4610      	mov	r0, r2
 80084d2:	e7fc      	b.n	80084ce <strncmp+0x1e>

080084d4 <memset>:
 80084d4:	4402      	add	r2, r0
 80084d6:	4603      	mov	r3, r0
 80084d8:	4293      	cmp	r3, r2
 80084da:	d100      	bne.n	80084de <memset+0xa>
 80084dc:	4770      	bx	lr
 80084de:	f803 1b01 	strb.w	r1, [r3], #1
 80084e2:	e7f9      	b.n	80084d8 <memset+0x4>

080084e4 <_localeconv_r>:
 80084e4:	4800      	ldr	r0, [pc, #0]	@ (80084e8 <_localeconv_r+0x4>)
 80084e6:	4770      	bx	lr
 80084e8:	20000108 	.word	0x20000108

080084ec <__errno>:
 80084ec:	4b01      	ldr	r3, [pc, #4]	@ (80084f4 <__errno+0x8>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000184 	.word	0x20000184

080084f8 <__libc_init_array>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008530 <__libc_init_array+0x38>)
 80084fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008534 <__libc_init_array+0x3c>)
 80084fe:	1b64      	subs	r4, r4, r5
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	2600      	movs	r6, #0
 8008504:	42a6      	cmp	r6, r4
 8008506:	d109      	bne.n	800851c <__libc_init_array+0x24>
 8008508:	4d0b      	ldr	r5, [pc, #44]	@ (8008538 <__libc_init_array+0x40>)
 800850a:	4c0c      	ldr	r4, [pc, #48]	@ (800853c <__libc_init_array+0x44>)
 800850c:	f002 fd66 	bl	800afdc <_init>
 8008510:	1b64      	subs	r4, r4, r5
 8008512:	10a4      	asrs	r4, r4, #2
 8008514:	2600      	movs	r6, #0
 8008516:	42a6      	cmp	r6, r4
 8008518:	d105      	bne.n	8008526 <__libc_init_array+0x2e>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008520:	4798      	blx	r3
 8008522:	3601      	adds	r6, #1
 8008524:	e7ee      	b.n	8008504 <__libc_init_array+0xc>
 8008526:	f855 3b04 	ldr.w	r3, [r5], #4
 800852a:	4798      	blx	r3
 800852c:	3601      	adds	r6, #1
 800852e:	e7f2      	b.n	8008516 <__libc_init_array+0x1e>
 8008530:	0800b4e4 	.word	0x0800b4e4
 8008534:	0800b4e4 	.word	0x0800b4e4
 8008538:	0800b4e4 	.word	0x0800b4e4
 800853c:	0800b4e8 	.word	0x0800b4e8

08008540 <__retarget_lock_init_recursive>:
 8008540:	4770      	bx	lr

08008542 <__retarget_lock_acquire_recursive>:
 8008542:	4770      	bx	lr

08008544 <__retarget_lock_release_recursive>:
 8008544:	4770      	bx	lr

08008546 <memcpy>:
 8008546:	440a      	add	r2, r1
 8008548:	4291      	cmp	r1, r2
 800854a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800854e:	d100      	bne.n	8008552 <memcpy+0xc>
 8008550:	4770      	bx	lr
 8008552:	b510      	push	{r4, lr}
 8008554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800855c:	4291      	cmp	r1, r2
 800855e:	d1f9      	bne.n	8008554 <memcpy+0xe>
 8008560:	bd10      	pop	{r4, pc}
 8008562:	0000      	movs	r0, r0
 8008564:	0000      	movs	r0, r0
	...

08008568 <nan>:
 8008568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008570 <nan+0x8>
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	00000000 	.word	0x00000000
 8008574:	7ff80000 	.word	0x7ff80000

08008578 <nanf>:
 8008578:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008580 <nanf+0x8>
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	7fc00000 	.word	0x7fc00000

08008584 <quorem>:
 8008584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	6903      	ldr	r3, [r0, #16]
 800858a:	690c      	ldr	r4, [r1, #16]
 800858c:	42a3      	cmp	r3, r4
 800858e:	4607      	mov	r7, r0
 8008590:	db7e      	blt.n	8008690 <quorem+0x10c>
 8008592:	3c01      	subs	r4, #1
 8008594:	f101 0814 	add.w	r8, r1, #20
 8008598:	00a3      	lsls	r3, r4, #2
 800859a:	f100 0514 	add.w	r5, r0, #20
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085ae:	3301      	adds	r3, #1
 80085b0:	429a      	cmp	r2, r3
 80085b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80085ba:	d32e      	bcc.n	800861a <quorem+0x96>
 80085bc:	f04f 0a00 	mov.w	sl, #0
 80085c0:	46c4      	mov	ip, r8
 80085c2:	46ae      	mov	lr, r5
 80085c4:	46d3      	mov	fp, sl
 80085c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085ca:	b298      	uxth	r0, r3
 80085cc:	fb06 a000 	mla	r0, r6, r0, sl
 80085d0:	0c02      	lsrs	r2, r0, #16
 80085d2:	0c1b      	lsrs	r3, r3, #16
 80085d4:	fb06 2303 	mla	r3, r6, r3, r2
 80085d8:	f8de 2000 	ldr.w	r2, [lr]
 80085dc:	b280      	uxth	r0, r0
 80085de:	b292      	uxth	r2, r2
 80085e0:	1a12      	subs	r2, r2, r0
 80085e2:	445a      	add	r2, fp
 80085e4:	f8de 0000 	ldr.w	r0, [lr]
 80085e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80085f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80085f6:	b292      	uxth	r2, r2
 80085f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085fc:	45e1      	cmp	r9, ip
 80085fe:	f84e 2b04 	str.w	r2, [lr], #4
 8008602:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008606:	d2de      	bcs.n	80085c6 <quorem+0x42>
 8008608:	9b00      	ldr	r3, [sp, #0]
 800860a:	58eb      	ldr	r3, [r5, r3]
 800860c:	b92b      	cbnz	r3, 800861a <quorem+0x96>
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	3b04      	subs	r3, #4
 8008612:	429d      	cmp	r5, r3
 8008614:	461a      	mov	r2, r3
 8008616:	d32f      	bcc.n	8008678 <quorem+0xf4>
 8008618:	613c      	str	r4, [r7, #16]
 800861a:	4638      	mov	r0, r7
 800861c:	f001 fec8 	bl	800a3b0 <__mcmp>
 8008620:	2800      	cmp	r0, #0
 8008622:	db25      	blt.n	8008670 <quorem+0xec>
 8008624:	4629      	mov	r1, r5
 8008626:	2000      	movs	r0, #0
 8008628:	f858 2b04 	ldr.w	r2, [r8], #4
 800862c:	f8d1 c000 	ldr.w	ip, [r1]
 8008630:	fa1f fe82 	uxth.w	lr, r2
 8008634:	fa1f f38c 	uxth.w	r3, ip
 8008638:	eba3 030e 	sub.w	r3, r3, lr
 800863c:	4403      	add	r3, r0
 800863e:	0c12      	lsrs	r2, r2, #16
 8008640:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008644:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008648:	b29b      	uxth	r3, r3
 800864a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800864e:	45c1      	cmp	r9, r8
 8008650:	f841 3b04 	str.w	r3, [r1], #4
 8008654:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008658:	d2e6      	bcs.n	8008628 <quorem+0xa4>
 800865a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800865e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008662:	b922      	cbnz	r2, 800866e <quorem+0xea>
 8008664:	3b04      	subs	r3, #4
 8008666:	429d      	cmp	r5, r3
 8008668:	461a      	mov	r2, r3
 800866a:	d30b      	bcc.n	8008684 <quorem+0x100>
 800866c:	613c      	str	r4, [r7, #16]
 800866e:	3601      	adds	r6, #1
 8008670:	4630      	mov	r0, r6
 8008672:	b003      	add	sp, #12
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	6812      	ldr	r2, [r2, #0]
 800867a:	3b04      	subs	r3, #4
 800867c:	2a00      	cmp	r2, #0
 800867e:	d1cb      	bne.n	8008618 <quorem+0x94>
 8008680:	3c01      	subs	r4, #1
 8008682:	e7c6      	b.n	8008612 <quorem+0x8e>
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	3b04      	subs	r3, #4
 8008688:	2a00      	cmp	r2, #0
 800868a:	d1ef      	bne.n	800866c <quorem+0xe8>
 800868c:	3c01      	subs	r4, #1
 800868e:	e7ea      	b.n	8008666 <quorem+0xe2>
 8008690:	2000      	movs	r0, #0
 8008692:	e7ee      	b.n	8008672 <quorem+0xee>
 8008694:	0000      	movs	r0, r0
	...

08008698 <_dtoa_r>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	69c7      	ldr	r7, [r0, #28]
 800869e:	b099      	sub	sp, #100	@ 0x64
 80086a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086a4:	ec55 4b10 	vmov	r4, r5, d0
 80086a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80086aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80086ac:	4683      	mov	fp, r0
 80086ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80086b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086b2:	b97f      	cbnz	r7, 80086d4 <_dtoa_r+0x3c>
 80086b4:	2010      	movs	r0, #16
 80086b6:	f001 fa43 	bl	8009b40 <malloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80086c0:	b920      	cbnz	r0, 80086cc <_dtoa_r+0x34>
 80086c2:	4ba7      	ldr	r3, [pc, #668]	@ (8008960 <_dtoa_r+0x2c8>)
 80086c4:	21ef      	movs	r1, #239	@ 0xef
 80086c6:	48a7      	ldr	r0, [pc, #668]	@ (8008964 <_dtoa_r+0x2cc>)
 80086c8:	f002 f94e 	bl	800a968 <__assert_func>
 80086cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086d0:	6007      	str	r7, [r0, #0]
 80086d2:	60c7      	str	r7, [r0, #12]
 80086d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086d8:	6819      	ldr	r1, [r3, #0]
 80086da:	b159      	cbz	r1, 80086f4 <_dtoa_r+0x5c>
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	604a      	str	r2, [r1, #4]
 80086e0:	2301      	movs	r3, #1
 80086e2:	4093      	lsls	r3, r2
 80086e4:	608b      	str	r3, [r1, #8]
 80086e6:	4658      	mov	r0, fp
 80086e8:	f001 fbde 	bl	8009ea8 <_Bfree>
 80086ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	1e2b      	subs	r3, r5, #0
 80086f6:	bfb9      	ittee	lt
 80086f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80086fc:	9303      	strlt	r3, [sp, #12]
 80086fe:	2300      	movge	r3, #0
 8008700:	6033      	strge	r3, [r6, #0]
 8008702:	9f03      	ldr	r7, [sp, #12]
 8008704:	4b98      	ldr	r3, [pc, #608]	@ (8008968 <_dtoa_r+0x2d0>)
 8008706:	bfbc      	itt	lt
 8008708:	2201      	movlt	r2, #1
 800870a:	6032      	strlt	r2, [r6, #0]
 800870c:	43bb      	bics	r3, r7
 800870e:	d112      	bne.n	8008736 <_dtoa_r+0x9e>
 8008710:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008712:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800871c:	4323      	orrs	r3, r4
 800871e:	f000 854d 	beq.w	80091bc <_dtoa_r+0xb24>
 8008722:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008724:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800897c <_dtoa_r+0x2e4>
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 854f 	beq.w	80091cc <_dtoa_r+0xb34>
 800872e:	f10a 0303 	add.w	r3, sl, #3
 8008732:	f000 bd49 	b.w	80091c8 <_dtoa_r+0xb30>
 8008736:	ed9d 7b02 	vldr	d7, [sp, #8]
 800873a:	2200      	movs	r2, #0
 800873c:	ec51 0b17 	vmov	r0, r1, d7
 8008740:	2300      	movs	r3, #0
 8008742:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008746:	f7f8 f9d7 	bl	8000af8 <__aeabi_dcmpeq>
 800874a:	4680      	mov	r8, r0
 800874c:	b158      	cbz	r0, 8008766 <_dtoa_r+0xce>
 800874e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008750:	2301      	movs	r3, #1
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008756:	b113      	cbz	r3, 800875e <_dtoa_r+0xc6>
 8008758:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800875a:	4b84      	ldr	r3, [pc, #528]	@ (800896c <_dtoa_r+0x2d4>)
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008980 <_dtoa_r+0x2e8>
 8008762:	f000 bd33 	b.w	80091cc <_dtoa_r+0xb34>
 8008766:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800876a:	aa16      	add	r2, sp, #88	@ 0x58
 800876c:	a917      	add	r1, sp, #92	@ 0x5c
 800876e:	4658      	mov	r0, fp
 8008770:	f001 ff3e 	bl	800a5f0 <__d2b>
 8008774:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008778:	4681      	mov	r9, r0
 800877a:	2e00      	cmp	r6, #0
 800877c:	d077      	beq.n	800886e <_dtoa_r+0x1d6>
 800877e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008780:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800878c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008790:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008794:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008798:	4619      	mov	r1, r3
 800879a:	2200      	movs	r2, #0
 800879c:	4b74      	ldr	r3, [pc, #464]	@ (8008970 <_dtoa_r+0x2d8>)
 800879e:	f7f7 fd8b 	bl	80002b8 <__aeabi_dsub>
 80087a2:	a369      	add	r3, pc, #420	@ (adr r3, 8008948 <_dtoa_r+0x2b0>)
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	f7f7 ff3e 	bl	8000628 <__aeabi_dmul>
 80087ac:	a368      	add	r3, pc, #416	@ (adr r3, 8008950 <_dtoa_r+0x2b8>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f7 fd83 	bl	80002bc <__adddf3>
 80087b6:	4604      	mov	r4, r0
 80087b8:	4630      	mov	r0, r6
 80087ba:	460d      	mov	r5, r1
 80087bc:	f7f7 feca 	bl	8000554 <__aeabi_i2d>
 80087c0:	a365      	add	r3, pc, #404	@ (adr r3, 8008958 <_dtoa_r+0x2c0>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f7f7 ff2f 	bl	8000628 <__aeabi_dmul>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4620      	mov	r0, r4
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7f7 fd73 	bl	80002bc <__adddf3>
 80087d6:	4604      	mov	r4, r0
 80087d8:	460d      	mov	r5, r1
 80087da:	f7f8 f9d5 	bl	8000b88 <__aeabi_d2iz>
 80087de:	2200      	movs	r2, #0
 80087e0:	4607      	mov	r7, r0
 80087e2:	2300      	movs	r3, #0
 80087e4:	4620      	mov	r0, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f8 f990 	bl	8000b0c <__aeabi_dcmplt>
 80087ec:	b140      	cbz	r0, 8008800 <_dtoa_r+0x168>
 80087ee:	4638      	mov	r0, r7
 80087f0:	f7f7 feb0 	bl	8000554 <__aeabi_i2d>
 80087f4:	4622      	mov	r2, r4
 80087f6:	462b      	mov	r3, r5
 80087f8:	f7f8 f97e 	bl	8000af8 <__aeabi_dcmpeq>
 80087fc:	b900      	cbnz	r0, 8008800 <_dtoa_r+0x168>
 80087fe:	3f01      	subs	r7, #1
 8008800:	2f16      	cmp	r7, #22
 8008802:	d851      	bhi.n	80088a8 <_dtoa_r+0x210>
 8008804:	4b5b      	ldr	r3, [pc, #364]	@ (8008974 <_dtoa_r+0x2dc>)
 8008806:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008812:	f7f8 f97b 	bl	8000b0c <__aeabi_dcmplt>
 8008816:	2800      	cmp	r0, #0
 8008818:	d048      	beq.n	80088ac <_dtoa_r+0x214>
 800881a:	3f01      	subs	r7, #1
 800881c:	2300      	movs	r3, #0
 800881e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008820:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008822:	1b9b      	subs	r3, r3, r6
 8008824:	1e5a      	subs	r2, r3, #1
 8008826:	bf44      	itt	mi
 8008828:	f1c3 0801 	rsbmi	r8, r3, #1
 800882c:	2300      	movmi	r3, #0
 800882e:	9208      	str	r2, [sp, #32]
 8008830:	bf54      	ite	pl
 8008832:	f04f 0800 	movpl.w	r8, #0
 8008836:	9308      	strmi	r3, [sp, #32]
 8008838:	2f00      	cmp	r7, #0
 800883a:	db39      	blt.n	80088b0 <_dtoa_r+0x218>
 800883c:	9b08      	ldr	r3, [sp, #32]
 800883e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008840:	443b      	add	r3, r7
 8008842:	9308      	str	r3, [sp, #32]
 8008844:	2300      	movs	r3, #0
 8008846:	930a      	str	r3, [sp, #40]	@ 0x28
 8008848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884a:	2b09      	cmp	r3, #9
 800884c:	d864      	bhi.n	8008918 <_dtoa_r+0x280>
 800884e:	2b05      	cmp	r3, #5
 8008850:	bfc4      	itt	gt
 8008852:	3b04      	subgt	r3, #4
 8008854:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008858:	f1a3 0302 	sub.w	r3, r3, #2
 800885c:	bfcc      	ite	gt
 800885e:	2400      	movgt	r4, #0
 8008860:	2401      	movle	r4, #1
 8008862:	2b03      	cmp	r3, #3
 8008864:	d863      	bhi.n	800892e <_dtoa_r+0x296>
 8008866:	e8df f003 	tbb	[pc, r3]
 800886a:	372a      	.short	0x372a
 800886c:	5535      	.short	0x5535
 800886e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008872:	441e      	add	r6, r3
 8008874:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008878:	2b20      	cmp	r3, #32
 800887a:	bfc1      	itttt	gt
 800887c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008880:	409f      	lslgt	r7, r3
 8008882:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008886:	fa24 f303 	lsrgt.w	r3, r4, r3
 800888a:	bfd6      	itet	le
 800888c:	f1c3 0320 	rsble	r3, r3, #32
 8008890:	ea47 0003 	orrgt.w	r0, r7, r3
 8008894:	fa04 f003 	lslle.w	r0, r4, r3
 8008898:	f7f7 fe4c 	bl	8000534 <__aeabi_ui2d>
 800889c:	2201      	movs	r2, #1
 800889e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088a2:	3e01      	subs	r6, #1
 80088a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80088a6:	e777      	b.n	8008798 <_dtoa_r+0x100>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e7b8      	b.n	800881e <_dtoa_r+0x186>
 80088ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80088ae:	e7b7      	b.n	8008820 <_dtoa_r+0x188>
 80088b0:	427b      	negs	r3, r7
 80088b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088b4:	2300      	movs	r3, #0
 80088b6:	eba8 0807 	sub.w	r8, r8, r7
 80088ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088bc:	e7c4      	b.n	8008848 <_dtoa_r+0x1b0>
 80088be:	2300      	movs	r3, #0
 80088c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dc35      	bgt.n	8008934 <_dtoa_r+0x29c>
 80088c8:	2301      	movs	r3, #1
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	9307      	str	r3, [sp, #28]
 80088ce:	461a      	mov	r2, r3
 80088d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80088d2:	e00b      	b.n	80088ec <_dtoa_r+0x254>
 80088d4:	2301      	movs	r3, #1
 80088d6:	e7f3      	b.n	80088c0 <_dtoa_r+0x228>
 80088d8:	2300      	movs	r3, #0
 80088da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088de:	18fb      	adds	r3, r7, r3
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	bfb8      	it	lt
 80088ea:	2301      	movlt	r3, #1
 80088ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80088f0:	2100      	movs	r1, #0
 80088f2:	2204      	movs	r2, #4
 80088f4:	f102 0514 	add.w	r5, r2, #20
 80088f8:	429d      	cmp	r5, r3
 80088fa:	d91f      	bls.n	800893c <_dtoa_r+0x2a4>
 80088fc:	6041      	str	r1, [r0, #4]
 80088fe:	4658      	mov	r0, fp
 8008900:	f001 fa92 	bl	8009e28 <_Balloc>
 8008904:	4682      	mov	sl, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d13c      	bne.n	8008984 <_dtoa_r+0x2ec>
 800890a:	4b1b      	ldr	r3, [pc, #108]	@ (8008978 <_dtoa_r+0x2e0>)
 800890c:	4602      	mov	r2, r0
 800890e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008912:	e6d8      	b.n	80086c6 <_dtoa_r+0x2e>
 8008914:	2301      	movs	r3, #1
 8008916:	e7e0      	b.n	80088da <_dtoa_r+0x242>
 8008918:	2401      	movs	r4, #1
 800891a:	2300      	movs	r3, #0
 800891c:	9309      	str	r3, [sp, #36]	@ 0x24
 800891e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	9307      	str	r3, [sp, #28]
 8008928:	2200      	movs	r2, #0
 800892a:	2312      	movs	r3, #18
 800892c:	e7d0      	b.n	80088d0 <_dtoa_r+0x238>
 800892e:	2301      	movs	r3, #1
 8008930:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008932:	e7f5      	b.n	8008920 <_dtoa_r+0x288>
 8008934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	9307      	str	r3, [sp, #28]
 800893a:	e7d7      	b.n	80088ec <_dtoa_r+0x254>
 800893c:	3101      	adds	r1, #1
 800893e:	0052      	lsls	r2, r2, #1
 8008940:	e7d8      	b.n	80088f4 <_dtoa_r+0x25c>
 8008942:	bf00      	nop
 8008944:	f3af 8000 	nop.w
 8008948:	636f4361 	.word	0x636f4361
 800894c:	3fd287a7 	.word	0x3fd287a7
 8008950:	8b60c8b3 	.word	0x8b60c8b3
 8008954:	3fc68a28 	.word	0x3fc68a28
 8008958:	509f79fb 	.word	0x509f79fb
 800895c:	3fd34413 	.word	0x3fd34413
 8008960:	0800b256 	.word	0x0800b256
 8008964:	0800b26d 	.word	0x0800b26d
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	0800b0c5 	.word	0x0800b0c5
 8008970:	3ff80000 	.word	0x3ff80000
 8008974:	0800b3d8 	.word	0x0800b3d8
 8008978:	0800b2c5 	.word	0x0800b2c5
 800897c:	0800b252 	.word	0x0800b252
 8008980:	0800b0c4 	.word	0x0800b0c4
 8008984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008988:	6018      	str	r0, [r3, #0]
 800898a:	9b07      	ldr	r3, [sp, #28]
 800898c:	2b0e      	cmp	r3, #14
 800898e:	f200 80a4 	bhi.w	8008ada <_dtoa_r+0x442>
 8008992:	2c00      	cmp	r4, #0
 8008994:	f000 80a1 	beq.w	8008ada <_dtoa_r+0x442>
 8008998:	2f00      	cmp	r7, #0
 800899a:	dd33      	ble.n	8008a04 <_dtoa_r+0x36c>
 800899c:	4bad      	ldr	r3, [pc, #692]	@ (8008c54 <_dtoa_r+0x5bc>)
 800899e:	f007 020f 	and.w	r2, r7, #15
 80089a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089a6:	ed93 7b00 	vldr	d7, [r3]
 80089aa:	05f8      	lsls	r0, r7, #23
 80089ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089b4:	d516      	bpl.n	80089e4 <_dtoa_r+0x34c>
 80089b6:	4ba8      	ldr	r3, [pc, #672]	@ (8008c58 <_dtoa_r+0x5c0>)
 80089b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089c0:	f7f7 ff5c 	bl	800087c <__aeabi_ddiv>
 80089c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089c8:	f004 040f 	and.w	r4, r4, #15
 80089cc:	2603      	movs	r6, #3
 80089ce:	4da2      	ldr	r5, [pc, #648]	@ (8008c58 <_dtoa_r+0x5c0>)
 80089d0:	b954      	cbnz	r4, 80089e8 <_dtoa_r+0x350>
 80089d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089da:	f7f7 ff4f 	bl	800087c <__aeabi_ddiv>
 80089de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e2:	e028      	b.n	8008a36 <_dtoa_r+0x39e>
 80089e4:	2602      	movs	r6, #2
 80089e6:	e7f2      	b.n	80089ce <_dtoa_r+0x336>
 80089e8:	07e1      	lsls	r1, r4, #31
 80089ea:	d508      	bpl.n	80089fe <_dtoa_r+0x366>
 80089ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089f4:	f7f7 fe18 	bl	8000628 <__aeabi_dmul>
 80089f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089fc:	3601      	adds	r6, #1
 80089fe:	1064      	asrs	r4, r4, #1
 8008a00:	3508      	adds	r5, #8
 8008a02:	e7e5      	b.n	80089d0 <_dtoa_r+0x338>
 8008a04:	f000 80d2 	beq.w	8008bac <_dtoa_r+0x514>
 8008a08:	427c      	negs	r4, r7
 8008a0a:	4b92      	ldr	r3, [pc, #584]	@ (8008c54 <_dtoa_r+0x5bc>)
 8008a0c:	4d92      	ldr	r5, [pc, #584]	@ (8008c58 <_dtoa_r+0x5c0>)
 8008a0e:	f004 020f 	and.w	r2, r4, #15
 8008a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a1e:	f7f7 fe03 	bl	8000628 <__aeabi_dmul>
 8008a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a26:	1124      	asrs	r4, r4, #4
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2602      	movs	r6, #2
 8008a2c:	2c00      	cmp	r4, #0
 8008a2e:	f040 80b2 	bne.w	8008b96 <_dtoa_r+0x4fe>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1d3      	bne.n	80089de <_dtoa_r+0x346>
 8008a36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80b7 	beq.w	8008bb0 <_dtoa_r+0x518>
 8008a42:	4b86      	ldr	r3, [pc, #536]	@ (8008c5c <_dtoa_r+0x5c4>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f8 f85f 	bl	8000b0c <__aeabi_dcmplt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f000 80ae 	beq.w	8008bb0 <_dtoa_r+0x518>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 80aa 	beq.w	8008bb0 <_dtoa_r+0x518>
 8008a5c:	9b00      	ldr	r3, [sp, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	dd37      	ble.n	8008ad2 <_dtoa_r+0x43a>
 8008a62:	1e7b      	subs	r3, r7, #1
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	4620      	mov	r0, r4
 8008a68:	4b7d      	ldr	r3, [pc, #500]	@ (8008c60 <_dtoa_r+0x5c8>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7f7 fddb 	bl	8000628 <__aeabi_dmul>
 8008a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a76:	9c00      	ldr	r4, [sp, #0]
 8008a78:	3601      	adds	r6, #1
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7f7 fd6a 	bl	8000554 <__aeabi_i2d>
 8008a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a84:	f7f7 fdd0 	bl	8000628 <__aeabi_dmul>
 8008a88:	4b76      	ldr	r3, [pc, #472]	@ (8008c64 <_dtoa_r+0x5cc>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f7f7 fc16 	bl	80002bc <__adddf3>
 8008a90:	4605      	mov	r5, r0
 8008a92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a96:	2c00      	cmp	r4, #0
 8008a98:	f040 808d 	bne.w	8008bb6 <_dtoa_r+0x51e>
 8008a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa0:	4b71      	ldr	r3, [pc, #452]	@ (8008c68 <_dtoa_r+0x5d0>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f7f7 fc08 	bl	80002b8 <__aeabi_dsub>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4633      	mov	r3, r6
 8008ab4:	f7f8 f848 	bl	8000b48 <__aeabi_dcmpgt>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	f040 828b 	bne.w	8008fd4 <_dtoa_r+0x93c>
 8008abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ac8:	f7f8 f820 	bl	8000b0c <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f040 8128 	bne.w	8008d22 <_dtoa_r+0x68a>
 8008ad2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ad6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008ada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f2c0 815a 	blt.w	8008d96 <_dtoa_r+0x6fe>
 8008ae2:	2f0e      	cmp	r7, #14
 8008ae4:	f300 8157 	bgt.w	8008d96 <_dtoa_r+0x6fe>
 8008ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8008c54 <_dtoa_r+0x5bc>)
 8008aea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008aee:	ed93 7b00 	vldr	d7, [r3]
 8008af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	ed8d 7b00 	vstr	d7, [sp]
 8008afa:	da03      	bge.n	8008b04 <_dtoa_r+0x46c>
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f340 8101 	ble.w	8008d06 <_dtoa_r+0x66e>
 8008b04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b08:	4656      	mov	r6, sl
 8008b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	f7f7 feb3 	bl	800087c <__aeabi_ddiv>
 8008b16:	f7f8 f837 	bl	8000b88 <__aeabi_d2iz>
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	f7f7 fd1a 	bl	8000554 <__aeabi_i2d>
 8008b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b24:	f7f7 fd80 	bl	8000628 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b34:	f7f7 fbc0 	bl	80002b8 <__aeabi_dsub>
 8008b38:	f806 4b01 	strb.w	r4, [r6], #1
 8008b3c:	9d07      	ldr	r5, [sp, #28]
 8008b3e:	eba6 040a 	sub.w	r4, r6, sl
 8008b42:	42a5      	cmp	r5, r4
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	f040 8117 	bne.w	8008d7a <_dtoa_r+0x6e2>
 8008b4c:	f7f7 fbb6 	bl	80002bc <__adddf3>
 8008b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b54:	4604      	mov	r4, r0
 8008b56:	460d      	mov	r5, r1
 8008b58:	f7f7 fff6 	bl	8000b48 <__aeabi_dcmpgt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f040 80f9 	bne.w	8008d54 <_dtoa_r+0x6bc>
 8008b62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b66:	4620      	mov	r0, r4
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7f7 ffc5 	bl	8000af8 <__aeabi_dcmpeq>
 8008b6e:	b118      	cbz	r0, 8008b78 <_dtoa_r+0x4e0>
 8008b70:	f018 0f01 	tst.w	r8, #1
 8008b74:	f040 80ee 	bne.w	8008d54 <_dtoa_r+0x6bc>
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f001 f994 	bl	8009ea8 <_Bfree>
 8008b80:	2300      	movs	r3, #0
 8008b82:	7033      	strb	r3, [r6, #0]
 8008b84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b86:	3701      	adds	r7, #1
 8008b88:	601f      	str	r7, [r3, #0]
 8008b8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 831d 	beq.w	80091cc <_dtoa_r+0xb34>
 8008b92:	601e      	str	r6, [r3, #0]
 8008b94:	e31a      	b.n	80091cc <_dtoa_r+0xb34>
 8008b96:	07e2      	lsls	r2, r4, #31
 8008b98:	d505      	bpl.n	8008ba6 <_dtoa_r+0x50e>
 8008b9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b9e:	f7f7 fd43 	bl	8000628 <__aeabi_dmul>
 8008ba2:	3601      	adds	r6, #1
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	1064      	asrs	r4, r4, #1
 8008ba8:	3508      	adds	r5, #8
 8008baa:	e73f      	b.n	8008a2c <_dtoa_r+0x394>
 8008bac:	2602      	movs	r6, #2
 8008bae:	e742      	b.n	8008a36 <_dtoa_r+0x39e>
 8008bb0:	9c07      	ldr	r4, [sp, #28]
 8008bb2:	9704      	str	r7, [sp, #16]
 8008bb4:	e761      	b.n	8008a7a <_dtoa_r+0x3e2>
 8008bb6:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <_dtoa_r+0x5bc>)
 8008bb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bc2:	4454      	add	r4, sl
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d053      	beq.n	8008c70 <_dtoa_r+0x5d8>
 8008bc8:	4928      	ldr	r1, [pc, #160]	@ (8008c6c <_dtoa_r+0x5d4>)
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f7f7 fe56 	bl	800087c <__aeabi_ddiv>
 8008bd0:	4633      	mov	r3, r6
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	f7f7 fb70 	bl	80002b8 <__aeabi_dsub>
 8008bd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bdc:	4656      	mov	r6, sl
 8008bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be2:	f7f7 ffd1 	bl	8000b88 <__aeabi_d2iz>
 8008be6:	4605      	mov	r5, r0
 8008be8:	f7f7 fcb4 	bl	8000554 <__aeabi_i2d>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf4:	f7f7 fb60 	bl	80002b8 <__aeabi_dsub>
 8008bf8:	3530      	adds	r5, #48	@ 0x30
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c02:	f806 5b01 	strb.w	r5, [r6], #1
 8008c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c0a:	f7f7 ff7f 	bl	8000b0c <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d171      	bne.n	8008cf6 <_dtoa_r+0x65e>
 8008c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c16:	4911      	ldr	r1, [pc, #68]	@ (8008c5c <_dtoa_r+0x5c4>)
 8008c18:	2000      	movs	r0, #0
 8008c1a:	f7f7 fb4d 	bl	80002b8 <__aeabi_dsub>
 8008c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c22:	f7f7 ff73 	bl	8000b0c <__aeabi_dcmplt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f040 8095 	bne.w	8008d56 <_dtoa_r+0x6be>
 8008c2c:	42a6      	cmp	r6, r4
 8008c2e:	f43f af50 	beq.w	8008ad2 <_dtoa_r+0x43a>
 8008c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c36:	4b0a      	ldr	r3, [pc, #40]	@ (8008c60 <_dtoa_r+0x5c8>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f7f7 fcf5 	bl	8000628 <__aeabi_dmul>
 8008c3e:	4b08      	ldr	r3, [pc, #32]	@ (8008c60 <_dtoa_r+0x5c8>)
 8008c40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c44:	2200      	movs	r2, #0
 8008c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c4a:	f7f7 fced 	bl	8000628 <__aeabi_dmul>
 8008c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c52:	e7c4      	b.n	8008bde <_dtoa_r+0x546>
 8008c54:	0800b3d8 	.word	0x0800b3d8
 8008c58:	0800b3b0 	.word	0x0800b3b0
 8008c5c:	3ff00000 	.word	0x3ff00000
 8008c60:	40240000 	.word	0x40240000
 8008c64:	401c0000 	.word	0x401c0000
 8008c68:	40140000 	.word	0x40140000
 8008c6c:	3fe00000 	.word	0x3fe00000
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	f7f7 fcd8 	bl	8000628 <__aeabi_dmul>
 8008c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c7c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008c7e:	4656      	mov	r6, sl
 8008c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c84:	f7f7 ff80 	bl	8000b88 <__aeabi_d2iz>
 8008c88:	4605      	mov	r5, r0
 8008c8a:	f7f7 fc63 	bl	8000554 <__aeabi_i2d>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c96:	f7f7 fb0f 	bl	80002b8 <__aeabi_dsub>
 8008c9a:	3530      	adds	r5, #48	@ 0x30
 8008c9c:	f806 5b01 	strb.w	r5, [r6], #1
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	42a6      	cmp	r6, r4
 8008ca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	d124      	bne.n	8008cfa <_dtoa_r+0x662>
 8008cb0:	4bac      	ldr	r3, [pc, #688]	@ (8008f64 <_dtoa_r+0x8cc>)
 8008cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cb6:	f7f7 fb01 	bl	80002bc <__adddf3>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc2:	f7f7 ff41 	bl	8000b48 <__aeabi_dcmpgt>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d145      	bne.n	8008d56 <_dtoa_r+0x6be>
 8008cca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cce:	49a5      	ldr	r1, [pc, #660]	@ (8008f64 <_dtoa_r+0x8cc>)
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	f7f7 faf1 	bl	80002b8 <__aeabi_dsub>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cde:	f7f7 ff15 	bl	8000b0c <__aeabi_dcmplt>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f43f aef5 	beq.w	8008ad2 <_dtoa_r+0x43a>
 8008ce8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008cea:	1e73      	subs	r3, r6, #1
 8008cec:	9315      	str	r3, [sp, #84]	@ 0x54
 8008cee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cf2:	2b30      	cmp	r3, #48	@ 0x30
 8008cf4:	d0f8      	beq.n	8008ce8 <_dtoa_r+0x650>
 8008cf6:	9f04      	ldr	r7, [sp, #16]
 8008cf8:	e73e      	b.n	8008b78 <_dtoa_r+0x4e0>
 8008cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8008f68 <_dtoa_r+0x8d0>)
 8008cfc:	f7f7 fc94 	bl	8000628 <__aeabi_dmul>
 8008d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d04:	e7bc      	b.n	8008c80 <_dtoa_r+0x5e8>
 8008d06:	d10c      	bne.n	8008d22 <_dtoa_r+0x68a>
 8008d08:	4b98      	ldr	r3, [pc, #608]	@ (8008f6c <_dtoa_r+0x8d4>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d10:	f7f7 fc8a 	bl	8000628 <__aeabi_dmul>
 8008d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d18:	f7f7 ff0c 	bl	8000b34 <__aeabi_dcmpge>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	f000 8157 	beq.w	8008fd0 <_dtoa_r+0x938>
 8008d22:	2400      	movs	r4, #0
 8008d24:	4625      	mov	r5, r4
 8008d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	4656      	mov	r6, sl
 8008d2e:	2700      	movs	r7, #0
 8008d30:	4621      	mov	r1, r4
 8008d32:	4658      	mov	r0, fp
 8008d34:	f001 f8b8 	bl	8009ea8 <_Bfree>
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	d0dc      	beq.n	8008cf6 <_dtoa_r+0x65e>
 8008d3c:	b12f      	cbz	r7, 8008d4a <_dtoa_r+0x6b2>
 8008d3e:	42af      	cmp	r7, r5
 8008d40:	d003      	beq.n	8008d4a <_dtoa_r+0x6b2>
 8008d42:	4639      	mov	r1, r7
 8008d44:	4658      	mov	r0, fp
 8008d46:	f001 f8af 	bl	8009ea8 <_Bfree>
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f001 f8ab 	bl	8009ea8 <_Bfree>
 8008d52:	e7d0      	b.n	8008cf6 <_dtoa_r+0x65e>
 8008d54:	9704      	str	r7, [sp, #16]
 8008d56:	4633      	mov	r3, r6
 8008d58:	461e      	mov	r6, r3
 8008d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d5e:	2a39      	cmp	r2, #57	@ 0x39
 8008d60:	d107      	bne.n	8008d72 <_dtoa_r+0x6da>
 8008d62:	459a      	cmp	sl, r3
 8008d64:	d1f8      	bne.n	8008d58 <_dtoa_r+0x6c0>
 8008d66:	9a04      	ldr	r2, [sp, #16]
 8008d68:	3201      	adds	r2, #1
 8008d6a:	9204      	str	r2, [sp, #16]
 8008d6c:	2230      	movs	r2, #48	@ 0x30
 8008d6e:	f88a 2000 	strb.w	r2, [sl]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	3201      	adds	r2, #1
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	e7bd      	b.n	8008cf6 <_dtoa_r+0x65e>
 8008d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8008f68 <_dtoa_r+0x8d0>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f7f7 fc53 	bl	8000628 <__aeabi_dmul>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	460d      	mov	r5, r1
 8008d8a:	f7f7 feb5 	bl	8000af8 <__aeabi_dcmpeq>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f aebb 	beq.w	8008b0a <_dtoa_r+0x472>
 8008d94:	e6f0      	b.n	8008b78 <_dtoa_r+0x4e0>
 8008d96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d98:	2a00      	cmp	r2, #0
 8008d9a:	f000 80db 	beq.w	8008f54 <_dtoa_r+0x8bc>
 8008d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da0:	2a01      	cmp	r2, #1
 8008da2:	f300 80bf 	bgt.w	8008f24 <_dtoa_r+0x88c>
 8008da6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008da8:	2a00      	cmp	r2, #0
 8008daa:	f000 80b7 	beq.w	8008f1c <_dtoa_r+0x884>
 8008dae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008db2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008db4:	4646      	mov	r6, r8
 8008db6:	9a08      	ldr	r2, [sp, #32]
 8008db8:	2101      	movs	r1, #1
 8008dba:	441a      	add	r2, r3
 8008dbc:	4658      	mov	r0, fp
 8008dbe:	4498      	add	r8, r3
 8008dc0:	9208      	str	r2, [sp, #32]
 8008dc2:	f001 f96f 	bl	800a0a4 <__i2b>
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	b15e      	cbz	r6, 8008de2 <_dtoa_r+0x74a>
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dd08      	ble.n	8008de2 <_dtoa_r+0x74a>
 8008dd0:	42b3      	cmp	r3, r6
 8008dd2:	9a08      	ldr	r2, [sp, #32]
 8008dd4:	bfa8      	it	ge
 8008dd6:	4633      	movge	r3, r6
 8008dd8:	eba8 0803 	sub.w	r8, r8, r3
 8008ddc:	1af6      	subs	r6, r6, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	9308      	str	r3, [sp, #32]
 8008de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008de4:	b1f3      	cbz	r3, 8008e24 <_dtoa_r+0x78c>
 8008de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 80b7 	beq.w	8008f5c <_dtoa_r+0x8c4>
 8008dee:	b18c      	cbz	r4, 8008e14 <_dtoa_r+0x77c>
 8008df0:	4629      	mov	r1, r5
 8008df2:	4622      	mov	r2, r4
 8008df4:	4658      	mov	r0, fp
 8008df6:	f001 fa15 	bl	800a224 <__pow5mult>
 8008dfa:	464a      	mov	r2, r9
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	4605      	mov	r5, r0
 8008e00:	4658      	mov	r0, fp
 8008e02:	f001 f965 	bl	800a0d0 <__multiply>
 8008e06:	4649      	mov	r1, r9
 8008e08:	9004      	str	r0, [sp, #16]
 8008e0a:	4658      	mov	r0, fp
 8008e0c:	f001 f84c 	bl	8009ea8 <_Bfree>
 8008e10:	9b04      	ldr	r3, [sp, #16]
 8008e12:	4699      	mov	r9, r3
 8008e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e16:	1b1a      	subs	r2, r3, r4
 8008e18:	d004      	beq.n	8008e24 <_dtoa_r+0x78c>
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4658      	mov	r0, fp
 8008e1e:	f001 fa01 	bl	800a224 <__pow5mult>
 8008e22:	4681      	mov	r9, r0
 8008e24:	2101      	movs	r1, #1
 8008e26:	4658      	mov	r0, fp
 8008e28:	f001 f93c 	bl	800a0a4 <__i2b>
 8008e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e2e:	4604      	mov	r4, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 81cf 	beq.w	80091d4 <_dtoa_r+0xb3c>
 8008e36:	461a      	mov	r2, r3
 8008e38:	4601      	mov	r1, r0
 8008e3a:	4658      	mov	r0, fp
 8008e3c:	f001 f9f2 	bl	800a224 <__pow5mult>
 8008e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	4604      	mov	r4, r0
 8008e46:	f300 8095 	bgt.w	8008f74 <_dtoa_r+0x8dc>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 8087 	bne.w	8008f60 <_dtoa_r+0x8c8>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f040 8089 	bne.w	8008f70 <_dtoa_r+0x8d8>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e64:	0d1b      	lsrs	r3, r3, #20
 8008e66:	051b      	lsls	r3, r3, #20
 8008e68:	b12b      	cbz	r3, 8008e76 <_dtoa_r+0x7de>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	9308      	str	r3, [sp, #32]
 8008e70:	f108 0801 	add.w	r8, r8, #1
 8008e74:	2301      	movs	r3, #1
 8008e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 81b0 	beq.w	80091e0 <_dtoa_r+0xb48>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e86:	6918      	ldr	r0, [r3, #16]
 8008e88:	f001 f8c0 	bl	800a00c <__hi0bits>
 8008e8c:	f1c0 0020 	rsb	r0, r0, #32
 8008e90:	9b08      	ldr	r3, [sp, #32]
 8008e92:	4418      	add	r0, r3
 8008e94:	f010 001f 	ands.w	r0, r0, #31
 8008e98:	d077      	beq.n	8008f8a <_dtoa_r+0x8f2>
 8008e9a:	f1c0 0320 	rsb	r3, r0, #32
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	dd6b      	ble.n	8008f7a <_dtoa_r+0x8e2>
 8008ea2:	9b08      	ldr	r3, [sp, #32]
 8008ea4:	f1c0 001c 	rsb	r0, r0, #28
 8008ea8:	4403      	add	r3, r0
 8008eaa:	4480      	add	r8, r0
 8008eac:	4406      	add	r6, r0
 8008eae:	9308      	str	r3, [sp, #32]
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	dd05      	ble.n	8008ec2 <_dtoa_r+0x82a>
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4642      	mov	r2, r8
 8008eba:	4658      	mov	r0, fp
 8008ebc:	f001 fa0c 	bl	800a2d8 <__lshift>
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	9b08      	ldr	r3, [sp, #32]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dd05      	ble.n	8008ed4 <_dtoa_r+0x83c>
 8008ec8:	4621      	mov	r1, r4
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f001 fa03 	bl	800a2d8 <__lshift>
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d059      	beq.n	8008f8e <_dtoa_r+0x8f6>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4648      	mov	r0, r9
 8008ede:	f001 fa67 	bl	800a3b0 <__mcmp>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	da53      	bge.n	8008f8e <_dtoa_r+0x8f6>
 8008ee6:	1e7b      	subs	r3, r7, #1
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	4649      	mov	r1, r9
 8008eec:	2300      	movs	r3, #0
 8008eee:	220a      	movs	r2, #10
 8008ef0:	4658      	mov	r0, fp
 8008ef2:	f000 fffb 	bl	8009eec <__multadd>
 8008ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ef8:	4681      	mov	r9, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8172 	beq.w	80091e4 <_dtoa_r+0xb4c>
 8008f00:	2300      	movs	r3, #0
 8008f02:	4629      	mov	r1, r5
 8008f04:	220a      	movs	r2, #10
 8008f06:	4658      	mov	r0, fp
 8008f08:	f000 fff0 	bl	8009eec <__multadd>
 8008f0c:	9b00      	ldr	r3, [sp, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	4605      	mov	r5, r0
 8008f12:	dc67      	bgt.n	8008fe4 <_dtoa_r+0x94c>
 8008f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	dc41      	bgt.n	8008f9e <_dtoa_r+0x906>
 8008f1a:	e063      	b.n	8008fe4 <_dtoa_r+0x94c>
 8008f1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f22:	e746      	b.n	8008db2 <_dtoa_r+0x71a>
 8008f24:	9b07      	ldr	r3, [sp, #28]
 8008f26:	1e5c      	subs	r4, r3, #1
 8008f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	bfbf      	itttt	lt
 8008f2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f34:	1ae3      	sublt	r3, r4, r3
 8008f36:	bfb4      	ite	lt
 8008f38:	18d2      	addlt	r2, r2, r3
 8008f3a:	1b1c      	subge	r4, r3, r4
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	bfbc      	itt	lt
 8008f40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f42:	2400      	movlt	r4, #0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bfb5      	itete	lt
 8008f48:	eba8 0603 	sublt.w	r6, r8, r3
 8008f4c:	9b07      	ldrge	r3, [sp, #28]
 8008f4e:	2300      	movlt	r3, #0
 8008f50:	4646      	movge	r6, r8
 8008f52:	e730      	b.n	8008db6 <_dtoa_r+0x71e>
 8008f54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f58:	4646      	mov	r6, r8
 8008f5a:	e735      	b.n	8008dc8 <_dtoa_r+0x730>
 8008f5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f5e:	e75c      	b.n	8008e1a <_dtoa_r+0x782>
 8008f60:	2300      	movs	r3, #0
 8008f62:	e788      	b.n	8008e76 <_dtoa_r+0x7de>
 8008f64:	3fe00000 	.word	0x3fe00000
 8008f68:	40240000 	.word	0x40240000
 8008f6c:	40140000 	.word	0x40140000
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	e780      	b.n	8008e76 <_dtoa_r+0x7de>
 8008f74:	2300      	movs	r3, #0
 8008f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f78:	e782      	b.n	8008e80 <_dtoa_r+0x7e8>
 8008f7a:	d099      	beq.n	8008eb0 <_dtoa_r+0x818>
 8008f7c:	9a08      	ldr	r2, [sp, #32]
 8008f7e:	331c      	adds	r3, #28
 8008f80:	441a      	add	r2, r3
 8008f82:	4498      	add	r8, r3
 8008f84:	441e      	add	r6, r3
 8008f86:	9208      	str	r2, [sp, #32]
 8008f88:	e792      	b.n	8008eb0 <_dtoa_r+0x818>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	e7f6      	b.n	8008f7c <_dtoa_r+0x8e4>
 8008f8e:	9b07      	ldr	r3, [sp, #28]
 8008f90:	9704      	str	r7, [sp, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dc20      	bgt.n	8008fd8 <_dtoa_r+0x940>
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	dd1e      	ble.n	8008fdc <_dtoa_r+0x944>
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f47f aec0 	bne.w	8008d26 <_dtoa_r+0x68e>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	2205      	movs	r2, #5
 8008faa:	4658      	mov	r0, fp
 8008fac:	f000 ff9e 	bl	8009eec <__multadd>
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f001 f9fb 	bl	800a3b0 <__mcmp>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f77f aeb3 	ble.w	8008d26 <_dtoa_r+0x68e>
 8008fc0:	4656      	mov	r6, sl
 8008fc2:	2331      	movs	r3, #49	@ 0x31
 8008fc4:	f806 3b01 	strb.w	r3, [r6], #1
 8008fc8:	9b04      	ldr	r3, [sp, #16]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	e6ae      	b.n	8008d2e <_dtoa_r+0x696>
 8008fd0:	9c07      	ldr	r4, [sp, #28]
 8008fd2:	9704      	str	r7, [sp, #16]
 8008fd4:	4625      	mov	r5, r4
 8008fd6:	e7f3      	b.n	8008fc0 <_dtoa_r+0x928>
 8008fd8:	9b07      	ldr	r3, [sp, #28]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 8104 	beq.w	80091ec <_dtoa_r+0xb54>
 8008fe4:	2e00      	cmp	r6, #0
 8008fe6:	dd05      	ble.n	8008ff4 <_dtoa_r+0x95c>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4632      	mov	r2, r6
 8008fec:	4658      	mov	r0, fp
 8008fee:	f001 f973 	bl	800a2d8 <__lshift>
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d05a      	beq.n	80090b0 <_dtoa_r+0xa18>
 8008ffa:	6869      	ldr	r1, [r5, #4]
 8008ffc:	4658      	mov	r0, fp
 8008ffe:	f000 ff13 	bl	8009e28 <_Balloc>
 8009002:	4606      	mov	r6, r0
 8009004:	b928      	cbnz	r0, 8009012 <_dtoa_r+0x97a>
 8009006:	4b84      	ldr	r3, [pc, #528]	@ (8009218 <_dtoa_r+0xb80>)
 8009008:	4602      	mov	r2, r0
 800900a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800900e:	f7ff bb5a 	b.w	80086c6 <_dtoa_r+0x2e>
 8009012:	692a      	ldr	r2, [r5, #16]
 8009014:	3202      	adds	r2, #2
 8009016:	0092      	lsls	r2, r2, #2
 8009018:	f105 010c 	add.w	r1, r5, #12
 800901c:	300c      	adds	r0, #12
 800901e:	f7ff fa92 	bl	8008546 <memcpy>
 8009022:	2201      	movs	r2, #1
 8009024:	4631      	mov	r1, r6
 8009026:	4658      	mov	r0, fp
 8009028:	f001 f956 	bl	800a2d8 <__lshift>
 800902c:	f10a 0301 	add.w	r3, sl, #1
 8009030:	9307      	str	r3, [sp, #28]
 8009032:	9b00      	ldr	r3, [sp, #0]
 8009034:	4453      	add	r3, sl
 8009036:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009038:	9b02      	ldr	r3, [sp, #8]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	462f      	mov	r7, r5
 8009040:	930a      	str	r3, [sp, #40]	@ 0x28
 8009042:	4605      	mov	r5, r0
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	4621      	mov	r1, r4
 8009048:	3b01      	subs	r3, #1
 800904a:	4648      	mov	r0, r9
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	f7ff fa99 	bl	8008584 <quorem>
 8009052:	4639      	mov	r1, r7
 8009054:	9002      	str	r0, [sp, #8]
 8009056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800905a:	4648      	mov	r0, r9
 800905c:	f001 f9a8 	bl	800a3b0 <__mcmp>
 8009060:	462a      	mov	r2, r5
 8009062:	9008      	str	r0, [sp, #32]
 8009064:	4621      	mov	r1, r4
 8009066:	4658      	mov	r0, fp
 8009068:	f001 f9be 	bl	800a3e8 <__mdiff>
 800906c:	68c2      	ldr	r2, [r0, #12]
 800906e:	4606      	mov	r6, r0
 8009070:	bb02      	cbnz	r2, 80090b4 <_dtoa_r+0xa1c>
 8009072:	4601      	mov	r1, r0
 8009074:	4648      	mov	r0, r9
 8009076:	f001 f99b 	bl	800a3b0 <__mcmp>
 800907a:	4602      	mov	r2, r0
 800907c:	4631      	mov	r1, r6
 800907e:	4658      	mov	r0, fp
 8009080:	920e      	str	r2, [sp, #56]	@ 0x38
 8009082:	f000 ff11 	bl	8009ea8 <_Bfree>
 8009086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009088:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800908a:	9e07      	ldr	r6, [sp, #28]
 800908c:	ea43 0102 	orr.w	r1, r3, r2
 8009090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009092:	4319      	orrs	r1, r3
 8009094:	d110      	bne.n	80090b8 <_dtoa_r+0xa20>
 8009096:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800909a:	d029      	beq.n	80090f0 <_dtoa_r+0xa58>
 800909c:	9b08      	ldr	r3, [sp, #32]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dd02      	ble.n	80090a8 <_dtoa_r+0xa10>
 80090a2:	9b02      	ldr	r3, [sp, #8]
 80090a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090a8:	9b00      	ldr	r3, [sp, #0]
 80090aa:	f883 8000 	strb.w	r8, [r3]
 80090ae:	e63f      	b.n	8008d30 <_dtoa_r+0x698>
 80090b0:	4628      	mov	r0, r5
 80090b2:	e7bb      	b.n	800902c <_dtoa_r+0x994>
 80090b4:	2201      	movs	r2, #1
 80090b6:	e7e1      	b.n	800907c <_dtoa_r+0x9e4>
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	db04      	blt.n	80090c8 <_dtoa_r+0xa30>
 80090be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090c0:	430b      	orrs	r3, r1
 80090c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090c4:	430b      	orrs	r3, r1
 80090c6:	d120      	bne.n	800910a <_dtoa_r+0xa72>
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	dded      	ble.n	80090a8 <_dtoa_r+0xa10>
 80090cc:	4649      	mov	r1, r9
 80090ce:	2201      	movs	r2, #1
 80090d0:	4658      	mov	r0, fp
 80090d2:	f001 f901 	bl	800a2d8 <__lshift>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4681      	mov	r9, r0
 80090da:	f001 f969 	bl	800a3b0 <__mcmp>
 80090de:	2800      	cmp	r0, #0
 80090e0:	dc03      	bgt.n	80090ea <_dtoa_r+0xa52>
 80090e2:	d1e1      	bne.n	80090a8 <_dtoa_r+0xa10>
 80090e4:	f018 0f01 	tst.w	r8, #1
 80090e8:	d0de      	beq.n	80090a8 <_dtoa_r+0xa10>
 80090ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090ee:	d1d8      	bne.n	80090a2 <_dtoa_r+0xa0a>
 80090f0:	9a00      	ldr	r2, [sp, #0]
 80090f2:	2339      	movs	r3, #57	@ 0x39
 80090f4:	7013      	strb	r3, [r2, #0]
 80090f6:	4633      	mov	r3, r6
 80090f8:	461e      	mov	r6, r3
 80090fa:	3b01      	subs	r3, #1
 80090fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009100:	2a39      	cmp	r2, #57	@ 0x39
 8009102:	d052      	beq.n	80091aa <_dtoa_r+0xb12>
 8009104:	3201      	adds	r2, #1
 8009106:	701a      	strb	r2, [r3, #0]
 8009108:	e612      	b.n	8008d30 <_dtoa_r+0x698>
 800910a:	2a00      	cmp	r2, #0
 800910c:	dd07      	ble.n	800911e <_dtoa_r+0xa86>
 800910e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009112:	d0ed      	beq.n	80090f0 <_dtoa_r+0xa58>
 8009114:	9a00      	ldr	r2, [sp, #0]
 8009116:	f108 0301 	add.w	r3, r8, #1
 800911a:	7013      	strb	r3, [r2, #0]
 800911c:	e608      	b.n	8008d30 <_dtoa_r+0x698>
 800911e:	9b07      	ldr	r3, [sp, #28]
 8009120:	9a07      	ldr	r2, [sp, #28]
 8009122:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009128:	4293      	cmp	r3, r2
 800912a:	d028      	beq.n	800917e <_dtoa_r+0xae6>
 800912c:	4649      	mov	r1, r9
 800912e:	2300      	movs	r3, #0
 8009130:	220a      	movs	r2, #10
 8009132:	4658      	mov	r0, fp
 8009134:	f000 feda 	bl	8009eec <__multadd>
 8009138:	42af      	cmp	r7, r5
 800913a:	4681      	mov	r9, r0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	f04f 020a 	mov.w	r2, #10
 8009144:	4639      	mov	r1, r7
 8009146:	4658      	mov	r0, fp
 8009148:	d107      	bne.n	800915a <_dtoa_r+0xac2>
 800914a:	f000 fecf 	bl	8009eec <__multadd>
 800914e:	4607      	mov	r7, r0
 8009150:	4605      	mov	r5, r0
 8009152:	9b07      	ldr	r3, [sp, #28]
 8009154:	3301      	adds	r3, #1
 8009156:	9307      	str	r3, [sp, #28]
 8009158:	e774      	b.n	8009044 <_dtoa_r+0x9ac>
 800915a:	f000 fec7 	bl	8009eec <__multadd>
 800915e:	4629      	mov	r1, r5
 8009160:	4607      	mov	r7, r0
 8009162:	2300      	movs	r3, #0
 8009164:	220a      	movs	r2, #10
 8009166:	4658      	mov	r0, fp
 8009168:	f000 fec0 	bl	8009eec <__multadd>
 800916c:	4605      	mov	r5, r0
 800916e:	e7f0      	b.n	8009152 <_dtoa_r+0xaba>
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfcc      	ite	gt
 8009176:	461e      	movgt	r6, r3
 8009178:	2601      	movle	r6, #1
 800917a:	4456      	add	r6, sl
 800917c:	2700      	movs	r7, #0
 800917e:	4649      	mov	r1, r9
 8009180:	2201      	movs	r2, #1
 8009182:	4658      	mov	r0, fp
 8009184:	f001 f8a8 	bl	800a2d8 <__lshift>
 8009188:	4621      	mov	r1, r4
 800918a:	4681      	mov	r9, r0
 800918c:	f001 f910 	bl	800a3b0 <__mcmp>
 8009190:	2800      	cmp	r0, #0
 8009192:	dcb0      	bgt.n	80090f6 <_dtoa_r+0xa5e>
 8009194:	d102      	bne.n	800919c <_dtoa_r+0xb04>
 8009196:	f018 0f01 	tst.w	r8, #1
 800919a:	d1ac      	bne.n	80090f6 <_dtoa_r+0xa5e>
 800919c:	4633      	mov	r3, r6
 800919e:	461e      	mov	r6, r3
 80091a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091a4:	2a30      	cmp	r2, #48	@ 0x30
 80091a6:	d0fa      	beq.n	800919e <_dtoa_r+0xb06>
 80091a8:	e5c2      	b.n	8008d30 <_dtoa_r+0x698>
 80091aa:	459a      	cmp	sl, r3
 80091ac:	d1a4      	bne.n	80090f8 <_dtoa_r+0xa60>
 80091ae:	9b04      	ldr	r3, [sp, #16]
 80091b0:	3301      	adds	r3, #1
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	2331      	movs	r3, #49	@ 0x31
 80091b6:	f88a 3000 	strb.w	r3, [sl]
 80091ba:	e5b9      	b.n	8008d30 <_dtoa_r+0x698>
 80091bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800921c <_dtoa_r+0xb84>
 80091c2:	b11b      	cbz	r3, 80091cc <_dtoa_r+0xb34>
 80091c4:	f10a 0308 	add.w	r3, sl, #8
 80091c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	4650      	mov	r0, sl
 80091ce:	b019      	add	sp, #100	@ 0x64
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	f77f ae37 	ble.w	8008e4a <_dtoa_r+0x7b2>
 80091dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091de:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e0:	2001      	movs	r0, #1
 80091e2:	e655      	b.n	8008e90 <_dtoa_r+0x7f8>
 80091e4:	9b00      	ldr	r3, [sp, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f77f aed6 	ble.w	8008f98 <_dtoa_r+0x900>
 80091ec:	4656      	mov	r6, sl
 80091ee:	4621      	mov	r1, r4
 80091f0:	4648      	mov	r0, r9
 80091f2:	f7ff f9c7 	bl	8008584 <quorem>
 80091f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091fa:	f806 8b01 	strb.w	r8, [r6], #1
 80091fe:	9b00      	ldr	r3, [sp, #0]
 8009200:	eba6 020a 	sub.w	r2, r6, sl
 8009204:	4293      	cmp	r3, r2
 8009206:	ddb3      	ble.n	8009170 <_dtoa_r+0xad8>
 8009208:	4649      	mov	r1, r9
 800920a:	2300      	movs	r3, #0
 800920c:	220a      	movs	r2, #10
 800920e:	4658      	mov	r0, fp
 8009210:	f000 fe6c 	bl	8009eec <__multadd>
 8009214:	4681      	mov	r9, r0
 8009216:	e7ea      	b.n	80091ee <_dtoa_r+0xb56>
 8009218:	0800b2c5 	.word	0x0800b2c5
 800921c:	0800b249 	.word	0x0800b249

08009220 <rshift>:
 8009220:	6903      	ldr	r3, [r0, #16]
 8009222:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800922a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800922e:	f100 0414 	add.w	r4, r0, #20
 8009232:	dd45      	ble.n	80092c0 <rshift+0xa0>
 8009234:	f011 011f 	ands.w	r1, r1, #31
 8009238:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800923c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009240:	d10c      	bne.n	800925c <rshift+0x3c>
 8009242:	f100 0710 	add.w	r7, r0, #16
 8009246:	4629      	mov	r1, r5
 8009248:	42b1      	cmp	r1, r6
 800924a:	d334      	bcc.n	80092b6 <rshift+0x96>
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	1eea      	subs	r2, r5, #3
 8009252:	4296      	cmp	r6, r2
 8009254:	bf38      	it	cc
 8009256:	2300      	movcc	r3, #0
 8009258:	4423      	add	r3, r4
 800925a:	e015      	b.n	8009288 <rshift+0x68>
 800925c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009260:	f1c1 0820 	rsb	r8, r1, #32
 8009264:	40cf      	lsrs	r7, r1
 8009266:	f105 0e04 	add.w	lr, r5, #4
 800926a:	46a1      	mov	r9, r4
 800926c:	4576      	cmp	r6, lr
 800926e:	46f4      	mov	ip, lr
 8009270:	d815      	bhi.n	800929e <rshift+0x7e>
 8009272:	1a9a      	subs	r2, r3, r2
 8009274:	0092      	lsls	r2, r2, #2
 8009276:	3a04      	subs	r2, #4
 8009278:	3501      	adds	r5, #1
 800927a:	42ae      	cmp	r6, r5
 800927c:	bf38      	it	cc
 800927e:	2200      	movcc	r2, #0
 8009280:	18a3      	adds	r3, r4, r2
 8009282:	50a7      	str	r7, [r4, r2]
 8009284:	b107      	cbz	r7, 8009288 <rshift+0x68>
 8009286:	3304      	adds	r3, #4
 8009288:	1b1a      	subs	r2, r3, r4
 800928a:	42a3      	cmp	r3, r4
 800928c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009290:	bf08      	it	eq
 8009292:	2300      	moveq	r3, #0
 8009294:	6102      	str	r2, [r0, #16]
 8009296:	bf08      	it	eq
 8009298:	6143      	streq	r3, [r0, #20]
 800929a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800929e:	f8dc c000 	ldr.w	ip, [ip]
 80092a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80092a6:	ea4c 0707 	orr.w	r7, ip, r7
 80092aa:	f849 7b04 	str.w	r7, [r9], #4
 80092ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092b2:	40cf      	lsrs	r7, r1
 80092b4:	e7da      	b.n	800926c <rshift+0x4c>
 80092b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80092ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80092be:	e7c3      	b.n	8009248 <rshift+0x28>
 80092c0:	4623      	mov	r3, r4
 80092c2:	e7e1      	b.n	8009288 <rshift+0x68>

080092c4 <__hexdig_fun>:
 80092c4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80092c8:	2b09      	cmp	r3, #9
 80092ca:	d802      	bhi.n	80092d2 <__hexdig_fun+0xe>
 80092cc:	3820      	subs	r0, #32
 80092ce:	b2c0      	uxtb	r0, r0
 80092d0:	4770      	bx	lr
 80092d2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	d801      	bhi.n	80092de <__hexdig_fun+0x1a>
 80092da:	3847      	subs	r0, #71	@ 0x47
 80092dc:	e7f7      	b.n	80092ce <__hexdig_fun+0xa>
 80092de:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d801      	bhi.n	80092ea <__hexdig_fun+0x26>
 80092e6:	3827      	subs	r0, #39	@ 0x27
 80092e8:	e7f1      	b.n	80092ce <__hexdig_fun+0xa>
 80092ea:	2000      	movs	r0, #0
 80092ec:	4770      	bx	lr
	...

080092f0 <__gethex>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	b085      	sub	sp, #20
 80092f6:	468a      	mov	sl, r1
 80092f8:	9302      	str	r3, [sp, #8]
 80092fa:	680b      	ldr	r3, [r1, #0]
 80092fc:	9001      	str	r0, [sp, #4]
 80092fe:	4690      	mov	r8, r2
 8009300:	1c9c      	adds	r4, r3, #2
 8009302:	46a1      	mov	r9, r4
 8009304:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009308:	2830      	cmp	r0, #48	@ 0x30
 800930a:	d0fa      	beq.n	8009302 <__gethex+0x12>
 800930c:	eba9 0303 	sub.w	r3, r9, r3
 8009310:	f1a3 0b02 	sub.w	fp, r3, #2
 8009314:	f7ff ffd6 	bl	80092c4 <__hexdig_fun>
 8009318:	4605      	mov	r5, r0
 800931a:	2800      	cmp	r0, #0
 800931c:	d168      	bne.n	80093f0 <__gethex+0x100>
 800931e:	49a0      	ldr	r1, [pc, #640]	@ (80095a0 <__gethex+0x2b0>)
 8009320:	2201      	movs	r2, #1
 8009322:	4648      	mov	r0, r9
 8009324:	f7ff f8c4 	bl	80084b0 <strncmp>
 8009328:	4607      	mov	r7, r0
 800932a:	2800      	cmp	r0, #0
 800932c:	d167      	bne.n	80093fe <__gethex+0x10e>
 800932e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009332:	4626      	mov	r6, r4
 8009334:	f7ff ffc6 	bl	80092c4 <__hexdig_fun>
 8009338:	2800      	cmp	r0, #0
 800933a:	d062      	beq.n	8009402 <__gethex+0x112>
 800933c:	4623      	mov	r3, r4
 800933e:	7818      	ldrb	r0, [r3, #0]
 8009340:	2830      	cmp	r0, #48	@ 0x30
 8009342:	4699      	mov	r9, r3
 8009344:	f103 0301 	add.w	r3, r3, #1
 8009348:	d0f9      	beq.n	800933e <__gethex+0x4e>
 800934a:	f7ff ffbb 	bl	80092c4 <__hexdig_fun>
 800934e:	fab0 f580 	clz	r5, r0
 8009352:	096d      	lsrs	r5, r5, #5
 8009354:	f04f 0b01 	mov.w	fp, #1
 8009358:	464a      	mov	r2, r9
 800935a:	4616      	mov	r6, r2
 800935c:	3201      	adds	r2, #1
 800935e:	7830      	ldrb	r0, [r6, #0]
 8009360:	f7ff ffb0 	bl	80092c4 <__hexdig_fun>
 8009364:	2800      	cmp	r0, #0
 8009366:	d1f8      	bne.n	800935a <__gethex+0x6a>
 8009368:	498d      	ldr	r1, [pc, #564]	@ (80095a0 <__gethex+0x2b0>)
 800936a:	2201      	movs	r2, #1
 800936c:	4630      	mov	r0, r6
 800936e:	f7ff f89f 	bl	80084b0 <strncmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	d13f      	bne.n	80093f6 <__gethex+0x106>
 8009376:	b944      	cbnz	r4, 800938a <__gethex+0x9a>
 8009378:	1c74      	adds	r4, r6, #1
 800937a:	4622      	mov	r2, r4
 800937c:	4616      	mov	r6, r2
 800937e:	3201      	adds	r2, #1
 8009380:	7830      	ldrb	r0, [r6, #0]
 8009382:	f7ff ff9f 	bl	80092c4 <__hexdig_fun>
 8009386:	2800      	cmp	r0, #0
 8009388:	d1f8      	bne.n	800937c <__gethex+0x8c>
 800938a:	1ba4      	subs	r4, r4, r6
 800938c:	00a7      	lsls	r7, r4, #2
 800938e:	7833      	ldrb	r3, [r6, #0]
 8009390:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009394:	2b50      	cmp	r3, #80	@ 0x50
 8009396:	d13e      	bne.n	8009416 <__gethex+0x126>
 8009398:	7873      	ldrb	r3, [r6, #1]
 800939a:	2b2b      	cmp	r3, #43	@ 0x2b
 800939c:	d033      	beq.n	8009406 <__gethex+0x116>
 800939e:	2b2d      	cmp	r3, #45	@ 0x2d
 80093a0:	d034      	beq.n	800940c <__gethex+0x11c>
 80093a2:	1c71      	adds	r1, r6, #1
 80093a4:	2400      	movs	r4, #0
 80093a6:	7808      	ldrb	r0, [r1, #0]
 80093a8:	f7ff ff8c 	bl	80092c4 <__hexdig_fun>
 80093ac:	1e43      	subs	r3, r0, #1
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b18      	cmp	r3, #24
 80093b2:	d830      	bhi.n	8009416 <__gethex+0x126>
 80093b4:	f1a0 0210 	sub.w	r2, r0, #16
 80093b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093bc:	f7ff ff82 	bl	80092c4 <__hexdig_fun>
 80093c0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80093c4:	fa5f fc8c 	uxtb.w	ip, ip
 80093c8:	f1bc 0f18 	cmp.w	ip, #24
 80093cc:	f04f 030a 	mov.w	r3, #10
 80093d0:	d91e      	bls.n	8009410 <__gethex+0x120>
 80093d2:	b104      	cbz	r4, 80093d6 <__gethex+0xe6>
 80093d4:	4252      	negs	r2, r2
 80093d6:	4417      	add	r7, r2
 80093d8:	f8ca 1000 	str.w	r1, [sl]
 80093dc:	b1ed      	cbz	r5, 800941a <__gethex+0x12a>
 80093de:	f1bb 0f00 	cmp.w	fp, #0
 80093e2:	bf0c      	ite	eq
 80093e4:	2506      	moveq	r5, #6
 80093e6:	2500      	movne	r5, #0
 80093e8:	4628      	mov	r0, r5
 80093ea:	b005      	add	sp, #20
 80093ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	2500      	movs	r5, #0
 80093f2:	462c      	mov	r4, r5
 80093f4:	e7b0      	b.n	8009358 <__gethex+0x68>
 80093f6:	2c00      	cmp	r4, #0
 80093f8:	d1c7      	bne.n	800938a <__gethex+0x9a>
 80093fa:	4627      	mov	r7, r4
 80093fc:	e7c7      	b.n	800938e <__gethex+0x9e>
 80093fe:	464e      	mov	r6, r9
 8009400:	462f      	mov	r7, r5
 8009402:	2501      	movs	r5, #1
 8009404:	e7c3      	b.n	800938e <__gethex+0x9e>
 8009406:	2400      	movs	r4, #0
 8009408:	1cb1      	adds	r1, r6, #2
 800940a:	e7cc      	b.n	80093a6 <__gethex+0xb6>
 800940c:	2401      	movs	r4, #1
 800940e:	e7fb      	b.n	8009408 <__gethex+0x118>
 8009410:	fb03 0002 	mla	r0, r3, r2, r0
 8009414:	e7ce      	b.n	80093b4 <__gethex+0xc4>
 8009416:	4631      	mov	r1, r6
 8009418:	e7de      	b.n	80093d8 <__gethex+0xe8>
 800941a:	eba6 0309 	sub.w	r3, r6, r9
 800941e:	3b01      	subs	r3, #1
 8009420:	4629      	mov	r1, r5
 8009422:	2b07      	cmp	r3, #7
 8009424:	dc0a      	bgt.n	800943c <__gethex+0x14c>
 8009426:	9801      	ldr	r0, [sp, #4]
 8009428:	f000 fcfe 	bl	8009e28 <_Balloc>
 800942c:	4604      	mov	r4, r0
 800942e:	b940      	cbnz	r0, 8009442 <__gethex+0x152>
 8009430:	4b5c      	ldr	r3, [pc, #368]	@ (80095a4 <__gethex+0x2b4>)
 8009432:	4602      	mov	r2, r0
 8009434:	21e4      	movs	r1, #228	@ 0xe4
 8009436:	485c      	ldr	r0, [pc, #368]	@ (80095a8 <__gethex+0x2b8>)
 8009438:	f001 fa96 	bl	800a968 <__assert_func>
 800943c:	3101      	adds	r1, #1
 800943e:	105b      	asrs	r3, r3, #1
 8009440:	e7ef      	b.n	8009422 <__gethex+0x132>
 8009442:	f100 0a14 	add.w	sl, r0, #20
 8009446:	2300      	movs	r3, #0
 8009448:	4655      	mov	r5, sl
 800944a:	469b      	mov	fp, r3
 800944c:	45b1      	cmp	r9, r6
 800944e:	d337      	bcc.n	80094c0 <__gethex+0x1d0>
 8009450:	f845 bb04 	str.w	fp, [r5], #4
 8009454:	eba5 050a 	sub.w	r5, r5, sl
 8009458:	10ad      	asrs	r5, r5, #2
 800945a:	6125      	str	r5, [r4, #16]
 800945c:	4658      	mov	r0, fp
 800945e:	f000 fdd5 	bl	800a00c <__hi0bits>
 8009462:	016d      	lsls	r5, r5, #5
 8009464:	f8d8 6000 	ldr.w	r6, [r8]
 8009468:	1a2d      	subs	r5, r5, r0
 800946a:	42b5      	cmp	r5, r6
 800946c:	dd54      	ble.n	8009518 <__gethex+0x228>
 800946e:	1bad      	subs	r5, r5, r6
 8009470:	4629      	mov	r1, r5
 8009472:	4620      	mov	r0, r4
 8009474:	f001 f969 	bl	800a74a <__any_on>
 8009478:	4681      	mov	r9, r0
 800947a:	b178      	cbz	r0, 800949c <__gethex+0x1ac>
 800947c:	1e6b      	subs	r3, r5, #1
 800947e:	1159      	asrs	r1, r3, #5
 8009480:	f003 021f 	and.w	r2, r3, #31
 8009484:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009488:	f04f 0901 	mov.w	r9, #1
 800948c:	fa09 f202 	lsl.w	r2, r9, r2
 8009490:	420a      	tst	r2, r1
 8009492:	d003      	beq.n	800949c <__gethex+0x1ac>
 8009494:	454b      	cmp	r3, r9
 8009496:	dc36      	bgt.n	8009506 <__gethex+0x216>
 8009498:	f04f 0902 	mov.w	r9, #2
 800949c:	4629      	mov	r1, r5
 800949e:	4620      	mov	r0, r4
 80094a0:	f7ff febe 	bl	8009220 <rshift>
 80094a4:	442f      	add	r7, r5
 80094a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094aa:	42bb      	cmp	r3, r7
 80094ac:	da42      	bge.n	8009534 <__gethex+0x244>
 80094ae:	9801      	ldr	r0, [sp, #4]
 80094b0:	4621      	mov	r1, r4
 80094b2:	f000 fcf9 	bl	8009ea8 <_Bfree>
 80094b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094b8:	2300      	movs	r3, #0
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	25a3      	movs	r5, #163	@ 0xa3
 80094be:	e793      	b.n	80093e8 <__gethex+0xf8>
 80094c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80094c4:	2a2e      	cmp	r2, #46	@ 0x2e
 80094c6:	d012      	beq.n	80094ee <__gethex+0x1fe>
 80094c8:	2b20      	cmp	r3, #32
 80094ca:	d104      	bne.n	80094d6 <__gethex+0x1e6>
 80094cc:	f845 bb04 	str.w	fp, [r5], #4
 80094d0:	f04f 0b00 	mov.w	fp, #0
 80094d4:	465b      	mov	r3, fp
 80094d6:	7830      	ldrb	r0, [r6, #0]
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	f7ff fef3 	bl	80092c4 <__hexdig_fun>
 80094de:	9b03      	ldr	r3, [sp, #12]
 80094e0:	f000 000f 	and.w	r0, r0, #15
 80094e4:	4098      	lsls	r0, r3
 80094e6:	ea4b 0b00 	orr.w	fp, fp, r0
 80094ea:	3304      	adds	r3, #4
 80094ec:	e7ae      	b.n	800944c <__gethex+0x15c>
 80094ee:	45b1      	cmp	r9, r6
 80094f0:	d8ea      	bhi.n	80094c8 <__gethex+0x1d8>
 80094f2:	492b      	ldr	r1, [pc, #172]	@ (80095a0 <__gethex+0x2b0>)
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7fe ffd9 	bl	80084b0 <strncmp>
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	2800      	cmp	r0, #0
 8009502:	d1e1      	bne.n	80094c8 <__gethex+0x1d8>
 8009504:	e7a2      	b.n	800944c <__gethex+0x15c>
 8009506:	1ea9      	subs	r1, r5, #2
 8009508:	4620      	mov	r0, r4
 800950a:	f001 f91e 	bl	800a74a <__any_on>
 800950e:	2800      	cmp	r0, #0
 8009510:	d0c2      	beq.n	8009498 <__gethex+0x1a8>
 8009512:	f04f 0903 	mov.w	r9, #3
 8009516:	e7c1      	b.n	800949c <__gethex+0x1ac>
 8009518:	da09      	bge.n	800952e <__gethex+0x23e>
 800951a:	1b75      	subs	r5, r6, r5
 800951c:	4621      	mov	r1, r4
 800951e:	9801      	ldr	r0, [sp, #4]
 8009520:	462a      	mov	r2, r5
 8009522:	f000 fed9 	bl	800a2d8 <__lshift>
 8009526:	1b7f      	subs	r7, r7, r5
 8009528:	4604      	mov	r4, r0
 800952a:	f100 0a14 	add.w	sl, r0, #20
 800952e:	f04f 0900 	mov.w	r9, #0
 8009532:	e7b8      	b.n	80094a6 <__gethex+0x1b6>
 8009534:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009538:	42bd      	cmp	r5, r7
 800953a:	dd6f      	ble.n	800961c <__gethex+0x32c>
 800953c:	1bed      	subs	r5, r5, r7
 800953e:	42ae      	cmp	r6, r5
 8009540:	dc34      	bgt.n	80095ac <__gethex+0x2bc>
 8009542:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d022      	beq.n	8009590 <__gethex+0x2a0>
 800954a:	2b03      	cmp	r3, #3
 800954c:	d024      	beq.n	8009598 <__gethex+0x2a8>
 800954e:	2b01      	cmp	r3, #1
 8009550:	d115      	bne.n	800957e <__gethex+0x28e>
 8009552:	42ae      	cmp	r6, r5
 8009554:	d113      	bne.n	800957e <__gethex+0x28e>
 8009556:	2e01      	cmp	r6, #1
 8009558:	d10b      	bne.n	8009572 <__gethex+0x282>
 800955a:	9a02      	ldr	r2, [sp, #8]
 800955c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	2301      	movs	r3, #1
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	f8ca 3000 	str.w	r3, [sl]
 800956a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800956c:	2562      	movs	r5, #98	@ 0x62
 800956e:	601c      	str	r4, [r3, #0]
 8009570:	e73a      	b.n	80093e8 <__gethex+0xf8>
 8009572:	1e71      	subs	r1, r6, #1
 8009574:	4620      	mov	r0, r4
 8009576:	f001 f8e8 	bl	800a74a <__any_on>
 800957a:	2800      	cmp	r0, #0
 800957c:	d1ed      	bne.n	800955a <__gethex+0x26a>
 800957e:	9801      	ldr	r0, [sp, #4]
 8009580:	4621      	mov	r1, r4
 8009582:	f000 fc91 	bl	8009ea8 <_Bfree>
 8009586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009588:	2300      	movs	r3, #0
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	2550      	movs	r5, #80	@ 0x50
 800958e:	e72b      	b.n	80093e8 <__gethex+0xf8>
 8009590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1f3      	bne.n	800957e <__gethex+0x28e>
 8009596:	e7e0      	b.n	800955a <__gethex+0x26a>
 8009598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1dd      	bne.n	800955a <__gethex+0x26a>
 800959e:	e7ee      	b.n	800957e <__gethex+0x28e>
 80095a0:	0800b0ed 	.word	0x0800b0ed
 80095a4:	0800b2c5 	.word	0x0800b2c5
 80095a8:	0800b2d6 	.word	0x0800b2d6
 80095ac:	1e6f      	subs	r7, r5, #1
 80095ae:	f1b9 0f00 	cmp.w	r9, #0
 80095b2:	d130      	bne.n	8009616 <__gethex+0x326>
 80095b4:	b127      	cbz	r7, 80095c0 <__gethex+0x2d0>
 80095b6:	4639      	mov	r1, r7
 80095b8:	4620      	mov	r0, r4
 80095ba:	f001 f8c6 	bl	800a74a <__any_on>
 80095be:	4681      	mov	r9, r0
 80095c0:	117a      	asrs	r2, r7, #5
 80095c2:	2301      	movs	r3, #1
 80095c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095c8:	f007 071f 	and.w	r7, r7, #31
 80095cc:	40bb      	lsls	r3, r7
 80095ce:	4213      	tst	r3, r2
 80095d0:	4629      	mov	r1, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	bf18      	it	ne
 80095d6:	f049 0902 	orrne.w	r9, r9, #2
 80095da:	f7ff fe21 	bl	8009220 <rshift>
 80095de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80095e2:	1b76      	subs	r6, r6, r5
 80095e4:	2502      	movs	r5, #2
 80095e6:	f1b9 0f00 	cmp.w	r9, #0
 80095ea:	d047      	beq.n	800967c <__gethex+0x38c>
 80095ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d015      	beq.n	8009620 <__gethex+0x330>
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d017      	beq.n	8009628 <__gethex+0x338>
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d109      	bne.n	8009610 <__gethex+0x320>
 80095fc:	f019 0f02 	tst.w	r9, #2
 8009600:	d006      	beq.n	8009610 <__gethex+0x320>
 8009602:	f8da 3000 	ldr.w	r3, [sl]
 8009606:	ea49 0903 	orr.w	r9, r9, r3
 800960a:	f019 0f01 	tst.w	r9, #1
 800960e:	d10e      	bne.n	800962e <__gethex+0x33e>
 8009610:	f045 0510 	orr.w	r5, r5, #16
 8009614:	e032      	b.n	800967c <__gethex+0x38c>
 8009616:	f04f 0901 	mov.w	r9, #1
 800961a:	e7d1      	b.n	80095c0 <__gethex+0x2d0>
 800961c:	2501      	movs	r5, #1
 800961e:	e7e2      	b.n	80095e6 <__gethex+0x2f6>
 8009620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009622:	f1c3 0301 	rsb	r3, r3, #1
 8009626:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0f0      	beq.n	8009610 <__gethex+0x320>
 800962e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009632:	f104 0314 	add.w	r3, r4, #20
 8009636:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800963a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800963e:	f04f 0c00 	mov.w	ip, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f853 2b04 	ldr.w	r2, [r3], #4
 8009648:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800964c:	d01b      	beq.n	8009686 <__gethex+0x396>
 800964e:	3201      	adds	r2, #1
 8009650:	6002      	str	r2, [r0, #0]
 8009652:	2d02      	cmp	r5, #2
 8009654:	f104 0314 	add.w	r3, r4, #20
 8009658:	d13c      	bne.n	80096d4 <__gethex+0x3e4>
 800965a:	f8d8 2000 	ldr.w	r2, [r8]
 800965e:	3a01      	subs	r2, #1
 8009660:	42b2      	cmp	r2, r6
 8009662:	d109      	bne.n	8009678 <__gethex+0x388>
 8009664:	1171      	asrs	r1, r6, #5
 8009666:	2201      	movs	r2, #1
 8009668:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800966c:	f006 061f 	and.w	r6, r6, #31
 8009670:	fa02 f606 	lsl.w	r6, r2, r6
 8009674:	421e      	tst	r6, r3
 8009676:	d13a      	bne.n	80096ee <__gethex+0x3fe>
 8009678:	f045 0520 	orr.w	r5, r5, #32
 800967c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800967e:	601c      	str	r4, [r3, #0]
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	601f      	str	r7, [r3, #0]
 8009684:	e6b0      	b.n	80093e8 <__gethex+0xf8>
 8009686:	4299      	cmp	r1, r3
 8009688:	f843 cc04 	str.w	ip, [r3, #-4]
 800968c:	d8d9      	bhi.n	8009642 <__gethex+0x352>
 800968e:	68a3      	ldr	r3, [r4, #8]
 8009690:	459b      	cmp	fp, r3
 8009692:	db17      	blt.n	80096c4 <__gethex+0x3d4>
 8009694:	6861      	ldr	r1, [r4, #4]
 8009696:	9801      	ldr	r0, [sp, #4]
 8009698:	3101      	adds	r1, #1
 800969a:	f000 fbc5 	bl	8009e28 <_Balloc>
 800969e:	4681      	mov	r9, r0
 80096a0:	b918      	cbnz	r0, 80096aa <__gethex+0x3ba>
 80096a2:	4b1a      	ldr	r3, [pc, #104]	@ (800970c <__gethex+0x41c>)
 80096a4:	4602      	mov	r2, r0
 80096a6:	2184      	movs	r1, #132	@ 0x84
 80096a8:	e6c5      	b.n	8009436 <__gethex+0x146>
 80096aa:	6922      	ldr	r2, [r4, #16]
 80096ac:	3202      	adds	r2, #2
 80096ae:	f104 010c 	add.w	r1, r4, #12
 80096b2:	0092      	lsls	r2, r2, #2
 80096b4:	300c      	adds	r0, #12
 80096b6:	f7fe ff46 	bl	8008546 <memcpy>
 80096ba:	4621      	mov	r1, r4
 80096bc:	9801      	ldr	r0, [sp, #4]
 80096be:	f000 fbf3 	bl	8009ea8 <_Bfree>
 80096c2:	464c      	mov	r4, r9
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096cc:	6122      	str	r2, [r4, #16]
 80096ce:	2201      	movs	r2, #1
 80096d0:	615a      	str	r2, [r3, #20]
 80096d2:	e7be      	b.n	8009652 <__gethex+0x362>
 80096d4:	6922      	ldr	r2, [r4, #16]
 80096d6:	455a      	cmp	r2, fp
 80096d8:	dd0b      	ble.n	80096f2 <__gethex+0x402>
 80096da:	2101      	movs	r1, #1
 80096dc:	4620      	mov	r0, r4
 80096de:	f7ff fd9f 	bl	8009220 <rshift>
 80096e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096e6:	3701      	adds	r7, #1
 80096e8:	42bb      	cmp	r3, r7
 80096ea:	f6ff aee0 	blt.w	80094ae <__gethex+0x1be>
 80096ee:	2501      	movs	r5, #1
 80096f0:	e7c2      	b.n	8009678 <__gethex+0x388>
 80096f2:	f016 061f 	ands.w	r6, r6, #31
 80096f6:	d0fa      	beq.n	80096ee <__gethex+0x3fe>
 80096f8:	4453      	add	r3, sl
 80096fa:	f1c6 0620 	rsb	r6, r6, #32
 80096fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009702:	f000 fc83 	bl	800a00c <__hi0bits>
 8009706:	42b0      	cmp	r0, r6
 8009708:	dbe7      	blt.n	80096da <__gethex+0x3ea>
 800970a:	e7f0      	b.n	80096ee <__gethex+0x3fe>
 800970c:	0800b2c5 	.word	0x0800b2c5

08009710 <L_shift>:
 8009710:	f1c2 0208 	rsb	r2, r2, #8
 8009714:	0092      	lsls	r2, r2, #2
 8009716:	b570      	push	{r4, r5, r6, lr}
 8009718:	f1c2 0620 	rsb	r6, r2, #32
 800971c:	6843      	ldr	r3, [r0, #4]
 800971e:	6804      	ldr	r4, [r0, #0]
 8009720:	fa03 f506 	lsl.w	r5, r3, r6
 8009724:	432c      	orrs	r4, r5
 8009726:	40d3      	lsrs	r3, r2
 8009728:	6004      	str	r4, [r0, #0]
 800972a:	f840 3f04 	str.w	r3, [r0, #4]!
 800972e:	4288      	cmp	r0, r1
 8009730:	d3f4      	bcc.n	800971c <L_shift+0xc>
 8009732:	bd70      	pop	{r4, r5, r6, pc}

08009734 <__match>:
 8009734:	b530      	push	{r4, r5, lr}
 8009736:	6803      	ldr	r3, [r0, #0]
 8009738:	3301      	adds	r3, #1
 800973a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973e:	b914      	cbnz	r4, 8009746 <__match+0x12>
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	2001      	movs	r0, #1
 8009744:	bd30      	pop	{r4, r5, pc}
 8009746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800974e:	2d19      	cmp	r5, #25
 8009750:	bf98      	it	ls
 8009752:	3220      	addls	r2, #32
 8009754:	42a2      	cmp	r2, r4
 8009756:	d0f0      	beq.n	800973a <__match+0x6>
 8009758:	2000      	movs	r0, #0
 800975a:	e7f3      	b.n	8009744 <__match+0x10>

0800975c <__hexnan>:
 800975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	680b      	ldr	r3, [r1, #0]
 8009762:	6801      	ldr	r1, [r0, #0]
 8009764:	115e      	asrs	r6, r3, #5
 8009766:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800976a:	f013 031f 	ands.w	r3, r3, #31
 800976e:	b087      	sub	sp, #28
 8009770:	bf18      	it	ne
 8009772:	3604      	addne	r6, #4
 8009774:	2500      	movs	r5, #0
 8009776:	1f37      	subs	r7, r6, #4
 8009778:	4682      	mov	sl, r0
 800977a:	4690      	mov	r8, r2
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009782:	46b9      	mov	r9, r7
 8009784:	463c      	mov	r4, r7
 8009786:	9502      	str	r5, [sp, #8]
 8009788:	46ab      	mov	fp, r5
 800978a:	784a      	ldrb	r2, [r1, #1]
 800978c:	1c4b      	adds	r3, r1, #1
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	b342      	cbz	r2, 80097e4 <__hexnan+0x88>
 8009792:	4610      	mov	r0, r2
 8009794:	9105      	str	r1, [sp, #20]
 8009796:	9204      	str	r2, [sp, #16]
 8009798:	f7ff fd94 	bl	80092c4 <__hexdig_fun>
 800979c:	2800      	cmp	r0, #0
 800979e:	d151      	bne.n	8009844 <__hexnan+0xe8>
 80097a0:	9a04      	ldr	r2, [sp, #16]
 80097a2:	9905      	ldr	r1, [sp, #20]
 80097a4:	2a20      	cmp	r2, #32
 80097a6:	d818      	bhi.n	80097da <__hexnan+0x7e>
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	459b      	cmp	fp, r3
 80097ac:	dd13      	ble.n	80097d6 <__hexnan+0x7a>
 80097ae:	454c      	cmp	r4, r9
 80097b0:	d206      	bcs.n	80097c0 <__hexnan+0x64>
 80097b2:	2d07      	cmp	r5, #7
 80097b4:	dc04      	bgt.n	80097c0 <__hexnan+0x64>
 80097b6:	462a      	mov	r2, r5
 80097b8:	4649      	mov	r1, r9
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7ff ffa8 	bl	8009710 <L_shift>
 80097c0:	4544      	cmp	r4, r8
 80097c2:	d952      	bls.n	800986a <__hexnan+0x10e>
 80097c4:	2300      	movs	r3, #0
 80097c6:	f1a4 0904 	sub.w	r9, r4, #4
 80097ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ce:	f8cd b008 	str.w	fp, [sp, #8]
 80097d2:	464c      	mov	r4, r9
 80097d4:	461d      	mov	r5, r3
 80097d6:	9903      	ldr	r1, [sp, #12]
 80097d8:	e7d7      	b.n	800978a <__hexnan+0x2e>
 80097da:	2a29      	cmp	r2, #41	@ 0x29
 80097dc:	d157      	bne.n	800988e <__hexnan+0x132>
 80097de:	3102      	adds	r1, #2
 80097e0:	f8ca 1000 	str.w	r1, [sl]
 80097e4:	f1bb 0f00 	cmp.w	fp, #0
 80097e8:	d051      	beq.n	800988e <__hexnan+0x132>
 80097ea:	454c      	cmp	r4, r9
 80097ec:	d206      	bcs.n	80097fc <__hexnan+0xa0>
 80097ee:	2d07      	cmp	r5, #7
 80097f0:	dc04      	bgt.n	80097fc <__hexnan+0xa0>
 80097f2:	462a      	mov	r2, r5
 80097f4:	4649      	mov	r1, r9
 80097f6:	4620      	mov	r0, r4
 80097f8:	f7ff ff8a 	bl	8009710 <L_shift>
 80097fc:	4544      	cmp	r4, r8
 80097fe:	d936      	bls.n	800986e <__hexnan+0x112>
 8009800:	f1a8 0204 	sub.w	r2, r8, #4
 8009804:	4623      	mov	r3, r4
 8009806:	f853 1b04 	ldr.w	r1, [r3], #4
 800980a:	f842 1f04 	str.w	r1, [r2, #4]!
 800980e:	429f      	cmp	r7, r3
 8009810:	d2f9      	bcs.n	8009806 <__hexnan+0xaa>
 8009812:	1b3b      	subs	r3, r7, r4
 8009814:	f023 0303 	bic.w	r3, r3, #3
 8009818:	3304      	adds	r3, #4
 800981a:	3401      	adds	r4, #1
 800981c:	3e03      	subs	r6, #3
 800981e:	42b4      	cmp	r4, r6
 8009820:	bf88      	it	hi
 8009822:	2304      	movhi	r3, #4
 8009824:	4443      	add	r3, r8
 8009826:	2200      	movs	r2, #0
 8009828:	f843 2b04 	str.w	r2, [r3], #4
 800982c:	429f      	cmp	r7, r3
 800982e:	d2fb      	bcs.n	8009828 <__hexnan+0xcc>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	b91b      	cbnz	r3, 800983c <__hexnan+0xe0>
 8009834:	4547      	cmp	r7, r8
 8009836:	d128      	bne.n	800988a <__hexnan+0x12e>
 8009838:	2301      	movs	r3, #1
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	2005      	movs	r0, #5
 800983e:	b007      	add	sp, #28
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	3501      	adds	r5, #1
 8009846:	2d08      	cmp	r5, #8
 8009848:	f10b 0b01 	add.w	fp, fp, #1
 800984c:	dd06      	ble.n	800985c <__hexnan+0x100>
 800984e:	4544      	cmp	r4, r8
 8009850:	d9c1      	bls.n	80097d6 <__hexnan+0x7a>
 8009852:	2300      	movs	r3, #0
 8009854:	f844 3c04 	str.w	r3, [r4, #-4]
 8009858:	2501      	movs	r5, #1
 800985a:	3c04      	subs	r4, #4
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	f000 000f 	and.w	r0, r0, #15
 8009862:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009866:	6020      	str	r0, [r4, #0]
 8009868:	e7b5      	b.n	80097d6 <__hexnan+0x7a>
 800986a:	2508      	movs	r5, #8
 800986c:	e7b3      	b.n	80097d6 <__hexnan+0x7a>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0dd      	beq.n	8009830 <__hexnan+0xd4>
 8009874:	f1c3 0320 	rsb	r3, r3, #32
 8009878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800987c:	40da      	lsrs	r2, r3
 800987e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009882:	4013      	ands	r3, r2
 8009884:	f846 3c04 	str.w	r3, [r6, #-4]
 8009888:	e7d2      	b.n	8009830 <__hexnan+0xd4>
 800988a:	3f04      	subs	r7, #4
 800988c:	e7d0      	b.n	8009830 <__hexnan+0xd4>
 800988e:	2004      	movs	r0, #4
 8009890:	e7d5      	b.n	800983e <__hexnan+0xe2>

08009892 <__ssputs_r>:
 8009892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009896:	688e      	ldr	r6, [r1, #8]
 8009898:	461f      	mov	r7, r3
 800989a:	42be      	cmp	r6, r7
 800989c:	680b      	ldr	r3, [r1, #0]
 800989e:	4682      	mov	sl, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	4690      	mov	r8, r2
 80098a4:	d82d      	bhi.n	8009902 <__ssputs_r+0x70>
 80098a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098ae:	d026      	beq.n	80098fe <__ssputs_r+0x6c>
 80098b0:	6965      	ldr	r5, [r4, #20]
 80098b2:	6909      	ldr	r1, [r1, #16]
 80098b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098b8:	eba3 0901 	sub.w	r9, r3, r1
 80098bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c0:	1c7b      	adds	r3, r7, #1
 80098c2:	444b      	add	r3, r9
 80098c4:	106d      	asrs	r5, r5, #1
 80098c6:	429d      	cmp	r5, r3
 80098c8:	bf38      	it	cc
 80098ca:	461d      	movcc	r5, r3
 80098cc:	0553      	lsls	r3, r2, #21
 80098ce:	d527      	bpl.n	8009920 <__ssputs_r+0x8e>
 80098d0:	4629      	mov	r1, r5
 80098d2:	f000 f95f 	bl	8009b94 <_malloc_r>
 80098d6:	4606      	mov	r6, r0
 80098d8:	b360      	cbz	r0, 8009934 <__ssputs_r+0xa2>
 80098da:	6921      	ldr	r1, [r4, #16]
 80098dc:	464a      	mov	r2, r9
 80098de:	f7fe fe32 	bl	8008546 <memcpy>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	6126      	str	r6, [r4, #16]
 80098f0:	6165      	str	r5, [r4, #20]
 80098f2:	444e      	add	r6, r9
 80098f4:	eba5 0509 	sub.w	r5, r5, r9
 80098f8:	6026      	str	r6, [r4, #0]
 80098fa:	60a5      	str	r5, [r4, #8]
 80098fc:	463e      	mov	r6, r7
 80098fe:	42be      	cmp	r6, r7
 8009900:	d900      	bls.n	8009904 <__ssputs_r+0x72>
 8009902:	463e      	mov	r6, r7
 8009904:	6820      	ldr	r0, [r4, #0]
 8009906:	4632      	mov	r2, r6
 8009908:	4641      	mov	r1, r8
 800990a:	f000 ffbd 	bl	800a888 <memmove>
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	1b9b      	subs	r3, r3, r6
 8009912:	60a3      	str	r3, [r4, #8]
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	4433      	add	r3, r6
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	2000      	movs	r0, #0
 800991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009920:	462a      	mov	r2, r5
 8009922:	f000 ff76 	bl	800a812 <_realloc_r>
 8009926:	4606      	mov	r6, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	d1e0      	bne.n	80098ee <__ssputs_r+0x5c>
 800992c:	6921      	ldr	r1, [r4, #16]
 800992e:	4650      	mov	r0, sl
 8009930:	f001 f84c 	bl	800a9cc <_free_r>
 8009934:	230c      	movs	r3, #12
 8009936:	f8ca 3000 	str.w	r3, [sl]
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009946:	e7e9      	b.n	800991c <__ssputs_r+0x8a>

08009948 <_svfiprintf_r>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	4698      	mov	r8, r3
 800994e:	898b      	ldrh	r3, [r1, #12]
 8009950:	061b      	lsls	r3, r3, #24
 8009952:	b09d      	sub	sp, #116	@ 0x74
 8009954:	4607      	mov	r7, r0
 8009956:	460d      	mov	r5, r1
 8009958:	4614      	mov	r4, r2
 800995a:	d510      	bpl.n	800997e <_svfiprintf_r+0x36>
 800995c:	690b      	ldr	r3, [r1, #16]
 800995e:	b973      	cbnz	r3, 800997e <_svfiprintf_r+0x36>
 8009960:	2140      	movs	r1, #64	@ 0x40
 8009962:	f000 f917 	bl	8009b94 <_malloc_r>
 8009966:	6028      	str	r0, [r5, #0]
 8009968:	6128      	str	r0, [r5, #16]
 800996a:	b930      	cbnz	r0, 800997a <_svfiprintf_r+0x32>
 800996c:	230c      	movs	r3, #12
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009974:	b01d      	add	sp, #116	@ 0x74
 8009976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997a:	2340      	movs	r3, #64	@ 0x40
 800997c:	616b      	str	r3, [r5, #20]
 800997e:	2300      	movs	r3, #0
 8009980:	9309      	str	r3, [sp, #36]	@ 0x24
 8009982:	2320      	movs	r3, #32
 8009984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009988:	f8cd 800c 	str.w	r8, [sp, #12]
 800998c:	2330      	movs	r3, #48	@ 0x30
 800998e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b2c <_svfiprintf_r+0x1e4>
 8009992:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009996:	f04f 0901 	mov.w	r9, #1
 800999a:	4623      	mov	r3, r4
 800999c:	469a      	mov	sl, r3
 800999e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a2:	b10a      	cbz	r2, 80099a8 <_svfiprintf_r+0x60>
 80099a4:	2a25      	cmp	r2, #37	@ 0x25
 80099a6:	d1f9      	bne.n	800999c <_svfiprintf_r+0x54>
 80099a8:	ebba 0b04 	subs.w	fp, sl, r4
 80099ac:	d00b      	beq.n	80099c6 <_svfiprintf_r+0x7e>
 80099ae:	465b      	mov	r3, fp
 80099b0:	4622      	mov	r2, r4
 80099b2:	4629      	mov	r1, r5
 80099b4:	4638      	mov	r0, r7
 80099b6:	f7ff ff6c 	bl	8009892 <__ssputs_r>
 80099ba:	3001      	adds	r0, #1
 80099bc:	f000 80a7 	beq.w	8009b0e <_svfiprintf_r+0x1c6>
 80099c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099c2:	445a      	add	r2, fp
 80099c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80099c6:	f89a 3000 	ldrb.w	r3, [sl]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 809f 	beq.w	8009b0e <_svfiprintf_r+0x1c6>
 80099d0:	2300      	movs	r3, #0
 80099d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099da:	f10a 0a01 	add.w	sl, sl, #1
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80099e8:	4654      	mov	r4, sl
 80099ea:	2205      	movs	r2, #5
 80099ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f0:	484e      	ldr	r0, [pc, #312]	@ (8009b2c <_svfiprintf_r+0x1e4>)
 80099f2:	f7f6 fc05 	bl	8000200 <memchr>
 80099f6:	9a04      	ldr	r2, [sp, #16]
 80099f8:	b9d8      	cbnz	r0, 8009a32 <_svfiprintf_r+0xea>
 80099fa:	06d0      	lsls	r0, r2, #27
 80099fc:	bf44      	itt	mi
 80099fe:	2320      	movmi	r3, #32
 8009a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a04:	0711      	lsls	r1, r2, #28
 8009a06:	bf44      	itt	mi
 8009a08:	232b      	movmi	r3, #43	@ 0x2b
 8009a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a14:	d015      	beq.n	8009a42 <_svfiprintf_r+0xfa>
 8009a16:	9a07      	ldr	r2, [sp, #28]
 8009a18:	4654      	mov	r4, sl
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	f04f 0c0a 	mov.w	ip, #10
 8009a20:	4621      	mov	r1, r4
 8009a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a26:	3b30      	subs	r3, #48	@ 0x30
 8009a28:	2b09      	cmp	r3, #9
 8009a2a:	d94b      	bls.n	8009ac4 <_svfiprintf_r+0x17c>
 8009a2c:	b1b0      	cbz	r0, 8009a5c <_svfiprintf_r+0x114>
 8009a2e:	9207      	str	r2, [sp, #28]
 8009a30:	e014      	b.n	8009a5c <_svfiprintf_r+0x114>
 8009a32:	eba0 0308 	sub.w	r3, r0, r8
 8009a36:	fa09 f303 	lsl.w	r3, r9, r3
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	46a2      	mov	sl, r4
 8009a40:	e7d2      	b.n	80099e8 <_svfiprintf_r+0xa0>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	1d19      	adds	r1, r3, #4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	9103      	str	r1, [sp, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfbb      	ittet	lt
 8009a4e:	425b      	neglt	r3, r3
 8009a50:	f042 0202 	orrlt.w	r2, r2, #2
 8009a54:	9307      	strge	r3, [sp, #28]
 8009a56:	9307      	strlt	r3, [sp, #28]
 8009a58:	bfb8      	it	lt
 8009a5a:	9204      	strlt	r2, [sp, #16]
 8009a5c:	7823      	ldrb	r3, [r4, #0]
 8009a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a60:	d10a      	bne.n	8009a78 <_svfiprintf_r+0x130>
 8009a62:	7863      	ldrb	r3, [r4, #1]
 8009a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a66:	d132      	bne.n	8009ace <_svfiprintf_r+0x186>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	1d1a      	adds	r2, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	9203      	str	r2, [sp, #12]
 8009a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a74:	3402      	adds	r4, #2
 8009a76:	9305      	str	r3, [sp, #20]
 8009a78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b3c <_svfiprintf_r+0x1f4>
 8009a7c:	7821      	ldrb	r1, [r4, #0]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	4650      	mov	r0, sl
 8009a82:	f7f6 fbbd 	bl	8000200 <memchr>
 8009a86:	b138      	cbz	r0, 8009a98 <_svfiprintf_r+0x150>
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	eba0 000a 	sub.w	r0, r0, sl
 8009a8e:	2240      	movs	r2, #64	@ 0x40
 8009a90:	4082      	lsls	r2, r0
 8009a92:	4313      	orrs	r3, r2
 8009a94:	3401      	adds	r4, #1
 8009a96:	9304      	str	r3, [sp, #16]
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	4824      	ldr	r0, [pc, #144]	@ (8009b30 <_svfiprintf_r+0x1e8>)
 8009a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aa2:	2206      	movs	r2, #6
 8009aa4:	f7f6 fbac 	bl	8000200 <memchr>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d036      	beq.n	8009b1a <_svfiprintf_r+0x1d2>
 8009aac:	4b21      	ldr	r3, [pc, #132]	@ (8009b34 <_svfiprintf_r+0x1ec>)
 8009aae:	bb1b      	cbnz	r3, 8009af8 <_svfiprintf_r+0x1b0>
 8009ab0:	9b03      	ldr	r3, [sp, #12]
 8009ab2:	3307      	adds	r3, #7
 8009ab4:	f023 0307 	bic.w	r3, r3, #7
 8009ab8:	3308      	adds	r3, #8
 8009aba:	9303      	str	r3, [sp, #12]
 8009abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009abe:	4433      	add	r3, r6
 8009ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ac2:	e76a      	b.n	800999a <_svfiprintf_r+0x52>
 8009ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ac8:	460c      	mov	r4, r1
 8009aca:	2001      	movs	r0, #1
 8009acc:	e7a8      	b.n	8009a20 <_svfiprintf_r+0xd8>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	3401      	adds	r4, #1
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f04f 0c0a 	mov.w	ip, #10
 8009ada:	4620      	mov	r0, r4
 8009adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae0:	3a30      	subs	r2, #48	@ 0x30
 8009ae2:	2a09      	cmp	r2, #9
 8009ae4:	d903      	bls.n	8009aee <_svfiprintf_r+0x1a6>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0c6      	beq.n	8009a78 <_svfiprintf_r+0x130>
 8009aea:	9105      	str	r1, [sp, #20]
 8009aec:	e7c4      	b.n	8009a78 <_svfiprintf_r+0x130>
 8009aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af2:	4604      	mov	r4, r0
 8009af4:	2301      	movs	r3, #1
 8009af6:	e7f0      	b.n	8009ada <_svfiprintf_r+0x192>
 8009af8:	ab03      	add	r3, sp, #12
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	462a      	mov	r2, r5
 8009afe:	4b0e      	ldr	r3, [pc, #56]	@ (8009b38 <_svfiprintf_r+0x1f0>)
 8009b00:	a904      	add	r1, sp, #16
 8009b02:	4638      	mov	r0, r7
 8009b04:	f7fc ffa0 	bl	8006a48 <_printf_float>
 8009b08:	1c42      	adds	r2, r0, #1
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	d1d6      	bne.n	8009abc <_svfiprintf_r+0x174>
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	065b      	lsls	r3, r3, #25
 8009b12:	f53f af2d 	bmi.w	8009970 <_svfiprintf_r+0x28>
 8009b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b18:	e72c      	b.n	8009974 <_svfiprintf_r+0x2c>
 8009b1a:	ab03      	add	r3, sp, #12
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	462a      	mov	r2, r5
 8009b20:	4b05      	ldr	r3, [pc, #20]	@ (8009b38 <_svfiprintf_r+0x1f0>)
 8009b22:	a904      	add	r1, sp, #16
 8009b24:	4638      	mov	r0, r7
 8009b26:	f7fd fa27 	bl	8006f78 <_printf_i>
 8009b2a:	e7ed      	b.n	8009b08 <_svfiprintf_r+0x1c0>
 8009b2c:	0800b336 	.word	0x0800b336
 8009b30:	0800b340 	.word	0x0800b340
 8009b34:	08006a49 	.word	0x08006a49
 8009b38:	08009893 	.word	0x08009893
 8009b3c:	0800b33c 	.word	0x0800b33c

08009b40 <malloc>:
 8009b40:	4b02      	ldr	r3, [pc, #8]	@ (8009b4c <malloc+0xc>)
 8009b42:	4601      	mov	r1, r0
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	f000 b825 	b.w	8009b94 <_malloc_r>
 8009b4a:	bf00      	nop
 8009b4c:	20000184 	.word	0x20000184

08009b50 <sbrk_aligned>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	4e0f      	ldr	r6, [pc, #60]	@ (8009b90 <sbrk_aligned+0x40>)
 8009b54:	460c      	mov	r4, r1
 8009b56:	6831      	ldr	r1, [r6, #0]
 8009b58:	4605      	mov	r5, r0
 8009b5a:	b911      	cbnz	r1, 8009b62 <sbrk_aligned+0x12>
 8009b5c:	f000 fee2 	bl	800a924 <_sbrk_r>
 8009b60:	6030      	str	r0, [r6, #0]
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 fedd 	bl	800a924 <_sbrk_r>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d103      	bne.n	8009b76 <sbrk_aligned+0x26>
 8009b6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009b72:	4620      	mov	r0, r4
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	1cc4      	adds	r4, r0, #3
 8009b78:	f024 0403 	bic.w	r4, r4, #3
 8009b7c:	42a0      	cmp	r0, r4
 8009b7e:	d0f8      	beq.n	8009b72 <sbrk_aligned+0x22>
 8009b80:	1a21      	subs	r1, r4, r0
 8009b82:	4628      	mov	r0, r5
 8009b84:	f000 fece 	bl	800a924 <_sbrk_r>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d1f2      	bne.n	8009b72 <sbrk_aligned+0x22>
 8009b8c:	e7ef      	b.n	8009b6e <sbrk_aligned+0x1e>
 8009b8e:	bf00      	nop
 8009b90:	20000438 	.word	0x20000438

08009b94 <_malloc_r>:
 8009b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b98:	1ccd      	adds	r5, r1, #3
 8009b9a:	f025 0503 	bic.w	r5, r5, #3
 8009b9e:	3508      	adds	r5, #8
 8009ba0:	2d0c      	cmp	r5, #12
 8009ba2:	bf38      	it	cc
 8009ba4:	250c      	movcc	r5, #12
 8009ba6:	2d00      	cmp	r5, #0
 8009ba8:	4606      	mov	r6, r0
 8009baa:	db01      	blt.n	8009bb0 <_malloc_r+0x1c>
 8009bac:	42a9      	cmp	r1, r5
 8009bae:	d904      	bls.n	8009bba <_malloc_r+0x26>
 8009bb0:	230c      	movs	r3, #12
 8009bb2:	6033      	str	r3, [r6, #0]
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c90 <_malloc_r+0xfc>
 8009bbe:	f000 f927 	bl	8009e10 <__malloc_lock>
 8009bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8009bc6:	461c      	mov	r4, r3
 8009bc8:	bb44      	cbnz	r4, 8009c1c <_malloc_r+0x88>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f7ff ffbf 	bl	8009b50 <sbrk_aligned>
 8009bd2:	1c43      	adds	r3, r0, #1
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	d158      	bne.n	8009c8a <_malloc_r+0xf6>
 8009bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8009bdc:	4627      	mov	r7, r4
 8009bde:	2f00      	cmp	r7, #0
 8009be0:	d143      	bne.n	8009c6a <_malloc_r+0xd6>
 8009be2:	2c00      	cmp	r4, #0
 8009be4:	d04b      	beq.n	8009c7e <_malloc_r+0xea>
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	4639      	mov	r1, r7
 8009bea:	4630      	mov	r0, r6
 8009bec:	eb04 0903 	add.w	r9, r4, r3
 8009bf0:	f000 fe98 	bl	800a924 <_sbrk_r>
 8009bf4:	4581      	cmp	r9, r0
 8009bf6:	d142      	bne.n	8009c7e <_malloc_r+0xea>
 8009bf8:	6821      	ldr	r1, [r4, #0]
 8009bfa:	1a6d      	subs	r5, r5, r1
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7ff ffa6 	bl	8009b50 <sbrk_aligned>
 8009c04:	3001      	adds	r0, #1
 8009c06:	d03a      	beq.n	8009c7e <_malloc_r+0xea>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	442b      	add	r3, r5
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	bb62      	cbnz	r2, 8009c70 <_malloc_r+0xdc>
 8009c16:	f8c8 7000 	str.w	r7, [r8]
 8009c1a:	e00f      	b.n	8009c3c <_malloc_r+0xa8>
 8009c1c:	6822      	ldr	r2, [r4, #0]
 8009c1e:	1b52      	subs	r2, r2, r5
 8009c20:	d420      	bmi.n	8009c64 <_malloc_r+0xd0>
 8009c22:	2a0b      	cmp	r2, #11
 8009c24:	d917      	bls.n	8009c56 <_malloc_r+0xc2>
 8009c26:	1961      	adds	r1, r4, r5
 8009c28:	42a3      	cmp	r3, r4
 8009c2a:	6025      	str	r5, [r4, #0]
 8009c2c:	bf18      	it	ne
 8009c2e:	6059      	strne	r1, [r3, #4]
 8009c30:	6863      	ldr	r3, [r4, #4]
 8009c32:	bf08      	it	eq
 8009c34:	f8c8 1000 	streq.w	r1, [r8]
 8009c38:	5162      	str	r2, [r4, r5]
 8009c3a:	604b      	str	r3, [r1, #4]
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f000 f8ed 	bl	8009e1c <__malloc_unlock>
 8009c42:	f104 000b 	add.w	r0, r4, #11
 8009c46:	1d23      	adds	r3, r4, #4
 8009c48:	f020 0007 	bic.w	r0, r0, #7
 8009c4c:	1ac2      	subs	r2, r0, r3
 8009c4e:	bf1c      	itt	ne
 8009c50:	1a1b      	subne	r3, r3, r0
 8009c52:	50a3      	strne	r3, [r4, r2]
 8009c54:	e7af      	b.n	8009bb6 <_malloc_r+0x22>
 8009c56:	6862      	ldr	r2, [r4, #4]
 8009c58:	42a3      	cmp	r3, r4
 8009c5a:	bf0c      	ite	eq
 8009c5c:	f8c8 2000 	streq.w	r2, [r8]
 8009c60:	605a      	strne	r2, [r3, #4]
 8009c62:	e7eb      	b.n	8009c3c <_malloc_r+0xa8>
 8009c64:	4623      	mov	r3, r4
 8009c66:	6864      	ldr	r4, [r4, #4]
 8009c68:	e7ae      	b.n	8009bc8 <_malloc_r+0x34>
 8009c6a:	463c      	mov	r4, r7
 8009c6c:	687f      	ldr	r7, [r7, #4]
 8009c6e:	e7b6      	b.n	8009bde <_malloc_r+0x4a>
 8009c70:	461a      	mov	r2, r3
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	d1fb      	bne.n	8009c70 <_malloc_r+0xdc>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	6053      	str	r3, [r2, #4]
 8009c7c:	e7de      	b.n	8009c3c <_malloc_r+0xa8>
 8009c7e:	230c      	movs	r3, #12
 8009c80:	6033      	str	r3, [r6, #0]
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 f8ca 	bl	8009e1c <__malloc_unlock>
 8009c88:	e794      	b.n	8009bb4 <_malloc_r+0x20>
 8009c8a:	6005      	str	r5, [r0, #0]
 8009c8c:	e7d6      	b.n	8009c3c <_malloc_r+0xa8>
 8009c8e:	bf00      	nop
 8009c90:	2000043c 	.word	0x2000043c

08009c94 <__ascii_mbtowc>:
 8009c94:	b082      	sub	sp, #8
 8009c96:	b901      	cbnz	r1, 8009c9a <__ascii_mbtowc+0x6>
 8009c98:	a901      	add	r1, sp, #4
 8009c9a:	b142      	cbz	r2, 8009cae <__ascii_mbtowc+0x1a>
 8009c9c:	b14b      	cbz	r3, 8009cb2 <__ascii_mbtowc+0x1e>
 8009c9e:	7813      	ldrb	r3, [r2, #0]
 8009ca0:	600b      	str	r3, [r1, #0]
 8009ca2:	7812      	ldrb	r2, [r2, #0]
 8009ca4:	1e10      	subs	r0, r2, #0
 8009ca6:	bf18      	it	ne
 8009ca8:	2001      	movne	r0, #1
 8009caa:	b002      	add	sp, #8
 8009cac:	4770      	bx	lr
 8009cae:	4610      	mov	r0, r2
 8009cb0:	e7fb      	b.n	8009caa <__ascii_mbtowc+0x16>
 8009cb2:	f06f 0001 	mvn.w	r0, #1
 8009cb6:	e7f8      	b.n	8009caa <__ascii_mbtowc+0x16>

08009cb8 <__sflush_r>:
 8009cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	0716      	lsls	r6, r2, #28
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	d454      	bmi.n	8009d72 <__sflush_r+0xba>
 8009cc8:	684b      	ldr	r3, [r1, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dc02      	bgt.n	8009cd4 <__sflush_r+0x1c>
 8009cce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	dd48      	ble.n	8009d66 <__sflush_r+0xae>
 8009cd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	d045      	beq.n	8009d66 <__sflush_r+0xae>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ce0:	682f      	ldr	r7, [r5, #0]
 8009ce2:	6a21      	ldr	r1, [r4, #32]
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	d030      	beq.n	8009d4a <__sflush_r+0x92>
 8009ce8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	0759      	lsls	r1, r3, #29
 8009cee:	d505      	bpl.n	8009cfc <__sflush_r+0x44>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cf6:	b10b      	cbz	r3, 8009cfc <__sflush_r+0x44>
 8009cf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cfa:	1ad2      	subs	r2, r2, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d00:	6a21      	ldr	r1, [r4, #32]
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b0      	blx	r6
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	d106      	bne.n	8009d1a <__sflush_r+0x62>
 8009d0c:	6829      	ldr	r1, [r5, #0]
 8009d0e:	291d      	cmp	r1, #29
 8009d10:	d82b      	bhi.n	8009d6a <__sflush_r+0xb2>
 8009d12:	4a2a      	ldr	r2, [pc, #168]	@ (8009dbc <__sflush_r+0x104>)
 8009d14:	410a      	asrs	r2, r1
 8009d16:	07d6      	lsls	r6, r2, #31
 8009d18:	d427      	bmi.n	8009d6a <__sflush_r+0xb2>
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	6062      	str	r2, [r4, #4]
 8009d1e:	04d9      	lsls	r1, r3, #19
 8009d20:	6922      	ldr	r2, [r4, #16]
 8009d22:	6022      	str	r2, [r4, #0]
 8009d24:	d504      	bpl.n	8009d30 <__sflush_r+0x78>
 8009d26:	1c42      	adds	r2, r0, #1
 8009d28:	d101      	bne.n	8009d2e <__sflush_r+0x76>
 8009d2a:	682b      	ldr	r3, [r5, #0]
 8009d2c:	b903      	cbnz	r3, 8009d30 <__sflush_r+0x78>
 8009d2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d32:	602f      	str	r7, [r5, #0]
 8009d34:	b1b9      	cbz	r1, 8009d66 <__sflush_r+0xae>
 8009d36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d3a:	4299      	cmp	r1, r3
 8009d3c:	d002      	beq.n	8009d44 <__sflush_r+0x8c>
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 fe44 	bl	800a9cc <_free_r>
 8009d44:	2300      	movs	r3, #0
 8009d46:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d48:	e00d      	b.n	8009d66 <__sflush_r+0xae>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	4602      	mov	r2, r0
 8009d52:	1c50      	adds	r0, r2, #1
 8009d54:	d1c9      	bne.n	8009cea <__sflush_r+0x32>
 8009d56:	682b      	ldr	r3, [r5, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0c6      	beq.n	8009cea <__sflush_r+0x32>
 8009d5c:	2b1d      	cmp	r3, #29
 8009d5e:	d001      	beq.n	8009d64 <__sflush_r+0xac>
 8009d60:	2b16      	cmp	r3, #22
 8009d62:	d11e      	bne.n	8009da2 <__sflush_r+0xea>
 8009d64:	602f      	str	r7, [r5, #0]
 8009d66:	2000      	movs	r0, #0
 8009d68:	e022      	b.n	8009db0 <__sflush_r+0xf8>
 8009d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6e:	b21b      	sxth	r3, r3
 8009d70:	e01b      	b.n	8009daa <__sflush_r+0xf2>
 8009d72:	690f      	ldr	r7, [r1, #16]
 8009d74:	2f00      	cmp	r7, #0
 8009d76:	d0f6      	beq.n	8009d66 <__sflush_r+0xae>
 8009d78:	0793      	lsls	r3, r2, #30
 8009d7a:	680e      	ldr	r6, [r1, #0]
 8009d7c:	bf08      	it	eq
 8009d7e:	694b      	ldreq	r3, [r1, #20]
 8009d80:	600f      	str	r7, [r1, #0]
 8009d82:	bf18      	it	ne
 8009d84:	2300      	movne	r3, #0
 8009d86:	eba6 0807 	sub.w	r8, r6, r7
 8009d8a:	608b      	str	r3, [r1, #8]
 8009d8c:	f1b8 0f00 	cmp.w	r8, #0
 8009d90:	dde9      	ble.n	8009d66 <__sflush_r+0xae>
 8009d92:	6a21      	ldr	r1, [r4, #32]
 8009d94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d96:	4643      	mov	r3, r8
 8009d98:	463a      	mov	r2, r7
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b0      	blx	r6
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	dc08      	bgt.n	8009db4 <__sflush_r+0xfc>
 8009da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db4:	4407      	add	r7, r0
 8009db6:	eba8 0800 	sub.w	r8, r8, r0
 8009dba:	e7e7      	b.n	8009d8c <__sflush_r+0xd4>
 8009dbc:	dfbffffe 	.word	0xdfbffffe

08009dc0 <_fflush_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	690b      	ldr	r3, [r1, #16]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	b913      	cbnz	r3, 8009dd0 <_fflush_r+0x10>
 8009dca:	2500      	movs	r5, #0
 8009dcc:	4628      	mov	r0, r5
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	b118      	cbz	r0, 8009dda <_fflush_r+0x1a>
 8009dd2:	6a03      	ldr	r3, [r0, #32]
 8009dd4:	b90b      	cbnz	r3, 8009dda <_fflush_r+0x1a>
 8009dd6:	f7fd fcaf 	bl	8007738 <__sinit>
 8009dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0f3      	beq.n	8009dca <_fflush_r+0xa>
 8009de2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009de4:	07d0      	lsls	r0, r2, #31
 8009de6:	d404      	bmi.n	8009df2 <_fflush_r+0x32>
 8009de8:	0599      	lsls	r1, r3, #22
 8009dea:	d402      	bmi.n	8009df2 <_fflush_r+0x32>
 8009dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dee:	f7fe fba8 	bl	8008542 <__retarget_lock_acquire_recursive>
 8009df2:	4628      	mov	r0, r5
 8009df4:	4621      	mov	r1, r4
 8009df6:	f7ff ff5f 	bl	8009cb8 <__sflush_r>
 8009dfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dfc:	07da      	lsls	r2, r3, #31
 8009dfe:	4605      	mov	r5, r0
 8009e00:	d4e4      	bmi.n	8009dcc <_fflush_r+0xc>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	059b      	lsls	r3, r3, #22
 8009e06:	d4e1      	bmi.n	8009dcc <_fflush_r+0xc>
 8009e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e0a:	f7fe fb9b 	bl	8008544 <__retarget_lock_release_recursive>
 8009e0e:	e7dd      	b.n	8009dcc <_fflush_r+0xc>

08009e10 <__malloc_lock>:
 8009e10:	4801      	ldr	r0, [pc, #4]	@ (8009e18 <__malloc_lock+0x8>)
 8009e12:	f7fe bb96 	b.w	8008542 <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	20000434 	.word	0x20000434

08009e1c <__malloc_unlock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	@ (8009e24 <__malloc_unlock+0x8>)
 8009e1e:	f7fe bb91 	b.w	8008544 <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	20000434 	.word	0x20000434

08009e28 <_Balloc>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	69c6      	ldr	r6, [r0, #28]
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	b976      	cbnz	r6, 8009e50 <_Balloc+0x28>
 8009e32:	2010      	movs	r0, #16
 8009e34:	f7ff fe84 	bl	8009b40 <malloc>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	61e0      	str	r0, [r4, #28]
 8009e3c:	b920      	cbnz	r0, 8009e48 <_Balloc+0x20>
 8009e3e:	4b18      	ldr	r3, [pc, #96]	@ (8009ea0 <_Balloc+0x78>)
 8009e40:	4818      	ldr	r0, [pc, #96]	@ (8009ea4 <_Balloc+0x7c>)
 8009e42:	216b      	movs	r1, #107	@ 0x6b
 8009e44:	f000 fd90 	bl	800a968 <__assert_func>
 8009e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e4c:	6006      	str	r6, [r0, #0]
 8009e4e:	60c6      	str	r6, [r0, #12]
 8009e50:	69e6      	ldr	r6, [r4, #28]
 8009e52:	68f3      	ldr	r3, [r6, #12]
 8009e54:	b183      	cbz	r3, 8009e78 <_Balloc+0x50>
 8009e56:	69e3      	ldr	r3, [r4, #28]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e5e:	b9b8      	cbnz	r0, 8009e90 <_Balloc+0x68>
 8009e60:	2101      	movs	r1, #1
 8009e62:	fa01 f605 	lsl.w	r6, r1, r5
 8009e66:	1d72      	adds	r2, r6, #5
 8009e68:	0092      	lsls	r2, r2, #2
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fd9a 	bl	800a9a4 <_calloc_r>
 8009e70:	b160      	cbz	r0, 8009e8c <_Balloc+0x64>
 8009e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e76:	e00e      	b.n	8009e96 <_Balloc+0x6e>
 8009e78:	2221      	movs	r2, #33	@ 0x21
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fd91 	bl	800a9a4 <_calloc_r>
 8009e82:	69e3      	ldr	r3, [r4, #28]
 8009e84:	60f0      	str	r0, [r6, #12]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e4      	bne.n	8009e56 <_Balloc+0x2e>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	6802      	ldr	r2, [r0, #0]
 8009e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e96:	2300      	movs	r3, #0
 8009e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e9c:	e7f7      	b.n	8009e8e <_Balloc+0x66>
 8009e9e:	bf00      	nop
 8009ea0:	0800b256 	.word	0x0800b256
 8009ea4:	0800b347 	.word	0x0800b347

08009ea8 <_Bfree>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	69c6      	ldr	r6, [r0, #28]
 8009eac:	4605      	mov	r5, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	b976      	cbnz	r6, 8009ed0 <_Bfree+0x28>
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f7ff fe44 	bl	8009b40 <malloc>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	61e8      	str	r0, [r5, #28]
 8009ebc:	b920      	cbnz	r0, 8009ec8 <_Bfree+0x20>
 8009ebe:	4b09      	ldr	r3, [pc, #36]	@ (8009ee4 <_Bfree+0x3c>)
 8009ec0:	4809      	ldr	r0, [pc, #36]	@ (8009ee8 <_Bfree+0x40>)
 8009ec2:	218f      	movs	r1, #143	@ 0x8f
 8009ec4:	f000 fd50 	bl	800a968 <__assert_func>
 8009ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ecc:	6006      	str	r6, [r0, #0]
 8009ece:	60c6      	str	r6, [r0, #12]
 8009ed0:	b13c      	cbz	r4, 8009ee2 <_Bfree+0x3a>
 8009ed2:	69eb      	ldr	r3, [r5, #28]
 8009ed4:	6862      	ldr	r2, [r4, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009edc:	6021      	str	r1, [r4, #0]
 8009ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	0800b256 	.word	0x0800b256
 8009ee8:	0800b347 	.word	0x0800b347

08009eec <__multadd>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	690d      	ldr	r5, [r1, #16]
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	461e      	mov	r6, r3
 8009ef8:	f101 0c14 	add.w	ip, r1, #20
 8009efc:	2000      	movs	r0, #0
 8009efe:	f8dc 3000 	ldr.w	r3, [ip]
 8009f02:	b299      	uxth	r1, r3
 8009f04:	fb02 6101 	mla	r1, r2, r1, r6
 8009f08:	0c1e      	lsrs	r6, r3, #16
 8009f0a:	0c0b      	lsrs	r3, r1, #16
 8009f0c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f10:	b289      	uxth	r1, r1
 8009f12:	3001      	adds	r0, #1
 8009f14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f18:	4285      	cmp	r5, r0
 8009f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f22:	dcec      	bgt.n	8009efe <__multadd+0x12>
 8009f24:	b30e      	cbz	r6, 8009f6a <__multadd+0x7e>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc19      	bgt.n	8009f60 <__multadd+0x74>
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	3101      	adds	r1, #1
 8009f32:	f7ff ff79 	bl	8009e28 <_Balloc>
 8009f36:	4680      	mov	r8, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <__multadd+0x5a>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f70 <__multadd+0x84>)
 8009f3e:	480d      	ldr	r0, [pc, #52]	@ (8009f74 <__multadd+0x88>)
 8009f40:	21ba      	movs	r1, #186	@ 0xba
 8009f42:	f000 fd11 	bl	800a968 <__assert_func>
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	3202      	adds	r2, #2
 8009f4a:	f104 010c 	add.w	r1, r4, #12
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	300c      	adds	r0, #12
 8009f52:	f7fe faf8 	bl	8008546 <memcpy>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ffa5 	bl	8009ea8 <_Bfree>
 8009f5e:	4644      	mov	r4, r8
 8009f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f64:	3501      	adds	r5, #1
 8009f66:	615e      	str	r6, [r3, #20]
 8009f68:	6125      	str	r5, [r4, #16]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	0800b2c5 	.word	0x0800b2c5
 8009f74:	0800b347 	.word	0x0800b347

08009f78 <__s2b>:
 8009f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	4615      	mov	r5, r2
 8009f80:	461f      	mov	r7, r3
 8009f82:	2209      	movs	r2, #9
 8009f84:	3308      	adds	r3, #8
 8009f86:	4606      	mov	r6, r0
 8009f88:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	2201      	movs	r2, #1
 8009f90:	429a      	cmp	r2, r3
 8009f92:	db09      	blt.n	8009fa8 <__s2b+0x30>
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff ff47 	bl	8009e28 <_Balloc>
 8009f9a:	b940      	cbnz	r0, 8009fae <__s2b+0x36>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	4b19      	ldr	r3, [pc, #100]	@ (800a004 <__s2b+0x8c>)
 8009fa0:	4819      	ldr	r0, [pc, #100]	@ (800a008 <__s2b+0x90>)
 8009fa2:	21d3      	movs	r1, #211	@ 0xd3
 8009fa4:	f000 fce0 	bl	800a968 <__assert_func>
 8009fa8:	0052      	lsls	r2, r2, #1
 8009faa:	3101      	adds	r1, #1
 8009fac:	e7f0      	b.n	8009f90 <__s2b+0x18>
 8009fae:	9b08      	ldr	r3, [sp, #32]
 8009fb0:	6143      	str	r3, [r0, #20]
 8009fb2:	2d09      	cmp	r5, #9
 8009fb4:	f04f 0301 	mov.w	r3, #1
 8009fb8:	6103      	str	r3, [r0, #16]
 8009fba:	dd16      	ble.n	8009fea <__s2b+0x72>
 8009fbc:	f104 0909 	add.w	r9, r4, #9
 8009fc0:	46c8      	mov	r8, r9
 8009fc2:	442c      	add	r4, r5
 8009fc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fc8:	4601      	mov	r1, r0
 8009fca:	3b30      	subs	r3, #48	@ 0x30
 8009fcc:	220a      	movs	r2, #10
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7ff ff8c 	bl	8009eec <__multadd>
 8009fd4:	45a0      	cmp	r8, r4
 8009fd6:	d1f5      	bne.n	8009fc4 <__s2b+0x4c>
 8009fd8:	f1a5 0408 	sub.w	r4, r5, #8
 8009fdc:	444c      	add	r4, r9
 8009fde:	1b2d      	subs	r5, r5, r4
 8009fe0:	1963      	adds	r3, r4, r5
 8009fe2:	42bb      	cmp	r3, r7
 8009fe4:	db04      	blt.n	8009ff0 <__s2b+0x78>
 8009fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fea:	340a      	adds	r4, #10
 8009fec:	2509      	movs	r5, #9
 8009fee:	e7f6      	b.n	8009fde <__s2b+0x66>
 8009ff0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ff4:	4601      	mov	r1, r0
 8009ff6:	3b30      	subs	r3, #48	@ 0x30
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7ff ff76 	bl	8009eec <__multadd>
 800a000:	e7ee      	b.n	8009fe0 <__s2b+0x68>
 800a002:	bf00      	nop
 800a004:	0800b2c5 	.word	0x0800b2c5
 800a008:	0800b347 	.word	0x0800b347

0800a00c <__hi0bits>:
 800a00c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a010:	4603      	mov	r3, r0
 800a012:	bf36      	itet	cc
 800a014:	0403      	lslcc	r3, r0, #16
 800a016:	2000      	movcs	r0, #0
 800a018:	2010      	movcc	r0, #16
 800a01a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a01e:	bf3c      	itt	cc
 800a020:	021b      	lslcc	r3, r3, #8
 800a022:	3008      	addcc	r0, #8
 800a024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a028:	bf3c      	itt	cc
 800a02a:	011b      	lslcc	r3, r3, #4
 800a02c:	3004      	addcc	r0, #4
 800a02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a032:	bf3c      	itt	cc
 800a034:	009b      	lslcc	r3, r3, #2
 800a036:	3002      	addcc	r0, #2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	db05      	blt.n	800a048 <__hi0bits+0x3c>
 800a03c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a040:	f100 0001 	add.w	r0, r0, #1
 800a044:	bf08      	it	eq
 800a046:	2020      	moveq	r0, #32
 800a048:	4770      	bx	lr

0800a04a <__lo0bits>:
 800a04a:	6803      	ldr	r3, [r0, #0]
 800a04c:	4602      	mov	r2, r0
 800a04e:	f013 0007 	ands.w	r0, r3, #7
 800a052:	d00b      	beq.n	800a06c <__lo0bits+0x22>
 800a054:	07d9      	lsls	r1, r3, #31
 800a056:	d421      	bmi.n	800a09c <__lo0bits+0x52>
 800a058:	0798      	lsls	r0, r3, #30
 800a05a:	bf49      	itett	mi
 800a05c:	085b      	lsrmi	r3, r3, #1
 800a05e:	089b      	lsrpl	r3, r3, #2
 800a060:	2001      	movmi	r0, #1
 800a062:	6013      	strmi	r3, [r2, #0]
 800a064:	bf5c      	itt	pl
 800a066:	6013      	strpl	r3, [r2, #0]
 800a068:	2002      	movpl	r0, #2
 800a06a:	4770      	bx	lr
 800a06c:	b299      	uxth	r1, r3
 800a06e:	b909      	cbnz	r1, 800a074 <__lo0bits+0x2a>
 800a070:	0c1b      	lsrs	r3, r3, #16
 800a072:	2010      	movs	r0, #16
 800a074:	b2d9      	uxtb	r1, r3
 800a076:	b909      	cbnz	r1, 800a07c <__lo0bits+0x32>
 800a078:	3008      	adds	r0, #8
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	0719      	lsls	r1, r3, #28
 800a07e:	bf04      	itt	eq
 800a080:	091b      	lsreq	r3, r3, #4
 800a082:	3004      	addeq	r0, #4
 800a084:	0799      	lsls	r1, r3, #30
 800a086:	bf04      	itt	eq
 800a088:	089b      	lsreq	r3, r3, #2
 800a08a:	3002      	addeq	r0, #2
 800a08c:	07d9      	lsls	r1, r3, #31
 800a08e:	d403      	bmi.n	800a098 <__lo0bits+0x4e>
 800a090:	085b      	lsrs	r3, r3, #1
 800a092:	f100 0001 	add.w	r0, r0, #1
 800a096:	d003      	beq.n	800a0a0 <__lo0bits+0x56>
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	4770      	bx	lr
 800a09c:	2000      	movs	r0, #0
 800a09e:	4770      	bx	lr
 800a0a0:	2020      	movs	r0, #32
 800a0a2:	4770      	bx	lr

0800a0a4 <__i2b>:
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	2101      	movs	r1, #1
 800a0aa:	f7ff febd 	bl	8009e28 <_Balloc>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	b928      	cbnz	r0, 800a0be <__i2b+0x1a>
 800a0b2:	4b05      	ldr	r3, [pc, #20]	@ (800a0c8 <__i2b+0x24>)
 800a0b4:	4805      	ldr	r0, [pc, #20]	@ (800a0cc <__i2b+0x28>)
 800a0b6:	f240 1145 	movw	r1, #325	@ 0x145
 800a0ba:	f000 fc55 	bl	800a968 <__assert_func>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	6144      	str	r4, [r0, #20]
 800a0c2:	6103      	str	r3, [r0, #16]
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	bf00      	nop
 800a0c8:	0800b2c5 	.word	0x0800b2c5
 800a0cc:	0800b347 	.word	0x0800b347

0800a0d0 <__multiply>:
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	690a      	ldr	r2, [r1, #16]
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	bfa8      	it	ge
 800a0de:	4623      	movge	r3, r4
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	bfa4      	itt	ge
 800a0e4:	460c      	movge	r4, r1
 800a0e6:	461f      	movge	r7, r3
 800a0e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0f0:	68a3      	ldr	r3, [r4, #8]
 800a0f2:	6861      	ldr	r1, [r4, #4]
 800a0f4:	eb0a 0609 	add.w	r6, sl, r9
 800a0f8:	42b3      	cmp	r3, r6
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	bfb8      	it	lt
 800a0fe:	3101      	addlt	r1, #1
 800a100:	f7ff fe92 	bl	8009e28 <_Balloc>
 800a104:	b930      	cbnz	r0, 800a114 <__multiply+0x44>
 800a106:	4602      	mov	r2, r0
 800a108:	4b44      	ldr	r3, [pc, #272]	@ (800a21c <__multiply+0x14c>)
 800a10a:	4845      	ldr	r0, [pc, #276]	@ (800a220 <__multiply+0x150>)
 800a10c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a110:	f000 fc2a 	bl	800a968 <__assert_func>
 800a114:	f100 0514 	add.w	r5, r0, #20
 800a118:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a11c:	462b      	mov	r3, r5
 800a11e:	2200      	movs	r2, #0
 800a120:	4543      	cmp	r3, r8
 800a122:	d321      	bcc.n	800a168 <__multiply+0x98>
 800a124:	f107 0114 	add.w	r1, r7, #20
 800a128:	f104 0214 	add.w	r2, r4, #20
 800a12c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a130:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a134:	9302      	str	r3, [sp, #8]
 800a136:	1b13      	subs	r3, r2, r4
 800a138:	3b15      	subs	r3, #21
 800a13a:	f023 0303 	bic.w	r3, r3, #3
 800a13e:	3304      	adds	r3, #4
 800a140:	f104 0715 	add.w	r7, r4, #21
 800a144:	42ba      	cmp	r2, r7
 800a146:	bf38      	it	cc
 800a148:	2304      	movcc	r3, #4
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	9103      	str	r1, [sp, #12]
 800a150:	428b      	cmp	r3, r1
 800a152:	d80c      	bhi.n	800a16e <__multiply+0x9e>
 800a154:	2e00      	cmp	r6, #0
 800a156:	dd03      	ble.n	800a160 <__multiply+0x90>
 800a158:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d05b      	beq.n	800a218 <__multiply+0x148>
 800a160:	6106      	str	r6, [r0, #16]
 800a162:	b005      	add	sp, #20
 800a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a168:	f843 2b04 	str.w	r2, [r3], #4
 800a16c:	e7d8      	b.n	800a120 <__multiply+0x50>
 800a16e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a172:	f1ba 0f00 	cmp.w	sl, #0
 800a176:	d024      	beq.n	800a1c2 <__multiply+0xf2>
 800a178:	f104 0e14 	add.w	lr, r4, #20
 800a17c:	46a9      	mov	r9, r5
 800a17e:	f04f 0c00 	mov.w	ip, #0
 800a182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a186:	f8d9 3000 	ldr.w	r3, [r9]
 800a18a:	fa1f fb87 	uxth.w	fp, r7
 800a18e:	b29b      	uxth	r3, r3
 800a190:	fb0a 330b 	mla	r3, sl, fp, r3
 800a194:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a198:	f8d9 7000 	ldr.w	r7, [r9]
 800a19c:	4463      	add	r3, ip
 800a19e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1a2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1b0:	4572      	cmp	r2, lr
 800a1b2:	f849 3b04 	str.w	r3, [r9], #4
 800a1b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1ba:	d8e2      	bhi.n	800a182 <__multiply+0xb2>
 800a1bc:	9b01      	ldr	r3, [sp, #4]
 800a1be:	f845 c003 	str.w	ip, [r5, r3]
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1c8:	3104      	adds	r1, #4
 800a1ca:	f1b9 0f00 	cmp.w	r9, #0
 800a1ce:	d021      	beq.n	800a214 <__multiply+0x144>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	f104 0c14 	add.w	ip, r4, #20
 800a1d6:	46ae      	mov	lr, r5
 800a1d8:	f04f 0a00 	mov.w	sl, #0
 800a1dc:	f8bc b000 	ldrh.w	fp, [ip]
 800a1e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a1e4:	fb09 770b 	mla	r7, r9, fp, r7
 800a1e8:	4457      	add	r7, sl
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1f0:	f84e 3b04 	str.w	r3, [lr], #4
 800a1f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1fc:	f8be 3000 	ldrh.w	r3, [lr]
 800a200:	fb09 330a 	mla	r3, r9, sl, r3
 800a204:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a208:	4562      	cmp	r2, ip
 800a20a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a20e:	d8e5      	bhi.n	800a1dc <__multiply+0x10c>
 800a210:	9f01      	ldr	r7, [sp, #4]
 800a212:	51eb      	str	r3, [r5, r7]
 800a214:	3504      	adds	r5, #4
 800a216:	e799      	b.n	800a14c <__multiply+0x7c>
 800a218:	3e01      	subs	r6, #1
 800a21a:	e79b      	b.n	800a154 <__multiply+0x84>
 800a21c:	0800b2c5 	.word	0x0800b2c5
 800a220:	0800b347 	.word	0x0800b347

0800a224 <__pow5mult>:
 800a224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a228:	4615      	mov	r5, r2
 800a22a:	f012 0203 	ands.w	r2, r2, #3
 800a22e:	4607      	mov	r7, r0
 800a230:	460e      	mov	r6, r1
 800a232:	d007      	beq.n	800a244 <__pow5mult+0x20>
 800a234:	4c25      	ldr	r4, [pc, #148]	@ (800a2cc <__pow5mult+0xa8>)
 800a236:	3a01      	subs	r2, #1
 800a238:	2300      	movs	r3, #0
 800a23a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a23e:	f7ff fe55 	bl	8009eec <__multadd>
 800a242:	4606      	mov	r6, r0
 800a244:	10ad      	asrs	r5, r5, #2
 800a246:	d03d      	beq.n	800a2c4 <__pow5mult+0xa0>
 800a248:	69fc      	ldr	r4, [r7, #28]
 800a24a:	b97c      	cbnz	r4, 800a26c <__pow5mult+0x48>
 800a24c:	2010      	movs	r0, #16
 800a24e:	f7ff fc77 	bl	8009b40 <malloc>
 800a252:	4602      	mov	r2, r0
 800a254:	61f8      	str	r0, [r7, #28]
 800a256:	b928      	cbnz	r0, 800a264 <__pow5mult+0x40>
 800a258:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d0 <__pow5mult+0xac>)
 800a25a:	481e      	ldr	r0, [pc, #120]	@ (800a2d4 <__pow5mult+0xb0>)
 800a25c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a260:	f000 fb82 	bl	800a968 <__assert_func>
 800a264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a268:	6004      	str	r4, [r0, #0]
 800a26a:	60c4      	str	r4, [r0, #12]
 800a26c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a274:	b94c      	cbnz	r4, 800a28a <__pow5mult+0x66>
 800a276:	f240 2171 	movw	r1, #625	@ 0x271
 800a27a:	4638      	mov	r0, r7
 800a27c:	f7ff ff12 	bl	800a0a4 <__i2b>
 800a280:	2300      	movs	r3, #0
 800a282:	f8c8 0008 	str.w	r0, [r8, #8]
 800a286:	4604      	mov	r4, r0
 800a288:	6003      	str	r3, [r0, #0]
 800a28a:	f04f 0900 	mov.w	r9, #0
 800a28e:	07eb      	lsls	r3, r5, #31
 800a290:	d50a      	bpl.n	800a2a8 <__pow5mult+0x84>
 800a292:	4631      	mov	r1, r6
 800a294:	4622      	mov	r2, r4
 800a296:	4638      	mov	r0, r7
 800a298:	f7ff ff1a 	bl	800a0d0 <__multiply>
 800a29c:	4631      	mov	r1, r6
 800a29e:	4680      	mov	r8, r0
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	f7ff fe01 	bl	8009ea8 <_Bfree>
 800a2a6:	4646      	mov	r6, r8
 800a2a8:	106d      	asrs	r5, r5, #1
 800a2aa:	d00b      	beq.n	800a2c4 <__pow5mult+0xa0>
 800a2ac:	6820      	ldr	r0, [r4, #0]
 800a2ae:	b938      	cbnz	r0, 800a2c0 <__pow5mult+0x9c>
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	f7ff ff0b 	bl	800a0d0 <__multiply>
 800a2ba:	6020      	str	r0, [r4, #0]
 800a2bc:	f8c0 9000 	str.w	r9, [r0]
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	e7e4      	b.n	800a28e <__pow5mult+0x6a>
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ca:	bf00      	nop
 800a2cc:	0800b3a0 	.word	0x0800b3a0
 800a2d0:	0800b256 	.word	0x0800b256
 800a2d4:	0800b347 	.word	0x0800b347

0800a2d8 <__lshift>:
 800a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	6849      	ldr	r1, [r1, #4]
 800a2e0:	6923      	ldr	r3, [r4, #16]
 800a2e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2e6:	68a3      	ldr	r3, [r4, #8]
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	4691      	mov	r9, r2
 800a2ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2f0:	f108 0601 	add.w	r6, r8, #1
 800a2f4:	42b3      	cmp	r3, r6
 800a2f6:	db0b      	blt.n	800a310 <__lshift+0x38>
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff fd95 	bl	8009e28 <_Balloc>
 800a2fe:	4605      	mov	r5, r0
 800a300:	b948      	cbnz	r0, 800a316 <__lshift+0x3e>
 800a302:	4602      	mov	r2, r0
 800a304:	4b28      	ldr	r3, [pc, #160]	@ (800a3a8 <__lshift+0xd0>)
 800a306:	4829      	ldr	r0, [pc, #164]	@ (800a3ac <__lshift+0xd4>)
 800a308:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a30c:	f000 fb2c 	bl	800a968 <__assert_func>
 800a310:	3101      	adds	r1, #1
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	e7ee      	b.n	800a2f4 <__lshift+0x1c>
 800a316:	2300      	movs	r3, #0
 800a318:	f100 0114 	add.w	r1, r0, #20
 800a31c:	f100 0210 	add.w	r2, r0, #16
 800a320:	4618      	mov	r0, r3
 800a322:	4553      	cmp	r3, sl
 800a324:	db33      	blt.n	800a38e <__lshift+0xb6>
 800a326:	6920      	ldr	r0, [r4, #16]
 800a328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a32c:	f104 0314 	add.w	r3, r4, #20
 800a330:	f019 091f 	ands.w	r9, r9, #31
 800a334:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a338:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a33c:	d02b      	beq.n	800a396 <__lshift+0xbe>
 800a33e:	f1c9 0e20 	rsb	lr, r9, #32
 800a342:	468a      	mov	sl, r1
 800a344:	2200      	movs	r2, #0
 800a346:	6818      	ldr	r0, [r3, #0]
 800a348:	fa00 f009 	lsl.w	r0, r0, r9
 800a34c:	4310      	orrs	r0, r2
 800a34e:	f84a 0b04 	str.w	r0, [sl], #4
 800a352:	f853 2b04 	ldr.w	r2, [r3], #4
 800a356:	459c      	cmp	ip, r3
 800a358:	fa22 f20e 	lsr.w	r2, r2, lr
 800a35c:	d8f3      	bhi.n	800a346 <__lshift+0x6e>
 800a35e:	ebac 0304 	sub.w	r3, ip, r4
 800a362:	3b15      	subs	r3, #21
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	3304      	adds	r3, #4
 800a36a:	f104 0015 	add.w	r0, r4, #21
 800a36e:	4584      	cmp	ip, r0
 800a370:	bf38      	it	cc
 800a372:	2304      	movcc	r3, #4
 800a374:	50ca      	str	r2, [r1, r3]
 800a376:	b10a      	cbz	r2, 800a37c <__lshift+0xa4>
 800a378:	f108 0602 	add.w	r6, r8, #2
 800a37c:	3e01      	subs	r6, #1
 800a37e:	4638      	mov	r0, r7
 800a380:	612e      	str	r6, [r5, #16]
 800a382:	4621      	mov	r1, r4
 800a384:	f7ff fd90 	bl	8009ea8 <_Bfree>
 800a388:	4628      	mov	r0, r5
 800a38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a392:	3301      	adds	r3, #1
 800a394:	e7c5      	b.n	800a322 <__lshift+0x4a>
 800a396:	3904      	subs	r1, #4
 800a398:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3a0:	459c      	cmp	ip, r3
 800a3a2:	d8f9      	bhi.n	800a398 <__lshift+0xc0>
 800a3a4:	e7ea      	b.n	800a37c <__lshift+0xa4>
 800a3a6:	bf00      	nop
 800a3a8:	0800b2c5 	.word	0x0800b2c5
 800a3ac:	0800b347 	.word	0x0800b347

0800a3b0 <__mcmp>:
 800a3b0:	690a      	ldr	r2, [r1, #16]
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	6900      	ldr	r0, [r0, #16]
 800a3b6:	1a80      	subs	r0, r0, r2
 800a3b8:	b530      	push	{r4, r5, lr}
 800a3ba:	d10e      	bne.n	800a3da <__mcmp+0x2a>
 800a3bc:	3314      	adds	r3, #20
 800a3be:	3114      	adds	r1, #20
 800a3c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3d0:	4295      	cmp	r5, r2
 800a3d2:	d003      	beq.n	800a3dc <__mcmp+0x2c>
 800a3d4:	d205      	bcs.n	800a3e2 <__mcmp+0x32>
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3da:	bd30      	pop	{r4, r5, pc}
 800a3dc:	42a3      	cmp	r3, r4
 800a3de:	d3f3      	bcc.n	800a3c8 <__mcmp+0x18>
 800a3e0:	e7fb      	b.n	800a3da <__mcmp+0x2a>
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	e7f9      	b.n	800a3da <__mcmp+0x2a>
	...

0800a3e8 <__mdiff>:
 800a3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	4689      	mov	r9, r1
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4648      	mov	r0, r9
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	f7ff ffdb 	bl	800a3b0 <__mcmp>
 800a3fa:	1e05      	subs	r5, r0, #0
 800a3fc:	d112      	bne.n	800a424 <__mdiff+0x3c>
 800a3fe:	4629      	mov	r1, r5
 800a400:	4630      	mov	r0, r6
 800a402:	f7ff fd11 	bl	8009e28 <_Balloc>
 800a406:	4602      	mov	r2, r0
 800a408:	b928      	cbnz	r0, 800a416 <__mdiff+0x2e>
 800a40a:	4b3f      	ldr	r3, [pc, #252]	@ (800a508 <__mdiff+0x120>)
 800a40c:	f240 2137 	movw	r1, #567	@ 0x237
 800a410:	483e      	ldr	r0, [pc, #248]	@ (800a50c <__mdiff+0x124>)
 800a412:	f000 faa9 	bl	800a968 <__assert_func>
 800a416:	2301      	movs	r3, #1
 800a418:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a41c:	4610      	mov	r0, r2
 800a41e:	b003      	add	sp, #12
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	bfbc      	itt	lt
 800a426:	464b      	movlt	r3, r9
 800a428:	46a1      	movlt	r9, r4
 800a42a:	4630      	mov	r0, r6
 800a42c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a430:	bfba      	itte	lt
 800a432:	461c      	movlt	r4, r3
 800a434:	2501      	movlt	r5, #1
 800a436:	2500      	movge	r5, #0
 800a438:	f7ff fcf6 	bl	8009e28 <_Balloc>
 800a43c:	4602      	mov	r2, r0
 800a43e:	b918      	cbnz	r0, 800a448 <__mdiff+0x60>
 800a440:	4b31      	ldr	r3, [pc, #196]	@ (800a508 <__mdiff+0x120>)
 800a442:	f240 2145 	movw	r1, #581	@ 0x245
 800a446:	e7e3      	b.n	800a410 <__mdiff+0x28>
 800a448:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a44c:	6926      	ldr	r6, [r4, #16]
 800a44e:	60c5      	str	r5, [r0, #12]
 800a450:	f109 0310 	add.w	r3, r9, #16
 800a454:	f109 0514 	add.w	r5, r9, #20
 800a458:	f104 0e14 	add.w	lr, r4, #20
 800a45c:	f100 0b14 	add.w	fp, r0, #20
 800a460:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a464:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	46d9      	mov	r9, fp
 800a46c:	f04f 0c00 	mov.w	ip, #0
 800a470:	9b01      	ldr	r3, [sp, #4]
 800a472:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a476:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a47a:	9301      	str	r3, [sp, #4]
 800a47c:	fa1f f38a 	uxth.w	r3, sl
 800a480:	4619      	mov	r1, r3
 800a482:	b283      	uxth	r3, r0
 800a484:	1acb      	subs	r3, r1, r3
 800a486:	0c00      	lsrs	r0, r0, #16
 800a488:	4463      	add	r3, ip
 800a48a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a48e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a492:	b29b      	uxth	r3, r3
 800a494:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a498:	4576      	cmp	r6, lr
 800a49a:	f849 3b04 	str.w	r3, [r9], #4
 800a49e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4a2:	d8e5      	bhi.n	800a470 <__mdiff+0x88>
 800a4a4:	1b33      	subs	r3, r6, r4
 800a4a6:	3b15      	subs	r3, #21
 800a4a8:	f023 0303 	bic.w	r3, r3, #3
 800a4ac:	3415      	adds	r4, #21
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	42a6      	cmp	r6, r4
 800a4b2:	bf38      	it	cc
 800a4b4:	2304      	movcc	r3, #4
 800a4b6:	441d      	add	r5, r3
 800a4b8:	445b      	add	r3, fp
 800a4ba:	461e      	mov	r6, r3
 800a4bc:	462c      	mov	r4, r5
 800a4be:	4544      	cmp	r4, r8
 800a4c0:	d30e      	bcc.n	800a4e0 <__mdiff+0xf8>
 800a4c2:	f108 0103 	add.w	r1, r8, #3
 800a4c6:	1b49      	subs	r1, r1, r5
 800a4c8:	f021 0103 	bic.w	r1, r1, #3
 800a4cc:	3d03      	subs	r5, #3
 800a4ce:	45a8      	cmp	r8, r5
 800a4d0:	bf38      	it	cc
 800a4d2:	2100      	movcc	r1, #0
 800a4d4:	440b      	add	r3, r1
 800a4d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4da:	b191      	cbz	r1, 800a502 <__mdiff+0x11a>
 800a4dc:	6117      	str	r7, [r2, #16]
 800a4de:	e79d      	b.n	800a41c <__mdiff+0x34>
 800a4e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a4e4:	46e6      	mov	lr, ip
 800a4e6:	0c08      	lsrs	r0, r1, #16
 800a4e8:	fa1c fc81 	uxtah	ip, ip, r1
 800a4ec:	4471      	add	r1, lr
 800a4ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4f2:	b289      	uxth	r1, r1
 800a4f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4f8:	f846 1b04 	str.w	r1, [r6], #4
 800a4fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a500:	e7dd      	b.n	800a4be <__mdiff+0xd6>
 800a502:	3f01      	subs	r7, #1
 800a504:	e7e7      	b.n	800a4d6 <__mdiff+0xee>
 800a506:	bf00      	nop
 800a508:	0800b2c5 	.word	0x0800b2c5
 800a50c:	0800b347 	.word	0x0800b347

0800a510 <__ulp>:
 800a510:	b082      	sub	sp, #8
 800a512:	ed8d 0b00 	vstr	d0, [sp]
 800a516:	9a01      	ldr	r2, [sp, #4]
 800a518:	4b0f      	ldr	r3, [pc, #60]	@ (800a558 <__ulp+0x48>)
 800a51a:	4013      	ands	r3, r2
 800a51c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a520:	2b00      	cmp	r3, #0
 800a522:	dc08      	bgt.n	800a536 <__ulp+0x26>
 800a524:	425b      	negs	r3, r3
 800a526:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a52a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a52e:	da04      	bge.n	800a53a <__ulp+0x2a>
 800a530:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a534:	4113      	asrs	r3, r2
 800a536:	2200      	movs	r2, #0
 800a538:	e008      	b.n	800a54c <__ulp+0x3c>
 800a53a:	f1a2 0314 	sub.w	r3, r2, #20
 800a53e:	2b1e      	cmp	r3, #30
 800a540:	bfda      	itte	le
 800a542:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a546:	40da      	lsrle	r2, r3
 800a548:	2201      	movgt	r2, #1
 800a54a:	2300      	movs	r3, #0
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	ec41 0b10 	vmov	d0, r0, r1
 800a554:	b002      	add	sp, #8
 800a556:	4770      	bx	lr
 800a558:	7ff00000 	.word	0x7ff00000

0800a55c <__b2d>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	6906      	ldr	r6, [r0, #16]
 800a562:	f100 0814 	add.w	r8, r0, #20
 800a566:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a56a:	1f37      	subs	r7, r6, #4
 800a56c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a570:	4610      	mov	r0, r2
 800a572:	f7ff fd4b 	bl	800a00c <__hi0bits>
 800a576:	f1c0 0320 	rsb	r3, r0, #32
 800a57a:	280a      	cmp	r0, #10
 800a57c:	600b      	str	r3, [r1, #0]
 800a57e:	491b      	ldr	r1, [pc, #108]	@ (800a5ec <__b2d+0x90>)
 800a580:	dc15      	bgt.n	800a5ae <__b2d+0x52>
 800a582:	f1c0 0c0b 	rsb	ip, r0, #11
 800a586:	fa22 f30c 	lsr.w	r3, r2, ip
 800a58a:	45b8      	cmp	r8, r7
 800a58c:	ea43 0501 	orr.w	r5, r3, r1
 800a590:	bf34      	ite	cc
 800a592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a596:	2300      	movcs	r3, #0
 800a598:	3015      	adds	r0, #21
 800a59a:	fa02 f000 	lsl.w	r0, r2, r0
 800a59e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5a2:	4303      	orrs	r3, r0
 800a5a4:	461c      	mov	r4, r3
 800a5a6:	ec45 4b10 	vmov	d0, r4, r5
 800a5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ae:	45b8      	cmp	r8, r7
 800a5b0:	bf3a      	itte	cc
 800a5b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5ba:	2300      	movcs	r3, #0
 800a5bc:	380b      	subs	r0, #11
 800a5be:	d012      	beq.n	800a5e6 <__b2d+0x8a>
 800a5c0:	f1c0 0120 	rsb	r1, r0, #32
 800a5c4:	fa23 f401 	lsr.w	r4, r3, r1
 800a5c8:	4082      	lsls	r2, r0
 800a5ca:	4322      	orrs	r2, r4
 800a5cc:	4547      	cmp	r7, r8
 800a5ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a5d2:	bf8c      	ite	hi
 800a5d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a5d8:	2200      	movls	r2, #0
 800a5da:	4083      	lsls	r3, r0
 800a5dc:	40ca      	lsrs	r2, r1
 800a5de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	e7de      	b.n	800a5a4 <__b2d+0x48>
 800a5e6:	ea42 0501 	orr.w	r5, r2, r1
 800a5ea:	e7db      	b.n	800a5a4 <__b2d+0x48>
 800a5ec:	3ff00000 	.word	0x3ff00000

0800a5f0 <__d2b>:
 800a5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	ec59 8b10 	vmov	r8, r9, d0
 800a5fc:	4616      	mov	r6, r2
 800a5fe:	f7ff fc13 	bl	8009e28 <_Balloc>
 800a602:	4604      	mov	r4, r0
 800a604:	b930      	cbnz	r0, 800a614 <__d2b+0x24>
 800a606:	4602      	mov	r2, r0
 800a608:	4b23      	ldr	r3, [pc, #140]	@ (800a698 <__d2b+0xa8>)
 800a60a:	4824      	ldr	r0, [pc, #144]	@ (800a69c <__d2b+0xac>)
 800a60c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a610:	f000 f9aa 	bl	800a968 <__assert_func>
 800a614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a61c:	b10d      	cbz	r5, 800a622 <__d2b+0x32>
 800a61e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	f1b8 0300 	subs.w	r3, r8, #0
 800a628:	d023      	beq.n	800a672 <__d2b+0x82>
 800a62a:	4668      	mov	r0, sp
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	f7ff fd0c 	bl	800a04a <__lo0bits>
 800a632:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a636:	b1d0      	cbz	r0, 800a66e <__d2b+0x7e>
 800a638:	f1c0 0320 	rsb	r3, r0, #32
 800a63c:	fa02 f303 	lsl.w	r3, r2, r3
 800a640:	430b      	orrs	r3, r1
 800a642:	40c2      	lsrs	r2, r0
 800a644:	6163      	str	r3, [r4, #20]
 800a646:	9201      	str	r2, [sp, #4]
 800a648:	9b01      	ldr	r3, [sp, #4]
 800a64a:	61a3      	str	r3, [r4, #24]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	bf0c      	ite	eq
 800a650:	2201      	moveq	r2, #1
 800a652:	2202      	movne	r2, #2
 800a654:	6122      	str	r2, [r4, #16]
 800a656:	b1a5      	cbz	r5, 800a682 <__d2b+0x92>
 800a658:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a65c:	4405      	add	r5, r0
 800a65e:	603d      	str	r5, [r7, #0]
 800a660:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a664:	6030      	str	r0, [r6, #0]
 800a666:	4620      	mov	r0, r4
 800a668:	b003      	add	sp, #12
 800a66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a66e:	6161      	str	r1, [r4, #20]
 800a670:	e7ea      	b.n	800a648 <__d2b+0x58>
 800a672:	a801      	add	r0, sp, #4
 800a674:	f7ff fce9 	bl	800a04a <__lo0bits>
 800a678:	9b01      	ldr	r3, [sp, #4]
 800a67a:	6163      	str	r3, [r4, #20]
 800a67c:	3020      	adds	r0, #32
 800a67e:	2201      	movs	r2, #1
 800a680:	e7e8      	b.n	800a654 <__d2b+0x64>
 800a682:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a686:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a68a:	6038      	str	r0, [r7, #0]
 800a68c:	6918      	ldr	r0, [r3, #16]
 800a68e:	f7ff fcbd 	bl	800a00c <__hi0bits>
 800a692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a696:	e7e5      	b.n	800a664 <__d2b+0x74>
 800a698:	0800b2c5 	.word	0x0800b2c5
 800a69c:	0800b347 	.word	0x0800b347

0800a6a0 <__ratio>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	b085      	sub	sp, #20
 800a6a6:	e9cd 1000 	strd	r1, r0, [sp]
 800a6aa:	a902      	add	r1, sp, #8
 800a6ac:	f7ff ff56 	bl	800a55c <__b2d>
 800a6b0:	9800      	ldr	r0, [sp, #0]
 800a6b2:	a903      	add	r1, sp, #12
 800a6b4:	ec55 4b10 	vmov	r4, r5, d0
 800a6b8:	f7ff ff50 	bl	800a55c <__b2d>
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	6919      	ldr	r1, [r3, #16]
 800a6c0:	9b00      	ldr	r3, [sp, #0]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	1ac9      	subs	r1, r1, r3
 800a6c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	ec5b ab10 	vmov	sl, fp, d0
 800a6d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	bfce      	itee	gt
 800a6d8:	462a      	movgt	r2, r5
 800a6da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6de:	465a      	movle	r2, fp
 800a6e0:	462f      	mov	r7, r5
 800a6e2:	46d9      	mov	r9, fp
 800a6e4:	bfcc      	ite	gt
 800a6e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	4652      	mov	r2, sl
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	f7f6 f8c1 	bl	800087c <__aeabi_ddiv>
 800a6fa:	ec41 0b10 	vmov	d0, r0, r1
 800a6fe:	b005      	add	sp, #20
 800a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a704 <__copybits>:
 800a704:	3901      	subs	r1, #1
 800a706:	b570      	push	{r4, r5, r6, lr}
 800a708:	1149      	asrs	r1, r1, #5
 800a70a:	6914      	ldr	r4, [r2, #16]
 800a70c:	3101      	adds	r1, #1
 800a70e:	f102 0314 	add.w	r3, r2, #20
 800a712:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a716:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a71a:	1f05      	subs	r5, r0, #4
 800a71c:	42a3      	cmp	r3, r4
 800a71e:	d30c      	bcc.n	800a73a <__copybits+0x36>
 800a720:	1aa3      	subs	r3, r4, r2
 800a722:	3b11      	subs	r3, #17
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	3211      	adds	r2, #17
 800a72a:	42a2      	cmp	r2, r4
 800a72c:	bf88      	it	hi
 800a72e:	2300      	movhi	r3, #0
 800a730:	4418      	add	r0, r3
 800a732:	2300      	movs	r3, #0
 800a734:	4288      	cmp	r0, r1
 800a736:	d305      	bcc.n	800a744 <__copybits+0x40>
 800a738:	bd70      	pop	{r4, r5, r6, pc}
 800a73a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a73e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a742:	e7eb      	b.n	800a71c <__copybits+0x18>
 800a744:	f840 3b04 	str.w	r3, [r0], #4
 800a748:	e7f4      	b.n	800a734 <__copybits+0x30>

0800a74a <__any_on>:
 800a74a:	f100 0214 	add.w	r2, r0, #20
 800a74e:	6900      	ldr	r0, [r0, #16]
 800a750:	114b      	asrs	r3, r1, #5
 800a752:	4298      	cmp	r0, r3
 800a754:	b510      	push	{r4, lr}
 800a756:	db11      	blt.n	800a77c <__any_on+0x32>
 800a758:	dd0a      	ble.n	800a770 <__any_on+0x26>
 800a75a:	f011 011f 	ands.w	r1, r1, #31
 800a75e:	d007      	beq.n	800a770 <__any_on+0x26>
 800a760:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a764:	fa24 f001 	lsr.w	r0, r4, r1
 800a768:	fa00 f101 	lsl.w	r1, r0, r1
 800a76c:	428c      	cmp	r4, r1
 800a76e:	d10b      	bne.n	800a788 <__any_on+0x3e>
 800a770:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a774:	4293      	cmp	r3, r2
 800a776:	d803      	bhi.n	800a780 <__any_on+0x36>
 800a778:	2000      	movs	r0, #0
 800a77a:	bd10      	pop	{r4, pc}
 800a77c:	4603      	mov	r3, r0
 800a77e:	e7f7      	b.n	800a770 <__any_on+0x26>
 800a780:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a784:	2900      	cmp	r1, #0
 800a786:	d0f5      	beq.n	800a774 <__any_on+0x2a>
 800a788:	2001      	movs	r0, #1
 800a78a:	e7f6      	b.n	800a77a <__any_on+0x30>

0800a78c <__sread>:
 800a78c:	b510      	push	{r4, lr}
 800a78e:	460c      	mov	r4, r1
 800a790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a794:	f000 f8b4 	bl	800a900 <_read_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	bfab      	itete	ge
 800a79c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a79e:	89a3      	ldrhlt	r3, [r4, #12]
 800a7a0:	181b      	addge	r3, r3, r0
 800a7a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7a6:	bfac      	ite	ge
 800a7a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a7aa:	81a3      	strhlt	r3, [r4, #12]
 800a7ac:	bd10      	pop	{r4, pc}

0800a7ae <__swrite>:
 800a7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b2:	461f      	mov	r7, r3
 800a7b4:	898b      	ldrh	r3, [r1, #12]
 800a7b6:	05db      	lsls	r3, r3, #23
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	4616      	mov	r6, r2
 800a7be:	d505      	bpl.n	800a7cc <__swrite+0x1e>
 800a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f000 f888 	bl	800a8dc <_lseek_r>
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	4632      	mov	r2, r6
 800a7da:	463b      	mov	r3, r7
 800a7dc:	4628      	mov	r0, r5
 800a7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e2:	f000 b8af 	b.w	800a944 <_write_r>

0800a7e6 <__sseek>:
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ee:	f000 f875 	bl	800a8dc <_lseek_r>
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	bf15      	itete	ne
 800a7f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a802:	81a3      	strheq	r3, [r4, #12]
 800a804:	bf18      	it	ne
 800a806:	81a3      	strhne	r3, [r4, #12]
 800a808:	bd10      	pop	{r4, pc}

0800a80a <__sclose>:
 800a80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80e:	f000 b855 	b.w	800a8bc <_close_r>

0800a812 <_realloc_r>:
 800a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a816:	4680      	mov	r8, r0
 800a818:	4615      	mov	r5, r2
 800a81a:	460c      	mov	r4, r1
 800a81c:	b921      	cbnz	r1, 800a828 <_realloc_r+0x16>
 800a81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a822:	4611      	mov	r1, r2
 800a824:	f7ff b9b6 	b.w	8009b94 <_malloc_r>
 800a828:	b92a      	cbnz	r2, 800a836 <_realloc_r+0x24>
 800a82a:	f000 f8cf 	bl	800a9cc <_free_r>
 800a82e:	2400      	movs	r4, #0
 800a830:	4620      	mov	r0, r4
 800a832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a836:	f000 f913 	bl	800aa60 <_malloc_usable_size_r>
 800a83a:	4285      	cmp	r5, r0
 800a83c:	4606      	mov	r6, r0
 800a83e:	d802      	bhi.n	800a846 <_realloc_r+0x34>
 800a840:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a844:	d8f4      	bhi.n	800a830 <_realloc_r+0x1e>
 800a846:	4629      	mov	r1, r5
 800a848:	4640      	mov	r0, r8
 800a84a:	f7ff f9a3 	bl	8009b94 <_malloc_r>
 800a84e:	4607      	mov	r7, r0
 800a850:	2800      	cmp	r0, #0
 800a852:	d0ec      	beq.n	800a82e <_realloc_r+0x1c>
 800a854:	42b5      	cmp	r5, r6
 800a856:	462a      	mov	r2, r5
 800a858:	4621      	mov	r1, r4
 800a85a:	bf28      	it	cs
 800a85c:	4632      	movcs	r2, r6
 800a85e:	f7fd fe72 	bl	8008546 <memcpy>
 800a862:	4621      	mov	r1, r4
 800a864:	4640      	mov	r0, r8
 800a866:	f000 f8b1 	bl	800a9cc <_free_r>
 800a86a:	463c      	mov	r4, r7
 800a86c:	e7e0      	b.n	800a830 <_realloc_r+0x1e>

0800a86e <__ascii_wctomb>:
 800a86e:	4603      	mov	r3, r0
 800a870:	4608      	mov	r0, r1
 800a872:	b141      	cbz	r1, 800a886 <__ascii_wctomb+0x18>
 800a874:	2aff      	cmp	r2, #255	@ 0xff
 800a876:	d904      	bls.n	800a882 <__ascii_wctomb+0x14>
 800a878:	228a      	movs	r2, #138	@ 0x8a
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a880:	4770      	bx	lr
 800a882:	700a      	strb	r2, [r1, #0]
 800a884:	2001      	movs	r0, #1
 800a886:	4770      	bx	lr

0800a888 <memmove>:
 800a888:	4288      	cmp	r0, r1
 800a88a:	b510      	push	{r4, lr}
 800a88c:	eb01 0402 	add.w	r4, r1, r2
 800a890:	d902      	bls.n	800a898 <memmove+0x10>
 800a892:	4284      	cmp	r4, r0
 800a894:	4623      	mov	r3, r4
 800a896:	d807      	bhi.n	800a8a8 <memmove+0x20>
 800a898:	1e43      	subs	r3, r0, #1
 800a89a:	42a1      	cmp	r1, r4
 800a89c:	d008      	beq.n	800a8b0 <memmove+0x28>
 800a89e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8a6:	e7f8      	b.n	800a89a <memmove+0x12>
 800a8a8:	4402      	add	r2, r0
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	428a      	cmp	r2, r1
 800a8ae:	d100      	bne.n	800a8b2 <memmove+0x2a>
 800a8b0:	bd10      	pop	{r4, pc}
 800a8b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ba:	e7f7      	b.n	800a8ac <memmove+0x24>

0800a8bc <_close_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4d06      	ldr	r5, [pc, #24]	@ (800a8d8 <_close_r+0x1c>)
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	602b      	str	r3, [r5, #0]
 800a8c8:	f7f6 fffb 	bl	80018c2 <_close>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_close_r+0x1a>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_close_r+0x1a>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	20000440 	.word	0x20000440

0800a8dc <_lseek_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4d07      	ldr	r5, [pc, #28]	@ (800a8fc <_lseek_r+0x20>)
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	602a      	str	r2, [r5, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f7f7 f810 	bl	8001910 <_lseek>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_lseek_r+0x1e>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_lseek_r+0x1e>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000440 	.word	0x20000440

0800a900 <_read_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	@ (800a920 <_read_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f6 ff9e 	bl	8001850 <_read>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_read_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_read_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20000440 	.word	0x20000440

0800a924 <_sbrk_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d06      	ldr	r5, [pc, #24]	@ (800a940 <_sbrk_r+0x1c>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	602b      	str	r3, [r5, #0]
 800a930:	f7f6 fffc 	bl	800192c <_sbrk>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_sbrk_r+0x1a>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_sbrk_r+0x1a>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	20000440 	.word	0x20000440

0800a944 <_write_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d07      	ldr	r5, [pc, #28]	@ (800a964 <_write_r+0x20>)
 800a948:	4604      	mov	r4, r0
 800a94a:	4608      	mov	r0, r1
 800a94c:	4611      	mov	r1, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	602a      	str	r2, [r5, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	f7f6 ff99 	bl	800188a <_write>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_write_r+0x1e>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_write_r+0x1e>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	20000440 	.word	0x20000440

0800a968 <__assert_func>:
 800a968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a96a:	4614      	mov	r4, r2
 800a96c:	461a      	mov	r2, r3
 800a96e:	4b09      	ldr	r3, [pc, #36]	@ (800a994 <__assert_func+0x2c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4605      	mov	r5, r0
 800a974:	68d8      	ldr	r0, [r3, #12]
 800a976:	b954      	cbnz	r4, 800a98e <__assert_func+0x26>
 800a978:	4b07      	ldr	r3, [pc, #28]	@ (800a998 <__assert_func+0x30>)
 800a97a:	461c      	mov	r4, r3
 800a97c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a980:	9100      	str	r1, [sp, #0]
 800a982:	462b      	mov	r3, r5
 800a984:	4905      	ldr	r1, [pc, #20]	@ (800a99c <__assert_func+0x34>)
 800a986:	f000 f873 	bl	800aa70 <fiprintf>
 800a98a:	f000 f883 	bl	800aa94 <abort>
 800a98e:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <__assert_func+0x38>)
 800a990:	e7f4      	b.n	800a97c <__assert_func+0x14>
 800a992:	bf00      	nop
 800a994:	20000184 	.word	0x20000184
 800a998:	0800b4db 	.word	0x0800b4db
 800a99c:	0800b4ad 	.word	0x0800b4ad
 800a9a0:	0800b4a0 	.word	0x0800b4a0

0800a9a4 <_calloc_r>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	fba1 5402 	umull	r5, r4, r1, r2
 800a9aa:	b93c      	cbnz	r4, 800a9bc <_calloc_r+0x18>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7ff f8f1 	bl	8009b94 <_malloc_r>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b928      	cbnz	r0, 800a9c2 <_calloc_r+0x1e>
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	220c      	movs	r2, #12
 800a9be:	6002      	str	r2, [r0, #0]
 800a9c0:	e7f9      	b.n	800a9b6 <_calloc_r+0x12>
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7fd fd85 	bl	80084d4 <memset>
 800a9ca:	e7f5      	b.n	800a9b8 <_calloc_r+0x14>

0800a9cc <_free_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	d041      	beq.n	800aa58 <_free_r+0x8c>
 800a9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d8:	1f0c      	subs	r4, r1, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bfb8      	it	lt
 800a9de:	18e4      	addlt	r4, r4, r3
 800a9e0:	f7ff fa16 	bl	8009e10 <__malloc_lock>
 800a9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800aa5c <_free_r+0x90>)
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	b933      	cbnz	r3, 800a9f8 <_free_r+0x2c>
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	6014      	str	r4, [r2, #0]
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f4:	f7ff ba12 	b.w	8009e1c <__malloc_unlock>
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	d908      	bls.n	800aa0e <_free_r+0x42>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	1821      	adds	r1, r4, r0
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf01      	itttt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	1809      	addeq	r1, r1, r0
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	e7ed      	b.n	800a9ea <_free_r+0x1e>
 800aa0e:	461a      	mov	r2, r3
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b10b      	cbz	r3, 800aa18 <_free_r+0x4c>
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d9fa      	bls.n	800aa0e <_free_r+0x42>
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	1850      	adds	r0, r2, r1
 800aa1c:	42a0      	cmp	r0, r4
 800aa1e:	d10b      	bne.n	800aa38 <_free_r+0x6c>
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	4401      	add	r1, r0
 800aa24:	1850      	adds	r0, r2, r1
 800aa26:	4283      	cmp	r3, r0
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	d1e0      	bne.n	800a9ee <_free_r+0x22>
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	6053      	str	r3, [r2, #4]
 800aa32:	4408      	add	r0, r1
 800aa34:	6010      	str	r0, [r2, #0]
 800aa36:	e7da      	b.n	800a9ee <_free_r+0x22>
 800aa38:	d902      	bls.n	800aa40 <_free_r+0x74>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	e7d6      	b.n	800a9ee <_free_r+0x22>
 800aa40:	6820      	ldr	r0, [r4, #0]
 800aa42:	1821      	adds	r1, r4, r0
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf04      	itt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	bf04      	itt	eq
 800aa50:	1809      	addeq	r1, r1, r0
 800aa52:	6021      	streq	r1, [r4, #0]
 800aa54:	6054      	str	r4, [r2, #4]
 800aa56:	e7ca      	b.n	800a9ee <_free_r+0x22>
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2000043c 	.word	0x2000043c

0800aa60 <_malloc_usable_size_r>:
 800aa60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa64:	1f18      	subs	r0, r3, #4
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfbc      	itt	lt
 800aa6a:	580b      	ldrlt	r3, [r1, r0]
 800aa6c:	18c0      	addlt	r0, r0, r3
 800aa6e:	4770      	bx	lr

0800aa70 <fiprintf>:
 800aa70:	b40e      	push	{r1, r2, r3}
 800aa72:	b503      	push	{r0, r1, lr}
 800aa74:	4601      	mov	r1, r0
 800aa76:	ab03      	add	r3, sp, #12
 800aa78:	4805      	ldr	r0, [pc, #20]	@ (800aa90 <fiprintf+0x20>)
 800aa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7e:	6800      	ldr	r0, [r0, #0]
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	f000 f837 	bl	800aaf4 <_vfiprintf_r>
 800aa86:	b002      	add	sp, #8
 800aa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa8c:	b003      	add	sp, #12
 800aa8e:	4770      	bx	lr
 800aa90:	20000184 	.word	0x20000184

0800aa94 <abort>:
 800aa94:	b508      	push	{r3, lr}
 800aa96:	2006      	movs	r0, #6
 800aa98:	f000 fa84 	bl	800afa4 <raise>
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	f7f6 fecc 	bl	800183a <_exit>

0800aaa2 <__sfputc_r>:
 800aaa2:	6893      	ldr	r3, [r2, #8]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	b410      	push	{r4}
 800aaaa:	6093      	str	r3, [r2, #8]
 800aaac:	da08      	bge.n	800aac0 <__sfputc_r+0x1e>
 800aaae:	6994      	ldr	r4, [r2, #24]
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	db01      	blt.n	800aab8 <__sfputc_r+0x16>
 800aab4:	290a      	cmp	r1, #10
 800aab6:	d103      	bne.n	800aac0 <__sfputc_r+0x1e>
 800aab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aabc:	f000 b932 	b.w	800ad24 <__swbuf_r>
 800aac0:	6813      	ldr	r3, [r2, #0]
 800aac2:	1c58      	adds	r0, r3, #1
 800aac4:	6010      	str	r0, [r2, #0]
 800aac6:	7019      	strb	r1, [r3, #0]
 800aac8:	4608      	mov	r0, r1
 800aaca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <__sfputs_r>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	4606      	mov	r6, r0
 800aad4:	460f      	mov	r7, r1
 800aad6:	4614      	mov	r4, r2
 800aad8:	18d5      	adds	r5, r2, r3
 800aada:	42ac      	cmp	r4, r5
 800aadc:	d101      	bne.n	800aae2 <__sfputs_r+0x12>
 800aade:	2000      	movs	r0, #0
 800aae0:	e007      	b.n	800aaf2 <__sfputs_r+0x22>
 800aae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae6:	463a      	mov	r2, r7
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff ffda 	bl	800aaa2 <__sfputc_r>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	d1f3      	bne.n	800aada <__sfputs_r+0xa>
 800aaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aaf4 <_vfiprintf_r>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	460d      	mov	r5, r1
 800aafa:	b09d      	sub	sp, #116	@ 0x74
 800aafc:	4614      	mov	r4, r2
 800aafe:	4698      	mov	r8, r3
 800ab00:	4606      	mov	r6, r0
 800ab02:	b118      	cbz	r0, 800ab0c <_vfiprintf_r+0x18>
 800ab04:	6a03      	ldr	r3, [r0, #32]
 800ab06:	b90b      	cbnz	r3, 800ab0c <_vfiprintf_r+0x18>
 800ab08:	f7fc fe16 	bl	8007738 <__sinit>
 800ab0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab0e:	07d9      	lsls	r1, r3, #31
 800ab10:	d405      	bmi.n	800ab1e <_vfiprintf_r+0x2a>
 800ab12:	89ab      	ldrh	r3, [r5, #12]
 800ab14:	059a      	lsls	r2, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_vfiprintf_r+0x2a>
 800ab18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab1a:	f7fd fd12 	bl	8008542 <__retarget_lock_acquire_recursive>
 800ab1e:	89ab      	ldrh	r3, [r5, #12]
 800ab20:	071b      	lsls	r3, r3, #28
 800ab22:	d501      	bpl.n	800ab28 <_vfiprintf_r+0x34>
 800ab24:	692b      	ldr	r3, [r5, #16]
 800ab26:	b99b      	cbnz	r3, 800ab50 <_vfiprintf_r+0x5c>
 800ab28:	4629      	mov	r1, r5
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f000 f938 	bl	800ada0 <__swsetup_r>
 800ab30:	b170      	cbz	r0, 800ab50 <_vfiprintf_r+0x5c>
 800ab32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab34:	07dc      	lsls	r4, r3, #31
 800ab36:	d504      	bpl.n	800ab42 <_vfiprintf_r+0x4e>
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab3c:	b01d      	add	sp, #116	@ 0x74
 800ab3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	0598      	lsls	r0, r3, #22
 800ab46:	d4f7      	bmi.n	800ab38 <_vfiprintf_r+0x44>
 800ab48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab4a:	f7fd fcfb 	bl	8008544 <__retarget_lock_release_recursive>
 800ab4e:	e7f3      	b.n	800ab38 <_vfiprintf_r+0x44>
 800ab50:	2300      	movs	r3, #0
 800ab52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab54:	2320      	movs	r3, #32
 800ab56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab5e:	2330      	movs	r3, #48	@ 0x30
 800ab60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad10 <_vfiprintf_r+0x21c>
 800ab64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab68:	f04f 0901 	mov.w	r9, #1
 800ab6c:	4623      	mov	r3, r4
 800ab6e:	469a      	mov	sl, r3
 800ab70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab74:	b10a      	cbz	r2, 800ab7a <_vfiprintf_r+0x86>
 800ab76:	2a25      	cmp	r2, #37	@ 0x25
 800ab78:	d1f9      	bne.n	800ab6e <_vfiprintf_r+0x7a>
 800ab7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab7e:	d00b      	beq.n	800ab98 <_vfiprintf_r+0xa4>
 800ab80:	465b      	mov	r3, fp
 800ab82:	4622      	mov	r2, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff ffa2 	bl	800aad0 <__sfputs_r>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	f000 80a7 	beq.w	800ace0 <_vfiprintf_r+0x1ec>
 800ab92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab94:	445a      	add	r2, fp
 800ab96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab98:	f89a 3000 	ldrb.w	r3, [sl]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 809f 	beq.w	800ace0 <_vfiprintf_r+0x1ec>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abac:	f10a 0a01 	add.w	sl, sl, #1
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800abba:	4654      	mov	r4, sl
 800abbc:	2205      	movs	r2, #5
 800abbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc2:	4853      	ldr	r0, [pc, #332]	@ (800ad10 <_vfiprintf_r+0x21c>)
 800abc4:	f7f5 fb1c 	bl	8000200 <memchr>
 800abc8:	9a04      	ldr	r2, [sp, #16]
 800abca:	b9d8      	cbnz	r0, 800ac04 <_vfiprintf_r+0x110>
 800abcc:	06d1      	lsls	r1, r2, #27
 800abce:	bf44      	itt	mi
 800abd0:	2320      	movmi	r3, #32
 800abd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd6:	0713      	lsls	r3, r2, #28
 800abd8:	bf44      	itt	mi
 800abda:	232b      	movmi	r3, #43	@ 0x2b
 800abdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe0:	f89a 3000 	ldrb.w	r3, [sl]
 800abe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800abe6:	d015      	beq.n	800ac14 <_vfiprintf_r+0x120>
 800abe8:	9a07      	ldr	r2, [sp, #28]
 800abea:	4654      	mov	r4, sl
 800abec:	2000      	movs	r0, #0
 800abee:	f04f 0c0a 	mov.w	ip, #10
 800abf2:	4621      	mov	r1, r4
 800abf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abf8:	3b30      	subs	r3, #48	@ 0x30
 800abfa:	2b09      	cmp	r3, #9
 800abfc:	d94b      	bls.n	800ac96 <_vfiprintf_r+0x1a2>
 800abfe:	b1b0      	cbz	r0, 800ac2e <_vfiprintf_r+0x13a>
 800ac00:	9207      	str	r2, [sp, #28]
 800ac02:	e014      	b.n	800ac2e <_vfiprintf_r+0x13a>
 800ac04:	eba0 0308 	sub.w	r3, r0, r8
 800ac08:	fa09 f303 	lsl.w	r3, r9, r3
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	46a2      	mov	sl, r4
 800ac12:	e7d2      	b.n	800abba <_vfiprintf_r+0xc6>
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	1d19      	adds	r1, r3, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	9103      	str	r1, [sp, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	bfbb      	ittet	lt
 800ac20:	425b      	neglt	r3, r3
 800ac22:	f042 0202 	orrlt.w	r2, r2, #2
 800ac26:	9307      	strge	r3, [sp, #28]
 800ac28:	9307      	strlt	r3, [sp, #28]
 800ac2a:	bfb8      	it	lt
 800ac2c:	9204      	strlt	r2, [sp, #16]
 800ac2e:	7823      	ldrb	r3, [r4, #0]
 800ac30:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac32:	d10a      	bne.n	800ac4a <_vfiprintf_r+0x156>
 800ac34:	7863      	ldrb	r3, [r4, #1]
 800ac36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac38:	d132      	bne.n	800aca0 <_vfiprintf_r+0x1ac>
 800ac3a:	9b03      	ldr	r3, [sp, #12]
 800ac3c:	1d1a      	adds	r2, r3, #4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	9203      	str	r2, [sp, #12]
 800ac42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac46:	3402      	adds	r4, #2
 800ac48:	9305      	str	r3, [sp, #20]
 800ac4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad20 <_vfiprintf_r+0x22c>
 800ac4e:	7821      	ldrb	r1, [r4, #0]
 800ac50:	2203      	movs	r2, #3
 800ac52:	4650      	mov	r0, sl
 800ac54:	f7f5 fad4 	bl	8000200 <memchr>
 800ac58:	b138      	cbz	r0, 800ac6a <_vfiprintf_r+0x176>
 800ac5a:	9b04      	ldr	r3, [sp, #16]
 800ac5c:	eba0 000a 	sub.w	r0, r0, sl
 800ac60:	2240      	movs	r2, #64	@ 0x40
 800ac62:	4082      	lsls	r2, r0
 800ac64:	4313      	orrs	r3, r2
 800ac66:	3401      	adds	r4, #1
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6e:	4829      	ldr	r0, [pc, #164]	@ (800ad14 <_vfiprintf_r+0x220>)
 800ac70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac74:	2206      	movs	r2, #6
 800ac76:	f7f5 fac3 	bl	8000200 <memchr>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d03f      	beq.n	800acfe <_vfiprintf_r+0x20a>
 800ac7e:	4b26      	ldr	r3, [pc, #152]	@ (800ad18 <_vfiprintf_r+0x224>)
 800ac80:	bb1b      	cbnz	r3, 800acca <_vfiprintf_r+0x1d6>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	3307      	adds	r3, #7
 800ac86:	f023 0307 	bic.w	r3, r3, #7
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	9303      	str	r3, [sp, #12]
 800ac8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac90:	443b      	add	r3, r7
 800ac92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac94:	e76a      	b.n	800ab6c <_vfiprintf_r+0x78>
 800ac96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	2001      	movs	r0, #1
 800ac9e:	e7a8      	b.n	800abf2 <_vfiprintf_r+0xfe>
 800aca0:	2300      	movs	r3, #0
 800aca2:	3401      	adds	r4, #1
 800aca4:	9305      	str	r3, [sp, #20]
 800aca6:	4619      	mov	r1, r3
 800aca8:	f04f 0c0a 	mov.w	ip, #10
 800acac:	4620      	mov	r0, r4
 800acae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb2:	3a30      	subs	r2, #48	@ 0x30
 800acb4:	2a09      	cmp	r2, #9
 800acb6:	d903      	bls.n	800acc0 <_vfiprintf_r+0x1cc>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0c6      	beq.n	800ac4a <_vfiprintf_r+0x156>
 800acbc:	9105      	str	r1, [sp, #20]
 800acbe:	e7c4      	b.n	800ac4a <_vfiprintf_r+0x156>
 800acc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800acc4:	4604      	mov	r4, r0
 800acc6:	2301      	movs	r3, #1
 800acc8:	e7f0      	b.n	800acac <_vfiprintf_r+0x1b8>
 800acca:	ab03      	add	r3, sp, #12
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	462a      	mov	r2, r5
 800acd0:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <_vfiprintf_r+0x228>)
 800acd2:	a904      	add	r1, sp, #16
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7fb feb7 	bl	8006a48 <_printf_float>
 800acda:	4607      	mov	r7, r0
 800acdc:	1c78      	adds	r0, r7, #1
 800acde:	d1d6      	bne.n	800ac8e <_vfiprintf_r+0x19a>
 800ace0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ace2:	07d9      	lsls	r1, r3, #31
 800ace4:	d405      	bmi.n	800acf2 <_vfiprintf_r+0x1fe>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	059a      	lsls	r2, r3, #22
 800acea:	d402      	bmi.n	800acf2 <_vfiprintf_r+0x1fe>
 800acec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acee:	f7fd fc29 	bl	8008544 <__retarget_lock_release_recursive>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	065b      	lsls	r3, r3, #25
 800acf6:	f53f af1f 	bmi.w	800ab38 <_vfiprintf_r+0x44>
 800acfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acfc:	e71e      	b.n	800ab3c <_vfiprintf_r+0x48>
 800acfe:	ab03      	add	r3, sp, #12
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	462a      	mov	r2, r5
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <_vfiprintf_r+0x228>)
 800ad06:	a904      	add	r1, sp, #16
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f7fc f935 	bl	8006f78 <_printf_i>
 800ad0e:	e7e4      	b.n	800acda <_vfiprintf_r+0x1e6>
 800ad10:	0800b336 	.word	0x0800b336
 800ad14:	0800b340 	.word	0x0800b340
 800ad18:	08006a49 	.word	0x08006a49
 800ad1c:	0800aad1 	.word	0x0800aad1
 800ad20:	0800b33c 	.word	0x0800b33c

0800ad24 <__swbuf_r>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	460e      	mov	r6, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	b118      	cbz	r0, 800ad36 <__swbuf_r+0x12>
 800ad2e:	6a03      	ldr	r3, [r0, #32]
 800ad30:	b90b      	cbnz	r3, 800ad36 <__swbuf_r+0x12>
 800ad32:	f7fc fd01 	bl	8007738 <__sinit>
 800ad36:	69a3      	ldr	r3, [r4, #24]
 800ad38:	60a3      	str	r3, [r4, #8]
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	071a      	lsls	r2, r3, #28
 800ad3e:	d501      	bpl.n	800ad44 <__swbuf_r+0x20>
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	b943      	cbnz	r3, 800ad56 <__swbuf_r+0x32>
 800ad44:	4621      	mov	r1, r4
 800ad46:	4628      	mov	r0, r5
 800ad48:	f000 f82a 	bl	800ada0 <__swsetup_r>
 800ad4c:	b118      	cbz	r0, 800ad56 <__swbuf_r+0x32>
 800ad4e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ad52:	4638      	mov	r0, r7
 800ad54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	6922      	ldr	r2, [r4, #16]
 800ad5a:	1a98      	subs	r0, r3, r2
 800ad5c:	6963      	ldr	r3, [r4, #20]
 800ad5e:	b2f6      	uxtb	r6, r6
 800ad60:	4283      	cmp	r3, r0
 800ad62:	4637      	mov	r7, r6
 800ad64:	dc05      	bgt.n	800ad72 <__swbuf_r+0x4e>
 800ad66:	4621      	mov	r1, r4
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff f829 	bl	8009dc0 <_fflush_r>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d1ed      	bne.n	800ad4e <__swbuf_r+0x2a>
 800ad72:	68a3      	ldr	r3, [r4, #8]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	60a3      	str	r3, [r4, #8]
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	6022      	str	r2, [r4, #0]
 800ad7e:	701e      	strb	r6, [r3, #0]
 800ad80:	6962      	ldr	r2, [r4, #20]
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d004      	beq.n	800ad92 <__swbuf_r+0x6e>
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	07db      	lsls	r3, r3, #31
 800ad8c:	d5e1      	bpl.n	800ad52 <__swbuf_r+0x2e>
 800ad8e:	2e0a      	cmp	r6, #10
 800ad90:	d1df      	bne.n	800ad52 <__swbuf_r+0x2e>
 800ad92:	4621      	mov	r1, r4
 800ad94:	4628      	mov	r0, r5
 800ad96:	f7ff f813 	bl	8009dc0 <_fflush_r>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d0d9      	beq.n	800ad52 <__swbuf_r+0x2e>
 800ad9e:	e7d6      	b.n	800ad4e <__swbuf_r+0x2a>

0800ada0 <__swsetup_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4b29      	ldr	r3, [pc, #164]	@ (800ae48 <__swsetup_r+0xa8>)
 800ada4:	4605      	mov	r5, r0
 800ada6:	6818      	ldr	r0, [r3, #0]
 800ada8:	460c      	mov	r4, r1
 800adaa:	b118      	cbz	r0, 800adb4 <__swsetup_r+0x14>
 800adac:	6a03      	ldr	r3, [r0, #32]
 800adae:	b90b      	cbnz	r3, 800adb4 <__swsetup_r+0x14>
 800adb0:	f7fc fcc2 	bl	8007738 <__sinit>
 800adb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb8:	0719      	lsls	r1, r3, #28
 800adba:	d422      	bmi.n	800ae02 <__swsetup_r+0x62>
 800adbc:	06da      	lsls	r2, r3, #27
 800adbe:	d407      	bmi.n	800add0 <__swsetup_r+0x30>
 800adc0:	2209      	movs	r2, #9
 800adc2:	602a      	str	r2, [r5, #0]
 800adc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adce:	e033      	b.n	800ae38 <__swsetup_r+0x98>
 800add0:	0758      	lsls	r0, r3, #29
 800add2:	d512      	bpl.n	800adfa <__swsetup_r+0x5a>
 800add4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800add6:	b141      	cbz	r1, 800adea <__swsetup_r+0x4a>
 800add8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800addc:	4299      	cmp	r1, r3
 800adde:	d002      	beq.n	800ade6 <__swsetup_r+0x46>
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7ff fdf3 	bl	800a9cc <_free_r>
 800ade6:	2300      	movs	r3, #0
 800ade8:	6363      	str	r3, [r4, #52]	@ 0x34
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	2300      	movs	r3, #0
 800adf4:	6063      	str	r3, [r4, #4]
 800adf6:	6923      	ldr	r3, [r4, #16]
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f043 0308 	orr.w	r3, r3, #8
 800ae00:	81a3      	strh	r3, [r4, #12]
 800ae02:	6923      	ldr	r3, [r4, #16]
 800ae04:	b94b      	cbnz	r3, 800ae1a <__swsetup_r+0x7a>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae10:	d003      	beq.n	800ae1a <__swsetup_r+0x7a>
 800ae12:	4621      	mov	r1, r4
 800ae14:	4628      	mov	r0, r5
 800ae16:	f000 f83f 	bl	800ae98 <__smakebuf_r>
 800ae1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1e:	f013 0201 	ands.w	r2, r3, #1
 800ae22:	d00a      	beq.n	800ae3a <__swsetup_r+0x9a>
 800ae24:	2200      	movs	r2, #0
 800ae26:	60a2      	str	r2, [r4, #8]
 800ae28:	6962      	ldr	r2, [r4, #20]
 800ae2a:	4252      	negs	r2, r2
 800ae2c:	61a2      	str	r2, [r4, #24]
 800ae2e:	6922      	ldr	r2, [r4, #16]
 800ae30:	b942      	cbnz	r2, 800ae44 <__swsetup_r+0xa4>
 800ae32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae36:	d1c5      	bne.n	800adc4 <__swsetup_r+0x24>
 800ae38:	bd38      	pop	{r3, r4, r5, pc}
 800ae3a:	0799      	lsls	r1, r3, #30
 800ae3c:	bf58      	it	pl
 800ae3e:	6962      	ldrpl	r2, [r4, #20]
 800ae40:	60a2      	str	r2, [r4, #8]
 800ae42:	e7f4      	b.n	800ae2e <__swsetup_r+0x8e>
 800ae44:	2000      	movs	r0, #0
 800ae46:	e7f7      	b.n	800ae38 <__swsetup_r+0x98>
 800ae48:	20000184 	.word	0x20000184

0800ae4c <__swhatbuf_r>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	460c      	mov	r4, r1
 800ae50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae54:	2900      	cmp	r1, #0
 800ae56:	b096      	sub	sp, #88	@ 0x58
 800ae58:	4615      	mov	r5, r2
 800ae5a:	461e      	mov	r6, r3
 800ae5c:	da0d      	bge.n	800ae7a <__swhatbuf_r+0x2e>
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae64:	f04f 0100 	mov.w	r1, #0
 800ae68:	bf14      	ite	ne
 800ae6a:	2340      	movne	r3, #64	@ 0x40
 800ae6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae70:	2000      	movs	r0, #0
 800ae72:	6031      	str	r1, [r6, #0]
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	b016      	add	sp, #88	@ 0x58
 800ae78:	bd70      	pop	{r4, r5, r6, pc}
 800ae7a:	466a      	mov	r2, sp
 800ae7c:	f000 f848 	bl	800af10 <_fstat_r>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	dbec      	blt.n	800ae5e <__swhatbuf_r+0x12>
 800ae84:	9901      	ldr	r1, [sp, #4]
 800ae86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae8e:	4259      	negs	r1, r3
 800ae90:	4159      	adcs	r1, r3
 800ae92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae96:	e7eb      	b.n	800ae70 <__swhatbuf_r+0x24>

0800ae98 <__smakebuf_r>:
 800ae98:	898b      	ldrh	r3, [r1, #12]
 800ae9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae9c:	079d      	lsls	r5, r3, #30
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	d507      	bpl.n	800aeb4 <__smakebuf_r+0x1c>
 800aea4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	2301      	movs	r3, #1
 800aeae:	6163      	str	r3, [r4, #20]
 800aeb0:	b003      	add	sp, #12
 800aeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb4:	ab01      	add	r3, sp, #4
 800aeb6:	466a      	mov	r2, sp
 800aeb8:	f7ff ffc8 	bl	800ae4c <__swhatbuf_r>
 800aebc:	9f00      	ldr	r7, [sp, #0]
 800aebe:	4605      	mov	r5, r0
 800aec0:	4639      	mov	r1, r7
 800aec2:	4630      	mov	r0, r6
 800aec4:	f7fe fe66 	bl	8009b94 <_malloc_r>
 800aec8:	b948      	cbnz	r0, 800aede <__smakebuf_r+0x46>
 800aeca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aece:	059a      	lsls	r2, r3, #22
 800aed0:	d4ee      	bmi.n	800aeb0 <__smakebuf_r+0x18>
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	f043 0302 	orr.w	r3, r3, #2
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	e7e2      	b.n	800aea4 <__smakebuf_r+0xc>
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	6020      	str	r0, [r4, #0]
 800aee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	9b01      	ldr	r3, [sp, #4]
 800aeea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aeee:	b15b      	cbz	r3, 800af08 <__smakebuf_r+0x70>
 800aef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef4:	4630      	mov	r0, r6
 800aef6:	f000 f81d 	bl	800af34 <_isatty_r>
 800aefa:	b128      	cbz	r0, 800af08 <__smakebuf_r+0x70>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	f043 0301 	orr.w	r3, r3, #1
 800af06:	81a3      	strh	r3, [r4, #12]
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	431d      	orrs	r5, r3
 800af0c:	81a5      	strh	r5, [r4, #12]
 800af0e:	e7cf      	b.n	800aeb0 <__smakebuf_r+0x18>

0800af10 <_fstat_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4d07      	ldr	r5, [pc, #28]	@ (800af30 <_fstat_r+0x20>)
 800af14:	2300      	movs	r3, #0
 800af16:	4604      	mov	r4, r0
 800af18:	4608      	mov	r0, r1
 800af1a:	4611      	mov	r1, r2
 800af1c:	602b      	str	r3, [r5, #0]
 800af1e:	f7f6 fcdc 	bl	80018da <_fstat>
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d102      	bne.n	800af2c <_fstat_r+0x1c>
 800af26:	682b      	ldr	r3, [r5, #0]
 800af28:	b103      	cbz	r3, 800af2c <_fstat_r+0x1c>
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	bd38      	pop	{r3, r4, r5, pc}
 800af2e:	bf00      	nop
 800af30:	20000440 	.word	0x20000440

0800af34 <_isatty_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d06      	ldr	r5, [pc, #24]	@ (800af50 <_isatty_r+0x1c>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f6 fcdb 	bl	80018fa <_isatty>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_isatty_r+0x1a>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_isatty_r+0x1a>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	20000440 	.word	0x20000440

0800af54 <_raise_r>:
 800af54:	291f      	cmp	r1, #31
 800af56:	b538      	push	{r3, r4, r5, lr}
 800af58:	4605      	mov	r5, r0
 800af5a:	460c      	mov	r4, r1
 800af5c:	d904      	bls.n	800af68 <_raise_r+0x14>
 800af5e:	2316      	movs	r3, #22
 800af60:	6003      	str	r3, [r0, #0]
 800af62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af6a:	b112      	cbz	r2, 800af72 <_raise_r+0x1e>
 800af6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af70:	b94b      	cbnz	r3, 800af86 <_raise_r+0x32>
 800af72:	4628      	mov	r0, r5
 800af74:	f000 f830 	bl	800afd8 <_getpid_r>
 800af78:	4622      	mov	r2, r4
 800af7a:	4601      	mov	r1, r0
 800af7c:	4628      	mov	r0, r5
 800af7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af82:	f000 b817 	b.w	800afb4 <_kill_r>
 800af86:	2b01      	cmp	r3, #1
 800af88:	d00a      	beq.n	800afa0 <_raise_r+0x4c>
 800af8a:	1c59      	adds	r1, r3, #1
 800af8c:	d103      	bne.n	800af96 <_raise_r+0x42>
 800af8e:	2316      	movs	r3, #22
 800af90:	6003      	str	r3, [r0, #0]
 800af92:	2001      	movs	r0, #1
 800af94:	e7e7      	b.n	800af66 <_raise_r+0x12>
 800af96:	2100      	movs	r1, #0
 800af98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af9c:	4620      	mov	r0, r4
 800af9e:	4798      	blx	r3
 800afa0:	2000      	movs	r0, #0
 800afa2:	e7e0      	b.n	800af66 <_raise_r+0x12>

0800afa4 <raise>:
 800afa4:	4b02      	ldr	r3, [pc, #8]	@ (800afb0 <raise+0xc>)
 800afa6:	4601      	mov	r1, r0
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	f7ff bfd3 	b.w	800af54 <_raise_r>
 800afae:	bf00      	nop
 800afb0:	20000184 	.word	0x20000184

0800afb4 <_kill_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d07      	ldr	r5, [pc, #28]	@ (800afd4 <_kill_r+0x20>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	4611      	mov	r1, r2
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	f7f6 fc2a 	bl	800181a <_kill>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d102      	bne.n	800afd0 <_kill_r+0x1c>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	b103      	cbz	r3, 800afd0 <_kill_r+0x1c>
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	bd38      	pop	{r3, r4, r5, pc}
 800afd2:	bf00      	nop
 800afd4:	20000440 	.word	0x20000440

0800afd8 <_getpid_r>:
 800afd8:	f7f6 bc17 	b.w	800180a <_getpid>

0800afdc <_init>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	bf00      	nop
 800afe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe2:	bc08      	pop	{r3}
 800afe4:	469e      	mov	lr, r3
 800afe6:	4770      	bx	lr

0800afe8 <_fini>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	bf00      	nop
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr
