
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004384  08004384  00005384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800438c  0800438c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004390  08004390  00005390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004394  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  080043f0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080043f0  00006260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce2a  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3c  00000000  00000000  00012eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00014af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b8  00000000  00000000  00015508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a65  00000000  00000000  00015cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7bf  00000000  00000000  0003f725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff60e  00000000  00000000  0004bee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b4f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d9c  00000000  00000000  0014b538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0014e2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004280 	.word	0x08004280

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08004280 	.word	0x08004280

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d013      	beq.n	80005d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	e000      	b.n	80005bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f9      	beq.n	80005ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09e      	sub	sp, #120	@ 0x78
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fb02 	bl	8000bee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f875 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f911 	bl	8000814 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f2:	f000 f8c3 	bl	800077c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  switch (state){
 80005f6:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <main+0xe8>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <main+0x26>
 8000600:	2b01      	cmp	r3, #1
 8000602:	d020      	beq.n	8000646 <main+0x66>
 8000604:	e03f      	b.n	8000686 <main+0xa6>
  		  case 0:
  			  voltage = 10;
 8000606:	230a      	movs	r3, #10
 8000608:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  			  uartLen = sprintf(data, "The voltage is: %dV\n", voltage);
 800060c:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	492e      	ldr	r1, [pc, #184]	@ (80006cc <main+0xec>)
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f993 	bl	8003940 <siprintf>
 800061a:	4603      	mov	r3, r0
 800061c:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
//  			  HAL_UART_Transmit(&huart1, data, uartLen, 1000);
  			  for (int i = 0; i < uartLen; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	677b      	str	r3, [r7, #116]	@ 0x74
 8000624:	e009      	b.n	800063a <main+0x5a>
  				ITM_SendChar(data[i]);
 8000626:	1d3a      	adds	r2, r7, #4
 8000628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ffae 	bl	8000590 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8000634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000636:	3301      	adds	r3, #1
 8000638:	677b      	str	r3, [r7, #116]	@ 0x74
 800063a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800063e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000640:	429a      	cmp	r2, r3
 8000642:	dbf0      	blt.n	8000626 <main+0x46>
  			  }
  			  break;
 8000644:	e03b      	b.n	80006be <main+0xde>

  		  case 1:
  			  temperature = 25;
 8000646:	2319      	movs	r3, #25
 8000648:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  			  uartLen = sprintf(data, "The temperature is: %d%cC\n", temperature, 176);
 800064c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000650:	1d38      	adds	r0, r7, #4
 8000652:	23b0      	movs	r3, #176	@ 0xb0
 8000654:	491e      	ldr	r1, [pc, #120]	@ (80006d0 <main+0xf0>)
 8000656:	f003 f973 	bl	8003940 <siprintf>
 800065a:	4603      	mov	r3, r0
 800065c:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
//  			  HAL_UART_Transmit(&huart1, data, uartLen, 1000);
  			  for (int i = 0; i < uartLen; i++){
 8000660:	2300      	movs	r3, #0
 8000662:	673b      	str	r3, [r7, #112]	@ 0x70
 8000664:	e009      	b.n	800067a <main+0x9a>
  				ITM_SendChar(data[i]);
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff8e 	bl	8000590 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 8000674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000676:	3301      	adds	r3, #1
 8000678:	673b      	str	r3, [r7, #112]	@ 0x70
 800067a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800067e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000680:	429a      	cmp	r2, r3
 8000682:	dbf0      	blt.n	8000666 <main+0x86>
  			  }
  			  break;
 8000684:	e01b      	b.n	80006be <main+0xde>
  		  default:
  			  uartLen = sprintf("The state is: %d\n", state);
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <main+0xe8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <main+0xf4>)
 8000690:	f003 f956 	bl	8003940 <siprintf>
 8000694:	4603      	mov	r3, r0
 8000696:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
  			  for (int i = 0; i < uartLen; i++){
 800069a:	2300      	movs	r3, #0
 800069c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800069e:	e009      	b.n	80006b4 <main+0xd4>
  				ITM_SendChar(data[i]);
 80006a0:	1d3a      	adds	r2, r7, #4
 80006a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff71 	bl	8000590 <ITM_SendChar>
  			  for (int i = 0; i < uartLen; i++){
 80006ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006b0:	3301      	adds	r3, #1
 80006b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006b4:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80006b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006ba:	429a      	cmp	r2, r3
 80006bc:	dbf0      	blt.n	80006a0 <main+0xc0>
  			  }

  	  }
  	  HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c2:	f000 fb09 	bl	8000cd8 <HAL_Delay>
  	  switch (state){
 80006c6:	e796      	b.n	80005f6 <main+0x16>
 80006c8:	2000010c 	.word	0x2000010c
 80006cc:	08004298 	.word	0x08004298
 80006d0:	080042b0 	.word	0x080042b0
 80006d4:	080042cc 	.word	0x080042cc

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2244      	movs	r2, #68	@ 0x44
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f94a 	bl	8003980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fe1e 	bl	800133c <HAL_PWREx_ControlVoltageScaling>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000706:	f000 f941 	bl	800098c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800070a:	2310      	movs	r3, #16
 800070c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000716:	2360      	movs	r3, #96	@ 0x60
 8000718:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800071e:	2301      	movs	r3, #1
 8000720:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000726:	233c      	movs	r3, #60	@ 0x3c
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fea2 	bl	8001484 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000746:	f000 f921 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	2105      	movs	r1, #5
 8000762:	4618      	mov	r0, r3
 8000764:	f001 faa8 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076e:	f000 f90d 	bl	800098c <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3758      	adds	r7, #88	@ 0x58
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000782:	4a23      	ldr	r2, [pc, #140]	@ (8000810 <MX_USART1_UART_Init+0x94>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_USART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c4:	4811      	ldr	r0, [pc, #68]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007c6:	f002 fa4d 	bl	8002c64 <HAL_UART_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f8dc 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007d8:	f002 ffe8 	bl	80037ac <HAL_UARTEx_SetTxFifoThreshold>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f000 f8d3 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007ea:	f003 f81d 	bl	8003828 <HAL_UARTEx_SetRxFifoThreshold>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f8ca 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007fa:	f002 ff9e 	bl	800373a <HAL_UARTEx_DisableFifoMode>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 f8c2 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000078 	.word	0x20000078
 8000810:	40013800 	.word	0x40013800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b44      	ldr	r3, [pc, #272]	@ (800093c <MX_GPIO_Init+0x128>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a43      	ldr	r2, [pc, #268]	@ (800093c <MX_GPIO_Init+0x128>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b41      	ldr	r3, [pc, #260]	@ (800093c <MX_GPIO_Init+0x128>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b3e      	ldr	r3, [pc, #248]	@ (800093c <MX_GPIO_Init+0x128>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a3d      	ldr	r2, [pc, #244]	@ (800093c <MX_GPIO_Init+0x128>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <MX_GPIO_Init+0x128>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b38      	ldr	r3, [pc, #224]	@ (800093c <MX_GPIO_Init+0x128>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a37      	ldr	r2, [pc, #220]	@ (800093c <MX_GPIO_Init+0x128>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b35      	ldr	r3, [pc, #212]	@ (800093c <MX_GPIO_Init+0x128>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MX_GPIO_Init+0x128>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a31      	ldr	r2, [pc, #196]	@ (800093c <MX_GPIO_Init+0x128>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <MX_GPIO_Init+0x128>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000890:	482b      	ldr	r0, [pc, #172]	@ (8000940 <MX_GPIO_Init+0x12c>)
 8000892:	f000 fce9 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4825      	ldr	r0, [pc, #148]	@ (8000944 <MX_GPIO_Init+0x130>)
 80008ae:	f000 fb49 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b2:	2301      	movs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008b6:	230b      	movs	r3, #11
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	481f      	ldr	r0, [pc, #124]	@ (8000944 <MX_GPIO_Init+0x130>)
 80008c6:	f000 fb3d 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ca:	2303      	movs	r3, #3
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008da:	2308      	movs	r3, #8
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e8:	f000 fb2c 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480e      	ldr	r0, [pc, #56]	@ (8000940 <MX_GPIO_Init+0x12c>)
 8000906:	f000 fb1d 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800090a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000910:	2303      	movs	r3, #3
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x134>)
 8000920:	f000 fb10 	bl	8000f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f000 fad4 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f000 faed 	bl	8000f0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	@ 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48000800 	.word	0x48000800
 8000948:	48000c00 	.word	0x48000c00

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == User_Button_Pin) {
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d10d      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x2e>
	state ^= 1;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x38>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f083 0301 	eor.w	r3, r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x38>)
 800096c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000974:	f000 fc90 	bl	8001298 <HAL_GPIO_TogglePin>
//    HAL_Delay(1000);
  } else {
      __NOP();
  }
}
 8000978:	e000      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x30>
      __NOP();
 800097a:	bf00      	nop
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000010c 	.word	0x2000010c
 8000988:	48000400 	.word	0x48000400

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a2:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ae      	sub	sp, #184	@ 0xb8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2294      	movs	r2, #148	@ 0x94
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 ffbd 	bl	8003980 <memset>
  if(huart->Instance==USART1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13c      	bne.n	8000a8a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a14:	2300      	movs	r3, #0
 8000a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fc09 	bl	8002234 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a28:	f7ff ffb0 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_UART_MspInit+0xb8>)
 8000a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a30:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <HAL_UART_MspInit+0xb8>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a36:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_UART_MspInit+0xb8>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_UART_MspInit+0xb8>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <HAL_UART_MspInit+0xb8>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_UART_MspInit+0xb8>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a5c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a76:	2307      	movs	r3, #7
 8000a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f000 fa5d 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	37b8      	adds	r7, #184	@ 0xb8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af2:	f000 f8d1 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}

08000afa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000afe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b02:	f000 fbe3 	bl	80012cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f002 ff28 	bl	8003990 <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200a0000 	.word	0x200a0000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	20000110 	.word	0x20000110
 8000b74:	20000260 	.word	0x20000260

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f002 fee7 	bl	800399c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bce:	f7ff fd07 	bl	80005e0 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be0:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 8000be4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000be8:	20000260 	.word	0x20000260

08000bec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_IRQHandler>

08000bee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f961 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f80e 	bl	8000c20 <HAL_InitTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	e001      	b.n	8000c14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c10:	f7ff fec2 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <HAL_InitTick+0x6c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d023      	beq.n	8000c7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c34:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <HAL_InitTick+0x70>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_InitTick+0x6c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f96d 	bl	8000f2a <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10f      	bne.n	8000c76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d809      	bhi.n	8000c70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c64:	f000 f937 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c68:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <HAL_InitTick+0x74>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e007      	b.n	8000c80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e004      	b.n	8000c80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e001      	b.n	8000c80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000114 	.word	0x20000114

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000114 	.word	0x20000114

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <__NVIC_SetPriorityGrouping>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f52:	e166      	b.n	8001222 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8158 	beq.w	800121c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <HAL_GPIO_Init+0x40>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d017      	beq.n	8001022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80b2 	beq.w	800121c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b61      	ldr	r3, [pc, #388]	@ (8001240 <HAL_GPIO_Init+0x2fc>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010bc:	4a60      	ldr	r2, [pc, #384]	@ (8001240 <HAL_GPIO_Init+0x2fc>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001240 <HAL_GPIO_Init+0x2fc>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010fa:	d02b      	beq.n	8001154 <HAL_GPIO_Init+0x210>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a52      	ldr	r2, [pc, #328]	@ (8001248 <HAL_GPIO_Init+0x304>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d025      	beq.n	8001150 <HAL_GPIO_Init+0x20c>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a51      	ldr	r2, [pc, #324]	@ (800124c <HAL_GPIO_Init+0x308>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d01f      	beq.n	800114c <HAL_GPIO_Init+0x208>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a50      	ldr	r2, [pc, #320]	@ (8001250 <HAL_GPIO_Init+0x30c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d019      	beq.n	8001148 <HAL_GPIO_Init+0x204>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a4f      	ldr	r2, [pc, #316]	@ (8001254 <HAL_GPIO_Init+0x310>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d013      	beq.n	8001144 <HAL_GPIO_Init+0x200>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a4e      	ldr	r2, [pc, #312]	@ (8001258 <HAL_GPIO_Init+0x314>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d00d      	beq.n	8001140 <HAL_GPIO_Init+0x1fc>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4d      	ldr	r2, [pc, #308]	@ (800125c <HAL_GPIO_Init+0x318>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d007      	beq.n	800113c <HAL_GPIO_Init+0x1f8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4c      	ldr	r2, [pc, #304]	@ (8001260 <HAL_GPIO_Init+0x31c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_GPIO_Init+0x1f4>
 8001134:	2307      	movs	r3, #7
 8001136:	e00e      	b.n	8001156 <HAL_GPIO_Init+0x212>
 8001138:	2308      	movs	r3, #8
 800113a:	e00c      	b.n	8001156 <HAL_GPIO_Init+0x212>
 800113c:	2306      	movs	r3, #6
 800113e:	e00a      	b.n	8001156 <HAL_GPIO_Init+0x212>
 8001140:	2305      	movs	r3, #5
 8001142:	e008      	b.n	8001156 <HAL_GPIO_Init+0x212>
 8001144:	2304      	movs	r3, #4
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x212>
 8001148:	2303      	movs	r3, #3
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x212>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x212>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x212>
 8001154:	2300      	movs	r3, #0
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001166:	4937      	ldr	r1, [pc, #220]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001174:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <HAL_GPIO_Init+0x320>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001198:	4a32      	ldr	r2, [pc, #200]	@ (8001264 <HAL_GPIO_Init+0x320>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800119e:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <HAL_GPIO_Init+0x320>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c2:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <HAL_GPIO_Init+0x320>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011c8:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_GPIO_Init+0x320>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <HAL_GPIO_Init+0x320>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_GPIO_Init+0x320>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <HAL_GPIO_Init+0x320>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	f47f ae91 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800
 8001250:	48000c00 	.word	0x48000c00
 8001254:	48001000 	.word	0x48001000
 8001258:	48001400 	.word	0x48001400
 800125c:	48001800 	.word	0x48001800
 8001260:	48001c00 	.word	0x48001c00
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e002      	b.n	800128c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43d9      	mvns	r1, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	400b      	ands	r3, r1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fb2e 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001300:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800130c:	d102      	bne.n	8001314 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800130e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001312:	e00b      	b.n	800132c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800131a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001322:	d102      	bne.n	800132a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001328:	e000      	b.n	800132c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800132a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d141      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800134a:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d131      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001358:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135e:	4a46      	ldr	r2, [pc, #280]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	4b43      	ldr	r3, [pc, #268]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001370:	4a41      	ldr	r2, [pc, #260]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001378:	4b40      	ldr	r3, [pc, #256]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2232      	movs	r2, #50	@ 0x32
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4a3f      	ldr	r2, [pc, #252]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	0c9b      	lsrs	r3, r3, #18
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138e:	e002      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b01      	subs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001396:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013a2:	d102      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f2      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013aa:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b6:	d158      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e057      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013cc:	e04d      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d4:	d141      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d6:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e2:	d131      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ea:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001402:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2232      	movs	r2, #50	@ 0x32
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9b      	lsrs	r3, r3, #18
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141a:	e002      	b.n	8001422 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142e:	d102      	bne.n	8001436 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001442:	d112      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e011      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001454:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001458:	e007      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001468:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40007000 	.word	0x40007000
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83

08001484 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f000 bc08 	b.w	8001ca8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001498:	4b96      	ldr	r3, [pc, #600]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a2:	4b94      	ldr	r3, [pc, #592]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80e4 	beq.w	8001682 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4c>
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	f040 808b 	bne.w	80015de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	f040 8087 	bne.w	80015de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d0:	4b88      	ldr	r3, [pc, #544]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x64>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e3df      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	4b81      	ldr	r3, [pc, #516]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_RCC_OscConfig+0x7e>
 80014f8:	4b7e      	ldr	r3, [pc, #504]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001500:	e005      	b.n	800150e <HAL_RCC_OscConfig+0x8a>
 8001502:	4b7c      	ldr	r3, [pc, #496]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800150e:	4293      	cmp	r3, r2
 8001510:	d223      	bcs.n	800155a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fdcc 	bl	80020b4 <RCC_SetFlashLatencyFromMSIRange>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e3c0      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001526:	4b73      	ldr	r3, [pc, #460]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a72      	ldr	r2, [pc, #456]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b70      	ldr	r3, [pc, #448]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	496d      	ldr	r1, [pc, #436]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001544:	4b6b      	ldr	r3, [pc, #428]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	4968      	ldr	r1, [pc, #416]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
 8001558:	e025      	b.n	80015a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155a:	4b66      	ldr	r3, [pc, #408]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a65      	ldr	r2, [pc, #404]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b63      	ldr	r3, [pc, #396]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4960      	ldr	r1, [pc, #384]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001578:	4b5e      	ldr	r3, [pc, #376]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	495b      	ldr	r1, [pc, #364]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fd8c 	bl	80020b4 <RCC_SetFlashLatencyFromMSIRange>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e380      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a6:	f000 fcc1 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b51      	ldr	r3, [pc, #324]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	4950      	ldr	r1, [pc, #320]	@ (80016f8 <HAL_RCC_OscConfig+0x274>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a4e      	ldr	r2, [pc, #312]	@ (80016fc <HAL_RCC_OscConfig+0x278>)
 80015c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fb28 	bl	8000c20 <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d052      	beq.n	8001680 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	e364      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d032      	beq.n	800164c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e6:	4b43      	ldr	r3, [pc, #268]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a42      	ldr	r2, [pc, #264]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb65 	bl	8000cc0 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fa:	f7ff fb61 	bl	8000cc0 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e34d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800160c:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001618:	4b36      	ldr	r3, [pc, #216]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a35      	ldr	r2, [pc, #212]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4930      	ldr	r1, [pc, #192]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001636:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	492b      	ldr	r1, [pc, #172]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
 800164a:	e01a      	b.n	8001682 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800164c:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a28      	ldr	r2, [pc, #160]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb32 	bl	8000cc0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001660:	f7ff fb2e 	bl	8000cc0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e31a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1dc>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d073      	beq.n	8001776 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x21c>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d10b      	bne.n	80016b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d063      	beq.n	8001774 <HAL_RCC_OscConfig+0x2f0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d15f      	bne.n	8001774 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e2f7      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x24c>
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e025      	b.n	800171c <HAL_RCC_OscConfig+0x298>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d8:	d114      	bne.n	8001704 <HAL_RCC_OscConfig+0x280>
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a02      	ldr	r2, [pc, #8]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e013      	b.n	800171c <HAL_RCC_OscConfig+0x298>
 80016f4:	40021000 	.word	0x40021000
 80016f8:	080042e0 	.word	0x080042e0
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004
 8001704:	4ba0      	ldr	r3, [pc, #640]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a9f      	ldr	r2, [pc, #636]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b9d      	ldr	r3, [pc, #628]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a9c      	ldr	r2, [pc, #624]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800171a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff facc 	bl	8000cc0 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fac8 	bl	8000cc0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	@ 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e2b4      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173e:	4b92      	ldr	r3, [pc, #584]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x2a8>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fab8 	bl	8000cc0 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fab4 	bl	8000cc0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e2a0      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001766:	4b88      	ldr	r3, [pc, #544]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x2d0>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d060      	beq.n	8001844 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d005      	beq.n	8001794 <HAL_RCC_OscConfig+0x310>
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d119      	bne.n	80017c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d116      	bne.n	80017c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001794:	4b7c      	ldr	r3, [pc, #496]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_OscConfig+0x328>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e27d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	4973      	ldr	r1, [pc, #460]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c0:	e040      	b.n	8001844 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d023      	beq.n	8001812 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fa73 	bl	8000cc0 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fa6f 	bl	8000cc0 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e25b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f0:	4b65      	ldr	r3, [pc, #404]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b62      	ldr	r3, [pc, #392]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	495f      	ldr	r1, [pc, #380]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e018      	b.n	8001844 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b5d      	ldr	r3, [pc, #372]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5c      	ldr	r2, [pc, #368]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fa4f 	bl	8000cc0 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fa4b 	bl	8000cc0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e237      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03c      	beq.n	80018ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01c      	beq.n	8001892 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001858:	4b4b      	ldr	r3, [pc, #300]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185e:	4a4a      	ldr	r2, [pc, #296]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fa2a 	bl	8000cc0 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fa26 	bl	8000cc0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e212      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001882:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x3ec>
 8001890:	e01b      	b.n	80018ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001898:	4a3b      	ldr	r2, [pc, #236]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa0d 	bl	8000cc0 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa09 	bl	8000cc0 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1f5      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018bc:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a6 	beq.w	8001a24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10d      	bne.n	8001904 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	4a26      	ldr	r2, [pc, #152]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001900:	2301      	movs	r3, #1
 8001902:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	4b21      	ldr	r3, [pc, #132]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d118      	bne.n	8001942 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001910:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191c:	f7ff f9d0 	bl	8000cc0 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001924:	f7ff f9cc 	bl	8000cc0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1b8      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d108      	bne.n	800195c <HAL_RCC_OscConfig+0x4d8>
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800195a:	e029      	b.n	80019b0 <HAL_RCC_OscConfig+0x52c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d115      	bne.n	8001990 <HAL_RCC_OscConfig+0x50c>
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196a:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197a:	4a03      	ldr	r2, [pc, #12]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x52c>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	4b9d      	ldr	r3, [pc, #628]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001996:	4a9c      	ldr	r2, [pc, #624]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a0:	4b99      	ldr	r3, [pc, #612]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a6:	4a98      	ldr	r2, [pc, #608]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d016      	beq.n	80019e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f982 	bl	8000cc0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff f97e 	bl	8000cc0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e168      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 80019d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ed      	beq.n	80019c0 <HAL_RCC_OscConfig+0x53c>
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff f96b 	bl	8000cc0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f967 	bl	8000cc0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e151      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a04:	4b80      	ldr	r3, [pc, #512]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ed      	bne.n	80019ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b7b      	ldr	r3, [pc, #492]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	4a7a      	ldr	r2, [pc, #488]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a38:	4b73      	ldr	r3, [pc, #460]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3e:	4a72      	ldr	r2, [pc, #456]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff f93a 	bl	8000cc0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a50:	f7ff f936 	bl	8000cc0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e122      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a62:	4b69      	ldr	r3, [pc, #420]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ef      	beq.n	8001a50 <HAL_RCC_OscConfig+0x5cc>
 8001a70:	e01b      	b.n	8001aaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a72:	4b65      	ldr	r3, [pc, #404]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a78:	4a63      	ldr	r2, [pc, #396]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff f91d 	bl	8000cc0 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a8a:	f7ff f919 	bl	8000cc0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e105      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ef      	bne.n	8001a8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80f9 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	f040 80cf 	bne.w	8001c5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001abe:	4b52      	ldr	r3, [pc, #328]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d12c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	3b01      	subs	r3, #1
 8001ade:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d123      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d11b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d113      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	3b01      	subs	r3, #1
 8001b12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d109      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d071      	beq.n	8001c10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d068      	beq.n	8001c04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b32:	4b35      	ldr	r3, [pc, #212]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b3e:	4b32      	ldr	r3, [pc, #200]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0ac      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2d      	ldr	r2, [pc, #180]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001b54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b5a:	f7ff f8b1 	bl	8000cc0 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff f8ad 	bl	8000cc0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e099      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b74:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_RCC_OscConfig+0x788>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b90:	3a01      	subs	r2, #1
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b9a:	0212      	lsls	r2, r2, #8
 8001b9c:	4311      	orrs	r1, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ba2:	0852      	lsrs	r2, r2, #1
 8001ba4:	3a01      	subs	r2, #1
 8001ba6:	0552      	lsls	r2, r2, #21
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bae:	0852      	lsrs	r2, r2, #1
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	0652      	lsls	r2, r2, #25
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bba:	06d2      	lsls	r2, r2, #27
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4912      	ldr	r1, [pc, #72]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bdc:	f7ff f870 	bl	8000cc0 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f86c 	bl	8000cc0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e058      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c02:	e050      	b.n	8001ca6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e04f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d144      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a20      	ldr	r2, [pc, #128]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c34:	f7ff f844 	bl	8000cc0 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f840 	bl	8000cc0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e02c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x7b8>
 8001c5a:	e024      	b.n	8001ca6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d01f      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f827 	bl	8000cc0 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c76:	f7ff f823 	bl	8000cc0 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e00f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4905      	ldr	r1, [pc, #20]	@ (8001cb0 <HAL_RCC_OscConfig+0x82c>)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_RCC_OscConfig+0x830>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e001      	b.n	8001ca6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	feeefffc 	.word	0xfeeefffc

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e11d      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b90      	ldr	r3, [pc, #576]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b8d      	ldr	r3, [pc, #564]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 020f 	bic.w	r2, r3, #15
 8001ce6:	498b      	ldr	r1, [pc, #556]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b89      	ldr	r3, [pc, #548]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e105      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d010      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	4b81      	ldr	r3, [pc, #516]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d908      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	497b      	ldr	r1, [pc, #492]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d079      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d11e      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	4b75      	ldr	r3, [pc, #468]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0dc      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d52:	f000 fa09 	bl	8002168 <RCC_GetSysClockFreqFromPLLSource>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a70      	ldr	r2, [pc, #448]	@ (8001f1c <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d946      	bls.n	8001dec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d140      	bne.n	8001dec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d72:	4a69      	ldr	r2, [pc, #420]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e035      	b.n	8001dec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d88:	4b63      	ldr	r3, [pc, #396]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d115      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b9      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0ad      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db0:	4b59      	ldr	r3, [pc, #356]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0a5      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001dc0:	f000 f8b4 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a55      	ldr	r2, [pc, #340]	@ (8001f1c <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d90f      	bls.n	8001dec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dcc:	4b52      	ldr	r3, [pc, #328]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001de0:	4a4d      	ldr	r2, [pc, #308]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dec:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 0203 	bic.w	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4947      	ldr	r1, [pc, #284]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dfe:	f7fe ff5f 	bl	8000cc0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e06:	f7fe ff5b 	bl	8000cc0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e077      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 020c 	and.w	r2, r3, #12
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d1eb      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e34:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a37      	ldr	r2, [pc, #220]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e3e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d208      	bcs.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	492b      	ldr	r1, [pc, #172]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6e:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d210      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 020f 	bic.w	r2, r3, #15
 8001e84:	4923      	ldr	r1, [pc, #140]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8c:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <HAL_RCC_ClockConfig+0x25c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e036      	b.n	8001f0c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	4918      	ldr	r1, [pc, #96]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4910      	ldr	r1, [pc, #64]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001edc:	f000 f826 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	490c      	ldr	r1, [pc, #48]	@ (8001f20 <HAL_RCC_ClockConfig+0x268>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <HAL_RCC_ClockConfig+0x26c>)
 8001efa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_RCC_ClockConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fe8d 	bl	8000c20 <HAL_InitTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	04c4b400 	.word	0x04c4b400
 8001f20:	080042e0 	.word	0x080042e0
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f44:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x34>
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d121      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d11e      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f60:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f6c:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f88:	4a2b      	ldr	r2, [pc, #172]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	@ (800203c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e004      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d134      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fba:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d003      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001fd0:	e005      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd4:	617b      	str	r3, [r7, #20]
      break;
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fda:	617b      	str	r3, [r7, #20]
      break;
 8001fdc:	e002      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	617b      	str	r3, [r7, #20]
      break;
 8001fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3301      	adds	r3, #1
 8001ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	fb03 f202 	mul.w	r2, r3, r2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0e5b      	lsrs	r3, r3, #25
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	3301      	adds	r3, #1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002024:	69bb      	ldr	r3, [r7, #24]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	080042f8 	.word	0x080042f8
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200

08002044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_RCC_GetHCLKFreq+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002060:	f7ff fff0 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4904      	ldr	r1, [pc, #16]	@ (8002084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	080042f0 	.word	0x080042f0

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800208c:	f7ff ffda 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	080042f0 	.word	0x080042f0

080020b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020cc:	f7ff f916 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 80020d0:	6178      	str	r0, [r7, #20]
 80020d2:	e014      	b.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	4a21      	ldr	r2, [pc, #132]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020ec:	f7ff f906 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 80020f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002104:	d10b      	bne.n	800211e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b80      	cmp	r3, #128	@ 0x80
 800210a:	d913      	bls.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002110:	d902      	bls.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002112:	2302      	movs	r3, #2
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	e00d      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002118:	2301      	movs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	e00a      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b7f      	cmp	r3, #127	@ 0x7f
 8002122:	d902      	bls.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e004      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b70      	cmp	r3, #112	@ 0x70
 800212e:	d101      	bne.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 020f 	bic.w	r2, r3, #15
 800213c:	4909      	ldr	r1, [pc, #36]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40022000 	.word	0x40022000

08002168 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800216e:	4b2d      	ldr	r3, [pc, #180]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d00b      	beq.n	8002196 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d825      	bhi.n	80021d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d008      	beq.n	800219c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d11f      	bne.n	80021d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002190:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002192:	613b      	str	r3, [r7, #16]
    break;
 8002194:	e01f      	b.n	80021d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002196:	4b25      	ldr	r3, [pc, #148]	@ (800222c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002198:	613b      	str	r3, [r7, #16]
    break;
 800219a:	e01c      	b.n	80021d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800219c:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e005      	b.n	80021c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80021c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021cc:	613b      	str	r3, [r7, #16]
    break;
 80021ce:	e002      	b.n	80021d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
    break;
 80021d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d6:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	3301      	adds	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	fb03 f202 	mul.w	r2, r3, r2
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0e5b      	lsrs	r3, r3, #25
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002216:	683b      	ldr	r3, [r7, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000
 8002228:	00f42400 	.word	0x00f42400
 800222c:	007a1200 	.word	0x007a1200
 8002230:	080042f8 	.word	0x080042f8

08002234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800223c:	2300      	movs	r3, #0
 800223e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002240:	2300      	movs	r3, #0
 8002242:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800224c:	2b00      	cmp	r3, #0
 800224e:	d040      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002254:	2b80      	cmp	r3, #128	@ 0x80
 8002256:	d02a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002258:	2b80      	cmp	r3, #128	@ 0x80
 800225a:	d825      	bhi.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800225c:	2b60      	cmp	r3, #96	@ 0x60
 800225e:	d026      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002260:	2b60      	cmp	r3, #96	@ 0x60
 8002262:	d821      	bhi.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002264:	2b40      	cmp	r3, #64	@ 0x40
 8002266:	d006      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002268:	2b40      	cmp	r3, #64	@ 0x40
 800226a:	d81d      	bhi.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002270:	2b20      	cmp	r3, #32
 8002272:	d010      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002274:	e018      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002276:	4b89      	ldr	r3, [pc, #548]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a88      	ldr	r2, [pc, #544]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002280:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002282:	e015      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3304      	adds	r3, #4
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fb02 	bl	8002894 <RCCEx_PLLSAI1_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002294:	e00c      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3320      	adds	r3, #32
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fbed 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 80022a2:	4603      	mov	r3, r0
 80022a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a6:	e003      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	74fb      	strb	r3, [r7, #19]
      break;
 80022ac:	e000      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80022ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022b6:	4b79      	ldr	r3, [pc, #484]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022bc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c4:	4975      	ldr	r1, [pc, #468]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80022cc:	e001      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d047      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e6:	d030      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80022e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ec:	d82a      	bhi.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022f2:	d02a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80022f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022f8:	d824      	bhi.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022fe:	d008      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002304:	d81e      	bhi.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800230a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800230e:	d010      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002310:	e018      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002312:	4b62      	ldr	r3, [pc, #392]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	4a61      	ldr	r2, [pc, #388]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800231e:	e015      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fab4 	bl	8002894 <RCCEx_PLLSAI1_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002330:	e00c      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3320      	adds	r3, #32
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fb9f 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002342:	e003      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	74fb      	strb	r3, [r7, #19]
      break;
 8002348:	e000      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800234a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10b      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002352:	4b52      	ldr	r3, [pc, #328]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002354:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	494e      	ldr	r1, [pc, #312]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002368:	e001      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 809f 	beq.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002380:	4b46      	ldr	r3, [pc, #280]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002390:	2300      	movs	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	4a40      	ldr	r2, [pc, #256]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a2:	4b3e      	ldr	r3, [pc, #248]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ae:	2301      	movs	r3, #1
 80023b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b2:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3a      	ldr	r2, [pc, #232]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023be:	f7fe fc7f 	bl	8000cc0 <HAL_GetTick>
 80023c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c4:	e009      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c6:	f7fe fc7b 	bl	8000cc0 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d902      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	74fb      	strb	r3, [r7, #19]
        break;
 80023d8:	e005      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023da:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ef      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d15b      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ec:	4b2b      	ldr	r3, [pc, #172]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01f      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	429a      	cmp	r2, r3
 8002408:	d019      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800240a:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002414:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002416:	4b21      	ldr	r3, [pc, #132]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241c:	4a1f      	ldr	r2, [pc, #124]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242c:	4a1b      	ldr	r2, [pc, #108]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002436:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fc3a 	bl	8000cc0 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	e00b      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7fe fc36 	bl	8000cc0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d902      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	74fb      	strb	r3, [r7, #19]
            break;
 8002466:	e006      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ec      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10c      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247c:	4b07      	ldr	r3, [pc, #28]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002482:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	4903      	ldr	r1, [pc, #12]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002494:	e008      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	74bb      	strb	r3, [r7, #18]
 800249a:	e005      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a8:	7c7b      	ldrb	r3, [r7, #17]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ae:	4ba0      	ldr	r3, [pc, #640]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	4a9f      	ldr	r2, [pc, #636]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c6:	4b9a      	ldr	r3, [pc, #616]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024cc:	f023 0203 	bic.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d4:	4996      	ldr	r1, [pc, #600]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e8:	4b91      	ldr	r3, [pc, #580]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	f023 020c 	bic.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	498e      	ldr	r1, [pc, #568]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800250a:	4b89      	ldr	r3, [pc, #548]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002510:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	4985      	ldr	r1, [pc, #532]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800252c:	4b80      	ldr	r3, [pc, #512]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	497d      	ldr	r1, [pc, #500]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254e:	4b78      	ldr	r3, [pc, #480]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	4974      	ldr	r1, [pc, #464]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002570:	4b6f      	ldr	r3, [pc, #444]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257e:	496c      	ldr	r1, [pc, #432]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002592:	4b67      	ldr	r3, [pc, #412]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025a0:	4963      	ldr	r1, [pc, #396]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c2:	495b      	ldr	r1, [pc, #364]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d6:	4b56      	ldr	r3, [pc, #344]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	4952      	ldr	r1, [pc, #328]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	494a      	ldr	r1, [pc, #296]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261a:	4b45      	ldr	r3, [pc, #276]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	4941      	ldr	r1, [pc, #260]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800263c:	4b3c      	ldr	r3, [pc, #240]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800263e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264a:	4939      	ldr	r1, [pc, #228]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d028      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800265e:	4b34      	ldr	r3, [pc, #208]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266c:	4930      	ldr	r1, [pc, #192]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800267c:	d106      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267e:	4b2c      	ldr	r3, [pc, #176]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a2b      	ldr	r2, [pc, #172]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002688:	60d3      	str	r3, [r2, #12]
 800268a:	e011      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002690:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f8f9 	bl	8002894 <RCCEx_PLLSAI1_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d04d      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026c4:	d108      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026cc:	4a18      	ldr	r2, [pc, #96]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026d6:	e012      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026de:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026e8:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026f6:	490e      	ldr	r1, [pc, #56]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002706:	d106      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a08      	ldr	r2, [pc, #32]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002712:	60d3      	str	r3, [r2, #12]
 8002714:	e020      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800271a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800271e:	d109      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002720:	4b03      	ldr	r3, [pc, #12]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a02      	ldr	r2, [pc, #8]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272a:	60d3      	str	r3, [r2, #12]
 800272c:	e014      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f8a5 	bl	8002894 <RCCEx_PLLSAI1_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d028      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b4a      	ldr	r3, [pc, #296]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002772:	4947      	ldr	r1, [pc, #284]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002782:	d106      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b42      	ldr	r3, [pc, #264]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a41      	ldr	r2, [pc, #260]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
 8002790:	e011      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002796:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800279a:	d10c      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f876 	bl	8002894 <RCCEx_PLLSAI1_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01e      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c2:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d2:	492f      	ldr	r1, [pc, #188]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f851 	bl	8002894 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800280c:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002812:	f023 0204 	bic.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281c:	491c      	ldr	r1, [pc, #112]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002830:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002836:	f023 0218 	bic.w	r2, r3, #24
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	4913      	ldr	r1, [pc, #76]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002854:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002856:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800285a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002864:	490a      	ldr	r1, [pc, #40]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002876:	d105      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002884:	7cbb      	ldrb	r3, [r7, #18]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028a2:	4b72      	ldr	r3, [pc, #456]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00e      	beq.n	80028cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028ae:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d103      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
       ||
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d142      	bne.n	800294c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e03f      	b.n	800294c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d018      	beq.n	8002906 <RCCEx_PLLSAI1_Config+0x72>
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d825      	bhi.n	8002924 <RCCEx_PLLSAI1_Config+0x90>
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d002      	beq.n	80028e2 <RCCEx_PLLSAI1_Config+0x4e>
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d009      	beq.n	80028f4 <RCCEx_PLLSAI1_Config+0x60>
 80028e0:	e020      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028e2:	4b62      	ldr	r3, [pc, #392]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11d      	bne.n	800292a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f2:	e01a      	b.n	800292a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e013      	b.n	800292e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002906:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002912:	4b56      	ldr	r3, [pc, #344]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002922:	e006      	b.n	8002932 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      break;
 8002928:	e004      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002932:	bf00      	nop
    }

    if(status == HAL_OK)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800293a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4949      	ldr	r1, [pc, #292]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 8086 	bne.w	8002a60 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002954:	4b45      	ldr	r3, [pc, #276]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a44      	ldr	r2, [pc, #272]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 800295a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800295e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7fe f9ae 	bl	8000cc0 <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002966:	e009      	b.n	800297c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002968:	f7fe f9aa 	bl	8000cc0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d902      	bls.n	800297c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	73fb      	strb	r3, [r7, #15]
        break;
 800297a:	e005      	b.n	8002988 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800297c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ef      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d168      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d113      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002994:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	4b35      	ldr	r3, [pc, #212]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1dc>)
 800299a:	4013      	ands	r3, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	0211      	lsls	r1, r2, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68d2      	ldr	r2, [r2, #12]
 80029a6:	06d2      	lsls	r2, r2, #27
 80029a8:	4311      	orrs	r1, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6852      	ldr	r2, [r2, #4]
 80029ae:	3a01      	subs	r2, #1
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	430a      	orrs	r2, r1
 80029b4:	492d      	ldr	r1, [pc, #180]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	610b      	str	r3, [r1, #16]
 80029ba:	e02d      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d115      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	0211      	lsls	r1, r2, #8
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6912      	ldr	r2, [r2, #16]
 80029d4:	0852      	lsrs	r2, r2, #1
 80029d6:	3a01      	subs	r2, #1
 80029d8:	0552      	lsls	r2, r2, #21
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6852      	ldr	r2, [r2, #4]
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	430a      	orrs	r2, r1
 80029e6:	4921      	ldr	r1, [pc, #132]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	610b      	str	r3, [r1, #16]
 80029ec:	e014      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	4b21      	ldr	r3, [pc, #132]	@ (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	0211      	lsls	r1, r2, #8
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6952      	ldr	r2, [r2, #20]
 8002a00:	0852      	lsrs	r2, r2, #1
 8002a02:	3a01      	subs	r2, #1
 8002a04:	0652      	lsls	r2, r2, #25
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6852      	ldr	r2, [r2, #4]
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4916      	ldr	r1, [pc, #88]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe f94c 	bl	8000cc0 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a2a:	e009      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a2c:	f7fe f948 	bl	8000cc0 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a3e:	e005      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a40:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ef      	beq.n	8002a2c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	4904      	ldr	r1, [pc, #16]	@ (8002a6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	07ff800f 	.word	0x07ff800f
 8002a74:	ff9f800f 	.word	0xff9f800f
 8002a78:	f9ff800f 	.word	0xf9ff800f

08002a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a8a:	4b72      	ldr	r3, [pc, #456]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00e      	beq.n	8002ab4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a96:	4b6f      	ldr	r3, [pc, #444]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0203 	and.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d103      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d142      	bne.n	8002b34 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e03f      	b.n	8002b34 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d018      	beq.n	8002aee <RCCEx_PLLSAI2_Config+0x72>
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d825      	bhi.n	8002b0c <RCCEx_PLLSAI2_Config+0x90>
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d002      	beq.n	8002aca <RCCEx_PLLSAI2_Config+0x4e>
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d009      	beq.n	8002adc <RCCEx_PLLSAI2_Config+0x60>
 8002ac8:	e020      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aca:	4b62      	ldr	r3, [pc, #392]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11d      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ada:	e01a      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002adc:	4b5d      	ldr	r3, [pc, #372]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aec:	e013      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aee:	4b59      	ldr	r3, [pc, #356]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002afa:	4b56      	ldr	r3, [pc, #344]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b0a:	e006      	b.n	8002b1a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e004      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b22:	4b4c      	ldr	r3, [pc, #304]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4949      	ldr	r1, [pc, #292]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 8086 	bne.w	8002c48 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b3c:	4b45      	ldr	r3, [pc, #276]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a44      	ldr	r2, [pc, #272]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fe f8ba 	bl	8000cc0 <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b4e:	e009      	b.n	8002b64 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b50:	f7fe f8b6 	bl	8000cc0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	73fb      	strb	r3, [r7, #15]
        break;
 8002b62:	e005      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b64:	4b3b      	ldr	r3, [pc, #236]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ef      	bne.n	8002b50 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d168      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d113      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b7c:	4b35      	ldr	r3, [pc, #212]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	4b35      	ldr	r3, [pc, #212]	@ (8002c58 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6892      	ldr	r2, [r2, #8]
 8002b88:	0211      	lsls	r1, r2, #8
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	06d2      	lsls	r2, r2, #27
 8002b90:	4311      	orrs	r1, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6852      	ldr	r2, [r2, #4]
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	492d      	ldr	r1, [pc, #180]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	614b      	str	r3, [r1, #20]
 8002ba2:	e02d      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d115      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6892      	ldr	r2, [r2, #8]
 8002bb6:	0211      	lsls	r1, r2, #8
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6912      	ldr	r2, [r2, #16]
 8002bbc:	0852      	lsrs	r2, r2, #1
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	0552      	lsls	r2, r2, #21
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6852      	ldr	r2, [r2, #4]
 8002bc8:	3a01      	subs	r2, #1
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	4921      	ldr	r1, [pc, #132]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	614b      	str	r3, [r1, #20]
 8002bd4:	e014      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	4b21      	ldr	r3, [pc, #132]	@ (8002c60 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6892      	ldr	r2, [r2, #8]
 8002be2:	0211      	lsls	r1, r2, #8
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6952      	ldr	r2, [r2, #20]
 8002be8:	0852      	lsrs	r2, r2, #1
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0652      	lsls	r2, r2, #25
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6852      	ldr	r2, [r2, #4]
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	4916      	ldr	r1, [pc, #88]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c00:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a13      	ldr	r2, [pc, #76]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe f858 	bl	8000cc0 <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c12:	e009      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c14:	f7fe f854 	bl	8000cc0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
          break;
 8002c26:	e005      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c28:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4904      	ldr	r1, [pc, #16]	@ (8002c54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	07ff800f 	.word	0x07ff800f
 8002c5c:	ff9f800f 	.word	0xff9f800f
 8002c60:	f9ff800f 	.word	0xf9ff800f

08002c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e042      	b.n	8002cfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fd fea9 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2224      	movs	r2, #36	@ 0x24
 8002c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fb24 	bl	80032fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f825 	bl	8002d04 <UART_SetConfig>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e01b      	b.n	8002cfc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fba3 	bl	8003440 <UART_CheckIdleState>
 8002cfa:	4603      	mov	r3, r0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d08:	b08c      	sub	sp, #48	@ 0x30
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4baa      	ldr	r3, [pc, #680]	@ (8002fdc <UART_SetConfig+0x2d8>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a9f      	ldr	r2, [pc, #636]	@ (8002fe0 <UART_SetConfig+0x2dc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	f023 010f 	bic.w	r1, r3, #15
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a90      	ldr	r2, [pc, #576]	@ (8002fe4 <UART_SetConfig+0x2e0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d125      	bne.n	8002df4 <UART_SetConfig+0xf0>
 8002da8:	4b8f      	ldr	r3, [pc, #572]	@ (8002fe8 <UART_SetConfig+0x2e4>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d81a      	bhi.n	8002dec <UART_SetConfig+0xe8>
 8002db6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dbc <UART_SetConfig+0xb8>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002ddd 	.word	0x08002ddd
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002de5 	.word	0x08002de5
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dd2:	e116      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dda:	e112      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002de2:	e10e      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002de4:	2308      	movs	r3, #8
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dea:	e10a      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002dec:	2310      	movs	r3, #16
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df2:	e106      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7c      	ldr	r2, [pc, #496]	@ (8002fec <UART_SetConfig+0x2e8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d138      	bne.n	8002e70 <UART_SetConfig+0x16c>
 8002dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8002fe8 <UART_SetConfig+0x2e4>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d82d      	bhi.n	8002e68 <UART_SetConfig+0x164>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <UART_SetConfig+0x110>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e69 	.word	0x08002e69
 8002e1c:	08002e69 	.word	0x08002e69
 8002e20:	08002e69 	.word	0x08002e69
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08002e69 	.word	0x08002e69
 8002e2c:	08002e69 	.word	0x08002e69
 8002e30:	08002e69 	.word	0x08002e69
 8002e34:	08002e51 	.word	0x08002e51
 8002e38:	08002e69 	.word	0x08002e69
 8002e3c:	08002e69 	.word	0x08002e69
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e61 	.word	0x08002e61
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e4e:	e0d8      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002e50:	2302      	movs	r3, #2
 8002e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e56:	e0d4      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e5e:	e0d0      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002e60:	2308      	movs	r3, #8
 8002e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e66:	e0cc      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e6e:	e0c8      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5e      	ldr	r2, [pc, #376]	@ (8002ff0 <UART_SetConfig+0x2ec>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d125      	bne.n	8002ec6 <UART_SetConfig+0x1c2>
 8002e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe8 <UART_SetConfig+0x2e4>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e84:	2b30      	cmp	r3, #48	@ 0x30
 8002e86:	d016      	beq.n	8002eb6 <UART_SetConfig+0x1b2>
 8002e88:	2b30      	cmp	r3, #48	@ 0x30
 8002e8a:	d818      	bhi.n	8002ebe <UART_SetConfig+0x1ba>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d00a      	beq.n	8002ea6 <UART_SetConfig+0x1a2>
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d814      	bhi.n	8002ebe <UART_SetConfig+0x1ba>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <UART_SetConfig+0x19a>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d008      	beq.n	8002eae <UART_SetConfig+0x1aa>
 8002e9c:	e00f      	b.n	8002ebe <UART_SetConfig+0x1ba>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea4:	e0ad      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eac:	e0a9      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb4:	e0a5      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ebc:	e0a1      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec4:	e09d      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <UART_SetConfig+0x2f0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d125      	bne.n	8002f1c <UART_SetConfig+0x218>
 8002ed0:	4b45      	ldr	r3, [pc, #276]	@ (8002fe8 <UART_SetConfig+0x2e4>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8002edc:	d016      	beq.n	8002f0c <UART_SetConfig+0x208>
 8002ede:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ee0:	d818      	bhi.n	8002f14 <UART_SetConfig+0x210>
 8002ee2:	2b80      	cmp	r3, #128	@ 0x80
 8002ee4:	d00a      	beq.n	8002efc <UART_SetConfig+0x1f8>
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d814      	bhi.n	8002f14 <UART_SetConfig+0x210>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <UART_SetConfig+0x1f0>
 8002eee:	2b40      	cmp	r3, #64	@ 0x40
 8002ef0:	d008      	beq.n	8002f04 <UART_SetConfig+0x200>
 8002ef2:	e00f      	b.n	8002f14 <UART_SetConfig+0x210>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efa:	e082      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002efc:	2302      	movs	r3, #2
 8002efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f02:	e07e      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f04:	2304      	movs	r3, #4
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0a:	e07a      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f12:	e076      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f14:	2310      	movs	r3, #16
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1a:	e072      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a35      	ldr	r2, [pc, #212]	@ (8002ff8 <UART_SetConfig+0x2f4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d12a      	bne.n	8002f7c <UART_SetConfig+0x278>
 8002f26:	4b30      	ldr	r3, [pc, #192]	@ (8002fe8 <UART_SetConfig+0x2e4>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f34:	d01a      	beq.n	8002f6c <UART_SetConfig+0x268>
 8002f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f3a:	d81b      	bhi.n	8002f74 <UART_SetConfig+0x270>
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f40:	d00c      	beq.n	8002f5c <UART_SetConfig+0x258>
 8002f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f46:	d815      	bhi.n	8002f74 <UART_SetConfig+0x270>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <UART_SetConfig+0x250>
 8002f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f50:	d008      	beq.n	8002f64 <UART_SetConfig+0x260>
 8002f52:	e00f      	b.n	8002f74 <UART_SetConfig+0x270>
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5a:	e052      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f62:	e04e      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f64:	2304      	movs	r3, #4
 8002f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6a:	e04a      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f72:	e046      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f74:	2310      	movs	r3, #16
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7a:	e042      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <UART_SetConfig+0x2dc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d13a      	bne.n	8002ffc <UART_SetConfig+0x2f8>
 8002f86:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <UART_SetConfig+0x2e4>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f94:	d01a      	beq.n	8002fcc <UART_SetConfig+0x2c8>
 8002f96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f9a:	d81b      	bhi.n	8002fd4 <UART_SetConfig+0x2d0>
 8002f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa0:	d00c      	beq.n	8002fbc <UART_SetConfig+0x2b8>
 8002fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa6:	d815      	bhi.n	8002fd4 <UART_SetConfig+0x2d0>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <UART_SetConfig+0x2b0>
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb0:	d008      	beq.n	8002fc4 <UART_SetConfig+0x2c0>
 8002fb2:	e00f      	b.n	8002fd4 <UART_SetConfig+0x2d0>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	e022      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc2:	e01e      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fca:	e01a      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002fcc:	2308      	movs	r3, #8
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fd2:	e016      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fda:	e012      	b.n	8003002 <UART_SetConfig+0x2fe>
 8002fdc:	cfff69f3 	.word	0xcfff69f3
 8002fe0:	40008000 	.word	0x40008000
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	40004800 	.word	0x40004800
 8002ff4:	40004c00 	.word	0x40004c00
 8002ff8:	40005000 	.word	0x40005000
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4aae      	ldr	r2, [pc, #696]	@ (80032c0 <UART_SetConfig+0x5bc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	f040 8097 	bne.w	800313c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800300e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003012:	2b08      	cmp	r3, #8
 8003014:	d823      	bhi.n	800305e <UART_SetConfig+0x35a>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <UART_SetConfig+0x318>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003041 	.word	0x08003041
 8003020:	0800305f 	.word	0x0800305f
 8003024:	08003049 	.word	0x08003049
 8003028:	0800305f 	.word	0x0800305f
 800302c:	0800304f 	.word	0x0800304f
 8003030:	0800305f 	.word	0x0800305f
 8003034:	0800305f 	.word	0x0800305f
 8003038:	0800305f 	.word	0x0800305f
 800303c:	08003057 	.word	0x08003057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7ff f80c 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8003044:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003046:	e010      	b.n	800306a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003048:	4b9e      	ldr	r3, [pc, #632]	@ (80032c4 <UART_SetConfig+0x5c0>)
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800304c:	e00d      	b.n	800306a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800304e:	f7fe ff6d 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003052:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003054:	e009      	b.n	800306a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800305c:	e005      	b.n	800306a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003068:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8130 	beq.w	80032d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	4a94      	ldr	r2, [pc, #592]	@ (80032c8 <UART_SetConfig+0x5c4>)
 8003078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307c:	461a      	mov	r2, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	fbb3 f3f2 	udiv	r3, r3, r2
 8003084:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	429a      	cmp	r2, r3
 8003094:	d305      	bcc.n	80030a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d903      	bls.n	80030aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030a8:	e113      	b.n	80032d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	2200      	movs	r2, #0
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	60fa      	str	r2, [r7, #12]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	4a84      	ldr	r2, [pc, #528]	@ (80032c8 <UART_SetConfig+0x5c4>)
 80030b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2200      	movs	r2, #0
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030cc:	f7fd f8e8 	bl	80002a0 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	020b      	lsls	r3, r1, #8
 80030e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030e6:	0202      	lsls	r2, r0, #8
 80030e8:	6979      	ldr	r1, [r7, #20]
 80030ea:	6849      	ldr	r1, [r1, #4]
 80030ec:	0849      	lsrs	r1, r1, #1
 80030ee:	2000      	movs	r0, #0
 80030f0:	460c      	mov	r4, r1
 80030f2:	4605      	mov	r5, r0
 80030f4:	eb12 0804 	adds.w	r8, r2, r4
 80030f8:	eb43 0905 	adc.w	r9, r3, r5
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	469a      	mov	sl, r3
 8003104:	4693      	mov	fp, r2
 8003106:	4652      	mov	r2, sl
 8003108:	465b      	mov	r3, fp
 800310a:	4640      	mov	r0, r8
 800310c:	4649      	mov	r1, r9
 800310e:	f7fd f8c7 	bl	80002a0 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4613      	mov	r3, r2
 8003118:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003120:	d308      	bcc.n	8003134 <UART_SetConfig+0x430>
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003128:	d204      	bcs.n	8003134 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	e0ce      	b.n	80032d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800313a:	e0ca      	b.n	80032d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003144:	d166      	bne.n	8003214 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003146:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800314a:	2b08      	cmp	r3, #8
 800314c:	d827      	bhi.n	800319e <UART_SetConfig+0x49a>
 800314e:	a201      	add	r2, pc, #4	@ (adr r2, 8003154 <UART_SetConfig+0x450>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003179 	.word	0x08003179
 8003158:	08003181 	.word	0x08003181
 800315c:	08003189 	.word	0x08003189
 8003160:	0800319f 	.word	0x0800319f
 8003164:	0800318f 	.word	0x0800318f
 8003168:	0800319f 	.word	0x0800319f
 800316c:	0800319f 	.word	0x0800319f
 8003170:	0800319f 	.word	0x0800319f
 8003174:	08003197 	.word	0x08003197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003178:	f7fe ff70 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 800317c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800317e:	e014      	b.n	80031aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003180:	f7fe ff82 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003186:	e010      	b.n	80031aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003188:	4b4e      	ldr	r3, [pc, #312]	@ (80032c4 <UART_SetConfig+0x5c0>)
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800318c:	e00d      	b.n	80031aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318e:	f7fe fecd 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003194:	e009      	b.n	80031aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800319c:	e005      	b.n	80031aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8090 	beq.w	80032d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	4a44      	ldr	r2, [pc, #272]	@ (80032c8 <UART_SetConfig+0x5c4>)
 80031b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031bc:	461a      	mov	r2, r3
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80031c4:	005a      	lsls	r2, r3, #1
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	441a      	add	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	d916      	bls.n	800320c <UART_SetConfig+0x508>
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e4:	d212      	bcs.n	800320c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f023 030f 	bic.w	r3, r3, #15
 80031ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	8bfb      	ldrh	r3, [r7, #30]
 80031fe:	4313      	orrs	r3, r2
 8003200:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	8bfa      	ldrh	r2, [r7, #30]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	e062      	b.n	80032d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003212:	e05e      	b.n	80032d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003214:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003218:	2b08      	cmp	r3, #8
 800321a:	d828      	bhi.n	800326e <UART_SetConfig+0x56a>
 800321c:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <UART_SetConfig+0x520>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003249 	.word	0x08003249
 8003228:	08003251 	.word	0x08003251
 800322c:	08003259 	.word	0x08003259
 8003230:	0800326f 	.word	0x0800326f
 8003234:	0800325f 	.word	0x0800325f
 8003238:	0800326f 	.word	0x0800326f
 800323c:	0800326f 	.word	0x0800326f
 8003240:	0800326f 	.word	0x0800326f
 8003244:	08003267 	.word	0x08003267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7fe ff08 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 800324c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800324e:	e014      	b.n	800327a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7fe ff1a 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003256:	e010      	b.n	800327a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003258:	4b1a      	ldr	r3, [pc, #104]	@ (80032c4 <UART_SetConfig+0x5c0>)
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800325c:	e00d      	b.n	800327a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325e:	f7fe fe65 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003264:	e009      	b.n	800327a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800326c:	e005      	b.n	800327a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003278:	bf00      	nop
    }

    if (pclk != 0U)
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d028      	beq.n	80032d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	4a10      	ldr	r2, [pc, #64]	@ (80032c8 <UART_SetConfig+0x5c4>)
 8003286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328a:	461a      	mov	r2, r3
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	441a      	add	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d910      	bls.n	80032cc <UART_SetConfig+0x5c8>
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b0:	d20c      	bcs.n	80032cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	e009      	b.n	80032d2 <UART_SetConfig+0x5ce>
 80032be:	bf00      	nop
 80032c0:	40008000 	.word	0x40008000
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	08004328 	.word	0x08004328
      }
      else
      {
        ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2201      	movs	r2, #1
 80032de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2200      	movs	r2, #0
 80032ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3730      	adds	r7, #48	@ 0x30
 80032f6:	46bd      	mov	sp, r7
 80032f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01a      	beq.n	8003412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fa:	d10a      	bne.n	8003412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b098      	sub	sp, #96	@ 0x60
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003450:	f7fd fc36 	bl	8000cc0 <HAL_GetTick>
 8003454:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d12f      	bne.n	80034c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f88e 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d022      	beq.n	80034c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003492:	653b      	str	r3, [r7, #80]	@ 0x50
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800349c:	647b      	str	r3, [r7, #68]	@ 0x44
 800349e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e6      	bne.n	800347e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e063      	b.n	800358c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d149      	bne.n	8003566 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034da:	2200      	movs	r2, #0
 80034dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f857 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d03c      	beq.n	8003566 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	623b      	str	r3, [r7, #32]
   return(result);
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800350a:	633b      	str	r3, [r7, #48]	@ 0x30
 800350c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e6      	bne.n	80034ec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	60fb      	str	r3, [r7, #12]
   return(result);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800353e:	61fa      	str	r2, [r7, #28]
 8003540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	617b      	str	r3, [r7, #20]
   return(result);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e012      	b.n	800358c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3758      	adds	r7, #88	@ 0x58
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	e04f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ac:	d04b      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7fd fb87 	bl	8000cc0 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e04e      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d037      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b80      	cmp	r3, #128	@ 0x80
 80035da:	d034      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b40      	cmp	r3, #64	@ 0x40
 80035e0:	d031      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d110      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f838 	bl	800366e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2208      	movs	r2, #8
 8003602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e029      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003620:	d111      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800362a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f81e 	bl	800366e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0a0      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800366e:	b480      	push	{r7}
 8003670:	b095      	sub	sp, #84	@ 0x54
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003694:	643b      	str	r3, [r7, #64]	@ 0x40
 8003696:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800369a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e6      	bne.n	8003676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3308      	adds	r3, #8
 80036ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3308      	adds	r3, #8
 80036ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e3      	bne.n	80036a8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d118      	bne.n	800371a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0310 	bic.w	r3, r3, #16
 80036fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6979      	ldr	r1, [r7, #20]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	613b      	str	r3, [r7, #16]
   return(result);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e6      	bne.n	80036e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800372e:	bf00      	nop
 8003730:	3754      	adds	r7, #84	@ 0x54
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_UARTEx_DisableFifoMode+0x16>
 800374c:	2302      	movs	r3, #2
 800374e:	e027      	b.n	80037a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	@ 0x24
 800375c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800377e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e02d      	b.n	8003820 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	@ 0x24
 80037d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f84f 	bl	80038a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800383c:	2302      	movs	r3, #2
 800383e:	e02d      	b.n	800389c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	@ 0x24
 800384c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f811 	bl	80038a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038c4:	e031      	b.n	800392a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038c6:	2308      	movs	r3, #8
 80038c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038ca:	2308      	movs	r3, #8
 80038cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	0e5b      	lsrs	r3, r3, #25
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	0f5b      	lsrs	r3, r3, #29
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038ee:	7bbb      	ldrb	r3, [r7, #14]
 80038f0:	7b3a      	ldrb	r2, [r7, #12]
 80038f2:	4911      	ldr	r1, [pc, #68]	@ (8003938 <UARTEx_SetNbDataToProcess+0x94>)
 80038f4:	5c8a      	ldrb	r2, [r1, r2]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038fa:	7b3a      	ldrb	r2, [r7, #12]
 80038fc:	490f      	ldr	r1, [pc, #60]	@ (800393c <UARTEx_SetNbDataToProcess+0x98>)
 80038fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003900:	fb93 f3f2 	sdiv	r3, r3, r2
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	7b7a      	ldrb	r2, [r7, #13]
 8003910:	4909      	ldr	r1, [pc, #36]	@ (8003938 <UARTEx_SetNbDataToProcess+0x94>)
 8003912:	5c8a      	ldrb	r2, [r1, r2]
 8003914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003918:	7b7a      	ldrb	r2, [r7, #13]
 800391a:	4908      	ldr	r1, [pc, #32]	@ (800393c <UARTEx_SetNbDataToProcess+0x98>)
 800391c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800391e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	08004340 	.word	0x08004340
 800393c:	08004348 	.word	0x08004348

08003940 <siprintf>:
 8003940:	b40e      	push	{r1, r2, r3}
 8003942:	b500      	push	{lr}
 8003944:	b09c      	sub	sp, #112	@ 0x70
 8003946:	ab1d      	add	r3, sp, #116	@ 0x74
 8003948:	9002      	str	r0, [sp, #8]
 800394a:	9006      	str	r0, [sp, #24]
 800394c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003950:	4809      	ldr	r0, [pc, #36]	@ (8003978 <siprintf+0x38>)
 8003952:	9107      	str	r1, [sp, #28]
 8003954:	9104      	str	r1, [sp, #16]
 8003956:	4909      	ldr	r1, [pc, #36]	@ (800397c <siprintf+0x3c>)
 8003958:	f853 2b04 	ldr.w	r2, [r3], #4
 800395c:	9105      	str	r1, [sp, #20]
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	a902      	add	r1, sp, #8
 8003964:	f000 f89c 	bl	8003aa0 <_svfiprintf_r>
 8003968:	9b02      	ldr	r3, [sp, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	b01c      	add	sp, #112	@ 0x70
 8003970:	f85d eb04 	ldr.w	lr, [sp], #4
 8003974:	b003      	add	sp, #12
 8003976:	4770      	bx	lr
 8003978:	2000000c 	.word	0x2000000c
 800397c:	ffff0208 	.word	0xffff0208

08003980 <memset>:
 8003980:	4402      	add	r2, r0
 8003982:	4603      	mov	r3, r0
 8003984:	4293      	cmp	r3, r2
 8003986:	d100      	bne.n	800398a <memset+0xa>
 8003988:	4770      	bx	lr
 800398a:	f803 1b01 	strb.w	r1, [r3], #1
 800398e:	e7f9      	b.n	8003984 <memset+0x4>

08003990 <__errno>:
 8003990:	4b01      	ldr	r3, [pc, #4]	@ (8003998 <__errno+0x8>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	2000000c 	.word	0x2000000c

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4d0d      	ldr	r5, [pc, #52]	@ (80039d4 <__libc_init_array+0x38>)
 80039a0:	4c0d      	ldr	r4, [pc, #52]	@ (80039d8 <__libc_init_array+0x3c>)
 80039a2:	1b64      	subs	r4, r4, r5
 80039a4:	10a4      	asrs	r4, r4, #2
 80039a6:	2600      	movs	r6, #0
 80039a8:	42a6      	cmp	r6, r4
 80039aa:	d109      	bne.n	80039c0 <__libc_init_array+0x24>
 80039ac:	4d0b      	ldr	r5, [pc, #44]	@ (80039dc <__libc_init_array+0x40>)
 80039ae:	4c0c      	ldr	r4, [pc, #48]	@ (80039e0 <__libc_init_array+0x44>)
 80039b0:	f000 fc66 	bl	8004280 <_init>
 80039b4:	1b64      	subs	r4, r4, r5
 80039b6:	10a4      	asrs	r4, r4, #2
 80039b8:	2600      	movs	r6, #0
 80039ba:	42a6      	cmp	r6, r4
 80039bc:	d105      	bne.n	80039ca <__libc_init_array+0x2e>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c4:	4798      	blx	r3
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7ee      	b.n	80039a8 <__libc_init_array+0xc>
 80039ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ce:	4798      	blx	r3
 80039d0:	3601      	adds	r6, #1
 80039d2:	e7f2      	b.n	80039ba <__libc_init_array+0x1e>
 80039d4:	0800438c 	.word	0x0800438c
 80039d8:	0800438c 	.word	0x0800438c
 80039dc:	0800438c 	.word	0x0800438c
 80039e0:	08004390 	.word	0x08004390

080039e4 <__retarget_lock_acquire_recursive>:
 80039e4:	4770      	bx	lr

080039e6 <__retarget_lock_release_recursive>:
 80039e6:	4770      	bx	lr

080039e8 <__ssputs_r>:
 80039e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ec:	688e      	ldr	r6, [r1, #8]
 80039ee:	461f      	mov	r7, r3
 80039f0:	42be      	cmp	r6, r7
 80039f2:	680b      	ldr	r3, [r1, #0]
 80039f4:	4682      	mov	sl, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	4690      	mov	r8, r2
 80039fa:	d82d      	bhi.n	8003a58 <__ssputs_r+0x70>
 80039fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a04:	d026      	beq.n	8003a54 <__ssputs_r+0x6c>
 8003a06:	6965      	ldr	r5, [r4, #20]
 8003a08:	6909      	ldr	r1, [r1, #16]
 8003a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a0e:	eba3 0901 	sub.w	r9, r3, r1
 8003a12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a16:	1c7b      	adds	r3, r7, #1
 8003a18:	444b      	add	r3, r9
 8003a1a:	106d      	asrs	r5, r5, #1
 8003a1c:	429d      	cmp	r5, r3
 8003a1e:	bf38      	it	cc
 8003a20:	461d      	movcc	r5, r3
 8003a22:	0553      	lsls	r3, r2, #21
 8003a24:	d527      	bpl.n	8003a76 <__ssputs_r+0x8e>
 8003a26:	4629      	mov	r1, r5
 8003a28:	f000 f958 	bl	8003cdc <_malloc_r>
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	b360      	cbz	r0, 8003a8a <__ssputs_r+0xa2>
 8003a30:	6921      	ldr	r1, [r4, #16]
 8003a32:	464a      	mov	r2, r9
 8003a34:	f000 fbc4 	bl	80041c0 <memcpy>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	6126      	str	r6, [r4, #16]
 8003a46:	6165      	str	r5, [r4, #20]
 8003a48:	444e      	add	r6, r9
 8003a4a:	eba5 0509 	sub.w	r5, r5, r9
 8003a4e:	6026      	str	r6, [r4, #0]
 8003a50:	60a5      	str	r5, [r4, #8]
 8003a52:	463e      	mov	r6, r7
 8003a54:	42be      	cmp	r6, r7
 8003a56:	d900      	bls.n	8003a5a <__ssputs_r+0x72>
 8003a58:	463e      	mov	r6, r7
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	4632      	mov	r2, r6
 8003a5e:	4641      	mov	r1, r8
 8003a60:	f000 fb84 	bl	800416c <memmove>
 8003a64:	68a3      	ldr	r3, [r4, #8]
 8003a66:	1b9b      	subs	r3, r3, r6
 8003a68:	60a3      	str	r3, [r4, #8]
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	4433      	add	r3, r6
 8003a6e:	6023      	str	r3, [r4, #0]
 8003a70:	2000      	movs	r0, #0
 8003a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a76:	462a      	mov	r2, r5
 8003a78:	f000 fb4a 	bl	8004110 <_realloc_r>
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d1e0      	bne.n	8003a44 <__ssputs_r+0x5c>
 8003a82:	6921      	ldr	r1, [r4, #16]
 8003a84:	4650      	mov	r0, sl
 8003a86:	f000 fba9 	bl	80041dc <_free_r>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	f8ca 3000 	str.w	r3, [sl]
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a9c:	e7e9      	b.n	8003a72 <__ssputs_r+0x8a>
	...

08003aa0 <_svfiprintf_r>:
 8003aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa4:	4698      	mov	r8, r3
 8003aa6:	898b      	ldrh	r3, [r1, #12]
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	b09d      	sub	sp, #116	@ 0x74
 8003aac:	4607      	mov	r7, r0
 8003aae:	460d      	mov	r5, r1
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	d510      	bpl.n	8003ad6 <_svfiprintf_r+0x36>
 8003ab4:	690b      	ldr	r3, [r1, #16]
 8003ab6:	b973      	cbnz	r3, 8003ad6 <_svfiprintf_r+0x36>
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	f000 f90f 	bl	8003cdc <_malloc_r>
 8003abe:	6028      	str	r0, [r5, #0]
 8003ac0:	6128      	str	r0, [r5, #16]
 8003ac2:	b930      	cbnz	r0, 8003ad2 <_svfiprintf_r+0x32>
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003acc:	b01d      	add	sp, #116	@ 0x74
 8003ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad2:	2340      	movs	r3, #64	@ 0x40
 8003ad4:	616b      	str	r3, [r5, #20]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ada:	2320      	movs	r3, #32
 8003adc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ae4:	2330      	movs	r3, #48	@ 0x30
 8003ae6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c84 <_svfiprintf_r+0x1e4>
 8003aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003aee:	f04f 0901 	mov.w	r9, #1
 8003af2:	4623      	mov	r3, r4
 8003af4:	469a      	mov	sl, r3
 8003af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003afa:	b10a      	cbz	r2, 8003b00 <_svfiprintf_r+0x60>
 8003afc:	2a25      	cmp	r2, #37	@ 0x25
 8003afe:	d1f9      	bne.n	8003af4 <_svfiprintf_r+0x54>
 8003b00:	ebba 0b04 	subs.w	fp, sl, r4
 8003b04:	d00b      	beq.n	8003b1e <_svfiprintf_r+0x7e>
 8003b06:	465b      	mov	r3, fp
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f7ff ff6b 	bl	80039e8 <__ssputs_r>
 8003b12:	3001      	adds	r0, #1
 8003b14:	f000 80a7 	beq.w	8003c66 <_svfiprintf_r+0x1c6>
 8003b18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b1a:	445a      	add	r2, fp
 8003b1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 809f 	beq.w	8003c66 <_svfiprintf_r+0x1c6>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b32:	f10a 0a01 	add.w	sl, sl, #1
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	9307      	str	r3, [sp, #28]
 8003b3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b40:	4654      	mov	r4, sl
 8003b42:	2205      	movs	r2, #5
 8003b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b48:	484e      	ldr	r0, [pc, #312]	@ (8003c84 <_svfiprintf_r+0x1e4>)
 8003b4a:	f7fc fb59 	bl	8000200 <memchr>
 8003b4e:	9a04      	ldr	r2, [sp, #16]
 8003b50:	b9d8      	cbnz	r0, 8003b8a <_svfiprintf_r+0xea>
 8003b52:	06d0      	lsls	r0, r2, #27
 8003b54:	bf44      	itt	mi
 8003b56:	2320      	movmi	r3, #32
 8003b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b5c:	0711      	lsls	r1, r2, #28
 8003b5e:	bf44      	itt	mi
 8003b60:	232b      	movmi	r3, #43	@ 0x2b
 8003b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b66:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6c:	d015      	beq.n	8003b9a <_svfiprintf_r+0xfa>
 8003b6e:	9a07      	ldr	r2, [sp, #28]
 8003b70:	4654      	mov	r4, sl
 8003b72:	2000      	movs	r0, #0
 8003b74:	f04f 0c0a 	mov.w	ip, #10
 8003b78:	4621      	mov	r1, r4
 8003b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b7e:	3b30      	subs	r3, #48	@ 0x30
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d94b      	bls.n	8003c1c <_svfiprintf_r+0x17c>
 8003b84:	b1b0      	cbz	r0, 8003bb4 <_svfiprintf_r+0x114>
 8003b86:	9207      	str	r2, [sp, #28]
 8003b88:	e014      	b.n	8003bb4 <_svfiprintf_r+0x114>
 8003b8a:	eba0 0308 	sub.w	r3, r0, r8
 8003b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b92:	4313      	orrs	r3, r2
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	46a2      	mov	sl, r4
 8003b98:	e7d2      	b.n	8003b40 <_svfiprintf_r+0xa0>
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	1d19      	adds	r1, r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	9103      	str	r1, [sp, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bfbb      	ittet	lt
 8003ba6:	425b      	neglt	r3, r3
 8003ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8003bac:	9307      	strge	r3, [sp, #28]
 8003bae:	9307      	strlt	r3, [sp, #28]
 8003bb0:	bfb8      	it	lt
 8003bb2:	9204      	strlt	r2, [sp, #16]
 8003bb4:	7823      	ldrb	r3, [r4, #0]
 8003bb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bb8:	d10a      	bne.n	8003bd0 <_svfiprintf_r+0x130>
 8003bba:	7863      	ldrb	r3, [r4, #1]
 8003bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bbe:	d132      	bne.n	8003c26 <_svfiprintf_r+0x186>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	1d1a      	adds	r2, r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	9203      	str	r2, [sp, #12]
 8003bc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bcc:	3402      	adds	r4, #2
 8003bce:	9305      	str	r3, [sp, #20]
 8003bd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c94 <_svfiprintf_r+0x1f4>
 8003bd4:	7821      	ldrb	r1, [r4, #0]
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	4650      	mov	r0, sl
 8003bda:	f7fc fb11 	bl	8000200 <memchr>
 8003bde:	b138      	cbz	r0, 8003bf0 <_svfiprintf_r+0x150>
 8003be0:	9b04      	ldr	r3, [sp, #16]
 8003be2:	eba0 000a 	sub.w	r0, r0, sl
 8003be6:	2240      	movs	r2, #64	@ 0x40
 8003be8:	4082      	lsls	r2, r0
 8003bea:	4313      	orrs	r3, r2
 8003bec:	3401      	adds	r4, #1
 8003bee:	9304      	str	r3, [sp, #16]
 8003bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf4:	4824      	ldr	r0, [pc, #144]	@ (8003c88 <_svfiprintf_r+0x1e8>)
 8003bf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	f7fc fb00 	bl	8000200 <memchr>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d036      	beq.n	8003c72 <_svfiprintf_r+0x1d2>
 8003c04:	4b21      	ldr	r3, [pc, #132]	@ (8003c8c <_svfiprintf_r+0x1ec>)
 8003c06:	bb1b      	cbnz	r3, 8003c50 <_svfiprintf_r+0x1b0>
 8003c08:	9b03      	ldr	r3, [sp, #12]
 8003c0a:	3307      	adds	r3, #7
 8003c0c:	f023 0307 	bic.w	r3, r3, #7
 8003c10:	3308      	adds	r3, #8
 8003c12:	9303      	str	r3, [sp, #12]
 8003c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c16:	4433      	add	r3, r6
 8003c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c1a:	e76a      	b.n	8003af2 <_svfiprintf_r+0x52>
 8003c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c20:	460c      	mov	r4, r1
 8003c22:	2001      	movs	r0, #1
 8003c24:	e7a8      	b.n	8003b78 <_svfiprintf_r+0xd8>
 8003c26:	2300      	movs	r3, #0
 8003c28:	3401      	adds	r4, #1
 8003c2a:	9305      	str	r3, [sp, #20]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f04f 0c0a 	mov.w	ip, #10
 8003c32:	4620      	mov	r0, r4
 8003c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c38:	3a30      	subs	r2, #48	@ 0x30
 8003c3a:	2a09      	cmp	r2, #9
 8003c3c:	d903      	bls.n	8003c46 <_svfiprintf_r+0x1a6>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0c6      	beq.n	8003bd0 <_svfiprintf_r+0x130>
 8003c42:	9105      	str	r1, [sp, #20]
 8003c44:	e7c4      	b.n	8003bd0 <_svfiprintf_r+0x130>
 8003c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e7f0      	b.n	8003c32 <_svfiprintf_r+0x192>
 8003c50:	ab03      	add	r3, sp, #12
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	462a      	mov	r2, r5
 8003c56:	4b0e      	ldr	r3, [pc, #56]	@ (8003c90 <_svfiprintf_r+0x1f0>)
 8003c58:	a904      	add	r1, sp, #16
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	f3af 8000 	nop.w
 8003c60:	1c42      	adds	r2, r0, #1
 8003c62:	4606      	mov	r6, r0
 8003c64:	d1d6      	bne.n	8003c14 <_svfiprintf_r+0x174>
 8003c66:	89ab      	ldrh	r3, [r5, #12]
 8003c68:	065b      	lsls	r3, r3, #25
 8003c6a:	f53f af2d 	bmi.w	8003ac8 <_svfiprintf_r+0x28>
 8003c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c70:	e72c      	b.n	8003acc <_svfiprintf_r+0x2c>
 8003c72:	ab03      	add	r3, sp, #12
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	462a      	mov	r2, r5
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <_svfiprintf_r+0x1f0>)
 8003c7a:	a904      	add	r1, sp, #16
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f000 f91b 	bl	8003eb8 <_printf_i>
 8003c82:	e7ed      	b.n	8003c60 <_svfiprintf_r+0x1c0>
 8003c84:	08004350 	.word	0x08004350
 8003c88:	0800435a 	.word	0x0800435a
 8003c8c:	00000000 	.word	0x00000000
 8003c90:	080039e9 	.word	0x080039e9
 8003c94:	08004356 	.word	0x08004356

08003c98 <sbrk_aligned>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003cd8 <sbrk_aligned+0x40>)
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	6831      	ldr	r1, [r6, #0]
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	b911      	cbnz	r1, 8003caa <sbrk_aligned+0x12>
 8003ca4:	f000 fa7c 	bl	80041a0 <_sbrk_r>
 8003ca8:	6030      	str	r0, [r6, #0]
 8003caa:	4621      	mov	r1, r4
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 fa77 	bl	80041a0 <_sbrk_r>
 8003cb2:	1c43      	adds	r3, r0, #1
 8003cb4:	d103      	bne.n	8003cbe <sbrk_aligned+0x26>
 8003cb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003cba:	4620      	mov	r0, r4
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	1cc4      	adds	r4, r0, #3
 8003cc0:	f024 0403 	bic.w	r4, r4, #3
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d0f8      	beq.n	8003cba <sbrk_aligned+0x22>
 8003cc8:	1a21      	subs	r1, r4, r0
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 fa68 	bl	80041a0 <_sbrk_r>
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d1f2      	bne.n	8003cba <sbrk_aligned+0x22>
 8003cd4:	e7ef      	b.n	8003cb6 <sbrk_aligned+0x1e>
 8003cd6:	bf00      	nop
 8003cd8:	20000254 	.word	0x20000254

08003cdc <_malloc_r>:
 8003cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce0:	1ccd      	adds	r5, r1, #3
 8003ce2:	f025 0503 	bic.w	r5, r5, #3
 8003ce6:	3508      	adds	r5, #8
 8003ce8:	2d0c      	cmp	r5, #12
 8003cea:	bf38      	it	cc
 8003cec:	250c      	movcc	r5, #12
 8003cee:	2d00      	cmp	r5, #0
 8003cf0:	4606      	mov	r6, r0
 8003cf2:	db01      	blt.n	8003cf8 <_malloc_r+0x1c>
 8003cf4:	42a9      	cmp	r1, r5
 8003cf6:	d904      	bls.n	8003d02 <_malloc_r+0x26>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	6033      	str	r3, [r6, #0]
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dd8 <_malloc_r+0xfc>
 8003d06:	f000 f9f7 	bl	80040f8 <__malloc_lock>
 8003d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d0e:	461c      	mov	r4, r3
 8003d10:	bb44      	cbnz	r4, 8003d64 <_malloc_r+0x88>
 8003d12:	4629      	mov	r1, r5
 8003d14:	4630      	mov	r0, r6
 8003d16:	f7ff ffbf 	bl	8003c98 <sbrk_aligned>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	d158      	bne.n	8003dd2 <_malloc_r+0xf6>
 8003d20:	f8d8 4000 	ldr.w	r4, [r8]
 8003d24:	4627      	mov	r7, r4
 8003d26:	2f00      	cmp	r7, #0
 8003d28:	d143      	bne.n	8003db2 <_malloc_r+0xd6>
 8003d2a:	2c00      	cmp	r4, #0
 8003d2c:	d04b      	beq.n	8003dc6 <_malloc_r+0xea>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	4639      	mov	r1, r7
 8003d32:	4630      	mov	r0, r6
 8003d34:	eb04 0903 	add.w	r9, r4, r3
 8003d38:	f000 fa32 	bl	80041a0 <_sbrk_r>
 8003d3c:	4581      	cmp	r9, r0
 8003d3e:	d142      	bne.n	8003dc6 <_malloc_r+0xea>
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	1a6d      	subs	r5, r5, r1
 8003d44:	4629      	mov	r1, r5
 8003d46:	4630      	mov	r0, r6
 8003d48:	f7ff ffa6 	bl	8003c98 <sbrk_aligned>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d03a      	beq.n	8003dc6 <_malloc_r+0xea>
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	442b      	add	r3, r5
 8003d54:	6023      	str	r3, [r4, #0]
 8003d56:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	bb62      	cbnz	r2, 8003db8 <_malloc_r+0xdc>
 8003d5e:	f8c8 7000 	str.w	r7, [r8]
 8003d62:	e00f      	b.n	8003d84 <_malloc_r+0xa8>
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	1b52      	subs	r2, r2, r5
 8003d68:	d420      	bmi.n	8003dac <_malloc_r+0xd0>
 8003d6a:	2a0b      	cmp	r2, #11
 8003d6c:	d917      	bls.n	8003d9e <_malloc_r+0xc2>
 8003d6e:	1961      	adds	r1, r4, r5
 8003d70:	42a3      	cmp	r3, r4
 8003d72:	6025      	str	r5, [r4, #0]
 8003d74:	bf18      	it	ne
 8003d76:	6059      	strne	r1, [r3, #4]
 8003d78:	6863      	ldr	r3, [r4, #4]
 8003d7a:	bf08      	it	eq
 8003d7c:	f8c8 1000 	streq.w	r1, [r8]
 8003d80:	5162      	str	r2, [r4, r5]
 8003d82:	604b      	str	r3, [r1, #4]
 8003d84:	4630      	mov	r0, r6
 8003d86:	f000 f9bd 	bl	8004104 <__malloc_unlock>
 8003d8a:	f104 000b 	add.w	r0, r4, #11
 8003d8e:	1d23      	adds	r3, r4, #4
 8003d90:	f020 0007 	bic.w	r0, r0, #7
 8003d94:	1ac2      	subs	r2, r0, r3
 8003d96:	bf1c      	itt	ne
 8003d98:	1a1b      	subne	r3, r3, r0
 8003d9a:	50a3      	strne	r3, [r4, r2]
 8003d9c:	e7af      	b.n	8003cfe <_malloc_r+0x22>
 8003d9e:	6862      	ldr	r2, [r4, #4]
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	bf0c      	ite	eq
 8003da4:	f8c8 2000 	streq.w	r2, [r8]
 8003da8:	605a      	strne	r2, [r3, #4]
 8003daa:	e7eb      	b.n	8003d84 <_malloc_r+0xa8>
 8003dac:	4623      	mov	r3, r4
 8003dae:	6864      	ldr	r4, [r4, #4]
 8003db0:	e7ae      	b.n	8003d10 <_malloc_r+0x34>
 8003db2:	463c      	mov	r4, r7
 8003db4:	687f      	ldr	r7, [r7, #4]
 8003db6:	e7b6      	b.n	8003d26 <_malloc_r+0x4a>
 8003db8:	461a      	mov	r2, r3
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d1fb      	bne.n	8003db8 <_malloc_r+0xdc>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	6053      	str	r3, [r2, #4]
 8003dc4:	e7de      	b.n	8003d84 <_malloc_r+0xa8>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f000 f99a 	bl	8004104 <__malloc_unlock>
 8003dd0:	e794      	b.n	8003cfc <_malloc_r+0x20>
 8003dd2:	6005      	str	r5, [r0, #0]
 8003dd4:	e7d6      	b.n	8003d84 <_malloc_r+0xa8>
 8003dd6:	bf00      	nop
 8003dd8:	20000258 	.word	0x20000258

08003ddc <_printf_common>:
 8003ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de0:	4616      	mov	r6, r2
 8003de2:	4698      	mov	r8, r3
 8003de4:	688a      	ldr	r2, [r1, #8]
 8003de6:	690b      	ldr	r3, [r1, #16]
 8003de8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bfb8      	it	lt
 8003df0:	4613      	movlt	r3, r2
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003df8:	4607      	mov	r7, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	b10a      	cbz	r2, 8003e02 <_printf_common+0x26>
 8003dfe:	3301      	adds	r3, #1
 8003e00:	6033      	str	r3, [r6, #0]
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	0699      	lsls	r1, r3, #26
 8003e06:	bf42      	ittt	mi
 8003e08:	6833      	ldrmi	r3, [r6, #0]
 8003e0a:	3302      	addmi	r3, #2
 8003e0c:	6033      	strmi	r3, [r6, #0]
 8003e0e:	6825      	ldr	r5, [r4, #0]
 8003e10:	f015 0506 	ands.w	r5, r5, #6
 8003e14:	d106      	bne.n	8003e24 <_printf_common+0x48>
 8003e16:	f104 0a19 	add.w	sl, r4, #25
 8003e1a:	68e3      	ldr	r3, [r4, #12]
 8003e1c:	6832      	ldr	r2, [r6, #0]
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	dc26      	bgt.n	8003e72 <_printf_common+0x96>
 8003e24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	3b00      	subs	r3, #0
 8003e2c:	bf18      	it	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	0692      	lsls	r2, r2, #26
 8003e32:	d42b      	bmi.n	8003e8c <_printf_common+0xb0>
 8003e34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e38:	4641      	mov	r1, r8
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	47c8      	blx	r9
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d01e      	beq.n	8003e80 <_printf_common+0xa4>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	6922      	ldr	r2, [r4, #16]
 8003e46:	f003 0306 	and.w	r3, r3, #6
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf02      	ittt	eq
 8003e4e:	68e5      	ldreq	r5, [r4, #12]
 8003e50:	6833      	ldreq	r3, [r6, #0]
 8003e52:	1aed      	subeq	r5, r5, r3
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	bf0c      	ite	eq
 8003e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e5c:	2500      	movne	r5, #0
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bfc4      	itt	gt
 8003e62:	1a9b      	subgt	r3, r3, r2
 8003e64:	18ed      	addgt	r5, r5, r3
 8003e66:	2600      	movs	r6, #0
 8003e68:	341a      	adds	r4, #26
 8003e6a:	42b5      	cmp	r5, r6
 8003e6c:	d11a      	bne.n	8003ea4 <_printf_common+0xc8>
 8003e6e:	2000      	movs	r0, #0
 8003e70:	e008      	b.n	8003e84 <_printf_common+0xa8>
 8003e72:	2301      	movs	r3, #1
 8003e74:	4652      	mov	r2, sl
 8003e76:	4641      	mov	r1, r8
 8003e78:	4638      	mov	r0, r7
 8003e7a:	47c8      	blx	r9
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d103      	bne.n	8003e88 <_printf_common+0xac>
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e88:	3501      	adds	r5, #1
 8003e8a:	e7c6      	b.n	8003e1a <_printf_common+0x3e>
 8003e8c:	18e1      	adds	r1, r4, r3
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	2030      	movs	r0, #48	@ 0x30
 8003e92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e96:	4422      	add	r2, r4
 8003e98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	e7c7      	b.n	8003e34 <_printf_common+0x58>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c8      	blx	r9
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d0e6      	beq.n	8003e80 <_printf_common+0xa4>
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7d9      	b.n	8003e6a <_printf_common+0x8e>
	...

08003eb8 <_printf_i>:
 8003eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebc:	7e0f      	ldrb	r7, [r1, #24]
 8003ebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ec0:	2f78      	cmp	r7, #120	@ 0x78
 8003ec2:	4691      	mov	r9, r2
 8003ec4:	4680      	mov	r8, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	469a      	mov	sl, r3
 8003eca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ece:	d807      	bhi.n	8003ee0 <_printf_i+0x28>
 8003ed0:	2f62      	cmp	r7, #98	@ 0x62
 8003ed2:	d80a      	bhi.n	8003eea <_printf_i+0x32>
 8003ed4:	2f00      	cmp	r7, #0
 8003ed6:	f000 80d2 	beq.w	800407e <_printf_i+0x1c6>
 8003eda:	2f58      	cmp	r7, #88	@ 0x58
 8003edc:	f000 80b9 	beq.w	8004052 <_printf_i+0x19a>
 8003ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ee8:	e03a      	b.n	8003f60 <_printf_i+0xa8>
 8003eea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eee:	2b15      	cmp	r3, #21
 8003ef0:	d8f6      	bhi.n	8003ee0 <_printf_i+0x28>
 8003ef2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ef8 <_printf_i+0x40>)
 8003ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003f65 	.word	0x08003f65
 8003f00:	08003ee1 	.word	0x08003ee1
 8003f04:	08003ee1 	.word	0x08003ee1
 8003f08:	08003ee1 	.word	0x08003ee1
 8003f0c:	08003ee1 	.word	0x08003ee1
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003ee1 	.word	0x08003ee1
 8003f18:	08003ee1 	.word	0x08003ee1
 8003f1c:	08003ee1 	.word	0x08003ee1
 8003f20:	08003ee1 	.word	0x08003ee1
 8003f24:	08004065 	.word	0x08004065
 8003f28:	08003f8f 	.word	0x08003f8f
 8003f2c:	0800401f 	.word	0x0800401f
 8003f30:	08003ee1 	.word	0x08003ee1
 8003f34:	08003ee1 	.word	0x08003ee1
 8003f38:	08004087 	.word	0x08004087
 8003f3c:	08003ee1 	.word	0x08003ee1
 8003f40:	08003f8f 	.word	0x08003f8f
 8003f44:	08003ee1 	.word	0x08003ee1
 8003f48:	08003ee1 	.word	0x08003ee1
 8003f4c:	08004027 	.word	0x08004027
 8003f50:	6833      	ldr	r3, [r6, #0]
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6032      	str	r2, [r6, #0]
 8003f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f60:	2301      	movs	r3, #1
 8003f62:	e09d      	b.n	80040a0 <_printf_i+0x1e8>
 8003f64:	6833      	ldr	r3, [r6, #0]
 8003f66:	6820      	ldr	r0, [r4, #0]
 8003f68:	1d19      	adds	r1, r3, #4
 8003f6a:	6031      	str	r1, [r6, #0]
 8003f6c:	0606      	lsls	r6, r0, #24
 8003f6e:	d501      	bpl.n	8003f74 <_printf_i+0xbc>
 8003f70:	681d      	ldr	r5, [r3, #0]
 8003f72:	e003      	b.n	8003f7c <_printf_i+0xc4>
 8003f74:	0645      	lsls	r5, r0, #25
 8003f76:	d5fb      	bpl.n	8003f70 <_printf_i+0xb8>
 8003f78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	da03      	bge.n	8003f88 <_printf_i+0xd0>
 8003f80:	232d      	movs	r3, #45	@ 0x2d
 8003f82:	426d      	negs	r5, r5
 8003f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f88:	4859      	ldr	r0, [pc, #356]	@ (80040f0 <_printf_i+0x238>)
 8003f8a:	230a      	movs	r3, #10
 8003f8c:	e011      	b.n	8003fb2 <_printf_i+0xfa>
 8003f8e:	6821      	ldr	r1, [r4, #0]
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	0608      	lsls	r0, r1, #24
 8003f94:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f98:	d402      	bmi.n	8003fa0 <_printf_i+0xe8>
 8003f9a:	0649      	lsls	r1, r1, #25
 8003f9c:	bf48      	it	mi
 8003f9e:	b2ad      	uxthmi	r5, r5
 8003fa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fa2:	4853      	ldr	r0, [pc, #332]	@ (80040f0 <_printf_i+0x238>)
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	bf14      	ite	ne
 8003fa8:	230a      	movne	r3, #10
 8003faa:	2308      	moveq	r3, #8
 8003fac:	2100      	movs	r1, #0
 8003fae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fb2:	6866      	ldr	r6, [r4, #4]
 8003fb4:	60a6      	str	r6, [r4, #8]
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	bfa2      	ittt	ge
 8003fba:	6821      	ldrge	r1, [r4, #0]
 8003fbc:	f021 0104 	bicge.w	r1, r1, #4
 8003fc0:	6021      	strge	r1, [r4, #0]
 8003fc2:	b90d      	cbnz	r5, 8003fc8 <_printf_i+0x110>
 8003fc4:	2e00      	cmp	r6, #0
 8003fc6:	d04b      	beq.n	8004060 <_printf_i+0x1a8>
 8003fc8:	4616      	mov	r6, r2
 8003fca:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fce:	fb03 5711 	mls	r7, r3, r1, r5
 8003fd2:	5dc7      	ldrb	r7, [r0, r7]
 8003fd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fd8:	462f      	mov	r7, r5
 8003fda:	42bb      	cmp	r3, r7
 8003fdc:	460d      	mov	r5, r1
 8003fde:	d9f4      	bls.n	8003fca <_printf_i+0x112>
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d10b      	bne.n	8003ffc <_printf_i+0x144>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	07df      	lsls	r7, r3, #31
 8003fe8:	d508      	bpl.n	8003ffc <_printf_i+0x144>
 8003fea:	6923      	ldr	r3, [r4, #16]
 8003fec:	6861      	ldr	r1, [r4, #4]
 8003fee:	4299      	cmp	r1, r3
 8003ff0:	bfde      	ittt	le
 8003ff2:	2330      	movle	r3, #48	@ 0x30
 8003ff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ff8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ffc:	1b92      	subs	r2, r2, r6
 8003ffe:	6122      	str	r2, [r4, #16]
 8004000:	f8cd a000 	str.w	sl, [sp]
 8004004:	464b      	mov	r3, r9
 8004006:	aa03      	add	r2, sp, #12
 8004008:	4621      	mov	r1, r4
 800400a:	4640      	mov	r0, r8
 800400c:	f7ff fee6 	bl	8003ddc <_printf_common>
 8004010:	3001      	adds	r0, #1
 8004012:	d14a      	bne.n	80040aa <_printf_i+0x1f2>
 8004014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004018:	b004      	add	sp, #16
 800401a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	f043 0320 	orr.w	r3, r3, #32
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	4833      	ldr	r0, [pc, #204]	@ (80040f4 <_printf_i+0x23c>)
 8004028:	2778      	movs	r7, #120	@ 0x78
 800402a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	6831      	ldr	r1, [r6, #0]
 8004032:	061f      	lsls	r7, r3, #24
 8004034:	f851 5b04 	ldr.w	r5, [r1], #4
 8004038:	d402      	bmi.n	8004040 <_printf_i+0x188>
 800403a:	065f      	lsls	r7, r3, #25
 800403c:	bf48      	it	mi
 800403e:	b2ad      	uxthmi	r5, r5
 8004040:	6031      	str	r1, [r6, #0]
 8004042:	07d9      	lsls	r1, r3, #31
 8004044:	bf44      	itt	mi
 8004046:	f043 0320 	orrmi.w	r3, r3, #32
 800404a:	6023      	strmi	r3, [r4, #0]
 800404c:	b11d      	cbz	r5, 8004056 <_printf_i+0x19e>
 800404e:	2310      	movs	r3, #16
 8004050:	e7ac      	b.n	8003fac <_printf_i+0xf4>
 8004052:	4827      	ldr	r0, [pc, #156]	@ (80040f0 <_printf_i+0x238>)
 8004054:	e7e9      	b.n	800402a <_printf_i+0x172>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	f023 0320 	bic.w	r3, r3, #32
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	e7f6      	b.n	800404e <_printf_i+0x196>
 8004060:	4616      	mov	r6, r2
 8004062:	e7bd      	b.n	8003fe0 <_printf_i+0x128>
 8004064:	6833      	ldr	r3, [r6, #0]
 8004066:	6825      	ldr	r5, [r4, #0]
 8004068:	6961      	ldr	r1, [r4, #20]
 800406a:	1d18      	adds	r0, r3, #4
 800406c:	6030      	str	r0, [r6, #0]
 800406e:	062e      	lsls	r6, r5, #24
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	d501      	bpl.n	8004078 <_printf_i+0x1c0>
 8004074:	6019      	str	r1, [r3, #0]
 8004076:	e002      	b.n	800407e <_printf_i+0x1c6>
 8004078:	0668      	lsls	r0, r5, #25
 800407a:	d5fb      	bpl.n	8004074 <_printf_i+0x1bc>
 800407c:	8019      	strh	r1, [r3, #0]
 800407e:	2300      	movs	r3, #0
 8004080:	6123      	str	r3, [r4, #16]
 8004082:	4616      	mov	r6, r2
 8004084:	e7bc      	b.n	8004000 <_printf_i+0x148>
 8004086:	6833      	ldr	r3, [r6, #0]
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	6032      	str	r2, [r6, #0]
 800408c:	681e      	ldr	r6, [r3, #0]
 800408e:	6862      	ldr	r2, [r4, #4]
 8004090:	2100      	movs	r1, #0
 8004092:	4630      	mov	r0, r6
 8004094:	f7fc f8b4 	bl	8000200 <memchr>
 8004098:	b108      	cbz	r0, 800409e <_printf_i+0x1e6>
 800409a:	1b80      	subs	r0, r0, r6
 800409c:	6060      	str	r0, [r4, #4]
 800409e:	6863      	ldr	r3, [r4, #4]
 80040a0:	6123      	str	r3, [r4, #16]
 80040a2:	2300      	movs	r3, #0
 80040a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040a8:	e7aa      	b.n	8004000 <_printf_i+0x148>
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	4632      	mov	r2, r6
 80040ae:	4649      	mov	r1, r9
 80040b0:	4640      	mov	r0, r8
 80040b2:	47d0      	blx	sl
 80040b4:	3001      	adds	r0, #1
 80040b6:	d0ad      	beq.n	8004014 <_printf_i+0x15c>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	079b      	lsls	r3, r3, #30
 80040bc:	d413      	bmi.n	80040e6 <_printf_i+0x22e>
 80040be:	68e0      	ldr	r0, [r4, #12]
 80040c0:	9b03      	ldr	r3, [sp, #12]
 80040c2:	4298      	cmp	r0, r3
 80040c4:	bfb8      	it	lt
 80040c6:	4618      	movlt	r0, r3
 80040c8:	e7a6      	b.n	8004018 <_printf_i+0x160>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4632      	mov	r2, r6
 80040ce:	4649      	mov	r1, r9
 80040d0:	4640      	mov	r0, r8
 80040d2:	47d0      	blx	sl
 80040d4:	3001      	adds	r0, #1
 80040d6:	d09d      	beq.n	8004014 <_printf_i+0x15c>
 80040d8:	3501      	adds	r5, #1
 80040da:	68e3      	ldr	r3, [r4, #12]
 80040dc:	9903      	ldr	r1, [sp, #12]
 80040de:	1a5b      	subs	r3, r3, r1
 80040e0:	42ab      	cmp	r3, r5
 80040e2:	dcf2      	bgt.n	80040ca <_printf_i+0x212>
 80040e4:	e7eb      	b.n	80040be <_printf_i+0x206>
 80040e6:	2500      	movs	r5, #0
 80040e8:	f104 0619 	add.w	r6, r4, #25
 80040ec:	e7f5      	b.n	80040da <_printf_i+0x222>
 80040ee:	bf00      	nop
 80040f0:	08004361 	.word	0x08004361
 80040f4:	08004372 	.word	0x08004372

080040f8 <__malloc_lock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	@ (8004100 <__malloc_lock+0x8>)
 80040fa:	f7ff bc73 	b.w	80039e4 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	20000250 	.word	0x20000250

08004104 <__malloc_unlock>:
 8004104:	4801      	ldr	r0, [pc, #4]	@ (800410c <__malloc_unlock+0x8>)
 8004106:	f7ff bc6e 	b.w	80039e6 <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	20000250 	.word	0x20000250

08004110 <_realloc_r>:
 8004110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004114:	4680      	mov	r8, r0
 8004116:	4615      	mov	r5, r2
 8004118:	460c      	mov	r4, r1
 800411a:	b921      	cbnz	r1, 8004126 <_realloc_r+0x16>
 800411c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	4611      	mov	r1, r2
 8004122:	f7ff bddb 	b.w	8003cdc <_malloc_r>
 8004126:	b92a      	cbnz	r2, 8004134 <_realloc_r+0x24>
 8004128:	f000 f858 	bl	80041dc <_free_r>
 800412c:	2400      	movs	r4, #0
 800412e:	4620      	mov	r0, r4
 8004130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004134:	f000 f89c 	bl	8004270 <_malloc_usable_size_r>
 8004138:	4285      	cmp	r5, r0
 800413a:	4606      	mov	r6, r0
 800413c:	d802      	bhi.n	8004144 <_realloc_r+0x34>
 800413e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004142:	d8f4      	bhi.n	800412e <_realloc_r+0x1e>
 8004144:	4629      	mov	r1, r5
 8004146:	4640      	mov	r0, r8
 8004148:	f7ff fdc8 	bl	8003cdc <_malloc_r>
 800414c:	4607      	mov	r7, r0
 800414e:	2800      	cmp	r0, #0
 8004150:	d0ec      	beq.n	800412c <_realloc_r+0x1c>
 8004152:	42b5      	cmp	r5, r6
 8004154:	462a      	mov	r2, r5
 8004156:	4621      	mov	r1, r4
 8004158:	bf28      	it	cs
 800415a:	4632      	movcs	r2, r6
 800415c:	f000 f830 	bl	80041c0 <memcpy>
 8004160:	4621      	mov	r1, r4
 8004162:	4640      	mov	r0, r8
 8004164:	f000 f83a 	bl	80041dc <_free_r>
 8004168:	463c      	mov	r4, r7
 800416a:	e7e0      	b.n	800412e <_realloc_r+0x1e>

0800416c <memmove>:
 800416c:	4288      	cmp	r0, r1
 800416e:	b510      	push	{r4, lr}
 8004170:	eb01 0402 	add.w	r4, r1, r2
 8004174:	d902      	bls.n	800417c <memmove+0x10>
 8004176:	4284      	cmp	r4, r0
 8004178:	4623      	mov	r3, r4
 800417a:	d807      	bhi.n	800418c <memmove+0x20>
 800417c:	1e43      	subs	r3, r0, #1
 800417e:	42a1      	cmp	r1, r4
 8004180:	d008      	beq.n	8004194 <memmove+0x28>
 8004182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800418a:	e7f8      	b.n	800417e <memmove+0x12>
 800418c:	4402      	add	r2, r0
 800418e:	4601      	mov	r1, r0
 8004190:	428a      	cmp	r2, r1
 8004192:	d100      	bne.n	8004196 <memmove+0x2a>
 8004194:	bd10      	pop	{r4, pc}
 8004196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800419a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800419e:	e7f7      	b.n	8004190 <memmove+0x24>

080041a0 <_sbrk_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d06      	ldr	r5, [pc, #24]	@ (80041bc <_sbrk_r+0x1c>)
 80041a4:	2300      	movs	r3, #0
 80041a6:	4604      	mov	r4, r0
 80041a8:	4608      	mov	r0, r1
 80041aa:	602b      	str	r3, [r5, #0]
 80041ac:	f7fc fcae 	bl	8000b0c <_sbrk>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	d102      	bne.n	80041ba <_sbrk_r+0x1a>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	b103      	cbz	r3, 80041ba <_sbrk_r+0x1a>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	2000025c 	.word	0x2000025c

080041c0 <memcpy>:
 80041c0:	440a      	add	r2, r1
 80041c2:	4291      	cmp	r1, r2
 80041c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80041c8:	d100      	bne.n	80041cc <memcpy+0xc>
 80041ca:	4770      	bx	lr
 80041cc:	b510      	push	{r4, lr}
 80041ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041d6:	4291      	cmp	r1, r2
 80041d8:	d1f9      	bne.n	80041ce <memcpy+0xe>
 80041da:	bd10      	pop	{r4, pc}

080041dc <_free_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4605      	mov	r5, r0
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d041      	beq.n	8004268 <_free_r+0x8c>
 80041e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e8:	1f0c      	subs	r4, r1, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	18e4      	addlt	r4, r4, r3
 80041f0:	f7ff ff82 	bl	80040f8 <__malloc_lock>
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <_free_r+0x90>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	b933      	cbnz	r3, 8004208 <_free_r+0x2c>
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6014      	str	r4, [r2, #0]
 80041fe:	4628      	mov	r0, r5
 8004200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004204:	f7ff bf7e 	b.w	8004104 <__malloc_unlock>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d908      	bls.n	800421e <_free_r+0x42>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf01      	itttt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	1809      	addeq	r1, r1, r0
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	e7ed      	b.n	80041fa <_free_r+0x1e>
 800421e:	461a      	mov	r2, r3
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b10b      	cbz	r3, 8004228 <_free_r+0x4c>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d9fa      	bls.n	800421e <_free_r+0x42>
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	1850      	adds	r0, r2, r1
 800422c:	42a0      	cmp	r0, r4
 800422e:	d10b      	bne.n	8004248 <_free_r+0x6c>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	4401      	add	r1, r0
 8004234:	1850      	adds	r0, r2, r1
 8004236:	4283      	cmp	r3, r0
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	d1e0      	bne.n	80041fe <_free_r+0x22>
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6053      	str	r3, [r2, #4]
 8004242:	4408      	add	r0, r1
 8004244:	6010      	str	r0, [r2, #0]
 8004246:	e7da      	b.n	80041fe <_free_r+0x22>
 8004248:	d902      	bls.n	8004250 <_free_r+0x74>
 800424a:	230c      	movs	r3, #12
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7d6      	b.n	80041fe <_free_r+0x22>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	bf04      	itt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	bf04      	itt	eq
 8004260:	1809      	addeq	r1, r1, r0
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	6054      	str	r4, [r2, #4]
 8004266:	e7ca      	b.n	80041fe <_free_r+0x22>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	bf00      	nop
 800426c:	20000258 	.word	0x20000258

08004270 <_malloc_usable_size_r>:
 8004270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004274:	1f18      	subs	r0, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	bfbc      	itt	lt
 800427a:	580b      	ldrlt	r3, [r1, r0]
 800427c:	18c0      	addlt	r0, r0, r3
 800427e:	4770      	bx	lr

08004280 <_init>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr

0800428c <_fini>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr
