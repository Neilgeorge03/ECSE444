
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150b8  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080250b8  080250b8  000250b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025610  08025610  000261d4  2**0
                  CONTENTS
  4 .ARM          00000008  08025610  08025610  00025610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025618  08025618  000261d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025618  08025618  00025618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802561c  0802561c  0002561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08025620  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001d4  080257f4  000261d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080257f4  00026344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000261d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f71  00000000  00000000  00026204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ec  00000000  00000000  0002d175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a1  00000000  00000000  0002f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a64f  00000000  00000000  0002f5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bbc  00000000  00000000  00059c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fda34  00000000  00000000  000617fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0015f230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ac  00000000  00000000  0015f2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00161a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000063f  00000000  00000000  00161b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  00162143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	200001d4 	.word	0x200001d4
 801001c:	00000000 	.word	0x00000000
 8010020:	080250a0 	.word	0x080250a0

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	200001d8 	.word	0x200001d8
 801003c:	080250a0 	.word	0x080250a0
	...

08020000 <KalmanFilter>:
.align 16

.global KalmanFilter

KalmanFilter:
	push {lr}
 8020000:	b500      	push	{lr}
    vpush {s16-s21}
 8020002:	ed2d 8a06 	vpush	{s16-s21}
    // s0 contains measurement
    vldr s16, [r0, #0]		// q
 8020006:	ed90 8a00 	vldr	s16, [r0]
    vldr s17, [r0, #4]		// r
 802000a:	edd0 8a01 	vldr	s17, [r0, #4]
    vldr s18, [r0, #8]		// x
 802000e:	ed90 9a02 	vldr	s18, [r0, #8]
    vldr s19, [r0, #12]		// p
 8020012:	edd0 9a03 	vldr	s19, [r0, #12]
    vldr s20, [r0, #16]		// k
 8020016:	ed90 aa04 	vldr	s20, [r0, #16]
    vsub.f32 s21, s21, s21	// -> 0.0
 802001a:	ee7a aaea 	vsub.f32	s21, s21, s21

    vadd.f32 s19, s19, s16	// self.p = self.p + self.q
 802001e:	ee79 9a88 	vadd.f32	s19, s19, s16
	vmrs r1, FPSCR
 8020022:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020026:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802002a:	d140      	bne.n	80200ae <overflow_handler>

    vadd.f32 s20, s19, s17	// self.k = self.p + self.r
 802002c:	ee39 aaa8 	vadd.f32	s20, s19, s17
    vmrs r1, FPSCR
 8020030:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020034:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 8020038:	d139      	bne.n	80200ae <overflow_handler>

    // handle zero div error (see epsilon method)
    vcmp.f32 s20, #0
 802003a:	eeb5 aa40 	vcmp.f32	s20, #0.0
    vmrs APSR_nzcv, FPSCR
 802003e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    beq div_by_zero_handler
 8020042:	d031      	beq.n	80200a8 <div_by_zero_handler>


    vdiv.f32 s20, s19, s20 // self.k = selp.p / self.k
 8020044:	ee89 aa8a 	vdiv.f32	s20, s19, s20
    vmrs r1, FPSCR
 8020048:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 802004c:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 8020050:	d12d      	bne.n	80200ae <overflow_handler>

    vsub.f32 s21, s0, s18  // y = measurement - self.x
 8020052:	ee70 aa49 	vsub.f32	s21, s0, s18
    vmrs r1, FPSCR
 8020056:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 802005a:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802005e:	d126      	bne.n	80200ae <overflow_handler>

    vmla.f32 s18, s20, s21 // self.x = self.x + self.k * y
 8020060:	ee0a 9a2a 	vmla.f32	s18, s20, s21
    vmrs r1, FPSCR
 8020064:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020068:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802006c:	d11f      	bne.n	80200ae <overflow_handler>

    vmov.f32 s21, #1.0 // y = 1 check if load 1 works
 802006e:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
    vsub.f32 s21, s21, s20 // y = 1 - self.k
 8020072:	ee7a aaca 	vsub.f32	s21, s21, s20
    vmrs r1, FPSCR
 8020076:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 802007a:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802007e:	d116      	bne.n	80200ae <overflow_handler>

    vmul.f32 s19, s21, s19 // self.p = y * self.p
 8020080:	ee6a 9aa9 	vmul.f32	s19, s21, s19
    vmrs r1, FPSCR
 8020084:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020088:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802008c:	d10f      	bne.n	80200ae <overflow_handler>

    vstr s16, [r0]      // q
 802008e:	ed80 8a00 	vstr	s16, [r0]
    vstr s17, [r0, #4]  // r
 8020092:	edc0 8a01 	vstr	s17, [r0, #4]
    vstr s18, [r0, #8]  // x
 8020096:	ed80 9a02 	vstr	s18, [r0, #8]
    vstr s19, [r0, #12] // p
 802009a:	edc0 9a03 	vstr	s19, [r0, #12]
    vstr s20, [r0, #16] // k
 802009e:	ed80 aa04 	vstr	s20, [r0, #16]
    mov r0, #0 			// If success, return code 0
 80200a2:	f04f 0000 	mov.w	r0, #0
    B return
 80200a6:	e005      	b.n	80200b4 <return>

080200a8 <div_by_zero_handler>:

div_by_zero_handler:
	mov r0, #1
 80200a8:	f04f 0001 	mov.w	r0, #1
	B return
 80200ac:	e002      	b.n	80200b4 <return>

080200ae <overflow_handler>:

overflow_handler:
	mov r0, #2
 80200ae:	f04f 0002 	mov.w	r0, #2
	B return
 80200b2:	e7ff      	b.n	80200b4 <return>

080200b4 <return>:

return:
	vpop {s16-s21}
 80200b4:	ecbd 8a06 	vpop	{s16-s21}
    bx lr // return to C
 80200b8:	4770      	bx	lr
 80200ba:	bf00      	nop
 80200bc:	0000      	movs	r0, r0
	...

080200c0 <memchr>:
 80200c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80200c4:	2a10      	cmp	r2, #16
 80200c6:	db2b      	blt.n	8020120 <memchr+0x60>
 80200c8:	f010 0f07 	tst.w	r0, #7
 80200cc:	d008      	beq.n	80200e0 <memchr+0x20>
 80200ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200d2:	3a01      	subs	r2, #1
 80200d4:	428b      	cmp	r3, r1
 80200d6:	d02d      	beq.n	8020134 <memchr+0x74>
 80200d8:	f010 0f07 	tst.w	r0, #7
 80200dc:	b342      	cbz	r2, 8020130 <memchr+0x70>
 80200de:	d1f6      	bne.n	80200ce <memchr+0xe>
 80200e0:	b4f0      	push	{r4, r5, r6, r7}
 80200e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80200e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80200ea:	f022 0407 	bic.w	r4, r2, #7
 80200ee:	f07f 0700 	mvns.w	r7, #0
 80200f2:	2300      	movs	r3, #0
 80200f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80200f8:	3c08      	subs	r4, #8
 80200fa:	ea85 0501 	eor.w	r5, r5, r1
 80200fe:	ea86 0601 	eor.w	r6, r6, r1
 8020102:	fa85 f547 	uadd8	r5, r5, r7
 8020106:	faa3 f587 	sel	r5, r3, r7
 802010a:	fa86 f647 	uadd8	r6, r6, r7
 802010e:	faa5 f687 	sel	r6, r5, r7
 8020112:	b98e      	cbnz	r6, 8020138 <memchr+0x78>
 8020114:	d1ee      	bne.n	80200f4 <memchr+0x34>
 8020116:	bcf0      	pop	{r4, r5, r6, r7}
 8020118:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802011c:	f002 0207 	and.w	r2, r2, #7
 8020120:	b132      	cbz	r2, 8020130 <memchr+0x70>
 8020122:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020126:	3a01      	subs	r2, #1
 8020128:	ea83 0301 	eor.w	r3, r3, r1
 802012c:	b113      	cbz	r3, 8020134 <memchr+0x74>
 802012e:	d1f8      	bne.n	8020122 <memchr+0x62>
 8020130:	2000      	movs	r0, #0
 8020132:	4770      	bx	lr
 8020134:	3801      	subs	r0, #1
 8020136:	4770      	bx	lr
 8020138:	2d00      	cmp	r5, #0
 802013a:	bf06      	itte	eq
 802013c:	4635      	moveq	r5, r6
 802013e:	3803      	subeq	r0, #3
 8020140:	3807      	subne	r0, #7
 8020142:	f015 0f01 	tst.w	r5, #1
 8020146:	d107      	bne.n	8020158 <memchr+0x98>
 8020148:	3001      	adds	r0, #1
 802014a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802014e:	bf02      	ittt	eq
 8020150:	3001      	addeq	r0, #1
 8020152:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020156:	3001      	addeq	r0, #1
 8020158:	bcf0      	pop	{r4, r5, r6, r7}
 802015a:	3801      	subs	r0, #1
 802015c:	4770      	bx	lr
 802015e:	bf00      	nop

08020160 <strlen>:
 8020160:	4603      	mov	r3, r0
 8020162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020166:	2a00      	cmp	r2, #0
 8020168:	d1fb      	bne.n	8020162 <strlen+0x2>
 802016a:	1a18      	subs	r0, r3, r0
 802016c:	3801      	subs	r0, #1
 802016e:	4770      	bx	lr

08020170 <__aeabi_drsub>:
 8020170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8020174:	e002      	b.n	802017c <__adddf3>
 8020176:	bf00      	nop

08020178 <__aeabi_dsub>:
 8020178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0802017c <__adddf3>:
 802017c:	b530      	push	{r4, r5, lr}
 802017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020186:	ea94 0f05 	teq	r4, r5
 802018a:	bf08      	it	eq
 802018c:	ea90 0f02 	teqeq	r0, r2
 8020190:	bf1f      	itttt	ne
 8020192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020196:	ea55 0c02 	orrsne.w	ip, r5, r2
 802019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80201a2:	f000 80e2 	beq.w	802036a <__adddf3+0x1ee>
 80201a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80201aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80201ae:	bfb8      	it	lt
 80201b0:	426d      	neglt	r5, r5
 80201b2:	dd0c      	ble.n	80201ce <__adddf3+0x52>
 80201b4:	442c      	add	r4, r5
 80201b6:	ea80 0202 	eor.w	r2, r0, r2
 80201ba:	ea81 0303 	eor.w	r3, r1, r3
 80201be:	ea82 0000 	eor.w	r0, r2, r0
 80201c2:	ea83 0101 	eor.w	r1, r3, r1
 80201c6:	ea80 0202 	eor.w	r2, r0, r2
 80201ca:	ea81 0303 	eor.w	r3, r1, r3
 80201ce:	2d36      	cmp	r5, #54	@ 0x36
 80201d0:	bf88      	it	hi
 80201d2:	bd30      	pophi	{r4, r5, pc}
 80201d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80201d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80201dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80201e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80201e4:	d002      	beq.n	80201ec <__adddf3+0x70>
 80201e6:	4240      	negs	r0, r0
 80201e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80201ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80201f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80201f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80201f8:	d002      	beq.n	8020200 <__adddf3+0x84>
 80201fa:	4252      	negs	r2, r2
 80201fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020200:	ea94 0f05 	teq	r4, r5
 8020204:	f000 80a7 	beq.w	8020356 <__adddf3+0x1da>
 8020208:	f1a4 0401 	sub.w	r4, r4, #1
 802020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020210:	db0d      	blt.n	802022e <__adddf3+0xb2>
 8020212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020216:	fa22 f205 	lsr.w	r2, r2, r5
 802021a:	1880      	adds	r0, r0, r2
 802021c:	f141 0100 	adc.w	r1, r1, #0
 8020220:	fa03 f20e 	lsl.w	r2, r3, lr
 8020224:	1880      	adds	r0, r0, r2
 8020226:	fa43 f305 	asr.w	r3, r3, r5
 802022a:	4159      	adcs	r1, r3
 802022c:	e00e      	b.n	802024c <__adddf3+0xd0>
 802022e:	f1a5 0520 	sub.w	r5, r5, #32
 8020232:	f10e 0e20 	add.w	lr, lr, #32
 8020236:	2a01      	cmp	r2, #1
 8020238:	fa03 fc0e 	lsl.w	ip, r3, lr
 802023c:	bf28      	it	cs
 802023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020242:	fa43 f305 	asr.w	r3, r3, r5
 8020246:	18c0      	adds	r0, r0, r3
 8020248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020250:	d507      	bpl.n	8020262 <__adddf3+0xe6>
 8020252:	f04f 0e00 	mov.w	lr, #0
 8020256:	f1dc 0c00 	rsbs	ip, ip, #0
 802025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8020266:	d31b      	bcc.n	80202a0 <__adddf3+0x124>
 8020268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 802026c:	d30c      	bcc.n	8020288 <__adddf3+0x10c>
 802026e:	0849      	lsrs	r1, r1, #1
 8020270:	ea5f 0030 	movs.w	r0, r0, rrx
 8020274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020278:	f104 0401 	add.w	r4, r4, #1
 802027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8020284:	f080 809a 	bcs.w	80203bc <__adddf3+0x240>
 8020288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 802028c:	bf08      	it	eq
 802028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020292:	f150 0000 	adcs.w	r0, r0, #0
 8020296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802029a:	ea41 0105 	orr.w	r1, r1, r5
 802029e:	bd30      	pop	{r4, r5, pc}
 80202a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80202a4:	4140      	adcs	r0, r0
 80202a6:	eb41 0101 	adc.w	r1, r1, r1
 80202aa:	3c01      	subs	r4, #1
 80202ac:	bf28      	it	cs
 80202ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80202b2:	d2e9      	bcs.n	8020288 <__adddf3+0x10c>
 80202b4:	f091 0f00 	teq	r1, #0
 80202b8:	bf04      	itt	eq
 80202ba:	4601      	moveq	r1, r0
 80202bc:	2000      	moveq	r0, #0
 80202be:	fab1 f381 	clz	r3, r1
 80202c2:	bf08      	it	eq
 80202c4:	3320      	addeq	r3, #32
 80202c6:	f1a3 030b 	sub.w	r3, r3, #11
 80202ca:	f1b3 0220 	subs.w	r2, r3, #32
 80202ce:	da0c      	bge.n	80202ea <__adddf3+0x16e>
 80202d0:	320c      	adds	r2, #12
 80202d2:	dd08      	ble.n	80202e6 <__adddf3+0x16a>
 80202d4:	f102 0c14 	add.w	ip, r2, #20
 80202d8:	f1c2 020c 	rsb	r2, r2, #12
 80202dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80202e0:	fa21 f102 	lsr.w	r1, r1, r2
 80202e4:	e00c      	b.n	8020300 <__adddf3+0x184>
 80202e6:	f102 0214 	add.w	r2, r2, #20
 80202ea:	bfd8      	it	le
 80202ec:	f1c2 0c20 	rsble	ip, r2, #32
 80202f0:	fa01 f102 	lsl.w	r1, r1, r2
 80202f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80202f8:	bfdc      	itt	le
 80202fa:	ea41 010c 	orrle.w	r1, r1, ip
 80202fe:	4090      	lslle	r0, r2
 8020300:	1ae4      	subs	r4, r4, r3
 8020302:	bfa2      	ittt	ge
 8020304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020308:	4329      	orrge	r1, r5
 802030a:	bd30      	popge	{r4, r5, pc}
 802030c:	ea6f 0404 	mvn.w	r4, r4
 8020310:	3c1f      	subs	r4, #31
 8020312:	da1c      	bge.n	802034e <__adddf3+0x1d2>
 8020314:	340c      	adds	r4, #12
 8020316:	dc0e      	bgt.n	8020336 <__adddf3+0x1ba>
 8020318:	f104 0414 	add.w	r4, r4, #20
 802031c:	f1c4 0220 	rsb	r2, r4, #32
 8020320:	fa20 f004 	lsr.w	r0, r0, r4
 8020324:	fa01 f302 	lsl.w	r3, r1, r2
 8020328:	ea40 0003 	orr.w	r0, r0, r3
 802032c:	fa21 f304 	lsr.w	r3, r1, r4
 8020330:	ea45 0103 	orr.w	r1, r5, r3
 8020334:	bd30      	pop	{r4, r5, pc}
 8020336:	f1c4 040c 	rsb	r4, r4, #12
 802033a:	f1c4 0220 	rsb	r2, r4, #32
 802033e:	fa20 f002 	lsr.w	r0, r0, r2
 8020342:	fa01 f304 	lsl.w	r3, r1, r4
 8020346:	ea40 0003 	orr.w	r0, r0, r3
 802034a:	4629      	mov	r1, r5
 802034c:	bd30      	pop	{r4, r5, pc}
 802034e:	fa21 f004 	lsr.w	r0, r1, r4
 8020352:	4629      	mov	r1, r5
 8020354:	bd30      	pop	{r4, r5, pc}
 8020356:	f094 0f00 	teq	r4, #0
 802035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 802035e:	bf06      	itte	eq
 8020360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8020364:	3401      	addeq	r4, #1
 8020366:	3d01      	subne	r5, #1
 8020368:	e74e      	b.n	8020208 <__adddf3+0x8c>
 802036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802036e:	bf18      	it	ne
 8020370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020374:	d029      	beq.n	80203ca <__adddf3+0x24e>
 8020376:	ea94 0f05 	teq	r4, r5
 802037a:	bf08      	it	eq
 802037c:	ea90 0f02 	teqeq	r0, r2
 8020380:	d005      	beq.n	802038e <__adddf3+0x212>
 8020382:	ea54 0c00 	orrs.w	ip, r4, r0
 8020386:	bf04      	itt	eq
 8020388:	4619      	moveq	r1, r3
 802038a:	4610      	moveq	r0, r2
 802038c:	bd30      	pop	{r4, r5, pc}
 802038e:	ea91 0f03 	teq	r1, r3
 8020392:	bf1e      	ittt	ne
 8020394:	2100      	movne	r1, #0
 8020396:	2000      	movne	r0, #0
 8020398:	bd30      	popne	{r4, r5, pc}
 802039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802039e:	d105      	bne.n	80203ac <__adddf3+0x230>
 80203a0:	0040      	lsls	r0, r0, #1
 80203a2:	4149      	adcs	r1, r1
 80203a4:	bf28      	it	cs
 80203a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80203aa:	bd30      	pop	{r4, r5, pc}
 80203ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80203b0:	bf3c      	itt	cc
 80203b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80203b6:	bd30      	popcc	{r4, r5, pc}
 80203b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80203bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80203c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80203c4:	f04f 0000 	mov.w	r0, #0
 80203c8:	bd30      	pop	{r4, r5, pc}
 80203ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80203ce:	bf1a      	itte	ne
 80203d0:	4619      	movne	r1, r3
 80203d2:	4610      	movne	r0, r2
 80203d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80203d8:	bf1c      	itt	ne
 80203da:	460b      	movne	r3, r1
 80203dc:	4602      	movne	r2, r0
 80203de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80203e2:	bf06      	itte	eq
 80203e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80203e8:	ea91 0f03 	teqeq	r1, r3
 80203ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80203f0:	bd30      	pop	{r4, r5, pc}
 80203f2:	bf00      	nop

080203f4 <__aeabi_ui2d>:
 80203f4:	f090 0f00 	teq	r0, #0
 80203f8:	bf04      	itt	eq
 80203fa:	2100      	moveq	r1, #0
 80203fc:	4770      	bxeq	lr
 80203fe:	b530      	push	{r4, r5, lr}
 8020400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020408:	f04f 0500 	mov.w	r5, #0
 802040c:	f04f 0100 	mov.w	r1, #0
 8020410:	e750      	b.n	80202b4 <__adddf3+0x138>
 8020412:	bf00      	nop

08020414 <__aeabi_i2d>:
 8020414:	f090 0f00 	teq	r0, #0
 8020418:	bf04      	itt	eq
 802041a:	2100      	moveq	r1, #0
 802041c:	4770      	bxeq	lr
 802041e:	b530      	push	{r4, r5, lr}
 8020420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 802042c:	bf48      	it	mi
 802042e:	4240      	negmi	r0, r0
 8020430:	f04f 0100 	mov.w	r1, #0
 8020434:	e73e      	b.n	80202b4 <__adddf3+0x138>
 8020436:	bf00      	nop

08020438 <__aeabi_f2d>:
 8020438:	0042      	lsls	r2, r0, #1
 802043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020446:	bf1f      	itttt	ne
 8020448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 802044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8020450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8020454:	4770      	bxne	lr
 8020456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 802045a:	bf08      	it	eq
 802045c:	4770      	bxeq	lr
 802045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8020462:	bf04      	itt	eq
 8020464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8020468:	4770      	bxeq	lr
 802046a:	b530      	push	{r4, r5, lr}
 802046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8020470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020478:	e71c      	b.n	80202b4 <__adddf3+0x138>
 802047a:	bf00      	nop

0802047c <__aeabi_ul2d>:
 802047c:	ea50 0201 	orrs.w	r2, r0, r1
 8020480:	bf08      	it	eq
 8020482:	4770      	bxeq	lr
 8020484:	b530      	push	{r4, r5, lr}
 8020486:	f04f 0500 	mov.w	r5, #0
 802048a:	e00a      	b.n	80204a2 <__aeabi_l2d+0x16>

0802048c <__aeabi_l2d>:
 802048c:	ea50 0201 	orrs.w	r2, r0, r1
 8020490:	bf08      	it	eq
 8020492:	4770      	bxeq	lr
 8020494:	b530      	push	{r4, r5, lr}
 8020496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 802049a:	d502      	bpl.n	80204a2 <__aeabi_l2d+0x16>
 802049c:	4240      	negs	r0, r0
 802049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80204a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80204a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80204aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80204ae:	f43f aed8 	beq.w	8020262 <__adddf3+0xe6>
 80204b2:	f04f 0203 	mov.w	r2, #3
 80204b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80204ba:	bf18      	it	ne
 80204bc:	3203      	addne	r2, #3
 80204be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80204c2:	bf18      	it	ne
 80204c4:	3203      	addne	r2, #3
 80204c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80204ca:	f1c2 0320 	rsb	r3, r2, #32
 80204ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80204d2:	fa20 f002 	lsr.w	r0, r0, r2
 80204d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80204da:	ea40 000e 	orr.w	r0, r0, lr
 80204de:	fa21 f102 	lsr.w	r1, r1, r2
 80204e2:	4414      	add	r4, r2
 80204e4:	e6bd      	b.n	8020262 <__adddf3+0xe6>
 80204e6:	bf00      	nop

080204e8 <__aeabi_dmul>:
 80204e8:	b570      	push	{r4, r5, r6, lr}
 80204ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80204ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80204f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80204f6:	bf1d      	ittte	ne
 80204f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80204fc:	ea94 0f0c 	teqne	r4, ip
 8020500:	ea95 0f0c 	teqne	r5, ip
 8020504:	f000 f8de 	bleq	80206c4 <__aeabi_dmul+0x1dc>
 8020508:	442c      	add	r4, r5
 802050a:	ea81 0603 	eor.w	r6, r1, r3
 802050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802051a:	bf18      	it	ne
 802051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020528:	d038      	beq.n	802059c <__aeabi_dmul+0xb4>
 802052a:	fba0 ce02 	umull	ip, lr, r0, r2
 802052e:	f04f 0500 	mov.w	r5, #0
 8020532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020536:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 802053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802053e:	f04f 0600 	mov.w	r6, #0
 8020542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020546:	f09c 0f00 	teq	ip, #0
 802054a:	bf18      	it	ne
 802054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020550:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8020554:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8020558:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 802055c:	d204      	bcs.n	8020568 <__aeabi_dmul+0x80>
 802055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020562:	416d      	adcs	r5, r5
 8020564:	eb46 0606 	adc.w	r6, r6, r6
 8020568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802057c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8020580:	bf88      	it	hi
 8020582:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020586:	d81e      	bhi.n	80205c6 <__aeabi_dmul+0xde>
 8020588:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 802058c:	bf08      	it	eq
 802058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020592:	f150 0000 	adcs.w	r0, r0, #0
 8020596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802059a:	bd70      	pop	{r4, r5, r6, pc}
 802059c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80205a0:	ea46 0101 	orr.w	r1, r6, r1
 80205a4:	ea40 0002 	orr.w	r0, r0, r2
 80205a8:	ea81 0103 	eor.w	r1, r1, r3
 80205ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80205b0:	bfc2      	ittt	gt
 80205b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80205b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80205ba:	bd70      	popgt	{r4, r5, r6, pc}
 80205bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80205c0:	f04f 0e00 	mov.w	lr, #0
 80205c4:	3c01      	subs	r4, #1
 80205c6:	f300 80ab 	bgt.w	8020720 <__aeabi_dmul+0x238>
 80205ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80205ce:	bfde      	ittt	le
 80205d0:	2000      	movle	r0, #0
 80205d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80205d6:	bd70      	pople	{r4, r5, r6, pc}
 80205d8:	f1c4 0400 	rsb	r4, r4, #0
 80205dc:	3c20      	subs	r4, #32
 80205de:	da35      	bge.n	802064c <__aeabi_dmul+0x164>
 80205e0:	340c      	adds	r4, #12
 80205e2:	dc1b      	bgt.n	802061c <__aeabi_dmul+0x134>
 80205e4:	f104 0414 	add.w	r4, r4, #20
 80205e8:	f1c4 0520 	rsb	r5, r4, #32
 80205ec:	fa00 f305 	lsl.w	r3, r0, r5
 80205f0:	fa20 f004 	lsr.w	r0, r0, r4
 80205f4:	fa01 f205 	lsl.w	r2, r1, r5
 80205f8:	ea40 0002 	orr.w	r0, r0, r2
 80205fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8020600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020608:	fa21 f604 	lsr.w	r6, r1, r4
 802060c:	eb42 0106 	adc.w	r1, r2, r6
 8020610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020614:	bf08      	it	eq
 8020616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802061a:	bd70      	pop	{r4, r5, r6, pc}
 802061c:	f1c4 040c 	rsb	r4, r4, #12
 8020620:	f1c4 0520 	rsb	r5, r4, #32
 8020624:	fa00 f304 	lsl.w	r3, r0, r4
 8020628:	fa20 f005 	lsr.w	r0, r0, r5
 802062c:	fa01 f204 	lsl.w	r2, r1, r4
 8020630:	ea40 0002 	orr.w	r0, r0, r2
 8020634:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802063c:	f141 0100 	adc.w	r1, r1, #0
 8020640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020644:	bf08      	it	eq
 8020646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802064a:	bd70      	pop	{r4, r5, r6, pc}
 802064c:	f1c4 0520 	rsb	r5, r4, #32
 8020650:	fa00 f205 	lsl.w	r2, r0, r5
 8020654:	ea4e 0e02 	orr.w	lr, lr, r2
 8020658:	fa20 f304 	lsr.w	r3, r0, r4
 802065c:	fa01 f205 	lsl.w	r2, r1, r5
 8020660:	ea43 0302 	orr.w	r3, r3, r2
 8020664:	fa21 f004 	lsr.w	r0, r1, r4
 8020668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 802066c:	fa21 f204 	lsr.w	r2, r1, r4
 8020670:	ea20 0002 	bic.w	r0, r0, r2
 8020674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802067c:	bf08      	it	eq
 802067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020682:	bd70      	pop	{r4, r5, r6, pc}
 8020684:	f094 0f00 	teq	r4, #0
 8020688:	d10f      	bne.n	80206aa <__aeabi_dmul+0x1c2>
 802068a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 802068e:	0040      	lsls	r0, r0, #1
 8020690:	eb41 0101 	adc.w	r1, r1, r1
 8020694:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020698:	bf08      	it	eq
 802069a:	3c01      	subeq	r4, #1
 802069c:	d0f7      	beq.n	802068e <__aeabi_dmul+0x1a6>
 802069e:	ea41 0106 	orr.w	r1, r1, r6
 80206a2:	f095 0f00 	teq	r5, #0
 80206a6:	bf18      	it	ne
 80206a8:	4770      	bxne	lr
 80206aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80206ae:	0052      	lsls	r2, r2, #1
 80206b0:	eb43 0303 	adc.w	r3, r3, r3
 80206b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80206b8:	bf08      	it	eq
 80206ba:	3d01      	subeq	r5, #1
 80206bc:	d0f7      	beq.n	80206ae <__aeabi_dmul+0x1c6>
 80206be:	ea43 0306 	orr.w	r3, r3, r6
 80206c2:	4770      	bx	lr
 80206c4:	ea94 0f0c 	teq	r4, ip
 80206c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80206cc:	bf18      	it	ne
 80206ce:	ea95 0f0c 	teqne	r5, ip
 80206d2:	d00c      	beq.n	80206ee <__aeabi_dmul+0x206>
 80206d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80206d8:	bf18      	it	ne
 80206da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80206de:	d1d1      	bne.n	8020684 <__aeabi_dmul+0x19c>
 80206e0:	ea81 0103 	eor.w	r1, r1, r3
 80206e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80206e8:	f04f 0000 	mov.w	r0, #0
 80206ec:	bd70      	pop	{r4, r5, r6, pc}
 80206ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80206f2:	bf06      	itte	eq
 80206f4:	4610      	moveq	r0, r2
 80206f6:	4619      	moveq	r1, r3
 80206f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80206fc:	d019      	beq.n	8020732 <__aeabi_dmul+0x24a>
 80206fe:	ea94 0f0c 	teq	r4, ip
 8020702:	d102      	bne.n	802070a <__aeabi_dmul+0x222>
 8020704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020708:	d113      	bne.n	8020732 <__aeabi_dmul+0x24a>
 802070a:	ea95 0f0c 	teq	r5, ip
 802070e:	d105      	bne.n	802071c <__aeabi_dmul+0x234>
 8020710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020714:	bf1c      	itt	ne
 8020716:	4610      	movne	r0, r2
 8020718:	4619      	movne	r1, r3
 802071a:	d10a      	bne.n	8020732 <__aeabi_dmul+0x24a>
 802071c:	ea81 0103 	eor.w	r1, r1, r3
 8020720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020724:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020728:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 802072c:	f04f 0000 	mov.w	r0, #0
 8020730:	bd70      	pop	{r4, r5, r6, pc}
 8020732:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020736:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 802073a:	bd70      	pop	{r4, r5, r6, pc}

0802073c <__aeabi_ddiv>:
 802073c:	b570      	push	{r4, r5, r6, lr}
 802073e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8020742:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802074a:	bf1d      	ittte	ne
 802074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020750:	ea94 0f0c 	teqne	r4, ip
 8020754:	ea95 0f0c 	teqne	r5, ip
 8020758:	f000 f8a7 	bleq	80208aa <__aeabi_ddiv+0x16e>
 802075c:	eba4 0405 	sub.w	r4, r4, r5
 8020760:	ea81 0e03 	eor.w	lr, r1, r3
 8020764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802076c:	f000 8088 	beq.w	8020880 <__aeabi_ddiv+0x144>
 8020770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020774:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8020778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020790:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8020794:	429d      	cmp	r5, r3
 8020796:	bf08      	it	eq
 8020798:	4296      	cmpeq	r6, r2
 802079a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 802079e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80207a2:	d202      	bcs.n	80207aa <__aeabi_ddiv+0x6e>
 80207a4:	085b      	lsrs	r3, r3, #1
 80207a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80207aa:	1ab6      	subs	r6, r6, r2
 80207ac:	eb65 0503 	sbc.w	r5, r5, r3
 80207b0:	085b      	lsrs	r3, r3, #1
 80207b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80207b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80207ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80207be:	ebb6 0e02 	subs.w	lr, r6, r2
 80207c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207c6:	bf22      	ittt	cs
 80207c8:	1ab6      	subcs	r6, r6, r2
 80207ca:	4675      	movcs	r5, lr
 80207cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80207d0:	085b      	lsrs	r3, r3, #1
 80207d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80207d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80207da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207de:	bf22      	ittt	cs
 80207e0:	1ab6      	subcs	r6, r6, r2
 80207e2:	4675      	movcs	r5, lr
 80207e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80207e8:	085b      	lsrs	r3, r3, #1
 80207ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80207ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80207f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207f6:	bf22      	ittt	cs
 80207f8:	1ab6      	subcs	r6, r6, r2
 80207fa:	4675      	movcs	r5, lr
 80207fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020800:	085b      	lsrs	r3, r3, #1
 8020802:	ea4f 0232 	mov.w	r2, r2, rrx
 8020806:	ebb6 0e02 	subs.w	lr, r6, r2
 802080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802080e:	bf22      	ittt	cs
 8020810:	1ab6      	subcs	r6, r6, r2
 8020812:	4675      	movcs	r5, lr
 8020814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020818:	ea55 0e06 	orrs.w	lr, r5, r6
 802081c:	d018      	beq.n	8020850 <__aeabi_ddiv+0x114>
 802081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802083a:	d1c0      	bne.n	80207be <__aeabi_ddiv+0x82>
 802083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020840:	d10b      	bne.n	802085a <__aeabi_ddiv+0x11e>
 8020842:	ea41 0100 	orr.w	r1, r1, r0
 8020846:	f04f 0000 	mov.w	r0, #0
 802084a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802084e:	e7b6      	b.n	80207be <__aeabi_ddiv+0x82>
 8020850:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020854:	bf04      	itt	eq
 8020856:	4301      	orreq	r1, r0
 8020858:	2000      	moveq	r0, #0
 802085a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 802085e:	bf88      	it	hi
 8020860:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020864:	f63f aeaf 	bhi.w	80205c6 <__aeabi_dmul+0xde>
 8020868:	ebb5 0c03 	subs.w	ip, r5, r3
 802086c:	bf04      	itt	eq
 802086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020876:	f150 0000 	adcs.w	r0, r0, #0
 802087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802087e:	bd70      	pop	{r4, r5, r6, pc}
 8020880:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8020884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802088c:	bfc2      	ittt	gt
 802088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020896:	bd70      	popgt	{r4, r5, r6, pc}
 8020898:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 802089c:	f04f 0e00 	mov.w	lr, #0
 80208a0:	3c01      	subs	r4, #1
 80208a2:	e690      	b.n	80205c6 <__aeabi_dmul+0xde>
 80208a4:	ea45 0e06 	orr.w	lr, r5, r6
 80208a8:	e68d      	b.n	80205c6 <__aeabi_dmul+0xde>
 80208aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80208ae:	ea94 0f0c 	teq	r4, ip
 80208b2:	bf08      	it	eq
 80208b4:	ea95 0f0c 	teqeq	r5, ip
 80208b8:	f43f af3b 	beq.w	8020732 <__aeabi_dmul+0x24a>
 80208bc:	ea94 0f0c 	teq	r4, ip
 80208c0:	d10a      	bne.n	80208d8 <__aeabi_ddiv+0x19c>
 80208c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80208c6:	f47f af34 	bne.w	8020732 <__aeabi_dmul+0x24a>
 80208ca:	ea95 0f0c 	teq	r5, ip
 80208ce:	f47f af25 	bne.w	802071c <__aeabi_dmul+0x234>
 80208d2:	4610      	mov	r0, r2
 80208d4:	4619      	mov	r1, r3
 80208d6:	e72c      	b.n	8020732 <__aeabi_dmul+0x24a>
 80208d8:	ea95 0f0c 	teq	r5, ip
 80208dc:	d106      	bne.n	80208ec <__aeabi_ddiv+0x1b0>
 80208de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208e2:	f43f aefd 	beq.w	80206e0 <__aeabi_dmul+0x1f8>
 80208e6:	4610      	mov	r0, r2
 80208e8:	4619      	mov	r1, r3
 80208ea:	e722      	b.n	8020732 <__aeabi_dmul+0x24a>
 80208ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80208f0:	bf18      	it	ne
 80208f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80208f6:	f47f aec5 	bne.w	8020684 <__aeabi_dmul+0x19c>
 80208fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80208fe:	f47f af0d 	bne.w	802071c <__aeabi_dmul+0x234>
 8020902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020906:	f47f aeeb 	bne.w	80206e0 <__aeabi_dmul+0x1f8>
 802090a:	e712      	b.n	8020732 <__aeabi_dmul+0x24a>

0802090c <__gedf2>:
 802090c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8020910:	e006      	b.n	8020920 <__cmpdf2+0x4>
 8020912:	bf00      	nop

08020914 <__ledf2>:
 8020914:	f04f 0c01 	mov.w	ip, #1
 8020918:	e002      	b.n	8020920 <__cmpdf2+0x4>
 802091a:	bf00      	nop

0802091c <__cmpdf2>:
 802091c:	f04f 0c01 	mov.w	ip, #1
 8020920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020930:	bf18      	it	ne
 8020932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020936:	d01b      	beq.n	8020970 <__cmpdf2+0x54>
 8020938:	b001      	add	sp, #4
 802093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802093e:	bf0c      	ite	eq
 8020940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020944:	ea91 0f03 	teqne	r1, r3
 8020948:	bf02      	ittt	eq
 802094a:	ea90 0f02 	teqeq	r0, r2
 802094e:	2000      	moveq	r0, #0
 8020950:	4770      	bxeq	lr
 8020952:	f110 0f00 	cmn.w	r0, #0
 8020956:	ea91 0f03 	teq	r1, r3
 802095a:	bf58      	it	pl
 802095c:	4299      	cmppl	r1, r3
 802095e:	bf08      	it	eq
 8020960:	4290      	cmpeq	r0, r2
 8020962:	bf2c      	ite	cs
 8020964:	17d8      	asrcs	r0, r3, #31
 8020966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802096a:	f040 0001 	orr.w	r0, r0, #1
 802096e:	4770      	bx	lr
 8020970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020978:	d102      	bne.n	8020980 <__cmpdf2+0x64>
 802097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802097e:	d107      	bne.n	8020990 <__cmpdf2+0x74>
 8020980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020988:	d1d6      	bne.n	8020938 <__cmpdf2+0x1c>
 802098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802098e:	d0d3      	beq.n	8020938 <__cmpdf2+0x1c>
 8020990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020994:	4770      	bx	lr
 8020996:	bf00      	nop

08020998 <__aeabi_cdrcmple>:
 8020998:	4684      	mov	ip, r0
 802099a:	4610      	mov	r0, r2
 802099c:	4662      	mov	r2, ip
 802099e:	468c      	mov	ip, r1
 80209a0:	4619      	mov	r1, r3
 80209a2:	4663      	mov	r3, ip
 80209a4:	e000      	b.n	80209a8 <__aeabi_cdcmpeq>
 80209a6:	bf00      	nop

080209a8 <__aeabi_cdcmpeq>:
 80209a8:	b501      	push	{r0, lr}
 80209aa:	f7ff ffb7 	bl	802091c <__cmpdf2>
 80209ae:	2800      	cmp	r0, #0
 80209b0:	bf48      	it	mi
 80209b2:	f110 0f00 	cmnmi.w	r0, #0
 80209b6:	bd01      	pop	{r0, pc}

080209b8 <__aeabi_dcmpeq>:
 80209b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209bc:	f7ff fff4 	bl	80209a8 <__aeabi_cdcmpeq>
 80209c0:	bf0c      	ite	eq
 80209c2:	2001      	moveq	r0, #1
 80209c4:	2000      	movne	r0, #0
 80209c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80209ca:	bf00      	nop

080209cc <__aeabi_dcmplt>:
 80209cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209d0:	f7ff ffea 	bl	80209a8 <__aeabi_cdcmpeq>
 80209d4:	bf34      	ite	cc
 80209d6:	2001      	movcc	r0, #1
 80209d8:	2000      	movcs	r0, #0
 80209da:	f85d fb08 	ldr.w	pc, [sp], #8
 80209de:	bf00      	nop

080209e0 <__aeabi_dcmple>:
 80209e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209e4:	f7ff ffe0 	bl	80209a8 <__aeabi_cdcmpeq>
 80209e8:	bf94      	ite	ls
 80209ea:	2001      	movls	r0, #1
 80209ec:	2000      	movhi	r0, #0
 80209ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80209f2:	bf00      	nop

080209f4 <__aeabi_dcmpge>:
 80209f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209f8:	f7ff ffce 	bl	8020998 <__aeabi_cdrcmple>
 80209fc:	bf94      	ite	ls
 80209fe:	2001      	movls	r0, #1
 8020a00:	2000      	movhi	r0, #0
 8020a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8020a06:	bf00      	nop

08020a08 <__aeabi_dcmpgt>:
 8020a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020a0c:	f7ff ffc4 	bl	8020998 <__aeabi_cdrcmple>
 8020a10:	bf34      	ite	cc
 8020a12:	2001      	movcc	r0, #1
 8020a14:	2000      	movcs	r0, #0
 8020a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8020a1a:	bf00      	nop

08020a1c <__aeabi_dcmpun>:
 8020a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a24:	d102      	bne.n	8020a2c <__aeabi_dcmpun+0x10>
 8020a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020a2a:	d10a      	bne.n	8020a42 <__aeabi_dcmpun+0x26>
 8020a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a34:	d102      	bne.n	8020a3c <__aeabi_dcmpun+0x20>
 8020a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020a3a:	d102      	bne.n	8020a42 <__aeabi_dcmpun+0x26>
 8020a3c:	f04f 0000 	mov.w	r0, #0
 8020a40:	4770      	bx	lr
 8020a42:	f04f 0001 	mov.w	r0, #1
 8020a46:	4770      	bx	lr

08020a48 <__aeabi_d2iz>:
 8020a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8020a50:	d215      	bcs.n	8020a7e <__aeabi_d2iz+0x36>
 8020a52:	d511      	bpl.n	8020a78 <__aeabi_d2iz+0x30>
 8020a54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8020a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020a5c:	d912      	bls.n	8020a84 <__aeabi_d2iz+0x3c>
 8020a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8020a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020a6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8020a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8020a72:	bf18      	it	ne
 8020a74:	4240      	negne	r0, r0
 8020a76:	4770      	bx	lr
 8020a78:	f04f 0000 	mov.w	r0, #0
 8020a7c:	4770      	bx	lr
 8020a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020a82:	d105      	bne.n	8020a90 <__aeabi_d2iz+0x48>
 8020a84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8020a88:	bf08      	it	eq
 8020a8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8020a8e:	4770      	bx	lr
 8020a90:	f04f 0000 	mov.w	r0, #0
 8020a94:	4770      	bx	lr
 8020a96:	bf00      	nop

08020a98 <KalmanFilter_C>:
 *      Author: Neil
 */

#include "KalmanFilter_C.h"

int KalmanFilter_C (kalman_state* kState, float measurement){
 8020a98:	b480      	push	{r7}
 8020a9a:	b085      	sub	sp, #20
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	6078      	str	r0, [r7, #4]
 8020aa0:	ed87 0a00 	vstr	s0, [r7]

	kState->p = kState->p + kState->q;
 8020aa4:	687b      	ldr	r3, [r7, #4]
 8020aa6:	ed93 7a03 	vldr	s14, [r3, #12]
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	edd3 7a00 	vldr	s15, [r3]
 8020ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	edc3 7a03 	vstr	s15, [r3, #12]
    if (isinf(kState->p) || isnan(kState->p)) {
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	edd3 7a03 	vldr	s15, [r3, #12]
 8020ac0:	eef0 7ae7 	vabs.f32	s15, s15
 8020ac4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8020c3c <KalmanFilter_C+0x1a4>
 8020ac8:	eef4 7a47 	vcmp.f32	s15, s14
 8020acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ad0:	bfd4      	ite	le
 8020ad2:	2301      	movle	r3, #1
 8020ad4:	2300      	movgt	r3, #0
 8020ad6:	b2db      	uxtb	r3, r3
 8020ad8:	f083 0301 	eor.w	r3, r3, #1
 8020adc:	b2db      	uxtb	r3, r3
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	d107      	bne.n	8020af2 <KalmanFilter_C+0x5a>
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	edd3 7a03 	vldr	s15, [r3, #12]
 8020ae8:	eef4 7a67 	vcmp.f32	s15, s15
 8020aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020af0:	d701      	bvc.n	8020af6 <KalmanFilter_C+0x5e>
        return KALMAN_OVERFLOW; // Overflow error
 8020af2:	2302      	movs	r3, #2
 8020af4:	e09c      	b.n	8020c30 <KalmanFilter_C+0x198>
    }

    float denominator = kState->p + kState->r;
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	ed93 7a03 	vldr	s14, [r3, #12]
 8020afc:	687b      	ldr	r3, [r7, #4]
 8020afe:	edd3 7a01 	vldr	s15, [r3, #4]
 8020b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020b06:	edc7 7a03 	vstr	s15, [r7, #12]
    if (denominator < FLT_EPSILON) {
 8020b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8020b0e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8020c40 <KalmanFilter_C+0x1a8>
 8020b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b1a:	d501      	bpl.n	8020b20 <KalmanFilter_C+0x88>
        return KALMAN_DIV_BY_ZERO;
 8020b1c:	2301      	movs	r3, #1
 8020b1e:	e087      	b.n	8020c30 <KalmanFilter_C+0x198>
    }

    // Update: Calculate the Kalman gain
    kState->k = kState->p / denominator;
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	edd3 6a03 	vldr	s13, [r3, #12]
 8020b26:	ed97 7a03 	vldr	s14, [r7, #12]
 8020b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020b2e:	687b      	ldr	r3, [r7, #4]
 8020b30:	edc3 7a04 	vstr	s15, [r3, #16]


    if (isinf(kState->k) || isnan(kState->k)) {
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	edd3 7a04 	vldr	s15, [r3, #16]
 8020b3a:	eef0 7ae7 	vabs.f32	s15, s15
 8020b3e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8020c3c <KalmanFilter_C+0x1a4>
 8020b42:	eef4 7a47 	vcmp.f32	s15, s14
 8020b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b4a:	bfd4      	ite	le
 8020b4c:	2301      	movle	r3, #1
 8020b4e:	2300      	movgt	r3, #0
 8020b50:	b2db      	uxtb	r3, r3
 8020b52:	f083 0301 	eor.w	r3, r3, #1
 8020b56:	b2db      	uxtb	r3, r3
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d107      	bne.n	8020b6c <KalmanFilter_C+0xd4>
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8020b62:	eef4 7a67 	vcmp.f32	s15, s15
 8020b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b6a:	d701      	bvc.n	8020b70 <KalmanFilter_C+0xd8>
        return KALMAN_OVERFLOW; // Overflow error
 8020b6c:	2302      	movs	r3, #2
 8020b6e:	e05f      	b.n	8020c30 <KalmanFilter_C+0x198>
    }

	kState->x += kState->k * (measurement - kState->x);
 8020b70:	687b      	ldr	r3, [r7, #4]
 8020b72:	ed93 7a02 	vldr	s14, [r3, #8]
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	edd3 6a04 	vldr	s13, [r3, #16]
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8020b82:	ed97 6a00 	vldr	s12, [r7]
 8020b86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8020b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	edc3 7a02 	vstr	s15, [r3, #8]
    if (isinf(kState->x) || isnan(kState->x)) {
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8020b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8020ba2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8020c3c <KalmanFilter_C+0x1a4>
 8020ba6:	eef4 7a47 	vcmp.f32	s15, s14
 8020baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bae:	bfd4      	ite	le
 8020bb0:	2301      	movle	r3, #1
 8020bb2:	2300      	movgt	r3, #0
 8020bb4:	b2db      	uxtb	r3, r3
 8020bb6:	f083 0301 	eor.w	r3, r3, #1
 8020bba:	b2db      	uxtb	r3, r3
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d107      	bne.n	8020bd0 <KalmanFilter_C+0x138>
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8020bc6:	eef4 7a67 	vcmp.f32	s15, s15
 8020bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bce:	d701      	bvc.n	8020bd4 <KalmanFilter_C+0x13c>
        return KALMAN_OVERFLOW; // Overflow error
 8020bd0:	2302      	movs	r3, #2
 8020bd2:	e02d      	b.n	8020c30 <KalmanFilter_C+0x198>
    }

	kState->p *= (1.0f-kState->k);
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	ed93 7a03 	vldr	s14, [r3, #12]
 8020bda:	687b      	ldr	r3, [r7, #4]
 8020bdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8020be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020be4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	edc3 7a03 	vstr	s15, [r3, #12]
    if (isinf(kState->p) || isnan(kState->p)) {
 8020bf2:	687b      	ldr	r3, [r7, #4]
 8020bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8020bf8:	eef0 7ae7 	vabs.f32	s15, s15
 8020bfc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8020c3c <KalmanFilter_C+0x1a4>
 8020c00:	eef4 7a47 	vcmp.f32	s15, s14
 8020c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c08:	bfd4      	ite	le
 8020c0a:	2301      	movle	r3, #1
 8020c0c:	2300      	movgt	r3, #0
 8020c0e:	b2db      	uxtb	r3, r3
 8020c10:	f083 0301 	eor.w	r3, r3, #1
 8020c14:	b2db      	uxtb	r3, r3
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d107      	bne.n	8020c2a <KalmanFilter_C+0x192>
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020c20:	eef4 7a67 	vcmp.f32	s15, s15
 8020c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c28:	d701      	bvc.n	8020c2e <KalmanFilter_C+0x196>
        return KALMAN_OVERFLOW; // Overflow error
 8020c2a:	2302      	movs	r3, #2
 8020c2c:	e000      	b.n	8020c30 <KalmanFilter_C+0x198>
    }

    return KALMAN_SUCCESS;
 8020c2e:	2300      	movs	r3, #0
}
 8020c30:	4618      	mov	r0, r3
 8020c32:	3714      	adds	r7, #20
 8020c34:	46bd      	mov	sp, r7
 8020c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c3a:	4770      	bx	lr
 8020c3c:	7f7fffff 	.word	0x7f7fffff
 8020c40:	34000000 	.word	0x34000000

08020c44 <KalmanFilter_C_CMSIS>:
 *      Author: Neil
 */

#include "KalmanFilter_C_CMSIS.h"

int KalmanFilter_C_CMSIS(kalman_state* kState, float measurement) {
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b086      	sub	sp, #24
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	6078      	str	r0, [r7, #4]
 8020c4c:	ed87 0a00 	vstr	s0, [r7]
    float32_t temp1[1], temp2[1], one[1] = {1.0f};
 8020c50:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8020c54:	60fb      	str	r3, [r7, #12]

    // P = P + Q
    arm_add_f32(&(kState->p), &(kState->q), &(kState->p), 1);
 8020c56:	687b      	ldr	r3, [r7, #4]
 8020c58:	f103 000c 	add.w	r0, r3, #12
 8020c5c:	6879      	ldr	r1, [r7, #4]
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	f103 020c 	add.w	r2, r3, #12
 8020c64:	2301      	movs	r3, #1
 8020c66:	f001 fd43 	bl	80226f0 <arm_add_f32>
    if (isinf(kState->p) || isnan(kState->p)) {
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020c70:	eef0 7ae7 	vabs.f32	s15, s15
 8020c74:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8020e14 <KalmanFilter_C_CMSIS+0x1d0>
 8020c78:	eef4 7a47 	vcmp.f32	s15, s14
 8020c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c80:	bfd4      	ite	le
 8020c82:	2301      	movle	r3, #1
 8020c84:	2300      	movgt	r3, #0
 8020c86:	b2db      	uxtb	r3, r3
 8020c88:	f083 0301 	eor.w	r3, r3, #1
 8020c8c:	b2db      	uxtb	r3, r3
 8020c8e:	2b00      	cmp	r3, #0
 8020c90:	d107      	bne.n	8020ca2 <KalmanFilter_C_CMSIS+0x5e>
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	edd3 7a03 	vldr	s15, [r3, #12]
 8020c98:	eef4 7a67 	vcmp.f32	s15, s15
 8020c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ca0:	d701      	bvc.n	8020ca6 <KalmanFilter_C_CMSIS+0x62>
        return KALMAN_OVERFLOW; // Overflow error
 8020ca2:	2302      	movs	r3, #2
 8020ca4:	e0b2      	b.n	8020e0c <KalmanFilter_C_CMSIS+0x1c8>
    }
    if ((kState->p + kState->r) < FLT_EPSILON){
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	ed93 7a03 	vldr	s14, [r3, #12]
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	edd3 7a01 	vldr	s15, [r3, #4]
 8020cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020cb6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8020e18 <KalmanFilter_C_CMSIS+0x1d4>
 8020cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cc2:	d501      	bpl.n	8020cc8 <KalmanFilter_C_CMSIS+0x84>
    	return KALMAN_DIV_BY_ZERO;
 8020cc4:	2301      	movs	r3, #1
 8020cc6:	e0a1      	b.n	8020e0c <KalmanFilter_C_CMSIS+0x1c8>
    }

    // temp1 = P + R
    arm_add_f32(&(kState->p), &(kState->r), temp1, 1);
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	f103 000c 	add.w	r0, r3, #12
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	1d19      	adds	r1, r3, #4
 8020cd2:	f107 0214 	add.w	r2, r7, #20
 8020cd6:	2301      	movs	r3, #1
 8020cd8:	f001 fd0a 	bl	80226f0 <arm_add_f32>

    // K = P / temp1
    kState->k = kState->p / temp1[0];
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	edd3 6a03 	vldr	s13, [r3, #12]
 8020ce2:	ed97 7a05 	vldr	s14, [r7, #20]
 8020ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	edc3 7a04 	vstr	s15, [r3, #16]

    if (isinf(kState->k) || isnan(kState->k)) {
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8020cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8020cfa:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8020e14 <KalmanFilter_C_CMSIS+0x1d0>
 8020cfe:	eef4 7a47 	vcmp.f32	s15, s14
 8020d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d06:	bfd4      	ite	le
 8020d08:	2301      	movle	r3, #1
 8020d0a:	2300      	movgt	r3, #0
 8020d0c:	b2db      	uxtb	r3, r3
 8020d0e:	f083 0301 	eor.w	r3, r3, #1
 8020d12:	b2db      	uxtb	r3, r3
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d107      	bne.n	8020d28 <KalmanFilter_C_CMSIS+0xe4>
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8020d1e:	eef4 7a67 	vcmp.f32	s15, s15
 8020d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d26:	d701      	bvc.n	8020d2c <KalmanFilter_C_CMSIS+0xe8>
        return KALMAN_OVERFLOW; // Overflow error
 8020d28:	2302      	movs	r3, #2
 8020d2a:	e06f      	b.n	8020e0c <KalmanFilter_C_CMSIS+0x1c8>
    }

    // temp1 = measurement - X
    arm_sub_f32(&measurement, &(kState->x), temp1, 1);
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f103 0108 	add.w	r1, r3, #8
 8020d32:	f107 0214 	add.w	r2, r7, #20
 8020d36:	4638      	mov	r0, r7
 8020d38:	2301      	movs	r3, #1
 8020d3a:	f001 fc25 	bl	8022588 <arm_sub_f32>

    // temp2 = K * temp1
    arm_mult_f32(&(kState->k), temp1, temp2, 1);
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	f103 0010 	add.w	r0, r3, #16
 8020d44:	f107 0210 	add.w	r2, r7, #16
 8020d48:	f107 0114 	add.w	r1, r7, #20
 8020d4c:	2301      	movs	r3, #1
 8020d4e:	f001 fc75 	bl	802263c <arm_mult_f32>

    // X = X + temp2
    arm_add_f32(&(kState->x), temp2, &(kState->x), 1);
 8020d52:	687b      	ldr	r3, [r7, #4]
 8020d54:	f103 0008 	add.w	r0, r3, #8
 8020d58:	687b      	ldr	r3, [r7, #4]
 8020d5a:	f103 0208 	add.w	r2, r3, #8
 8020d5e:	f107 0110 	add.w	r1, r7, #16
 8020d62:	2301      	movs	r3, #1
 8020d64:	f001 fcc4 	bl	80226f0 <arm_add_f32>
    if (isinf(kState->x) || isnan(kState->x)) {
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8020d6e:	eef0 7ae7 	vabs.f32	s15, s15
 8020d72:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8020e14 <KalmanFilter_C_CMSIS+0x1d0>
 8020d76:	eef4 7a47 	vcmp.f32	s15, s14
 8020d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d7e:	bfd4      	ite	le
 8020d80:	2301      	movle	r3, #1
 8020d82:	2300      	movgt	r3, #0
 8020d84:	b2db      	uxtb	r3, r3
 8020d86:	f083 0301 	eor.w	r3, r3, #1
 8020d8a:	b2db      	uxtb	r3, r3
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d107      	bne.n	8020da0 <KalmanFilter_C_CMSIS+0x15c>
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	edd3 7a02 	vldr	s15, [r3, #8]
 8020d96:	eef4 7a67 	vcmp.f32	s15, s15
 8020d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d9e:	d701      	bvc.n	8020da4 <KalmanFilter_C_CMSIS+0x160>
        return KALMAN_OVERFLOW; // Overflow error
 8020da0:	2302      	movs	r3, #2
 8020da2:	e033      	b.n	8020e0c <KalmanFilter_C_CMSIS+0x1c8>
    }

    // temp1 = 1 - K
    arm_sub_f32(one, &(kState->k), temp1, 1);
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	f103 0110 	add.w	r1, r3, #16
 8020daa:	f107 0214 	add.w	r2, r7, #20
 8020dae:	f107 000c 	add.w	r0, r7, #12
 8020db2:	2301      	movs	r3, #1
 8020db4:	f001 fbe8 	bl	8022588 <arm_sub_f32>

    // P = temp1 * P
    arm_mult_f32(temp1, &(kState->p), &(kState->p), 1);
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	f103 010c 	add.w	r1, r3, #12
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	f103 020c 	add.w	r2, r3, #12
 8020dc4:	f107 0014 	add.w	r0, r7, #20
 8020dc8:	2301      	movs	r3, #1
 8020dca:	f001 fc37 	bl	802263c <arm_mult_f32>

    if (isinf(kState->p) || isnan(kState->p)) {
 8020dce:	687b      	ldr	r3, [r7, #4]
 8020dd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8020dd4:	eef0 7ae7 	vabs.f32	s15, s15
 8020dd8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8020e14 <KalmanFilter_C_CMSIS+0x1d0>
 8020ddc:	eef4 7a47 	vcmp.f32	s15, s14
 8020de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020de4:	bfd4      	ite	le
 8020de6:	2301      	movle	r3, #1
 8020de8:	2300      	movgt	r3, #0
 8020dea:	b2db      	uxtb	r3, r3
 8020dec:	f083 0301 	eor.w	r3, r3, #1
 8020df0:	b2db      	uxtb	r3, r3
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d107      	bne.n	8020e06 <KalmanFilter_C_CMSIS+0x1c2>
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	edd3 7a03 	vldr	s15, [r3, #12]
 8020dfc:	eef4 7a67 	vcmp.f32	s15, s15
 8020e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e04:	d701      	bvc.n	8020e0a <KalmanFilter_C_CMSIS+0x1c6>
        return KALMAN_OVERFLOW; // Overflow error
 8020e06:	2302      	movs	r3, #2
 8020e08:	e000      	b.n	8020e0c <KalmanFilter_C_CMSIS+0x1c8>
    }

    return KALMAN_SUCCESS;
 8020e0a:	2300      	movs	r3, #0
}
 8020e0c:	4618      	mov	r0, r3
 8020e0e:	3718      	adds	r7, #24
 8020e10:	46bd      	mov	sp, r7
 8020e12:	bd80      	pop	{r7, pc}
 8020e14:	7f7fffff 	.word	0x7f7fffff
 8020e18:	34000000 	.word	0x34000000

08020e1c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8020e1c:	b5b0      	push	{r4, r5, r7, lr}
 8020e1e:	f5ad 6dd7 	sub.w	sp, sp, #1720	@ 0x6b8
 8020e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020e24:	f000 faf1 	bl	802140a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020e28:	f000 f92a 	bl	8021080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020e2c:	f000 f97a 	bl	8021124 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // KalmanStruct zero_div_filter = {-1.0f, 1.0f, 0.0f, 0.0f, 0.0f};
  //  KalmanStruct overflow_filter = {9e38f, 9e38f, 9e38f, 9e38f, 9e38f};
  float TEST_ARRAY[] = {
 8020e30:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020e34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8020e38:	4a8e      	ldr	r2, [pc, #568]	@ (8021074 <main+0x258>)
 8020e3a:	4618      	mov	r0, r3
 8020e3c:	4611      	mov	r1, r2
 8020e3e:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8020e42:	461a      	mov	r2, r3
 8020e44:	f002 fa01 	bl	802324a <memcpy>
      10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928, 9.98208344925, 9.52778805729,
      9.69323876912, 9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
      10.2814361401, 9.7985283333,  9.6287888922,  10.4491538991, 9.5799256668};
  
  // Initialize filter with more conservative values
  kalman_state kState = {1.0f, 0.1f, 5.0f, 1.0f, 0.0f};  // Higher process and measurement noise
 8020e48:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020e4c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8020e50:	4a89      	ldr	r2, [pc, #548]	@ (8021078 <main+0x25c>)
 8020e52:	461c      	mov	r4, r3
 8020e54:	4615      	mov	r5, r2
 8020e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020e5a:	682b      	ldr	r3, [r5, #0]
 8020e5c:	6023      	str	r3, [r4, #0]
  kalman_state CKState= {1.0f, 0.1f, 5.0f, 1.0f, 0.0f};  // Higher process and measurement noise
 8020e5e:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020e62:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8020e66:	4a84      	ldr	r2, [pc, #528]	@ (8021078 <main+0x25c>)
 8020e68:	461c      	mov	r4, r3
 8020e6a:	4615      	mov	r5, r2
 8020e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020e70:	682b      	ldr	r3, [r5, #0]
 8020e72:	6023      	str	r3, [r4, #0]
  kalman_state CMSISKState= {1.0f, 0.1f, 5.0f, 1.0f, 0.0f};  // Higher process and measurement noise
 8020e74:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020e78:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8020e7c:	4a7e      	ldr	r2, [pc, #504]	@ (8021078 <main+0x25c>)
 8020e7e:	461c      	mov	r4, r3
 8020e80:	4615      	mov	r5, r2
 8020e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020e86:	682b      	ldr	r3, [r5, #0]
 8020e88:	6023      	str	r3, [r4, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable the cycle counter
 8020e8a:	4b7c      	ldr	r3, [pc, #496]	@ (802107c <main+0x260>)
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	4a7b      	ldr	r2, [pc, #492]	@ (802107c <main+0x260>)
 8020e90:	f043 0301 	orr.w	r3, r3, #1
 8020e94:	6013      	str	r3, [r2, #0]

  int measurementCount = 101;
 8020e96:	2365      	movs	r3, #101	@ 0x65
 8020e98:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
  float resultCMSIS[101];



  uint32_t startTime, endTime;
  int asmNbCycles = 0, CNbCycles = 0, CMSISNbCycles = 0;
 8020e9c:	2300      	movs	r3, #0
 8020e9e:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	f8c7 36b0 	str.w	r3, [r7, #1712]	@ 0x6b0
 8020ea8:	2300      	movs	r3, #0
 8020eaa:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
  int errCode;

  // Asm Implementation
  for (int i = 0; i < measurementCount; i++) {
 8020eae:	2300      	movs	r3, #0
 8020eb0:	f8c7 36a8 	str.w	r3, [r7, #1704]	@ 0x6a8
 8020eb4:	e03e      	b.n	8020f34 <main+0x118>
	  startTime = DWT->CYCCNT;  // Start Timer
 8020eb6:	4b71      	ldr	r3, [pc, #452]	@ (802107c <main+0x260>)
 8020eb8:	685b      	ldr	r3, [r3, #4]
 8020eba:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
    errCode = KalmanFilter(&kState, TEST_ARRAY[i]);
 8020ebe:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020ec2:	f5a3 72de 	sub.w	r2, r3, #444	@ 0x1bc
 8020ec6:	f8d7 36a8 	ldr.w	r3, [r7, #1704]	@ 0x6a8
 8020eca:	009b      	lsls	r3, r3, #2
 8020ecc:	4413      	add	r3, r2
 8020ece:	edd3 7a00 	vldr	s15, [r3]
 8020ed2:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8020ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8020eda:	4618      	mov	r0, r3
 8020edc:	f7ff f890 	bl	8020000 <KalmanFilter>
 8020ee0:	f8c7 0694 	str.w	r0, [r7, #1684]	@ 0x694
    endTime = DWT->CYCCNT; // End Timer
 8020ee4:	4b65      	ldr	r3, [pc, #404]	@ (802107c <main+0x260>)
 8020ee6:	685b      	ldr	r3, [r3, #4]
 8020ee8:	f8c7 3690 	str.w	r3, [r7, #1680]	@ 0x690
    asmNbCycles += (endTime - startTime);
 8020eec:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8020ef0:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 8020ef4:	1ad2      	subs	r2, r2, r3
 8020ef6:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	@ 0x6b4
 8020efa:	4413      	add	r3, r2
 8020efc:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
    if (errCode != 0)
 8020f00:	f8d7 3694 	ldr.w	r3, [r7, #1684]	@ 0x694
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d002      	beq.n	8020f0e <main+0xf2>
      return errCode;
 8020f08:	f8d7 3694 	ldr.w	r3, [r7, #1684]	@ 0x694
 8020f0c:	e0ac      	b.n	8021068 <main+0x24c>
    // result array (output array) is completed here. No need to populate it again later.
    result[i] = kState.x;
 8020f0e:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020f12:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8020f16:	689a      	ldr	r2, [r3, #8]
 8020f18:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020f1c:	f5a3 7163 	sub.w	r1, r3, #908	@ 0x38c
 8020f20:	f8d7 36a8 	ldr.w	r3, [r7, #1704]	@ 0x6a8
 8020f24:	009b      	lsls	r3, r3, #2
 8020f26:	440b      	add	r3, r1
 8020f28:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < measurementCount; i++) {
 8020f2a:	f8d7 36a8 	ldr.w	r3, [r7, #1704]	@ 0x6a8
 8020f2e:	3301      	adds	r3, #1
 8020f30:	f8c7 36a8 	str.w	r3, [r7, #1704]	@ 0x6a8
 8020f34:	f8d7 26a8 	ldr.w	r2, [r7, #1704]	@ 0x6a8
 8020f38:	f8d7 369c 	ldr.w	r3, [r7, #1692]	@ 0x69c
 8020f3c:	429a      	cmp	r2, r3
 8020f3e:	dbba      	blt.n	8020eb6 <main+0x9a>
  }

  // C Implementation
  for (int i = 0; i < measurementCount; i++) {
 8020f40:	2300      	movs	r3, #0
 8020f42:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 8020f46:	e03e      	b.n	8020fc6 <main+0x1aa>
    startTime = DWT->CYCCNT;
 8020f48:	4b4c      	ldr	r3, [pc, #304]	@ (802107c <main+0x260>)
 8020f4a:	685b      	ldr	r3, [r3, #4]
 8020f4c:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
    errCode = KalmanFilter_C(&CKState, TEST_ARRAY[i]);
 8020f50:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020f54:	f5a3 72de 	sub.w	r2, r3, #444	@ 0x1bc
 8020f58:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	@ 0x6a4
 8020f5c:	009b      	lsls	r3, r3, #2
 8020f5e:	4413      	add	r3, r2
 8020f60:	edd3 7a00 	vldr	s15, [r3]
 8020f64:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8020f68:	eeb0 0a67 	vmov.f32	s0, s15
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	f7ff fd93 	bl	8020a98 <KalmanFilter_C>
 8020f72:	f8c7 0694 	str.w	r0, [r7, #1684]	@ 0x694
    endTime = DWT->CYCCNT;
 8020f76:	4b41      	ldr	r3, [pc, #260]	@ (802107c <main+0x260>)
 8020f78:	685b      	ldr	r3, [r3, #4]
 8020f7a:	f8c7 3690 	str.w	r3, [r7, #1680]	@ 0x690
    CNbCycles += (endTime - startTime);
 8020f7e:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8020f82:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 8020f86:	1ad2      	subs	r2, r2, r3
 8020f88:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	@ 0x6b0
 8020f8c:	4413      	add	r3, r2
 8020f8e:	f8c7 36b0 	str.w	r3, [r7, #1712]	@ 0x6b0
    if (errCode != 0)
 8020f92:	f8d7 3694 	ldr.w	r3, [r7, #1684]	@ 0x694
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d002      	beq.n	8020fa0 <main+0x184>
      return errCode;
 8020f9a:	f8d7 3694 	ldr.w	r3, [r7, #1684]	@ 0x694
 8020f9e:	e063      	b.n	8021068 <main+0x24c>
    resultC[i] = CKState.x;
 8020fa0:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020fa4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8020fa8:	689a      	ldr	r2, [r3, #8]
 8020faa:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020fae:	f5a3 61a4 	sub.w	r1, r3, #1312	@ 0x520
 8020fb2:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	@ 0x6a4
 8020fb6:	009b      	lsls	r3, r3, #2
 8020fb8:	440b      	add	r3, r1
 8020fba:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < measurementCount; i++) {
 8020fbc:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	@ 0x6a4
 8020fc0:	3301      	adds	r3, #1
 8020fc2:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 8020fc6:	f8d7 26a4 	ldr.w	r2, [r7, #1700]	@ 0x6a4
 8020fca:	f8d7 369c 	ldr.w	r3, [r7, #1692]	@ 0x69c
 8020fce:	429a      	cmp	r2, r3
 8020fd0:	dbba      	blt.n	8020f48 <main+0x12c>
  }

  // CMSIS Implementation
  for (int i = 0; i < measurementCount; i++) {
 8020fd2:	2300      	movs	r3, #0
 8020fd4:	f8c7 36a0 	str.w	r3, [r7, #1696]	@ 0x6a0
 8020fd8:	e03e      	b.n	8021058 <main+0x23c>
    startTime = DWT->CYCCNT;
 8020fda:	4b28      	ldr	r3, [pc, #160]	@ (802107c <main+0x260>)
 8020fdc:	685b      	ldr	r3, [r3, #4]
 8020fde:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
    errCode = KalmanFilter_C_CMSIS(&CMSISKState, TEST_ARRAY[i]);
 8020fe2:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8020fe6:	f5a3 72de 	sub.w	r2, r3, #444	@ 0x1bc
 8020fea:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	@ 0x6a0
 8020fee:	009b      	lsls	r3, r3, #2
 8020ff0:	4413      	add	r3, r2
 8020ff2:	edd3 7a00 	vldr	s15, [r3]
 8020ff6:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8020ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8020ffe:	4618      	mov	r0, r3
 8021000:	f7ff fe20 	bl	8020c44 <KalmanFilter_C_CMSIS>
 8021004:	f8c7 0694 	str.w	r0, [r7, #1684]	@ 0x694
    endTime = DWT->CYCCNT;
 8021008:	4b1c      	ldr	r3, [pc, #112]	@ (802107c <main+0x260>)
 802100a:	685b      	ldr	r3, [r3, #4]
 802100c:	f8c7 3690 	str.w	r3, [r7, #1680]	@ 0x690
    CMSISNbCycles += (endTime - startTime);
 8021010:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 8021014:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 8021018:	1ad2      	subs	r2, r2, r3
 802101a:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	@ 0x6ac
 802101e:	4413      	add	r3, r2
 8021020:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
    if (errCode != 0)
 8021024:	f8d7 3694 	ldr.w	r3, [r7, #1684]	@ 0x694
 8021028:	2b00      	cmp	r3, #0
 802102a:	d002      	beq.n	8021032 <main+0x216>
      return errCode;
 802102c:	f8d7 3694 	ldr.w	r3, [r7, #1684]	@ 0x694
 8021030:	e01a      	b.n	8021068 <main+0x24c>
    resultCMSIS[i] = CMSISKState.x;
 8021032:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8021036:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 802103a:	689a      	ldr	r2, [r3, #8]
 802103c:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8021040:	f2a3 61b4 	subw	r1, r3, #1716	@ 0x6b4
 8021044:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	@ 0x6a0
 8021048:	009b      	lsls	r3, r3, #2
 802104a:	440b      	add	r3, r1
 802104c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < measurementCount; i++) {
 802104e:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	@ 0x6a0
 8021052:	3301      	adds	r3, #1
 8021054:	f8c7 36a0 	str.w	r3, [r7, #1696]	@ 0x6a0
 8021058:	f8d7 26a0 	ldr.w	r2, [r7, #1696]	@ 0x6a0
 802105c:	f8d7 369c 	ldr.w	r3, [r7, #1692]	@ 0x69c
 8021060:	429a      	cmp	r2, r3
 8021062:	dbba      	blt.n	8020fda <main+0x1be>


  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8021064:	bf00      	nop
 8021066:	e7fd      	b.n	8021064 <main+0x248>

    /* USER CODE BEGIN 3 */
  }

  /* USER CODE END 3 */
}
 8021068:	4618      	mov	r0, r3
 802106a:	f507 67d7 	add.w	r7, r7, #1720	@ 0x6b8
 802106e:	46bd      	mov	sp, r7
 8021070:	bdb0      	pop	{r4, r5, r7, pc}
 8021072:	bf00      	nop
 8021074:	080250b8 	.word	0x080250b8
 8021078:	0802524c 	.word	0x0802524c
 802107c:	e0001000 	.word	0xe0001000

08021080 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8021080:	b580      	push	{r7, lr}
 8021082:	b096      	sub	sp, #88	@ 0x58
 8021084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021086:	f107 0314 	add.w	r3, r7, #20
 802108a:	2244      	movs	r2, #68	@ 0x44
 802108c:	2100      	movs	r1, #0
 802108e:	4618      	mov	r0, r3
 8021090:	f002 f8a2 	bl	80231d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021094:	463b      	mov	r3, r7
 8021096:	2200      	movs	r2, #0
 8021098:	601a      	str	r2, [r3, #0]
 802109a:	605a      	str	r2, [r3, #4]
 802109c:	609a      	str	r2, [r3, #8]
 802109e:	60da      	str	r2, [r3, #12]
 80210a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK) {
 80210a2:	2000      	movs	r0, #0
 80210a4:	f000 fb2c 	bl	8021700 <HAL_PWREx_ControlVoltageScaling>
 80210a8:	4603      	mov	r3, r0
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d001      	beq.n	80210b2 <SystemClock_Config+0x32>
    Error_Handler();
 80210ae:	f000 f851 	bl	8021154 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80210b2:	2310      	movs	r3, #16
 80210b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80210b6:	2301      	movs	r3, #1
 80210b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80210ba:	2300      	movs	r3, #0
 80210bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80210be:	2360      	movs	r3, #96	@ 0x60
 80210c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80210c2:	2302      	movs	r3, #2
 80210c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80210c6:	2301      	movs	r3, #1
 80210c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80210ca:	2301      	movs	r3, #1
 80210cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80210ce:	233c      	movs	r3, #60	@ 0x3c
 80210d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80210d2:	2302      	movs	r3, #2
 80210d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80210d6:	2302      	movs	r3, #2
 80210d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80210da:	2302      	movs	r3, #2
 80210dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80210de:	f107 0314 	add.w	r3, r7, #20
 80210e2:	4618      	mov	r0, r3
 80210e4:	f000 fbb0 	bl	8021848 <HAL_RCC_OscConfig>
 80210e8:	4603      	mov	r3, r0
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d001      	beq.n	80210f2 <SystemClock_Config+0x72>
    Error_Handler();
 80210ee:	f000 f831 	bl	8021154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 80210f2:	230f      	movs	r3, #15
 80210f4:	603b      	str	r3, [r7, #0]
      RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80210f6:	2303      	movs	r3, #3
 80210f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80210fa:	2300      	movs	r3, #0
 80210fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80210fe:	2300      	movs	r3, #0
 8021100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8021102:	2300      	movs	r3, #0
 8021104:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8021106:	463b      	mov	r3, r7
 8021108:	2105      	movs	r1, #5
 802110a:	4618      	mov	r0, r3
 802110c:	f000 ffb6 	bl	802207c <HAL_RCC_ClockConfig>
 8021110:	4603      	mov	r3, r0
 8021112:	2b00      	cmp	r3, #0
 8021114:	d001      	beq.n	802111a <SystemClock_Config+0x9a>
    Error_Handler();
 8021116:	f000 f81d 	bl	8021154 <Error_Handler>
  }
}
 802111a:	bf00      	nop
 802111c:	3758      	adds	r7, #88	@ 0x58
 802111e:	46bd      	mov	sp, r7
 8021120:	bd80      	pop	{r7, pc}
	...

08021124 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8021124:	b480      	push	{r7}
 8021126:	b083      	sub	sp, #12
 8021128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802112a:	4b09      	ldr	r3, [pc, #36]	@ (8021150 <MX_GPIO_Init+0x2c>)
 802112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802112e:	4a08      	ldr	r2, [pc, #32]	@ (8021150 <MX_GPIO_Init+0x2c>)
 8021130:	f043 0302 	orr.w	r3, r3, #2
 8021134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8021136:	4b06      	ldr	r3, [pc, #24]	@ (8021150 <MX_GPIO_Init+0x2c>)
 8021138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802113a:	f003 0302 	and.w	r3, r3, #2
 802113e:	607b      	str	r3, [r7, #4]
 8021140:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8021142:	bf00      	nop
 8021144:	370c      	adds	r7, #12
 8021146:	46bd      	mov	sp, r7
 8021148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802114c:	4770      	bx	lr
 802114e:	bf00      	nop
 8021150:	40021000 	.word	0x40021000

08021154 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8021154:	b480      	push	{r7}
 8021156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021158:	b672      	cpsid	i
}
 802115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 802115c:	bf00      	nop
 802115e:	e7fd      	b.n	802115c <Error_Handler+0x8>

08021160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021160:	b480      	push	{r7}
 8021162:	b083      	sub	sp, #12
 8021164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021166:	4b0f      	ldr	r3, [pc, #60]	@ (80211a4 <HAL_MspInit+0x44>)
 8021168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802116a:	4a0e      	ldr	r2, [pc, #56]	@ (80211a4 <HAL_MspInit+0x44>)
 802116c:	f043 0301 	orr.w	r3, r3, #1
 8021170:	6613      	str	r3, [r2, #96]	@ 0x60
 8021172:	4b0c      	ldr	r3, [pc, #48]	@ (80211a4 <HAL_MspInit+0x44>)
 8021174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021176:	f003 0301 	and.w	r3, r3, #1
 802117a:	607b      	str	r3, [r7, #4]
 802117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802117e:	4b09      	ldr	r3, [pc, #36]	@ (80211a4 <HAL_MspInit+0x44>)
 8021180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021182:	4a08      	ldr	r2, [pc, #32]	@ (80211a4 <HAL_MspInit+0x44>)
 8021184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021188:	6593      	str	r3, [r2, #88]	@ 0x58
 802118a:	4b06      	ldr	r3, [pc, #24]	@ (80211a4 <HAL_MspInit+0x44>)
 802118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021192:	603b      	str	r3, [r7, #0]
 8021194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021196:	bf00      	nop
 8021198:	370c      	adds	r7, #12
 802119a:	46bd      	mov	sp, r7
 802119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a0:	4770      	bx	lr
 80211a2:	bf00      	nop
 80211a4:	40021000 	.word	0x40021000

080211a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80211a8:	b480      	push	{r7}
 80211aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80211ac:	bf00      	nop
 80211ae:	e7fd      	b.n	80211ac <NMI_Handler+0x4>

080211b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80211b0:	b480      	push	{r7}
 80211b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80211b4:	bf00      	nop
 80211b6:	e7fd      	b.n	80211b4 <HardFault_Handler+0x4>

080211b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80211b8:	b480      	push	{r7}
 80211ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80211bc:	bf00      	nop
 80211be:	e7fd      	b.n	80211bc <MemManage_Handler+0x4>

080211c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80211c0:	b480      	push	{r7}
 80211c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80211c4:	bf00      	nop
 80211c6:	e7fd      	b.n	80211c4 <BusFault_Handler+0x4>

080211c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80211c8:	b480      	push	{r7}
 80211ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80211cc:	bf00      	nop
 80211ce:	e7fd      	b.n	80211cc <UsageFault_Handler+0x4>

080211d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80211d0:	b480      	push	{r7}
 80211d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80211d4:	bf00      	nop
 80211d6:	46bd      	mov	sp, r7
 80211d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211dc:	4770      	bx	lr

080211de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80211de:	b480      	push	{r7}
 80211e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80211e2:	bf00      	nop
 80211e4:	46bd      	mov	sp, r7
 80211e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211ea:	4770      	bx	lr

080211ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80211ec:	b480      	push	{r7}
 80211ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80211f0:	bf00      	nop
 80211f2:	46bd      	mov	sp, r7
 80211f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211f8:	4770      	bx	lr

080211fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80211fa:	b580      	push	{r7, lr}
 80211fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80211fe:	f000 f959 	bl	80214b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021202:	bf00      	nop
 8021204:	bd80      	pop	{r7, pc}

08021206 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8021206:	b480      	push	{r7}
 8021208:	af00      	add	r7, sp, #0
	return 1;
 802120a:	2301      	movs	r3, #1
}
 802120c:	4618      	mov	r0, r3
 802120e:	46bd      	mov	sp, r7
 8021210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021214:	4770      	bx	lr

08021216 <_kill>:

int _kill(int pid, int sig)
{
 8021216:	b580      	push	{r7, lr}
 8021218:	b082      	sub	sp, #8
 802121a:	af00      	add	r7, sp, #0
 802121c:	6078      	str	r0, [r7, #4]
 802121e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8021220:	f001 ffe6 	bl	80231f0 <__errno>
 8021224:	4603      	mov	r3, r0
 8021226:	2216      	movs	r2, #22
 8021228:	601a      	str	r2, [r3, #0]
	return -1;
 802122a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 802122e:	4618      	mov	r0, r3
 8021230:	3708      	adds	r7, #8
 8021232:	46bd      	mov	sp, r7
 8021234:	bd80      	pop	{r7, pc}

08021236 <_exit>:

void _exit (int status)
{
 8021236:	b580      	push	{r7, lr}
 8021238:	b082      	sub	sp, #8
 802123a:	af00      	add	r7, sp, #0
 802123c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802123e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021242:	6878      	ldr	r0, [r7, #4]
 8021244:	f7ff ffe7 	bl	8021216 <_kill>
	while (1) {}		/* Make sure we hang here */
 8021248:	bf00      	nop
 802124a:	e7fd      	b.n	8021248 <_exit+0x12>

0802124c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802124c:	b580      	push	{r7, lr}
 802124e:	b086      	sub	sp, #24
 8021250:	af00      	add	r7, sp, #0
 8021252:	60f8      	str	r0, [r7, #12]
 8021254:	60b9      	str	r1, [r7, #8]
 8021256:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021258:	2300      	movs	r3, #0
 802125a:	617b      	str	r3, [r7, #20]
 802125c:	e00a      	b.n	8021274 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802125e:	f3af 8000 	nop.w
 8021262:	4601      	mov	r1, r0
 8021264:	68bb      	ldr	r3, [r7, #8]
 8021266:	1c5a      	adds	r2, r3, #1
 8021268:	60ba      	str	r2, [r7, #8]
 802126a:	b2ca      	uxtb	r2, r1
 802126c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802126e:	697b      	ldr	r3, [r7, #20]
 8021270:	3301      	adds	r3, #1
 8021272:	617b      	str	r3, [r7, #20]
 8021274:	697a      	ldr	r2, [r7, #20]
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	429a      	cmp	r2, r3
 802127a:	dbf0      	blt.n	802125e <_read+0x12>
	}

return len;
 802127c:	687b      	ldr	r3, [r7, #4]
}
 802127e:	4618      	mov	r0, r3
 8021280:	3718      	adds	r7, #24
 8021282:	46bd      	mov	sp, r7
 8021284:	bd80      	pop	{r7, pc}

08021286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021286:	b580      	push	{r7, lr}
 8021288:	b086      	sub	sp, #24
 802128a:	af00      	add	r7, sp, #0
 802128c:	60f8      	str	r0, [r7, #12]
 802128e:	60b9      	str	r1, [r7, #8]
 8021290:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021292:	2300      	movs	r3, #0
 8021294:	617b      	str	r3, [r7, #20]
 8021296:	e009      	b.n	80212ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8021298:	68bb      	ldr	r3, [r7, #8]
 802129a:	1c5a      	adds	r2, r3, #1
 802129c:	60ba      	str	r2, [r7, #8]
 802129e:	781b      	ldrb	r3, [r3, #0]
 80212a0:	4618      	mov	r0, r3
 80212a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80212a6:	697b      	ldr	r3, [r7, #20]
 80212a8:	3301      	adds	r3, #1
 80212aa:	617b      	str	r3, [r7, #20]
 80212ac:	697a      	ldr	r2, [r7, #20]
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	429a      	cmp	r2, r3
 80212b2:	dbf1      	blt.n	8021298 <_write+0x12>
	}
	return len;
 80212b4:	687b      	ldr	r3, [r7, #4]
}
 80212b6:	4618      	mov	r0, r3
 80212b8:	3718      	adds	r7, #24
 80212ba:	46bd      	mov	sp, r7
 80212bc:	bd80      	pop	{r7, pc}

080212be <_close>:

int _close(int file)
{
 80212be:	b480      	push	{r7}
 80212c0:	b083      	sub	sp, #12
 80212c2:	af00      	add	r7, sp, #0
 80212c4:	6078      	str	r0, [r7, #4]
	return -1;
 80212c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80212ca:	4618      	mov	r0, r3
 80212cc:	370c      	adds	r7, #12
 80212ce:	46bd      	mov	sp, r7
 80212d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d4:	4770      	bx	lr

080212d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80212d6:	b480      	push	{r7}
 80212d8:	b083      	sub	sp, #12
 80212da:	af00      	add	r7, sp, #0
 80212dc:	6078      	str	r0, [r7, #4]
 80212de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80212e0:	683b      	ldr	r3, [r7, #0]
 80212e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80212e6:	605a      	str	r2, [r3, #4]
	return 0;
 80212e8:	2300      	movs	r3, #0
}
 80212ea:	4618      	mov	r0, r3
 80212ec:	370c      	adds	r7, #12
 80212ee:	46bd      	mov	sp, r7
 80212f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212f4:	4770      	bx	lr

080212f6 <_isatty>:

int _isatty(int file)
{
 80212f6:	b480      	push	{r7}
 80212f8:	b083      	sub	sp, #12
 80212fa:	af00      	add	r7, sp, #0
 80212fc:	6078      	str	r0, [r7, #4]
	return 1;
 80212fe:	2301      	movs	r3, #1
}
 8021300:	4618      	mov	r0, r3
 8021302:	370c      	adds	r7, #12
 8021304:	46bd      	mov	sp, r7
 8021306:	f85d 7b04 	ldr.w	r7, [sp], #4
 802130a:	4770      	bx	lr

0802130c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802130c:	b480      	push	{r7}
 802130e:	b085      	sub	sp, #20
 8021310:	af00      	add	r7, sp, #0
 8021312:	60f8      	str	r0, [r7, #12]
 8021314:	60b9      	str	r1, [r7, #8]
 8021316:	607a      	str	r2, [r7, #4]
	return 0;
 8021318:	2300      	movs	r3, #0
}
 802131a:	4618      	mov	r0, r3
 802131c:	3714      	adds	r7, #20
 802131e:	46bd      	mov	sp, r7
 8021320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021324:	4770      	bx	lr
	...

08021328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021328:	b580      	push	{r7, lr}
 802132a:	b086      	sub	sp, #24
 802132c:	af00      	add	r7, sp, #0
 802132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021330:	4a14      	ldr	r2, [pc, #80]	@ (8021384 <_sbrk+0x5c>)
 8021332:	4b15      	ldr	r3, [pc, #84]	@ (8021388 <_sbrk+0x60>)
 8021334:	1ad3      	subs	r3, r2, r3
 8021336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021338:	697b      	ldr	r3, [r7, #20]
 802133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802133c:	4b13      	ldr	r3, [pc, #76]	@ (802138c <_sbrk+0x64>)
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	2b00      	cmp	r3, #0
 8021342:	d102      	bne.n	802134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021344:	4b11      	ldr	r3, [pc, #68]	@ (802138c <_sbrk+0x64>)
 8021346:	4a12      	ldr	r2, [pc, #72]	@ (8021390 <_sbrk+0x68>)
 8021348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802134a:	4b10      	ldr	r3, [pc, #64]	@ (802138c <_sbrk+0x64>)
 802134c:	681a      	ldr	r2, [r3, #0]
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	4413      	add	r3, r2
 8021352:	693a      	ldr	r2, [r7, #16]
 8021354:	429a      	cmp	r2, r3
 8021356:	d207      	bcs.n	8021368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021358:	f001 ff4a 	bl	80231f0 <__errno>
 802135c:	4603      	mov	r3, r0
 802135e:	220c      	movs	r2, #12
 8021360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021366:	e009      	b.n	802137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021368:	4b08      	ldr	r3, [pc, #32]	@ (802138c <_sbrk+0x64>)
 802136a:	681b      	ldr	r3, [r3, #0]
 802136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802136e:	4b07      	ldr	r3, [pc, #28]	@ (802138c <_sbrk+0x64>)
 8021370:	681a      	ldr	r2, [r3, #0]
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	4413      	add	r3, r2
 8021376:	4a05      	ldr	r2, [pc, #20]	@ (802138c <_sbrk+0x64>)
 8021378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802137a:	68fb      	ldr	r3, [r7, #12]
}
 802137c:	4618      	mov	r0, r3
 802137e:	3718      	adds	r7, #24
 8021380:	46bd      	mov	sp, r7
 8021382:	bd80      	pop	{r7, pc}
 8021384:	200a0000 	.word	0x200a0000
 8021388:	00000400 	.word	0x00000400
 802138c:	200001f0 	.word	0x200001f0
 8021390:	20000348 	.word	0x20000348

08021394 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8021394:	b480      	push	{r7}
 8021396:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8021398:	4b06      	ldr	r3, [pc, #24]	@ (80213b4 <SystemInit+0x20>)
 802139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802139e:	4a05      	ldr	r2, [pc, #20]	@ (80213b4 <SystemInit+0x20>)
 80213a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80213a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80213a8:	bf00      	nop
 80213aa:	46bd      	mov	sp, r7
 80213ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213b0:	4770      	bx	lr
 80213b2:	bf00      	nop
 80213b4:	e000ed00 	.word	0xe000ed00

080213b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80213b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80213f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80213bc:	f7ff ffea 	bl	8021394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80213c0:	480c      	ldr	r0, [pc, #48]	@ (80213f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80213c2:	490d      	ldr	r1, [pc, #52]	@ (80213f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80213c4:	4a0d      	ldr	r2, [pc, #52]	@ (80213fc <LoopForever+0xe>)
  movs r3, #0
 80213c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80213c8:	e002      	b.n	80213d0 <LoopCopyDataInit>

080213ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80213ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80213cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80213ce:	3304      	adds	r3, #4

080213d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80213d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80213d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80213d4:	d3f9      	bcc.n	80213ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80213d6:	4a0a      	ldr	r2, [pc, #40]	@ (8021400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80213d8:	4c0a      	ldr	r4, [pc, #40]	@ (8021404 <LoopForever+0x16>)
  movs r3, #0
 80213da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80213dc:	e001      	b.n	80213e2 <LoopFillZerobss>

080213de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80213de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80213e0:	3204      	adds	r2, #4

080213e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80213e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80213e4:	d3fb      	bcc.n	80213de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80213e6:	f001 ff09 	bl	80231fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80213ea:	f7ff fd17 	bl	8020e1c <main>

080213ee <LoopForever>:

LoopForever:
    b LoopForever
 80213ee:	e7fe      	b.n	80213ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80213f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80213f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80213f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80213fc:	08025620 	.word	0x08025620
  ldr r2, =_sbss
 8021400:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8021404:	20000344 	.word	0x20000344

08021408 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8021408:	e7fe      	b.n	8021408 <ADC1_IRQHandler>

0802140a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802140a:	b580      	push	{r7, lr}
 802140c:	b082      	sub	sp, #8
 802140e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8021410:	2300      	movs	r3, #0
 8021412:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021414:	2003      	movs	r0, #3
 8021416:	f000 f91f 	bl	8021658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802141a:	2000      	movs	r0, #0
 802141c:	f000 f80e 	bl	802143c <HAL_InitTick>
 8021420:	4603      	mov	r3, r0
 8021422:	2b00      	cmp	r3, #0
 8021424:	d002      	beq.n	802142c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8021426:	2301      	movs	r3, #1
 8021428:	71fb      	strb	r3, [r7, #7]
 802142a:	e001      	b.n	8021430 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 802142c:	f7ff fe98 	bl	8021160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8021430:	79fb      	ldrb	r3, [r7, #7]
}
 8021432:	4618      	mov	r0, r3
 8021434:	3708      	adds	r7, #8
 8021436:	46bd      	mov	sp, r7
 8021438:	bd80      	pop	{r7, pc}
	...

0802143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802143c:	b580      	push	{r7, lr}
 802143e:	b084      	sub	sp, #16
 8021440:	af00      	add	r7, sp, #0
 8021442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8021444:	2300      	movs	r3, #0
 8021446:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8021448:	4b17      	ldr	r3, [pc, #92]	@ (80214a8 <HAL_InitTick+0x6c>)
 802144a:	781b      	ldrb	r3, [r3, #0]
 802144c:	2b00      	cmp	r3, #0
 802144e:	d023      	beq.n	8021498 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8021450:	4b16      	ldr	r3, [pc, #88]	@ (80214ac <HAL_InitTick+0x70>)
 8021452:	681a      	ldr	r2, [r3, #0]
 8021454:	4b14      	ldr	r3, [pc, #80]	@ (80214a8 <HAL_InitTick+0x6c>)
 8021456:	781b      	ldrb	r3, [r3, #0]
 8021458:	4619      	mov	r1, r3
 802145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8021462:	fbb2 f3f3 	udiv	r3, r2, r3
 8021466:	4618      	mov	r0, r3
 8021468:	f000 f91d 	bl	80216a6 <HAL_SYSTICK_Config>
 802146c:	4603      	mov	r3, r0
 802146e:	2b00      	cmp	r3, #0
 8021470:	d10f      	bne.n	8021492 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	2b0f      	cmp	r3, #15
 8021476:	d809      	bhi.n	802148c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021478:	2200      	movs	r2, #0
 802147a:	6879      	ldr	r1, [r7, #4]
 802147c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021480:	f000 f8f5 	bl	802166e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021484:	4a0a      	ldr	r2, [pc, #40]	@ (80214b0 <HAL_InitTick+0x74>)
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	6013      	str	r3, [r2, #0]
 802148a:	e007      	b.n	802149c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 802148c:	2301      	movs	r3, #1
 802148e:	73fb      	strb	r3, [r7, #15]
 8021490:	e004      	b.n	802149c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8021492:	2301      	movs	r3, #1
 8021494:	73fb      	strb	r3, [r7, #15]
 8021496:	e001      	b.n	802149c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8021498:	2301      	movs	r3, #1
 802149a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 802149c:	7bfb      	ldrb	r3, [r7, #15]
}
 802149e:	4618      	mov	r0, r3
 80214a0:	3710      	adds	r7, #16
 80214a2:	46bd      	mov	sp, r7
 80214a4:	bd80      	pop	{r7, pc}
 80214a6:	bf00      	nop
 80214a8:	20000008 	.word	0x20000008
 80214ac:	20000000 	.word	0x20000000
 80214b0:	20000004 	.word	0x20000004

080214b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80214b4:	b480      	push	{r7}
 80214b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80214b8:	4b06      	ldr	r3, [pc, #24]	@ (80214d4 <HAL_IncTick+0x20>)
 80214ba:	781b      	ldrb	r3, [r3, #0]
 80214bc:	461a      	mov	r2, r3
 80214be:	4b06      	ldr	r3, [pc, #24]	@ (80214d8 <HAL_IncTick+0x24>)
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	4413      	add	r3, r2
 80214c4:	4a04      	ldr	r2, [pc, #16]	@ (80214d8 <HAL_IncTick+0x24>)
 80214c6:	6013      	str	r3, [r2, #0]
}
 80214c8:	bf00      	nop
 80214ca:	46bd      	mov	sp, r7
 80214cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214d0:	4770      	bx	lr
 80214d2:	bf00      	nop
 80214d4:	20000008 	.word	0x20000008
 80214d8:	200001f4 	.word	0x200001f4

080214dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80214dc:	b480      	push	{r7}
 80214de:	af00      	add	r7, sp, #0
  return uwTick;
 80214e0:	4b03      	ldr	r3, [pc, #12]	@ (80214f0 <HAL_GetTick+0x14>)
 80214e2:	681b      	ldr	r3, [r3, #0]
}
 80214e4:	4618      	mov	r0, r3
 80214e6:	46bd      	mov	sp, r7
 80214e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ec:	4770      	bx	lr
 80214ee:	bf00      	nop
 80214f0:	200001f4 	.word	0x200001f4

080214f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80214f4:	b480      	push	{r7}
 80214f6:	b085      	sub	sp, #20
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	f003 0307 	and.w	r3, r3, #7
 8021502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021504:	4b0c      	ldr	r3, [pc, #48]	@ (8021538 <__NVIC_SetPriorityGrouping+0x44>)
 8021506:	68db      	ldr	r3, [r3, #12]
 8021508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802150a:	68ba      	ldr	r2, [r7, #8]
 802150c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8021510:	4013      	ands	r3, r2
 8021512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021514:	68fb      	ldr	r3, [r7, #12]
 8021516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021518:	68bb      	ldr	r3, [r7, #8]
 802151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802151c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8021520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8021524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021526:	4a04      	ldr	r2, [pc, #16]	@ (8021538 <__NVIC_SetPriorityGrouping+0x44>)
 8021528:	68bb      	ldr	r3, [r7, #8]
 802152a:	60d3      	str	r3, [r2, #12]
}
 802152c:	bf00      	nop
 802152e:	3714      	adds	r7, #20
 8021530:	46bd      	mov	sp, r7
 8021532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021536:	4770      	bx	lr
 8021538:	e000ed00 	.word	0xe000ed00

0802153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802153c:	b480      	push	{r7}
 802153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021540:	4b04      	ldr	r3, [pc, #16]	@ (8021554 <__NVIC_GetPriorityGrouping+0x18>)
 8021542:	68db      	ldr	r3, [r3, #12]
 8021544:	0a1b      	lsrs	r3, r3, #8
 8021546:	f003 0307 	and.w	r3, r3, #7
}
 802154a:	4618      	mov	r0, r3
 802154c:	46bd      	mov	sp, r7
 802154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021552:	4770      	bx	lr
 8021554:	e000ed00 	.word	0xe000ed00

08021558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021558:	b480      	push	{r7}
 802155a:	b083      	sub	sp, #12
 802155c:	af00      	add	r7, sp, #0
 802155e:	4603      	mov	r3, r0
 8021560:	6039      	str	r1, [r7, #0]
 8021562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021568:	2b00      	cmp	r3, #0
 802156a:	db0a      	blt.n	8021582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802156c:	683b      	ldr	r3, [r7, #0]
 802156e:	b2da      	uxtb	r2, r3
 8021570:	490c      	ldr	r1, [pc, #48]	@ (80215a4 <__NVIC_SetPriority+0x4c>)
 8021572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021576:	0112      	lsls	r2, r2, #4
 8021578:	b2d2      	uxtb	r2, r2
 802157a:	440b      	add	r3, r1
 802157c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021580:	e00a      	b.n	8021598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021582:	683b      	ldr	r3, [r7, #0]
 8021584:	b2da      	uxtb	r2, r3
 8021586:	4908      	ldr	r1, [pc, #32]	@ (80215a8 <__NVIC_SetPriority+0x50>)
 8021588:	79fb      	ldrb	r3, [r7, #7]
 802158a:	f003 030f 	and.w	r3, r3, #15
 802158e:	3b04      	subs	r3, #4
 8021590:	0112      	lsls	r2, r2, #4
 8021592:	b2d2      	uxtb	r2, r2
 8021594:	440b      	add	r3, r1
 8021596:	761a      	strb	r2, [r3, #24]
}
 8021598:	bf00      	nop
 802159a:	370c      	adds	r7, #12
 802159c:	46bd      	mov	sp, r7
 802159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215a2:	4770      	bx	lr
 80215a4:	e000e100 	.word	0xe000e100
 80215a8:	e000ed00 	.word	0xe000ed00

080215ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80215ac:	b480      	push	{r7}
 80215ae:	b089      	sub	sp, #36	@ 0x24
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	60f8      	str	r0, [r7, #12]
 80215b4:	60b9      	str	r1, [r7, #8]
 80215b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80215b8:	68fb      	ldr	r3, [r7, #12]
 80215ba:	f003 0307 	and.w	r3, r3, #7
 80215be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80215c0:	69fb      	ldr	r3, [r7, #28]
 80215c2:	f1c3 0307 	rsb	r3, r3, #7
 80215c6:	2b04      	cmp	r3, #4
 80215c8:	bf28      	it	cs
 80215ca:	2304      	movcs	r3, #4
 80215cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80215ce:	69fb      	ldr	r3, [r7, #28]
 80215d0:	3304      	adds	r3, #4
 80215d2:	2b06      	cmp	r3, #6
 80215d4:	d902      	bls.n	80215dc <NVIC_EncodePriority+0x30>
 80215d6:	69fb      	ldr	r3, [r7, #28]
 80215d8:	3b03      	subs	r3, #3
 80215da:	e000      	b.n	80215de <NVIC_EncodePriority+0x32>
 80215dc:	2300      	movs	r3, #0
 80215de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80215e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80215e4:	69bb      	ldr	r3, [r7, #24]
 80215e6:	fa02 f303 	lsl.w	r3, r2, r3
 80215ea:	43da      	mvns	r2, r3
 80215ec:	68bb      	ldr	r3, [r7, #8]
 80215ee:	401a      	ands	r2, r3
 80215f0:	697b      	ldr	r3, [r7, #20]
 80215f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80215f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80215f8:	697b      	ldr	r3, [r7, #20]
 80215fa:	fa01 f303 	lsl.w	r3, r1, r3
 80215fe:	43d9      	mvns	r1, r3
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021604:	4313      	orrs	r3, r2
         );
}
 8021606:	4618      	mov	r0, r3
 8021608:	3724      	adds	r7, #36	@ 0x24
 802160a:	46bd      	mov	sp, r7
 802160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021610:	4770      	bx	lr
	...

08021614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8021614:	b580      	push	{r7, lr}
 8021616:	b082      	sub	sp, #8
 8021618:	af00      	add	r7, sp, #0
 802161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	3b01      	subs	r3, #1
 8021620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8021624:	d301      	bcc.n	802162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8021626:	2301      	movs	r3, #1
 8021628:	e00f      	b.n	802164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802162a:	4a0a      	ldr	r2, [pc, #40]	@ (8021654 <SysTick_Config+0x40>)
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	3b01      	subs	r3, #1
 8021630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8021632:	210f      	movs	r1, #15
 8021634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021638:	f7ff ff8e 	bl	8021558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802163c:	4b05      	ldr	r3, [pc, #20]	@ (8021654 <SysTick_Config+0x40>)
 802163e:	2200      	movs	r2, #0
 8021640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021642:	4b04      	ldr	r3, [pc, #16]	@ (8021654 <SysTick_Config+0x40>)
 8021644:	2207      	movs	r2, #7
 8021646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021648:	2300      	movs	r3, #0
}
 802164a:	4618      	mov	r0, r3
 802164c:	3708      	adds	r7, #8
 802164e:	46bd      	mov	sp, r7
 8021650:	bd80      	pop	{r7, pc}
 8021652:	bf00      	nop
 8021654:	e000e010 	.word	0xe000e010

08021658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021658:	b580      	push	{r7, lr}
 802165a:	b082      	sub	sp, #8
 802165c:	af00      	add	r7, sp, #0
 802165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021660:	6878      	ldr	r0, [r7, #4]
 8021662:	f7ff ff47 	bl	80214f4 <__NVIC_SetPriorityGrouping>
}
 8021666:	bf00      	nop
 8021668:	3708      	adds	r7, #8
 802166a:	46bd      	mov	sp, r7
 802166c:	bd80      	pop	{r7, pc}

0802166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802166e:	b580      	push	{r7, lr}
 8021670:	b086      	sub	sp, #24
 8021672:	af00      	add	r7, sp, #0
 8021674:	4603      	mov	r3, r0
 8021676:	60b9      	str	r1, [r7, #8]
 8021678:	607a      	str	r2, [r7, #4]
 802167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 802167c:	2300      	movs	r3, #0
 802167e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8021680:	f7ff ff5c 	bl	802153c <__NVIC_GetPriorityGrouping>
 8021684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021686:	687a      	ldr	r2, [r7, #4]
 8021688:	68b9      	ldr	r1, [r7, #8]
 802168a:	6978      	ldr	r0, [r7, #20]
 802168c:	f7ff ff8e 	bl	80215ac <NVIC_EncodePriority>
 8021690:	4602      	mov	r2, r0
 8021692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021696:	4611      	mov	r1, r2
 8021698:	4618      	mov	r0, r3
 802169a:	f7ff ff5d 	bl	8021558 <__NVIC_SetPriority>
}
 802169e:	bf00      	nop
 80216a0:	3718      	adds	r7, #24
 80216a2:	46bd      	mov	sp, r7
 80216a4:	bd80      	pop	{r7, pc}

080216a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80216a6:	b580      	push	{r7, lr}
 80216a8:	b082      	sub	sp, #8
 80216aa:	af00      	add	r7, sp, #0
 80216ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80216ae:	6878      	ldr	r0, [r7, #4]
 80216b0:	f7ff ffb0 	bl	8021614 <SysTick_Config>
 80216b4:	4603      	mov	r3, r0
}
 80216b6:	4618      	mov	r0, r3
 80216b8:	3708      	adds	r7, #8
 80216ba:	46bd      	mov	sp, r7
 80216bc:	bd80      	pop	{r7, pc}
	...

080216c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80216c0:	b480      	push	{r7}
 80216c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80216c4:	4b0d      	ldr	r3, [pc, #52]	@ (80216fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80216cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80216d0:	d102      	bne.n	80216d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80216d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80216d6:	e00b      	b.n	80216f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80216d8:	4b08      	ldr	r3, [pc, #32]	@ (80216fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80216da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80216de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80216e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80216e6:	d102      	bne.n	80216ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80216e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80216ec:	e000      	b.n	80216f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80216ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80216f0:	4618      	mov	r0, r3
 80216f2:	46bd      	mov	sp, r7
 80216f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216f8:	4770      	bx	lr
 80216fa:	bf00      	nop
 80216fc:	40007000 	.word	0x40007000

08021700 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8021700:	b480      	push	{r7}
 8021702:	b085      	sub	sp, #20
 8021704:	af00      	add	r7, sp, #0
 8021706:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	2b00      	cmp	r3, #0
 802170c:	d141      	bne.n	8021792 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 802170e:	4b4b      	ldr	r3, [pc, #300]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021710:	681b      	ldr	r3, [r3, #0]
 8021712:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8021716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802171a:	d131      	bne.n	8021780 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 802171c:	4b47      	ldr	r3, [pc, #284]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802171e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021722:	4a46      	ldr	r2, [pc, #280]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 802172c:	4b43      	ldr	r3, [pc, #268]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802172e:	681b      	ldr	r3, [r3, #0]
 8021730:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021734:	4a41      	ldr	r2, [pc, #260]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802173a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 802173c:	4b40      	ldr	r3, [pc, #256]	@ (8021840 <HAL_PWREx_ControlVoltageScaling+0x140>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	2232      	movs	r2, #50	@ 0x32
 8021742:	fb02 f303 	mul.w	r3, r2, r3
 8021746:	4a3f      	ldr	r2, [pc, #252]	@ (8021844 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8021748:	fba2 2303 	umull	r2, r3, r2, r3
 802174c:	0c9b      	lsrs	r3, r3, #18
 802174e:	3301      	adds	r3, #1
 8021750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021752:	e002      	b.n	802175a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8021754:	68fb      	ldr	r3, [r7, #12]
 8021756:	3b01      	subs	r3, #1
 8021758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 802175a:	4b38      	ldr	r3, [pc, #224]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802175c:	695b      	ldr	r3, [r3, #20]
 802175e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021766:	d102      	bne.n	802176e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8021768:	68fb      	ldr	r3, [r7, #12]
 802176a:	2b00      	cmp	r3, #0
 802176c:	d1f2      	bne.n	8021754 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 802176e:	4b33      	ldr	r3, [pc, #204]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021770:	695b      	ldr	r3, [r3, #20]
 8021772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802177a:	d158      	bne.n	802182e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 802177c:	2303      	movs	r3, #3
 802177e:	e057      	b.n	8021830 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021780:	4b2e      	ldr	r3, [pc, #184]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021786:	4a2d      	ldr	r2, [pc, #180]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802178c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8021790:	e04d      	b.n	802182e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021798:	d141      	bne.n	802181e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 802179a:	4b28      	ldr	r3, [pc, #160]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802179c:	681b      	ldr	r3, [r3, #0]
 802179e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80217a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80217a6:	d131      	bne.n	802180c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80217a8:	4b24      	ldr	r3, [pc, #144]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80217aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80217ae:	4a23      	ldr	r2, [pc, #140]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80217b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80217b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80217b8:	4b20      	ldr	r3, [pc, #128]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80217c0:	4a1e      	ldr	r2, [pc, #120]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80217c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80217c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80217c8:	4b1d      	ldr	r3, [pc, #116]	@ (8021840 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80217ca:	681b      	ldr	r3, [r3, #0]
 80217cc:	2232      	movs	r2, #50	@ 0x32
 80217ce:	fb02 f303 	mul.w	r3, r2, r3
 80217d2:	4a1c      	ldr	r2, [pc, #112]	@ (8021844 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80217d4:	fba2 2303 	umull	r2, r3, r2, r3
 80217d8:	0c9b      	lsrs	r3, r3, #18
 80217da:	3301      	adds	r3, #1
 80217dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80217de:	e002      	b.n	80217e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80217e0:	68fb      	ldr	r3, [r7, #12]
 80217e2:	3b01      	subs	r3, #1
 80217e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80217e6:	4b15      	ldr	r3, [pc, #84]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80217e8:	695b      	ldr	r3, [r3, #20]
 80217ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80217ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80217f2:	d102      	bne.n	80217fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80217f4:	68fb      	ldr	r3, [r7, #12]
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	d1f2      	bne.n	80217e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80217fa:	4b10      	ldr	r3, [pc, #64]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80217fc:	695b      	ldr	r3, [r3, #20]
 80217fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021806:	d112      	bne.n	802182e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8021808:	2303      	movs	r3, #3
 802180a:	e011      	b.n	8021830 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 802180c:	4b0b      	ldr	r3, [pc, #44]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802180e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021812:	4a0a      	ldr	r2, [pc, #40]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021818:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 802181c:	e007      	b.n	802182e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 802181e:	4b07      	ldr	r3, [pc, #28]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021820:	681b      	ldr	r3, [r3, #0]
 8021822:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021826:	4a05      	ldr	r2, [pc, #20]	@ (802183c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021828:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 802182c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 802182e:	2300      	movs	r3, #0
}
 8021830:	4618      	mov	r0, r3
 8021832:	3714      	adds	r7, #20
 8021834:	46bd      	mov	sp, r7
 8021836:	f85d 7b04 	ldr.w	r7, [sp], #4
 802183a:	4770      	bx	lr
 802183c:	40007000 	.word	0x40007000
 8021840:	20000000 	.word	0x20000000
 8021844:	431bde83 	.word	0x431bde83

08021848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021848:	b580      	push	{r7, lr}
 802184a:	b088      	sub	sp, #32
 802184c:	af00      	add	r7, sp, #0
 802184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	2b00      	cmp	r3, #0
 8021854:	d102      	bne.n	802185c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8021856:	2301      	movs	r3, #1
 8021858:	f000 bc08 	b.w	802206c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 802185c:	4b96      	ldr	r3, [pc, #600]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 802185e:	689b      	ldr	r3, [r3, #8]
 8021860:	f003 030c 	and.w	r3, r3, #12
 8021864:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021866:	4b94      	ldr	r3, [pc, #592]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021868:	68db      	ldr	r3, [r3, #12]
 802186a:	f003 0303 	and.w	r3, r3, #3
 802186e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	681b      	ldr	r3, [r3, #0]
 8021874:	f003 0310 	and.w	r3, r3, #16
 8021878:	2b00      	cmp	r3, #0
 802187a:	f000 80e4 	beq.w	8021a46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 802187e:	69bb      	ldr	r3, [r7, #24]
 8021880:	2b00      	cmp	r3, #0
 8021882:	d007      	beq.n	8021894 <HAL_RCC_OscConfig+0x4c>
 8021884:	69bb      	ldr	r3, [r7, #24]
 8021886:	2b0c      	cmp	r3, #12
 8021888:	f040 808b 	bne.w	80219a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 802188c:	697b      	ldr	r3, [r7, #20]
 802188e:	2b01      	cmp	r3, #1
 8021890:	f040 8087 	bne.w	80219a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021894:	4b88      	ldr	r3, [pc, #544]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	f003 0302 	and.w	r3, r3, #2
 802189c:	2b00      	cmp	r3, #0
 802189e:	d005      	beq.n	80218ac <HAL_RCC_OscConfig+0x64>
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	699b      	ldr	r3, [r3, #24]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d101      	bne.n	80218ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80218a8:	2301      	movs	r3, #1
 80218aa:	e3df      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80218ac:	687b      	ldr	r3, [r7, #4]
 80218ae:	6a1a      	ldr	r2, [r3, #32]
 80218b0:	4b81      	ldr	r3, [pc, #516]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	f003 0308 	and.w	r3, r3, #8
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d004      	beq.n	80218c6 <HAL_RCC_OscConfig+0x7e>
 80218bc:	4b7e      	ldr	r3, [pc, #504]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80218be:	681b      	ldr	r3, [r3, #0]
 80218c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80218c4:	e005      	b.n	80218d2 <HAL_RCC_OscConfig+0x8a>
 80218c6:	4b7c      	ldr	r3, [pc, #496]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80218c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80218cc:	091b      	lsrs	r3, r3, #4
 80218ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80218d2:	4293      	cmp	r3, r2
 80218d4:	d223      	bcs.n	802191e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80218d6:	687b      	ldr	r3, [r7, #4]
 80218d8:	6a1b      	ldr	r3, [r3, #32]
 80218da:	4618      	mov	r0, r3
 80218dc:	f000 fd94 	bl	8022408 <RCC_SetFlashLatencyFromMSIRange>
 80218e0:	4603      	mov	r3, r0
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d001      	beq.n	80218ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80218e6:	2301      	movs	r3, #1
 80218e8:	e3c0      	b.n	802206c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80218ea:	4b73      	ldr	r3, [pc, #460]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80218ec:	681b      	ldr	r3, [r3, #0]
 80218ee:	4a72      	ldr	r2, [pc, #456]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80218f0:	f043 0308 	orr.w	r3, r3, #8
 80218f4:	6013      	str	r3, [r2, #0]
 80218f6:	4b70      	ldr	r3, [pc, #448]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80218f8:	681b      	ldr	r3, [r3, #0]
 80218fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80218fe:	687b      	ldr	r3, [r7, #4]
 8021900:	6a1b      	ldr	r3, [r3, #32]
 8021902:	496d      	ldr	r1, [pc, #436]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021904:	4313      	orrs	r3, r2
 8021906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021908:	4b6b      	ldr	r3, [pc, #428]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 802190a:	685b      	ldr	r3, [r3, #4]
 802190c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	69db      	ldr	r3, [r3, #28]
 8021914:	021b      	lsls	r3, r3, #8
 8021916:	4968      	ldr	r1, [pc, #416]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021918:	4313      	orrs	r3, r2
 802191a:	604b      	str	r3, [r1, #4]
 802191c:	e025      	b.n	802196a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 802191e:	4b66      	ldr	r3, [pc, #408]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	4a65      	ldr	r2, [pc, #404]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021924:	f043 0308 	orr.w	r3, r3, #8
 8021928:	6013      	str	r3, [r2, #0]
 802192a:	4b63      	ldr	r3, [pc, #396]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 802192c:	681b      	ldr	r3, [r3, #0]
 802192e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	6a1b      	ldr	r3, [r3, #32]
 8021936:	4960      	ldr	r1, [pc, #384]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021938:	4313      	orrs	r3, r2
 802193a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 802193c:	4b5e      	ldr	r3, [pc, #376]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 802193e:	685b      	ldr	r3, [r3, #4]
 8021940:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	69db      	ldr	r3, [r3, #28]
 8021948:	021b      	lsls	r3, r3, #8
 802194a:	495b      	ldr	r1, [pc, #364]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 802194c:	4313      	orrs	r3, r2
 802194e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021950:	69bb      	ldr	r3, [r7, #24]
 8021952:	2b00      	cmp	r3, #0
 8021954:	d109      	bne.n	802196a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	6a1b      	ldr	r3, [r3, #32]
 802195a:	4618      	mov	r0, r3
 802195c:	f000 fd54 	bl	8022408 <RCC_SetFlashLatencyFromMSIRange>
 8021960:	4603      	mov	r3, r0
 8021962:	2b00      	cmp	r3, #0
 8021964:	d001      	beq.n	802196a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8021966:	2301      	movs	r3, #1
 8021968:	e380      	b.n	802206c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 802196a:	f000 fcc1 	bl	80222f0 <HAL_RCC_GetSysClockFreq>
 802196e:	4602      	mov	r2, r0
 8021970:	4b51      	ldr	r3, [pc, #324]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021972:	689b      	ldr	r3, [r3, #8]
 8021974:	091b      	lsrs	r3, r3, #4
 8021976:	f003 030f 	and.w	r3, r3, #15
 802197a:	4950      	ldr	r1, [pc, #320]	@ (8021abc <HAL_RCC_OscConfig+0x274>)
 802197c:	5ccb      	ldrb	r3, [r1, r3]
 802197e:	f003 031f 	and.w	r3, r3, #31
 8021982:	fa22 f303 	lsr.w	r3, r2, r3
 8021986:	4a4e      	ldr	r2, [pc, #312]	@ (8021ac0 <HAL_RCC_OscConfig+0x278>)
 8021988:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 802198a:	4b4e      	ldr	r3, [pc, #312]	@ (8021ac4 <HAL_RCC_OscConfig+0x27c>)
 802198c:	681b      	ldr	r3, [r3, #0]
 802198e:	4618      	mov	r0, r3
 8021990:	f7ff fd54 	bl	802143c <HAL_InitTick>
 8021994:	4603      	mov	r3, r0
 8021996:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8021998:	7bfb      	ldrb	r3, [r7, #15]
 802199a:	2b00      	cmp	r3, #0
 802199c:	d052      	beq.n	8021a44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 802199e:	7bfb      	ldrb	r3, [r7, #15]
 80219a0:	e364      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80219a2:	687b      	ldr	r3, [r7, #4]
 80219a4:	699b      	ldr	r3, [r3, #24]
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	d032      	beq.n	8021a10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80219aa:	4b43      	ldr	r3, [pc, #268]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219ac:	681b      	ldr	r3, [r3, #0]
 80219ae:	4a42      	ldr	r2, [pc, #264]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219b0:	f043 0301 	orr.w	r3, r3, #1
 80219b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80219b6:	f7ff fd91 	bl	80214dc <HAL_GetTick>
 80219ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80219bc:	e008      	b.n	80219d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80219be:	f7ff fd8d 	bl	80214dc <HAL_GetTick>
 80219c2:	4602      	mov	r2, r0
 80219c4:	693b      	ldr	r3, [r7, #16]
 80219c6:	1ad3      	subs	r3, r2, r3
 80219c8:	2b02      	cmp	r3, #2
 80219ca:	d901      	bls.n	80219d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80219cc:	2303      	movs	r3, #3
 80219ce:	e34d      	b.n	802206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80219d0:	4b39      	ldr	r3, [pc, #228]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	f003 0302 	and.w	r3, r3, #2
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d0f0      	beq.n	80219be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80219dc:	4b36      	ldr	r3, [pc, #216]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	4a35      	ldr	r2, [pc, #212]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219e2:	f043 0308 	orr.w	r3, r3, #8
 80219e6:	6013      	str	r3, [r2, #0]
 80219e8:	4b33      	ldr	r3, [pc, #204]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219ea:	681b      	ldr	r3, [r3, #0]
 80219ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80219f0:	687b      	ldr	r3, [r7, #4]
 80219f2:	6a1b      	ldr	r3, [r3, #32]
 80219f4:	4930      	ldr	r1, [pc, #192]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219f6:	4313      	orrs	r3, r2
 80219f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80219fa:	4b2f      	ldr	r3, [pc, #188]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 80219fc:	685b      	ldr	r3, [r3, #4]
 80219fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021a02:	687b      	ldr	r3, [r7, #4]
 8021a04:	69db      	ldr	r3, [r3, #28]
 8021a06:	021b      	lsls	r3, r3, #8
 8021a08:	492b      	ldr	r1, [pc, #172]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021a0a:	4313      	orrs	r3, r2
 8021a0c:	604b      	str	r3, [r1, #4]
 8021a0e:	e01a      	b.n	8021a46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8021a10:	4b29      	ldr	r3, [pc, #164]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	4a28      	ldr	r2, [pc, #160]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021a16:	f023 0301 	bic.w	r3, r3, #1
 8021a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021a1c:	f7ff fd5e 	bl	80214dc <HAL_GetTick>
 8021a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021a22:	e008      	b.n	8021a36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021a24:	f7ff fd5a 	bl	80214dc <HAL_GetTick>
 8021a28:	4602      	mov	r2, r0
 8021a2a:	693b      	ldr	r3, [r7, #16]
 8021a2c:	1ad3      	subs	r3, r2, r3
 8021a2e:	2b02      	cmp	r3, #2
 8021a30:	d901      	bls.n	8021a36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8021a32:	2303      	movs	r3, #3
 8021a34:	e31a      	b.n	802206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021a36:	4b20      	ldr	r3, [pc, #128]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	f003 0302 	and.w	r3, r3, #2
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d1f0      	bne.n	8021a24 <HAL_RCC_OscConfig+0x1dc>
 8021a42:	e000      	b.n	8021a46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021a46:	687b      	ldr	r3, [r7, #4]
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	f003 0301 	and.w	r3, r3, #1
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d073      	beq.n	8021b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8021a52:	69bb      	ldr	r3, [r7, #24]
 8021a54:	2b08      	cmp	r3, #8
 8021a56:	d005      	beq.n	8021a64 <HAL_RCC_OscConfig+0x21c>
 8021a58:	69bb      	ldr	r3, [r7, #24]
 8021a5a:	2b0c      	cmp	r3, #12
 8021a5c:	d10e      	bne.n	8021a7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021a5e:	697b      	ldr	r3, [r7, #20]
 8021a60:	2b03      	cmp	r3, #3
 8021a62:	d10b      	bne.n	8021a7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021a64:	4b14      	ldr	r3, [pc, #80]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d063      	beq.n	8021b38 <HAL_RCC_OscConfig+0x2f0>
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	685b      	ldr	r3, [r3, #4]
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d15f      	bne.n	8021b38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8021a78:	2301      	movs	r3, #1
 8021a7a:	e2f7      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	685b      	ldr	r3, [r3, #4]
 8021a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021a84:	d106      	bne.n	8021a94 <HAL_RCC_OscConfig+0x24c>
 8021a86:	4b0c      	ldr	r3, [pc, #48]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021a90:	6013      	str	r3, [r2, #0]
 8021a92:	e025      	b.n	8021ae0 <HAL_RCC_OscConfig+0x298>
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	685b      	ldr	r3, [r3, #4]
 8021a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021a9c:	d114      	bne.n	8021ac8 <HAL_RCC_OscConfig+0x280>
 8021a9e:	4b06      	ldr	r3, [pc, #24]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021aa0:	681b      	ldr	r3, [r3, #0]
 8021aa2:	4a05      	ldr	r2, [pc, #20]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8021aa8:	6013      	str	r3, [r2, #0]
 8021aaa:	4b03      	ldr	r3, [pc, #12]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	4a02      	ldr	r2, [pc, #8]	@ (8021ab8 <HAL_RCC_OscConfig+0x270>)
 8021ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021ab4:	6013      	str	r3, [r2, #0]
 8021ab6:	e013      	b.n	8021ae0 <HAL_RCC_OscConfig+0x298>
 8021ab8:	40021000 	.word	0x40021000
 8021abc:	08025260 	.word	0x08025260
 8021ac0:	20000000 	.word	0x20000000
 8021ac4:	20000004 	.word	0x20000004
 8021ac8:	4ba0      	ldr	r3, [pc, #640]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021aca:	681b      	ldr	r3, [r3, #0]
 8021acc:	4a9f      	ldr	r2, [pc, #636]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021ad2:	6013      	str	r3, [r2, #0]
 8021ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021ad6:	681b      	ldr	r3, [r3, #0]
 8021ad8:	4a9c      	ldr	r2, [pc, #624]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	685b      	ldr	r3, [r3, #4]
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d013      	beq.n	8021b10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ae8:	f7ff fcf8 	bl	80214dc <HAL_GetTick>
 8021aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021aee:	e008      	b.n	8021b02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021af0:	f7ff fcf4 	bl	80214dc <HAL_GetTick>
 8021af4:	4602      	mov	r2, r0
 8021af6:	693b      	ldr	r3, [r7, #16]
 8021af8:	1ad3      	subs	r3, r2, r3
 8021afa:	2b64      	cmp	r3, #100	@ 0x64
 8021afc:	d901      	bls.n	8021b02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8021afe:	2303      	movs	r3, #3
 8021b00:	e2b4      	b.n	802206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021b02:	4b92      	ldr	r3, [pc, #584]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021b04:	681b      	ldr	r3, [r3, #0]
 8021b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d0f0      	beq.n	8021af0 <HAL_RCC_OscConfig+0x2a8>
 8021b0e:	e014      	b.n	8021b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021b10:	f7ff fce4 	bl	80214dc <HAL_GetTick>
 8021b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021b16:	e008      	b.n	8021b2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021b18:	f7ff fce0 	bl	80214dc <HAL_GetTick>
 8021b1c:	4602      	mov	r2, r0
 8021b1e:	693b      	ldr	r3, [r7, #16]
 8021b20:	1ad3      	subs	r3, r2, r3
 8021b22:	2b64      	cmp	r3, #100	@ 0x64
 8021b24:	d901      	bls.n	8021b2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8021b26:	2303      	movs	r3, #3
 8021b28:	e2a0      	b.n	802206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021b2a:	4b88      	ldr	r3, [pc, #544]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021b2c:	681b      	ldr	r3, [r3, #0]
 8021b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d1f0      	bne.n	8021b18 <HAL_RCC_OscConfig+0x2d0>
 8021b36:	e000      	b.n	8021b3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	681b      	ldr	r3, [r3, #0]
 8021b3e:	f003 0302 	and.w	r3, r3, #2
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d060      	beq.n	8021c08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8021b46:	69bb      	ldr	r3, [r7, #24]
 8021b48:	2b04      	cmp	r3, #4
 8021b4a:	d005      	beq.n	8021b58 <HAL_RCC_OscConfig+0x310>
 8021b4c:	69bb      	ldr	r3, [r7, #24]
 8021b4e:	2b0c      	cmp	r3, #12
 8021b50:	d119      	bne.n	8021b86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021b52:	697b      	ldr	r3, [r7, #20]
 8021b54:	2b02      	cmp	r3, #2
 8021b56:	d116      	bne.n	8021b86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021b58:	4b7c      	ldr	r3, [pc, #496]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021b60:	2b00      	cmp	r3, #0
 8021b62:	d005      	beq.n	8021b70 <HAL_RCC_OscConfig+0x328>
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	68db      	ldr	r3, [r3, #12]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d101      	bne.n	8021b70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8021b6c:	2301      	movs	r3, #1
 8021b6e:	e27d      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021b70:	4b76      	ldr	r3, [pc, #472]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021b72:	685b      	ldr	r3, [r3, #4]
 8021b74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	691b      	ldr	r3, [r3, #16]
 8021b7c:	061b      	lsls	r3, r3, #24
 8021b7e:	4973      	ldr	r1, [pc, #460]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021b80:	4313      	orrs	r3, r2
 8021b82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021b84:	e040      	b.n	8021c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	68db      	ldr	r3, [r3, #12]
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	d023      	beq.n	8021bd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	4a6e      	ldr	r2, [pc, #440]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021b9a:	f7ff fc9f 	bl	80214dc <HAL_GetTick>
 8021b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021ba0:	e008      	b.n	8021bb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021ba2:	f7ff fc9b 	bl	80214dc <HAL_GetTick>
 8021ba6:	4602      	mov	r2, r0
 8021ba8:	693b      	ldr	r3, [r7, #16]
 8021baa:	1ad3      	subs	r3, r2, r3
 8021bac:	2b02      	cmp	r3, #2
 8021bae:	d901      	bls.n	8021bb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8021bb0:	2303      	movs	r3, #3
 8021bb2:	e25b      	b.n	802206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021bb4:	4b65      	ldr	r3, [pc, #404]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	d0f0      	beq.n	8021ba2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021bc0:	4b62      	ldr	r3, [pc, #392]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021bc2:	685b      	ldr	r3, [r3, #4]
 8021bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	691b      	ldr	r3, [r3, #16]
 8021bcc:	061b      	lsls	r3, r3, #24
 8021bce:	495f      	ldr	r1, [pc, #380]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021bd0:	4313      	orrs	r3, r2
 8021bd2:	604b      	str	r3, [r1, #4]
 8021bd4:	e018      	b.n	8021c08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021bd8:	681b      	ldr	r3, [r3, #0]
 8021bda:	4a5c      	ldr	r2, [pc, #368]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021be2:	f7ff fc7b 	bl	80214dc <HAL_GetTick>
 8021be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021be8:	e008      	b.n	8021bfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021bea:	f7ff fc77 	bl	80214dc <HAL_GetTick>
 8021bee:	4602      	mov	r2, r0
 8021bf0:	693b      	ldr	r3, [r7, #16]
 8021bf2:	1ad3      	subs	r3, r2, r3
 8021bf4:	2b02      	cmp	r3, #2
 8021bf6:	d901      	bls.n	8021bfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8021bf8:	2303      	movs	r3, #3
 8021bfa:	e237      	b.n	802206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021bfc:	4b53      	ldr	r3, [pc, #332]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021bfe:	681b      	ldr	r3, [r3, #0]
 8021c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	d1f0      	bne.n	8021bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	681b      	ldr	r3, [r3, #0]
 8021c0c:	f003 0308 	and.w	r3, r3, #8
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	d03c      	beq.n	8021c8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	695b      	ldr	r3, [r3, #20]
 8021c18:	2b00      	cmp	r3, #0
 8021c1a:	d01c      	beq.n	8021c56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021c22:	4a4a      	ldr	r2, [pc, #296]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021c24:	f043 0301 	orr.w	r3, r3, #1
 8021c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021c2c:	f7ff fc56 	bl	80214dc <HAL_GetTick>
 8021c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021c32:	e008      	b.n	8021c46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021c34:	f7ff fc52 	bl	80214dc <HAL_GetTick>
 8021c38:	4602      	mov	r2, r0
 8021c3a:	693b      	ldr	r3, [r7, #16]
 8021c3c:	1ad3      	subs	r3, r2, r3
 8021c3e:	2b02      	cmp	r3, #2
 8021c40:	d901      	bls.n	8021c46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8021c42:	2303      	movs	r3, #3
 8021c44:	e212      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021c46:	4b41      	ldr	r3, [pc, #260]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021c4c:	f003 0302 	and.w	r3, r3, #2
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d0ef      	beq.n	8021c34 <HAL_RCC_OscConfig+0x3ec>
 8021c54:	e01b      	b.n	8021c8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021c56:	4b3d      	ldr	r3, [pc, #244]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021c5e:	f023 0301 	bic.w	r3, r3, #1
 8021c62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021c66:	f7ff fc39 	bl	80214dc <HAL_GetTick>
 8021c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021c6c:	e008      	b.n	8021c80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021c6e:	f7ff fc35 	bl	80214dc <HAL_GetTick>
 8021c72:	4602      	mov	r2, r0
 8021c74:	693b      	ldr	r3, [r7, #16]
 8021c76:	1ad3      	subs	r3, r2, r3
 8021c78:	2b02      	cmp	r3, #2
 8021c7a:	d901      	bls.n	8021c80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8021c7c:	2303      	movs	r3, #3
 8021c7e:	e1f5      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021c80:	4b32      	ldr	r3, [pc, #200]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021c86:	f003 0302 	and.w	r3, r3, #2
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d1ef      	bne.n	8021c6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021c8e:	687b      	ldr	r3, [r7, #4]
 8021c90:	681b      	ldr	r3, [r3, #0]
 8021c92:	f003 0304 	and.w	r3, r3, #4
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	f000 80a6 	beq.w	8021de8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021c9c:	2300      	movs	r3, #0
 8021c9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8021ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	d10d      	bne.n	8021cc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021cac:	4b27      	ldr	r3, [pc, #156]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021cb0:	4a26      	ldr	r2, [pc, #152]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8021cb8:	4b24      	ldr	r3, [pc, #144]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021cc0:	60bb      	str	r3, [r7, #8]
 8021cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021cc4:	2301      	movs	r3, #1
 8021cc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021cc8:	4b21      	ldr	r3, [pc, #132]	@ (8021d50 <HAL_RCC_OscConfig+0x508>)
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d118      	bne.n	8021d06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8021cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8021d50 <HAL_RCC_OscConfig+0x508>)
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8021d50 <HAL_RCC_OscConfig+0x508>)
 8021cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021ce0:	f7ff fbfc 	bl	80214dc <HAL_GetTick>
 8021ce4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021ce6:	e008      	b.n	8021cfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021ce8:	f7ff fbf8 	bl	80214dc <HAL_GetTick>
 8021cec:	4602      	mov	r2, r0
 8021cee:	693b      	ldr	r3, [r7, #16]
 8021cf0:	1ad3      	subs	r3, r2, r3
 8021cf2:	2b02      	cmp	r3, #2
 8021cf4:	d901      	bls.n	8021cfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8021cf6:	2303      	movs	r3, #3
 8021cf8:	e1b8      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021cfa:	4b15      	ldr	r3, [pc, #84]	@ (8021d50 <HAL_RCC_OscConfig+0x508>)
 8021cfc:	681b      	ldr	r3, [r3, #0]
 8021cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d0f0      	beq.n	8021ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	689b      	ldr	r3, [r3, #8]
 8021d0a:	2b01      	cmp	r3, #1
 8021d0c:	d108      	bne.n	8021d20 <HAL_RCC_OscConfig+0x4d8>
 8021d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021d14:	4a0d      	ldr	r2, [pc, #52]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021d16:	f043 0301 	orr.w	r3, r3, #1
 8021d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021d1e:	e029      	b.n	8021d74 <HAL_RCC_OscConfig+0x52c>
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	689b      	ldr	r3, [r3, #8]
 8021d24:	2b05      	cmp	r3, #5
 8021d26:	d115      	bne.n	8021d54 <HAL_RCC_OscConfig+0x50c>
 8021d28:	4b08      	ldr	r3, [pc, #32]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021d2e:	4a07      	ldr	r2, [pc, #28]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021d30:	f043 0304 	orr.w	r3, r3, #4
 8021d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021d38:	4b04      	ldr	r3, [pc, #16]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021d3e:	4a03      	ldr	r2, [pc, #12]	@ (8021d4c <HAL_RCC_OscConfig+0x504>)
 8021d40:	f043 0301 	orr.w	r3, r3, #1
 8021d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021d48:	e014      	b.n	8021d74 <HAL_RCC_OscConfig+0x52c>
 8021d4a:	bf00      	nop
 8021d4c:	40021000 	.word	0x40021000
 8021d50:	40007000 	.word	0x40007000
 8021d54:	4b9d      	ldr	r3, [pc, #628]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021d5a:	4a9c      	ldr	r2, [pc, #624]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021d5c:	f023 0301 	bic.w	r3, r3, #1
 8021d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021d64:	4b99      	ldr	r3, [pc, #612]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021d6a:	4a98      	ldr	r2, [pc, #608]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021d6c:	f023 0304 	bic.w	r3, r3, #4
 8021d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	689b      	ldr	r3, [r3, #8]
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	d016      	beq.n	8021daa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021d7c:	f7ff fbae 	bl	80214dc <HAL_GetTick>
 8021d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021d82:	e00a      	b.n	8021d9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021d84:	f7ff fbaa 	bl	80214dc <HAL_GetTick>
 8021d88:	4602      	mov	r2, r0
 8021d8a:	693b      	ldr	r3, [r7, #16]
 8021d8c:	1ad3      	subs	r3, r2, r3
 8021d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021d92:	4293      	cmp	r3, r2
 8021d94:	d901      	bls.n	8021d9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8021d96:	2303      	movs	r3, #3
 8021d98:	e168      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021d9a:	4b8c      	ldr	r3, [pc, #560]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021da0:	f003 0302 	and.w	r3, r3, #2
 8021da4:	2b00      	cmp	r3, #0
 8021da6:	d0ed      	beq.n	8021d84 <HAL_RCC_OscConfig+0x53c>
 8021da8:	e015      	b.n	8021dd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021daa:	f7ff fb97 	bl	80214dc <HAL_GetTick>
 8021dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021db0:	e00a      	b.n	8021dc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021db2:	f7ff fb93 	bl	80214dc <HAL_GetTick>
 8021db6:	4602      	mov	r2, r0
 8021db8:	693b      	ldr	r3, [r7, #16]
 8021dba:	1ad3      	subs	r3, r2, r3
 8021dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021dc0:	4293      	cmp	r3, r2
 8021dc2:	d901      	bls.n	8021dc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8021dc4:	2303      	movs	r3, #3
 8021dc6:	e151      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021dc8:	4b80      	ldr	r3, [pc, #512]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021dce:	f003 0302 	and.w	r3, r3, #2
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d1ed      	bne.n	8021db2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021dd6:	7ffb      	ldrb	r3, [r7, #31]
 8021dd8:	2b01      	cmp	r3, #1
 8021dda:	d105      	bne.n	8021de8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021de0:	4a7a      	ldr	r2, [pc, #488]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021de6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	681b      	ldr	r3, [r3, #0]
 8021dec:	f003 0320 	and.w	r3, r3, #32
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d03c      	beq.n	8021e6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8021df4:	687b      	ldr	r3, [r7, #4]
 8021df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	d01c      	beq.n	8021e36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8021dfc:	4b73      	ldr	r3, [pc, #460]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021e02:	4a72      	ldr	r2, [pc, #456]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021e04:	f043 0301 	orr.w	r3, r3, #1
 8021e08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021e0c:	f7ff fb66 	bl	80214dc <HAL_GetTick>
 8021e10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8021e12:	e008      	b.n	8021e26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021e14:	f7ff fb62 	bl	80214dc <HAL_GetTick>
 8021e18:	4602      	mov	r2, r0
 8021e1a:	693b      	ldr	r3, [r7, #16]
 8021e1c:	1ad3      	subs	r3, r2, r3
 8021e1e:	2b02      	cmp	r3, #2
 8021e20:	d901      	bls.n	8021e26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8021e22:	2303      	movs	r3, #3
 8021e24:	e122      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8021e26:	4b69      	ldr	r3, [pc, #420]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021e2c:	f003 0302 	and.w	r3, r3, #2
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d0ef      	beq.n	8021e14 <HAL_RCC_OscConfig+0x5cc>
 8021e34:	e01b      	b.n	8021e6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8021e36:	4b65      	ldr	r3, [pc, #404]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021e3c:	4a63      	ldr	r2, [pc, #396]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021e3e:	f023 0301 	bic.w	r3, r3, #1
 8021e42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021e46:	f7ff fb49 	bl	80214dc <HAL_GetTick>
 8021e4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8021e4c:	e008      	b.n	8021e60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021e4e:	f7ff fb45 	bl	80214dc <HAL_GetTick>
 8021e52:	4602      	mov	r2, r0
 8021e54:	693b      	ldr	r3, [r7, #16]
 8021e56:	1ad3      	subs	r3, r2, r3
 8021e58:	2b02      	cmp	r3, #2
 8021e5a:	d901      	bls.n	8021e60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8021e5c:	2303      	movs	r3, #3
 8021e5e:	e105      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8021e60:	4b5a      	ldr	r3, [pc, #360]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021e66:	f003 0302 	and.w	r3, r3, #2
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d1ef      	bne.n	8021e4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	f000 80f9 	beq.w	802206a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e7c:	2b02      	cmp	r3, #2
 8021e7e:	f040 80cf 	bne.w	8022020 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8021e82:	4b52      	ldr	r3, [pc, #328]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021e84:	68db      	ldr	r3, [r3, #12]
 8021e86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021e88:	697b      	ldr	r3, [r7, #20]
 8021e8a:	f003 0203 	and.w	r2, r3, #3
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021e92:	429a      	cmp	r2, r3
 8021e94:	d12c      	bne.n	8021ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021e96:	697b      	ldr	r3, [r7, #20]
 8021e98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8021e9c:	687b      	ldr	r3, [r7, #4]
 8021e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ea0:	3b01      	subs	r3, #1
 8021ea2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021ea4:	429a      	cmp	r2, r3
 8021ea6:	d123      	bne.n	8021ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021ea8:	697b      	ldr	r3, [r7, #20]
 8021eaa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021eb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021eb4:	429a      	cmp	r2, r3
 8021eb6:	d11b      	bne.n	8021ef0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021eb8:	697b      	ldr	r3, [r7, #20]
 8021eba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021ec2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021ec4:	429a      	cmp	r2, r3
 8021ec6:	d113      	bne.n	8021ef0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021ec8:	697b      	ldr	r3, [r7, #20]
 8021eca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021ed2:	085b      	lsrs	r3, r3, #1
 8021ed4:	3b01      	subs	r3, #1
 8021ed6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021ed8:	429a      	cmp	r2, r3
 8021eda:	d109      	bne.n	8021ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8021edc:	697b      	ldr	r3, [r7, #20]
 8021ede:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8021ee2:	687b      	ldr	r3, [r7, #4]
 8021ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021ee6:	085b      	lsrs	r3, r3, #1
 8021ee8:	3b01      	subs	r3, #1
 8021eea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021eec:	429a      	cmp	r2, r3
 8021eee:	d071      	beq.n	8021fd4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021ef0:	69bb      	ldr	r3, [r7, #24]
 8021ef2:	2b0c      	cmp	r3, #12
 8021ef4:	d068      	beq.n	8021fc8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8021ef6:	4b35      	ldr	r3, [pc, #212]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021ef8:	681b      	ldr	r3, [r3, #0]
 8021efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8021efe:	2b00      	cmp	r3, #0
 8021f00:	d105      	bne.n	8021f0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8021f02:	4b32      	ldr	r3, [pc, #200]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	d001      	beq.n	8021f12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8021f0e:	2301      	movs	r3, #1
 8021f10:	e0ac      	b.n	802206c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8021f12:	4b2e      	ldr	r3, [pc, #184]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	4a2d      	ldr	r2, [pc, #180]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8021f1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8021f1e:	f7ff fadd 	bl	80214dc <HAL_GetTick>
 8021f22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021f24:	e008      	b.n	8021f38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021f26:	f7ff fad9 	bl	80214dc <HAL_GetTick>
 8021f2a:	4602      	mov	r2, r0
 8021f2c:	693b      	ldr	r3, [r7, #16]
 8021f2e:	1ad3      	subs	r3, r2, r3
 8021f30:	2b02      	cmp	r3, #2
 8021f32:	d901      	bls.n	8021f38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8021f34:	2303      	movs	r3, #3
 8021f36:	e099      	b.n	802206c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021f38:	4b24      	ldr	r3, [pc, #144]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d1f0      	bne.n	8021f26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021f44:	4b21      	ldr	r3, [pc, #132]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f46:	68da      	ldr	r2, [r3, #12]
 8021f48:	4b21      	ldr	r3, [pc, #132]	@ (8021fd0 <HAL_RCC_OscConfig+0x788>)
 8021f4a:	4013      	ands	r3, r2
 8021f4c:	687a      	ldr	r2, [r7, #4]
 8021f4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8021f50:	687a      	ldr	r2, [r7, #4]
 8021f52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8021f54:	3a01      	subs	r2, #1
 8021f56:	0112      	lsls	r2, r2, #4
 8021f58:	4311      	orrs	r1, r2
 8021f5a:	687a      	ldr	r2, [r7, #4]
 8021f5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8021f5e:	0212      	lsls	r2, r2, #8
 8021f60:	4311      	orrs	r1, r2
 8021f62:	687a      	ldr	r2, [r7, #4]
 8021f64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8021f66:	0852      	lsrs	r2, r2, #1
 8021f68:	3a01      	subs	r2, #1
 8021f6a:	0552      	lsls	r2, r2, #21
 8021f6c:	4311      	orrs	r1, r2
 8021f6e:	687a      	ldr	r2, [r7, #4]
 8021f70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8021f72:	0852      	lsrs	r2, r2, #1
 8021f74:	3a01      	subs	r2, #1
 8021f76:	0652      	lsls	r2, r2, #25
 8021f78:	4311      	orrs	r1, r2
 8021f7a:	687a      	ldr	r2, [r7, #4]
 8021f7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8021f7e:	06d2      	lsls	r2, r2, #27
 8021f80:	430a      	orrs	r2, r1
 8021f82:	4912      	ldr	r1, [pc, #72]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f84:	4313      	orrs	r3, r2
 8021f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8021f88:	4b10      	ldr	r3, [pc, #64]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f8a:	681b      	ldr	r3, [r3, #0]
 8021f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8021f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8021f94:	4b0d      	ldr	r3, [pc, #52]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f96:	68db      	ldr	r3, [r3, #12]
 8021f98:	4a0c      	ldr	r2, [pc, #48]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8021f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8021fa0:	f7ff fa9c 	bl	80214dc <HAL_GetTick>
 8021fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021fa6:	e008      	b.n	8021fba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021fa8:	f7ff fa98 	bl	80214dc <HAL_GetTick>
 8021fac:	4602      	mov	r2, r0
 8021fae:	693b      	ldr	r3, [r7, #16]
 8021fb0:	1ad3      	subs	r3, r2, r3
 8021fb2:	2b02      	cmp	r3, #2
 8021fb4:	d901      	bls.n	8021fba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8021fb6:	2303      	movs	r3, #3
 8021fb8:	e058      	b.n	802206c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021fba:	4b04      	ldr	r3, [pc, #16]	@ (8021fcc <HAL_RCC_OscConfig+0x784>)
 8021fbc:	681b      	ldr	r3, [r3, #0]
 8021fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d0f0      	beq.n	8021fa8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021fc6:	e050      	b.n	802206a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8021fc8:	2301      	movs	r3, #1
 8021fca:	e04f      	b.n	802206c <HAL_RCC_OscConfig+0x824>
 8021fcc:	40021000 	.word	0x40021000
 8021fd0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021fd4:	4b27      	ldr	r3, [pc, #156]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 8021fd6:	681b      	ldr	r3, [r3, #0]
 8021fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	d144      	bne.n	802206a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8021fe0:	4b24      	ldr	r3, [pc, #144]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 8021fe2:	681b      	ldr	r3, [r3, #0]
 8021fe4:	4a23      	ldr	r2, [pc, #140]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 8021fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8021fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8021fec:	4b21      	ldr	r3, [pc, #132]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 8021fee:	68db      	ldr	r3, [r3, #12]
 8021ff0:	4a20      	ldr	r2, [pc, #128]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 8021ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8021ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8021ff8:	f7ff fa70 	bl	80214dc <HAL_GetTick>
 8021ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021ffe:	e008      	b.n	8022012 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022000:	f7ff fa6c 	bl	80214dc <HAL_GetTick>
 8022004:	4602      	mov	r2, r0
 8022006:	693b      	ldr	r3, [r7, #16]
 8022008:	1ad3      	subs	r3, r2, r3
 802200a:	2b02      	cmp	r3, #2
 802200c:	d901      	bls.n	8022012 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 802200e:	2303      	movs	r3, #3
 8022010:	e02c      	b.n	802206c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022012:	4b18      	ldr	r3, [pc, #96]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 8022014:	681b      	ldr	r3, [r3, #0]
 8022016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802201a:	2b00      	cmp	r3, #0
 802201c:	d0f0      	beq.n	8022000 <HAL_RCC_OscConfig+0x7b8>
 802201e:	e024      	b.n	802206a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8022020:	69bb      	ldr	r3, [r7, #24]
 8022022:	2b0c      	cmp	r3, #12
 8022024:	d01f      	beq.n	8022066 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022026:	4b13      	ldr	r3, [pc, #76]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 8022028:	681b      	ldr	r3, [r3, #0]
 802202a:	4a12      	ldr	r2, [pc, #72]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 802202c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8022030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022032:	f7ff fa53 	bl	80214dc <HAL_GetTick>
 8022036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022038:	e008      	b.n	802204c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802203a:	f7ff fa4f 	bl	80214dc <HAL_GetTick>
 802203e:	4602      	mov	r2, r0
 8022040:	693b      	ldr	r3, [r7, #16]
 8022042:	1ad3      	subs	r3, r2, r3
 8022044:	2b02      	cmp	r3, #2
 8022046:	d901      	bls.n	802204c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8022048:	2303      	movs	r3, #3
 802204a:	e00f      	b.n	802206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 802204c:	4b09      	ldr	r3, [pc, #36]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022054:	2b00      	cmp	r3, #0
 8022056:	d1f0      	bne.n	802203a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8022058:	4b06      	ldr	r3, [pc, #24]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 802205a:	68da      	ldr	r2, [r3, #12]
 802205c:	4905      	ldr	r1, [pc, #20]	@ (8022074 <HAL_RCC_OscConfig+0x82c>)
 802205e:	4b06      	ldr	r3, [pc, #24]	@ (8022078 <HAL_RCC_OscConfig+0x830>)
 8022060:	4013      	ands	r3, r2
 8022062:	60cb      	str	r3, [r1, #12]
 8022064:	e001      	b.n	802206a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8022066:	2301      	movs	r3, #1
 8022068:	e000      	b.n	802206c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 802206a:	2300      	movs	r3, #0
}
 802206c:	4618      	mov	r0, r3
 802206e:	3720      	adds	r7, #32
 8022070:	46bd      	mov	sp, r7
 8022072:	bd80      	pop	{r7, pc}
 8022074:	40021000 	.word	0x40021000
 8022078:	feeefffc 	.word	0xfeeefffc

0802207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802207c:	b580      	push	{r7, lr}
 802207e:	b086      	sub	sp, #24
 8022080:	af00      	add	r7, sp, #0
 8022082:	6078      	str	r0, [r7, #4]
 8022084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8022086:	2300      	movs	r3, #0
 8022088:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	2b00      	cmp	r3, #0
 802208e:	d101      	bne.n	8022094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8022090:	2301      	movs	r3, #1
 8022092:	e11d      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8022094:	4b90      	ldr	r3, [pc, #576]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 8022096:	681b      	ldr	r3, [r3, #0]
 8022098:	f003 030f 	and.w	r3, r3, #15
 802209c:	683a      	ldr	r2, [r7, #0]
 802209e:	429a      	cmp	r2, r3
 80220a0:	d910      	bls.n	80220c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80220a2:	4b8d      	ldr	r3, [pc, #564]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 80220a4:	681b      	ldr	r3, [r3, #0]
 80220a6:	f023 020f 	bic.w	r2, r3, #15
 80220aa:	498b      	ldr	r1, [pc, #556]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 80220ac:	683b      	ldr	r3, [r7, #0]
 80220ae:	4313      	orrs	r3, r2
 80220b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80220b2:	4b89      	ldr	r3, [pc, #548]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 80220b4:	681b      	ldr	r3, [r3, #0]
 80220b6:	f003 030f 	and.w	r3, r3, #15
 80220ba:	683a      	ldr	r2, [r7, #0]
 80220bc:	429a      	cmp	r2, r3
 80220be:	d001      	beq.n	80220c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80220c0:	2301      	movs	r3, #1
 80220c2:	e105      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	681b      	ldr	r3, [r3, #0]
 80220c8:	f003 0302 	and.w	r3, r3, #2
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	d010      	beq.n	80220f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	689a      	ldr	r2, [r3, #8]
 80220d4:	4b81      	ldr	r3, [pc, #516]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80220d6:	689b      	ldr	r3, [r3, #8]
 80220d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80220dc:	429a      	cmp	r2, r3
 80220de:	d908      	bls.n	80220f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80220e0:	4b7e      	ldr	r3, [pc, #504]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80220e2:	689b      	ldr	r3, [r3, #8]
 80220e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	689b      	ldr	r3, [r3, #8]
 80220ec:	497b      	ldr	r1, [pc, #492]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80220ee:	4313      	orrs	r3, r2
 80220f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80220f2:	687b      	ldr	r3, [r7, #4]
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	f003 0301 	and.w	r3, r3, #1
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d079      	beq.n	80221f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	685b      	ldr	r3, [r3, #4]
 8022102:	2b03      	cmp	r3, #3
 8022104:	d11e      	bne.n	8022144 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022106:	4b75      	ldr	r3, [pc, #468]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022108:	681b      	ldr	r3, [r3, #0]
 802210a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802210e:	2b00      	cmp	r3, #0
 8022110:	d101      	bne.n	8022116 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8022112:	2301      	movs	r3, #1
 8022114:	e0dc      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8022116:	f000 f9d1 	bl	80224bc <RCC_GetSysClockFreqFromPLLSource>
 802211a:	4603      	mov	r3, r0
 802211c:	4a70      	ldr	r2, [pc, #448]	@ (80222e0 <HAL_RCC_ClockConfig+0x264>)
 802211e:	4293      	cmp	r3, r2
 8022120:	d946      	bls.n	80221b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8022122:	4b6e      	ldr	r3, [pc, #440]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022124:	689b      	ldr	r3, [r3, #8]
 8022126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802212a:	2b00      	cmp	r3, #0
 802212c:	d140      	bne.n	80221b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 802212e:	4b6b      	ldr	r3, [pc, #428]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022130:	689b      	ldr	r3, [r3, #8]
 8022132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8022136:	4a69      	ldr	r2, [pc, #420]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802213c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 802213e:	2380      	movs	r3, #128	@ 0x80
 8022140:	617b      	str	r3, [r7, #20]
 8022142:	e035      	b.n	80221b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	685b      	ldr	r3, [r3, #4]
 8022148:	2b02      	cmp	r3, #2
 802214a:	d107      	bne.n	802215c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802214c:	4b63      	ldr	r3, [pc, #396]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 802214e:	681b      	ldr	r3, [r3, #0]
 8022150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022154:	2b00      	cmp	r3, #0
 8022156:	d115      	bne.n	8022184 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8022158:	2301      	movs	r3, #1
 802215a:	e0b9      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	685b      	ldr	r3, [r3, #4]
 8022160:	2b00      	cmp	r3, #0
 8022162:	d107      	bne.n	8022174 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8022164:	4b5d      	ldr	r3, [pc, #372]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022166:	681b      	ldr	r3, [r3, #0]
 8022168:	f003 0302 	and.w	r3, r3, #2
 802216c:	2b00      	cmp	r3, #0
 802216e:	d109      	bne.n	8022184 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8022170:	2301      	movs	r3, #1
 8022172:	e0ad      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8022174:	4b59      	ldr	r3, [pc, #356]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022176:	681b      	ldr	r3, [r3, #0]
 8022178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802217c:	2b00      	cmp	r3, #0
 802217e:	d101      	bne.n	8022184 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8022180:	2301      	movs	r3, #1
 8022182:	e0a5      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8022184:	f000 f8b4 	bl	80222f0 <HAL_RCC_GetSysClockFreq>
 8022188:	4603      	mov	r3, r0
 802218a:	4a55      	ldr	r2, [pc, #340]	@ (80222e0 <HAL_RCC_ClockConfig+0x264>)
 802218c:	4293      	cmp	r3, r2
 802218e:	d90f      	bls.n	80221b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8022190:	4b52      	ldr	r3, [pc, #328]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022192:	689b      	ldr	r3, [r3, #8]
 8022194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8022198:	2b00      	cmp	r3, #0
 802219a:	d109      	bne.n	80221b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 802219c:	4b4f      	ldr	r3, [pc, #316]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 802219e:	689b      	ldr	r3, [r3, #8]
 80221a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80221a4:	4a4d      	ldr	r2, [pc, #308]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80221a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80221aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80221ac:	2380      	movs	r3, #128	@ 0x80
 80221ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80221b0:	4b4a      	ldr	r3, [pc, #296]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80221b2:	689b      	ldr	r3, [r3, #8]
 80221b4:	f023 0203 	bic.w	r2, r3, #3
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	685b      	ldr	r3, [r3, #4]
 80221bc:	4947      	ldr	r1, [pc, #284]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80221be:	4313      	orrs	r3, r2
 80221c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80221c2:	f7ff f98b 	bl	80214dc <HAL_GetTick>
 80221c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80221c8:	e00a      	b.n	80221e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80221ca:	f7ff f987 	bl	80214dc <HAL_GetTick>
 80221ce:	4602      	mov	r2, r0
 80221d0:	693b      	ldr	r3, [r7, #16]
 80221d2:	1ad3      	subs	r3, r2, r3
 80221d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80221d8:	4293      	cmp	r3, r2
 80221da:	d901      	bls.n	80221e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80221dc:	2303      	movs	r3, #3
 80221de:	e077      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80221e0:	4b3e      	ldr	r3, [pc, #248]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80221e2:	689b      	ldr	r3, [r3, #8]
 80221e4:	f003 020c 	and.w	r2, r3, #12
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	685b      	ldr	r3, [r3, #4]
 80221ec:	009b      	lsls	r3, r3, #2
 80221ee:	429a      	cmp	r2, r3
 80221f0:	d1eb      	bne.n	80221ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80221f2:	697b      	ldr	r3, [r7, #20]
 80221f4:	2b80      	cmp	r3, #128	@ 0x80
 80221f6:	d105      	bne.n	8022204 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80221f8:	4b38      	ldr	r3, [pc, #224]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80221fa:	689b      	ldr	r3, [r3, #8]
 80221fc:	4a37      	ldr	r2, [pc, #220]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80221fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8022202:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	f003 0302 	and.w	r3, r3, #2
 802220c:	2b00      	cmp	r3, #0
 802220e:	d010      	beq.n	8022232 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8022210:	687b      	ldr	r3, [r7, #4]
 8022212:	689a      	ldr	r2, [r3, #8]
 8022214:	4b31      	ldr	r3, [pc, #196]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022216:	689b      	ldr	r3, [r3, #8]
 8022218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802221c:	429a      	cmp	r2, r3
 802221e:	d208      	bcs.n	8022232 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022220:	4b2e      	ldr	r3, [pc, #184]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022222:	689b      	ldr	r3, [r3, #8]
 8022224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	689b      	ldr	r3, [r3, #8]
 802222c:	492b      	ldr	r1, [pc, #172]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 802222e:	4313      	orrs	r3, r2
 8022230:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022232:	4b29      	ldr	r3, [pc, #164]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	f003 030f 	and.w	r3, r3, #15
 802223a:	683a      	ldr	r2, [r7, #0]
 802223c:	429a      	cmp	r2, r3
 802223e:	d210      	bcs.n	8022262 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022240:	4b25      	ldr	r3, [pc, #148]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 8022242:	681b      	ldr	r3, [r3, #0]
 8022244:	f023 020f 	bic.w	r2, r3, #15
 8022248:	4923      	ldr	r1, [pc, #140]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 802224a:	683b      	ldr	r3, [r7, #0]
 802224c:	4313      	orrs	r3, r2
 802224e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022250:	4b21      	ldr	r3, [pc, #132]	@ (80222d8 <HAL_RCC_ClockConfig+0x25c>)
 8022252:	681b      	ldr	r3, [r3, #0]
 8022254:	f003 030f 	and.w	r3, r3, #15
 8022258:	683a      	ldr	r2, [r7, #0]
 802225a:	429a      	cmp	r2, r3
 802225c:	d001      	beq.n	8022262 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 802225e:	2301      	movs	r3, #1
 8022260:	e036      	b.n	80222d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	f003 0304 	and.w	r3, r3, #4
 802226a:	2b00      	cmp	r3, #0
 802226c:	d008      	beq.n	8022280 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802226e:	4b1b      	ldr	r3, [pc, #108]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 8022270:	689b      	ldr	r3, [r3, #8]
 8022272:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	68db      	ldr	r3, [r3, #12]
 802227a:	4918      	ldr	r1, [pc, #96]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 802227c:	4313      	orrs	r3, r2
 802227e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	f003 0308 	and.w	r3, r3, #8
 8022288:	2b00      	cmp	r3, #0
 802228a:	d009      	beq.n	80222a0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802228c:	4b13      	ldr	r3, [pc, #76]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 802228e:	689b      	ldr	r3, [r3, #8]
 8022290:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	691b      	ldr	r3, [r3, #16]
 8022298:	00db      	lsls	r3, r3, #3
 802229a:	4910      	ldr	r1, [pc, #64]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 802229c:	4313      	orrs	r3, r2
 802229e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80222a0:	f000 f826 	bl	80222f0 <HAL_RCC_GetSysClockFreq>
 80222a4:	4602      	mov	r2, r0
 80222a6:	4b0d      	ldr	r3, [pc, #52]	@ (80222dc <HAL_RCC_ClockConfig+0x260>)
 80222a8:	689b      	ldr	r3, [r3, #8]
 80222aa:	091b      	lsrs	r3, r3, #4
 80222ac:	f003 030f 	and.w	r3, r3, #15
 80222b0:	490c      	ldr	r1, [pc, #48]	@ (80222e4 <HAL_RCC_ClockConfig+0x268>)
 80222b2:	5ccb      	ldrb	r3, [r1, r3]
 80222b4:	f003 031f 	and.w	r3, r3, #31
 80222b8:	fa22 f303 	lsr.w	r3, r2, r3
 80222bc:	4a0a      	ldr	r2, [pc, #40]	@ (80222e8 <HAL_RCC_ClockConfig+0x26c>)
 80222be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80222c0:	4b0a      	ldr	r3, [pc, #40]	@ (80222ec <HAL_RCC_ClockConfig+0x270>)
 80222c2:	681b      	ldr	r3, [r3, #0]
 80222c4:	4618      	mov	r0, r3
 80222c6:	f7ff f8b9 	bl	802143c <HAL_InitTick>
 80222ca:	4603      	mov	r3, r0
 80222cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80222ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80222d0:	4618      	mov	r0, r3
 80222d2:	3718      	adds	r7, #24
 80222d4:	46bd      	mov	sp, r7
 80222d6:	bd80      	pop	{r7, pc}
 80222d8:	40022000 	.word	0x40022000
 80222dc:	40021000 	.word	0x40021000
 80222e0:	04c4b400 	.word	0x04c4b400
 80222e4:	08025260 	.word	0x08025260
 80222e8:	20000000 	.word	0x20000000
 80222ec:	20000004 	.word	0x20000004

080222f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80222f0:	b480      	push	{r7}
 80222f2:	b089      	sub	sp, #36	@ 0x24
 80222f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80222f6:	2300      	movs	r3, #0
 80222f8:	61fb      	str	r3, [r7, #28]
 80222fa:	2300      	movs	r3, #0
 80222fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80222fe:	4b3e      	ldr	r3, [pc, #248]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8022300:	689b      	ldr	r3, [r3, #8]
 8022302:	f003 030c 	and.w	r3, r3, #12
 8022306:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022308:	4b3b      	ldr	r3, [pc, #236]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 802230a:	68db      	ldr	r3, [r3, #12]
 802230c:	f003 0303 	and.w	r3, r3, #3
 8022310:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8022312:	693b      	ldr	r3, [r7, #16]
 8022314:	2b00      	cmp	r3, #0
 8022316:	d005      	beq.n	8022324 <HAL_RCC_GetSysClockFreq+0x34>
 8022318:	693b      	ldr	r3, [r7, #16]
 802231a:	2b0c      	cmp	r3, #12
 802231c:	d121      	bne.n	8022362 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 802231e:	68fb      	ldr	r3, [r7, #12]
 8022320:	2b01      	cmp	r3, #1
 8022322:	d11e      	bne.n	8022362 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022324:	4b34      	ldr	r3, [pc, #208]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	f003 0308 	and.w	r3, r3, #8
 802232c:	2b00      	cmp	r3, #0
 802232e:	d107      	bne.n	8022340 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022330:	4b31      	ldr	r3, [pc, #196]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8022332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022336:	0a1b      	lsrs	r3, r3, #8
 8022338:	f003 030f 	and.w	r3, r3, #15
 802233c:	61fb      	str	r3, [r7, #28]
 802233e:	e005      	b.n	802234c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022340:	4b2d      	ldr	r3, [pc, #180]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	091b      	lsrs	r3, r3, #4
 8022346:	f003 030f 	and.w	r3, r3, #15
 802234a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 802234c:	4a2b      	ldr	r2, [pc, #172]	@ (80223fc <HAL_RCC_GetSysClockFreq+0x10c>)
 802234e:	69fb      	ldr	r3, [r7, #28]
 8022350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022354:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022356:	693b      	ldr	r3, [r7, #16]
 8022358:	2b00      	cmp	r3, #0
 802235a:	d10d      	bne.n	8022378 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 802235c:	69fb      	ldr	r3, [r7, #28]
 802235e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022360:	e00a      	b.n	8022378 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8022362:	693b      	ldr	r3, [r7, #16]
 8022364:	2b04      	cmp	r3, #4
 8022366:	d102      	bne.n	802236e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8022368:	4b25      	ldr	r3, [pc, #148]	@ (8022400 <HAL_RCC_GetSysClockFreq+0x110>)
 802236a:	61bb      	str	r3, [r7, #24]
 802236c:	e004      	b.n	8022378 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 802236e:	693b      	ldr	r3, [r7, #16]
 8022370:	2b08      	cmp	r3, #8
 8022372:	d101      	bne.n	8022378 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8022374:	4b23      	ldr	r3, [pc, #140]	@ (8022404 <HAL_RCC_GetSysClockFreq+0x114>)
 8022376:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8022378:	693b      	ldr	r3, [r7, #16]
 802237a:	2b0c      	cmp	r3, #12
 802237c:	d134      	bne.n	80223e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802237e:	4b1e      	ldr	r3, [pc, #120]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8022380:	68db      	ldr	r3, [r3, #12]
 8022382:	f003 0303 	and.w	r3, r3, #3
 8022386:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8022388:	68bb      	ldr	r3, [r7, #8]
 802238a:	2b02      	cmp	r3, #2
 802238c:	d003      	beq.n	8022396 <HAL_RCC_GetSysClockFreq+0xa6>
 802238e:	68bb      	ldr	r3, [r7, #8]
 8022390:	2b03      	cmp	r3, #3
 8022392:	d003      	beq.n	802239c <HAL_RCC_GetSysClockFreq+0xac>
 8022394:	e005      	b.n	80223a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8022396:	4b1a      	ldr	r3, [pc, #104]	@ (8022400 <HAL_RCC_GetSysClockFreq+0x110>)
 8022398:	617b      	str	r3, [r7, #20]
      break;
 802239a:	e005      	b.n	80223a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 802239c:	4b19      	ldr	r3, [pc, #100]	@ (8022404 <HAL_RCC_GetSysClockFreq+0x114>)
 802239e:	617b      	str	r3, [r7, #20]
      break;
 80223a0:	e002      	b.n	80223a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80223a2:	69fb      	ldr	r3, [r7, #28]
 80223a4:	617b      	str	r3, [r7, #20]
      break;
 80223a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80223a8:	4b13      	ldr	r3, [pc, #76]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80223aa:	68db      	ldr	r3, [r3, #12]
 80223ac:	091b      	lsrs	r3, r3, #4
 80223ae:	f003 030f 	and.w	r3, r3, #15
 80223b2:	3301      	adds	r3, #1
 80223b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80223b6:	4b10      	ldr	r3, [pc, #64]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80223b8:	68db      	ldr	r3, [r3, #12]
 80223ba:	0a1b      	lsrs	r3, r3, #8
 80223bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80223c0:	697a      	ldr	r2, [r7, #20]
 80223c2:	fb03 f202 	mul.w	r2, r3, r2
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80223cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80223ce:	4b0a      	ldr	r3, [pc, #40]	@ (80223f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80223d0:	68db      	ldr	r3, [r3, #12]
 80223d2:	0e5b      	lsrs	r3, r3, #25
 80223d4:	f003 0303 	and.w	r3, r3, #3
 80223d8:	3301      	adds	r3, #1
 80223da:	005b      	lsls	r3, r3, #1
 80223dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80223de:	697a      	ldr	r2, [r7, #20]
 80223e0:	683b      	ldr	r3, [r7, #0]
 80223e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80223e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80223e8:	69bb      	ldr	r3, [r7, #24]
}
 80223ea:	4618      	mov	r0, r3
 80223ec:	3724      	adds	r7, #36	@ 0x24
 80223ee:	46bd      	mov	sp, r7
 80223f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223f4:	4770      	bx	lr
 80223f6:	bf00      	nop
 80223f8:	40021000 	.word	0x40021000
 80223fc:	08025270 	.word	0x08025270
 8022400:	00f42400 	.word	0x00f42400
 8022404:	007a1200 	.word	0x007a1200

08022408 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8022408:	b580      	push	{r7, lr}
 802240a:	b086      	sub	sp, #24
 802240c:	af00      	add	r7, sp, #0
 802240e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8022410:	2300      	movs	r3, #0
 8022412:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022414:	4b27      	ldr	r3, [pc, #156]	@ (80224b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802241c:	2b00      	cmp	r3, #0
 802241e:	d003      	beq.n	8022428 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8022420:	f7ff f94e 	bl	80216c0 <HAL_PWREx_GetVoltageRange>
 8022424:	6178      	str	r0, [r7, #20]
 8022426:	e014      	b.n	8022452 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8022428:	4b22      	ldr	r3, [pc, #136]	@ (80224b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802242a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802242c:	4a21      	ldr	r2, [pc, #132]	@ (80224b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802242e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8022432:	6593      	str	r3, [r2, #88]	@ 0x58
 8022434:	4b1f      	ldr	r3, [pc, #124]	@ (80224b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802243c:	60fb      	str	r3, [r7, #12]
 802243e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8022440:	f7ff f93e 	bl	80216c0 <HAL_PWREx_GetVoltageRange>
 8022444:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8022446:	4b1b      	ldr	r3, [pc, #108]	@ (80224b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802244a:	4a1a      	ldr	r2, [pc, #104]	@ (80224b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802244c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022450:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022452:	697b      	ldr	r3, [r7, #20]
 8022454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022458:	d10b      	bne.n	8022472 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	2b80      	cmp	r3, #128	@ 0x80
 802245e:	d913      	bls.n	8022488 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	2ba0      	cmp	r3, #160	@ 0xa0
 8022464:	d902      	bls.n	802246c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8022466:	2302      	movs	r3, #2
 8022468:	613b      	str	r3, [r7, #16]
 802246a:	e00d      	b.n	8022488 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 802246c:	2301      	movs	r3, #1
 802246e:	613b      	str	r3, [r7, #16]
 8022470:	e00a      	b.n	8022488 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	2b7f      	cmp	r3, #127	@ 0x7f
 8022476:	d902      	bls.n	802247e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8022478:	2302      	movs	r3, #2
 802247a:	613b      	str	r3, [r7, #16]
 802247c:	e004      	b.n	8022488 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	2b70      	cmp	r3, #112	@ 0x70
 8022482:	d101      	bne.n	8022488 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022484:	2301      	movs	r3, #1
 8022486:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8022488:	4b0b      	ldr	r3, [pc, #44]	@ (80224b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802248a:	681b      	ldr	r3, [r3, #0]
 802248c:	f023 020f 	bic.w	r2, r3, #15
 8022490:	4909      	ldr	r1, [pc, #36]	@ (80224b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8022492:	693b      	ldr	r3, [r7, #16]
 8022494:	4313      	orrs	r3, r2
 8022496:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8022498:	4b07      	ldr	r3, [pc, #28]	@ (80224b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802249a:	681b      	ldr	r3, [r3, #0]
 802249c:	f003 030f 	and.w	r3, r3, #15
 80224a0:	693a      	ldr	r2, [r7, #16]
 80224a2:	429a      	cmp	r2, r3
 80224a4:	d001      	beq.n	80224aa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80224a6:	2301      	movs	r3, #1
 80224a8:	e000      	b.n	80224ac <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80224aa:	2300      	movs	r3, #0
}
 80224ac:	4618      	mov	r0, r3
 80224ae:	3718      	adds	r7, #24
 80224b0:	46bd      	mov	sp, r7
 80224b2:	bd80      	pop	{r7, pc}
 80224b4:	40021000 	.word	0x40021000
 80224b8:	40022000 	.word	0x40022000

080224bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80224bc:	b480      	push	{r7}
 80224be:	b087      	sub	sp, #28
 80224c0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80224c2:	4b2d      	ldr	r3, [pc, #180]	@ (8022578 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80224c4:	68db      	ldr	r3, [r3, #12]
 80224c6:	f003 0303 	and.w	r3, r3, #3
 80224ca:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80224cc:	68fb      	ldr	r3, [r7, #12]
 80224ce:	2b03      	cmp	r3, #3
 80224d0:	d00b      	beq.n	80224ea <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80224d2:	68fb      	ldr	r3, [r7, #12]
 80224d4:	2b03      	cmp	r3, #3
 80224d6:	d825      	bhi.n	8022524 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80224d8:	68fb      	ldr	r3, [r7, #12]
 80224da:	2b01      	cmp	r3, #1
 80224dc:	d008      	beq.n	80224f0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80224de:	68fb      	ldr	r3, [r7, #12]
 80224e0:	2b02      	cmp	r3, #2
 80224e2:	d11f      	bne.n	8022524 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80224e4:	4b25      	ldr	r3, [pc, #148]	@ (802257c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80224e6:	613b      	str	r3, [r7, #16]
    break;
 80224e8:	e01f      	b.n	802252a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80224ea:	4b25      	ldr	r3, [pc, #148]	@ (8022580 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80224ec:	613b      	str	r3, [r7, #16]
    break;
 80224ee:	e01c      	b.n	802252a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80224f0:	4b21      	ldr	r3, [pc, #132]	@ (8022578 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80224f2:	681b      	ldr	r3, [r3, #0]
 80224f4:	f003 0308 	and.w	r3, r3, #8
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d107      	bne.n	802250c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80224fc:	4b1e      	ldr	r3, [pc, #120]	@ (8022578 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80224fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022502:	0a1b      	lsrs	r3, r3, #8
 8022504:	f003 030f 	and.w	r3, r3, #15
 8022508:	617b      	str	r3, [r7, #20]
 802250a:	e005      	b.n	8022518 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802250c:	4b1a      	ldr	r3, [pc, #104]	@ (8022578 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	091b      	lsrs	r3, r3, #4
 8022512:	f003 030f 	and.w	r3, r3, #15
 8022516:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8022518:	4a1a      	ldr	r2, [pc, #104]	@ (8022584 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 802251a:	697b      	ldr	r3, [r7, #20]
 802251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022520:	613b      	str	r3, [r7, #16]
    break;
 8022522:	e002      	b.n	802252a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8022524:	2300      	movs	r3, #0
 8022526:	613b      	str	r3, [r7, #16]
    break;
 8022528:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802252a:	4b13      	ldr	r3, [pc, #76]	@ (8022578 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802252c:	68db      	ldr	r3, [r3, #12]
 802252e:	091b      	lsrs	r3, r3, #4
 8022530:	f003 030f 	and.w	r3, r3, #15
 8022534:	3301      	adds	r3, #1
 8022536:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022538:	4b0f      	ldr	r3, [pc, #60]	@ (8022578 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802253a:	68db      	ldr	r3, [r3, #12]
 802253c:	0a1b      	lsrs	r3, r3, #8
 802253e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022542:	693a      	ldr	r2, [r7, #16]
 8022544:	fb03 f202 	mul.w	r2, r3, r2
 8022548:	68bb      	ldr	r3, [r7, #8]
 802254a:	fbb2 f3f3 	udiv	r3, r2, r3
 802254e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022550:	4b09      	ldr	r3, [pc, #36]	@ (8022578 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022552:	68db      	ldr	r3, [r3, #12]
 8022554:	0e5b      	lsrs	r3, r3, #25
 8022556:	f003 0303 	and.w	r3, r3, #3
 802255a:	3301      	adds	r3, #1
 802255c:	005b      	lsls	r3, r3, #1
 802255e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8022560:	693a      	ldr	r2, [r7, #16]
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	fbb2 f3f3 	udiv	r3, r2, r3
 8022568:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 802256a:	683b      	ldr	r3, [r7, #0]
}
 802256c:	4618      	mov	r0, r3
 802256e:	371c      	adds	r7, #28
 8022570:	46bd      	mov	sp, r7
 8022572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022576:	4770      	bx	lr
 8022578:	40021000 	.word	0x40021000
 802257c:	00f42400 	.word	0x00f42400
 8022580:	007a1200 	.word	0x007a1200
 8022584:	08025270 	.word	0x08025270

08022588 <arm_sub_f32>:
 8022588:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 802258c:	b4f0      	push	{r4, r5, r6, r7}
 802258e:	d033      	beq.n	80225f8 <arm_sub_f32+0x70>
 8022590:	f100 0610 	add.w	r6, r0, #16
 8022594:	f101 0510 	add.w	r5, r1, #16
 8022598:	f102 0410 	add.w	r4, r2, #16
 802259c:	4667      	mov	r7, ip
 802259e:	ed15 7a04 	vldr	s14, [r5, #-16]
 80225a2:	ed56 7a04 	vldr	s15, [r6, #-16]
 80225a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80225aa:	3f01      	subs	r7, #1
 80225ac:	ed44 7a04 	vstr	s15, [r4, #-16]
 80225b0:	ed15 7a03 	vldr	s14, [r5, #-12]
 80225b4:	ed56 7a03 	vldr	s15, [r6, #-12]
 80225b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80225bc:	f106 0610 	add.w	r6, r6, #16
 80225c0:	ed44 7a03 	vstr	s15, [r4, #-12]
 80225c4:	ed15 7a02 	vldr	s14, [r5, #-8]
 80225c8:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 80225cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80225d0:	f105 0510 	add.w	r5, r5, #16
 80225d4:	ed44 7a02 	vstr	s15, [r4, #-8]
 80225d8:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80225dc:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 80225e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80225e4:	f104 0410 	add.w	r4, r4, #16
 80225e8:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80225ec:	d1d7      	bne.n	802259e <arm_sub_f32+0x16>
 80225ee:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80225f2:	4420      	add	r0, r4
 80225f4:	4421      	add	r1, r4
 80225f6:	4422      	add	r2, r4
 80225f8:	f013 0303 	ands.w	r3, r3, #3
 80225fc:	d01b      	beq.n	8022636 <arm_sub_f32+0xae>
 80225fe:	edd0 7a00 	vldr	s15, [r0]
 8022602:	ed91 7a00 	vldr	s14, [r1]
 8022606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802260a:	3b01      	subs	r3, #1
 802260c:	edc2 7a00 	vstr	s15, [r2]
 8022610:	d011      	beq.n	8022636 <arm_sub_f32+0xae>
 8022612:	edd0 7a01 	vldr	s15, [r0, #4]
 8022616:	ed91 7a01 	vldr	s14, [r1, #4]
 802261a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802261e:	2b01      	cmp	r3, #1
 8022620:	edc2 7a01 	vstr	s15, [r2, #4]
 8022624:	d007      	beq.n	8022636 <arm_sub_f32+0xae>
 8022626:	edd0 7a02 	vldr	s15, [r0, #8]
 802262a:	ed91 7a02 	vldr	s14, [r1, #8]
 802262e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022632:	edc2 7a02 	vstr	s15, [r2, #8]
 8022636:	bcf0      	pop	{r4, r5, r6, r7}
 8022638:	4770      	bx	lr
 802263a:	bf00      	nop

0802263c <arm_mult_f32>:
 802263c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8022640:	b4f0      	push	{r4, r5, r6, r7}
 8022642:	d033      	beq.n	80226ac <arm_mult_f32+0x70>
 8022644:	f100 0610 	add.w	r6, r0, #16
 8022648:	f101 0510 	add.w	r5, r1, #16
 802264c:	f102 0410 	add.w	r4, r2, #16
 8022650:	4667      	mov	r7, ip
 8022652:	ed15 7a04 	vldr	s14, [r5, #-16]
 8022656:	ed56 7a04 	vldr	s15, [r6, #-16]
 802265a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802265e:	3f01      	subs	r7, #1
 8022660:	ed44 7a04 	vstr	s15, [r4, #-16]
 8022664:	ed15 7a03 	vldr	s14, [r5, #-12]
 8022668:	ed56 7a03 	vldr	s15, [r6, #-12]
 802266c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022670:	f106 0610 	add.w	r6, r6, #16
 8022674:	ed44 7a03 	vstr	s15, [r4, #-12]
 8022678:	ed15 7a02 	vldr	s14, [r5, #-8]
 802267c:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8022680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022684:	f105 0510 	add.w	r5, r5, #16
 8022688:	ed44 7a02 	vstr	s15, [r4, #-8]
 802268c:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8022690:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8022694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022698:	f104 0410 	add.w	r4, r4, #16
 802269c:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80226a0:	d1d7      	bne.n	8022652 <arm_mult_f32+0x16>
 80226a2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80226a6:	4420      	add	r0, r4
 80226a8:	4421      	add	r1, r4
 80226aa:	4422      	add	r2, r4
 80226ac:	f013 0303 	ands.w	r3, r3, #3
 80226b0:	d01b      	beq.n	80226ea <arm_mult_f32+0xae>
 80226b2:	edd1 7a00 	vldr	s15, [r1]
 80226b6:	ed90 7a00 	vldr	s14, [r0]
 80226ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80226be:	3b01      	subs	r3, #1
 80226c0:	edc2 7a00 	vstr	s15, [r2]
 80226c4:	d011      	beq.n	80226ea <arm_mult_f32+0xae>
 80226c6:	edd0 7a01 	vldr	s15, [r0, #4]
 80226ca:	ed91 7a01 	vldr	s14, [r1, #4]
 80226ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80226d2:	2b01      	cmp	r3, #1
 80226d4:	edc2 7a01 	vstr	s15, [r2, #4]
 80226d8:	d007      	beq.n	80226ea <arm_mult_f32+0xae>
 80226da:	edd0 7a02 	vldr	s15, [r0, #8]
 80226de:	ed91 7a02 	vldr	s14, [r1, #8]
 80226e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80226e6:	edc2 7a02 	vstr	s15, [r2, #8]
 80226ea:	bcf0      	pop	{r4, r5, r6, r7}
 80226ec:	4770      	bx	lr
 80226ee:	bf00      	nop

080226f0 <arm_add_f32>:
 80226f0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80226f4:	b4f0      	push	{r4, r5, r6, r7}
 80226f6:	d033      	beq.n	8022760 <arm_add_f32+0x70>
 80226f8:	f100 0610 	add.w	r6, r0, #16
 80226fc:	f101 0510 	add.w	r5, r1, #16
 8022700:	f102 0410 	add.w	r4, r2, #16
 8022704:	4667      	mov	r7, ip
 8022706:	ed15 7a04 	vldr	s14, [r5, #-16]
 802270a:	ed56 7a04 	vldr	s15, [r6, #-16]
 802270e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022712:	3f01      	subs	r7, #1
 8022714:	ed44 7a04 	vstr	s15, [r4, #-16]
 8022718:	ed15 7a03 	vldr	s14, [r5, #-12]
 802271c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8022720:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022724:	f106 0610 	add.w	r6, r6, #16
 8022728:	ed44 7a03 	vstr	s15, [r4, #-12]
 802272c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8022730:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8022734:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022738:	f105 0510 	add.w	r5, r5, #16
 802273c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8022740:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8022744:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8022748:	ee77 7a87 	vadd.f32	s15, s15, s14
 802274c:	f104 0410 	add.w	r4, r4, #16
 8022750:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8022754:	d1d7      	bne.n	8022706 <arm_add_f32+0x16>
 8022756:	ea4f 140c 	mov.w	r4, ip, lsl #4
 802275a:	4420      	add	r0, r4
 802275c:	4421      	add	r1, r4
 802275e:	4422      	add	r2, r4
 8022760:	f013 0303 	ands.w	r3, r3, #3
 8022764:	d01b      	beq.n	802279e <arm_add_f32+0xae>
 8022766:	edd1 7a00 	vldr	s15, [r1]
 802276a:	ed90 7a00 	vldr	s14, [r0]
 802276e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022772:	3b01      	subs	r3, #1
 8022774:	edc2 7a00 	vstr	s15, [r2]
 8022778:	d011      	beq.n	802279e <arm_add_f32+0xae>
 802277a:	edd0 7a01 	vldr	s15, [r0, #4]
 802277e:	ed91 7a01 	vldr	s14, [r1, #4]
 8022782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022786:	2b01      	cmp	r3, #1
 8022788:	edc2 7a01 	vstr	s15, [r2, #4]
 802278c:	d007      	beq.n	802279e <arm_add_f32+0xae>
 802278e:	edd0 7a02 	vldr	s15, [r0, #8]
 8022792:	ed91 7a02 	vldr	s14, [r1, #8]
 8022796:	ee77 7a87 	vadd.f32	s15, s15, s14
 802279a:	edc2 7a02 	vstr	s15, [r2, #8]
 802279e:	bcf0      	pop	{r4, r5, r6, r7}
 80227a0:	4770      	bx	lr
 80227a2:	bf00      	nop

080227a4 <__cvt>:
 80227a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80227a8:	ec57 6b10 	vmov	r6, r7, d0
 80227ac:	2f00      	cmp	r7, #0
 80227ae:	460c      	mov	r4, r1
 80227b0:	4619      	mov	r1, r3
 80227b2:	463b      	mov	r3, r7
 80227b4:	bfbb      	ittet	lt
 80227b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80227ba:	461f      	movlt	r7, r3
 80227bc:	2300      	movge	r3, #0
 80227be:	232d      	movlt	r3, #45	@ 0x2d
 80227c0:	700b      	strb	r3, [r1, #0]
 80227c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80227c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80227c8:	4691      	mov	r9, r2
 80227ca:	f023 0820 	bic.w	r8, r3, #32
 80227ce:	bfbc      	itt	lt
 80227d0:	4632      	movlt	r2, r6
 80227d2:	4616      	movlt	r6, r2
 80227d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80227d8:	d005      	beq.n	80227e6 <__cvt+0x42>
 80227da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80227de:	d100      	bne.n	80227e2 <__cvt+0x3e>
 80227e0:	3401      	adds	r4, #1
 80227e2:	2102      	movs	r1, #2
 80227e4:	e000      	b.n	80227e8 <__cvt+0x44>
 80227e6:	2103      	movs	r1, #3
 80227e8:	ab03      	add	r3, sp, #12
 80227ea:	9301      	str	r3, [sp, #4]
 80227ec:	ab02      	add	r3, sp, #8
 80227ee:	9300      	str	r3, [sp, #0]
 80227f0:	ec47 6b10 	vmov	d0, r6, r7
 80227f4:	4653      	mov	r3, sl
 80227f6:	4622      	mov	r2, r4
 80227f8:	f000 fdbe 	bl	8023378 <_dtoa_r>
 80227fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8022800:	4605      	mov	r5, r0
 8022802:	d119      	bne.n	8022838 <__cvt+0x94>
 8022804:	f019 0f01 	tst.w	r9, #1
 8022808:	d00e      	beq.n	8022828 <__cvt+0x84>
 802280a:	eb00 0904 	add.w	r9, r0, r4
 802280e:	2200      	movs	r2, #0
 8022810:	2300      	movs	r3, #0
 8022812:	4630      	mov	r0, r6
 8022814:	4639      	mov	r1, r7
 8022816:	f7fe f8cf 	bl	80209b8 <__aeabi_dcmpeq>
 802281a:	b108      	cbz	r0, 8022820 <__cvt+0x7c>
 802281c:	f8cd 900c 	str.w	r9, [sp, #12]
 8022820:	2230      	movs	r2, #48	@ 0x30
 8022822:	9b03      	ldr	r3, [sp, #12]
 8022824:	454b      	cmp	r3, r9
 8022826:	d31e      	bcc.n	8022866 <__cvt+0xc2>
 8022828:	9b03      	ldr	r3, [sp, #12]
 802282a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802282c:	1b5b      	subs	r3, r3, r5
 802282e:	4628      	mov	r0, r5
 8022830:	6013      	str	r3, [r2, #0]
 8022832:	b004      	add	sp, #16
 8022834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022838:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802283c:	eb00 0904 	add.w	r9, r0, r4
 8022840:	d1e5      	bne.n	802280e <__cvt+0x6a>
 8022842:	7803      	ldrb	r3, [r0, #0]
 8022844:	2b30      	cmp	r3, #48	@ 0x30
 8022846:	d10a      	bne.n	802285e <__cvt+0xba>
 8022848:	2200      	movs	r2, #0
 802284a:	2300      	movs	r3, #0
 802284c:	4630      	mov	r0, r6
 802284e:	4639      	mov	r1, r7
 8022850:	f7fe f8b2 	bl	80209b8 <__aeabi_dcmpeq>
 8022854:	b918      	cbnz	r0, 802285e <__cvt+0xba>
 8022856:	f1c4 0401 	rsb	r4, r4, #1
 802285a:	f8ca 4000 	str.w	r4, [sl]
 802285e:	f8da 3000 	ldr.w	r3, [sl]
 8022862:	4499      	add	r9, r3
 8022864:	e7d3      	b.n	802280e <__cvt+0x6a>
 8022866:	1c59      	adds	r1, r3, #1
 8022868:	9103      	str	r1, [sp, #12]
 802286a:	701a      	strb	r2, [r3, #0]
 802286c:	e7d9      	b.n	8022822 <__cvt+0x7e>

0802286e <__exponent>:
 802286e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022870:	2900      	cmp	r1, #0
 8022872:	bfba      	itte	lt
 8022874:	4249      	neglt	r1, r1
 8022876:	232d      	movlt	r3, #45	@ 0x2d
 8022878:	232b      	movge	r3, #43	@ 0x2b
 802287a:	2909      	cmp	r1, #9
 802287c:	7002      	strb	r2, [r0, #0]
 802287e:	7043      	strb	r3, [r0, #1]
 8022880:	dd29      	ble.n	80228d6 <__exponent+0x68>
 8022882:	f10d 0307 	add.w	r3, sp, #7
 8022886:	461d      	mov	r5, r3
 8022888:	270a      	movs	r7, #10
 802288a:	461a      	mov	r2, r3
 802288c:	fbb1 f6f7 	udiv	r6, r1, r7
 8022890:	fb07 1416 	mls	r4, r7, r6, r1
 8022894:	3430      	adds	r4, #48	@ 0x30
 8022896:	f802 4c01 	strb.w	r4, [r2, #-1]
 802289a:	460c      	mov	r4, r1
 802289c:	2c63      	cmp	r4, #99	@ 0x63
 802289e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80228a2:	4631      	mov	r1, r6
 80228a4:	dcf1      	bgt.n	802288a <__exponent+0x1c>
 80228a6:	3130      	adds	r1, #48	@ 0x30
 80228a8:	1e94      	subs	r4, r2, #2
 80228aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80228ae:	1c41      	adds	r1, r0, #1
 80228b0:	4623      	mov	r3, r4
 80228b2:	42ab      	cmp	r3, r5
 80228b4:	d30a      	bcc.n	80228cc <__exponent+0x5e>
 80228b6:	f10d 0309 	add.w	r3, sp, #9
 80228ba:	1a9b      	subs	r3, r3, r2
 80228bc:	42ac      	cmp	r4, r5
 80228be:	bf88      	it	hi
 80228c0:	2300      	movhi	r3, #0
 80228c2:	3302      	adds	r3, #2
 80228c4:	4403      	add	r3, r0
 80228c6:	1a18      	subs	r0, r3, r0
 80228c8:	b003      	add	sp, #12
 80228ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80228d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80228d4:	e7ed      	b.n	80228b2 <__exponent+0x44>
 80228d6:	2330      	movs	r3, #48	@ 0x30
 80228d8:	3130      	adds	r1, #48	@ 0x30
 80228da:	7083      	strb	r3, [r0, #2]
 80228dc:	70c1      	strb	r1, [r0, #3]
 80228de:	1d03      	adds	r3, r0, #4
 80228e0:	e7f1      	b.n	80228c6 <__exponent+0x58>
	...

080228e4 <_printf_float>:
 80228e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228e8:	b08d      	sub	sp, #52	@ 0x34
 80228ea:	460c      	mov	r4, r1
 80228ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80228f0:	4616      	mov	r6, r2
 80228f2:	461f      	mov	r7, r3
 80228f4:	4605      	mov	r5, r0
 80228f6:	f000 fc77 	bl	80231e8 <_localeconv_r>
 80228fa:	6803      	ldr	r3, [r0, #0]
 80228fc:	9304      	str	r3, [sp, #16]
 80228fe:	4618      	mov	r0, r3
 8022900:	f7fd fc2e 	bl	8020160 <strlen>
 8022904:	2300      	movs	r3, #0
 8022906:	930a      	str	r3, [sp, #40]	@ 0x28
 8022908:	f8d8 3000 	ldr.w	r3, [r8]
 802290c:	9005      	str	r0, [sp, #20]
 802290e:	3307      	adds	r3, #7
 8022910:	f023 0307 	bic.w	r3, r3, #7
 8022914:	f103 0208 	add.w	r2, r3, #8
 8022918:	f894 a018 	ldrb.w	sl, [r4, #24]
 802291c:	f8d4 b000 	ldr.w	fp, [r4]
 8022920:	f8c8 2000 	str.w	r2, [r8]
 8022924:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022928:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802292c:	9307      	str	r3, [sp, #28]
 802292e:	f8cd 8018 	str.w	r8, [sp, #24]
 8022932:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8022936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802293a:	4b9c      	ldr	r3, [pc, #624]	@ (8022bac <_printf_float+0x2c8>)
 802293c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022940:	f7fe f86c 	bl	8020a1c <__aeabi_dcmpun>
 8022944:	bb70      	cbnz	r0, 80229a4 <_printf_float+0xc0>
 8022946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802294a:	4b98      	ldr	r3, [pc, #608]	@ (8022bac <_printf_float+0x2c8>)
 802294c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022950:	f7fe f846 	bl	80209e0 <__aeabi_dcmple>
 8022954:	bb30      	cbnz	r0, 80229a4 <_printf_float+0xc0>
 8022956:	2200      	movs	r2, #0
 8022958:	2300      	movs	r3, #0
 802295a:	4640      	mov	r0, r8
 802295c:	4649      	mov	r1, r9
 802295e:	f7fe f835 	bl	80209cc <__aeabi_dcmplt>
 8022962:	b110      	cbz	r0, 802296a <_printf_float+0x86>
 8022964:	232d      	movs	r3, #45	@ 0x2d
 8022966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802296a:	4a91      	ldr	r2, [pc, #580]	@ (8022bb0 <_printf_float+0x2cc>)
 802296c:	4b91      	ldr	r3, [pc, #580]	@ (8022bb4 <_printf_float+0x2d0>)
 802296e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8022972:	bf94      	ite	ls
 8022974:	4690      	movls	r8, r2
 8022976:	4698      	movhi	r8, r3
 8022978:	2303      	movs	r3, #3
 802297a:	6123      	str	r3, [r4, #16]
 802297c:	f02b 0304 	bic.w	r3, fp, #4
 8022980:	6023      	str	r3, [r4, #0]
 8022982:	f04f 0900 	mov.w	r9, #0
 8022986:	9700      	str	r7, [sp, #0]
 8022988:	4633      	mov	r3, r6
 802298a:	aa0b      	add	r2, sp, #44	@ 0x2c
 802298c:	4621      	mov	r1, r4
 802298e:	4628      	mov	r0, r5
 8022990:	f000 f9d2 	bl	8022d38 <_printf_common>
 8022994:	3001      	adds	r0, #1
 8022996:	f040 808d 	bne.w	8022ab4 <_printf_float+0x1d0>
 802299a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802299e:	b00d      	add	sp, #52	@ 0x34
 80229a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229a4:	4642      	mov	r2, r8
 80229a6:	464b      	mov	r3, r9
 80229a8:	4640      	mov	r0, r8
 80229aa:	4649      	mov	r1, r9
 80229ac:	f7fe f836 	bl	8020a1c <__aeabi_dcmpun>
 80229b0:	b140      	cbz	r0, 80229c4 <_printf_float+0xe0>
 80229b2:	464b      	mov	r3, r9
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	bfbc      	itt	lt
 80229b8:	232d      	movlt	r3, #45	@ 0x2d
 80229ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80229be:	4a7e      	ldr	r2, [pc, #504]	@ (8022bb8 <_printf_float+0x2d4>)
 80229c0:	4b7e      	ldr	r3, [pc, #504]	@ (8022bbc <_printf_float+0x2d8>)
 80229c2:	e7d4      	b.n	802296e <_printf_float+0x8a>
 80229c4:	6863      	ldr	r3, [r4, #4]
 80229c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80229ca:	9206      	str	r2, [sp, #24]
 80229cc:	1c5a      	adds	r2, r3, #1
 80229ce:	d13b      	bne.n	8022a48 <_printf_float+0x164>
 80229d0:	2306      	movs	r3, #6
 80229d2:	6063      	str	r3, [r4, #4]
 80229d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80229d8:	2300      	movs	r3, #0
 80229da:	6022      	str	r2, [r4, #0]
 80229dc:	9303      	str	r3, [sp, #12]
 80229de:	ab0a      	add	r3, sp, #40	@ 0x28
 80229e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80229e4:	ab09      	add	r3, sp, #36	@ 0x24
 80229e6:	9300      	str	r3, [sp, #0]
 80229e8:	6861      	ldr	r1, [r4, #4]
 80229ea:	ec49 8b10 	vmov	d0, r8, r9
 80229ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80229f2:	4628      	mov	r0, r5
 80229f4:	f7ff fed6 	bl	80227a4 <__cvt>
 80229f8:	9b06      	ldr	r3, [sp, #24]
 80229fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80229fc:	2b47      	cmp	r3, #71	@ 0x47
 80229fe:	4680      	mov	r8, r0
 8022a00:	d129      	bne.n	8022a56 <_printf_float+0x172>
 8022a02:	1cc8      	adds	r0, r1, #3
 8022a04:	db02      	blt.n	8022a0c <_printf_float+0x128>
 8022a06:	6863      	ldr	r3, [r4, #4]
 8022a08:	4299      	cmp	r1, r3
 8022a0a:	dd41      	ble.n	8022a90 <_printf_float+0x1ac>
 8022a0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8022a10:	fa5f fa8a 	uxtb.w	sl, sl
 8022a14:	3901      	subs	r1, #1
 8022a16:	4652      	mov	r2, sl
 8022a18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8022a1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8022a1e:	f7ff ff26 	bl	802286e <__exponent>
 8022a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022a24:	1813      	adds	r3, r2, r0
 8022a26:	2a01      	cmp	r2, #1
 8022a28:	4681      	mov	r9, r0
 8022a2a:	6123      	str	r3, [r4, #16]
 8022a2c:	dc02      	bgt.n	8022a34 <_printf_float+0x150>
 8022a2e:	6822      	ldr	r2, [r4, #0]
 8022a30:	07d2      	lsls	r2, r2, #31
 8022a32:	d501      	bpl.n	8022a38 <_printf_float+0x154>
 8022a34:	3301      	adds	r3, #1
 8022a36:	6123      	str	r3, [r4, #16]
 8022a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	d0a2      	beq.n	8022986 <_printf_float+0xa2>
 8022a40:	232d      	movs	r3, #45	@ 0x2d
 8022a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022a46:	e79e      	b.n	8022986 <_printf_float+0xa2>
 8022a48:	9a06      	ldr	r2, [sp, #24]
 8022a4a:	2a47      	cmp	r2, #71	@ 0x47
 8022a4c:	d1c2      	bne.n	80229d4 <_printf_float+0xf0>
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	d1c0      	bne.n	80229d4 <_printf_float+0xf0>
 8022a52:	2301      	movs	r3, #1
 8022a54:	e7bd      	b.n	80229d2 <_printf_float+0xee>
 8022a56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8022a5a:	d9db      	bls.n	8022a14 <_printf_float+0x130>
 8022a5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8022a60:	d118      	bne.n	8022a94 <_printf_float+0x1b0>
 8022a62:	2900      	cmp	r1, #0
 8022a64:	6863      	ldr	r3, [r4, #4]
 8022a66:	dd0b      	ble.n	8022a80 <_printf_float+0x19c>
 8022a68:	6121      	str	r1, [r4, #16]
 8022a6a:	b913      	cbnz	r3, 8022a72 <_printf_float+0x18e>
 8022a6c:	6822      	ldr	r2, [r4, #0]
 8022a6e:	07d0      	lsls	r0, r2, #31
 8022a70:	d502      	bpl.n	8022a78 <_printf_float+0x194>
 8022a72:	3301      	adds	r3, #1
 8022a74:	440b      	add	r3, r1
 8022a76:	6123      	str	r3, [r4, #16]
 8022a78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8022a7a:	f04f 0900 	mov.w	r9, #0
 8022a7e:	e7db      	b.n	8022a38 <_printf_float+0x154>
 8022a80:	b913      	cbnz	r3, 8022a88 <_printf_float+0x1a4>
 8022a82:	6822      	ldr	r2, [r4, #0]
 8022a84:	07d2      	lsls	r2, r2, #31
 8022a86:	d501      	bpl.n	8022a8c <_printf_float+0x1a8>
 8022a88:	3302      	adds	r3, #2
 8022a8a:	e7f4      	b.n	8022a76 <_printf_float+0x192>
 8022a8c:	2301      	movs	r3, #1
 8022a8e:	e7f2      	b.n	8022a76 <_printf_float+0x192>
 8022a90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8022a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022a96:	4299      	cmp	r1, r3
 8022a98:	db05      	blt.n	8022aa6 <_printf_float+0x1c2>
 8022a9a:	6823      	ldr	r3, [r4, #0]
 8022a9c:	6121      	str	r1, [r4, #16]
 8022a9e:	07d8      	lsls	r0, r3, #31
 8022aa0:	d5ea      	bpl.n	8022a78 <_printf_float+0x194>
 8022aa2:	1c4b      	adds	r3, r1, #1
 8022aa4:	e7e7      	b.n	8022a76 <_printf_float+0x192>
 8022aa6:	2900      	cmp	r1, #0
 8022aa8:	bfd4      	ite	le
 8022aaa:	f1c1 0202 	rsble	r2, r1, #2
 8022aae:	2201      	movgt	r2, #1
 8022ab0:	4413      	add	r3, r2
 8022ab2:	e7e0      	b.n	8022a76 <_printf_float+0x192>
 8022ab4:	6823      	ldr	r3, [r4, #0]
 8022ab6:	055a      	lsls	r2, r3, #21
 8022ab8:	d407      	bmi.n	8022aca <_printf_float+0x1e6>
 8022aba:	6923      	ldr	r3, [r4, #16]
 8022abc:	4642      	mov	r2, r8
 8022abe:	4631      	mov	r1, r6
 8022ac0:	4628      	mov	r0, r5
 8022ac2:	47b8      	blx	r7
 8022ac4:	3001      	adds	r0, #1
 8022ac6:	d12b      	bne.n	8022b20 <_printf_float+0x23c>
 8022ac8:	e767      	b.n	802299a <_printf_float+0xb6>
 8022aca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8022ace:	f240 80dd 	bls.w	8022c8c <_printf_float+0x3a8>
 8022ad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8022ad6:	2200      	movs	r2, #0
 8022ad8:	2300      	movs	r3, #0
 8022ada:	f7fd ff6d 	bl	80209b8 <__aeabi_dcmpeq>
 8022ade:	2800      	cmp	r0, #0
 8022ae0:	d033      	beq.n	8022b4a <_printf_float+0x266>
 8022ae2:	4a37      	ldr	r2, [pc, #220]	@ (8022bc0 <_printf_float+0x2dc>)
 8022ae4:	2301      	movs	r3, #1
 8022ae6:	4631      	mov	r1, r6
 8022ae8:	4628      	mov	r0, r5
 8022aea:	47b8      	blx	r7
 8022aec:	3001      	adds	r0, #1
 8022aee:	f43f af54 	beq.w	802299a <_printf_float+0xb6>
 8022af2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8022af6:	4543      	cmp	r3, r8
 8022af8:	db02      	blt.n	8022b00 <_printf_float+0x21c>
 8022afa:	6823      	ldr	r3, [r4, #0]
 8022afc:	07d8      	lsls	r0, r3, #31
 8022afe:	d50f      	bpl.n	8022b20 <_printf_float+0x23c>
 8022b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022b04:	4631      	mov	r1, r6
 8022b06:	4628      	mov	r0, r5
 8022b08:	47b8      	blx	r7
 8022b0a:	3001      	adds	r0, #1
 8022b0c:	f43f af45 	beq.w	802299a <_printf_float+0xb6>
 8022b10:	f04f 0900 	mov.w	r9, #0
 8022b14:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8022b18:	f104 0a1a 	add.w	sl, r4, #26
 8022b1c:	45c8      	cmp	r8, r9
 8022b1e:	dc09      	bgt.n	8022b34 <_printf_float+0x250>
 8022b20:	6823      	ldr	r3, [r4, #0]
 8022b22:	079b      	lsls	r3, r3, #30
 8022b24:	f100 8103 	bmi.w	8022d2e <_printf_float+0x44a>
 8022b28:	68e0      	ldr	r0, [r4, #12]
 8022b2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b2c:	4298      	cmp	r0, r3
 8022b2e:	bfb8      	it	lt
 8022b30:	4618      	movlt	r0, r3
 8022b32:	e734      	b.n	802299e <_printf_float+0xba>
 8022b34:	2301      	movs	r3, #1
 8022b36:	4652      	mov	r2, sl
 8022b38:	4631      	mov	r1, r6
 8022b3a:	4628      	mov	r0, r5
 8022b3c:	47b8      	blx	r7
 8022b3e:	3001      	adds	r0, #1
 8022b40:	f43f af2b 	beq.w	802299a <_printf_float+0xb6>
 8022b44:	f109 0901 	add.w	r9, r9, #1
 8022b48:	e7e8      	b.n	8022b1c <_printf_float+0x238>
 8022b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b4c:	2b00      	cmp	r3, #0
 8022b4e:	dc39      	bgt.n	8022bc4 <_printf_float+0x2e0>
 8022b50:	4a1b      	ldr	r2, [pc, #108]	@ (8022bc0 <_printf_float+0x2dc>)
 8022b52:	2301      	movs	r3, #1
 8022b54:	4631      	mov	r1, r6
 8022b56:	4628      	mov	r0, r5
 8022b58:	47b8      	blx	r7
 8022b5a:	3001      	adds	r0, #1
 8022b5c:	f43f af1d 	beq.w	802299a <_printf_float+0xb6>
 8022b60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8022b64:	ea59 0303 	orrs.w	r3, r9, r3
 8022b68:	d102      	bne.n	8022b70 <_printf_float+0x28c>
 8022b6a:	6823      	ldr	r3, [r4, #0]
 8022b6c:	07d9      	lsls	r1, r3, #31
 8022b6e:	d5d7      	bpl.n	8022b20 <_printf_float+0x23c>
 8022b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022b74:	4631      	mov	r1, r6
 8022b76:	4628      	mov	r0, r5
 8022b78:	47b8      	blx	r7
 8022b7a:	3001      	adds	r0, #1
 8022b7c:	f43f af0d 	beq.w	802299a <_printf_float+0xb6>
 8022b80:	f04f 0a00 	mov.w	sl, #0
 8022b84:	f104 0b1a 	add.w	fp, r4, #26
 8022b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b8a:	425b      	negs	r3, r3
 8022b8c:	4553      	cmp	r3, sl
 8022b8e:	dc01      	bgt.n	8022b94 <_printf_float+0x2b0>
 8022b90:	464b      	mov	r3, r9
 8022b92:	e793      	b.n	8022abc <_printf_float+0x1d8>
 8022b94:	2301      	movs	r3, #1
 8022b96:	465a      	mov	r2, fp
 8022b98:	4631      	mov	r1, r6
 8022b9a:	4628      	mov	r0, r5
 8022b9c:	47b8      	blx	r7
 8022b9e:	3001      	adds	r0, #1
 8022ba0:	f43f aefb 	beq.w	802299a <_printf_float+0xb6>
 8022ba4:	f10a 0a01 	add.w	sl, sl, #1
 8022ba8:	e7ee      	b.n	8022b88 <_printf_float+0x2a4>
 8022baa:	bf00      	nop
 8022bac:	7fefffff 	.word	0x7fefffff
 8022bb0:	080252a0 	.word	0x080252a0
 8022bb4:	080252a4 	.word	0x080252a4
 8022bb8:	080252a8 	.word	0x080252a8
 8022bbc:	080252ac 	.word	0x080252ac
 8022bc0:	080252b0 	.word	0x080252b0
 8022bc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022bc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8022bca:	4553      	cmp	r3, sl
 8022bcc:	bfa8      	it	ge
 8022bce:	4653      	movge	r3, sl
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	4699      	mov	r9, r3
 8022bd4:	dc36      	bgt.n	8022c44 <_printf_float+0x360>
 8022bd6:	f04f 0b00 	mov.w	fp, #0
 8022bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022bde:	f104 021a 	add.w	r2, r4, #26
 8022be2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022be4:	9306      	str	r3, [sp, #24]
 8022be6:	eba3 0309 	sub.w	r3, r3, r9
 8022bea:	455b      	cmp	r3, fp
 8022bec:	dc31      	bgt.n	8022c52 <_printf_float+0x36e>
 8022bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022bf0:	459a      	cmp	sl, r3
 8022bf2:	dc3a      	bgt.n	8022c6a <_printf_float+0x386>
 8022bf4:	6823      	ldr	r3, [r4, #0]
 8022bf6:	07da      	lsls	r2, r3, #31
 8022bf8:	d437      	bmi.n	8022c6a <_printf_float+0x386>
 8022bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022bfc:	ebaa 0903 	sub.w	r9, sl, r3
 8022c00:	9b06      	ldr	r3, [sp, #24]
 8022c02:	ebaa 0303 	sub.w	r3, sl, r3
 8022c06:	4599      	cmp	r9, r3
 8022c08:	bfa8      	it	ge
 8022c0a:	4699      	movge	r9, r3
 8022c0c:	f1b9 0f00 	cmp.w	r9, #0
 8022c10:	dc33      	bgt.n	8022c7a <_printf_float+0x396>
 8022c12:	f04f 0800 	mov.w	r8, #0
 8022c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022c1a:	f104 0b1a 	add.w	fp, r4, #26
 8022c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c20:	ebaa 0303 	sub.w	r3, sl, r3
 8022c24:	eba3 0309 	sub.w	r3, r3, r9
 8022c28:	4543      	cmp	r3, r8
 8022c2a:	f77f af79 	ble.w	8022b20 <_printf_float+0x23c>
 8022c2e:	2301      	movs	r3, #1
 8022c30:	465a      	mov	r2, fp
 8022c32:	4631      	mov	r1, r6
 8022c34:	4628      	mov	r0, r5
 8022c36:	47b8      	blx	r7
 8022c38:	3001      	adds	r0, #1
 8022c3a:	f43f aeae 	beq.w	802299a <_printf_float+0xb6>
 8022c3e:	f108 0801 	add.w	r8, r8, #1
 8022c42:	e7ec      	b.n	8022c1e <_printf_float+0x33a>
 8022c44:	4642      	mov	r2, r8
 8022c46:	4631      	mov	r1, r6
 8022c48:	4628      	mov	r0, r5
 8022c4a:	47b8      	blx	r7
 8022c4c:	3001      	adds	r0, #1
 8022c4e:	d1c2      	bne.n	8022bd6 <_printf_float+0x2f2>
 8022c50:	e6a3      	b.n	802299a <_printf_float+0xb6>
 8022c52:	2301      	movs	r3, #1
 8022c54:	4631      	mov	r1, r6
 8022c56:	4628      	mov	r0, r5
 8022c58:	9206      	str	r2, [sp, #24]
 8022c5a:	47b8      	blx	r7
 8022c5c:	3001      	adds	r0, #1
 8022c5e:	f43f ae9c 	beq.w	802299a <_printf_float+0xb6>
 8022c62:	9a06      	ldr	r2, [sp, #24]
 8022c64:	f10b 0b01 	add.w	fp, fp, #1
 8022c68:	e7bb      	b.n	8022be2 <_printf_float+0x2fe>
 8022c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022c6e:	4631      	mov	r1, r6
 8022c70:	4628      	mov	r0, r5
 8022c72:	47b8      	blx	r7
 8022c74:	3001      	adds	r0, #1
 8022c76:	d1c0      	bne.n	8022bfa <_printf_float+0x316>
 8022c78:	e68f      	b.n	802299a <_printf_float+0xb6>
 8022c7a:	9a06      	ldr	r2, [sp, #24]
 8022c7c:	464b      	mov	r3, r9
 8022c7e:	4442      	add	r2, r8
 8022c80:	4631      	mov	r1, r6
 8022c82:	4628      	mov	r0, r5
 8022c84:	47b8      	blx	r7
 8022c86:	3001      	adds	r0, #1
 8022c88:	d1c3      	bne.n	8022c12 <_printf_float+0x32e>
 8022c8a:	e686      	b.n	802299a <_printf_float+0xb6>
 8022c8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8022c90:	f1ba 0f01 	cmp.w	sl, #1
 8022c94:	dc01      	bgt.n	8022c9a <_printf_float+0x3b6>
 8022c96:	07db      	lsls	r3, r3, #31
 8022c98:	d536      	bpl.n	8022d08 <_printf_float+0x424>
 8022c9a:	2301      	movs	r3, #1
 8022c9c:	4642      	mov	r2, r8
 8022c9e:	4631      	mov	r1, r6
 8022ca0:	4628      	mov	r0, r5
 8022ca2:	47b8      	blx	r7
 8022ca4:	3001      	adds	r0, #1
 8022ca6:	f43f ae78 	beq.w	802299a <_printf_float+0xb6>
 8022caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022cae:	4631      	mov	r1, r6
 8022cb0:	4628      	mov	r0, r5
 8022cb2:	47b8      	blx	r7
 8022cb4:	3001      	adds	r0, #1
 8022cb6:	f43f ae70 	beq.w	802299a <_printf_float+0xb6>
 8022cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8022cbe:	2200      	movs	r2, #0
 8022cc0:	2300      	movs	r3, #0
 8022cc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8022cc6:	f7fd fe77 	bl	80209b8 <__aeabi_dcmpeq>
 8022cca:	b9c0      	cbnz	r0, 8022cfe <_printf_float+0x41a>
 8022ccc:	4653      	mov	r3, sl
 8022cce:	f108 0201 	add.w	r2, r8, #1
 8022cd2:	4631      	mov	r1, r6
 8022cd4:	4628      	mov	r0, r5
 8022cd6:	47b8      	blx	r7
 8022cd8:	3001      	adds	r0, #1
 8022cda:	d10c      	bne.n	8022cf6 <_printf_float+0x412>
 8022cdc:	e65d      	b.n	802299a <_printf_float+0xb6>
 8022cde:	2301      	movs	r3, #1
 8022ce0:	465a      	mov	r2, fp
 8022ce2:	4631      	mov	r1, r6
 8022ce4:	4628      	mov	r0, r5
 8022ce6:	47b8      	blx	r7
 8022ce8:	3001      	adds	r0, #1
 8022cea:	f43f ae56 	beq.w	802299a <_printf_float+0xb6>
 8022cee:	f108 0801 	add.w	r8, r8, #1
 8022cf2:	45d0      	cmp	r8, sl
 8022cf4:	dbf3      	blt.n	8022cde <_printf_float+0x3fa>
 8022cf6:	464b      	mov	r3, r9
 8022cf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8022cfc:	e6df      	b.n	8022abe <_printf_float+0x1da>
 8022cfe:	f04f 0800 	mov.w	r8, #0
 8022d02:	f104 0b1a 	add.w	fp, r4, #26
 8022d06:	e7f4      	b.n	8022cf2 <_printf_float+0x40e>
 8022d08:	2301      	movs	r3, #1
 8022d0a:	4642      	mov	r2, r8
 8022d0c:	e7e1      	b.n	8022cd2 <_printf_float+0x3ee>
 8022d0e:	2301      	movs	r3, #1
 8022d10:	464a      	mov	r2, r9
 8022d12:	4631      	mov	r1, r6
 8022d14:	4628      	mov	r0, r5
 8022d16:	47b8      	blx	r7
 8022d18:	3001      	adds	r0, #1
 8022d1a:	f43f ae3e 	beq.w	802299a <_printf_float+0xb6>
 8022d1e:	f108 0801 	add.w	r8, r8, #1
 8022d22:	68e3      	ldr	r3, [r4, #12]
 8022d24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022d26:	1a5b      	subs	r3, r3, r1
 8022d28:	4543      	cmp	r3, r8
 8022d2a:	dcf0      	bgt.n	8022d0e <_printf_float+0x42a>
 8022d2c:	e6fc      	b.n	8022b28 <_printf_float+0x244>
 8022d2e:	f04f 0800 	mov.w	r8, #0
 8022d32:	f104 0919 	add.w	r9, r4, #25
 8022d36:	e7f4      	b.n	8022d22 <_printf_float+0x43e>

08022d38 <_printf_common>:
 8022d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d3c:	4616      	mov	r6, r2
 8022d3e:	4698      	mov	r8, r3
 8022d40:	688a      	ldr	r2, [r1, #8]
 8022d42:	690b      	ldr	r3, [r1, #16]
 8022d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022d48:	4293      	cmp	r3, r2
 8022d4a:	bfb8      	it	lt
 8022d4c:	4613      	movlt	r3, r2
 8022d4e:	6033      	str	r3, [r6, #0]
 8022d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022d54:	4607      	mov	r7, r0
 8022d56:	460c      	mov	r4, r1
 8022d58:	b10a      	cbz	r2, 8022d5e <_printf_common+0x26>
 8022d5a:	3301      	adds	r3, #1
 8022d5c:	6033      	str	r3, [r6, #0]
 8022d5e:	6823      	ldr	r3, [r4, #0]
 8022d60:	0699      	lsls	r1, r3, #26
 8022d62:	bf42      	ittt	mi
 8022d64:	6833      	ldrmi	r3, [r6, #0]
 8022d66:	3302      	addmi	r3, #2
 8022d68:	6033      	strmi	r3, [r6, #0]
 8022d6a:	6825      	ldr	r5, [r4, #0]
 8022d6c:	f015 0506 	ands.w	r5, r5, #6
 8022d70:	d106      	bne.n	8022d80 <_printf_common+0x48>
 8022d72:	f104 0a19 	add.w	sl, r4, #25
 8022d76:	68e3      	ldr	r3, [r4, #12]
 8022d78:	6832      	ldr	r2, [r6, #0]
 8022d7a:	1a9b      	subs	r3, r3, r2
 8022d7c:	42ab      	cmp	r3, r5
 8022d7e:	dc26      	bgt.n	8022dce <_printf_common+0x96>
 8022d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022d84:	6822      	ldr	r2, [r4, #0]
 8022d86:	3b00      	subs	r3, #0
 8022d88:	bf18      	it	ne
 8022d8a:	2301      	movne	r3, #1
 8022d8c:	0692      	lsls	r2, r2, #26
 8022d8e:	d42b      	bmi.n	8022de8 <_printf_common+0xb0>
 8022d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022d94:	4641      	mov	r1, r8
 8022d96:	4638      	mov	r0, r7
 8022d98:	47c8      	blx	r9
 8022d9a:	3001      	adds	r0, #1
 8022d9c:	d01e      	beq.n	8022ddc <_printf_common+0xa4>
 8022d9e:	6823      	ldr	r3, [r4, #0]
 8022da0:	6922      	ldr	r2, [r4, #16]
 8022da2:	f003 0306 	and.w	r3, r3, #6
 8022da6:	2b04      	cmp	r3, #4
 8022da8:	bf02      	ittt	eq
 8022daa:	68e5      	ldreq	r5, [r4, #12]
 8022dac:	6833      	ldreq	r3, [r6, #0]
 8022dae:	1aed      	subeq	r5, r5, r3
 8022db0:	68a3      	ldr	r3, [r4, #8]
 8022db2:	bf0c      	ite	eq
 8022db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022db8:	2500      	movne	r5, #0
 8022dba:	4293      	cmp	r3, r2
 8022dbc:	bfc4      	itt	gt
 8022dbe:	1a9b      	subgt	r3, r3, r2
 8022dc0:	18ed      	addgt	r5, r5, r3
 8022dc2:	2600      	movs	r6, #0
 8022dc4:	341a      	adds	r4, #26
 8022dc6:	42b5      	cmp	r5, r6
 8022dc8:	d11a      	bne.n	8022e00 <_printf_common+0xc8>
 8022dca:	2000      	movs	r0, #0
 8022dcc:	e008      	b.n	8022de0 <_printf_common+0xa8>
 8022dce:	2301      	movs	r3, #1
 8022dd0:	4652      	mov	r2, sl
 8022dd2:	4641      	mov	r1, r8
 8022dd4:	4638      	mov	r0, r7
 8022dd6:	47c8      	blx	r9
 8022dd8:	3001      	adds	r0, #1
 8022dda:	d103      	bne.n	8022de4 <_printf_common+0xac>
 8022ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022de4:	3501      	adds	r5, #1
 8022de6:	e7c6      	b.n	8022d76 <_printf_common+0x3e>
 8022de8:	18e1      	adds	r1, r4, r3
 8022dea:	1c5a      	adds	r2, r3, #1
 8022dec:	2030      	movs	r0, #48	@ 0x30
 8022dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022df2:	4422      	add	r2, r4
 8022df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022dfc:	3302      	adds	r3, #2
 8022dfe:	e7c7      	b.n	8022d90 <_printf_common+0x58>
 8022e00:	2301      	movs	r3, #1
 8022e02:	4622      	mov	r2, r4
 8022e04:	4641      	mov	r1, r8
 8022e06:	4638      	mov	r0, r7
 8022e08:	47c8      	blx	r9
 8022e0a:	3001      	adds	r0, #1
 8022e0c:	d0e6      	beq.n	8022ddc <_printf_common+0xa4>
 8022e0e:	3601      	adds	r6, #1
 8022e10:	e7d9      	b.n	8022dc6 <_printf_common+0x8e>
	...

08022e14 <_printf_i>:
 8022e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022e18:	7e0f      	ldrb	r7, [r1, #24]
 8022e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022e1c:	2f78      	cmp	r7, #120	@ 0x78
 8022e1e:	4691      	mov	r9, r2
 8022e20:	4680      	mov	r8, r0
 8022e22:	460c      	mov	r4, r1
 8022e24:	469a      	mov	sl, r3
 8022e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022e2a:	d807      	bhi.n	8022e3c <_printf_i+0x28>
 8022e2c:	2f62      	cmp	r7, #98	@ 0x62
 8022e2e:	d80a      	bhi.n	8022e46 <_printf_i+0x32>
 8022e30:	2f00      	cmp	r7, #0
 8022e32:	f000 80d2 	beq.w	8022fda <_printf_i+0x1c6>
 8022e36:	2f58      	cmp	r7, #88	@ 0x58
 8022e38:	f000 80b9 	beq.w	8022fae <_printf_i+0x19a>
 8022e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022e44:	e03a      	b.n	8022ebc <_printf_i+0xa8>
 8022e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022e4a:	2b15      	cmp	r3, #21
 8022e4c:	d8f6      	bhi.n	8022e3c <_printf_i+0x28>
 8022e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8022e54 <_printf_i+0x40>)
 8022e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022e54:	08022ead 	.word	0x08022ead
 8022e58:	08022ec1 	.word	0x08022ec1
 8022e5c:	08022e3d 	.word	0x08022e3d
 8022e60:	08022e3d 	.word	0x08022e3d
 8022e64:	08022e3d 	.word	0x08022e3d
 8022e68:	08022e3d 	.word	0x08022e3d
 8022e6c:	08022ec1 	.word	0x08022ec1
 8022e70:	08022e3d 	.word	0x08022e3d
 8022e74:	08022e3d 	.word	0x08022e3d
 8022e78:	08022e3d 	.word	0x08022e3d
 8022e7c:	08022e3d 	.word	0x08022e3d
 8022e80:	08022fc1 	.word	0x08022fc1
 8022e84:	08022eeb 	.word	0x08022eeb
 8022e88:	08022f7b 	.word	0x08022f7b
 8022e8c:	08022e3d 	.word	0x08022e3d
 8022e90:	08022e3d 	.word	0x08022e3d
 8022e94:	08022fe3 	.word	0x08022fe3
 8022e98:	08022e3d 	.word	0x08022e3d
 8022e9c:	08022eeb 	.word	0x08022eeb
 8022ea0:	08022e3d 	.word	0x08022e3d
 8022ea4:	08022e3d 	.word	0x08022e3d
 8022ea8:	08022f83 	.word	0x08022f83
 8022eac:	6833      	ldr	r3, [r6, #0]
 8022eae:	1d1a      	adds	r2, r3, #4
 8022eb0:	681b      	ldr	r3, [r3, #0]
 8022eb2:	6032      	str	r2, [r6, #0]
 8022eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022ebc:	2301      	movs	r3, #1
 8022ebe:	e09d      	b.n	8022ffc <_printf_i+0x1e8>
 8022ec0:	6833      	ldr	r3, [r6, #0]
 8022ec2:	6820      	ldr	r0, [r4, #0]
 8022ec4:	1d19      	adds	r1, r3, #4
 8022ec6:	6031      	str	r1, [r6, #0]
 8022ec8:	0606      	lsls	r6, r0, #24
 8022eca:	d501      	bpl.n	8022ed0 <_printf_i+0xbc>
 8022ecc:	681d      	ldr	r5, [r3, #0]
 8022ece:	e003      	b.n	8022ed8 <_printf_i+0xc4>
 8022ed0:	0645      	lsls	r5, r0, #25
 8022ed2:	d5fb      	bpl.n	8022ecc <_printf_i+0xb8>
 8022ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022ed8:	2d00      	cmp	r5, #0
 8022eda:	da03      	bge.n	8022ee4 <_printf_i+0xd0>
 8022edc:	232d      	movs	r3, #45	@ 0x2d
 8022ede:	426d      	negs	r5, r5
 8022ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022ee4:	4859      	ldr	r0, [pc, #356]	@ (802304c <_printf_i+0x238>)
 8022ee6:	230a      	movs	r3, #10
 8022ee8:	e011      	b.n	8022f0e <_printf_i+0xfa>
 8022eea:	6821      	ldr	r1, [r4, #0]
 8022eec:	6833      	ldr	r3, [r6, #0]
 8022eee:	0608      	lsls	r0, r1, #24
 8022ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8022ef4:	d402      	bmi.n	8022efc <_printf_i+0xe8>
 8022ef6:	0649      	lsls	r1, r1, #25
 8022ef8:	bf48      	it	mi
 8022efa:	b2ad      	uxthmi	r5, r5
 8022efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8022efe:	4853      	ldr	r0, [pc, #332]	@ (802304c <_printf_i+0x238>)
 8022f00:	6033      	str	r3, [r6, #0]
 8022f02:	bf14      	ite	ne
 8022f04:	230a      	movne	r3, #10
 8022f06:	2308      	moveq	r3, #8
 8022f08:	2100      	movs	r1, #0
 8022f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022f0e:	6866      	ldr	r6, [r4, #4]
 8022f10:	60a6      	str	r6, [r4, #8]
 8022f12:	2e00      	cmp	r6, #0
 8022f14:	bfa2      	ittt	ge
 8022f16:	6821      	ldrge	r1, [r4, #0]
 8022f18:	f021 0104 	bicge.w	r1, r1, #4
 8022f1c:	6021      	strge	r1, [r4, #0]
 8022f1e:	b90d      	cbnz	r5, 8022f24 <_printf_i+0x110>
 8022f20:	2e00      	cmp	r6, #0
 8022f22:	d04b      	beq.n	8022fbc <_printf_i+0x1a8>
 8022f24:	4616      	mov	r6, r2
 8022f26:	fbb5 f1f3 	udiv	r1, r5, r3
 8022f2a:	fb03 5711 	mls	r7, r3, r1, r5
 8022f2e:	5dc7      	ldrb	r7, [r0, r7]
 8022f30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022f34:	462f      	mov	r7, r5
 8022f36:	42bb      	cmp	r3, r7
 8022f38:	460d      	mov	r5, r1
 8022f3a:	d9f4      	bls.n	8022f26 <_printf_i+0x112>
 8022f3c:	2b08      	cmp	r3, #8
 8022f3e:	d10b      	bne.n	8022f58 <_printf_i+0x144>
 8022f40:	6823      	ldr	r3, [r4, #0]
 8022f42:	07df      	lsls	r7, r3, #31
 8022f44:	d508      	bpl.n	8022f58 <_printf_i+0x144>
 8022f46:	6923      	ldr	r3, [r4, #16]
 8022f48:	6861      	ldr	r1, [r4, #4]
 8022f4a:	4299      	cmp	r1, r3
 8022f4c:	bfde      	ittt	le
 8022f4e:	2330      	movle	r3, #48	@ 0x30
 8022f50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022f54:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022f58:	1b92      	subs	r2, r2, r6
 8022f5a:	6122      	str	r2, [r4, #16]
 8022f5c:	f8cd a000 	str.w	sl, [sp]
 8022f60:	464b      	mov	r3, r9
 8022f62:	aa03      	add	r2, sp, #12
 8022f64:	4621      	mov	r1, r4
 8022f66:	4640      	mov	r0, r8
 8022f68:	f7ff fee6 	bl	8022d38 <_printf_common>
 8022f6c:	3001      	adds	r0, #1
 8022f6e:	d14a      	bne.n	8023006 <_printf_i+0x1f2>
 8022f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022f74:	b004      	add	sp, #16
 8022f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f7a:	6823      	ldr	r3, [r4, #0]
 8022f7c:	f043 0320 	orr.w	r3, r3, #32
 8022f80:	6023      	str	r3, [r4, #0]
 8022f82:	4833      	ldr	r0, [pc, #204]	@ (8023050 <_printf_i+0x23c>)
 8022f84:	2778      	movs	r7, #120	@ 0x78
 8022f86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022f8a:	6823      	ldr	r3, [r4, #0]
 8022f8c:	6831      	ldr	r1, [r6, #0]
 8022f8e:	061f      	lsls	r7, r3, #24
 8022f90:	f851 5b04 	ldr.w	r5, [r1], #4
 8022f94:	d402      	bmi.n	8022f9c <_printf_i+0x188>
 8022f96:	065f      	lsls	r7, r3, #25
 8022f98:	bf48      	it	mi
 8022f9a:	b2ad      	uxthmi	r5, r5
 8022f9c:	6031      	str	r1, [r6, #0]
 8022f9e:	07d9      	lsls	r1, r3, #31
 8022fa0:	bf44      	itt	mi
 8022fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8022fa6:	6023      	strmi	r3, [r4, #0]
 8022fa8:	b11d      	cbz	r5, 8022fb2 <_printf_i+0x19e>
 8022faa:	2310      	movs	r3, #16
 8022fac:	e7ac      	b.n	8022f08 <_printf_i+0xf4>
 8022fae:	4827      	ldr	r0, [pc, #156]	@ (802304c <_printf_i+0x238>)
 8022fb0:	e7e9      	b.n	8022f86 <_printf_i+0x172>
 8022fb2:	6823      	ldr	r3, [r4, #0]
 8022fb4:	f023 0320 	bic.w	r3, r3, #32
 8022fb8:	6023      	str	r3, [r4, #0]
 8022fba:	e7f6      	b.n	8022faa <_printf_i+0x196>
 8022fbc:	4616      	mov	r6, r2
 8022fbe:	e7bd      	b.n	8022f3c <_printf_i+0x128>
 8022fc0:	6833      	ldr	r3, [r6, #0]
 8022fc2:	6825      	ldr	r5, [r4, #0]
 8022fc4:	6961      	ldr	r1, [r4, #20]
 8022fc6:	1d18      	adds	r0, r3, #4
 8022fc8:	6030      	str	r0, [r6, #0]
 8022fca:	062e      	lsls	r6, r5, #24
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	d501      	bpl.n	8022fd4 <_printf_i+0x1c0>
 8022fd0:	6019      	str	r1, [r3, #0]
 8022fd2:	e002      	b.n	8022fda <_printf_i+0x1c6>
 8022fd4:	0668      	lsls	r0, r5, #25
 8022fd6:	d5fb      	bpl.n	8022fd0 <_printf_i+0x1bc>
 8022fd8:	8019      	strh	r1, [r3, #0]
 8022fda:	2300      	movs	r3, #0
 8022fdc:	6123      	str	r3, [r4, #16]
 8022fde:	4616      	mov	r6, r2
 8022fe0:	e7bc      	b.n	8022f5c <_printf_i+0x148>
 8022fe2:	6833      	ldr	r3, [r6, #0]
 8022fe4:	1d1a      	adds	r2, r3, #4
 8022fe6:	6032      	str	r2, [r6, #0]
 8022fe8:	681e      	ldr	r6, [r3, #0]
 8022fea:	6862      	ldr	r2, [r4, #4]
 8022fec:	2100      	movs	r1, #0
 8022fee:	4630      	mov	r0, r6
 8022ff0:	f7fd f866 	bl	80200c0 <memchr>
 8022ff4:	b108      	cbz	r0, 8022ffa <_printf_i+0x1e6>
 8022ff6:	1b80      	subs	r0, r0, r6
 8022ff8:	6060      	str	r0, [r4, #4]
 8022ffa:	6863      	ldr	r3, [r4, #4]
 8022ffc:	6123      	str	r3, [r4, #16]
 8022ffe:	2300      	movs	r3, #0
 8023000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023004:	e7aa      	b.n	8022f5c <_printf_i+0x148>
 8023006:	6923      	ldr	r3, [r4, #16]
 8023008:	4632      	mov	r2, r6
 802300a:	4649      	mov	r1, r9
 802300c:	4640      	mov	r0, r8
 802300e:	47d0      	blx	sl
 8023010:	3001      	adds	r0, #1
 8023012:	d0ad      	beq.n	8022f70 <_printf_i+0x15c>
 8023014:	6823      	ldr	r3, [r4, #0]
 8023016:	079b      	lsls	r3, r3, #30
 8023018:	d413      	bmi.n	8023042 <_printf_i+0x22e>
 802301a:	68e0      	ldr	r0, [r4, #12]
 802301c:	9b03      	ldr	r3, [sp, #12]
 802301e:	4298      	cmp	r0, r3
 8023020:	bfb8      	it	lt
 8023022:	4618      	movlt	r0, r3
 8023024:	e7a6      	b.n	8022f74 <_printf_i+0x160>
 8023026:	2301      	movs	r3, #1
 8023028:	4632      	mov	r2, r6
 802302a:	4649      	mov	r1, r9
 802302c:	4640      	mov	r0, r8
 802302e:	47d0      	blx	sl
 8023030:	3001      	adds	r0, #1
 8023032:	d09d      	beq.n	8022f70 <_printf_i+0x15c>
 8023034:	3501      	adds	r5, #1
 8023036:	68e3      	ldr	r3, [r4, #12]
 8023038:	9903      	ldr	r1, [sp, #12]
 802303a:	1a5b      	subs	r3, r3, r1
 802303c:	42ab      	cmp	r3, r5
 802303e:	dcf2      	bgt.n	8023026 <_printf_i+0x212>
 8023040:	e7eb      	b.n	802301a <_printf_i+0x206>
 8023042:	2500      	movs	r5, #0
 8023044:	f104 0619 	add.w	r6, r4, #25
 8023048:	e7f5      	b.n	8023036 <_printf_i+0x222>
 802304a:	bf00      	nop
 802304c:	080252b2 	.word	0x080252b2
 8023050:	080252c3 	.word	0x080252c3

08023054 <std>:
 8023054:	2300      	movs	r3, #0
 8023056:	b510      	push	{r4, lr}
 8023058:	4604      	mov	r4, r0
 802305a:	e9c0 3300 	strd	r3, r3, [r0]
 802305e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023062:	6083      	str	r3, [r0, #8]
 8023064:	8181      	strh	r1, [r0, #12]
 8023066:	6643      	str	r3, [r0, #100]	@ 0x64
 8023068:	81c2      	strh	r2, [r0, #14]
 802306a:	6183      	str	r3, [r0, #24]
 802306c:	4619      	mov	r1, r3
 802306e:	2208      	movs	r2, #8
 8023070:	305c      	adds	r0, #92	@ 0x5c
 8023072:	f000 f8b1 	bl	80231d8 <memset>
 8023076:	4b0d      	ldr	r3, [pc, #52]	@ (80230ac <std+0x58>)
 8023078:	6263      	str	r3, [r4, #36]	@ 0x24
 802307a:	4b0d      	ldr	r3, [pc, #52]	@ (80230b0 <std+0x5c>)
 802307c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802307e:	4b0d      	ldr	r3, [pc, #52]	@ (80230b4 <std+0x60>)
 8023080:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023082:	4b0d      	ldr	r3, [pc, #52]	@ (80230b8 <std+0x64>)
 8023084:	6323      	str	r3, [r4, #48]	@ 0x30
 8023086:	4b0d      	ldr	r3, [pc, #52]	@ (80230bc <std+0x68>)
 8023088:	6224      	str	r4, [r4, #32]
 802308a:	429c      	cmp	r4, r3
 802308c:	d006      	beq.n	802309c <std+0x48>
 802308e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023092:	4294      	cmp	r4, r2
 8023094:	d002      	beq.n	802309c <std+0x48>
 8023096:	33d0      	adds	r3, #208	@ 0xd0
 8023098:	429c      	cmp	r4, r3
 802309a:	d105      	bne.n	80230a8 <std+0x54>
 802309c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80230a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230a4:	f000 b8ce 	b.w	8023244 <__retarget_lock_init_recursive>
 80230a8:	bd10      	pop	{r4, pc}
 80230aa:	bf00      	nop
 80230ac:	080248c9 	.word	0x080248c9
 80230b0:	080248eb 	.word	0x080248eb
 80230b4:	08024923 	.word	0x08024923
 80230b8:	08024947 	.word	0x08024947
 80230bc:	200001f8 	.word	0x200001f8

080230c0 <stdio_exit_handler>:
 80230c0:	4a02      	ldr	r2, [pc, #8]	@ (80230cc <stdio_exit_handler+0xc>)
 80230c2:	4903      	ldr	r1, [pc, #12]	@ (80230d0 <stdio_exit_handler+0x10>)
 80230c4:	4803      	ldr	r0, [pc, #12]	@ (80230d4 <stdio_exit_handler+0x14>)
 80230c6:	f000 b869 	b.w	802319c <_fwalk_sglue>
 80230ca:	bf00      	nop
 80230cc:	2000000c 	.word	0x2000000c
 80230d0:	0802415d 	.word	0x0802415d
 80230d4:	2000001c 	.word	0x2000001c

080230d8 <cleanup_stdio>:
 80230d8:	6841      	ldr	r1, [r0, #4]
 80230da:	4b0c      	ldr	r3, [pc, #48]	@ (802310c <cleanup_stdio+0x34>)
 80230dc:	4299      	cmp	r1, r3
 80230de:	b510      	push	{r4, lr}
 80230e0:	4604      	mov	r4, r0
 80230e2:	d001      	beq.n	80230e8 <cleanup_stdio+0x10>
 80230e4:	f001 f83a 	bl	802415c <_fflush_r>
 80230e8:	68a1      	ldr	r1, [r4, #8]
 80230ea:	4b09      	ldr	r3, [pc, #36]	@ (8023110 <cleanup_stdio+0x38>)
 80230ec:	4299      	cmp	r1, r3
 80230ee:	d002      	beq.n	80230f6 <cleanup_stdio+0x1e>
 80230f0:	4620      	mov	r0, r4
 80230f2:	f001 f833 	bl	802415c <_fflush_r>
 80230f6:	68e1      	ldr	r1, [r4, #12]
 80230f8:	4b06      	ldr	r3, [pc, #24]	@ (8023114 <cleanup_stdio+0x3c>)
 80230fa:	4299      	cmp	r1, r3
 80230fc:	d004      	beq.n	8023108 <cleanup_stdio+0x30>
 80230fe:	4620      	mov	r0, r4
 8023100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023104:	f001 b82a 	b.w	802415c <_fflush_r>
 8023108:	bd10      	pop	{r4, pc}
 802310a:	bf00      	nop
 802310c:	200001f8 	.word	0x200001f8
 8023110:	20000260 	.word	0x20000260
 8023114:	200002c8 	.word	0x200002c8

08023118 <global_stdio_init.part.0>:
 8023118:	b510      	push	{r4, lr}
 802311a:	4b0b      	ldr	r3, [pc, #44]	@ (8023148 <global_stdio_init.part.0+0x30>)
 802311c:	4c0b      	ldr	r4, [pc, #44]	@ (802314c <global_stdio_init.part.0+0x34>)
 802311e:	4a0c      	ldr	r2, [pc, #48]	@ (8023150 <global_stdio_init.part.0+0x38>)
 8023120:	601a      	str	r2, [r3, #0]
 8023122:	4620      	mov	r0, r4
 8023124:	2200      	movs	r2, #0
 8023126:	2104      	movs	r1, #4
 8023128:	f7ff ff94 	bl	8023054 <std>
 802312c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023130:	2201      	movs	r2, #1
 8023132:	2109      	movs	r1, #9
 8023134:	f7ff ff8e 	bl	8023054 <std>
 8023138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802313c:	2202      	movs	r2, #2
 802313e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023142:	2112      	movs	r1, #18
 8023144:	f7ff bf86 	b.w	8023054 <std>
 8023148:	20000330 	.word	0x20000330
 802314c:	200001f8 	.word	0x200001f8
 8023150:	080230c1 	.word	0x080230c1

08023154 <__sfp_lock_acquire>:
 8023154:	4801      	ldr	r0, [pc, #4]	@ (802315c <__sfp_lock_acquire+0x8>)
 8023156:	f000 b876 	b.w	8023246 <__retarget_lock_acquire_recursive>
 802315a:	bf00      	nop
 802315c:	20000335 	.word	0x20000335

08023160 <__sfp_lock_release>:
 8023160:	4801      	ldr	r0, [pc, #4]	@ (8023168 <__sfp_lock_release+0x8>)
 8023162:	f000 b871 	b.w	8023248 <__retarget_lock_release_recursive>
 8023166:	bf00      	nop
 8023168:	20000335 	.word	0x20000335

0802316c <__sinit>:
 802316c:	b510      	push	{r4, lr}
 802316e:	4604      	mov	r4, r0
 8023170:	f7ff fff0 	bl	8023154 <__sfp_lock_acquire>
 8023174:	6a23      	ldr	r3, [r4, #32]
 8023176:	b11b      	cbz	r3, 8023180 <__sinit+0x14>
 8023178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802317c:	f7ff bff0 	b.w	8023160 <__sfp_lock_release>
 8023180:	4b04      	ldr	r3, [pc, #16]	@ (8023194 <__sinit+0x28>)
 8023182:	6223      	str	r3, [r4, #32]
 8023184:	4b04      	ldr	r3, [pc, #16]	@ (8023198 <__sinit+0x2c>)
 8023186:	681b      	ldr	r3, [r3, #0]
 8023188:	2b00      	cmp	r3, #0
 802318a:	d1f5      	bne.n	8023178 <__sinit+0xc>
 802318c:	f7ff ffc4 	bl	8023118 <global_stdio_init.part.0>
 8023190:	e7f2      	b.n	8023178 <__sinit+0xc>
 8023192:	bf00      	nop
 8023194:	080230d9 	.word	0x080230d9
 8023198:	20000330 	.word	0x20000330

0802319c <_fwalk_sglue>:
 802319c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231a0:	4607      	mov	r7, r0
 80231a2:	4688      	mov	r8, r1
 80231a4:	4614      	mov	r4, r2
 80231a6:	2600      	movs	r6, #0
 80231a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80231ac:	f1b9 0901 	subs.w	r9, r9, #1
 80231b0:	d505      	bpl.n	80231be <_fwalk_sglue+0x22>
 80231b2:	6824      	ldr	r4, [r4, #0]
 80231b4:	2c00      	cmp	r4, #0
 80231b6:	d1f7      	bne.n	80231a8 <_fwalk_sglue+0xc>
 80231b8:	4630      	mov	r0, r6
 80231ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231be:	89ab      	ldrh	r3, [r5, #12]
 80231c0:	2b01      	cmp	r3, #1
 80231c2:	d907      	bls.n	80231d4 <_fwalk_sglue+0x38>
 80231c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80231c8:	3301      	adds	r3, #1
 80231ca:	d003      	beq.n	80231d4 <_fwalk_sglue+0x38>
 80231cc:	4629      	mov	r1, r5
 80231ce:	4638      	mov	r0, r7
 80231d0:	47c0      	blx	r8
 80231d2:	4306      	orrs	r6, r0
 80231d4:	3568      	adds	r5, #104	@ 0x68
 80231d6:	e7e9      	b.n	80231ac <_fwalk_sglue+0x10>

080231d8 <memset>:
 80231d8:	4402      	add	r2, r0
 80231da:	4603      	mov	r3, r0
 80231dc:	4293      	cmp	r3, r2
 80231de:	d100      	bne.n	80231e2 <memset+0xa>
 80231e0:	4770      	bx	lr
 80231e2:	f803 1b01 	strb.w	r1, [r3], #1
 80231e6:	e7f9      	b.n	80231dc <memset+0x4>

080231e8 <_localeconv_r>:
 80231e8:	4800      	ldr	r0, [pc, #0]	@ (80231ec <_localeconv_r+0x4>)
 80231ea:	4770      	bx	lr
 80231ec:	20000158 	.word	0x20000158

080231f0 <__errno>:
 80231f0:	4b01      	ldr	r3, [pc, #4]	@ (80231f8 <__errno+0x8>)
 80231f2:	6818      	ldr	r0, [r3, #0]
 80231f4:	4770      	bx	lr
 80231f6:	bf00      	nop
 80231f8:	20000018 	.word	0x20000018

080231fc <__libc_init_array>:
 80231fc:	b570      	push	{r4, r5, r6, lr}
 80231fe:	4d0d      	ldr	r5, [pc, #52]	@ (8023234 <__libc_init_array+0x38>)
 8023200:	4c0d      	ldr	r4, [pc, #52]	@ (8023238 <__libc_init_array+0x3c>)
 8023202:	1b64      	subs	r4, r4, r5
 8023204:	10a4      	asrs	r4, r4, #2
 8023206:	2600      	movs	r6, #0
 8023208:	42a6      	cmp	r6, r4
 802320a:	d109      	bne.n	8023220 <__libc_init_array+0x24>
 802320c:	4d0b      	ldr	r5, [pc, #44]	@ (802323c <__libc_init_array+0x40>)
 802320e:	4c0c      	ldr	r4, [pc, #48]	@ (8023240 <__libc_init_array+0x44>)
 8023210:	f001 ff46 	bl	80250a0 <_init>
 8023214:	1b64      	subs	r4, r4, r5
 8023216:	10a4      	asrs	r4, r4, #2
 8023218:	2600      	movs	r6, #0
 802321a:	42a6      	cmp	r6, r4
 802321c:	d105      	bne.n	802322a <__libc_init_array+0x2e>
 802321e:	bd70      	pop	{r4, r5, r6, pc}
 8023220:	f855 3b04 	ldr.w	r3, [r5], #4
 8023224:	4798      	blx	r3
 8023226:	3601      	adds	r6, #1
 8023228:	e7ee      	b.n	8023208 <__libc_init_array+0xc>
 802322a:	f855 3b04 	ldr.w	r3, [r5], #4
 802322e:	4798      	blx	r3
 8023230:	3601      	adds	r6, #1
 8023232:	e7f2      	b.n	802321a <__libc_init_array+0x1e>
 8023234:	08025618 	.word	0x08025618
 8023238:	08025618 	.word	0x08025618
 802323c:	08025618 	.word	0x08025618
 8023240:	0802561c 	.word	0x0802561c

08023244 <__retarget_lock_init_recursive>:
 8023244:	4770      	bx	lr

08023246 <__retarget_lock_acquire_recursive>:
 8023246:	4770      	bx	lr

08023248 <__retarget_lock_release_recursive>:
 8023248:	4770      	bx	lr

0802324a <memcpy>:
 802324a:	440a      	add	r2, r1
 802324c:	4291      	cmp	r1, r2
 802324e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8023252:	d100      	bne.n	8023256 <memcpy+0xc>
 8023254:	4770      	bx	lr
 8023256:	b510      	push	{r4, lr}
 8023258:	f811 4b01 	ldrb.w	r4, [r1], #1
 802325c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023260:	4291      	cmp	r1, r2
 8023262:	d1f9      	bne.n	8023258 <memcpy+0xe>
 8023264:	bd10      	pop	{r4, pc}

08023266 <quorem>:
 8023266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802326a:	6903      	ldr	r3, [r0, #16]
 802326c:	690c      	ldr	r4, [r1, #16]
 802326e:	42a3      	cmp	r3, r4
 8023270:	4607      	mov	r7, r0
 8023272:	db7e      	blt.n	8023372 <quorem+0x10c>
 8023274:	3c01      	subs	r4, #1
 8023276:	f101 0814 	add.w	r8, r1, #20
 802327a:	00a3      	lsls	r3, r4, #2
 802327c:	f100 0514 	add.w	r5, r0, #20
 8023280:	9300      	str	r3, [sp, #0]
 8023282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023286:	9301      	str	r3, [sp, #4]
 8023288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802328c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023290:	3301      	adds	r3, #1
 8023292:	429a      	cmp	r2, r3
 8023294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8023298:	fbb2 f6f3 	udiv	r6, r2, r3
 802329c:	d32e      	bcc.n	80232fc <quorem+0x96>
 802329e:	f04f 0a00 	mov.w	sl, #0
 80232a2:	46c4      	mov	ip, r8
 80232a4:	46ae      	mov	lr, r5
 80232a6:	46d3      	mov	fp, sl
 80232a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80232ac:	b298      	uxth	r0, r3
 80232ae:	fb06 a000 	mla	r0, r6, r0, sl
 80232b2:	0c02      	lsrs	r2, r0, #16
 80232b4:	0c1b      	lsrs	r3, r3, #16
 80232b6:	fb06 2303 	mla	r3, r6, r3, r2
 80232ba:	f8de 2000 	ldr.w	r2, [lr]
 80232be:	b280      	uxth	r0, r0
 80232c0:	b292      	uxth	r2, r2
 80232c2:	1a12      	subs	r2, r2, r0
 80232c4:	445a      	add	r2, fp
 80232c6:	f8de 0000 	ldr.w	r0, [lr]
 80232ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80232ce:	b29b      	uxth	r3, r3
 80232d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80232d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80232d8:	b292      	uxth	r2, r2
 80232da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80232de:	45e1      	cmp	r9, ip
 80232e0:	f84e 2b04 	str.w	r2, [lr], #4
 80232e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80232e8:	d2de      	bcs.n	80232a8 <quorem+0x42>
 80232ea:	9b00      	ldr	r3, [sp, #0]
 80232ec:	58eb      	ldr	r3, [r5, r3]
 80232ee:	b92b      	cbnz	r3, 80232fc <quorem+0x96>
 80232f0:	9b01      	ldr	r3, [sp, #4]
 80232f2:	3b04      	subs	r3, #4
 80232f4:	429d      	cmp	r5, r3
 80232f6:	461a      	mov	r2, r3
 80232f8:	d32f      	bcc.n	802335a <quorem+0xf4>
 80232fa:	613c      	str	r4, [r7, #16]
 80232fc:	4638      	mov	r0, r7
 80232fe:	f001 f9db 	bl	80246b8 <__mcmp>
 8023302:	2800      	cmp	r0, #0
 8023304:	db25      	blt.n	8023352 <quorem+0xec>
 8023306:	4629      	mov	r1, r5
 8023308:	2000      	movs	r0, #0
 802330a:	f858 2b04 	ldr.w	r2, [r8], #4
 802330e:	f8d1 c000 	ldr.w	ip, [r1]
 8023312:	fa1f fe82 	uxth.w	lr, r2
 8023316:	fa1f f38c 	uxth.w	r3, ip
 802331a:	eba3 030e 	sub.w	r3, r3, lr
 802331e:	4403      	add	r3, r0
 8023320:	0c12      	lsrs	r2, r2, #16
 8023322:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8023326:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802332a:	b29b      	uxth	r3, r3
 802332c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023330:	45c1      	cmp	r9, r8
 8023332:	f841 3b04 	str.w	r3, [r1], #4
 8023336:	ea4f 4022 	mov.w	r0, r2, asr #16
 802333a:	d2e6      	bcs.n	802330a <quorem+0xa4>
 802333c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023344:	b922      	cbnz	r2, 8023350 <quorem+0xea>
 8023346:	3b04      	subs	r3, #4
 8023348:	429d      	cmp	r5, r3
 802334a:	461a      	mov	r2, r3
 802334c:	d30b      	bcc.n	8023366 <quorem+0x100>
 802334e:	613c      	str	r4, [r7, #16]
 8023350:	3601      	adds	r6, #1
 8023352:	4630      	mov	r0, r6
 8023354:	b003      	add	sp, #12
 8023356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802335a:	6812      	ldr	r2, [r2, #0]
 802335c:	3b04      	subs	r3, #4
 802335e:	2a00      	cmp	r2, #0
 8023360:	d1cb      	bne.n	80232fa <quorem+0x94>
 8023362:	3c01      	subs	r4, #1
 8023364:	e7c6      	b.n	80232f4 <quorem+0x8e>
 8023366:	6812      	ldr	r2, [r2, #0]
 8023368:	3b04      	subs	r3, #4
 802336a:	2a00      	cmp	r2, #0
 802336c:	d1ef      	bne.n	802334e <quorem+0xe8>
 802336e:	3c01      	subs	r4, #1
 8023370:	e7ea      	b.n	8023348 <quorem+0xe2>
 8023372:	2000      	movs	r0, #0
 8023374:	e7ee      	b.n	8023354 <quorem+0xee>
	...

08023378 <_dtoa_r>:
 8023378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802337c:	69c7      	ldr	r7, [r0, #28]
 802337e:	b099      	sub	sp, #100	@ 0x64
 8023380:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023384:	ec55 4b10 	vmov	r4, r5, d0
 8023388:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802338a:	9109      	str	r1, [sp, #36]	@ 0x24
 802338c:	4683      	mov	fp, r0
 802338e:	920e      	str	r2, [sp, #56]	@ 0x38
 8023390:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023392:	b97f      	cbnz	r7, 80233b4 <_dtoa_r+0x3c>
 8023394:	2010      	movs	r0, #16
 8023396:	f000 fdb3 	bl	8023f00 <malloc>
 802339a:	4602      	mov	r2, r0
 802339c:	f8cb 001c 	str.w	r0, [fp, #28]
 80233a0:	b920      	cbnz	r0, 80233ac <_dtoa_r+0x34>
 80233a2:	4ba7      	ldr	r3, [pc, #668]	@ (8023640 <_dtoa_r+0x2c8>)
 80233a4:	21ef      	movs	r1, #239	@ 0xef
 80233a6:	48a7      	ldr	r0, [pc, #668]	@ (8023644 <_dtoa_r+0x2cc>)
 80233a8:	f001 fb28 	bl	80249fc <__assert_func>
 80233ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80233b0:	6007      	str	r7, [r0, #0]
 80233b2:	60c7      	str	r7, [r0, #12]
 80233b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80233b8:	6819      	ldr	r1, [r3, #0]
 80233ba:	b159      	cbz	r1, 80233d4 <_dtoa_r+0x5c>
 80233bc:	685a      	ldr	r2, [r3, #4]
 80233be:	604a      	str	r2, [r1, #4]
 80233c0:	2301      	movs	r3, #1
 80233c2:	4093      	lsls	r3, r2
 80233c4:	608b      	str	r3, [r1, #8]
 80233c6:	4658      	mov	r0, fp
 80233c8:	f000 ff3c 	bl	8024244 <_Bfree>
 80233cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80233d0:	2200      	movs	r2, #0
 80233d2:	601a      	str	r2, [r3, #0]
 80233d4:	1e2b      	subs	r3, r5, #0
 80233d6:	bfb9      	ittee	lt
 80233d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80233dc:	9303      	strlt	r3, [sp, #12]
 80233de:	2300      	movge	r3, #0
 80233e0:	6033      	strge	r3, [r6, #0]
 80233e2:	9f03      	ldr	r7, [sp, #12]
 80233e4:	4b98      	ldr	r3, [pc, #608]	@ (8023648 <_dtoa_r+0x2d0>)
 80233e6:	bfbc      	itt	lt
 80233e8:	2201      	movlt	r2, #1
 80233ea:	6032      	strlt	r2, [r6, #0]
 80233ec:	43bb      	bics	r3, r7
 80233ee:	d112      	bne.n	8023416 <_dtoa_r+0x9e>
 80233f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80233f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80233f6:	6013      	str	r3, [r2, #0]
 80233f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80233fc:	4323      	orrs	r3, r4
 80233fe:	f000 854d 	beq.w	8023e9c <_dtoa_r+0xb24>
 8023402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023404:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802365c <_dtoa_r+0x2e4>
 8023408:	2b00      	cmp	r3, #0
 802340a:	f000 854f 	beq.w	8023eac <_dtoa_r+0xb34>
 802340e:	f10a 0303 	add.w	r3, sl, #3
 8023412:	f000 bd49 	b.w	8023ea8 <_dtoa_r+0xb30>
 8023416:	ed9d 7b02 	vldr	d7, [sp, #8]
 802341a:	2200      	movs	r2, #0
 802341c:	ec51 0b17 	vmov	r0, r1, d7
 8023420:	2300      	movs	r3, #0
 8023422:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8023426:	f7fd fac7 	bl	80209b8 <__aeabi_dcmpeq>
 802342a:	4680      	mov	r8, r0
 802342c:	b158      	cbz	r0, 8023446 <_dtoa_r+0xce>
 802342e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023430:	2301      	movs	r3, #1
 8023432:	6013      	str	r3, [r2, #0]
 8023434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023436:	b113      	cbz	r3, 802343e <_dtoa_r+0xc6>
 8023438:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802343a:	4b84      	ldr	r3, [pc, #528]	@ (802364c <_dtoa_r+0x2d4>)
 802343c:	6013      	str	r3, [r2, #0]
 802343e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8023660 <_dtoa_r+0x2e8>
 8023442:	f000 bd33 	b.w	8023eac <_dtoa_r+0xb34>
 8023446:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802344a:	aa16      	add	r2, sp, #88	@ 0x58
 802344c:	a917      	add	r1, sp, #92	@ 0x5c
 802344e:	4658      	mov	r0, fp
 8023450:	f001 f9e2 	bl	8024818 <__d2b>
 8023454:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8023458:	4681      	mov	r9, r0
 802345a:	2e00      	cmp	r6, #0
 802345c:	d077      	beq.n	802354e <_dtoa_r+0x1d6>
 802345e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023460:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8023464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802346c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8023470:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8023474:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8023478:	4619      	mov	r1, r3
 802347a:	2200      	movs	r2, #0
 802347c:	4b74      	ldr	r3, [pc, #464]	@ (8023650 <_dtoa_r+0x2d8>)
 802347e:	f7fc fe7b 	bl	8020178 <__aeabi_dsub>
 8023482:	a369      	add	r3, pc, #420	@ (adr r3, 8023628 <_dtoa_r+0x2b0>)
 8023484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023488:	f7fd f82e 	bl	80204e8 <__aeabi_dmul>
 802348c:	a368      	add	r3, pc, #416	@ (adr r3, 8023630 <_dtoa_r+0x2b8>)
 802348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023492:	f7fc fe73 	bl	802017c <__adddf3>
 8023496:	4604      	mov	r4, r0
 8023498:	4630      	mov	r0, r6
 802349a:	460d      	mov	r5, r1
 802349c:	f7fc ffba 	bl	8020414 <__aeabi_i2d>
 80234a0:	a365      	add	r3, pc, #404	@ (adr r3, 8023638 <_dtoa_r+0x2c0>)
 80234a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234a6:	f7fd f81f 	bl	80204e8 <__aeabi_dmul>
 80234aa:	4602      	mov	r2, r0
 80234ac:	460b      	mov	r3, r1
 80234ae:	4620      	mov	r0, r4
 80234b0:	4629      	mov	r1, r5
 80234b2:	f7fc fe63 	bl	802017c <__adddf3>
 80234b6:	4604      	mov	r4, r0
 80234b8:	460d      	mov	r5, r1
 80234ba:	f7fd fac5 	bl	8020a48 <__aeabi_d2iz>
 80234be:	2200      	movs	r2, #0
 80234c0:	4607      	mov	r7, r0
 80234c2:	2300      	movs	r3, #0
 80234c4:	4620      	mov	r0, r4
 80234c6:	4629      	mov	r1, r5
 80234c8:	f7fd fa80 	bl	80209cc <__aeabi_dcmplt>
 80234cc:	b140      	cbz	r0, 80234e0 <_dtoa_r+0x168>
 80234ce:	4638      	mov	r0, r7
 80234d0:	f7fc ffa0 	bl	8020414 <__aeabi_i2d>
 80234d4:	4622      	mov	r2, r4
 80234d6:	462b      	mov	r3, r5
 80234d8:	f7fd fa6e 	bl	80209b8 <__aeabi_dcmpeq>
 80234dc:	b900      	cbnz	r0, 80234e0 <_dtoa_r+0x168>
 80234de:	3f01      	subs	r7, #1
 80234e0:	2f16      	cmp	r7, #22
 80234e2:	d851      	bhi.n	8023588 <_dtoa_r+0x210>
 80234e4:	4b5b      	ldr	r3, [pc, #364]	@ (8023654 <_dtoa_r+0x2dc>)
 80234e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80234ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80234f2:	f7fd fa6b 	bl	80209cc <__aeabi_dcmplt>
 80234f6:	2800      	cmp	r0, #0
 80234f8:	d048      	beq.n	802358c <_dtoa_r+0x214>
 80234fa:	3f01      	subs	r7, #1
 80234fc:	2300      	movs	r3, #0
 80234fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8023500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023502:	1b9b      	subs	r3, r3, r6
 8023504:	1e5a      	subs	r2, r3, #1
 8023506:	bf44      	itt	mi
 8023508:	f1c3 0801 	rsbmi	r8, r3, #1
 802350c:	2300      	movmi	r3, #0
 802350e:	9208      	str	r2, [sp, #32]
 8023510:	bf54      	ite	pl
 8023512:	f04f 0800 	movpl.w	r8, #0
 8023516:	9308      	strmi	r3, [sp, #32]
 8023518:	2f00      	cmp	r7, #0
 802351a:	db39      	blt.n	8023590 <_dtoa_r+0x218>
 802351c:	9b08      	ldr	r3, [sp, #32]
 802351e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8023520:	443b      	add	r3, r7
 8023522:	9308      	str	r3, [sp, #32]
 8023524:	2300      	movs	r3, #0
 8023526:	930a      	str	r3, [sp, #40]	@ 0x28
 8023528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802352a:	2b09      	cmp	r3, #9
 802352c:	d864      	bhi.n	80235f8 <_dtoa_r+0x280>
 802352e:	2b05      	cmp	r3, #5
 8023530:	bfc4      	itt	gt
 8023532:	3b04      	subgt	r3, #4
 8023534:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8023536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023538:	f1a3 0302 	sub.w	r3, r3, #2
 802353c:	bfcc      	ite	gt
 802353e:	2400      	movgt	r4, #0
 8023540:	2401      	movle	r4, #1
 8023542:	2b03      	cmp	r3, #3
 8023544:	d863      	bhi.n	802360e <_dtoa_r+0x296>
 8023546:	e8df f003 	tbb	[pc, r3]
 802354a:	372a      	.short	0x372a
 802354c:	5535      	.short	0x5535
 802354e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8023552:	441e      	add	r6, r3
 8023554:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8023558:	2b20      	cmp	r3, #32
 802355a:	bfc1      	itttt	gt
 802355c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8023560:	409f      	lslgt	r7, r3
 8023562:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8023566:	fa24 f303 	lsrgt.w	r3, r4, r3
 802356a:	bfd6      	itet	le
 802356c:	f1c3 0320 	rsble	r3, r3, #32
 8023570:	ea47 0003 	orrgt.w	r0, r7, r3
 8023574:	fa04 f003 	lslle.w	r0, r4, r3
 8023578:	f7fc ff3c 	bl	80203f4 <__aeabi_ui2d>
 802357c:	2201      	movs	r2, #1
 802357e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8023582:	3e01      	subs	r6, #1
 8023584:	9214      	str	r2, [sp, #80]	@ 0x50
 8023586:	e777      	b.n	8023478 <_dtoa_r+0x100>
 8023588:	2301      	movs	r3, #1
 802358a:	e7b8      	b.n	80234fe <_dtoa_r+0x186>
 802358c:	9012      	str	r0, [sp, #72]	@ 0x48
 802358e:	e7b7      	b.n	8023500 <_dtoa_r+0x188>
 8023590:	427b      	negs	r3, r7
 8023592:	930a      	str	r3, [sp, #40]	@ 0x28
 8023594:	2300      	movs	r3, #0
 8023596:	eba8 0807 	sub.w	r8, r8, r7
 802359a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802359c:	e7c4      	b.n	8023528 <_dtoa_r+0x1b0>
 802359e:	2300      	movs	r3, #0
 80235a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80235a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	dc35      	bgt.n	8023614 <_dtoa_r+0x29c>
 80235a8:	2301      	movs	r3, #1
 80235aa:	9300      	str	r3, [sp, #0]
 80235ac:	9307      	str	r3, [sp, #28]
 80235ae:	461a      	mov	r2, r3
 80235b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80235b2:	e00b      	b.n	80235cc <_dtoa_r+0x254>
 80235b4:	2301      	movs	r3, #1
 80235b6:	e7f3      	b.n	80235a0 <_dtoa_r+0x228>
 80235b8:	2300      	movs	r3, #0
 80235ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80235bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80235be:	18fb      	adds	r3, r7, r3
 80235c0:	9300      	str	r3, [sp, #0]
 80235c2:	3301      	adds	r3, #1
 80235c4:	2b01      	cmp	r3, #1
 80235c6:	9307      	str	r3, [sp, #28]
 80235c8:	bfb8      	it	lt
 80235ca:	2301      	movlt	r3, #1
 80235cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80235d0:	2100      	movs	r1, #0
 80235d2:	2204      	movs	r2, #4
 80235d4:	f102 0514 	add.w	r5, r2, #20
 80235d8:	429d      	cmp	r5, r3
 80235da:	d91f      	bls.n	802361c <_dtoa_r+0x2a4>
 80235dc:	6041      	str	r1, [r0, #4]
 80235de:	4658      	mov	r0, fp
 80235e0:	f000 fdf0 	bl	80241c4 <_Balloc>
 80235e4:	4682      	mov	sl, r0
 80235e6:	2800      	cmp	r0, #0
 80235e8:	d13c      	bne.n	8023664 <_dtoa_r+0x2ec>
 80235ea:	4b1b      	ldr	r3, [pc, #108]	@ (8023658 <_dtoa_r+0x2e0>)
 80235ec:	4602      	mov	r2, r0
 80235ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80235f2:	e6d8      	b.n	80233a6 <_dtoa_r+0x2e>
 80235f4:	2301      	movs	r3, #1
 80235f6:	e7e0      	b.n	80235ba <_dtoa_r+0x242>
 80235f8:	2401      	movs	r4, #1
 80235fa:	2300      	movs	r3, #0
 80235fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80235fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023604:	9300      	str	r3, [sp, #0]
 8023606:	9307      	str	r3, [sp, #28]
 8023608:	2200      	movs	r2, #0
 802360a:	2312      	movs	r3, #18
 802360c:	e7d0      	b.n	80235b0 <_dtoa_r+0x238>
 802360e:	2301      	movs	r3, #1
 8023610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023612:	e7f5      	b.n	8023600 <_dtoa_r+0x288>
 8023614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023616:	9300      	str	r3, [sp, #0]
 8023618:	9307      	str	r3, [sp, #28]
 802361a:	e7d7      	b.n	80235cc <_dtoa_r+0x254>
 802361c:	3101      	adds	r1, #1
 802361e:	0052      	lsls	r2, r2, #1
 8023620:	e7d8      	b.n	80235d4 <_dtoa_r+0x25c>
 8023622:	bf00      	nop
 8023624:	f3af 8000 	nop.w
 8023628:	636f4361 	.word	0x636f4361
 802362c:	3fd287a7 	.word	0x3fd287a7
 8023630:	8b60c8b3 	.word	0x8b60c8b3
 8023634:	3fc68a28 	.word	0x3fc68a28
 8023638:	509f79fb 	.word	0x509f79fb
 802363c:	3fd34413 	.word	0x3fd34413
 8023640:	080252e1 	.word	0x080252e1
 8023644:	080252f8 	.word	0x080252f8
 8023648:	7ff00000 	.word	0x7ff00000
 802364c:	080252b1 	.word	0x080252b1
 8023650:	3ff80000 	.word	0x3ff80000
 8023654:	080253f0 	.word	0x080253f0
 8023658:	08025350 	.word	0x08025350
 802365c:	080252dd 	.word	0x080252dd
 8023660:	080252b0 	.word	0x080252b0
 8023664:	f8db 301c 	ldr.w	r3, [fp, #28]
 8023668:	6018      	str	r0, [r3, #0]
 802366a:	9b07      	ldr	r3, [sp, #28]
 802366c:	2b0e      	cmp	r3, #14
 802366e:	f200 80a4 	bhi.w	80237ba <_dtoa_r+0x442>
 8023672:	2c00      	cmp	r4, #0
 8023674:	f000 80a1 	beq.w	80237ba <_dtoa_r+0x442>
 8023678:	2f00      	cmp	r7, #0
 802367a:	dd33      	ble.n	80236e4 <_dtoa_r+0x36c>
 802367c:	4bad      	ldr	r3, [pc, #692]	@ (8023934 <_dtoa_r+0x5bc>)
 802367e:	f007 020f 	and.w	r2, r7, #15
 8023682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023686:	ed93 7b00 	vldr	d7, [r3]
 802368a:	05f8      	lsls	r0, r7, #23
 802368c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8023690:	ea4f 1427 	mov.w	r4, r7, asr #4
 8023694:	d516      	bpl.n	80236c4 <_dtoa_r+0x34c>
 8023696:	4ba8      	ldr	r3, [pc, #672]	@ (8023938 <_dtoa_r+0x5c0>)
 8023698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802369c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80236a0:	f7fd f84c 	bl	802073c <__aeabi_ddiv>
 80236a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80236a8:	f004 040f 	and.w	r4, r4, #15
 80236ac:	2603      	movs	r6, #3
 80236ae:	4da2      	ldr	r5, [pc, #648]	@ (8023938 <_dtoa_r+0x5c0>)
 80236b0:	b954      	cbnz	r4, 80236c8 <_dtoa_r+0x350>
 80236b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80236b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80236ba:	f7fd f83f 	bl	802073c <__aeabi_ddiv>
 80236be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80236c2:	e028      	b.n	8023716 <_dtoa_r+0x39e>
 80236c4:	2602      	movs	r6, #2
 80236c6:	e7f2      	b.n	80236ae <_dtoa_r+0x336>
 80236c8:	07e1      	lsls	r1, r4, #31
 80236ca:	d508      	bpl.n	80236de <_dtoa_r+0x366>
 80236cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80236d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80236d4:	f7fc ff08 	bl	80204e8 <__aeabi_dmul>
 80236d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80236dc:	3601      	adds	r6, #1
 80236de:	1064      	asrs	r4, r4, #1
 80236e0:	3508      	adds	r5, #8
 80236e2:	e7e5      	b.n	80236b0 <_dtoa_r+0x338>
 80236e4:	f000 80d2 	beq.w	802388c <_dtoa_r+0x514>
 80236e8:	427c      	negs	r4, r7
 80236ea:	4b92      	ldr	r3, [pc, #584]	@ (8023934 <_dtoa_r+0x5bc>)
 80236ec:	4d92      	ldr	r5, [pc, #584]	@ (8023938 <_dtoa_r+0x5c0>)
 80236ee:	f004 020f 	and.w	r2, r4, #15
 80236f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80236f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80236fe:	f7fc fef3 	bl	80204e8 <__aeabi_dmul>
 8023702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023706:	1124      	asrs	r4, r4, #4
 8023708:	2300      	movs	r3, #0
 802370a:	2602      	movs	r6, #2
 802370c:	2c00      	cmp	r4, #0
 802370e:	f040 80b2 	bne.w	8023876 <_dtoa_r+0x4fe>
 8023712:	2b00      	cmp	r3, #0
 8023714:	d1d3      	bne.n	80236be <_dtoa_r+0x346>
 8023716:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023718:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802371c:	2b00      	cmp	r3, #0
 802371e:	f000 80b7 	beq.w	8023890 <_dtoa_r+0x518>
 8023722:	4b86      	ldr	r3, [pc, #536]	@ (802393c <_dtoa_r+0x5c4>)
 8023724:	2200      	movs	r2, #0
 8023726:	4620      	mov	r0, r4
 8023728:	4629      	mov	r1, r5
 802372a:	f7fd f94f 	bl	80209cc <__aeabi_dcmplt>
 802372e:	2800      	cmp	r0, #0
 8023730:	f000 80ae 	beq.w	8023890 <_dtoa_r+0x518>
 8023734:	9b07      	ldr	r3, [sp, #28]
 8023736:	2b00      	cmp	r3, #0
 8023738:	f000 80aa 	beq.w	8023890 <_dtoa_r+0x518>
 802373c:	9b00      	ldr	r3, [sp, #0]
 802373e:	2b00      	cmp	r3, #0
 8023740:	dd37      	ble.n	80237b2 <_dtoa_r+0x43a>
 8023742:	1e7b      	subs	r3, r7, #1
 8023744:	9304      	str	r3, [sp, #16]
 8023746:	4620      	mov	r0, r4
 8023748:	4b7d      	ldr	r3, [pc, #500]	@ (8023940 <_dtoa_r+0x5c8>)
 802374a:	2200      	movs	r2, #0
 802374c:	4629      	mov	r1, r5
 802374e:	f7fc fecb 	bl	80204e8 <__aeabi_dmul>
 8023752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023756:	9c00      	ldr	r4, [sp, #0]
 8023758:	3601      	adds	r6, #1
 802375a:	4630      	mov	r0, r6
 802375c:	f7fc fe5a 	bl	8020414 <__aeabi_i2d>
 8023760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023764:	f7fc fec0 	bl	80204e8 <__aeabi_dmul>
 8023768:	4b76      	ldr	r3, [pc, #472]	@ (8023944 <_dtoa_r+0x5cc>)
 802376a:	2200      	movs	r2, #0
 802376c:	f7fc fd06 	bl	802017c <__adddf3>
 8023770:	4605      	mov	r5, r0
 8023772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8023776:	2c00      	cmp	r4, #0
 8023778:	f040 808d 	bne.w	8023896 <_dtoa_r+0x51e>
 802377c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023780:	4b71      	ldr	r3, [pc, #452]	@ (8023948 <_dtoa_r+0x5d0>)
 8023782:	2200      	movs	r2, #0
 8023784:	f7fc fcf8 	bl	8020178 <__aeabi_dsub>
 8023788:	4602      	mov	r2, r0
 802378a:	460b      	mov	r3, r1
 802378c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023790:	462a      	mov	r2, r5
 8023792:	4633      	mov	r3, r6
 8023794:	f7fd f938 	bl	8020a08 <__aeabi_dcmpgt>
 8023798:	2800      	cmp	r0, #0
 802379a:	f040 828b 	bne.w	8023cb4 <_dtoa_r+0x93c>
 802379e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80237a2:	462a      	mov	r2, r5
 80237a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80237a8:	f7fd f910 	bl	80209cc <__aeabi_dcmplt>
 80237ac:	2800      	cmp	r0, #0
 80237ae:	f040 8128 	bne.w	8023a02 <_dtoa_r+0x68a>
 80237b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80237b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80237ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80237bc:	2b00      	cmp	r3, #0
 80237be:	f2c0 815a 	blt.w	8023a76 <_dtoa_r+0x6fe>
 80237c2:	2f0e      	cmp	r7, #14
 80237c4:	f300 8157 	bgt.w	8023a76 <_dtoa_r+0x6fe>
 80237c8:	4b5a      	ldr	r3, [pc, #360]	@ (8023934 <_dtoa_r+0x5bc>)
 80237ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80237ce:	ed93 7b00 	vldr	d7, [r3]
 80237d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	ed8d 7b00 	vstr	d7, [sp]
 80237da:	da03      	bge.n	80237e4 <_dtoa_r+0x46c>
 80237dc:	9b07      	ldr	r3, [sp, #28]
 80237de:	2b00      	cmp	r3, #0
 80237e0:	f340 8101 	ble.w	80239e6 <_dtoa_r+0x66e>
 80237e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80237e8:	4656      	mov	r6, sl
 80237ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80237ee:	4620      	mov	r0, r4
 80237f0:	4629      	mov	r1, r5
 80237f2:	f7fc ffa3 	bl	802073c <__aeabi_ddiv>
 80237f6:	f7fd f927 	bl	8020a48 <__aeabi_d2iz>
 80237fa:	4680      	mov	r8, r0
 80237fc:	f7fc fe0a 	bl	8020414 <__aeabi_i2d>
 8023800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023804:	f7fc fe70 	bl	80204e8 <__aeabi_dmul>
 8023808:	4602      	mov	r2, r0
 802380a:	460b      	mov	r3, r1
 802380c:	4620      	mov	r0, r4
 802380e:	4629      	mov	r1, r5
 8023810:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8023814:	f7fc fcb0 	bl	8020178 <__aeabi_dsub>
 8023818:	f806 4b01 	strb.w	r4, [r6], #1
 802381c:	9d07      	ldr	r5, [sp, #28]
 802381e:	eba6 040a 	sub.w	r4, r6, sl
 8023822:	42a5      	cmp	r5, r4
 8023824:	4602      	mov	r2, r0
 8023826:	460b      	mov	r3, r1
 8023828:	f040 8117 	bne.w	8023a5a <_dtoa_r+0x6e2>
 802382c:	f7fc fca6 	bl	802017c <__adddf3>
 8023830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023834:	4604      	mov	r4, r0
 8023836:	460d      	mov	r5, r1
 8023838:	f7fd f8e6 	bl	8020a08 <__aeabi_dcmpgt>
 802383c:	2800      	cmp	r0, #0
 802383e:	f040 80f9 	bne.w	8023a34 <_dtoa_r+0x6bc>
 8023842:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023846:	4620      	mov	r0, r4
 8023848:	4629      	mov	r1, r5
 802384a:	f7fd f8b5 	bl	80209b8 <__aeabi_dcmpeq>
 802384e:	b118      	cbz	r0, 8023858 <_dtoa_r+0x4e0>
 8023850:	f018 0f01 	tst.w	r8, #1
 8023854:	f040 80ee 	bne.w	8023a34 <_dtoa_r+0x6bc>
 8023858:	4649      	mov	r1, r9
 802385a:	4658      	mov	r0, fp
 802385c:	f000 fcf2 	bl	8024244 <_Bfree>
 8023860:	2300      	movs	r3, #0
 8023862:	7033      	strb	r3, [r6, #0]
 8023864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023866:	3701      	adds	r7, #1
 8023868:	601f      	str	r7, [r3, #0]
 802386a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802386c:	2b00      	cmp	r3, #0
 802386e:	f000 831d 	beq.w	8023eac <_dtoa_r+0xb34>
 8023872:	601e      	str	r6, [r3, #0]
 8023874:	e31a      	b.n	8023eac <_dtoa_r+0xb34>
 8023876:	07e2      	lsls	r2, r4, #31
 8023878:	d505      	bpl.n	8023886 <_dtoa_r+0x50e>
 802387a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802387e:	f7fc fe33 	bl	80204e8 <__aeabi_dmul>
 8023882:	3601      	adds	r6, #1
 8023884:	2301      	movs	r3, #1
 8023886:	1064      	asrs	r4, r4, #1
 8023888:	3508      	adds	r5, #8
 802388a:	e73f      	b.n	802370c <_dtoa_r+0x394>
 802388c:	2602      	movs	r6, #2
 802388e:	e742      	b.n	8023716 <_dtoa_r+0x39e>
 8023890:	9c07      	ldr	r4, [sp, #28]
 8023892:	9704      	str	r7, [sp, #16]
 8023894:	e761      	b.n	802375a <_dtoa_r+0x3e2>
 8023896:	4b27      	ldr	r3, [pc, #156]	@ (8023934 <_dtoa_r+0x5bc>)
 8023898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802389a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802389e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80238a2:	4454      	add	r4, sl
 80238a4:	2900      	cmp	r1, #0
 80238a6:	d053      	beq.n	8023950 <_dtoa_r+0x5d8>
 80238a8:	4928      	ldr	r1, [pc, #160]	@ (802394c <_dtoa_r+0x5d4>)
 80238aa:	2000      	movs	r0, #0
 80238ac:	f7fc ff46 	bl	802073c <__aeabi_ddiv>
 80238b0:	4633      	mov	r3, r6
 80238b2:	462a      	mov	r2, r5
 80238b4:	f7fc fc60 	bl	8020178 <__aeabi_dsub>
 80238b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80238bc:	4656      	mov	r6, sl
 80238be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80238c2:	f7fd f8c1 	bl	8020a48 <__aeabi_d2iz>
 80238c6:	4605      	mov	r5, r0
 80238c8:	f7fc fda4 	bl	8020414 <__aeabi_i2d>
 80238cc:	4602      	mov	r2, r0
 80238ce:	460b      	mov	r3, r1
 80238d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80238d4:	f7fc fc50 	bl	8020178 <__aeabi_dsub>
 80238d8:	3530      	adds	r5, #48	@ 0x30
 80238da:	4602      	mov	r2, r0
 80238dc:	460b      	mov	r3, r1
 80238de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80238e2:	f806 5b01 	strb.w	r5, [r6], #1
 80238e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80238ea:	f7fd f86f 	bl	80209cc <__aeabi_dcmplt>
 80238ee:	2800      	cmp	r0, #0
 80238f0:	d171      	bne.n	80239d6 <_dtoa_r+0x65e>
 80238f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80238f6:	4911      	ldr	r1, [pc, #68]	@ (802393c <_dtoa_r+0x5c4>)
 80238f8:	2000      	movs	r0, #0
 80238fa:	f7fc fc3d 	bl	8020178 <__aeabi_dsub>
 80238fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8023902:	f7fd f863 	bl	80209cc <__aeabi_dcmplt>
 8023906:	2800      	cmp	r0, #0
 8023908:	f040 8095 	bne.w	8023a36 <_dtoa_r+0x6be>
 802390c:	42a6      	cmp	r6, r4
 802390e:	f43f af50 	beq.w	80237b2 <_dtoa_r+0x43a>
 8023912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8023916:	4b0a      	ldr	r3, [pc, #40]	@ (8023940 <_dtoa_r+0x5c8>)
 8023918:	2200      	movs	r2, #0
 802391a:	f7fc fde5 	bl	80204e8 <__aeabi_dmul>
 802391e:	4b08      	ldr	r3, [pc, #32]	@ (8023940 <_dtoa_r+0x5c8>)
 8023920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8023924:	2200      	movs	r2, #0
 8023926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802392a:	f7fc fddd 	bl	80204e8 <__aeabi_dmul>
 802392e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023932:	e7c4      	b.n	80238be <_dtoa_r+0x546>
 8023934:	080253f0 	.word	0x080253f0
 8023938:	080253c8 	.word	0x080253c8
 802393c:	3ff00000 	.word	0x3ff00000
 8023940:	40240000 	.word	0x40240000
 8023944:	401c0000 	.word	0x401c0000
 8023948:	40140000 	.word	0x40140000
 802394c:	3fe00000 	.word	0x3fe00000
 8023950:	4631      	mov	r1, r6
 8023952:	4628      	mov	r0, r5
 8023954:	f7fc fdc8 	bl	80204e8 <__aeabi_dmul>
 8023958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802395c:	9415      	str	r4, [sp, #84]	@ 0x54
 802395e:	4656      	mov	r6, sl
 8023960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023964:	f7fd f870 	bl	8020a48 <__aeabi_d2iz>
 8023968:	4605      	mov	r5, r0
 802396a:	f7fc fd53 	bl	8020414 <__aeabi_i2d>
 802396e:	4602      	mov	r2, r0
 8023970:	460b      	mov	r3, r1
 8023972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023976:	f7fc fbff 	bl	8020178 <__aeabi_dsub>
 802397a:	3530      	adds	r5, #48	@ 0x30
 802397c:	f806 5b01 	strb.w	r5, [r6], #1
 8023980:	4602      	mov	r2, r0
 8023982:	460b      	mov	r3, r1
 8023984:	42a6      	cmp	r6, r4
 8023986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802398a:	f04f 0200 	mov.w	r2, #0
 802398e:	d124      	bne.n	80239da <_dtoa_r+0x662>
 8023990:	4bac      	ldr	r3, [pc, #688]	@ (8023c44 <_dtoa_r+0x8cc>)
 8023992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8023996:	f7fc fbf1 	bl	802017c <__adddf3>
 802399a:	4602      	mov	r2, r0
 802399c:	460b      	mov	r3, r1
 802399e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80239a2:	f7fd f831 	bl	8020a08 <__aeabi_dcmpgt>
 80239a6:	2800      	cmp	r0, #0
 80239a8:	d145      	bne.n	8023a36 <_dtoa_r+0x6be>
 80239aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80239ae:	49a5      	ldr	r1, [pc, #660]	@ (8023c44 <_dtoa_r+0x8cc>)
 80239b0:	2000      	movs	r0, #0
 80239b2:	f7fc fbe1 	bl	8020178 <__aeabi_dsub>
 80239b6:	4602      	mov	r2, r0
 80239b8:	460b      	mov	r3, r1
 80239ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80239be:	f7fd f805 	bl	80209cc <__aeabi_dcmplt>
 80239c2:	2800      	cmp	r0, #0
 80239c4:	f43f aef5 	beq.w	80237b2 <_dtoa_r+0x43a>
 80239c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80239ca:	1e73      	subs	r3, r6, #1
 80239cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80239ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80239d2:	2b30      	cmp	r3, #48	@ 0x30
 80239d4:	d0f8      	beq.n	80239c8 <_dtoa_r+0x650>
 80239d6:	9f04      	ldr	r7, [sp, #16]
 80239d8:	e73e      	b.n	8023858 <_dtoa_r+0x4e0>
 80239da:	4b9b      	ldr	r3, [pc, #620]	@ (8023c48 <_dtoa_r+0x8d0>)
 80239dc:	f7fc fd84 	bl	80204e8 <__aeabi_dmul>
 80239e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80239e4:	e7bc      	b.n	8023960 <_dtoa_r+0x5e8>
 80239e6:	d10c      	bne.n	8023a02 <_dtoa_r+0x68a>
 80239e8:	4b98      	ldr	r3, [pc, #608]	@ (8023c4c <_dtoa_r+0x8d4>)
 80239ea:	2200      	movs	r2, #0
 80239ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80239f0:	f7fc fd7a 	bl	80204e8 <__aeabi_dmul>
 80239f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80239f8:	f7fc fffc 	bl	80209f4 <__aeabi_dcmpge>
 80239fc:	2800      	cmp	r0, #0
 80239fe:	f000 8157 	beq.w	8023cb0 <_dtoa_r+0x938>
 8023a02:	2400      	movs	r4, #0
 8023a04:	4625      	mov	r5, r4
 8023a06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a08:	43db      	mvns	r3, r3
 8023a0a:	9304      	str	r3, [sp, #16]
 8023a0c:	4656      	mov	r6, sl
 8023a0e:	2700      	movs	r7, #0
 8023a10:	4621      	mov	r1, r4
 8023a12:	4658      	mov	r0, fp
 8023a14:	f000 fc16 	bl	8024244 <_Bfree>
 8023a18:	2d00      	cmp	r5, #0
 8023a1a:	d0dc      	beq.n	80239d6 <_dtoa_r+0x65e>
 8023a1c:	b12f      	cbz	r7, 8023a2a <_dtoa_r+0x6b2>
 8023a1e:	42af      	cmp	r7, r5
 8023a20:	d003      	beq.n	8023a2a <_dtoa_r+0x6b2>
 8023a22:	4639      	mov	r1, r7
 8023a24:	4658      	mov	r0, fp
 8023a26:	f000 fc0d 	bl	8024244 <_Bfree>
 8023a2a:	4629      	mov	r1, r5
 8023a2c:	4658      	mov	r0, fp
 8023a2e:	f000 fc09 	bl	8024244 <_Bfree>
 8023a32:	e7d0      	b.n	80239d6 <_dtoa_r+0x65e>
 8023a34:	9704      	str	r7, [sp, #16]
 8023a36:	4633      	mov	r3, r6
 8023a38:	461e      	mov	r6, r3
 8023a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023a3e:	2a39      	cmp	r2, #57	@ 0x39
 8023a40:	d107      	bne.n	8023a52 <_dtoa_r+0x6da>
 8023a42:	459a      	cmp	sl, r3
 8023a44:	d1f8      	bne.n	8023a38 <_dtoa_r+0x6c0>
 8023a46:	9a04      	ldr	r2, [sp, #16]
 8023a48:	3201      	adds	r2, #1
 8023a4a:	9204      	str	r2, [sp, #16]
 8023a4c:	2230      	movs	r2, #48	@ 0x30
 8023a4e:	f88a 2000 	strb.w	r2, [sl]
 8023a52:	781a      	ldrb	r2, [r3, #0]
 8023a54:	3201      	adds	r2, #1
 8023a56:	701a      	strb	r2, [r3, #0]
 8023a58:	e7bd      	b.n	80239d6 <_dtoa_r+0x65e>
 8023a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8023c48 <_dtoa_r+0x8d0>)
 8023a5c:	2200      	movs	r2, #0
 8023a5e:	f7fc fd43 	bl	80204e8 <__aeabi_dmul>
 8023a62:	2200      	movs	r2, #0
 8023a64:	2300      	movs	r3, #0
 8023a66:	4604      	mov	r4, r0
 8023a68:	460d      	mov	r5, r1
 8023a6a:	f7fc ffa5 	bl	80209b8 <__aeabi_dcmpeq>
 8023a6e:	2800      	cmp	r0, #0
 8023a70:	f43f aebb 	beq.w	80237ea <_dtoa_r+0x472>
 8023a74:	e6f0      	b.n	8023858 <_dtoa_r+0x4e0>
 8023a76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023a78:	2a00      	cmp	r2, #0
 8023a7a:	f000 80db 	beq.w	8023c34 <_dtoa_r+0x8bc>
 8023a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023a80:	2a01      	cmp	r2, #1
 8023a82:	f300 80bf 	bgt.w	8023c04 <_dtoa_r+0x88c>
 8023a86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023a88:	2a00      	cmp	r2, #0
 8023a8a:	f000 80b7 	beq.w	8023bfc <_dtoa_r+0x884>
 8023a8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8023a92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023a94:	4646      	mov	r6, r8
 8023a96:	9a08      	ldr	r2, [sp, #32]
 8023a98:	2101      	movs	r1, #1
 8023a9a:	441a      	add	r2, r3
 8023a9c:	4658      	mov	r0, fp
 8023a9e:	4498      	add	r8, r3
 8023aa0:	9208      	str	r2, [sp, #32]
 8023aa2:	f000 fc83 	bl	80243ac <__i2b>
 8023aa6:	4605      	mov	r5, r0
 8023aa8:	b15e      	cbz	r6, 8023ac2 <_dtoa_r+0x74a>
 8023aaa:	9b08      	ldr	r3, [sp, #32]
 8023aac:	2b00      	cmp	r3, #0
 8023aae:	dd08      	ble.n	8023ac2 <_dtoa_r+0x74a>
 8023ab0:	42b3      	cmp	r3, r6
 8023ab2:	9a08      	ldr	r2, [sp, #32]
 8023ab4:	bfa8      	it	ge
 8023ab6:	4633      	movge	r3, r6
 8023ab8:	eba8 0803 	sub.w	r8, r8, r3
 8023abc:	1af6      	subs	r6, r6, r3
 8023abe:	1ad3      	subs	r3, r2, r3
 8023ac0:	9308      	str	r3, [sp, #32]
 8023ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ac4:	b1f3      	cbz	r3, 8023b04 <_dtoa_r+0x78c>
 8023ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ac8:	2b00      	cmp	r3, #0
 8023aca:	f000 80b7 	beq.w	8023c3c <_dtoa_r+0x8c4>
 8023ace:	b18c      	cbz	r4, 8023af4 <_dtoa_r+0x77c>
 8023ad0:	4629      	mov	r1, r5
 8023ad2:	4622      	mov	r2, r4
 8023ad4:	4658      	mov	r0, fp
 8023ad6:	f000 fd29 	bl	802452c <__pow5mult>
 8023ada:	464a      	mov	r2, r9
 8023adc:	4601      	mov	r1, r0
 8023ade:	4605      	mov	r5, r0
 8023ae0:	4658      	mov	r0, fp
 8023ae2:	f000 fc79 	bl	80243d8 <__multiply>
 8023ae6:	4649      	mov	r1, r9
 8023ae8:	9004      	str	r0, [sp, #16]
 8023aea:	4658      	mov	r0, fp
 8023aec:	f000 fbaa 	bl	8024244 <_Bfree>
 8023af0:	9b04      	ldr	r3, [sp, #16]
 8023af2:	4699      	mov	r9, r3
 8023af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023af6:	1b1a      	subs	r2, r3, r4
 8023af8:	d004      	beq.n	8023b04 <_dtoa_r+0x78c>
 8023afa:	4649      	mov	r1, r9
 8023afc:	4658      	mov	r0, fp
 8023afe:	f000 fd15 	bl	802452c <__pow5mult>
 8023b02:	4681      	mov	r9, r0
 8023b04:	2101      	movs	r1, #1
 8023b06:	4658      	mov	r0, fp
 8023b08:	f000 fc50 	bl	80243ac <__i2b>
 8023b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b0e:	4604      	mov	r4, r0
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	f000 81cf 	beq.w	8023eb4 <_dtoa_r+0xb3c>
 8023b16:	461a      	mov	r2, r3
 8023b18:	4601      	mov	r1, r0
 8023b1a:	4658      	mov	r0, fp
 8023b1c:	f000 fd06 	bl	802452c <__pow5mult>
 8023b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b22:	2b01      	cmp	r3, #1
 8023b24:	4604      	mov	r4, r0
 8023b26:	f300 8095 	bgt.w	8023c54 <_dtoa_r+0x8dc>
 8023b2a:	9b02      	ldr	r3, [sp, #8]
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	f040 8087 	bne.w	8023c40 <_dtoa_r+0x8c8>
 8023b32:	9b03      	ldr	r3, [sp, #12]
 8023b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	f040 8089 	bne.w	8023c50 <_dtoa_r+0x8d8>
 8023b3e:	9b03      	ldr	r3, [sp, #12]
 8023b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023b44:	0d1b      	lsrs	r3, r3, #20
 8023b46:	051b      	lsls	r3, r3, #20
 8023b48:	b12b      	cbz	r3, 8023b56 <_dtoa_r+0x7de>
 8023b4a:	9b08      	ldr	r3, [sp, #32]
 8023b4c:	3301      	adds	r3, #1
 8023b4e:	9308      	str	r3, [sp, #32]
 8023b50:	f108 0801 	add.w	r8, r8, #1
 8023b54:	2301      	movs	r3, #1
 8023b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8023b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	f000 81b0 	beq.w	8023ec0 <_dtoa_r+0xb48>
 8023b60:	6923      	ldr	r3, [r4, #16]
 8023b62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023b66:	6918      	ldr	r0, [r3, #16]
 8023b68:	f000 fbd4 	bl	8024314 <__hi0bits>
 8023b6c:	f1c0 0020 	rsb	r0, r0, #32
 8023b70:	9b08      	ldr	r3, [sp, #32]
 8023b72:	4418      	add	r0, r3
 8023b74:	f010 001f 	ands.w	r0, r0, #31
 8023b78:	d077      	beq.n	8023c6a <_dtoa_r+0x8f2>
 8023b7a:	f1c0 0320 	rsb	r3, r0, #32
 8023b7e:	2b04      	cmp	r3, #4
 8023b80:	dd6b      	ble.n	8023c5a <_dtoa_r+0x8e2>
 8023b82:	9b08      	ldr	r3, [sp, #32]
 8023b84:	f1c0 001c 	rsb	r0, r0, #28
 8023b88:	4403      	add	r3, r0
 8023b8a:	4480      	add	r8, r0
 8023b8c:	4406      	add	r6, r0
 8023b8e:	9308      	str	r3, [sp, #32]
 8023b90:	f1b8 0f00 	cmp.w	r8, #0
 8023b94:	dd05      	ble.n	8023ba2 <_dtoa_r+0x82a>
 8023b96:	4649      	mov	r1, r9
 8023b98:	4642      	mov	r2, r8
 8023b9a:	4658      	mov	r0, fp
 8023b9c:	f000 fd20 	bl	80245e0 <__lshift>
 8023ba0:	4681      	mov	r9, r0
 8023ba2:	9b08      	ldr	r3, [sp, #32]
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	dd05      	ble.n	8023bb4 <_dtoa_r+0x83c>
 8023ba8:	4621      	mov	r1, r4
 8023baa:	461a      	mov	r2, r3
 8023bac:	4658      	mov	r0, fp
 8023bae:	f000 fd17 	bl	80245e0 <__lshift>
 8023bb2:	4604      	mov	r4, r0
 8023bb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023bb6:	2b00      	cmp	r3, #0
 8023bb8:	d059      	beq.n	8023c6e <_dtoa_r+0x8f6>
 8023bba:	4621      	mov	r1, r4
 8023bbc:	4648      	mov	r0, r9
 8023bbe:	f000 fd7b 	bl	80246b8 <__mcmp>
 8023bc2:	2800      	cmp	r0, #0
 8023bc4:	da53      	bge.n	8023c6e <_dtoa_r+0x8f6>
 8023bc6:	1e7b      	subs	r3, r7, #1
 8023bc8:	9304      	str	r3, [sp, #16]
 8023bca:	4649      	mov	r1, r9
 8023bcc:	2300      	movs	r3, #0
 8023bce:	220a      	movs	r2, #10
 8023bd0:	4658      	mov	r0, fp
 8023bd2:	f000 fb59 	bl	8024288 <__multadd>
 8023bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023bd8:	4681      	mov	r9, r0
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	f000 8172 	beq.w	8023ec4 <_dtoa_r+0xb4c>
 8023be0:	2300      	movs	r3, #0
 8023be2:	4629      	mov	r1, r5
 8023be4:	220a      	movs	r2, #10
 8023be6:	4658      	mov	r0, fp
 8023be8:	f000 fb4e 	bl	8024288 <__multadd>
 8023bec:	9b00      	ldr	r3, [sp, #0]
 8023bee:	2b00      	cmp	r3, #0
 8023bf0:	4605      	mov	r5, r0
 8023bf2:	dc67      	bgt.n	8023cc4 <_dtoa_r+0x94c>
 8023bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023bf6:	2b02      	cmp	r3, #2
 8023bf8:	dc41      	bgt.n	8023c7e <_dtoa_r+0x906>
 8023bfa:	e063      	b.n	8023cc4 <_dtoa_r+0x94c>
 8023bfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023bfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8023c02:	e746      	b.n	8023a92 <_dtoa_r+0x71a>
 8023c04:	9b07      	ldr	r3, [sp, #28]
 8023c06:	1e5c      	subs	r4, r3, #1
 8023c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023c0a:	42a3      	cmp	r3, r4
 8023c0c:	bfbf      	itttt	lt
 8023c0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8023c10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8023c12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8023c14:	1ae3      	sublt	r3, r4, r3
 8023c16:	bfb4      	ite	lt
 8023c18:	18d2      	addlt	r2, r2, r3
 8023c1a:	1b1c      	subge	r4, r3, r4
 8023c1c:	9b07      	ldr	r3, [sp, #28]
 8023c1e:	bfbc      	itt	lt
 8023c20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8023c22:	2400      	movlt	r4, #0
 8023c24:	2b00      	cmp	r3, #0
 8023c26:	bfb5      	itete	lt
 8023c28:	eba8 0603 	sublt.w	r6, r8, r3
 8023c2c:	9b07      	ldrge	r3, [sp, #28]
 8023c2e:	2300      	movlt	r3, #0
 8023c30:	4646      	movge	r6, r8
 8023c32:	e730      	b.n	8023a96 <_dtoa_r+0x71e>
 8023c34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023c36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023c38:	4646      	mov	r6, r8
 8023c3a:	e735      	b.n	8023aa8 <_dtoa_r+0x730>
 8023c3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023c3e:	e75c      	b.n	8023afa <_dtoa_r+0x782>
 8023c40:	2300      	movs	r3, #0
 8023c42:	e788      	b.n	8023b56 <_dtoa_r+0x7de>
 8023c44:	3fe00000 	.word	0x3fe00000
 8023c48:	40240000 	.word	0x40240000
 8023c4c:	40140000 	.word	0x40140000
 8023c50:	9b02      	ldr	r3, [sp, #8]
 8023c52:	e780      	b.n	8023b56 <_dtoa_r+0x7de>
 8023c54:	2300      	movs	r3, #0
 8023c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8023c58:	e782      	b.n	8023b60 <_dtoa_r+0x7e8>
 8023c5a:	d099      	beq.n	8023b90 <_dtoa_r+0x818>
 8023c5c:	9a08      	ldr	r2, [sp, #32]
 8023c5e:	331c      	adds	r3, #28
 8023c60:	441a      	add	r2, r3
 8023c62:	4498      	add	r8, r3
 8023c64:	441e      	add	r6, r3
 8023c66:	9208      	str	r2, [sp, #32]
 8023c68:	e792      	b.n	8023b90 <_dtoa_r+0x818>
 8023c6a:	4603      	mov	r3, r0
 8023c6c:	e7f6      	b.n	8023c5c <_dtoa_r+0x8e4>
 8023c6e:	9b07      	ldr	r3, [sp, #28]
 8023c70:	9704      	str	r7, [sp, #16]
 8023c72:	2b00      	cmp	r3, #0
 8023c74:	dc20      	bgt.n	8023cb8 <_dtoa_r+0x940>
 8023c76:	9300      	str	r3, [sp, #0]
 8023c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c7a:	2b02      	cmp	r3, #2
 8023c7c:	dd1e      	ble.n	8023cbc <_dtoa_r+0x944>
 8023c7e:	9b00      	ldr	r3, [sp, #0]
 8023c80:	2b00      	cmp	r3, #0
 8023c82:	f47f aec0 	bne.w	8023a06 <_dtoa_r+0x68e>
 8023c86:	4621      	mov	r1, r4
 8023c88:	2205      	movs	r2, #5
 8023c8a:	4658      	mov	r0, fp
 8023c8c:	f000 fafc 	bl	8024288 <__multadd>
 8023c90:	4601      	mov	r1, r0
 8023c92:	4604      	mov	r4, r0
 8023c94:	4648      	mov	r0, r9
 8023c96:	f000 fd0f 	bl	80246b8 <__mcmp>
 8023c9a:	2800      	cmp	r0, #0
 8023c9c:	f77f aeb3 	ble.w	8023a06 <_dtoa_r+0x68e>
 8023ca0:	4656      	mov	r6, sl
 8023ca2:	2331      	movs	r3, #49	@ 0x31
 8023ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8023ca8:	9b04      	ldr	r3, [sp, #16]
 8023caa:	3301      	adds	r3, #1
 8023cac:	9304      	str	r3, [sp, #16]
 8023cae:	e6ae      	b.n	8023a0e <_dtoa_r+0x696>
 8023cb0:	9c07      	ldr	r4, [sp, #28]
 8023cb2:	9704      	str	r7, [sp, #16]
 8023cb4:	4625      	mov	r5, r4
 8023cb6:	e7f3      	b.n	8023ca0 <_dtoa_r+0x928>
 8023cb8:	9b07      	ldr	r3, [sp, #28]
 8023cba:	9300      	str	r3, [sp, #0]
 8023cbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023cbe:	2b00      	cmp	r3, #0
 8023cc0:	f000 8104 	beq.w	8023ecc <_dtoa_r+0xb54>
 8023cc4:	2e00      	cmp	r6, #0
 8023cc6:	dd05      	ble.n	8023cd4 <_dtoa_r+0x95c>
 8023cc8:	4629      	mov	r1, r5
 8023cca:	4632      	mov	r2, r6
 8023ccc:	4658      	mov	r0, fp
 8023cce:	f000 fc87 	bl	80245e0 <__lshift>
 8023cd2:	4605      	mov	r5, r0
 8023cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023cd6:	2b00      	cmp	r3, #0
 8023cd8:	d05a      	beq.n	8023d90 <_dtoa_r+0xa18>
 8023cda:	6869      	ldr	r1, [r5, #4]
 8023cdc:	4658      	mov	r0, fp
 8023cde:	f000 fa71 	bl	80241c4 <_Balloc>
 8023ce2:	4606      	mov	r6, r0
 8023ce4:	b928      	cbnz	r0, 8023cf2 <_dtoa_r+0x97a>
 8023ce6:	4b84      	ldr	r3, [pc, #528]	@ (8023ef8 <_dtoa_r+0xb80>)
 8023ce8:	4602      	mov	r2, r0
 8023cea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8023cee:	f7ff bb5a 	b.w	80233a6 <_dtoa_r+0x2e>
 8023cf2:	692a      	ldr	r2, [r5, #16]
 8023cf4:	3202      	adds	r2, #2
 8023cf6:	0092      	lsls	r2, r2, #2
 8023cf8:	f105 010c 	add.w	r1, r5, #12
 8023cfc:	300c      	adds	r0, #12
 8023cfe:	f7ff faa4 	bl	802324a <memcpy>
 8023d02:	2201      	movs	r2, #1
 8023d04:	4631      	mov	r1, r6
 8023d06:	4658      	mov	r0, fp
 8023d08:	f000 fc6a 	bl	80245e0 <__lshift>
 8023d0c:	f10a 0301 	add.w	r3, sl, #1
 8023d10:	9307      	str	r3, [sp, #28]
 8023d12:	9b00      	ldr	r3, [sp, #0]
 8023d14:	4453      	add	r3, sl
 8023d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023d18:	9b02      	ldr	r3, [sp, #8]
 8023d1a:	f003 0301 	and.w	r3, r3, #1
 8023d1e:	462f      	mov	r7, r5
 8023d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8023d22:	4605      	mov	r5, r0
 8023d24:	9b07      	ldr	r3, [sp, #28]
 8023d26:	4621      	mov	r1, r4
 8023d28:	3b01      	subs	r3, #1
 8023d2a:	4648      	mov	r0, r9
 8023d2c:	9300      	str	r3, [sp, #0]
 8023d2e:	f7ff fa9a 	bl	8023266 <quorem>
 8023d32:	4639      	mov	r1, r7
 8023d34:	9002      	str	r0, [sp, #8]
 8023d36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8023d3a:	4648      	mov	r0, r9
 8023d3c:	f000 fcbc 	bl	80246b8 <__mcmp>
 8023d40:	462a      	mov	r2, r5
 8023d42:	9008      	str	r0, [sp, #32]
 8023d44:	4621      	mov	r1, r4
 8023d46:	4658      	mov	r0, fp
 8023d48:	f000 fcd2 	bl	80246f0 <__mdiff>
 8023d4c:	68c2      	ldr	r2, [r0, #12]
 8023d4e:	4606      	mov	r6, r0
 8023d50:	bb02      	cbnz	r2, 8023d94 <_dtoa_r+0xa1c>
 8023d52:	4601      	mov	r1, r0
 8023d54:	4648      	mov	r0, r9
 8023d56:	f000 fcaf 	bl	80246b8 <__mcmp>
 8023d5a:	4602      	mov	r2, r0
 8023d5c:	4631      	mov	r1, r6
 8023d5e:	4658      	mov	r0, fp
 8023d60:	920e      	str	r2, [sp, #56]	@ 0x38
 8023d62:	f000 fa6f 	bl	8024244 <_Bfree>
 8023d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023d6a:	9e07      	ldr	r6, [sp, #28]
 8023d6c:	ea43 0102 	orr.w	r1, r3, r2
 8023d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023d72:	4319      	orrs	r1, r3
 8023d74:	d110      	bne.n	8023d98 <_dtoa_r+0xa20>
 8023d76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8023d7a:	d029      	beq.n	8023dd0 <_dtoa_r+0xa58>
 8023d7c:	9b08      	ldr	r3, [sp, #32]
 8023d7e:	2b00      	cmp	r3, #0
 8023d80:	dd02      	ble.n	8023d88 <_dtoa_r+0xa10>
 8023d82:	9b02      	ldr	r3, [sp, #8]
 8023d84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8023d88:	9b00      	ldr	r3, [sp, #0]
 8023d8a:	f883 8000 	strb.w	r8, [r3]
 8023d8e:	e63f      	b.n	8023a10 <_dtoa_r+0x698>
 8023d90:	4628      	mov	r0, r5
 8023d92:	e7bb      	b.n	8023d0c <_dtoa_r+0x994>
 8023d94:	2201      	movs	r2, #1
 8023d96:	e7e1      	b.n	8023d5c <_dtoa_r+0x9e4>
 8023d98:	9b08      	ldr	r3, [sp, #32]
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	db04      	blt.n	8023da8 <_dtoa_r+0xa30>
 8023d9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023da0:	430b      	orrs	r3, r1
 8023da2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023da4:	430b      	orrs	r3, r1
 8023da6:	d120      	bne.n	8023dea <_dtoa_r+0xa72>
 8023da8:	2a00      	cmp	r2, #0
 8023daa:	dded      	ble.n	8023d88 <_dtoa_r+0xa10>
 8023dac:	4649      	mov	r1, r9
 8023dae:	2201      	movs	r2, #1
 8023db0:	4658      	mov	r0, fp
 8023db2:	f000 fc15 	bl	80245e0 <__lshift>
 8023db6:	4621      	mov	r1, r4
 8023db8:	4681      	mov	r9, r0
 8023dba:	f000 fc7d 	bl	80246b8 <__mcmp>
 8023dbe:	2800      	cmp	r0, #0
 8023dc0:	dc03      	bgt.n	8023dca <_dtoa_r+0xa52>
 8023dc2:	d1e1      	bne.n	8023d88 <_dtoa_r+0xa10>
 8023dc4:	f018 0f01 	tst.w	r8, #1
 8023dc8:	d0de      	beq.n	8023d88 <_dtoa_r+0xa10>
 8023dca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8023dce:	d1d8      	bne.n	8023d82 <_dtoa_r+0xa0a>
 8023dd0:	9a00      	ldr	r2, [sp, #0]
 8023dd2:	2339      	movs	r3, #57	@ 0x39
 8023dd4:	7013      	strb	r3, [r2, #0]
 8023dd6:	4633      	mov	r3, r6
 8023dd8:	461e      	mov	r6, r3
 8023dda:	3b01      	subs	r3, #1
 8023ddc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8023de0:	2a39      	cmp	r2, #57	@ 0x39
 8023de2:	d052      	beq.n	8023e8a <_dtoa_r+0xb12>
 8023de4:	3201      	adds	r2, #1
 8023de6:	701a      	strb	r2, [r3, #0]
 8023de8:	e612      	b.n	8023a10 <_dtoa_r+0x698>
 8023dea:	2a00      	cmp	r2, #0
 8023dec:	dd07      	ble.n	8023dfe <_dtoa_r+0xa86>
 8023dee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8023df2:	d0ed      	beq.n	8023dd0 <_dtoa_r+0xa58>
 8023df4:	9a00      	ldr	r2, [sp, #0]
 8023df6:	f108 0301 	add.w	r3, r8, #1
 8023dfa:	7013      	strb	r3, [r2, #0]
 8023dfc:	e608      	b.n	8023a10 <_dtoa_r+0x698>
 8023dfe:	9b07      	ldr	r3, [sp, #28]
 8023e00:	9a07      	ldr	r2, [sp, #28]
 8023e02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8023e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e08:	4293      	cmp	r3, r2
 8023e0a:	d028      	beq.n	8023e5e <_dtoa_r+0xae6>
 8023e0c:	4649      	mov	r1, r9
 8023e0e:	2300      	movs	r3, #0
 8023e10:	220a      	movs	r2, #10
 8023e12:	4658      	mov	r0, fp
 8023e14:	f000 fa38 	bl	8024288 <__multadd>
 8023e18:	42af      	cmp	r7, r5
 8023e1a:	4681      	mov	r9, r0
 8023e1c:	f04f 0300 	mov.w	r3, #0
 8023e20:	f04f 020a 	mov.w	r2, #10
 8023e24:	4639      	mov	r1, r7
 8023e26:	4658      	mov	r0, fp
 8023e28:	d107      	bne.n	8023e3a <_dtoa_r+0xac2>
 8023e2a:	f000 fa2d 	bl	8024288 <__multadd>
 8023e2e:	4607      	mov	r7, r0
 8023e30:	4605      	mov	r5, r0
 8023e32:	9b07      	ldr	r3, [sp, #28]
 8023e34:	3301      	adds	r3, #1
 8023e36:	9307      	str	r3, [sp, #28]
 8023e38:	e774      	b.n	8023d24 <_dtoa_r+0x9ac>
 8023e3a:	f000 fa25 	bl	8024288 <__multadd>
 8023e3e:	4629      	mov	r1, r5
 8023e40:	4607      	mov	r7, r0
 8023e42:	2300      	movs	r3, #0
 8023e44:	220a      	movs	r2, #10
 8023e46:	4658      	mov	r0, fp
 8023e48:	f000 fa1e 	bl	8024288 <__multadd>
 8023e4c:	4605      	mov	r5, r0
 8023e4e:	e7f0      	b.n	8023e32 <_dtoa_r+0xaba>
 8023e50:	9b00      	ldr	r3, [sp, #0]
 8023e52:	2b00      	cmp	r3, #0
 8023e54:	bfcc      	ite	gt
 8023e56:	461e      	movgt	r6, r3
 8023e58:	2601      	movle	r6, #1
 8023e5a:	4456      	add	r6, sl
 8023e5c:	2700      	movs	r7, #0
 8023e5e:	4649      	mov	r1, r9
 8023e60:	2201      	movs	r2, #1
 8023e62:	4658      	mov	r0, fp
 8023e64:	f000 fbbc 	bl	80245e0 <__lshift>
 8023e68:	4621      	mov	r1, r4
 8023e6a:	4681      	mov	r9, r0
 8023e6c:	f000 fc24 	bl	80246b8 <__mcmp>
 8023e70:	2800      	cmp	r0, #0
 8023e72:	dcb0      	bgt.n	8023dd6 <_dtoa_r+0xa5e>
 8023e74:	d102      	bne.n	8023e7c <_dtoa_r+0xb04>
 8023e76:	f018 0f01 	tst.w	r8, #1
 8023e7a:	d1ac      	bne.n	8023dd6 <_dtoa_r+0xa5e>
 8023e7c:	4633      	mov	r3, r6
 8023e7e:	461e      	mov	r6, r3
 8023e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023e84:	2a30      	cmp	r2, #48	@ 0x30
 8023e86:	d0fa      	beq.n	8023e7e <_dtoa_r+0xb06>
 8023e88:	e5c2      	b.n	8023a10 <_dtoa_r+0x698>
 8023e8a:	459a      	cmp	sl, r3
 8023e8c:	d1a4      	bne.n	8023dd8 <_dtoa_r+0xa60>
 8023e8e:	9b04      	ldr	r3, [sp, #16]
 8023e90:	3301      	adds	r3, #1
 8023e92:	9304      	str	r3, [sp, #16]
 8023e94:	2331      	movs	r3, #49	@ 0x31
 8023e96:	f88a 3000 	strb.w	r3, [sl]
 8023e9a:	e5b9      	b.n	8023a10 <_dtoa_r+0x698>
 8023e9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023e9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8023efc <_dtoa_r+0xb84>
 8023ea2:	b11b      	cbz	r3, 8023eac <_dtoa_r+0xb34>
 8023ea4:	f10a 0308 	add.w	r3, sl, #8
 8023ea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8023eaa:	6013      	str	r3, [r2, #0]
 8023eac:	4650      	mov	r0, sl
 8023eae:	b019      	add	sp, #100	@ 0x64
 8023eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023eb6:	2b01      	cmp	r3, #1
 8023eb8:	f77f ae37 	ble.w	8023b2a <_dtoa_r+0x7b2>
 8023ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ec0:	2001      	movs	r0, #1
 8023ec2:	e655      	b.n	8023b70 <_dtoa_r+0x7f8>
 8023ec4:	9b00      	ldr	r3, [sp, #0]
 8023ec6:	2b00      	cmp	r3, #0
 8023ec8:	f77f aed6 	ble.w	8023c78 <_dtoa_r+0x900>
 8023ecc:	4656      	mov	r6, sl
 8023ece:	4621      	mov	r1, r4
 8023ed0:	4648      	mov	r0, r9
 8023ed2:	f7ff f9c8 	bl	8023266 <quorem>
 8023ed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8023eda:	f806 8b01 	strb.w	r8, [r6], #1
 8023ede:	9b00      	ldr	r3, [sp, #0]
 8023ee0:	eba6 020a 	sub.w	r2, r6, sl
 8023ee4:	4293      	cmp	r3, r2
 8023ee6:	ddb3      	ble.n	8023e50 <_dtoa_r+0xad8>
 8023ee8:	4649      	mov	r1, r9
 8023eea:	2300      	movs	r3, #0
 8023eec:	220a      	movs	r2, #10
 8023eee:	4658      	mov	r0, fp
 8023ef0:	f000 f9ca 	bl	8024288 <__multadd>
 8023ef4:	4681      	mov	r9, r0
 8023ef6:	e7ea      	b.n	8023ece <_dtoa_r+0xb56>
 8023ef8:	08025350 	.word	0x08025350
 8023efc:	080252d4 	.word	0x080252d4

08023f00 <malloc>:
 8023f00:	4b02      	ldr	r3, [pc, #8]	@ (8023f0c <malloc+0xc>)
 8023f02:	4601      	mov	r1, r0
 8023f04:	6818      	ldr	r0, [r3, #0]
 8023f06:	f000 b825 	b.w	8023f54 <_malloc_r>
 8023f0a:	bf00      	nop
 8023f0c:	20000018 	.word	0x20000018

08023f10 <sbrk_aligned>:
 8023f10:	b570      	push	{r4, r5, r6, lr}
 8023f12:	4e0f      	ldr	r6, [pc, #60]	@ (8023f50 <sbrk_aligned+0x40>)
 8023f14:	460c      	mov	r4, r1
 8023f16:	6831      	ldr	r1, [r6, #0]
 8023f18:	4605      	mov	r5, r0
 8023f1a:	b911      	cbnz	r1, 8023f22 <sbrk_aligned+0x12>
 8023f1c:	f000 fd4c 	bl	80249b8 <_sbrk_r>
 8023f20:	6030      	str	r0, [r6, #0]
 8023f22:	4621      	mov	r1, r4
 8023f24:	4628      	mov	r0, r5
 8023f26:	f000 fd47 	bl	80249b8 <_sbrk_r>
 8023f2a:	1c43      	adds	r3, r0, #1
 8023f2c:	d103      	bne.n	8023f36 <sbrk_aligned+0x26>
 8023f2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8023f32:	4620      	mov	r0, r4
 8023f34:	bd70      	pop	{r4, r5, r6, pc}
 8023f36:	1cc4      	adds	r4, r0, #3
 8023f38:	f024 0403 	bic.w	r4, r4, #3
 8023f3c:	42a0      	cmp	r0, r4
 8023f3e:	d0f8      	beq.n	8023f32 <sbrk_aligned+0x22>
 8023f40:	1a21      	subs	r1, r4, r0
 8023f42:	4628      	mov	r0, r5
 8023f44:	f000 fd38 	bl	80249b8 <_sbrk_r>
 8023f48:	3001      	adds	r0, #1
 8023f4a:	d1f2      	bne.n	8023f32 <sbrk_aligned+0x22>
 8023f4c:	e7ef      	b.n	8023f2e <sbrk_aligned+0x1e>
 8023f4e:	bf00      	nop
 8023f50:	20000338 	.word	0x20000338

08023f54 <_malloc_r>:
 8023f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023f58:	1ccd      	adds	r5, r1, #3
 8023f5a:	f025 0503 	bic.w	r5, r5, #3
 8023f5e:	3508      	adds	r5, #8
 8023f60:	2d0c      	cmp	r5, #12
 8023f62:	bf38      	it	cc
 8023f64:	250c      	movcc	r5, #12
 8023f66:	2d00      	cmp	r5, #0
 8023f68:	4606      	mov	r6, r0
 8023f6a:	db01      	blt.n	8023f70 <_malloc_r+0x1c>
 8023f6c:	42a9      	cmp	r1, r5
 8023f6e:	d904      	bls.n	8023f7a <_malloc_r+0x26>
 8023f70:	230c      	movs	r3, #12
 8023f72:	6033      	str	r3, [r6, #0]
 8023f74:	2000      	movs	r0, #0
 8023f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8024050 <_malloc_r+0xfc>
 8023f7e:	f000 f915 	bl	80241ac <__malloc_lock>
 8023f82:	f8d8 3000 	ldr.w	r3, [r8]
 8023f86:	461c      	mov	r4, r3
 8023f88:	bb44      	cbnz	r4, 8023fdc <_malloc_r+0x88>
 8023f8a:	4629      	mov	r1, r5
 8023f8c:	4630      	mov	r0, r6
 8023f8e:	f7ff ffbf 	bl	8023f10 <sbrk_aligned>
 8023f92:	1c43      	adds	r3, r0, #1
 8023f94:	4604      	mov	r4, r0
 8023f96:	d158      	bne.n	802404a <_malloc_r+0xf6>
 8023f98:	f8d8 4000 	ldr.w	r4, [r8]
 8023f9c:	4627      	mov	r7, r4
 8023f9e:	2f00      	cmp	r7, #0
 8023fa0:	d143      	bne.n	802402a <_malloc_r+0xd6>
 8023fa2:	2c00      	cmp	r4, #0
 8023fa4:	d04b      	beq.n	802403e <_malloc_r+0xea>
 8023fa6:	6823      	ldr	r3, [r4, #0]
 8023fa8:	4639      	mov	r1, r7
 8023faa:	4630      	mov	r0, r6
 8023fac:	eb04 0903 	add.w	r9, r4, r3
 8023fb0:	f000 fd02 	bl	80249b8 <_sbrk_r>
 8023fb4:	4581      	cmp	r9, r0
 8023fb6:	d142      	bne.n	802403e <_malloc_r+0xea>
 8023fb8:	6821      	ldr	r1, [r4, #0]
 8023fba:	1a6d      	subs	r5, r5, r1
 8023fbc:	4629      	mov	r1, r5
 8023fbe:	4630      	mov	r0, r6
 8023fc0:	f7ff ffa6 	bl	8023f10 <sbrk_aligned>
 8023fc4:	3001      	adds	r0, #1
 8023fc6:	d03a      	beq.n	802403e <_malloc_r+0xea>
 8023fc8:	6823      	ldr	r3, [r4, #0]
 8023fca:	442b      	add	r3, r5
 8023fcc:	6023      	str	r3, [r4, #0]
 8023fce:	f8d8 3000 	ldr.w	r3, [r8]
 8023fd2:	685a      	ldr	r2, [r3, #4]
 8023fd4:	bb62      	cbnz	r2, 8024030 <_malloc_r+0xdc>
 8023fd6:	f8c8 7000 	str.w	r7, [r8]
 8023fda:	e00f      	b.n	8023ffc <_malloc_r+0xa8>
 8023fdc:	6822      	ldr	r2, [r4, #0]
 8023fde:	1b52      	subs	r2, r2, r5
 8023fe0:	d420      	bmi.n	8024024 <_malloc_r+0xd0>
 8023fe2:	2a0b      	cmp	r2, #11
 8023fe4:	d917      	bls.n	8024016 <_malloc_r+0xc2>
 8023fe6:	1961      	adds	r1, r4, r5
 8023fe8:	42a3      	cmp	r3, r4
 8023fea:	6025      	str	r5, [r4, #0]
 8023fec:	bf18      	it	ne
 8023fee:	6059      	strne	r1, [r3, #4]
 8023ff0:	6863      	ldr	r3, [r4, #4]
 8023ff2:	bf08      	it	eq
 8023ff4:	f8c8 1000 	streq.w	r1, [r8]
 8023ff8:	5162      	str	r2, [r4, r5]
 8023ffa:	604b      	str	r3, [r1, #4]
 8023ffc:	4630      	mov	r0, r6
 8023ffe:	f000 f8db 	bl	80241b8 <__malloc_unlock>
 8024002:	f104 000b 	add.w	r0, r4, #11
 8024006:	1d23      	adds	r3, r4, #4
 8024008:	f020 0007 	bic.w	r0, r0, #7
 802400c:	1ac2      	subs	r2, r0, r3
 802400e:	bf1c      	itt	ne
 8024010:	1a1b      	subne	r3, r3, r0
 8024012:	50a3      	strne	r3, [r4, r2]
 8024014:	e7af      	b.n	8023f76 <_malloc_r+0x22>
 8024016:	6862      	ldr	r2, [r4, #4]
 8024018:	42a3      	cmp	r3, r4
 802401a:	bf0c      	ite	eq
 802401c:	f8c8 2000 	streq.w	r2, [r8]
 8024020:	605a      	strne	r2, [r3, #4]
 8024022:	e7eb      	b.n	8023ffc <_malloc_r+0xa8>
 8024024:	4623      	mov	r3, r4
 8024026:	6864      	ldr	r4, [r4, #4]
 8024028:	e7ae      	b.n	8023f88 <_malloc_r+0x34>
 802402a:	463c      	mov	r4, r7
 802402c:	687f      	ldr	r7, [r7, #4]
 802402e:	e7b6      	b.n	8023f9e <_malloc_r+0x4a>
 8024030:	461a      	mov	r2, r3
 8024032:	685b      	ldr	r3, [r3, #4]
 8024034:	42a3      	cmp	r3, r4
 8024036:	d1fb      	bne.n	8024030 <_malloc_r+0xdc>
 8024038:	2300      	movs	r3, #0
 802403a:	6053      	str	r3, [r2, #4]
 802403c:	e7de      	b.n	8023ffc <_malloc_r+0xa8>
 802403e:	230c      	movs	r3, #12
 8024040:	6033      	str	r3, [r6, #0]
 8024042:	4630      	mov	r0, r6
 8024044:	f000 f8b8 	bl	80241b8 <__malloc_unlock>
 8024048:	e794      	b.n	8023f74 <_malloc_r+0x20>
 802404a:	6005      	str	r5, [r0, #0]
 802404c:	e7d6      	b.n	8023ffc <_malloc_r+0xa8>
 802404e:	bf00      	nop
 8024050:	2000033c 	.word	0x2000033c

08024054 <__sflush_r>:
 8024054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8024058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802405c:	0716      	lsls	r6, r2, #28
 802405e:	4605      	mov	r5, r0
 8024060:	460c      	mov	r4, r1
 8024062:	d454      	bmi.n	802410e <__sflush_r+0xba>
 8024064:	684b      	ldr	r3, [r1, #4]
 8024066:	2b00      	cmp	r3, #0
 8024068:	dc02      	bgt.n	8024070 <__sflush_r+0x1c>
 802406a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802406c:	2b00      	cmp	r3, #0
 802406e:	dd48      	ble.n	8024102 <__sflush_r+0xae>
 8024070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024072:	2e00      	cmp	r6, #0
 8024074:	d045      	beq.n	8024102 <__sflush_r+0xae>
 8024076:	2300      	movs	r3, #0
 8024078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802407c:	682f      	ldr	r7, [r5, #0]
 802407e:	6a21      	ldr	r1, [r4, #32]
 8024080:	602b      	str	r3, [r5, #0]
 8024082:	d030      	beq.n	80240e6 <__sflush_r+0x92>
 8024084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024086:	89a3      	ldrh	r3, [r4, #12]
 8024088:	0759      	lsls	r1, r3, #29
 802408a:	d505      	bpl.n	8024098 <__sflush_r+0x44>
 802408c:	6863      	ldr	r3, [r4, #4]
 802408e:	1ad2      	subs	r2, r2, r3
 8024090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024092:	b10b      	cbz	r3, 8024098 <__sflush_r+0x44>
 8024094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024096:	1ad2      	subs	r2, r2, r3
 8024098:	2300      	movs	r3, #0
 802409a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802409c:	6a21      	ldr	r1, [r4, #32]
 802409e:	4628      	mov	r0, r5
 80240a0:	47b0      	blx	r6
 80240a2:	1c43      	adds	r3, r0, #1
 80240a4:	89a3      	ldrh	r3, [r4, #12]
 80240a6:	d106      	bne.n	80240b6 <__sflush_r+0x62>
 80240a8:	6829      	ldr	r1, [r5, #0]
 80240aa:	291d      	cmp	r1, #29
 80240ac:	d82b      	bhi.n	8024106 <__sflush_r+0xb2>
 80240ae:	4a2a      	ldr	r2, [pc, #168]	@ (8024158 <__sflush_r+0x104>)
 80240b0:	410a      	asrs	r2, r1
 80240b2:	07d6      	lsls	r6, r2, #31
 80240b4:	d427      	bmi.n	8024106 <__sflush_r+0xb2>
 80240b6:	2200      	movs	r2, #0
 80240b8:	6062      	str	r2, [r4, #4]
 80240ba:	04d9      	lsls	r1, r3, #19
 80240bc:	6922      	ldr	r2, [r4, #16]
 80240be:	6022      	str	r2, [r4, #0]
 80240c0:	d504      	bpl.n	80240cc <__sflush_r+0x78>
 80240c2:	1c42      	adds	r2, r0, #1
 80240c4:	d101      	bne.n	80240ca <__sflush_r+0x76>
 80240c6:	682b      	ldr	r3, [r5, #0]
 80240c8:	b903      	cbnz	r3, 80240cc <__sflush_r+0x78>
 80240ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80240cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80240ce:	602f      	str	r7, [r5, #0]
 80240d0:	b1b9      	cbz	r1, 8024102 <__sflush_r+0xae>
 80240d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80240d6:	4299      	cmp	r1, r3
 80240d8:	d002      	beq.n	80240e0 <__sflush_r+0x8c>
 80240da:	4628      	mov	r0, r5
 80240dc:	f000 fcc0 	bl	8024a60 <_free_r>
 80240e0:	2300      	movs	r3, #0
 80240e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80240e4:	e00d      	b.n	8024102 <__sflush_r+0xae>
 80240e6:	2301      	movs	r3, #1
 80240e8:	4628      	mov	r0, r5
 80240ea:	47b0      	blx	r6
 80240ec:	4602      	mov	r2, r0
 80240ee:	1c50      	adds	r0, r2, #1
 80240f0:	d1c9      	bne.n	8024086 <__sflush_r+0x32>
 80240f2:	682b      	ldr	r3, [r5, #0]
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d0c6      	beq.n	8024086 <__sflush_r+0x32>
 80240f8:	2b1d      	cmp	r3, #29
 80240fa:	d001      	beq.n	8024100 <__sflush_r+0xac>
 80240fc:	2b16      	cmp	r3, #22
 80240fe:	d11e      	bne.n	802413e <__sflush_r+0xea>
 8024100:	602f      	str	r7, [r5, #0]
 8024102:	2000      	movs	r0, #0
 8024104:	e022      	b.n	802414c <__sflush_r+0xf8>
 8024106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802410a:	b21b      	sxth	r3, r3
 802410c:	e01b      	b.n	8024146 <__sflush_r+0xf2>
 802410e:	690f      	ldr	r7, [r1, #16]
 8024110:	2f00      	cmp	r7, #0
 8024112:	d0f6      	beq.n	8024102 <__sflush_r+0xae>
 8024114:	0793      	lsls	r3, r2, #30
 8024116:	680e      	ldr	r6, [r1, #0]
 8024118:	bf08      	it	eq
 802411a:	694b      	ldreq	r3, [r1, #20]
 802411c:	600f      	str	r7, [r1, #0]
 802411e:	bf18      	it	ne
 8024120:	2300      	movne	r3, #0
 8024122:	eba6 0807 	sub.w	r8, r6, r7
 8024126:	608b      	str	r3, [r1, #8]
 8024128:	f1b8 0f00 	cmp.w	r8, #0
 802412c:	dde9      	ble.n	8024102 <__sflush_r+0xae>
 802412e:	6a21      	ldr	r1, [r4, #32]
 8024130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8024132:	4643      	mov	r3, r8
 8024134:	463a      	mov	r2, r7
 8024136:	4628      	mov	r0, r5
 8024138:	47b0      	blx	r6
 802413a:	2800      	cmp	r0, #0
 802413c:	dc08      	bgt.n	8024150 <__sflush_r+0xfc>
 802413e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024146:	81a3      	strh	r3, [r4, #12]
 8024148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024150:	4407      	add	r7, r0
 8024152:	eba8 0800 	sub.w	r8, r8, r0
 8024156:	e7e7      	b.n	8024128 <__sflush_r+0xd4>
 8024158:	dfbffffe 	.word	0xdfbffffe

0802415c <_fflush_r>:
 802415c:	b538      	push	{r3, r4, r5, lr}
 802415e:	690b      	ldr	r3, [r1, #16]
 8024160:	4605      	mov	r5, r0
 8024162:	460c      	mov	r4, r1
 8024164:	b913      	cbnz	r3, 802416c <_fflush_r+0x10>
 8024166:	2500      	movs	r5, #0
 8024168:	4628      	mov	r0, r5
 802416a:	bd38      	pop	{r3, r4, r5, pc}
 802416c:	b118      	cbz	r0, 8024176 <_fflush_r+0x1a>
 802416e:	6a03      	ldr	r3, [r0, #32]
 8024170:	b90b      	cbnz	r3, 8024176 <_fflush_r+0x1a>
 8024172:	f7fe fffb 	bl	802316c <__sinit>
 8024176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802417a:	2b00      	cmp	r3, #0
 802417c:	d0f3      	beq.n	8024166 <_fflush_r+0xa>
 802417e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024180:	07d0      	lsls	r0, r2, #31
 8024182:	d404      	bmi.n	802418e <_fflush_r+0x32>
 8024184:	0599      	lsls	r1, r3, #22
 8024186:	d402      	bmi.n	802418e <_fflush_r+0x32>
 8024188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802418a:	f7ff f85c 	bl	8023246 <__retarget_lock_acquire_recursive>
 802418e:	4628      	mov	r0, r5
 8024190:	4621      	mov	r1, r4
 8024192:	f7ff ff5f 	bl	8024054 <__sflush_r>
 8024196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024198:	07da      	lsls	r2, r3, #31
 802419a:	4605      	mov	r5, r0
 802419c:	d4e4      	bmi.n	8024168 <_fflush_r+0xc>
 802419e:	89a3      	ldrh	r3, [r4, #12]
 80241a0:	059b      	lsls	r3, r3, #22
 80241a2:	d4e1      	bmi.n	8024168 <_fflush_r+0xc>
 80241a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80241a6:	f7ff f84f 	bl	8023248 <__retarget_lock_release_recursive>
 80241aa:	e7dd      	b.n	8024168 <_fflush_r+0xc>

080241ac <__malloc_lock>:
 80241ac:	4801      	ldr	r0, [pc, #4]	@ (80241b4 <__malloc_lock+0x8>)
 80241ae:	f7ff b84a 	b.w	8023246 <__retarget_lock_acquire_recursive>
 80241b2:	bf00      	nop
 80241b4:	20000334 	.word	0x20000334

080241b8 <__malloc_unlock>:
 80241b8:	4801      	ldr	r0, [pc, #4]	@ (80241c0 <__malloc_unlock+0x8>)
 80241ba:	f7ff b845 	b.w	8023248 <__retarget_lock_release_recursive>
 80241be:	bf00      	nop
 80241c0:	20000334 	.word	0x20000334

080241c4 <_Balloc>:
 80241c4:	b570      	push	{r4, r5, r6, lr}
 80241c6:	69c6      	ldr	r6, [r0, #28]
 80241c8:	4604      	mov	r4, r0
 80241ca:	460d      	mov	r5, r1
 80241cc:	b976      	cbnz	r6, 80241ec <_Balloc+0x28>
 80241ce:	2010      	movs	r0, #16
 80241d0:	f7ff fe96 	bl	8023f00 <malloc>
 80241d4:	4602      	mov	r2, r0
 80241d6:	61e0      	str	r0, [r4, #28]
 80241d8:	b920      	cbnz	r0, 80241e4 <_Balloc+0x20>
 80241da:	4b18      	ldr	r3, [pc, #96]	@ (802423c <_Balloc+0x78>)
 80241dc:	4818      	ldr	r0, [pc, #96]	@ (8024240 <_Balloc+0x7c>)
 80241de:	216b      	movs	r1, #107	@ 0x6b
 80241e0:	f000 fc0c 	bl	80249fc <__assert_func>
 80241e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80241e8:	6006      	str	r6, [r0, #0]
 80241ea:	60c6      	str	r6, [r0, #12]
 80241ec:	69e6      	ldr	r6, [r4, #28]
 80241ee:	68f3      	ldr	r3, [r6, #12]
 80241f0:	b183      	cbz	r3, 8024214 <_Balloc+0x50>
 80241f2:	69e3      	ldr	r3, [r4, #28]
 80241f4:	68db      	ldr	r3, [r3, #12]
 80241f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80241fa:	b9b8      	cbnz	r0, 802422c <_Balloc+0x68>
 80241fc:	2101      	movs	r1, #1
 80241fe:	fa01 f605 	lsl.w	r6, r1, r5
 8024202:	1d72      	adds	r2, r6, #5
 8024204:	0092      	lsls	r2, r2, #2
 8024206:	4620      	mov	r0, r4
 8024208:	f000 fc16 	bl	8024a38 <_calloc_r>
 802420c:	b160      	cbz	r0, 8024228 <_Balloc+0x64>
 802420e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024212:	e00e      	b.n	8024232 <_Balloc+0x6e>
 8024214:	2221      	movs	r2, #33	@ 0x21
 8024216:	2104      	movs	r1, #4
 8024218:	4620      	mov	r0, r4
 802421a:	f000 fc0d 	bl	8024a38 <_calloc_r>
 802421e:	69e3      	ldr	r3, [r4, #28]
 8024220:	60f0      	str	r0, [r6, #12]
 8024222:	68db      	ldr	r3, [r3, #12]
 8024224:	2b00      	cmp	r3, #0
 8024226:	d1e4      	bne.n	80241f2 <_Balloc+0x2e>
 8024228:	2000      	movs	r0, #0
 802422a:	bd70      	pop	{r4, r5, r6, pc}
 802422c:	6802      	ldr	r2, [r0, #0]
 802422e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024232:	2300      	movs	r3, #0
 8024234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024238:	e7f7      	b.n	802422a <_Balloc+0x66>
 802423a:	bf00      	nop
 802423c:	080252e1 	.word	0x080252e1
 8024240:	08025361 	.word	0x08025361

08024244 <_Bfree>:
 8024244:	b570      	push	{r4, r5, r6, lr}
 8024246:	69c6      	ldr	r6, [r0, #28]
 8024248:	4605      	mov	r5, r0
 802424a:	460c      	mov	r4, r1
 802424c:	b976      	cbnz	r6, 802426c <_Bfree+0x28>
 802424e:	2010      	movs	r0, #16
 8024250:	f7ff fe56 	bl	8023f00 <malloc>
 8024254:	4602      	mov	r2, r0
 8024256:	61e8      	str	r0, [r5, #28]
 8024258:	b920      	cbnz	r0, 8024264 <_Bfree+0x20>
 802425a:	4b09      	ldr	r3, [pc, #36]	@ (8024280 <_Bfree+0x3c>)
 802425c:	4809      	ldr	r0, [pc, #36]	@ (8024284 <_Bfree+0x40>)
 802425e:	218f      	movs	r1, #143	@ 0x8f
 8024260:	f000 fbcc 	bl	80249fc <__assert_func>
 8024264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024268:	6006      	str	r6, [r0, #0]
 802426a:	60c6      	str	r6, [r0, #12]
 802426c:	b13c      	cbz	r4, 802427e <_Bfree+0x3a>
 802426e:	69eb      	ldr	r3, [r5, #28]
 8024270:	6862      	ldr	r2, [r4, #4]
 8024272:	68db      	ldr	r3, [r3, #12]
 8024274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024278:	6021      	str	r1, [r4, #0]
 802427a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802427e:	bd70      	pop	{r4, r5, r6, pc}
 8024280:	080252e1 	.word	0x080252e1
 8024284:	08025361 	.word	0x08025361

08024288 <__multadd>:
 8024288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802428c:	690d      	ldr	r5, [r1, #16]
 802428e:	4607      	mov	r7, r0
 8024290:	460c      	mov	r4, r1
 8024292:	461e      	mov	r6, r3
 8024294:	f101 0c14 	add.w	ip, r1, #20
 8024298:	2000      	movs	r0, #0
 802429a:	f8dc 3000 	ldr.w	r3, [ip]
 802429e:	b299      	uxth	r1, r3
 80242a0:	fb02 6101 	mla	r1, r2, r1, r6
 80242a4:	0c1e      	lsrs	r6, r3, #16
 80242a6:	0c0b      	lsrs	r3, r1, #16
 80242a8:	fb02 3306 	mla	r3, r2, r6, r3
 80242ac:	b289      	uxth	r1, r1
 80242ae:	3001      	adds	r0, #1
 80242b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80242b4:	4285      	cmp	r5, r0
 80242b6:	f84c 1b04 	str.w	r1, [ip], #4
 80242ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80242be:	dcec      	bgt.n	802429a <__multadd+0x12>
 80242c0:	b30e      	cbz	r6, 8024306 <__multadd+0x7e>
 80242c2:	68a3      	ldr	r3, [r4, #8]
 80242c4:	42ab      	cmp	r3, r5
 80242c6:	dc19      	bgt.n	80242fc <__multadd+0x74>
 80242c8:	6861      	ldr	r1, [r4, #4]
 80242ca:	4638      	mov	r0, r7
 80242cc:	3101      	adds	r1, #1
 80242ce:	f7ff ff79 	bl	80241c4 <_Balloc>
 80242d2:	4680      	mov	r8, r0
 80242d4:	b928      	cbnz	r0, 80242e2 <__multadd+0x5a>
 80242d6:	4602      	mov	r2, r0
 80242d8:	4b0c      	ldr	r3, [pc, #48]	@ (802430c <__multadd+0x84>)
 80242da:	480d      	ldr	r0, [pc, #52]	@ (8024310 <__multadd+0x88>)
 80242dc:	21ba      	movs	r1, #186	@ 0xba
 80242de:	f000 fb8d 	bl	80249fc <__assert_func>
 80242e2:	6922      	ldr	r2, [r4, #16]
 80242e4:	3202      	adds	r2, #2
 80242e6:	f104 010c 	add.w	r1, r4, #12
 80242ea:	0092      	lsls	r2, r2, #2
 80242ec:	300c      	adds	r0, #12
 80242ee:	f7fe ffac 	bl	802324a <memcpy>
 80242f2:	4621      	mov	r1, r4
 80242f4:	4638      	mov	r0, r7
 80242f6:	f7ff ffa5 	bl	8024244 <_Bfree>
 80242fa:	4644      	mov	r4, r8
 80242fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024300:	3501      	adds	r5, #1
 8024302:	615e      	str	r6, [r3, #20]
 8024304:	6125      	str	r5, [r4, #16]
 8024306:	4620      	mov	r0, r4
 8024308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802430c:	08025350 	.word	0x08025350
 8024310:	08025361 	.word	0x08025361

08024314 <__hi0bits>:
 8024314:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8024318:	4603      	mov	r3, r0
 802431a:	bf36      	itet	cc
 802431c:	0403      	lslcc	r3, r0, #16
 802431e:	2000      	movcs	r0, #0
 8024320:	2010      	movcc	r0, #16
 8024322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8024326:	bf3c      	itt	cc
 8024328:	021b      	lslcc	r3, r3, #8
 802432a:	3008      	addcc	r0, #8
 802432c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8024330:	bf3c      	itt	cc
 8024332:	011b      	lslcc	r3, r3, #4
 8024334:	3004      	addcc	r0, #4
 8024336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802433a:	bf3c      	itt	cc
 802433c:	009b      	lslcc	r3, r3, #2
 802433e:	3002      	addcc	r0, #2
 8024340:	2b00      	cmp	r3, #0
 8024342:	db05      	blt.n	8024350 <__hi0bits+0x3c>
 8024344:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8024348:	f100 0001 	add.w	r0, r0, #1
 802434c:	bf08      	it	eq
 802434e:	2020      	moveq	r0, #32
 8024350:	4770      	bx	lr

08024352 <__lo0bits>:
 8024352:	6803      	ldr	r3, [r0, #0]
 8024354:	4602      	mov	r2, r0
 8024356:	f013 0007 	ands.w	r0, r3, #7
 802435a:	d00b      	beq.n	8024374 <__lo0bits+0x22>
 802435c:	07d9      	lsls	r1, r3, #31
 802435e:	d421      	bmi.n	80243a4 <__lo0bits+0x52>
 8024360:	0798      	lsls	r0, r3, #30
 8024362:	bf49      	itett	mi
 8024364:	085b      	lsrmi	r3, r3, #1
 8024366:	089b      	lsrpl	r3, r3, #2
 8024368:	2001      	movmi	r0, #1
 802436a:	6013      	strmi	r3, [r2, #0]
 802436c:	bf5c      	itt	pl
 802436e:	6013      	strpl	r3, [r2, #0]
 8024370:	2002      	movpl	r0, #2
 8024372:	4770      	bx	lr
 8024374:	b299      	uxth	r1, r3
 8024376:	b909      	cbnz	r1, 802437c <__lo0bits+0x2a>
 8024378:	0c1b      	lsrs	r3, r3, #16
 802437a:	2010      	movs	r0, #16
 802437c:	b2d9      	uxtb	r1, r3
 802437e:	b909      	cbnz	r1, 8024384 <__lo0bits+0x32>
 8024380:	3008      	adds	r0, #8
 8024382:	0a1b      	lsrs	r3, r3, #8
 8024384:	0719      	lsls	r1, r3, #28
 8024386:	bf04      	itt	eq
 8024388:	091b      	lsreq	r3, r3, #4
 802438a:	3004      	addeq	r0, #4
 802438c:	0799      	lsls	r1, r3, #30
 802438e:	bf04      	itt	eq
 8024390:	089b      	lsreq	r3, r3, #2
 8024392:	3002      	addeq	r0, #2
 8024394:	07d9      	lsls	r1, r3, #31
 8024396:	d403      	bmi.n	80243a0 <__lo0bits+0x4e>
 8024398:	085b      	lsrs	r3, r3, #1
 802439a:	f100 0001 	add.w	r0, r0, #1
 802439e:	d003      	beq.n	80243a8 <__lo0bits+0x56>
 80243a0:	6013      	str	r3, [r2, #0]
 80243a2:	4770      	bx	lr
 80243a4:	2000      	movs	r0, #0
 80243a6:	4770      	bx	lr
 80243a8:	2020      	movs	r0, #32
 80243aa:	4770      	bx	lr

080243ac <__i2b>:
 80243ac:	b510      	push	{r4, lr}
 80243ae:	460c      	mov	r4, r1
 80243b0:	2101      	movs	r1, #1
 80243b2:	f7ff ff07 	bl	80241c4 <_Balloc>
 80243b6:	4602      	mov	r2, r0
 80243b8:	b928      	cbnz	r0, 80243c6 <__i2b+0x1a>
 80243ba:	4b05      	ldr	r3, [pc, #20]	@ (80243d0 <__i2b+0x24>)
 80243bc:	4805      	ldr	r0, [pc, #20]	@ (80243d4 <__i2b+0x28>)
 80243be:	f240 1145 	movw	r1, #325	@ 0x145
 80243c2:	f000 fb1b 	bl	80249fc <__assert_func>
 80243c6:	2301      	movs	r3, #1
 80243c8:	6144      	str	r4, [r0, #20]
 80243ca:	6103      	str	r3, [r0, #16]
 80243cc:	bd10      	pop	{r4, pc}
 80243ce:	bf00      	nop
 80243d0:	08025350 	.word	0x08025350
 80243d4:	08025361 	.word	0x08025361

080243d8 <__multiply>:
 80243d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243dc:	4614      	mov	r4, r2
 80243de:	690a      	ldr	r2, [r1, #16]
 80243e0:	6923      	ldr	r3, [r4, #16]
 80243e2:	429a      	cmp	r2, r3
 80243e4:	bfa8      	it	ge
 80243e6:	4623      	movge	r3, r4
 80243e8:	460f      	mov	r7, r1
 80243ea:	bfa4      	itt	ge
 80243ec:	460c      	movge	r4, r1
 80243ee:	461f      	movge	r7, r3
 80243f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80243f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80243f8:	68a3      	ldr	r3, [r4, #8]
 80243fa:	6861      	ldr	r1, [r4, #4]
 80243fc:	eb0a 0609 	add.w	r6, sl, r9
 8024400:	42b3      	cmp	r3, r6
 8024402:	b085      	sub	sp, #20
 8024404:	bfb8      	it	lt
 8024406:	3101      	addlt	r1, #1
 8024408:	f7ff fedc 	bl	80241c4 <_Balloc>
 802440c:	b930      	cbnz	r0, 802441c <__multiply+0x44>
 802440e:	4602      	mov	r2, r0
 8024410:	4b44      	ldr	r3, [pc, #272]	@ (8024524 <__multiply+0x14c>)
 8024412:	4845      	ldr	r0, [pc, #276]	@ (8024528 <__multiply+0x150>)
 8024414:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8024418:	f000 faf0 	bl	80249fc <__assert_func>
 802441c:	f100 0514 	add.w	r5, r0, #20
 8024420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8024424:	462b      	mov	r3, r5
 8024426:	2200      	movs	r2, #0
 8024428:	4543      	cmp	r3, r8
 802442a:	d321      	bcc.n	8024470 <__multiply+0x98>
 802442c:	f107 0114 	add.w	r1, r7, #20
 8024430:	f104 0214 	add.w	r2, r4, #20
 8024434:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8024438:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802443c:	9302      	str	r3, [sp, #8]
 802443e:	1b13      	subs	r3, r2, r4
 8024440:	3b15      	subs	r3, #21
 8024442:	f023 0303 	bic.w	r3, r3, #3
 8024446:	3304      	adds	r3, #4
 8024448:	f104 0715 	add.w	r7, r4, #21
 802444c:	42ba      	cmp	r2, r7
 802444e:	bf38      	it	cc
 8024450:	2304      	movcc	r3, #4
 8024452:	9301      	str	r3, [sp, #4]
 8024454:	9b02      	ldr	r3, [sp, #8]
 8024456:	9103      	str	r1, [sp, #12]
 8024458:	428b      	cmp	r3, r1
 802445a:	d80c      	bhi.n	8024476 <__multiply+0x9e>
 802445c:	2e00      	cmp	r6, #0
 802445e:	dd03      	ble.n	8024468 <__multiply+0x90>
 8024460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8024464:	2b00      	cmp	r3, #0
 8024466:	d05b      	beq.n	8024520 <__multiply+0x148>
 8024468:	6106      	str	r6, [r0, #16]
 802446a:	b005      	add	sp, #20
 802446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024470:	f843 2b04 	str.w	r2, [r3], #4
 8024474:	e7d8      	b.n	8024428 <__multiply+0x50>
 8024476:	f8b1 a000 	ldrh.w	sl, [r1]
 802447a:	f1ba 0f00 	cmp.w	sl, #0
 802447e:	d024      	beq.n	80244ca <__multiply+0xf2>
 8024480:	f104 0e14 	add.w	lr, r4, #20
 8024484:	46a9      	mov	r9, r5
 8024486:	f04f 0c00 	mov.w	ip, #0
 802448a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802448e:	f8d9 3000 	ldr.w	r3, [r9]
 8024492:	fa1f fb87 	uxth.w	fp, r7
 8024496:	b29b      	uxth	r3, r3
 8024498:	fb0a 330b 	mla	r3, sl, fp, r3
 802449c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80244a0:	f8d9 7000 	ldr.w	r7, [r9]
 80244a4:	4463      	add	r3, ip
 80244a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80244aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80244ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80244b2:	b29b      	uxth	r3, r3
 80244b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80244b8:	4572      	cmp	r2, lr
 80244ba:	f849 3b04 	str.w	r3, [r9], #4
 80244be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80244c2:	d8e2      	bhi.n	802448a <__multiply+0xb2>
 80244c4:	9b01      	ldr	r3, [sp, #4]
 80244c6:	f845 c003 	str.w	ip, [r5, r3]
 80244ca:	9b03      	ldr	r3, [sp, #12]
 80244cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80244d0:	3104      	adds	r1, #4
 80244d2:	f1b9 0f00 	cmp.w	r9, #0
 80244d6:	d021      	beq.n	802451c <__multiply+0x144>
 80244d8:	682b      	ldr	r3, [r5, #0]
 80244da:	f104 0c14 	add.w	ip, r4, #20
 80244de:	46ae      	mov	lr, r5
 80244e0:	f04f 0a00 	mov.w	sl, #0
 80244e4:	f8bc b000 	ldrh.w	fp, [ip]
 80244e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80244ec:	fb09 770b 	mla	r7, r9, fp, r7
 80244f0:	4457      	add	r7, sl
 80244f2:	b29b      	uxth	r3, r3
 80244f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80244f8:	f84e 3b04 	str.w	r3, [lr], #4
 80244fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8024500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8024504:	f8be 3000 	ldrh.w	r3, [lr]
 8024508:	fb09 330a 	mla	r3, r9, sl, r3
 802450c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8024510:	4562      	cmp	r2, ip
 8024512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8024516:	d8e5      	bhi.n	80244e4 <__multiply+0x10c>
 8024518:	9f01      	ldr	r7, [sp, #4]
 802451a:	51eb      	str	r3, [r5, r7]
 802451c:	3504      	adds	r5, #4
 802451e:	e799      	b.n	8024454 <__multiply+0x7c>
 8024520:	3e01      	subs	r6, #1
 8024522:	e79b      	b.n	802445c <__multiply+0x84>
 8024524:	08025350 	.word	0x08025350
 8024528:	08025361 	.word	0x08025361

0802452c <__pow5mult>:
 802452c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024530:	4615      	mov	r5, r2
 8024532:	f012 0203 	ands.w	r2, r2, #3
 8024536:	4607      	mov	r7, r0
 8024538:	460e      	mov	r6, r1
 802453a:	d007      	beq.n	802454c <__pow5mult+0x20>
 802453c:	4c25      	ldr	r4, [pc, #148]	@ (80245d4 <__pow5mult+0xa8>)
 802453e:	3a01      	subs	r2, #1
 8024540:	2300      	movs	r3, #0
 8024542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024546:	f7ff fe9f 	bl	8024288 <__multadd>
 802454a:	4606      	mov	r6, r0
 802454c:	10ad      	asrs	r5, r5, #2
 802454e:	d03d      	beq.n	80245cc <__pow5mult+0xa0>
 8024550:	69fc      	ldr	r4, [r7, #28]
 8024552:	b97c      	cbnz	r4, 8024574 <__pow5mult+0x48>
 8024554:	2010      	movs	r0, #16
 8024556:	f7ff fcd3 	bl	8023f00 <malloc>
 802455a:	4602      	mov	r2, r0
 802455c:	61f8      	str	r0, [r7, #28]
 802455e:	b928      	cbnz	r0, 802456c <__pow5mult+0x40>
 8024560:	4b1d      	ldr	r3, [pc, #116]	@ (80245d8 <__pow5mult+0xac>)
 8024562:	481e      	ldr	r0, [pc, #120]	@ (80245dc <__pow5mult+0xb0>)
 8024564:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8024568:	f000 fa48 	bl	80249fc <__assert_func>
 802456c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024570:	6004      	str	r4, [r0, #0]
 8024572:	60c4      	str	r4, [r0, #12]
 8024574:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8024578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802457c:	b94c      	cbnz	r4, 8024592 <__pow5mult+0x66>
 802457e:	f240 2171 	movw	r1, #625	@ 0x271
 8024582:	4638      	mov	r0, r7
 8024584:	f7ff ff12 	bl	80243ac <__i2b>
 8024588:	2300      	movs	r3, #0
 802458a:	f8c8 0008 	str.w	r0, [r8, #8]
 802458e:	4604      	mov	r4, r0
 8024590:	6003      	str	r3, [r0, #0]
 8024592:	f04f 0900 	mov.w	r9, #0
 8024596:	07eb      	lsls	r3, r5, #31
 8024598:	d50a      	bpl.n	80245b0 <__pow5mult+0x84>
 802459a:	4631      	mov	r1, r6
 802459c:	4622      	mov	r2, r4
 802459e:	4638      	mov	r0, r7
 80245a0:	f7ff ff1a 	bl	80243d8 <__multiply>
 80245a4:	4631      	mov	r1, r6
 80245a6:	4680      	mov	r8, r0
 80245a8:	4638      	mov	r0, r7
 80245aa:	f7ff fe4b 	bl	8024244 <_Bfree>
 80245ae:	4646      	mov	r6, r8
 80245b0:	106d      	asrs	r5, r5, #1
 80245b2:	d00b      	beq.n	80245cc <__pow5mult+0xa0>
 80245b4:	6820      	ldr	r0, [r4, #0]
 80245b6:	b938      	cbnz	r0, 80245c8 <__pow5mult+0x9c>
 80245b8:	4622      	mov	r2, r4
 80245ba:	4621      	mov	r1, r4
 80245bc:	4638      	mov	r0, r7
 80245be:	f7ff ff0b 	bl	80243d8 <__multiply>
 80245c2:	6020      	str	r0, [r4, #0]
 80245c4:	f8c0 9000 	str.w	r9, [r0]
 80245c8:	4604      	mov	r4, r0
 80245ca:	e7e4      	b.n	8024596 <__pow5mult+0x6a>
 80245cc:	4630      	mov	r0, r6
 80245ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80245d2:	bf00      	nop
 80245d4:	080253bc 	.word	0x080253bc
 80245d8:	080252e1 	.word	0x080252e1
 80245dc:	08025361 	.word	0x08025361

080245e0 <__lshift>:
 80245e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245e4:	460c      	mov	r4, r1
 80245e6:	6849      	ldr	r1, [r1, #4]
 80245e8:	6923      	ldr	r3, [r4, #16]
 80245ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80245ee:	68a3      	ldr	r3, [r4, #8]
 80245f0:	4607      	mov	r7, r0
 80245f2:	4691      	mov	r9, r2
 80245f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80245f8:	f108 0601 	add.w	r6, r8, #1
 80245fc:	42b3      	cmp	r3, r6
 80245fe:	db0b      	blt.n	8024618 <__lshift+0x38>
 8024600:	4638      	mov	r0, r7
 8024602:	f7ff fddf 	bl	80241c4 <_Balloc>
 8024606:	4605      	mov	r5, r0
 8024608:	b948      	cbnz	r0, 802461e <__lshift+0x3e>
 802460a:	4602      	mov	r2, r0
 802460c:	4b28      	ldr	r3, [pc, #160]	@ (80246b0 <__lshift+0xd0>)
 802460e:	4829      	ldr	r0, [pc, #164]	@ (80246b4 <__lshift+0xd4>)
 8024610:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8024614:	f000 f9f2 	bl	80249fc <__assert_func>
 8024618:	3101      	adds	r1, #1
 802461a:	005b      	lsls	r3, r3, #1
 802461c:	e7ee      	b.n	80245fc <__lshift+0x1c>
 802461e:	2300      	movs	r3, #0
 8024620:	f100 0114 	add.w	r1, r0, #20
 8024624:	f100 0210 	add.w	r2, r0, #16
 8024628:	4618      	mov	r0, r3
 802462a:	4553      	cmp	r3, sl
 802462c:	db33      	blt.n	8024696 <__lshift+0xb6>
 802462e:	6920      	ldr	r0, [r4, #16]
 8024630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024634:	f104 0314 	add.w	r3, r4, #20
 8024638:	f019 091f 	ands.w	r9, r9, #31
 802463c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8024644:	d02b      	beq.n	802469e <__lshift+0xbe>
 8024646:	f1c9 0e20 	rsb	lr, r9, #32
 802464a:	468a      	mov	sl, r1
 802464c:	2200      	movs	r2, #0
 802464e:	6818      	ldr	r0, [r3, #0]
 8024650:	fa00 f009 	lsl.w	r0, r0, r9
 8024654:	4310      	orrs	r0, r2
 8024656:	f84a 0b04 	str.w	r0, [sl], #4
 802465a:	f853 2b04 	ldr.w	r2, [r3], #4
 802465e:	459c      	cmp	ip, r3
 8024660:	fa22 f20e 	lsr.w	r2, r2, lr
 8024664:	d8f3      	bhi.n	802464e <__lshift+0x6e>
 8024666:	ebac 0304 	sub.w	r3, ip, r4
 802466a:	3b15      	subs	r3, #21
 802466c:	f023 0303 	bic.w	r3, r3, #3
 8024670:	3304      	adds	r3, #4
 8024672:	f104 0015 	add.w	r0, r4, #21
 8024676:	4584      	cmp	ip, r0
 8024678:	bf38      	it	cc
 802467a:	2304      	movcc	r3, #4
 802467c:	50ca      	str	r2, [r1, r3]
 802467e:	b10a      	cbz	r2, 8024684 <__lshift+0xa4>
 8024680:	f108 0602 	add.w	r6, r8, #2
 8024684:	3e01      	subs	r6, #1
 8024686:	4638      	mov	r0, r7
 8024688:	612e      	str	r6, [r5, #16]
 802468a:	4621      	mov	r1, r4
 802468c:	f7ff fdda 	bl	8024244 <_Bfree>
 8024690:	4628      	mov	r0, r5
 8024692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024696:	f842 0f04 	str.w	r0, [r2, #4]!
 802469a:	3301      	adds	r3, #1
 802469c:	e7c5      	b.n	802462a <__lshift+0x4a>
 802469e:	3904      	subs	r1, #4
 80246a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80246a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80246a8:	459c      	cmp	ip, r3
 80246aa:	d8f9      	bhi.n	80246a0 <__lshift+0xc0>
 80246ac:	e7ea      	b.n	8024684 <__lshift+0xa4>
 80246ae:	bf00      	nop
 80246b0:	08025350 	.word	0x08025350
 80246b4:	08025361 	.word	0x08025361

080246b8 <__mcmp>:
 80246b8:	690a      	ldr	r2, [r1, #16]
 80246ba:	4603      	mov	r3, r0
 80246bc:	6900      	ldr	r0, [r0, #16]
 80246be:	1a80      	subs	r0, r0, r2
 80246c0:	b530      	push	{r4, r5, lr}
 80246c2:	d10e      	bne.n	80246e2 <__mcmp+0x2a>
 80246c4:	3314      	adds	r3, #20
 80246c6:	3114      	adds	r1, #20
 80246c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80246cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80246d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80246d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80246d8:	4295      	cmp	r5, r2
 80246da:	d003      	beq.n	80246e4 <__mcmp+0x2c>
 80246dc:	d205      	bcs.n	80246ea <__mcmp+0x32>
 80246de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80246e2:	bd30      	pop	{r4, r5, pc}
 80246e4:	42a3      	cmp	r3, r4
 80246e6:	d3f3      	bcc.n	80246d0 <__mcmp+0x18>
 80246e8:	e7fb      	b.n	80246e2 <__mcmp+0x2a>
 80246ea:	2001      	movs	r0, #1
 80246ec:	e7f9      	b.n	80246e2 <__mcmp+0x2a>
	...

080246f0 <__mdiff>:
 80246f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246f4:	4689      	mov	r9, r1
 80246f6:	4606      	mov	r6, r0
 80246f8:	4611      	mov	r1, r2
 80246fa:	4648      	mov	r0, r9
 80246fc:	4614      	mov	r4, r2
 80246fe:	f7ff ffdb 	bl	80246b8 <__mcmp>
 8024702:	1e05      	subs	r5, r0, #0
 8024704:	d112      	bne.n	802472c <__mdiff+0x3c>
 8024706:	4629      	mov	r1, r5
 8024708:	4630      	mov	r0, r6
 802470a:	f7ff fd5b 	bl	80241c4 <_Balloc>
 802470e:	4602      	mov	r2, r0
 8024710:	b928      	cbnz	r0, 802471e <__mdiff+0x2e>
 8024712:	4b3f      	ldr	r3, [pc, #252]	@ (8024810 <__mdiff+0x120>)
 8024714:	f240 2137 	movw	r1, #567	@ 0x237
 8024718:	483e      	ldr	r0, [pc, #248]	@ (8024814 <__mdiff+0x124>)
 802471a:	f000 f96f 	bl	80249fc <__assert_func>
 802471e:	2301      	movs	r3, #1
 8024720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024724:	4610      	mov	r0, r2
 8024726:	b003      	add	sp, #12
 8024728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802472c:	bfbc      	itt	lt
 802472e:	464b      	movlt	r3, r9
 8024730:	46a1      	movlt	r9, r4
 8024732:	4630      	mov	r0, r6
 8024734:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8024738:	bfba      	itte	lt
 802473a:	461c      	movlt	r4, r3
 802473c:	2501      	movlt	r5, #1
 802473e:	2500      	movge	r5, #0
 8024740:	f7ff fd40 	bl	80241c4 <_Balloc>
 8024744:	4602      	mov	r2, r0
 8024746:	b918      	cbnz	r0, 8024750 <__mdiff+0x60>
 8024748:	4b31      	ldr	r3, [pc, #196]	@ (8024810 <__mdiff+0x120>)
 802474a:	f240 2145 	movw	r1, #581	@ 0x245
 802474e:	e7e3      	b.n	8024718 <__mdiff+0x28>
 8024750:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8024754:	6926      	ldr	r6, [r4, #16]
 8024756:	60c5      	str	r5, [r0, #12]
 8024758:	f109 0310 	add.w	r3, r9, #16
 802475c:	f109 0514 	add.w	r5, r9, #20
 8024760:	f104 0e14 	add.w	lr, r4, #20
 8024764:	f100 0b14 	add.w	fp, r0, #20
 8024768:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802476c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8024770:	9301      	str	r3, [sp, #4]
 8024772:	46d9      	mov	r9, fp
 8024774:	f04f 0c00 	mov.w	ip, #0
 8024778:	9b01      	ldr	r3, [sp, #4]
 802477a:	f85e 0b04 	ldr.w	r0, [lr], #4
 802477e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8024782:	9301      	str	r3, [sp, #4]
 8024784:	fa1f f38a 	uxth.w	r3, sl
 8024788:	4619      	mov	r1, r3
 802478a:	b283      	uxth	r3, r0
 802478c:	1acb      	subs	r3, r1, r3
 802478e:	0c00      	lsrs	r0, r0, #16
 8024790:	4463      	add	r3, ip
 8024792:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8024796:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802479a:	b29b      	uxth	r3, r3
 802479c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80247a0:	4576      	cmp	r6, lr
 80247a2:	f849 3b04 	str.w	r3, [r9], #4
 80247a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80247aa:	d8e5      	bhi.n	8024778 <__mdiff+0x88>
 80247ac:	1b33      	subs	r3, r6, r4
 80247ae:	3b15      	subs	r3, #21
 80247b0:	f023 0303 	bic.w	r3, r3, #3
 80247b4:	3415      	adds	r4, #21
 80247b6:	3304      	adds	r3, #4
 80247b8:	42a6      	cmp	r6, r4
 80247ba:	bf38      	it	cc
 80247bc:	2304      	movcc	r3, #4
 80247be:	441d      	add	r5, r3
 80247c0:	445b      	add	r3, fp
 80247c2:	461e      	mov	r6, r3
 80247c4:	462c      	mov	r4, r5
 80247c6:	4544      	cmp	r4, r8
 80247c8:	d30e      	bcc.n	80247e8 <__mdiff+0xf8>
 80247ca:	f108 0103 	add.w	r1, r8, #3
 80247ce:	1b49      	subs	r1, r1, r5
 80247d0:	f021 0103 	bic.w	r1, r1, #3
 80247d4:	3d03      	subs	r5, #3
 80247d6:	45a8      	cmp	r8, r5
 80247d8:	bf38      	it	cc
 80247da:	2100      	movcc	r1, #0
 80247dc:	440b      	add	r3, r1
 80247de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80247e2:	b191      	cbz	r1, 802480a <__mdiff+0x11a>
 80247e4:	6117      	str	r7, [r2, #16]
 80247e6:	e79d      	b.n	8024724 <__mdiff+0x34>
 80247e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80247ec:	46e6      	mov	lr, ip
 80247ee:	0c08      	lsrs	r0, r1, #16
 80247f0:	fa1c fc81 	uxtah	ip, ip, r1
 80247f4:	4471      	add	r1, lr
 80247f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80247fa:	b289      	uxth	r1, r1
 80247fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8024800:	f846 1b04 	str.w	r1, [r6], #4
 8024804:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8024808:	e7dd      	b.n	80247c6 <__mdiff+0xd6>
 802480a:	3f01      	subs	r7, #1
 802480c:	e7e7      	b.n	80247de <__mdiff+0xee>
 802480e:	bf00      	nop
 8024810:	08025350 	.word	0x08025350
 8024814:	08025361 	.word	0x08025361

08024818 <__d2b>:
 8024818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802481c:	460f      	mov	r7, r1
 802481e:	2101      	movs	r1, #1
 8024820:	ec59 8b10 	vmov	r8, r9, d0
 8024824:	4616      	mov	r6, r2
 8024826:	f7ff fccd 	bl	80241c4 <_Balloc>
 802482a:	4604      	mov	r4, r0
 802482c:	b930      	cbnz	r0, 802483c <__d2b+0x24>
 802482e:	4602      	mov	r2, r0
 8024830:	4b23      	ldr	r3, [pc, #140]	@ (80248c0 <__d2b+0xa8>)
 8024832:	4824      	ldr	r0, [pc, #144]	@ (80248c4 <__d2b+0xac>)
 8024834:	f240 310f 	movw	r1, #783	@ 0x30f
 8024838:	f000 f8e0 	bl	80249fc <__assert_func>
 802483c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024844:	b10d      	cbz	r5, 802484a <__d2b+0x32>
 8024846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802484a:	9301      	str	r3, [sp, #4]
 802484c:	f1b8 0300 	subs.w	r3, r8, #0
 8024850:	d023      	beq.n	802489a <__d2b+0x82>
 8024852:	4668      	mov	r0, sp
 8024854:	9300      	str	r3, [sp, #0]
 8024856:	f7ff fd7c 	bl	8024352 <__lo0bits>
 802485a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802485e:	b1d0      	cbz	r0, 8024896 <__d2b+0x7e>
 8024860:	f1c0 0320 	rsb	r3, r0, #32
 8024864:	fa02 f303 	lsl.w	r3, r2, r3
 8024868:	430b      	orrs	r3, r1
 802486a:	40c2      	lsrs	r2, r0
 802486c:	6163      	str	r3, [r4, #20]
 802486e:	9201      	str	r2, [sp, #4]
 8024870:	9b01      	ldr	r3, [sp, #4]
 8024872:	61a3      	str	r3, [r4, #24]
 8024874:	2b00      	cmp	r3, #0
 8024876:	bf0c      	ite	eq
 8024878:	2201      	moveq	r2, #1
 802487a:	2202      	movne	r2, #2
 802487c:	6122      	str	r2, [r4, #16]
 802487e:	b1a5      	cbz	r5, 80248aa <__d2b+0x92>
 8024880:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8024884:	4405      	add	r5, r0
 8024886:	603d      	str	r5, [r7, #0]
 8024888:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802488c:	6030      	str	r0, [r6, #0]
 802488e:	4620      	mov	r0, r4
 8024890:	b003      	add	sp, #12
 8024892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024896:	6161      	str	r1, [r4, #20]
 8024898:	e7ea      	b.n	8024870 <__d2b+0x58>
 802489a:	a801      	add	r0, sp, #4
 802489c:	f7ff fd59 	bl	8024352 <__lo0bits>
 80248a0:	9b01      	ldr	r3, [sp, #4]
 80248a2:	6163      	str	r3, [r4, #20]
 80248a4:	3020      	adds	r0, #32
 80248a6:	2201      	movs	r2, #1
 80248a8:	e7e8      	b.n	802487c <__d2b+0x64>
 80248aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80248ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80248b2:	6038      	str	r0, [r7, #0]
 80248b4:	6918      	ldr	r0, [r3, #16]
 80248b6:	f7ff fd2d 	bl	8024314 <__hi0bits>
 80248ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80248be:	e7e5      	b.n	802488c <__d2b+0x74>
 80248c0:	08025350 	.word	0x08025350
 80248c4:	08025361 	.word	0x08025361

080248c8 <__sread>:
 80248c8:	b510      	push	{r4, lr}
 80248ca:	460c      	mov	r4, r1
 80248cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80248d0:	f000 f860 	bl	8024994 <_read_r>
 80248d4:	2800      	cmp	r0, #0
 80248d6:	bfab      	itete	ge
 80248d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80248da:	89a3      	ldrhlt	r3, [r4, #12]
 80248dc:	181b      	addge	r3, r3, r0
 80248de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80248e2:	bfac      	ite	ge
 80248e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80248e6:	81a3      	strhlt	r3, [r4, #12]
 80248e8:	bd10      	pop	{r4, pc}

080248ea <__swrite>:
 80248ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80248ee:	461f      	mov	r7, r3
 80248f0:	898b      	ldrh	r3, [r1, #12]
 80248f2:	05db      	lsls	r3, r3, #23
 80248f4:	4605      	mov	r5, r0
 80248f6:	460c      	mov	r4, r1
 80248f8:	4616      	mov	r6, r2
 80248fa:	d505      	bpl.n	8024908 <__swrite+0x1e>
 80248fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024900:	2302      	movs	r3, #2
 8024902:	2200      	movs	r2, #0
 8024904:	f000 f834 	bl	8024970 <_lseek_r>
 8024908:	89a3      	ldrh	r3, [r4, #12]
 802490a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802490e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024912:	81a3      	strh	r3, [r4, #12]
 8024914:	4632      	mov	r2, r6
 8024916:	463b      	mov	r3, r7
 8024918:	4628      	mov	r0, r5
 802491a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802491e:	f000 b85b 	b.w	80249d8 <_write_r>

08024922 <__sseek>:
 8024922:	b510      	push	{r4, lr}
 8024924:	460c      	mov	r4, r1
 8024926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802492a:	f000 f821 	bl	8024970 <_lseek_r>
 802492e:	1c43      	adds	r3, r0, #1
 8024930:	89a3      	ldrh	r3, [r4, #12]
 8024932:	bf15      	itete	ne
 8024934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802493a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802493e:	81a3      	strheq	r3, [r4, #12]
 8024940:	bf18      	it	ne
 8024942:	81a3      	strhne	r3, [r4, #12]
 8024944:	bd10      	pop	{r4, pc}

08024946 <__sclose>:
 8024946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802494a:	f000 b801 	b.w	8024950 <_close_r>
	...

08024950 <_close_r>:
 8024950:	b538      	push	{r3, r4, r5, lr}
 8024952:	4d06      	ldr	r5, [pc, #24]	@ (802496c <_close_r+0x1c>)
 8024954:	2300      	movs	r3, #0
 8024956:	4604      	mov	r4, r0
 8024958:	4608      	mov	r0, r1
 802495a:	602b      	str	r3, [r5, #0]
 802495c:	f7fc fcaf 	bl	80212be <_close>
 8024960:	1c43      	adds	r3, r0, #1
 8024962:	d102      	bne.n	802496a <_close_r+0x1a>
 8024964:	682b      	ldr	r3, [r5, #0]
 8024966:	b103      	cbz	r3, 802496a <_close_r+0x1a>
 8024968:	6023      	str	r3, [r4, #0]
 802496a:	bd38      	pop	{r3, r4, r5, pc}
 802496c:	20000340 	.word	0x20000340

08024970 <_lseek_r>:
 8024970:	b538      	push	{r3, r4, r5, lr}
 8024972:	4d07      	ldr	r5, [pc, #28]	@ (8024990 <_lseek_r+0x20>)
 8024974:	4604      	mov	r4, r0
 8024976:	4608      	mov	r0, r1
 8024978:	4611      	mov	r1, r2
 802497a:	2200      	movs	r2, #0
 802497c:	602a      	str	r2, [r5, #0]
 802497e:	461a      	mov	r2, r3
 8024980:	f7fc fcc4 	bl	802130c <_lseek>
 8024984:	1c43      	adds	r3, r0, #1
 8024986:	d102      	bne.n	802498e <_lseek_r+0x1e>
 8024988:	682b      	ldr	r3, [r5, #0]
 802498a:	b103      	cbz	r3, 802498e <_lseek_r+0x1e>
 802498c:	6023      	str	r3, [r4, #0]
 802498e:	bd38      	pop	{r3, r4, r5, pc}
 8024990:	20000340 	.word	0x20000340

08024994 <_read_r>:
 8024994:	b538      	push	{r3, r4, r5, lr}
 8024996:	4d07      	ldr	r5, [pc, #28]	@ (80249b4 <_read_r+0x20>)
 8024998:	4604      	mov	r4, r0
 802499a:	4608      	mov	r0, r1
 802499c:	4611      	mov	r1, r2
 802499e:	2200      	movs	r2, #0
 80249a0:	602a      	str	r2, [r5, #0]
 80249a2:	461a      	mov	r2, r3
 80249a4:	f7fc fc52 	bl	802124c <_read>
 80249a8:	1c43      	adds	r3, r0, #1
 80249aa:	d102      	bne.n	80249b2 <_read_r+0x1e>
 80249ac:	682b      	ldr	r3, [r5, #0]
 80249ae:	b103      	cbz	r3, 80249b2 <_read_r+0x1e>
 80249b0:	6023      	str	r3, [r4, #0]
 80249b2:	bd38      	pop	{r3, r4, r5, pc}
 80249b4:	20000340 	.word	0x20000340

080249b8 <_sbrk_r>:
 80249b8:	b538      	push	{r3, r4, r5, lr}
 80249ba:	4d06      	ldr	r5, [pc, #24]	@ (80249d4 <_sbrk_r+0x1c>)
 80249bc:	2300      	movs	r3, #0
 80249be:	4604      	mov	r4, r0
 80249c0:	4608      	mov	r0, r1
 80249c2:	602b      	str	r3, [r5, #0]
 80249c4:	f7fc fcb0 	bl	8021328 <_sbrk>
 80249c8:	1c43      	adds	r3, r0, #1
 80249ca:	d102      	bne.n	80249d2 <_sbrk_r+0x1a>
 80249cc:	682b      	ldr	r3, [r5, #0]
 80249ce:	b103      	cbz	r3, 80249d2 <_sbrk_r+0x1a>
 80249d0:	6023      	str	r3, [r4, #0]
 80249d2:	bd38      	pop	{r3, r4, r5, pc}
 80249d4:	20000340 	.word	0x20000340

080249d8 <_write_r>:
 80249d8:	b538      	push	{r3, r4, r5, lr}
 80249da:	4d07      	ldr	r5, [pc, #28]	@ (80249f8 <_write_r+0x20>)
 80249dc:	4604      	mov	r4, r0
 80249de:	4608      	mov	r0, r1
 80249e0:	4611      	mov	r1, r2
 80249e2:	2200      	movs	r2, #0
 80249e4:	602a      	str	r2, [r5, #0]
 80249e6:	461a      	mov	r2, r3
 80249e8:	f7fc fc4d 	bl	8021286 <_write>
 80249ec:	1c43      	adds	r3, r0, #1
 80249ee:	d102      	bne.n	80249f6 <_write_r+0x1e>
 80249f0:	682b      	ldr	r3, [r5, #0]
 80249f2:	b103      	cbz	r3, 80249f6 <_write_r+0x1e>
 80249f4:	6023      	str	r3, [r4, #0]
 80249f6:	bd38      	pop	{r3, r4, r5, pc}
 80249f8:	20000340 	.word	0x20000340

080249fc <__assert_func>:
 80249fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80249fe:	4614      	mov	r4, r2
 8024a00:	461a      	mov	r2, r3
 8024a02:	4b09      	ldr	r3, [pc, #36]	@ (8024a28 <__assert_func+0x2c>)
 8024a04:	681b      	ldr	r3, [r3, #0]
 8024a06:	4605      	mov	r5, r0
 8024a08:	68d8      	ldr	r0, [r3, #12]
 8024a0a:	b954      	cbnz	r4, 8024a22 <__assert_func+0x26>
 8024a0c:	4b07      	ldr	r3, [pc, #28]	@ (8024a2c <__assert_func+0x30>)
 8024a0e:	461c      	mov	r4, r3
 8024a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024a14:	9100      	str	r1, [sp, #0]
 8024a16:	462b      	mov	r3, r5
 8024a18:	4905      	ldr	r1, [pc, #20]	@ (8024a30 <__assert_func+0x34>)
 8024a1a:	f000 f87d 	bl	8024b18 <fiprintf>
 8024a1e:	f000 f89a 	bl	8024b56 <abort>
 8024a22:	4b04      	ldr	r3, [pc, #16]	@ (8024a34 <__assert_func+0x38>)
 8024a24:	e7f4      	b.n	8024a10 <__assert_func+0x14>
 8024a26:	bf00      	nop
 8024a28:	20000018 	.word	0x20000018
 8024a2c:	080255fe 	.word	0x080255fe
 8024a30:	080255d0 	.word	0x080255d0
 8024a34:	080255c3 	.word	0x080255c3

08024a38 <_calloc_r>:
 8024a38:	b570      	push	{r4, r5, r6, lr}
 8024a3a:	fba1 5402 	umull	r5, r4, r1, r2
 8024a3e:	b93c      	cbnz	r4, 8024a50 <_calloc_r+0x18>
 8024a40:	4629      	mov	r1, r5
 8024a42:	f7ff fa87 	bl	8023f54 <_malloc_r>
 8024a46:	4606      	mov	r6, r0
 8024a48:	b928      	cbnz	r0, 8024a56 <_calloc_r+0x1e>
 8024a4a:	2600      	movs	r6, #0
 8024a4c:	4630      	mov	r0, r6
 8024a4e:	bd70      	pop	{r4, r5, r6, pc}
 8024a50:	220c      	movs	r2, #12
 8024a52:	6002      	str	r2, [r0, #0]
 8024a54:	e7f9      	b.n	8024a4a <_calloc_r+0x12>
 8024a56:	462a      	mov	r2, r5
 8024a58:	4621      	mov	r1, r4
 8024a5a:	f7fe fbbd 	bl	80231d8 <memset>
 8024a5e:	e7f5      	b.n	8024a4c <_calloc_r+0x14>

08024a60 <_free_r>:
 8024a60:	b538      	push	{r3, r4, r5, lr}
 8024a62:	4605      	mov	r5, r0
 8024a64:	2900      	cmp	r1, #0
 8024a66:	d041      	beq.n	8024aec <_free_r+0x8c>
 8024a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024a6c:	1f0c      	subs	r4, r1, #4
 8024a6e:	2b00      	cmp	r3, #0
 8024a70:	bfb8      	it	lt
 8024a72:	18e4      	addlt	r4, r4, r3
 8024a74:	f7ff fb9a 	bl	80241ac <__malloc_lock>
 8024a78:	4a1d      	ldr	r2, [pc, #116]	@ (8024af0 <_free_r+0x90>)
 8024a7a:	6813      	ldr	r3, [r2, #0]
 8024a7c:	b933      	cbnz	r3, 8024a8c <_free_r+0x2c>
 8024a7e:	6063      	str	r3, [r4, #4]
 8024a80:	6014      	str	r4, [r2, #0]
 8024a82:	4628      	mov	r0, r5
 8024a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024a88:	f7ff bb96 	b.w	80241b8 <__malloc_unlock>
 8024a8c:	42a3      	cmp	r3, r4
 8024a8e:	d908      	bls.n	8024aa2 <_free_r+0x42>
 8024a90:	6820      	ldr	r0, [r4, #0]
 8024a92:	1821      	adds	r1, r4, r0
 8024a94:	428b      	cmp	r3, r1
 8024a96:	bf01      	itttt	eq
 8024a98:	6819      	ldreq	r1, [r3, #0]
 8024a9a:	685b      	ldreq	r3, [r3, #4]
 8024a9c:	1809      	addeq	r1, r1, r0
 8024a9e:	6021      	streq	r1, [r4, #0]
 8024aa0:	e7ed      	b.n	8024a7e <_free_r+0x1e>
 8024aa2:	461a      	mov	r2, r3
 8024aa4:	685b      	ldr	r3, [r3, #4]
 8024aa6:	b10b      	cbz	r3, 8024aac <_free_r+0x4c>
 8024aa8:	42a3      	cmp	r3, r4
 8024aaa:	d9fa      	bls.n	8024aa2 <_free_r+0x42>
 8024aac:	6811      	ldr	r1, [r2, #0]
 8024aae:	1850      	adds	r0, r2, r1
 8024ab0:	42a0      	cmp	r0, r4
 8024ab2:	d10b      	bne.n	8024acc <_free_r+0x6c>
 8024ab4:	6820      	ldr	r0, [r4, #0]
 8024ab6:	4401      	add	r1, r0
 8024ab8:	1850      	adds	r0, r2, r1
 8024aba:	4283      	cmp	r3, r0
 8024abc:	6011      	str	r1, [r2, #0]
 8024abe:	d1e0      	bne.n	8024a82 <_free_r+0x22>
 8024ac0:	6818      	ldr	r0, [r3, #0]
 8024ac2:	685b      	ldr	r3, [r3, #4]
 8024ac4:	6053      	str	r3, [r2, #4]
 8024ac6:	4408      	add	r0, r1
 8024ac8:	6010      	str	r0, [r2, #0]
 8024aca:	e7da      	b.n	8024a82 <_free_r+0x22>
 8024acc:	d902      	bls.n	8024ad4 <_free_r+0x74>
 8024ace:	230c      	movs	r3, #12
 8024ad0:	602b      	str	r3, [r5, #0]
 8024ad2:	e7d6      	b.n	8024a82 <_free_r+0x22>
 8024ad4:	6820      	ldr	r0, [r4, #0]
 8024ad6:	1821      	adds	r1, r4, r0
 8024ad8:	428b      	cmp	r3, r1
 8024ada:	bf04      	itt	eq
 8024adc:	6819      	ldreq	r1, [r3, #0]
 8024ade:	685b      	ldreq	r3, [r3, #4]
 8024ae0:	6063      	str	r3, [r4, #4]
 8024ae2:	bf04      	itt	eq
 8024ae4:	1809      	addeq	r1, r1, r0
 8024ae6:	6021      	streq	r1, [r4, #0]
 8024ae8:	6054      	str	r4, [r2, #4]
 8024aea:	e7ca      	b.n	8024a82 <_free_r+0x22>
 8024aec:	bd38      	pop	{r3, r4, r5, pc}
 8024aee:	bf00      	nop
 8024af0:	2000033c 	.word	0x2000033c

08024af4 <__ascii_mbtowc>:
 8024af4:	b082      	sub	sp, #8
 8024af6:	b901      	cbnz	r1, 8024afa <__ascii_mbtowc+0x6>
 8024af8:	a901      	add	r1, sp, #4
 8024afa:	b142      	cbz	r2, 8024b0e <__ascii_mbtowc+0x1a>
 8024afc:	b14b      	cbz	r3, 8024b12 <__ascii_mbtowc+0x1e>
 8024afe:	7813      	ldrb	r3, [r2, #0]
 8024b00:	600b      	str	r3, [r1, #0]
 8024b02:	7812      	ldrb	r2, [r2, #0]
 8024b04:	1e10      	subs	r0, r2, #0
 8024b06:	bf18      	it	ne
 8024b08:	2001      	movne	r0, #1
 8024b0a:	b002      	add	sp, #8
 8024b0c:	4770      	bx	lr
 8024b0e:	4610      	mov	r0, r2
 8024b10:	e7fb      	b.n	8024b0a <__ascii_mbtowc+0x16>
 8024b12:	f06f 0001 	mvn.w	r0, #1
 8024b16:	e7f8      	b.n	8024b0a <__ascii_mbtowc+0x16>

08024b18 <fiprintf>:
 8024b18:	b40e      	push	{r1, r2, r3}
 8024b1a:	b503      	push	{r0, r1, lr}
 8024b1c:	4601      	mov	r1, r0
 8024b1e:	ab03      	add	r3, sp, #12
 8024b20:	4805      	ldr	r0, [pc, #20]	@ (8024b38 <fiprintf+0x20>)
 8024b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8024b26:	6800      	ldr	r0, [r0, #0]
 8024b28:	9301      	str	r3, [sp, #4]
 8024b2a:	f000 f845 	bl	8024bb8 <_vfiprintf_r>
 8024b2e:	b002      	add	sp, #8
 8024b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8024b34:	b003      	add	sp, #12
 8024b36:	4770      	bx	lr
 8024b38:	20000018 	.word	0x20000018

08024b3c <__ascii_wctomb>:
 8024b3c:	4603      	mov	r3, r0
 8024b3e:	4608      	mov	r0, r1
 8024b40:	b141      	cbz	r1, 8024b54 <__ascii_wctomb+0x18>
 8024b42:	2aff      	cmp	r2, #255	@ 0xff
 8024b44:	d904      	bls.n	8024b50 <__ascii_wctomb+0x14>
 8024b46:	228a      	movs	r2, #138	@ 0x8a
 8024b48:	601a      	str	r2, [r3, #0]
 8024b4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024b4e:	4770      	bx	lr
 8024b50:	700a      	strb	r2, [r1, #0]
 8024b52:	2001      	movs	r0, #1
 8024b54:	4770      	bx	lr

08024b56 <abort>:
 8024b56:	b508      	push	{r3, lr}
 8024b58:	2006      	movs	r0, #6
 8024b5a:	f000 fa85 	bl	8025068 <raise>
 8024b5e:	2001      	movs	r0, #1
 8024b60:	f7fc fb69 	bl	8021236 <_exit>

08024b64 <__sfputc_r>:
 8024b64:	6893      	ldr	r3, [r2, #8]
 8024b66:	3b01      	subs	r3, #1
 8024b68:	2b00      	cmp	r3, #0
 8024b6a:	b410      	push	{r4}
 8024b6c:	6093      	str	r3, [r2, #8]
 8024b6e:	da08      	bge.n	8024b82 <__sfputc_r+0x1e>
 8024b70:	6994      	ldr	r4, [r2, #24]
 8024b72:	42a3      	cmp	r3, r4
 8024b74:	db01      	blt.n	8024b7a <__sfputc_r+0x16>
 8024b76:	290a      	cmp	r1, #10
 8024b78:	d103      	bne.n	8024b82 <__sfputc_r+0x1e>
 8024b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b7e:	f000 b933 	b.w	8024de8 <__swbuf_r>
 8024b82:	6813      	ldr	r3, [r2, #0]
 8024b84:	1c58      	adds	r0, r3, #1
 8024b86:	6010      	str	r0, [r2, #0]
 8024b88:	7019      	strb	r1, [r3, #0]
 8024b8a:	4608      	mov	r0, r1
 8024b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b90:	4770      	bx	lr

08024b92 <__sfputs_r>:
 8024b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b94:	4606      	mov	r6, r0
 8024b96:	460f      	mov	r7, r1
 8024b98:	4614      	mov	r4, r2
 8024b9a:	18d5      	adds	r5, r2, r3
 8024b9c:	42ac      	cmp	r4, r5
 8024b9e:	d101      	bne.n	8024ba4 <__sfputs_r+0x12>
 8024ba0:	2000      	movs	r0, #0
 8024ba2:	e007      	b.n	8024bb4 <__sfputs_r+0x22>
 8024ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024ba8:	463a      	mov	r2, r7
 8024baa:	4630      	mov	r0, r6
 8024bac:	f7ff ffda 	bl	8024b64 <__sfputc_r>
 8024bb0:	1c43      	adds	r3, r0, #1
 8024bb2:	d1f3      	bne.n	8024b9c <__sfputs_r+0xa>
 8024bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024bb8 <_vfiprintf_r>:
 8024bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bbc:	460d      	mov	r5, r1
 8024bbe:	b09d      	sub	sp, #116	@ 0x74
 8024bc0:	4614      	mov	r4, r2
 8024bc2:	4698      	mov	r8, r3
 8024bc4:	4606      	mov	r6, r0
 8024bc6:	b118      	cbz	r0, 8024bd0 <_vfiprintf_r+0x18>
 8024bc8:	6a03      	ldr	r3, [r0, #32]
 8024bca:	b90b      	cbnz	r3, 8024bd0 <_vfiprintf_r+0x18>
 8024bcc:	f7fe face 	bl	802316c <__sinit>
 8024bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024bd2:	07d9      	lsls	r1, r3, #31
 8024bd4:	d405      	bmi.n	8024be2 <_vfiprintf_r+0x2a>
 8024bd6:	89ab      	ldrh	r3, [r5, #12]
 8024bd8:	059a      	lsls	r2, r3, #22
 8024bda:	d402      	bmi.n	8024be2 <_vfiprintf_r+0x2a>
 8024bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024bde:	f7fe fb32 	bl	8023246 <__retarget_lock_acquire_recursive>
 8024be2:	89ab      	ldrh	r3, [r5, #12]
 8024be4:	071b      	lsls	r3, r3, #28
 8024be6:	d501      	bpl.n	8024bec <_vfiprintf_r+0x34>
 8024be8:	692b      	ldr	r3, [r5, #16]
 8024bea:	b99b      	cbnz	r3, 8024c14 <_vfiprintf_r+0x5c>
 8024bec:	4629      	mov	r1, r5
 8024bee:	4630      	mov	r0, r6
 8024bf0:	f000 f938 	bl	8024e64 <__swsetup_r>
 8024bf4:	b170      	cbz	r0, 8024c14 <_vfiprintf_r+0x5c>
 8024bf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024bf8:	07dc      	lsls	r4, r3, #31
 8024bfa:	d504      	bpl.n	8024c06 <_vfiprintf_r+0x4e>
 8024bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024c00:	b01d      	add	sp, #116	@ 0x74
 8024c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c06:	89ab      	ldrh	r3, [r5, #12]
 8024c08:	0598      	lsls	r0, r3, #22
 8024c0a:	d4f7      	bmi.n	8024bfc <_vfiprintf_r+0x44>
 8024c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024c0e:	f7fe fb1b 	bl	8023248 <__retarget_lock_release_recursive>
 8024c12:	e7f3      	b.n	8024bfc <_vfiprintf_r+0x44>
 8024c14:	2300      	movs	r3, #0
 8024c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c18:	2320      	movs	r3, #32
 8024c1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8024c22:	2330      	movs	r3, #48	@ 0x30
 8024c24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024dd4 <_vfiprintf_r+0x21c>
 8024c28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024c2c:	f04f 0901 	mov.w	r9, #1
 8024c30:	4623      	mov	r3, r4
 8024c32:	469a      	mov	sl, r3
 8024c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024c38:	b10a      	cbz	r2, 8024c3e <_vfiprintf_r+0x86>
 8024c3a:	2a25      	cmp	r2, #37	@ 0x25
 8024c3c:	d1f9      	bne.n	8024c32 <_vfiprintf_r+0x7a>
 8024c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8024c42:	d00b      	beq.n	8024c5c <_vfiprintf_r+0xa4>
 8024c44:	465b      	mov	r3, fp
 8024c46:	4622      	mov	r2, r4
 8024c48:	4629      	mov	r1, r5
 8024c4a:	4630      	mov	r0, r6
 8024c4c:	f7ff ffa1 	bl	8024b92 <__sfputs_r>
 8024c50:	3001      	adds	r0, #1
 8024c52:	f000 80a7 	beq.w	8024da4 <_vfiprintf_r+0x1ec>
 8024c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024c58:	445a      	add	r2, fp
 8024c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8024c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8024c60:	2b00      	cmp	r3, #0
 8024c62:	f000 809f 	beq.w	8024da4 <_vfiprintf_r+0x1ec>
 8024c66:	2300      	movs	r3, #0
 8024c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024c70:	f10a 0a01 	add.w	sl, sl, #1
 8024c74:	9304      	str	r3, [sp, #16]
 8024c76:	9307      	str	r3, [sp, #28]
 8024c78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024c7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8024c7e:	4654      	mov	r4, sl
 8024c80:	2205      	movs	r2, #5
 8024c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c86:	4853      	ldr	r0, [pc, #332]	@ (8024dd4 <_vfiprintf_r+0x21c>)
 8024c88:	f7fb fa1a 	bl	80200c0 <memchr>
 8024c8c:	9a04      	ldr	r2, [sp, #16]
 8024c8e:	b9d8      	cbnz	r0, 8024cc8 <_vfiprintf_r+0x110>
 8024c90:	06d1      	lsls	r1, r2, #27
 8024c92:	bf44      	itt	mi
 8024c94:	2320      	movmi	r3, #32
 8024c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024c9a:	0713      	lsls	r3, r2, #28
 8024c9c:	bf44      	itt	mi
 8024c9e:	232b      	movmi	r3, #43	@ 0x2b
 8024ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8024ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8024caa:	d015      	beq.n	8024cd8 <_vfiprintf_r+0x120>
 8024cac:	9a07      	ldr	r2, [sp, #28]
 8024cae:	4654      	mov	r4, sl
 8024cb0:	2000      	movs	r0, #0
 8024cb2:	f04f 0c0a 	mov.w	ip, #10
 8024cb6:	4621      	mov	r1, r4
 8024cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024cbc:	3b30      	subs	r3, #48	@ 0x30
 8024cbe:	2b09      	cmp	r3, #9
 8024cc0:	d94b      	bls.n	8024d5a <_vfiprintf_r+0x1a2>
 8024cc2:	b1b0      	cbz	r0, 8024cf2 <_vfiprintf_r+0x13a>
 8024cc4:	9207      	str	r2, [sp, #28]
 8024cc6:	e014      	b.n	8024cf2 <_vfiprintf_r+0x13a>
 8024cc8:	eba0 0308 	sub.w	r3, r0, r8
 8024ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8024cd0:	4313      	orrs	r3, r2
 8024cd2:	9304      	str	r3, [sp, #16]
 8024cd4:	46a2      	mov	sl, r4
 8024cd6:	e7d2      	b.n	8024c7e <_vfiprintf_r+0xc6>
 8024cd8:	9b03      	ldr	r3, [sp, #12]
 8024cda:	1d19      	adds	r1, r3, #4
 8024cdc:	681b      	ldr	r3, [r3, #0]
 8024cde:	9103      	str	r1, [sp, #12]
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	bfbb      	ittet	lt
 8024ce4:	425b      	neglt	r3, r3
 8024ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8024cea:	9307      	strge	r3, [sp, #28]
 8024cec:	9307      	strlt	r3, [sp, #28]
 8024cee:	bfb8      	it	lt
 8024cf0:	9204      	strlt	r2, [sp, #16]
 8024cf2:	7823      	ldrb	r3, [r4, #0]
 8024cf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8024cf6:	d10a      	bne.n	8024d0e <_vfiprintf_r+0x156>
 8024cf8:	7863      	ldrb	r3, [r4, #1]
 8024cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8024cfc:	d132      	bne.n	8024d64 <_vfiprintf_r+0x1ac>
 8024cfe:	9b03      	ldr	r3, [sp, #12]
 8024d00:	1d1a      	adds	r2, r3, #4
 8024d02:	681b      	ldr	r3, [r3, #0]
 8024d04:	9203      	str	r2, [sp, #12]
 8024d06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024d0a:	3402      	adds	r4, #2
 8024d0c:	9305      	str	r3, [sp, #20]
 8024d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024de4 <_vfiprintf_r+0x22c>
 8024d12:	7821      	ldrb	r1, [r4, #0]
 8024d14:	2203      	movs	r2, #3
 8024d16:	4650      	mov	r0, sl
 8024d18:	f7fb f9d2 	bl	80200c0 <memchr>
 8024d1c:	b138      	cbz	r0, 8024d2e <_vfiprintf_r+0x176>
 8024d1e:	9b04      	ldr	r3, [sp, #16]
 8024d20:	eba0 000a 	sub.w	r0, r0, sl
 8024d24:	2240      	movs	r2, #64	@ 0x40
 8024d26:	4082      	lsls	r2, r0
 8024d28:	4313      	orrs	r3, r2
 8024d2a:	3401      	adds	r4, #1
 8024d2c:	9304      	str	r3, [sp, #16]
 8024d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d32:	4829      	ldr	r0, [pc, #164]	@ (8024dd8 <_vfiprintf_r+0x220>)
 8024d34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024d38:	2206      	movs	r2, #6
 8024d3a:	f7fb f9c1 	bl	80200c0 <memchr>
 8024d3e:	2800      	cmp	r0, #0
 8024d40:	d03f      	beq.n	8024dc2 <_vfiprintf_r+0x20a>
 8024d42:	4b26      	ldr	r3, [pc, #152]	@ (8024ddc <_vfiprintf_r+0x224>)
 8024d44:	bb1b      	cbnz	r3, 8024d8e <_vfiprintf_r+0x1d6>
 8024d46:	9b03      	ldr	r3, [sp, #12]
 8024d48:	3307      	adds	r3, #7
 8024d4a:	f023 0307 	bic.w	r3, r3, #7
 8024d4e:	3308      	adds	r3, #8
 8024d50:	9303      	str	r3, [sp, #12]
 8024d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d54:	443b      	add	r3, r7
 8024d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d58:	e76a      	b.n	8024c30 <_vfiprintf_r+0x78>
 8024d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8024d5e:	460c      	mov	r4, r1
 8024d60:	2001      	movs	r0, #1
 8024d62:	e7a8      	b.n	8024cb6 <_vfiprintf_r+0xfe>
 8024d64:	2300      	movs	r3, #0
 8024d66:	3401      	adds	r4, #1
 8024d68:	9305      	str	r3, [sp, #20]
 8024d6a:	4619      	mov	r1, r3
 8024d6c:	f04f 0c0a 	mov.w	ip, #10
 8024d70:	4620      	mov	r0, r4
 8024d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024d76:	3a30      	subs	r2, #48	@ 0x30
 8024d78:	2a09      	cmp	r2, #9
 8024d7a:	d903      	bls.n	8024d84 <_vfiprintf_r+0x1cc>
 8024d7c:	2b00      	cmp	r3, #0
 8024d7e:	d0c6      	beq.n	8024d0e <_vfiprintf_r+0x156>
 8024d80:	9105      	str	r1, [sp, #20]
 8024d82:	e7c4      	b.n	8024d0e <_vfiprintf_r+0x156>
 8024d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8024d88:	4604      	mov	r4, r0
 8024d8a:	2301      	movs	r3, #1
 8024d8c:	e7f0      	b.n	8024d70 <_vfiprintf_r+0x1b8>
 8024d8e:	ab03      	add	r3, sp, #12
 8024d90:	9300      	str	r3, [sp, #0]
 8024d92:	462a      	mov	r2, r5
 8024d94:	4b12      	ldr	r3, [pc, #72]	@ (8024de0 <_vfiprintf_r+0x228>)
 8024d96:	a904      	add	r1, sp, #16
 8024d98:	4630      	mov	r0, r6
 8024d9a:	f7fd fda3 	bl	80228e4 <_printf_float>
 8024d9e:	4607      	mov	r7, r0
 8024da0:	1c78      	adds	r0, r7, #1
 8024da2:	d1d6      	bne.n	8024d52 <_vfiprintf_r+0x19a>
 8024da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024da6:	07d9      	lsls	r1, r3, #31
 8024da8:	d405      	bmi.n	8024db6 <_vfiprintf_r+0x1fe>
 8024daa:	89ab      	ldrh	r3, [r5, #12]
 8024dac:	059a      	lsls	r2, r3, #22
 8024dae:	d402      	bmi.n	8024db6 <_vfiprintf_r+0x1fe>
 8024db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024db2:	f7fe fa49 	bl	8023248 <__retarget_lock_release_recursive>
 8024db6:	89ab      	ldrh	r3, [r5, #12]
 8024db8:	065b      	lsls	r3, r3, #25
 8024dba:	f53f af1f 	bmi.w	8024bfc <_vfiprintf_r+0x44>
 8024dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024dc0:	e71e      	b.n	8024c00 <_vfiprintf_r+0x48>
 8024dc2:	ab03      	add	r3, sp, #12
 8024dc4:	9300      	str	r3, [sp, #0]
 8024dc6:	462a      	mov	r2, r5
 8024dc8:	4b05      	ldr	r3, [pc, #20]	@ (8024de0 <_vfiprintf_r+0x228>)
 8024dca:	a904      	add	r1, sp, #16
 8024dcc:	4630      	mov	r0, r6
 8024dce:	f7fe f821 	bl	8022e14 <_printf_i>
 8024dd2:	e7e4      	b.n	8024d9e <_vfiprintf_r+0x1e6>
 8024dd4:	080255ff 	.word	0x080255ff
 8024dd8:	08025609 	.word	0x08025609
 8024ddc:	080228e5 	.word	0x080228e5
 8024de0:	08024b93 	.word	0x08024b93
 8024de4:	08025605 	.word	0x08025605

08024de8 <__swbuf_r>:
 8024de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024dea:	460e      	mov	r6, r1
 8024dec:	4614      	mov	r4, r2
 8024dee:	4605      	mov	r5, r0
 8024df0:	b118      	cbz	r0, 8024dfa <__swbuf_r+0x12>
 8024df2:	6a03      	ldr	r3, [r0, #32]
 8024df4:	b90b      	cbnz	r3, 8024dfa <__swbuf_r+0x12>
 8024df6:	f7fe f9b9 	bl	802316c <__sinit>
 8024dfa:	69a3      	ldr	r3, [r4, #24]
 8024dfc:	60a3      	str	r3, [r4, #8]
 8024dfe:	89a3      	ldrh	r3, [r4, #12]
 8024e00:	071a      	lsls	r2, r3, #28
 8024e02:	d501      	bpl.n	8024e08 <__swbuf_r+0x20>
 8024e04:	6923      	ldr	r3, [r4, #16]
 8024e06:	b943      	cbnz	r3, 8024e1a <__swbuf_r+0x32>
 8024e08:	4621      	mov	r1, r4
 8024e0a:	4628      	mov	r0, r5
 8024e0c:	f000 f82a 	bl	8024e64 <__swsetup_r>
 8024e10:	b118      	cbz	r0, 8024e1a <__swbuf_r+0x32>
 8024e12:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024e16:	4638      	mov	r0, r7
 8024e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e1a:	6823      	ldr	r3, [r4, #0]
 8024e1c:	6922      	ldr	r2, [r4, #16]
 8024e1e:	1a98      	subs	r0, r3, r2
 8024e20:	6963      	ldr	r3, [r4, #20]
 8024e22:	b2f6      	uxtb	r6, r6
 8024e24:	4283      	cmp	r3, r0
 8024e26:	4637      	mov	r7, r6
 8024e28:	dc05      	bgt.n	8024e36 <__swbuf_r+0x4e>
 8024e2a:	4621      	mov	r1, r4
 8024e2c:	4628      	mov	r0, r5
 8024e2e:	f7ff f995 	bl	802415c <_fflush_r>
 8024e32:	2800      	cmp	r0, #0
 8024e34:	d1ed      	bne.n	8024e12 <__swbuf_r+0x2a>
 8024e36:	68a3      	ldr	r3, [r4, #8]
 8024e38:	3b01      	subs	r3, #1
 8024e3a:	60a3      	str	r3, [r4, #8]
 8024e3c:	6823      	ldr	r3, [r4, #0]
 8024e3e:	1c5a      	adds	r2, r3, #1
 8024e40:	6022      	str	r2, [r4, #0]
 8024e42:	701e      	strb	r6, [r3, #0]
 8024e44:	6962      	ldr	r2, [r4, #20]
 8024e46:	1c43      	adds	r3, r0, #1
 8024e48:	429a      	cmp	r2, r3
 8024e4a:	d004      	beq.n	8024e56 <__swbuf_r+0x6e>
 8024e4c:	89a3      	ldrh	r3, [r4, #12]
 8024e4e:	07db      	lsls	r3, r3, #31
 8024e50:	d5e1      	bpl.n	8024e16 <__swbuf_r+0x2e>
 8024e52:	2e0a      	cmp	r6, #10
 8024e54:	d1df      	bne.n	8024e16 <__swbuf_r+0x2e>
 8024e56:	4621      	mov	r1, r4
 8024e58:	4628      	mov	r0, r5
 8024e5a:	f7ff f97f 	bl	802415c <_fflush_r>
 8024e5e:	2800      	cmp	r0, #0
 8024e60:	d0d9      	beq.n	8024e16 <__swbuf_r+0x2e>
 8024e62:	e7d6      	b.n	8024e12 <__swbuf_r+0x2a>

08024e64 <__swsetup_r>:
 8024e64:	b538      	push	{r3, r4, r5, lr}
 8024e66:	4b29      	ldr	r3, [pc, #164]	@ (8024f0c <__swsetup_r+0xa8>)
 8024e68:	4605      	mov	r5, r0
 8024e6a:	6818      	ldr	r0, [r3, #0]
 8024e6c:	460c      	mov	r4, r1
 8024e6e:	b118      	cbz	r0, 8024e78 <__swsetup_r+0x14>
 8024e70:	6a03      	ldr	r3, [r0, #32]
 8024e72:	b90b      	cbnz	r3, 8024e78 <__swsetup_r+0x14>
 8024e74:	f7fe f97a 	bl	802316c <__sinit>
 8024e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e7c:	0719      	lsls	r1, r3, #28
 8024e7e:	d422      	bmi.n	8024ec6 <__swsetup_r+0x62>
 8024e80:	06da      	lsls	r2, r3, #27
 8024e82:	d407      	bmi.n	8024e94 <__swsetup_r+0x30>
 8024e84:	2209      	movs	r2, #9
 8024e86:	602a      	str	r2, [r5, #0]
 8024e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024e8c:	81a3      	strh	r3, [r4, #12]
 8024e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024e92:	e033      	b.n	8024efc <__swsetup_r+0x98>
 8024e94:	0758      	lsls	r0, r3, #29
 8024e96:	d512      	bpl.n	8024ebe <__swsetup_r+0x5a>
 8024e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024e9a:	b141      	cbz	r1, 8024eae <__swsetup_r+0x4a>
 8024e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024ea0:	4299      	cmp	r1, r3
 8024ea2:	d002      	beq.n	8024eaa <__swsetup_r+0x46>
 8024ea4:	4628      	mov	r0, r5
 8024ea6:	f7ff fddb 	bl	8024a60 <_free_r>
 8024eaa:	2300      	movs	r3, #0
 8024eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8024eae:	89a3      	ldrh	r3, [r4, #12]
 8024eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024eb4:	81a3      	strh	r3, [r4, #12]
 8024eb6:	2300      	movs	r3, #0
 8024eb8:	6063      	str	r3, [r4, #4]
 8024eba:	6923      	ldr	r3, [r4, #16]
 8024ebc:	6023      	str	r3, [r4, #0]
 8024ebe:	89a3      	ldrh	r3, [r4, #12]
 8024ec0:	f043 0308 	orr.w	r3, r3, #8
 8024ec4:	81a3      	strh	r3, [r4, #12]
 8024ec6:	6923      	ldr	r3, [r4, #16]
 8024ec8:	b94b      	cbnz	r3, 8024ede <__swsetup_r+0x7a>
 8024eca:	89a3      	ldrh	r3, [r4, #12]
 8024ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024ed4:	d003      	beq.n	8024ede <__swsetup_r+0x7a>
 8024ed6:	4621      	mov	r1, r4
 8024ed8:	4628      	mov	r0, r5
 8024eda:	f000 f83f 	bl	8024f5c <__smakebuf_r>
 8024ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ee2:	f013 0201 	ands.w	r2, r3, #1
 8024ee6:	d00a      	beq.n	8024efe <__swsetup_r+0x9a>
 8024ee8:	2200      	movs	r2, #0
 8024eea:	60a2      	str	r2, [r4, #8]
 8024eec:	6962      	ldr	r2, [r4, #20]
 8024eee:	4252      	negs	r2, r2
 8024ef0:	61a2      	str	r2, [r4, #24]
 8024ef2:	6922      	ldr	r2, [r4, #16]
 8024ef4:	b942      	cbnz	r2, 8024f08 <__swsetup_r+0xa4>
 8024ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024efa:	d1c5      	bne.n	8024e88 <__swsetup_r+0x24>
 8024efc:	bd38      	pop	{r3, r4, r5, pc}
 8024efe:	0799      	lsls	r1, r3, #30
 8024f00:	bf58      	it	pl
 8024f02:	6962      	ldrpl	r2, [r4, #20]
 8024f04:	60a2      	str	r2, [r4, #8]
 8024f06:	e7f4      	b.n	8024ef2 <__swsetup_r+0x8e>
 8024f08:	2000      	movs	r0, #0
 8024f0a:	e7f7      	b.n	8024efc <__swsetup_r+0x98>
 8024f0c:	20000018 	.word	0x20000018

08024f10 <__swhatbuf_r>:
 8024f10:	b570      	push	{r4, r5, r6, lr}
 8024f12:	460c      	mov	r4, r1
 8024f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f18:	2900      	cmp	r1, #0
 8024f1a:	b096      	sub	sp, #88	@ 0x58
 8024f1c:	4615      	mov	r5, r2
 8024f1e:	461e      	mov	r6, r3
 8024f20:	da0d      	bge.n	8024f3e <__swhatbuf_r+0x2e>
 8024f22:	89a3      	ldrh	r3, [r4, #12]
 8024f24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024f28:	f04f 0100 	mov.w	r1, #0
 8024f2c:	bf14      	ite	ne
 8024f2e:	2340      	movne	r3, #64	@ 0x40
 8024f30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024f34:	2000      	movs	r0, #0
 8024f36:	6031      	str	r1, [r6, #0]
 8024f38:	602b      	str	r3, [r5, #0]
 8024f3a:	b016      	add	sp, #88	@ 0x58
 8024f3c:	bd70      	pop	{r4, r5, r6, pc}
 8024f3e:	466a      	mov	r2, sp
 8024f40:	f000 f848 	bl	8024fd4 <_fstat_r>
 8024f44:	2800      	cmp	r0, #0
 8024f46:	dbec      	blt.n	8024f22 <__swhatbuf_r+0x12>
 8024f48:	9901      	ldr	r1, [sp, #4]
 8024f4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024f4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024f52:	4259      	negs	r1, r3
 8024f54:	4159      	adcs	r1, r3
 8024f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024f5a:	e7eb      	b.n	8024f34 <__swhatbuf_r+0x24>

08024f5c <__smakebuf_r>:
 8024f5c:	898b      	ldrh	r3, [r1, #12]
 8024f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024f60:	079d      	lsls	r5, r3, #30
 8024f62:	4606      	mov	r6, r0
 8024f64:	460c      	mov	r4, r1
 8024f66:	d507      	bpl.n	8024f78 <__smakebuf_r+0x1c>
 8024f68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024f6c:	6023      	str	r3, [r4, #0]
 8024f6e:	6123      	str	r3, [r4, #16]
 8024f70:	2301      	movs	r3, #1
 8024f72:	6163      	str	r3, [r4, #20]
 8024f74:	b003      	add	sp, #12
 8024f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f78:	ab01      	add	r3, sp, #4
 8024f7a:	466a      	mov	r2, sp
 8024f7c:	f7ff ffc8 	bl	8024f10 <__swhatbuf_r>
 8024f80:	9f00      	ldr	r7, [sp, #0]
 8024f82:	4605      	mov	r5, r0
 8024f84:	4639      	mov	r1, r7
 8024f86:	4630      	mov	r0, r6
 8024f88:	f7fe ffe4 	bl	8023f54 <_malloc_r>
 8024f8c:	b948      	cbnz	r0, 8024fa2 <__smakebuf_r+0x46>
 8024f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f92:	059a      	lsls	r2, r3, #22
 8024f94:	d4ee      	bmi.n	8024f74 <__smakebuf_r+0x18>
 8024f96:	f023 0303 	bic.w	r3, r3, #3
 8024f9a:	f043 0302 	orr.w	r3, r3, #2
 8024f9e:	81a3      	strh	r3, [r4, #12]
 8024fa0:	e7e2      	b.n	8024f68 <__smakebuf_r+0xc>
 8024fa2:	89a3      	ldrh	r3, [r4, #12]
 8024fa4:	6020      	str	r0, [r4, #0]
 8024fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024faa:	81a3      	strh	r3, [r4, #12]
 8024fac:	9b01      	ldr	r3, [sp, #4]
 8024fae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8024fb2:	b15b      	cbz	r3, 8024fcc <__smakebuf_r+0x70>
 8024fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024fb8:	4630      	mov	r0, r6
 8024fba:	f000 f81d 	bl	8024ff8 <_isatty_r>
 8024fbe:	b128      	cbz	r0, 8024fcc <__smakebuf_r+0x70>
 8024fc0:	89a3      	ldrh	r3, [r4, #12]
 8024fc2:	f023 0303 	bic.w	r3, r3, #3
 8024fc6:	f043 0301 	orr.w	r3, r3, #1
 8024fca:	81a3      	strh	r3, [r4, #12]
 8024fcc:	89a3      	ldrh	r3, [r4, #12]
 8024fce:	431d      	orrs	r5, r3
 8024fd0:	81a5      	strh	r5, [r4, #12]
 8024fd2:	e7cf      	b.n	8024f74 <__smakebuf_r+0x18>

08024fd4 <_fstat_r>:
 8024fd4:	b538      	push	{r3, r4, r5, lr}
 8024fd6:	4d07      	ldr	r5, [pc, #28]	@ (8024ff4 <_fstat_r+0x20>)
 8024fd8:	2300      	movs	r3, #0
 8024fda:	4604      	mov	r4, r0
 8024fdc:	4608      	mov	r0, r1
 8024fde:	4611      	mov	r1, r2
 8024fe0:	602b      	str	r3, [r5, #0]
 8024fe2:	f7fc f978 	bl	80212d6 <_fstat>
 8024fe6:	1c43      	adds	r3, r0, #1
 8024fe8:	d102      	bne.n	8024ff0 <_fstat_r+0x1c>
 8024fea:	682b      	ldr	r3, [r5, #0]
 8024fec:	b103      	cbz	r3, 8024ff0 <_fstat_r+0x1c>
 8024fee:	6023      	str	r3, [r4, #0]
 8024ff0:	bd38      	pop	{r3, r4, r5, pc}
 8024ff2:	bf00      	nop
 8024ff4:	20000340 	.word	0x20000340

08024ff8 <_isatty_r>:
 8024ff8:	b538      	push	{r3, r4, r5, lr}
 8024ffa:	4d06      	ldr	r5, [pc, #24]	@ (8025014 <_isatty_r+0x1c>)
 8024ffc:	2300      	movs	r3, #0
 8024ffe:	4604      	mov	r4, r0
 8025000:	4608      	mov	r0, r1
 8025002:	602b      	str	r3, [r5, #0]
 8025004:	f7fc f977 	bl	80212f6 <_isatty>
 8025008:	1c43      	adds	r3, r0, #1
 802500a:	d102      	bne.n	8025012 <_isatty_r+0x1a>
 802500c:	682b      	ldr	r3, [r5, #0]
 802500e:	b103      	cbz	r3, 8025012 <_isatty_r+0x1a>
 8025010:	6023      	str	r3, [r4, #0]
 8025012:	bd38      	pop	{r3, r4, r5, pc}
 8025014:	20000340 	.word	0x20000340

08025018 <_raise_r>:
 8025018:	291f      	cmp	r1, #31
 802501a:	b538      	push	{r3, r4, r5, lr}
 802501c:	4605      	mov	r5, r0
 802501e:	460c      	mov	r4, r1
 8025020:	d904      	bls.n	802502c <_raise_r+0x14>
 8025022:	2316      	movs	r3, #22
 8025024:	6003      	str	r3, [r0, #0]
 8025026:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802502a:	bd38      	pop	{r3, r4, r5, pc}
 802502c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802502e:	b112      	cbz	r2, 8025036 <_raise_r+0x1e>
 8025030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025034:	b94b      	cbnz	r3, 802504a <_raise_r+0x32>
 8025036:	4628      	mov	r0, r5
 8025038:	f000 f830 	bl	802509c <_getpid_r>
 802503c:	4622      	mov	r2, r4
 802503e:	4601      	mov	r1, r0
 8025040:	4628      	mov	r0, r5
 8025042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025046:	f000 b817 	b.w	8025078 <_kill_r>
 802504a:	2b01      	cmp	r3, #1
 802504c:	d00a      	beq.n	8025064 <_raise_r+0x4c>
 802504e:	1c59      	adds	r1, r3, #1
 8025050:	d103      	bne.n	802505a <_raise_r+0x42>
 8025052:	2316      	movs	r3, #22
 8025054:	6003      	str	r3, [r0, #0]
 8025056:	2001      	movs	r0, #1
 8025058:	e7e7      	b.n	802502a <_raise_r+0x12>
 802505a:	2100      	movs	r1, #0
 802505c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8025060:	4620      	mov	r0, r4
 8025062:	4798      	blx	r3
 8025064:	2000      	movs	r0, #0
 8025066:	e7e0      	b.n	802502a <_raise_r+0x12>

08025068 <raise>:
 8025068:	4b02      	ldr	r3, [pc, #8]	@ (8025074 <raise+0xc>)
 802506a:	4601      	mov	r1, r0
 802506c:	6818      	ldr	r0, [r3, #0]
 802506e:	f7ff bfd3 	b.w	8025018 <_raise_r>
 8025072:	bf00      	nop
 8025074:	20000018 	.word	0x20000018

08025078 <_kill_r>:
 8025078:	b538      	push	{r3, r4, r5, lr}
 802507a:	4d07      	ldr	r5, [pc, #28]	@ (8025098 <_kill_r+0x20>)
 802507c:	2300      	movs	r3, #0
 802507e:	4604      	mov	r4, r0
 8025080:	4608      	mov	r0, r1
 8025082:	4611      	mov	r1, r2
 8025084:	602b      	str	r3, [r5, #0]
 8025086:	f7fc f8c6 	bl	8021216 <_kill>
 802508a:	1c43      	adds	r3, r0, #1
 802508c:	d102      	bne.n	8025094 <_kill_r+0x1c>
 802508e:	682b      	ldr	r3, [r5, #0]
 8025090:	b103      	cbz	r3, 8025094 <_kill_r+0x1c>
 8025092:	6023      	str	r3, [r4, #0]
 8025094:	bd38      	pop	{r3, r4, r5, pc}
 8025096:	bf00      	nop
 8025098:	20000340 	.word	0x20000340

0802509c <_getpid_r>:
 802509c:	f7fc b8b3 	b.w	8021206 <_getpid>

080250a0 <_init>:
 80250a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250a2:	bf00      	nop
 80250a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80250a6:	bc08      	pop	{r3}
 80250a8:	469e      	mov	lr, r3
 80250aa:	4770      	bx	lr

080250ac <_fini>:
 80250ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250ae:	bf00      	nop
 80250b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80250b2:	bc08      	pop	{r3}
 80250b4:	469e      	mov	lr, r3
 80250b6:	4770      	bx	lr
