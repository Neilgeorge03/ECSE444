
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016308  08010000  08010000  00020000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08026308  08026308  00036308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080268b4  080268b4  000401dc  2**0
                  CONTENTS
  4 .ARM          00000000  080268b4  080268b4  000401dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080268b4  080268b4  000401dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080268b4  080268b4  000368b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080268b8  080268b8  000368b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080268bc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  08026a98  000401dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08026a98  00040210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a397  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213f  00000000  00000000  0004a5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0004c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  0004ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a70f  00000000  00000000  0004d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000952d  00000000  00000000  00077b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd7d8  00000000  00000000  000810a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0017e87c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002994  00000000  00000000  0017e944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000341f  00000000  00000000  001812d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	200001dc 	.word	0x200001dc
 801001c:	00000000 	.word	0x00000000
 8010020:	080262f0 	.word	0x080262f0

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	200001e0 	.word	0x200001e0
 801003c:	080262f0 	.word	0x080262f0
	...

08020000 <KalmanFilter>:
.align 16

.global KalmanFilter

KalmanFilter:
	push {lr}
 8020000:	b500      	push	{lr}
    vpush {s16-s21}
 8020002:	ed2d 8a06 	vpush	{s16-s21}
    // s0 contains measurement
    vldr s16, [r0, #0]		// q
 8020006:	ed90 8a00 	vldr	s16, [r0]
    vldr s17, [r0, #4]		// r
 802000a:	edd0 8a01 	vldr	s17, [r0, #4]
    vldr s18, [r0, #8]		// x
 802000e:	ed90 9a02 	vldr	s18, [r0, #8]
    vldr s19, [r0, #12]		// p
 8020012:	edd0 9a03 	vldr	s19, [r0, #12]
    vldr s20, [r0, #16]		// k
 8020016:	ed90 aa04 	vldr	s20, [r0, #16]
    vsub.f32 s21, s21, s21	// -> 0.0
 802001a:	ee7a aaea 	vsub.f32	s21, s21, s21

    vadd.f32 s19, s19, s16	// self.p = self.p + self.q
 802001e:	ee79 9a88 	vadd.f32	s19, s19, s16
	vmrs r1, FPSCR
 8020022:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020026:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802002a:	d140      	bne.n	80200ae <overflow_handler>

    vadd.f32 s20, s19, s17	// self.k = self.p + self.r
 802002c:	ee39 aaa8 	vadd.f32	s20, s19, s17
    vmrs r1, FPSCR
 8020030:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020034:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 8020038:	d139      	bne.n	80200ae <overflow_handler>

    // handle zero div error (see epsilon method)
    vcmp.f32 s20, #0
 802003a:	eeb5 aa40 	vcmp.f32	s20, #0.0
    vmrs APSR_nzcv, FPSCR
 802003e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    beq div_by_zero_handler
 8020042:	d031      	beq.n	80200a8 <div_by_zero_handler>


    vdiv.f32 s20, s19, s20 // self.k = selp.p / self.k
 8020044:	ee89 aa8a 	vdiv.f32	s20, s19, s20
    vmrs r1, FPSCR
 8020048:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 802004c:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 8020050:	d12d      	bne.n	80200ae <overflow_handler>

    vsub.f32 s21, s0, s18  // y = measurement - self.x
 8020052:	ee70 aa49 	vsub.f32	s21, s0, s18
    vmrs r1, FPSCR
 8020056:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 802005a:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802005e:	d126      	bne.n	80200ae <overflow_handler>

    vmla.f32 s18, s20, s21 // self.x = self.x + self.k * y
 8020060:	ee0a 9a2a 	vmla.f32	s18, s20, s21
    vmrs r1, FPSCR
 8020064:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020068:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802006c:	d11f      	bne.n	80200ae <overflow_handler>

    vmov.f32 s21, #1.0 // y = 1 check if load 1 works
 802006e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    vsub.f32 s21, s21, s20 // y = 1 - self.k
 8020072:	ee7a aaca 	vsub.f32	s21, s21, s20
    vmrs r1, FPSCR
 8020076:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 802007a:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802007e:	d116      	bne.n	80200ae <overflow_handler>

    vmul.f32 s19, s21, s19 // self.p = y * self.p
 8020080:	ee6a 9aa9 	vmul.f32	s19, s21, s19
    vmrs r1, FPSCR
 8020084:	eef1 1a10 	vmrs	r1, fpscr
	tst r1, #0b1111
 8020088:	f011 0f0f 	tst.w	r1, #15
	bne overflow_handler
 802008c:	d10f      	bne.n	80200ae <overflow_handler>

    vstr s16, [r0]      // q
 802008e:	ed80 8a00 	vstr	s16, [r0]
    vstr s17, [r0, #4]  // r
 8020092:	edc0 8a01 	vstr	s17, [r0, #4]
    vstr s18, [r0, #8]  // x
 8020096:	ed80 9a02 	vstr	s18, [r0, #8]
    vstr s19, [r0, #12] // p
 802009a:	edc0 9a03 	vstr	s19, [r0, #12]
    vstr s20, [r0, #16] // k
 802009e:	ed80 aa04 	vstr	s20, [r0, #16]
    mov r0, #0 			// If success, return code 0
 80200a2:	f04f 0000 	mov.w	r0, #0
    B return
 80200a6:	e005      	b.n	80200b4 <return>

080200a8 <div_by_zero_handler>:

div_by_zero_handler:
	mov r0, #1
 80200a8:	f04f 0001 	mov.w	r0, #1
	B return
 80200ac:	e002      	b.n	80200b4 <return>

080200ae <overflow_handler>:

overflow_handler:
	mov r0, #2
 80200ae:	f04f 0002 	mov.w	r0, #2
	B return
 80200b2:	e7ff      	b.n	80200b4 <return>

080200b4 <return>:

return:
	vpop {s16-s21}
 80200b4:	ecbd 8a06 	vpop	{s16-s21}
    bx lr // return to C
 80200b8:	4770      	bx	lr
 80200ba:	bf00      	nop

080200bc <strlen>:
 80200bc:	4603      	mov	r3, r0
 80200be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80200c2:	2a00      	cmp	r2, #0
 80200c4:	d1fb      	bne.n	80200be <strlen+0x2>
 80200c6:	1a18      	subs	r0, r3, r0
 80200c8:	3801      	subs	r0, #1
 80200ca:	4770      	bx	lr
 80200cc:	0000      	movs	r0, r0
	...

080200d0 <memchr>:
 80200d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80200d4:	2a10      	cmp	r2, #16
 80200d6:	db2b      	blt.n	8020130 <memchr+0x60>
 80200d8:	f010 0f07 	tst.w	r0, #7
 80200dc:	d008      	beq.n	80200f0 <memchr+0x20>
 80200de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200e2:	3a01      	subs	r2, #1
 80200e4:	428b      	cmp	r3, r1
 80200e6:	d02d      	beq.n	8020144 <memchr+0x74>
 80200e8:	f010 0f07 	tst.w	r0, #7
 80200ec:	b342      	cbz	r2, 8020140 <memchr+0x70>
 80200ee:	d1f6      	bne.n	80200de <memchr+0xe>
 80200f0:	b4f0      	push	{r4, r5, r6, r7}
 80200f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80200f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80200fa:	f022 0407 	bic.w	r4, r2, #7
 80200fe:	f07f 0700 	mvns.w	r7, #0
 8020102:	2300      	movs	r3, #0
 8020104:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020108:	3c08      	subs	r4, #8
 802010a:	ea85 0501 	eor.w	r5, r5, r1
 802010e:	ea86 0601 	eor.w	r6, r6, r1
 8020112:	fa85 f547 	uadd8	r5, r5, r7
 8020116:	faa3 f587 	sel	r5, r3, r7
 802011a:	fa86 f647 	uadd8	r6, r6, r7
 802011e:	faa5 f687 	sel	r6, r5, r7
 8020122:	b98e      	cbnz	r6, 8020148 <memchr+0x78>
 8020124:	d1ee      	bne.n	8020104 <memchr+0x34>
 8020126:	bcf0      	pop	{r4, r5, r6, r7}
 8020128:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802012c:	f002 0207 	and.w	r2, r2, #7
 8020130:	b132      	cbz	r2, 8020140 <memchr+0x70>
 8020132:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020136:	3a01      	subs	r2, #1
 8020138:	ea83 0301 	eor.w	r3, r3, r1
 802013c:	b113      	cbz	r3, 8020144 <memchr+0x74>
 802013e:	d1f8      	bne.n	8020132 <memchr+0x62>
 8020140:	2000      	movs	r0, #0
 8020142:	4770      	bx	lr
 8020144:	3801      	subs	r0, #1
 8020146:	4770      	bx	lr
 8020148:	2d00      	cmp	r5, #0
 802014a:	bf06      	itte	eq
 802014c:	4635      	moveq	r5, r6
 802014e:	3803      	subeq	r0, #3
 8020150:	3807      	subne	r0, #7
 8020152:	f015 0f01 	tst.w	r5, #1
 8020156:	d107      	bne.n	8020168 <memchr+0x98>
 8020158:	3001      	adds	r0, #1
 802015a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802015e:	bf02      	ittt	eq
 8020160:	3001      	addeq	r0, #1
 8020162:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020166:	3001      	addeq	r0, #1
 8020168:	bcf0      	pop	{r4, r5, r6, r7}
 802016a:	3801      	subs	r0, #1
 802016c:	4770      	bx	lr
 802016e:	bf00      	nop

08020170 <__aeabi_drsub>:
 8020170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020174:	e002      	b.n	802017c <__adddf3>
 8020176:	bf00      	nop

08020178 <__aeabi_dsub>:
 8020178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802017c <__adddf3>:
 802017c:	b530      	push	{r4, r5, lr}
 802017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020186:	ea94 0f05 	teq	r4, r5
 802018a:	bf08      	it	eq
 802018c:	ea90 0f02 	teqeq	r0, r2
 8020190:	bf1f      	itttt	ne
 8020192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020196:	ea55 0c02 	orrsne.w	ip, r5, r2
 802019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80201a2:	f000 80e2 	beq.w	802036a <__adddf3+0x1ee>
 80201a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80201aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80201ae:	bfb8      	it	lt
 80201b0:	426d      	neglt	r5, r5
 80201b2:	dd0c      	ble.n	80201ce <__adddf3+0x52>
 80201b4:	442c      	add	r4, r5
 80201b6:	ea80 0202 	eor.w	r2, r0, r2
 80201ba:	ea81 0303 	eor.w	r3, r1, r3
 80201be:	ea82 0000 	eor.w	r0, r2, r0
 80201c2:	ea83 0101 	eor.w	r1, r3, r1
 80201c6:	ea80 0202 	eor.w	r2, r0, r2
 80201ca:	ea81 0303 	eor.w	r3, r1, r3
 80201ce:	2d36      	cmp	r5, #54	; 0x36
 80201d0:	bf88      	it	hi
 80201d2:	bd30      	pophi	{r4, r5, pc}
 80201d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80201d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80201dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80201e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80201e4:	d002      	beq.n	80201ec <__adddf3+0x70>
 80201e6:	4240      	negs	r0, r0
 80201e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80201ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80201f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80201f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80201f8:	d002      	beq.n	8020200 <__adddf3+0x84>
 80201fa:	4252      	negs	r2, r2
 80201fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020200:	ea94 0f05 	teq	r4, r5
 8020204:	f000 80a7 	beq.w	8020356 <__adddf3+0x1da>
 8020208:	f1a4 0401 	sub.w	r4, r4, #1
 802020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020210:	db0d      	blt.n	802022e <__adddf3+0xb2>
 8020212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020216:	fa22 f205 	lsr.w	r2, r2, r5
 802021a:	1880      	adds	r0, r0, r2
 802021c:	f141 0100 	adc.w	r1, r1, #0
 8020220:	fa03 f20e 	lsl.w	r2, r3, lr
 8020224:	1880      	adds	r0, r0, r2
 8020226:	fa43 f305 	asr.w	r3, r3, r5
 802022a:	4159      	adcs	r1, r3
 802022c:	e00e      	b.n	802024c <__adddf3+0xd0>
 802022e:	f1a5 0520 	sub.w	r5, r5, #32
 8020232:	f10e 0e20 	add.w	lr, lr, #32
 8020236:	2a01      	cmp	r2, #1
 8020238:	fa03 fc0e 	lsl.w	ip, r3, lr
 802023c:	bf28      	it	cs
 802023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020242:	fa43 f305 	asr.w	r3, r3, r5
 8020246:	18c0      	adds	r0, r0, r3
 8020248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020250:	d507      	bpl.n	8020262 <__adddf3+0xe6>
 8020252:	f04f 0e00 	mov.w	lr, #0
 8020256:	f1dc 0c00 	rsbs	ip, ip, #0
 802025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020266:	d31b      	bcc.n	80202a0 <__adddf3+0x124>
 8020268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802026c:	d30c      	bcc.n	8020288 <__adddf3+0x10c>
 802026e:	0849      	lsrs	r1, r1, #1
 8020270:	ea5f 0030 	movs.w	r0, r0, rrx
 8020274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020278:	f104 0401 	add.w	r4, r4, #1
 802027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020284:	f080 809a 	bcs.w	80203bc <__adddf3+0x240>
 8020288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802028c:	bf08      	it	eq
 802028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020292:	f150 0000 	adcs.w	r0, r0, #0
 8020296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802029a:	ea41 0105 	orr.w	r1, r1, r5
 802029e:	bd30      	pop	{r4, r5, pc}
 80202a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80202a4:	4140      	adcs	r0, r0
 80202a6:	eb41 0101 	adc.w	r1, r1, r1
 80202aa:	3c01      	subs	r4, #1
 80202ac:	bf28      	it	cs
 80202ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80202b2:	d2e9      	bcs.n	8020288 <__adddf3+0x10c>
 80202b4:	f091 0f00 	teq	r1, #0
 80202b8:	bf04      	itt	eq
 80202ba:	4601      	moveq	r1, r0
 80202bc:	2000      	moveq	r0, #0
 80202be:	fab1 f381 	clz	r3, r1
 80202c2:	bf08      	it	eq
 80202c4:	3320      	addeq	r3, #32
 80202c6:	f1a3 030b 	sub.w	r3, r3, #11
 80202ca:	f1b3 0220 	subs.w	r2, r3, #32
 80202ce:	da0c      	bge.n	80202ea <__adddf3+0x16e>
 80202d0:	320c      	adds	r2, #12
 80202d2:	dd08      	ble.n	80202e6 <__adddf3+0x16a>
 80202d4:	f102 0c14 	add.w	ip, r2, #20
 80202d8:	f1c2 020c 	rsb	r2, r2, #12
 80202dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80202e0:	fa21 f102 	lsr.w	r1, r1, r2
 80202e4:	e00c      	b.n	8020300 <__adddf3+0x184>
 80202e6:	f102 0214 	add.w	r2, r2, #20
 80202ea:	bfd8      	it	le
 80202ec:	f1c2 0c20 	rsble	ip, r2, #32
 80202f0:	fa01 f102 	lsl.w	r1, r1, r2
 80202f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80202f8:	bfdc      	itt	le
 80202fa:	ea41 010c 	orrle.w	r1, r1, ip
 80202fe:	4090      	lslle	r0, r2
 8020300:	1ae4      	subs	r4, r4, r3
 8020302:	bfa2      	ittt	ge
 8020304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020308:	4329      	orrge	r1, r5
 802030a:	bd30      	popge	{r4, r5, pc}
 802030c:	ea6f 0404 	mvn.w	r4, r4
 8020310:	3c1f      	subs	r4, #31
 8020312:	da1c      	bge.n	802034e <__adddf3+0x1d2>
 8020314:	340c      	adds	r4, #12
 8020316:	dc0e      	bgt.n	8020336 <__adddf3+0x1ba>
 8020318:	f104 0414 	add.w	r4, r4, #20
 802031c:	f1c4 0220 	rsb	r2, r4, #32
 8020320:	fa20 f004 	lsr.w	r0, r0, r4
 8020324:	fa01 f302 	lsl.w	r3, r1, r2
 8020328:	ea40 0003 	orr.w	r0, r0, r3
 802032c:	fa21 f304 	lsr.w	r3, r1, r4
 8020330:	ea45 0103 	orr.w	r1, r5, r3
 8020334:	bd30      	pop	{r4, r5, pc}
 8020336:	f1c4 040c 	rsb	r4, r4, #12
 802033a:	f1c4 0220 	rsb	r2, r4, #32
 802033e:	fa20 f002 	lsr.w	r0, r0, r2
 8020342:	fa01 f304 	lsl.w	r3, r1, r4
 8020346:	ea40 0003 	orr.w	r0, r0, r3
 802034a:	4629      	mov	r1, r5
 802034c:	bd30      	pop	{r4, r5, pc}
 802034e:	fa21 f004 	lsr.w	r0, r1, r4
 8020352:	4629      	mov	r1, r5
 8020354:	bd30      	pop	{r4, r5, pc}
 8020356:	f094 0f00 	teq	r4, #0
 802035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802035e:	bf06      	itte	eq
 8020360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020364:	3401      	addeq	r4, #1
 8020366:	3d01      	subne	r5, #1
 8020368:	e74e      	b.n	8020208 <__adddf3+0x8c>
 802036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802036e:	bf18      	it	ne
 8020370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020374:	d029      	beq.n	80203ca <__adddf3+0x24e>
 8020376:	ea94 0f05 	teq	r4, r5
 802037a:	bf08      	it	eq
 802037c:	ea90 0f02 	teqeq	r0, r2
 8020380:	d005      	beq.n	802038e <__adddf3+0x212>
 8020382:	ea54 0c00 	orrs.w	ip, r4, r0
 8020386:	bf04      	itt	eq
 8020388:	4619      	moveq	r1, r3
 802038a:	4610      	moveq	r0, r2
 802038c:	bd30      	pop	{r4, r5, pc}
 802038e:	ea91 0f03 	teq	r1, r3
 8020392:	bf1e      	ittt	ne
 8020394:	2100      	movne	r1, #0
 8020396:	2000      	movne	r0, #0
 8020398:	bd30      	popne	{r4, r5, pc}
 802039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802039e:	d105      	bne.n	80203ac <__adddf3+0x230>
 80203a0:	0040      	lsls	r0, r0, #1
 80203a2:	4149      	adcs	r1, r1
 80203a4:	bf28      	it	cs
 80203a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80203aa:	bd30      	pop	{r4, r5, pc}
 80203ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80203b0:	bf3c      	itt	cc
 80203b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80203b6:	bd30      	popcc	{r4, r5, pc}
 80203b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80203c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80203c4:	f04f 0000 	mov.w	r0, #0
 80203c8:	bd30      	pop	{r4, r5, pc}
 80203ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80203ce:	bf1a      	itte	ne
 80203d0:	4619      	movne	r1, r3
 80203d2:	4610      	movne	r0, r2
 80203d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80203d8:	bf1c      	itt	ne
 80203da:	460b      	movne	r3, r1
 80203dc:	4602      	movne	r2, r0
 80203de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80203e2:	bf06      	itte	eq
 80203e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80203e8:	ea91 0f03 	teqeq	r1, r3
 80203ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80203f0:	bd30      	pop	{r4, r5, pc}
 80203f2:	bf00      	nop

080203f4 <__aeabi_ui2d>:
 80203f4:	f090 0f00 	teq	r0, #0
 80203f8:	bf04      	itt	eq
 80203fa:	2100      	moveq	r1, #0
 80203fc:	4770      	bxeq	lr
 80203fe:	b530      	push	{r4, r5, lr}
 8020400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020408:	f04f 0500 	mov.w	r5, #0
 802040c:	f04f 0100 	mov.w	r1, #0
 8020410:	e750      	b.n	80202b4 <__adddf3+0x138>
 8020412:	bf00      	nop

08020414 <__aeabi_i2d>:
 8020414:	f090 0f00 	teq	r0, #0
 8020418:	bf04      	itt	eq
 802041a:	2100      	moveq	r1, #0
 802041c:	4770      	bxeq	lr
 802041e:	b530      	push	{r4, r5, lr}
 8020420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802042c:	bf48      	it	mi
 802042e:	4240      	negmi	r0, r0
 8020430:	f04f 0100 	mov.w	r1, #0
 8020434:	e73e      	b.n	80202b4 <__adddf3+0x138>
 8020436:	bf00      	nop

08020438 <__aeabi_f2d>:
 8020438:	0042      	lsls	r2, r0, #1
 802043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020446:	bf1f      	itttt	ne
 8020448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020454:	4770      	bxne	lr
 8020456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802045a:	bf08      	it	eq
 802045c:	4770      	bxeq	lr
 802045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020462:	bf04      	itt	eq
 8020464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020468:	4770      	bxeq	lr
 802046a:	b530      	push	{r4, r5, lr}
 802046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020478:	e71c      	b.n	80202b4 <__adddf3+0x138>
 802047a:	bf00      	nop

0802047c <__aeabi_ul2d>:
 802047c:	ea50 0201 	orrs.w	r2, r0, r1
 8020480:	bf08      	it	eq
 8020482:	4770      	bxeq	lr
 8020484:	b530      	push	{r4, r5, lr}
 8020486:	f04f 0500 	mov.w	r5, #0
 802048a:	e00a      	b.n	80204a2 <__aeabi_l2d+0x16>

0802048c <__aeabi_l2d>:
 802048c:	ea50 0201 	orrs.w	r2, r0, r1
 8020490:	bf08      	it	eq
 8020492:	4770      	bxeq	lr
 8020494:	b530      	push	{r4, r5, lr}
 8020496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802049a:	d502      	bpl.n	80204a2 <__aeabi_l2d+0x16>
 802049c:	4240      	negs	r0, r0
 802049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80204a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80204a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80204aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80204ae:	f43f aed8 	beq.w	8020262 <__adddf3+0xe6>
 80204b2:	f04f 0203 	mov.w	r2, #3
 80204b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80204ba:	bf18      	it	ne
 80204bc:	3203      	addne	r2, #3
 80204be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80204c2:	bf18      	it	ne
 80204c4:	3203      	addne	r2, #3
 80204c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80204ca:	f1c2 0320 	rsb	r3, r2, #32
 80204ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80204d2:	fa20 f002 	lsr.w	r0, r0, r2
 80204d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80204da:	ea40 000e 	orr.w	r0, r0, lr
 80204de:	fa21 f102 	lsr.w	r1, r1, r2
 80204e2:	4414      	add	r4, r2
 80204e4:	e6bd      	b.n	8020262 <__adddf3+0xe6>
 80204e6:	bf00      	nop

080204e8 <__aeabi_dmul>:
 80204e8:	b570      	push	{r4, r5, r6, lr}
 80204ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80204ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80204f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80204f6:	bf1d      	ittte	ne
 80204f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80204fc:	ea94 0f0c 	teqne	r4, ip
 8020500:	ea95 0f0c 	teqne	r5, ip
 8020504:	f000 f8de 	bleq	80206c4 <__aeabi_dmul+0x1dc>
 8020508:	442c      	add	r4, r5
 802050a:	ea81 0603 	eor.w	r6, r1, r3
 802050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802051a:	bf18      	it	ne
 802051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020528:	d038      	beq.n	802059c <__aeabi_dmul+0xb4>
 802052a:	fba0 ce02 	umull	ip, lr, r0, r2
 802052e:	f04f 0500 	mov.w	r5, #0
 8020532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802053e:	f04f 0600 	mov.w	r6, #0
 8020542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020546:	f09c 0f00 	teq	ip, #0
 802054a:	bf18      	it	ne
 802054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802055c:	d204      	bcs.n	8020568 <__aeabi_dmul+0x80>
 802055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020562:	416d      	adcs	r5, r5
 8020564:	eb46 0606 	adc.w	r6, r6, r6
 8020568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020580:	bf88      	it	hi
 8020582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020586:	d81e      	bhi.n	80205c6 <__aeabi_dmul+0xde>
 8020588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802058c:	bf08      	it	eq
 802058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020592:	f150 0000 	adcs.w	r0, r0, #0
 8020596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802059a:	bd70      	pop	{r4, r5, r6, pc}
 802059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80205a0:	ea46 0101 	orr.w	r1, r6, r1
 80205a4:	ea40 0002 	orr.w	r0, r0, r2
 80205a8:	ea81 0103 	eor.w	r1, r1, r3
 80205ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80205b0:	bfc2      	ittt	gt
 80205b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80205b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80205ba:	bd70      	popgt	{r4, r5, r6, pc}
 80205bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80205c0:	f04f 0e00 	mov.w	lr, #0
 80205c4:	3c01      	subs	r4, #1
 80205c6:	f300 80ab 	bgt.w	8020720 <__aeabi_dmul+0x238>
 80205ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80205ce:	bfde      	ittt	le
 80205d0:	2000      	movle	r0, #0
 80205d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80205d6:	bd70      	pople	{r4, r5, r6, pc}
 80205d8:	f1c4 0400 	rsb	r4, r4, #0
 80205dc:	3c20      	subs	r4, #32
 80205de:	da35      	bge.n	802064c <__aeabi_dmul+0x164>
 80205e0:	340c      	adds	r4, #12
 80205e2:	dc1b      	bgt.n	802061c <__aeabi_dmul+0x134>
 80205e4:	f104 0414 	add.w	r4, r4, #20
 80205e8:	f1c4 0520 	rsb	r5, r4, #32
 80205ec:	fa00 f305 	lsl.w	r3, r0, r5
 80205f0:	fa20 f004 	lsr.w	r0, r0, r4
 80205f4:	fa01 f205 	lsl.w	r2, r1, r5
 80205f8:	ea40 0002 	orr.w	r0, r0, r2
 80205fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020608:	fa21 f604 	lsr.w	r6, r1, r4
 802060c:	eb42 0106 	adc.w	r1, r2, r6
 8020610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020614:	bf08      	it	eq
 8020616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802061a:	bd70      	pop	{r4, r5, r6, pc}
 802061c:	f1c4 040c 	rsb	r4, r4, #12
 8020620:	f1c4 0520 	rsb	r5, r4, #32
 8020624:	fa00 f304 	lsl.w	r3, r0, r4
 8020628:	fa20 f005 	lsr.w	r0, r0, r5
 802062c:	fa01 f204 	lsl.w	r2, r1, r4
 8020630:	ea40 0002 	orr.w	r0, r0, r2
 8020634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802063c:	f141 0100 	adc.w	r1, r1, #0
 8020640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020644:	bf08      	it	eq
 8020646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802064a:	bd70      	pop	{r4, r5, r6, pc}
 802064c:	f1c4 0520 	rsb	r5, r4, #32
 8020650:	fa00 f205 	lsl.w	r2, r0, r5
 8020654:	ea4e 0e02 	orr.w	lr, lr, r2
 8020658:	fa20 f304 	lsr.w	r3, r0, r4
 802065c:	fa01 f205 	lsl.w	r2, r1, r5
 8020660:	ea43 0302 	orr.w	r3, r3, r2
 8020664:	fa21 f004 	lsr.w	r0, r1, r4
 8020668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802066c:	fa21 f204 	lsr.w	r2, r1, r4
 8020670:	ea20 0002 	bic.w	r0, r0, r2
 8020674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802067c:	bf08      	it	eq
 802067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020682:	bd70      	pop	{r4, r5, r6, pc}
 8020684:	f094 0f00 	teq	r4, #0
 8020688:	d10f      	bne.n	80206aa <__aeabi_dmul+0x1c2>
 802068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802068e:	0040      	lsls	r0, r0, #1
 8020690:	eb41 0101 	adc.w	r1, r1, r1
 8020694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020698:	bf08      	it	eq
 802069a:	3c01      	subeq	r4, #1
 802069c:	d0f7      	beq.n	802068e <__aeabi_dmul+0x1a6>
 802069e:	ea41 0106 	orr.w	r1, r1, r6
 80206a2:	f095 0f00 	teq	r5, #0
 80206a6:	bf18      	it	ne
 80206a8:	4770      	bxne	lr
 80206aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80206ae:	0052      	lsls	r2, r2, #1
 80206b0:	eb43 0303 	adc.w	r3, r3, r3
 80206b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80206b8:	bf08      	it	eq
 80206ba:	3d01      	subeq	r5, #1
 80206bc:	d0f7      	beq.n	80206ae <__aeabi_dmul+0x1c6>
 80206be:	ea43 0306 	orr.w	r3, r3, r6
 80206c2:	4770      	bx	lr
 80206c4:	ea94 0f0c 	teq	r4, ip
 80206c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80206cc:	bf18      	it	ne
 80206ce:	ea95 0f0c 	teqne	r5, ip
 80206d2:	d00c      	beq.n	80206ee <__aeabi_dmul+0x206>
 80206d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80206d8:	bf18      	it	ne
 80206da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80206de:	d1d1      	bne.n	8020684 <__aeabi_dmul+0x19c>
 80206e0:	ea81 0103 	eor.w	r1, r1, r3
 80206e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80206e8:	f04f 0000 	mov.w	r0, #0
 80206ec:	bd70      	pop	{r4, r5, r6, pc}
 80206ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80206f2:	bf06      	itte	eq
 80206f4:	4610      	moveq	r0, r2
 80206f6:	4619      	moveq	r1, r3
 80206f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80206fc:	d019      	beq.n	8020732 <__aeabi_dmul+0x24a>
 80206fe:	ea94 0f0c 	teq	r4, ip
 8020702:	d102      	bne.n	802070a <__aeabi_dmul+0x222>
 8020704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020708:	d113      	bne.n	8020732 <__aeabi_dmul+0x24a>
 802070a:	ea95 0f0c 	teq	r5, ip
 802070e:	d105      	bne.n	802071c <__aeabi_dmul+0x234>
 8020710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020714:	bf1c      	itt	ne
 8020716:	4610      	movne	r0, r2
 8020718:	4619      	movne	r1, r3
 802071a:	d10a      	bne.n	8020732 <__aeabi_dmul+0x24a>
 802071c:	ea81 0103 	eor.w	r1, r1, r3
 8020720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802072c:	f04f 0000 	mov.w	r0, #0
 8020730:	bd70      	pop	{r4, r5, r6, pc}
 8020732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802073a:	bd70      	pop	{r4, r5, r6, pc}

0802073c <__aeabi_ddiv>:
 802073c:	b570      	push	{r4, r5, r6, lr}
 802073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802074a:	bf1d      	ittte	ne
 802074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020750:	ea94 0f0c 	teqne	r4, ip
 8020754:	ea95 0f0c 	teqne	r5, ip
 8020758:	f000 f8a7 	bleq	80208aa <__aeabi_ddiv+0x16e>
 802075c:	eba4 0405 	sub.w	r4, r4, r5
 8020760:	ea81 0e03 	eor.w	lr, r1, r3
 8020764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802076c:	f000 8088 	beq.w	8020880 <__aeabi_ddiv+0x144>
 8020770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020794:	429d      	cmp	r5, r3
 8020796:	bf08      	it	eq
 8020798:	4296      	cmpeq	r6, r2
 802079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80207a2:	d202      	bcs.n	80207aa <__aeabi_ddiv+0x6e>
 80207a4:	085b      	lsrs	r3, r3, #1
 80207a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80207aa:	1ab6      	subs	r6, r6, r2
 80207ac:	eb65 0503 	sbc.w	r5, r5, r3
 80207b0:	085b      	lsrs	r3, r3, #1
 80207b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80207b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80207ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80207be:	ebb6 0e02 	subs.w	lr, r6, r2
 80207c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207c6:	bf22      	ittt	cs
 80207c8:	1ab6      	subcs	r6, r6, r2
 80207ca:	4675      	movcs	r5, lr
 80207cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80207d0:	085b      	lsrs	r3, r3, #1
 80207d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80207d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80207da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207de:	bf22      	ittt	cs
 80207e0:	1ab6      	subcs	r6, r6, r2
 80207e2:	4675      	movcs	r5, lr
 80207e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80207e8:	085b      	lsrs	r3, r3, #1
 80207ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80207ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80207f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80207f6:	bf22      	ittt	cs
 80207f8:	1ab6      	subcs	r6, r6, r2
 80207fa:	4675      	movcs	r5, lr
 80207fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020800:	085b      	lsrs	r3, r3, #1
 8020802:	ea4f 0232 	mov.w	r2, r2, rrx
 8020806:	ebb6 0e02 	subs.w	lr, r6, r2
 802080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802080e:	bf22      	ittt	cs
 8020810:	1ab6      	subcs	r6, r6, r2
 8020812:	4675      	movcs	r5, lr
 8020814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020818:	ea55 0e06 	orrs.w	lr, r5, r6
 802081c:	d018      	beq.n	8020850 <__aeabi_ddiv+0x114>
 802081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802083a:	d1c0      	bne.n	80207be <__aeabi_ddiv+0x82>
 802083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020840:	d10b      	bne.n	802085a <__aeabi_ddiv+0x11e>
 8020842:	ea41 0100 	orr.w	r1, r1, r0
 8020846:	f04f 0000 	mov.w	r0, #0
 802084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802084e:	e7b6      	b.n	80207be <__aeabi_ddiv+0x82>
 8020850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020854:	bf04      	itt	eq
 8020856:	4301      	orreq	r1, r0
 8020858:	2000      	moveq	r0, #0
 802085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802085e:	bf88      	it	hi
 8020860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020864:	f63f aeaf 	bhi.w	80205c6 <__aeabi_dmul+0xde>
 8020868:	ebb5 0c03 	subs.w	ip, r5, r3
 802086c:	bf04      	itt	eq
 802086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020876:	f150 0000 	adcs.w	r0, r0, #0
 802087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802087e:	bd70      	pop	{r4, r5, r6, pc}
 8020880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802088c:	bfc2      	ittt	gt
 802088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020896:	bd70      	popgt	{r4, r5, r6, pc}
 8020898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802089c:	f04f 0e00 	mov.w	lr, #0
 80208a0:	3c01      	subs	r4, #1
 80208a2:	e690      	b.n	80205c6 <__aeabi_dmul+0xde>
 80208a4:	ea45 0e06 	orr.w	lr, r5, r6
 80208a8:	e68d      	b.n	80205c6 <__aeabi_dmul+0xde>
 80208aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80208ae:	ea94 0f0c 	teq	r4, ip
 80208b2:	bf08      	it	eq
 80208b4:	ea95 0f0c 	teqeq	r5, ip
 80208b8:	f43f af3b 	beq.w	8020732 <__aeabi_dmul+0x24a>
 80208bc:	ea94 0f0c 	teq	r4, ip
 80208c0:	d10a      	bne.n	80208d8 <__aeabi_ddiv+0x19c>
 80208c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80208c6:	f47f af34 	bne.w	8020732 <__aeabi_dmul+0x24a>
 80208ca:	ea95 0f0c 	teq	r5, ip
 80208ce:	f47f af25 	bne.w	802071c <__aeabi_dmul+0x234>
 80208d2:	4610      	mov	r0, r2
 80208d4:	4619      	mov	r1, r3
 80208d6:	e72c      	b.n	8020732 <__aeabi_dmul+0x24a>
 80208d8:	ea95 0f0c 	teq	r5, ip
 80208dc:	d106      	bne.n	80208ec <__aeabi_ddiv+0x1b0>
 80208de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208e2:	f43f aefd 	beq.w	80206e0 <__aeabi_dmul+0x1f8>
 80208e6:	4610      	mov	r0, r2
 80208e8:	4619      	mov	r1, r3
 80208ea:	e722      	b.n	8020732 <__aeabi_dmul+0x24a>
 80208ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80208f0:	bf18      	it	ne
 80208f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80208f6:	f47f aec5 	bne.w	8020684 <__aeabi_dmul+0x19c>
 80208fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80208fe:	f47f af0d 	bne.w	802071c <__aeabi_dmul+0x234>
 8020902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020906:	f47f aeeb 	bne.w	80206e0 <__aeabi_dmul+0x1f8>
 802090a:	e712      	b.n	8020732 <__aeabi_dmul+0x24a>

0802090c <__gedf2>:
 802090c:	f04f 3cff 	mov.w	ip, #4294967295
 8020910:	e006      	b.n	8020920 <__cmpdf2+0x4>
 8020912:	bf00      	nop

08020914 <__ledf2>:
 8020914:	f04f 0c01 	mov.w	ip, #1
 8020918:	e002      	b.n	8020920 <__cmpdf2+0x4>
 802091a:	bf00      	nop

0802091c <__cmpdf2>:
 802091c:	f04f 0c01 	mov.w	ip, #1
 8020920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020930:	bf18      	it	ne
 8020932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020936:	d01b      	beq.n	8020970 <__cmpdf2+0x54>
 8020938:	b001      	add	sp, #4
 802093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802093e:	bf0c      	ite	eq
 8020940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020944:	ea91 0f03 	teqne	r1, r3
 8020948:	bf02      	ittt	eq
 802094a:	ea90 0f02 	teqeq	r0, r2
 802094e:	2000      	moveq	r0, #0
 8020950:	4770      	bxeq	lr
 8020952:	f110 0f00 	cmn.w	r0, #0
 8020956:	ea91 0f03 	teq	r1, r3
 802095a:	bf58      	it	pl
 802095c:	4299      	cmppl	r1, r3
 802095e:	bf08      	it	eq
 8020960:	4290      	cmpeq	r0, r2
 8020962:	bf2c      	ite	cs
 8020964:	17d8      	asrcs	r0, r3, #31
 8020966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802096a:	f040 0001 	orr.w	r0, r0, #1
 802096e:	4770      	bx	lr
 8020970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020978:	d102      	bne.n	8020980 <__cmpdf2+0x64>
 802097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802097e:	d107      	bne.n	8020990 <__cmpdf2+0x74>
 8020980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020988:	d1d6      	bne.n	8020938 <__cmpdf2+0x1c>
 802098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802098e:	d0d3      	beq.n	8020938 <__cmpdf2+0x1c>
 8020990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020994:	4770      	bx	lr
 8020996:	bf00      	nop

08020998 <__aeabi_cdrcmple>:
 8020998:	4684      	mov	ip, r0
 802099a:	4610      	mov	r0, r2
 802099c:	4662      	mov	r2, ip
 802099e:	468c      	mov	ip, r1
 80209a0:	4619      	mov	r1, r3
 80209a2:	4663      	mov	r3, ip
 80209a4:	e000      	b.n	80209a8 <__aeabi_cdcmpeq>
 80209a6:	bf00      	nop

080209a8 <__aeabi_cdcmpeq>:
 80209a8:	b501      	push	{r0, lr}
 80209aa:	f7ff ffb7 	bl	802091c <__cmpdf2>
 80209ae:	2800      	cmp	r0, #0
 80209b0:	bf48      	it	mi
 80209b2:	f110 0f00 	cmnmi.w	r0, #0
 80209b6:	bd01      	pop	{r0, pc}

080209b8 <__aeabi_dcmpeq>:
 80209b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209bc:	f7ff fff4 	bl	80209a8 <__aeabi_cdcmpeq>
 80209c0:	bf0c      	ite	eq
 80209c2:	2001      	moveq	r0, #1
 80209c4:	2000      	movne	r0, #0
 80209c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80209ca:	bf00      	nop

080209cc <__aeabi_dcmplt>:
 80209cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209d0:	f7ff ffea 	bl	80209a8 <__aeabi_cdcmpeq>
 80209d4:	bf34      	ite	cc
 80209d6:	2001      	movcc	r0, #1
 80209d8:	2000      	movcs	r0, #0
 80209da:	f85d fb08 	ldr.w	pc, [sp], #8
 80209de:	bf00      	nop

080209e0 <__aeabi_dcmple>:
 80209e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209e4:	f7ff ffe0 	bl	80209a8 <__aeabi_cdcmpeq>
 80209e8:	bf94      	ite	ls
 80209ea:	2001      	movls	r0, #1
 80209ec:	2000      	movhi	r0, #0
 80209ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80209f2:	bf00      	nop

080209f4 <__aeabi_dcmpge>:
 80209f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80209f8:	f7ff ffce 	bl	8020998 <__aeabi_cdrcmple>
 80209fc:	bf94      	ite	ls
 80209fe:	2001      	movls	r0, #1
 8020a00:	2000      	movhi	r0, #0
 8020a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8020a06:	bf00      	nop

08020a08 <__aeabi_dcmpgt>:
 8020a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020a0c:	f7ff ffc4 	bl	8020998 <__aeabi_cdrcmple>
 8020a10:	bf34      	ite	cc
 8020a12:	2001      	movcc	r0, #1
 8020a14:	2000      	movcs	r0, #0
 8020a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8020a1a:	bf00      	nop

08020a1c <__aeabi_dcmpun>:
 8020a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a24:	d102      	bne.n	8020a2c <__aeabi_dcmpun+0x10>
 8020a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020a2a:	d10a      	bne.n	8020a42 <__aeabi_dcmpun+0x26>
 8020a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a34:	d102      	bne.n	8020a3c <__aeabi_dcmpun+0x20>
 8020a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020a3a:	d102      	bne.n	8020a42 <__aeabi_dcmpun+0x26>
 8020a3c:	f04f 0000 	mov.w	r0, #0
 8020a40:	4770      	bx	lr
 8020a42:	f04f 0001 	mov.w	r0, #1
 8020a46:	4770      	bx	lr

08020a48 <__aeabi_d2iz>:
 8020a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020a50:	d215      	bcs.n	8020a7e <__aeabi_d2iz+0x36>
 8020a52:	d511      	bpl.n	8020a78 <__aeabi_d2iz+0x30>
 8020a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020a5c:	d912      	bls.n	8020a84 <__aeabi_d2iz+0x3c>
 8020a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8020a72:	bf18      	it	ne
 8020a74:	4240      	negne	r0, r0
 8020a76:	4770      	bx	lr
 8020a78:	f04f 0000 	mov.w	r0, #0
 8020a7c:	4770      	bx	lr
 8020a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020a82:	d105      	bne.n	8020a90 <__aeabi_d2iz+0x48>
 8020a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020a88:	bf08      	it	eq
 8020a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020a8e:	4770      	bx	lr
 8020a90:	f04f 0000 	mov.w	r0, #0
 8020a94:	4770      	bx	lr
 8020a96:	bf00      	nop

08020a98 <__aeabi_d2f>:
 8020a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020aa0:	bf24      	itt	cs
 8020aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020aaa:	d90d      	bls.n	8020ac8 <__aeabi_d2f+0x30>
 8020aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020ac0:	bf08      	it	eq
 8020ac2:	f020 0001 	biceq.w	r0, r0, #1
 8020ac6:	4770      	bx	lr
 8020ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020acc:	d121      	bne.n	8020b12 <__aeabi_d2f+0x7a>
 8020ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020ad2:	bfbc      	itt	lt
 8020ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020ad8:	4770      	bxlt	lr
 8020ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020ae2:	f1c2 0218 	rsb	r2, r2, #24
 8020ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8020aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8020aee:	fa20 f002 	lsr.w	r0, r0, r2
 8020af2:	bf18      	it	ne
 8020af4:	f040 0001 	orrne.w	r0, r0, #1
 8020af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020b04:	ea40 000c 	orr.w	r0, r0, ip
 8020b08:	fa23 f302 	lsr.w	r3, r3, r2
 8020b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020b10:	e7cc      	b.n	8020aac <__aeabi_d2f+0x14>
 8020b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020b16:	d107      	bne.n	8020b28 <__aeabi_d2f+0x90>
 8020b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020b1c:	bf1e      	ittt	ne
 8020b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020b26:	4770      	bxne	lr
 8020b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020b34:	4770      	bx	lr
 8020b36:	bf00      	nop

08020b38 <KalmanFilter_C>:
 *      Author: Neil
 */

#include "KalmanFilter_C.h"

int KalmanFilter_C (KalmanStruct* kState, float measurement){
 8020b38:	b5b0      	push	{r4, r5, r7, lr}
 8020b3a:	b082      	sub	sp, #8
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	6078      	str	r0, [r7, #4]
 8020b40:	ed87 0a00 	vstr	s0, [r7]

	kState->p = kState->p + kState->q;
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	ed93 7a03 	vldr	s14, [r3, #12]
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	edd3 7a00 	vldr	s15, [r3]
 8020b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	edc3 7a03 	vstr	s15, [r3, #12]
    if (isinf(kState->p) || isnan(kState->p)) {
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020b60:	eef0 7ae7 	vabs.f32	s15, s15
 8020b64:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8020d08 <KalmanFilter_C+0x1d0>
 8020b68:	eef4 7a47 	vcmp.f32	s15, s14
 8020b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b70:	bfd4      	ite	le
 8020b72:	2301      	movle	r3, #1
 8020b74:	2300      	movgt	r3, #0
 8020b76:	b2db      	uxtb	r3, r3
 8020b78:	f083 0301 	eor.w	r3, r3, #1
 8020b7c:	b2db      	uxtb	r3, r3
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d107      	bne.n	8020b92 <KalmanFilter_C+0x5a>
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	edd3 7a03 	vldr	s15, [r3, #12]
 8020b88:	eef4 7a67 	vcmp.f32	s15, s15
 8020b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b90:	d701      	bvc.n	8020b96 <KalmanFilter_C+0x5e>
        return KALMAN_OVERFLOW; // Overflow error
 8020b92:	2302      	movs	r3, #2
 8020b94:	e0b3      	b.n	8020cfe <KalmanFilter_C+0x1c6>
    }
    if ((kState->p + kState->r) < FLT_EPSILON){
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	ed93 7a03 	vldr	s14, [r3, #12]
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8020ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020ba6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8020d0c <KalmanFilter_C+0x1d4>
 8020baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bb2:	d501      	bpl.n	8020bb8 <KalmanFilter_C+0x80>
    	return KALMAN_DIV_BY_ZERO;
 8020bb4:	2301      	movs	r3, #1
 8020bb6:	e0a2      	b.n	8020cfe <KalmanFilter_C+0x1c6>
    }
	kState->k = kState->p / (kState->p + kState->r);
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	edd3 6a03 	vldr	s13, [r3, #12]
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	ed93 7a03 	vldr	s14, [r3, #12]
 8020bc4:	687b      	ldr	r3, [r7, #4]
 8020bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8020bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	edc3 7a04 	vstr	s15, [r3, #16]
    if (isinf(kState->k) || isnan(kState->k)) {
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	edd3 7a04 	vldr	s15, [r3, #16]
 8020bde:	eef0 7ae7 	vabs.f32	s15, s15
 8020be2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8020d08 <KalmanFilter_C+0x1d0>
 8020be6:	eef4 7a47 	vcmp.f32	s15, s14
 8020bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bee:	bfd4      	ite	le
 8020bf0:	2301      	movle	r3, #1
 8020bf2:	2300      	movgt	r3, #0
 8020bf4:	b2db      	uxtb	r3, r3
 8020bf6:	f083 0301 	eor.w	r3, r3, #1
 8020bfa:	b2db      	uxtb	r3, r3
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d107      	bne.n	8020c10 <KalmanFilter_C+0xd8>
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	edd3 7a04 	vldr	s15, [r3, #16]
 8020c06:	eef4 7a67 	vcmp.f32	s15, s15
 8020c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c0e:	d701      	bvc.n	8020c14 <KalmanFilter_C+0xdc>
        return KALMAN_OVERFLOW; // Overflow error
 8020c10:	2302      	movs	r3, #2
 8020c12:	e074      	b.n	8020cfe <KalmanFilter_C+0x1c6>
    }

	kState->x = kState->x + kState->k * (measurement - kState->x);
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	ed93 7a02 	vldr	s14, [r3, #8]
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	edd3 6a04 	vldr	s13, [r3, #16]
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	edd3 7a02 	vldr	s15, [r3, #8]
 8020c26:	ed97 6a00 	vldr	s12, [r7]
 8020c2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8020c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	edc3 7a02 	vstr	s15, [r3, #8]
    if (isinf(kState->x) || isnan(kState->x)) {
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8020c42:	eef0 7ae7 	vabs.f32	s15, s15
 8020c46:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8020d08 <KalmanFilter_C+0x1d0>
 8020c4a:	eef4 7a47 	vcmp.f32	s15, s14
 8020c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c52:	bfd4      	ite	le
 8020c54:	2301      	movle	r3, #1
 8020c56:	2300      	movgt	r3, #0
 8020c58:	b2db      	uxtb	r3, r3
 8020c5a:	f083 0301 	eor.w	r3, r3, #1
 8020c5e:	b2db      	uxtb	r3, r3
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d107      	bne.n	8020c74 <KalmanFilter_C+0x13c>
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	edd3 7a02 	vldr	s15, [r3, #8]
 8020c6a:	eef4 7a67 	vcmp.f32	s15, s15
 8020c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c72:	d701      	bvc.n	8020c78 <KalmanFilter_C+0x140>
        return KALMAN_OVERFLOW; // Overflow error
 8020c74:	2302      	movs	r3, #2
 8020c76:	e042      	b.n	8020cfe <KalmanFilter_C+0x1c6>
    }

	kState->p = (1.0-kState->k) * kState->p;
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	691b      	ldr	r3, [r3, #16]
 8020c7c:	4618      	mov	r0, r3
 8020c7e:	f7ff fbdb 	bl	8020438 <__aeabi_f2d>
 8020c82:	4602      	mov	r2, r0
 8020c84:	460b      	mov	r3, r1
 8020c86:	f04f 0000 	mov.w	r0, #0
 8020c8a:	4921      	ldr	r1, [pc, #132]	; (8020d10 <KalmanFilter_C+0x1d8>)
 8020c8c:	f7ff fa74 	bl	8020178 <__aeabi_dsub>
 8020c90:	4602      	mov	r2, r0
 8020c92:	460b      	mov	r3, r1
 8020c94:	4614      	mov	r4, r2
 8020c96:	461d      	mov	r5, r3
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	68db      	ldr	r3, [r3, #12]
 8020c9c:	4618      	mov	r0, r3
 8020c9e:	f7ff fbcb 	bl	8020438 <__aeabi_f2d>
 8020ca2:	4602      	mov	r2, r0
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	4620      	mov	r0, r4
 8020ca8:	4629      	mov	r1, r5
 8020caa:	f7ff fc1d 	bl	80204e8 <__aeabi_dmul>
 8020cae:	4602      	mov	r2, r0
 8020cb0:	460b      	mov	r3, r1
 8020cb2:	4610      	mov	r0, r2
 8020cb4:	4619      	mov	r1, r3
 8020cb6:	f7ff feef 	bl	8020a98 <__aeabi_d2f>
 8020cba:	4602      	mov	r2, r0
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	60da      	str	r2, [r3, #12]
    if (isinf(kState->p) || isnan(kState->p)) {
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8020cc6:	eef0 7ae7 	vabs.f32	s15, s15
 8020cca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8020d08 <KalmanFilter_C+0x1d0>
 8020cce:	eef4 7a47 	vcmp.f32	s15, s14
 8020cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cd6:	bfd4      	ite	le
 8020cd8:	2301      	movle	r3, #1
 8020cda:	2300      	movgt	r3, #0
 8020cdc:	b2db      	uxtb	r3, r3
 8020cde:	f083 0301 	eor.w	r3, r3, #1
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	d107      	bne.n	8020cf8 <KalmanFilter_C+0x1c0>
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	edd3 7a03 	vldr	s15, [r3, #12]
 8020cee:	eef4 7a67 	vcmp.f32	s15, s15
 8020cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cf6:	d701      	bvc.n	8020cfc <KalmanFilter_C+0x1c4>
        return KALMAN_OVERFLOW; // Overflow error
 8020cf8:	2302      	movs	r3, #2
 8020cfa:	e000      	b.n	8020cfe <KalmanFilter_C+0x1c6>
    }

    return KALMAN_SUCCESS;
 8020cfc:	2300      	movs	r3, #0
}
 8020cfe:	4618      	mov	r0, r3
 8020d00:	3708      	adds	r7, #8
 8020d02:	46bd      	mov	sp, r7
 8020d04:	bdb0      	pop	{r4, r5, r7, pc}
 8020d06:	bf00      	nop
 8020d08:	7f7fffff 	.word	0x7f7fffff
 8020d0c:	34000000 	.word	0x34000000
 8020d10:	3ff00000 	.word	0x3ff00000

08020d14 <KalmanFilter_C_CMSIS>:
 *      Author: Neil
 */

#include "KalmanFilter_C_CMSIS.h"

int KalmanFilter_C_CMSIS(KalmanStruct* kState, float measurement) {
 8020d14:	b580      	push	{r7, lr}
 8020d16:	b086      	sub	sp, #24
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
 8020d1c:	ed87 0a00 	vstr	s0, [r7]
    float32_t temp1[1], temp2[1], one[1] = {1.0f};
 8020d20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020d24:	60fb      	str	r3, [r7, #12]

    // P = P + Q
    arm_add_f32(&(kState->p), &(kState->q), &(kState->p), 1);
 8020d26:	687b      	ldr	r3, [r7, #4]
 8020d28:	f103 000c 	add.w	r0, r3, #12
 8020d2c:	6879      	ldr	r1, [r7, #4]
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	f103 020c 	add.w	r2, r3, #12
 8020d34:	2301      	movs	r3, #1
 8020d36:	f002 fd15 	bl	8023764 <arm_add_f32>
    if (isinf(kState->p) || isnan(kState->p)) {
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020d40:	eef0 7ae7 	vabs.f32	s15, s15
 8020d44:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8020ee4 <KalmanFilter_C_CMSIS+0x1d0>
 8020d48:	eef4 7a47 	vcmp.f32	s15, s14
 8020d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d50:	bfd4      	ite	le
 8020d52:	2301      	movle	r3, #1
 8020d54:	2300      	movgt	r3, #0
 8020d56:	b2db      	uxtb	r3, r3
 8020d58:	f083 0301 	eor.w	r3, r3, #1
 8020d5c:	b2db      	uxtb	r3, r3
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d107      	bne.n	8020d72 <KalmanFilter_C_CMSIS+0x5e>
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	edd3 7a03 	vldr	s15, [r3, #12]
 8020d68:	eef4 7a67 	vcmp.f32	s15, s15
 8020d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d70:	d701      	bvc.n	8020d76 <KalmanFilter_C_CMSIS+0x62>
        return KALMAN_OVERFLOW; // Overflow error
 8020d72:	2302      	movs	r3, #2
 8020d74:	e0b2      	b.n	8020edc <KalmanFilter_C_CMSIS+0x1c8>
    }
    if ((kState->p + kState->r) < FLT_EPSILON){
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	ed93 7a03 	vldr	s14, [r3, #12]
 8020d7c:	687b      	ldr	r3, [r7, #4]
 8020d7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8020d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020d86:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8020ee8 <KalmanFilter_C_CMSIS+0x1d4>
 8020d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d92:	d501      	bpl.n	8020d98 <KalmanFilter_C_CMSIS+0x84>
    	return KALMAN_DIV_BY_ZERO;
 8020d94:	2301      	movs	r3, #1
 8020d96:	e0a1      	b.n	8020edc <KalmanFilter_C_CMSIS+0x1c8>
    }

    // temp1 = P + R
    arm_add_f32(&(kState->p), &(kState->r), temp1, 1);
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	f103 000c 	add.w	r0, r3, #12
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	1d19      	adds	r1, r3, #4
 8020da2:	f107 0214 	add.w	r2, r7, #20
 8020da6:	2301      	movs	r3, #1
 8020da8:	f002 fcdc 	bl	8023764 <arm_add_f32>

    // K = P / temp1
    kState->k = kState->p / temp1[0];
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	edd3 6a03 	vldr	s13, [r3, #12]
 8020db2:	ed97 7a05 	vldr	s14, [r7, #20]
 8020db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	edc3 7a04 	vstr	s15, [r3, #16]

    if (isinf(kState->k) || isnan(kState->k)) {
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8020dc6:	eef0 7ae7 	vabs.f32	s15, s15
 8020dca:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8020ee4 <KalmanFilter_C_CMSIS+0x1d0>
 8020dce:	eef4 7a47 	vcmp.f32	s15, s14
 8020dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dd6:	bfd4      	ite	le
 8020dd8:	2301      	movle	r3, #1
 8020dda:	2300      	movgt	r3, #0
 8020ddc:	b2db      	uxtb	r3, r3
 8020dde:	f083 0301 	eor.w	r3, r3, #1
 8020de2:	b2db      	uxtb	r3, r3
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d107      	bne.n	8020df8 <KalmanFilter_C_CMSIS+0xe4>
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	edd3 7a04 	vldr	s15, [r3, #16]
 8020dee:	eef4 7a67 	vcmp.f32	s15, s15
 8020df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020df6:	d701      	bvc.n	8020dfc <KalmanFilter_C_CMSIS+0xe8>
        return KALMAN_OVERFLOW; // Overflow error
 8020df8:	2302      	movs	r3, #2
 8020dfa:	e06f      	b.n	8020edc <KalmanFilter_C_CMSIS+0x1c8>
    }

    // temp1 = measurement - X
    arm_sub_f32(&measurement, &(kState->x), temp1, 1);
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	f103 0108 	add.w	r1, r3, #8
 8020e02:	f107 0214 	add.w	r2, r7, #20
 8020e06:	4638      	mov	r0, r7
 8020e08:	2301      	movs	r3, #1
 8020e0a:	f002 fbf7 	bl	80235fc <arm_sub_f32>

    // temp2 = K * temp1
    arm_mult_f32(&(kState->k), temp1, temp2, 1);
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	f103 0010 	add.w	r0, r3, #16
 8020e14:	f107 0210 	add.w	r2, r7, #16
 8020e18:	f107 0114 	add.w	r1, r7, #20
 8020e1c:	2301      	movs	r3, #1
 8020e1e:	f002 fc47 	bl	80236b0 <arm_mult_f32>

    // X = X + temp2
    arm_add_f32(&(kState->x), temp2, &(kState->x), 1);
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	f103 0008 	add.w	r0, r3, #8
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	f103 0208 	add.w	r2, r3, #8
 8020e2e:	f107 0110 	add.w	r1, r7, #16
 8020e32:	2301      	movs	r3, #1
 8020e34:	f002 fc96 	bl	8023764 <arm_add_f32>
    if (isinf(kState->x) || isnan(kState->x)) {
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8020e3e:	eef0 7ae7 	vabs.f32	s15, s15
 8020e42:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8020ee4 <KalmanFilter_C_CMSIS+0x1d0>
 8020e46:	eef4 7a47 	vcmp.f32	s15, s14
 8020e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e4e:	bfd4      	ite	le
 8020e50:	2301      	movle	r3, #1
 8020e52:	2300      	movgt	r3, #0
 8020e54:	b2db      	uxtb	r3, r3
 8020e56:	f083 0301 	eor.w	r3, r3, #1
 8020e5a:	b2db      	uxtb	r3, r3
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d107      	bne.n	8020e70 <KalmanFilter_C_CMSIS+0x15c>
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8020e66:	eef4 7a67 	vcmp.f32	s15, s15
 8020e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e6e:	d701      	bvc.n	8020e74 <KalmanFilter_C_CMSIS+0x160>
        return KALMAN_OVERFLOW; // Overflow error
 8020e70:	2302      	movs	r3, #2
 8020e72:	e033      	b.n	8020edc <KalmanFilter_C_CMSIS+0x1c8>
    }

    // temp1 = 1 - K
    arm_sub_f32(one, &(kState->k), temp1, 1);
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	f103 0110 	add.w	r1, r3, #16
 8020e7a:	f107 0214 	add.w	r2, r7, #20
 8020e7e:	f107 000c 	add.w	r0, r7, #12
 8020e82:	2301      	movs	r3, #1
 8020e84:	f002 fbba 	bl	80235fc <arm_sub_f32>

    // P = temp1 * P
    arm_mult_f32(temp1, &(kState->p), &(kState->p), 1);
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	f103 010c 	add.w	r1, r3, #12
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	f103 020c 	add.w	r2, r3, #12
 8020e94:	f107 0014 	add.w	r0, r7, #20
 8020e98:	2301      	movs	r3, #1
 8020e9a:	f002 fc09 	bl	80236b0 <arm_mult_f32>

    if (isinf(kState->p) || isnan(kState->p)) {
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	edd3 7a03 	vldr	s15, [r3, #12]
 8020ea4:	eef0 7ae7 	vabs.f32	s15, s15
 8020ea8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8020ee4 <KalmanFilter_C_CMSIS+0x1d0>
 8020eac:	eef4 7a47 	vcmp.f32	s15, s14
 8020eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020eb4:	bfd4      	ite	le
 8020eb6:	2301      	movle	r3, #1
 8020eb8:	2300      	movgt	r3, #0
 8020eba:	b2db      	uxtb	r3, r3
 8020ebc:	f083 0301 	eor.w	r3, r3, #1
 8020ec0:	b2db      	uxtb	r3, r3
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d107      	bne.n	8020ed6 <KalmanFilter_C_CMSIS+0x1c2>
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8020ecc:	eef4 7a67 	vcmp.f32	s15, s15
 8020ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ed4:	d701      	bvc.n	8020eda <KalmanFilter_C_CMSIS+0x1c6>
        return KALMAN_OVERFLOW; // Overflow error
 8020ed6:	2302      	movs	r3, #2
 8020ed8:	e000      	b.n	8020edc <KalmanFilter_C_CMSIS+0x1c8>
    }

    return KALMAN_SUCCESS;
 8020eda:	2300      	movs	r3, #0
}
 8020edc:	4618      	mov	r0, r3
 8020ede:	3718      	adds	r7, #24
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	bd80      	pop	{r7, pc}
 8020ee4:	7f7fffff 	.word	0x7f7fffff
 8020ee8:	34000000 	.word	0x34000000

08020eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ef0:	f6ad 4d04 	subw	sp, sp, #3076	; 0xc04
 8020ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020ef6:	f000 fcaa 	bl	802184e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020efa:	f000 fae9 	bl	80214d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020efe:	f000 fb39 	bl	8021574 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // KalmanStruct zero_div_filter = {-1.0f, 1.0f, 0.0f, 0.0f, 0.0f};
//  KalmanStruct overflow_filter = {9e38f, 9e38f, 9e38f, 9e38f, 9e38f};
  int err_code = 0;
 8020f02:	2300      	movs	r3, #0
 8020f04:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
//			if (err_code == 1) {
//				return err_code;
//			}
//		}

	 float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 8020f08:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8020f0c:	f6a3 33a4 	subw	r3, r3, #2980	; 0xba4
 8020f10:	4a71      	ldr	r2, [pc, #452]	; (80210d8 <main+0x1ec>)
 8020f12:	4618      	mov	r0, r3
 8020f14:	4611      	mov	r1, r2
 8020f16:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8020f1a:	461a      	mov	r2, r3
 8020f1c:	f002 fca6 	bl	802386c <memcpy>
	                      9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087,
	                      9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
	                      10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
	                      9.5799256668};
	  // Initialize filter with more conservative values
	 KalmanStruct filterAssembly = {1.0f, 1.0f, TEST_ARRAY[0], 10.0f, 0.0f};  // Higher process and measurement noise
 8020f20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020f24:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8020f28:	6013      	str	r3, [r2, #0]
 8020f2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020f2e:	f607 32a4 	addw	r2, r7, #2980	; 0xba4
 8020f32:	6013      	str	r3, [r2, #0]
 8020f34:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8020f38:	f6a3 33a4 	subw	r3, r3, #2980	; 0xba4
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	f607 32a8 	addw	r2, r7, #2984	; 0xba8
 8020f42:	6013      	str	r3, [r2, #0]
 8020f44:	4b65      	ldr	r3, [pc, #404]	; (80210dc <main+0x1f0>)
 8020f46:	f607 32ac 	addw	r2, r7, #2988	; 0xbac
 8020f4a:	6013      	str	r3, [r2, #0]
 8020f4c:	f04f 0300 	mov.w	r3, #0
 8020f50:	f507 623b 	add.w	r2, r7, #2992	; 0xbb0
 8020f54:	6013      	str	r3, [r2, #0]
	  KalmanStruct filterC = {1.0f, 1.0f, TEST_ARRAY[0], 10.0f, 0.0f};  // Higher process and measurement noise
 8020f56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020f5a:	f607 328c 	addw	r2, r7, #2956	; 0xb8c
 8020f5e:	6013      	str	r3, [r2, #0]
 8020f60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020f64:	f507 6239 	add.w	r2, r7, #2960	; 0xb90
 8020f68:	6013      	str	r3, [r2, #0]
 8020f6a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8020f6e:	f6a3 33a4 	subw	r3, r3, #2980	; 0xba4
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	f607 3294 	addw	r2, r7, #2964	; 0xb94
 8020f78:	6013      	str	r3, [r2, #0]
 8020f7a:	4b58      	ldr	r3, [pc, #352]	; (80210dc <main+0x1f0>)
 8020f7c:	f607 3298 	addw	r2, r7, #2968	; 0xb98
 8020f80:	6013      	str	r3, [r2, #0]
 8020f82:	f04f 0300 	mov.w	r3, #0
 8020f86:	f607 329c 	addw	r2, r7, #2972	; 0xb9c
 8020f8a:	6013      	str	r3, [r2, #0]
	  KalmanStruct filterCMSIS = {1.0f, 1.0f, TEST_ARRAY[0], 10.0f, 0.0f};  // Higher process and measurement noise
 8020f8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020f90:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8020f94:	6013      	str	r3, [r2, #0]
 8020f96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020f9a:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8020f9e:	6013      	str	r3, [r2, #0]
 8020fa0:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8020fa4:	f6a3 33a4 	subw	r3, r3, #2980	; 0xba4
 8020fa8:	681b      	ldr	r3, [r3, #0]
 8020faa:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 8020fae:	6013      	str	r3, [r2, #0]
 8020fb0:	4b4a      	ldr	r3, [pc, #296]	; (80210dc <main+0x1f0>)
 8020fb2:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8020fb6:	6013      	str	r3, [r2, #0]
 8020fb8:	f04f 0300 	mov.w	r3, #0
 8020fbc:	f607 3288 	addw	r2, r7, #2952	; 0xb88
 8020fc0:	6013      	str	r3, [r2, #0]

	 int measurementCount = 101;
 8020fc2:	2365      	movs	r3, #101	; 0x65
 8020fc4:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
	 float assemblyResult[101];
	 float cResult[101];
	 float cmsisResult[101];
		for (int i = 0; i < measurementCount; i++) {
 8020fc8:	2300      	movs	r3, #0
 8020fca:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 8020fce:	e02a      	b.n	8021026 <main+0x13a>
				err_code = KalmanFilter(&filterAssembly, TEST_ARRAY[i]);
 8020fd0:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8020fd4:	f6a3 32a4 	subw	r2, r3, #2980	; 0xba4
 8020fd8:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8020fdc:	009b      	lsls	r3, r3, #2
 8020fde:	4413      	add	r3, r2
 8020fe0:	edd3 7a00 	vldr	s15, [r3]
 8020fe4:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8020fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8020fec:	4618      	mov	r0, r3
 8020fee:	f7ff f807 	bl	8020000 <KalmanFilter>
 8020ff2:	f8c7 0bf4 	str.w	r0, [r7, #3060]	; 0xbf4
				if (err_code != 0) {
 8020ff6:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d002      	beq.n	8021004 <main+0x118>
					return err_code;
 8020ffe:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8021002:	e25e      	b.n	80214c2 <main+0x5d6>
				}
				assemblyResult[i] = filterAssembly.x;
 8021004:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8021008:	6819      	ldr	r1, [r3, #0]
 802100a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 802100e:	f5a3 6221 	sub.w	r2, r3, #2576	; 0xa10
 8021012:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8021016:	009b      	lsls	r3, r3, #2
 8021018:	4413      	add	r3, r2
 802101a:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < measurementCount; i++) {
 802101c:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8021020:	3301      	adds	r3, #1
 8021022:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 8021026:	f8d7 2be8 	ldr.w	r2, [r7, #3048]	; 0xbe8
 802102a:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 802102e:	429a      	cmp	r2, r3
 8021030:	dbce      	blt.n	8020fd0 <main+0xe4>
			}
		for (int i = 0; i < measurementCount; i++) {
 8021032:	2300      	movs	r3, #0
 8021034:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 8021038:	e02a      	b.n	8021090 <main+0x1a4>
				err_code = KalmanFilter_C(&filterC, TEST_ARRAY[i]);
 802103a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 802103e:	f6a3 32a4 	subw	r2, r3, #2980	; 0xba4
 8021042:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 8021046:	009b      	lsls	r3, r3, #2
 8021048:	4413      	add	r3, r2
 802104a:	edd3 7a00 	vldr	s15, [r3]
 802104e:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8021052:	eeb0 0a67 	vmov.f32	s0, s15
 8021056:	4618      	mov	r0, r3
 8021058:	f7ff fd6e 	bl	8020b38 <KalmanFilter_C>
 802105c:	f8c7 0bf4 	str.w	r0, [r7, #3060]	; 0xbf4
				if (err_code != 0) {
 8021060:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8021064:	2b00      	cmp	r3, #0
 8021066:	d002      	beq.n	802106e <main+0x182>
					return err_code;
 8021068:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 802106c:	e229      	b.n	80214c2 <main+0x5d6>
				}
				cResult[i] = filterC.x;
 802106e:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8021072:	6819      	ldr	r1, [r3, #0]
 8021074:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8021078:	f6a3 027c 	subw	r2, r3, #2172	; 0x87c
 802107c:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 8021080:	009b      	lsls	r3, r3, #2
 8021082:	4413      	add	r3, r2
 8021084:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < measurementCount; i++) {
 8021086:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 802108a:	3301      	adds	r3, #1
 802108c:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 8021090:	f8d7 2bec 	ldr.w	r2, [r7, #3052]	; 0xbec
 8021094:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8021098:	429a      	cmp	r2, r3
 802109a:	dbce      	blt.n	802103a <main+0x14e>
			}
		for (int i = 0; i < measurementCount; i++) {
 802109c:	2300      	movs	r3, #0
 802109e:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 80210a2:	e02e      	b.n	8021102 <main+0x216>
				err_code = KalmanFilter_C_CMSIS(&filterCMSIS, TEST_ARRAY[i]);
 80210a4:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80210a8:	f6a3 32a4 	subw	r2, r3, #2980	; 0xba4
 80210ac:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80210b0:	009b      	lsls	r3, r3, #2
 80210b2:	4413      	add	r3, r2
 80210b4:	edd3 7a00 	vldr	s15, [r3]
 80210b8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80210bc:	eeb0 0a67 	vmov.f32	s0, s15
 80210c0:	4618      	mov	r0, r3
 80210c2:	f7ff fe27 	bl	8020d14 <KalmanFilter_C_CMSIS>
 80210c6:	f8c7 0bf4 	str.w	r0, [r7, #3060]	; 0xbf4
				if (err_code != 0) {
 80210ca:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d006      	beq.n	80210e0 <main+0x1f4>
					return err_code;
 80210d2:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 80210d6:	e1f4      	b.n	80214c2 <main+0x5d6>
 80210d8:	08026308 	.word	0x08026308
 80210dc:	41200000 	.word	0x41200000
				}
				cmsisResult[i] = filterCMSIS.x;
 80210e0:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 80210e4:	6819      	ldr	r1, [r3, #0]
 80210e6:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80210ea:	f5a3 62dd 	sub.w	r2, r3, #1768	; 0x6e8
 80210ee:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80210f2:	009b      	lsls	r3, r3, #2
 80210f4:	4413      	add	r3, r2
 80210f6:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < measurementCount; i++) {
 80210f8:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80210fc:	3301      	adds	r3, #1
 80210fe:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 8021102:	f8d7 2bf0 	ldr.w	r2, [r7, #3056]	; 0xbf0
 8021106:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 802110a:	429a      	cmp	r2, r3
 802110c:	dbca      	blt.n	80210a4 <main+0x1b8>
		float differenceAssembly[101];
		float differenceC[101];
		float differenceCMSIS[101];

		float meanAssembly, stdDevAssembly;
		float correlationAssembly[2 * measurementCount - 1];
 802110e:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8021112:	005b      	lsls	r3, r3, #1
 8021114:	1e59      	subs	r1, r3, #1
 8021116:	466b      	mov	r3, sp
 8021118:	607b      	str	r3, [r7, #4]
 802111a:	1e4b      	subs	r3, r1, #1
 802111c:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 8021120:	460a      	mov	r2, r1
 8021122:	2300      	movs	r3, #0
 8021124:	64ba      	str	r2, [r7, #72]	; 0x48
 8021126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021128:	f04f 0200 	mov.w	r2, #0
 802112c:	f04f 0300 	mov.w	r3, #0
 8021130:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8021132:	0143      	lsls	r3, r0, #5
 8021134:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8021136:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802113a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 802113c:	0142      	lsls	r2, r0, #5
 802113e:	460a      	mov	r2, r1
 8021140:	2300      	movs	r3, #0
 8021142:	643a      	str	r2, [r7, #64]	; 0x40
 8021144:	647b      	str	r3, [r7, #68]	; 0x44
 8021146:	f04f 0200 	mov.w	r2, #0
 802114a:	f04f 0300 	mov.w	r3, #0
 802114e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8021150:	0143      	lsls	r3, r0, #5
 8021152:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8021154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021158:	6c38      	ldr	r0, [r7, #64]	; 0x40
 802115a:	0142      	lsls	r2, r0, #5
 802115c:	460b      	mov	r3, r1
 802115e:	009b      	lsls	r3, r3, #2
 8021160:	3307      	adds	r3, #7
 8021162:	08db      	lsrs	r3, r3, #3
 8021164:	00db      	lsls	r3, r3, #3
 8021166:	ebad 0d03 	sub.w	sp, sp, r3
 802116a:	ab02      	add	r3, sp, #8
 802116c:	3303      	adds	r3, #3
 802116e:	089b      	lsrs	r3, r3, #2
 8021170:	009b      	lsls	r3, r3, #2
 8021172:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
		float convolutionAssembly[2 * measurementCount - 1];
 8021176:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 802117a:	005b      	lsls	r3, r3, #1
 802117c:	1e59      	subs	r1, r3, #1
 802117e:	1e4b      	subs	r3, r1, #1
 8021180:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8021184:	460a      	mov	r2, r1
 8021186:	2300      	movs	r3, #0
 8021188:	63ba      	str	r2, [r7, #56]	; 0x38
 802118a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802118c:	f04f 0200 	mov.w	r2, #0
 8021190:	f04f 0300 	mov.w	r3, #0
 8021194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8021196:	0143      	lsls	r3, r0, #5
 8021198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802119a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802119e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80211a0:	0142      	lsls	r2, r0, #5
 80211a2:	460a      	mov	r2, r1
 80211a4:	2300      	movs	r3, #0
 80211a6:	633a      	str	r2, [r7, #48]	; 0x30
 80211a8:	637b      	str	r3, [r7, #52]	; 0x34
 80211aa:	f04f 0200 	mov.w	r2, #0
 80211ae:	f04f 0300 	mov.w	r3, #0
 80211b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80211b4:	0143      	lsls	r3, r0, #5
 80211b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80211b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80211bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80211be:	0142      	lsls	r2, r0, #5
 80211c0:	460b      	mov	r3, r1
 80211c2:	009b      	lsls	r3, r3, #2
 80211c4:	3307      	adds	r3, #7
 80211c6:	08db      	lsrs	r3, r3, #3
 80211c8:	00db      	lsls	r3, r3, #3
 80211ca:	ebad 0d03 	sub.w	sp, sp, r3
 80211ce:	ab02      	add	r3, sp, #8
 80211d0:	3303      	adds	r3, #3
 80211d2:	089b      	lsrs	r3, r3, #2
 80211d4:	009b      	lsls	r3, r3, #2
 80211d6:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4

		// Difference
		arm_sub_f32(TEST_ARRAY, assemblyResult, differenceAssembly, measurementCount);
 80211da:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 80211de:	f207 62a4 	addw	r2, r7, #1700	; 0x6a4
 80211e2:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 80211e6:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80211ea:	f002 fa07 	bl	80235fc <arm_sub_f32>

		// Mean and Standard Deviation
		arm_mean_f32(differenceAssembly, measurementCount, &meanAssembly);
 80211ee:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 80211f2:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 80211f6:	f207 60a4 	addw	r0, r7, #1700	; 0x6a4
 80211fa:	461a      	mov	r2, r3
 80211fc:	f001 fc70 	bl	8022ae0 <arm_mean_f32>
		arm_std_f32(differenceAssembly, measurementCount, &stdDevAssembly);
 8021200:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021204:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8021208:	f207 60a4 	addw	r0, r7, #1700	; 0x6a4
 802120c:	461a      	mov	r2, r3
 802120e:	f001 fbdd 	bl	80229cc <arm_std_f32>

		// Correlation
		arm_correlate_f32(TEST_ARRAY, measurementCount, assemblyResult, measurementCount, correlationAssembly);
 8021212:	f8d7 4be4 	ldr.w	r4, [r7, #3044]	; 0xbe4
 8021216:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 802121a:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 802121e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8021222:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	; 0xbdc
 8021226:	9300      	str	r3, [sp, #0]
 8021228:	460b      	mov	r3, r1
 802122a:	4621      	mov	r1, r4
 802122c:	f001 fc96 	bl	8022b5c <arm_correlate_f32>

		// Convolution
		arm_conv_f32(TEST_ARRAY, measurementCount, assemblyResult, measurementCount, convolutionAssembly);
 8021230:	f8d7 4be4 	ldr.w	r4, [r7, #3044]	; 0xbe4
 8021234:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021238:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 802123c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8021240:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8021244:	9300      	str	r3, [sp, #0]
 8021246:	460b      	mov	r3, r1
 8021248:	4621      	mov	r1, r4
 802124a:	f001 ff3d 	bl	80230c8 <arm_conv_f32>


		float meanC, stdDevC;
		float correlationC[2 * measurementCount - 1];
 802124e:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8021252:	005b      	lsls	r3, r3, #1
 8021254:	1e59      	subs	r1, r3, #1
 8021256:	1e4b      	subs	r3, r1, #1
 8021258:	f8c7 3bd0 	str.w	r3, [r7, #3024]	; 0xbd0
 802125c:	460a      	mov	r2, r1
 802125e:	2300      	movs	r3, #0
 8021260:	62ba      	str	r2, [r7, #40]	; 0x28
 8021262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021264:	f04f 0200 	mov.w	r2, #0
 8021268:	f04f 0300 	mov.w	r3, #0
 802126c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802126e:	0143      	lsls	r3, r0, #5
 8021270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021272:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021278:	0142      	lsls	r2, r0, #5
 802127a:	460a      	mov	r2, r1
 802127c:	2300      	movs	r3, #0
 802127e:	623a      	str	r2, [r7, #32]
 8021280:	627b      	str	r3, [r7, #36]	; 0x24
 8021282:	f04f 0200 	mov.w	r2, #0
 8021286:	f04f 0300 	mov.w	r3, #0
 802128a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802128c:	0143      	lsls	r3, r0, #5
 802128e:	6a38      	ldr	r0, [r7, #32]
 8021290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021294:	6a38      	ldr	r0, [r7, #32]
 8021296:	0142      	lsls	r2, r0, #5
 8021298:	460b      	mov	r3, r1
 802129a:	009b      	lsls	r3, r3, #2
 802129c:	3307      	adds	r3, #7
 802129e:	08db      	lsrs	r3, r3, #3
 80212a0:	00db      	lsls	r3, r3, #3
 80212a2:	ebad 0d03 	sub.w	sp, sp, r3
 80212a6:	ab02      	add	r3, sp, #8
 80212a8:	3303      	adds	r3, #3
 80212aa:	089b      	lsrs	r3, r3, #2
 80212ac:	009b      	lsls	r3, r3, #2
 80212ae:	f8c7 3bcc 	str.w	r3, [r7, #3020]	; 0xbcc
		float convolutionC[2 * measurementCount - 1];
 80212b2:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 80212b6:	005b      	lsls	r3, r3, #1
 80212b8:	1e59      	subs	r1, r3, #1
 80212ba:	1e4b      	subs	r3, r1, #1
 80212bc:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
 80212c0:	460a      	mov	r2, r1
 80212c2:	2300      	movs	r3, #0
 80212c4:	61ba      	str	r2, [r7, #24]
 80212c6:	61fb      	str	r3, [r7, #28]
 80212c8:	f04f 0200 	mov.w	r2, #0
 80212cc:	f04f 0300 	mov.w	r3, #0
 80212d0:	69f8      	ldr	r0, [r7, #28]
 80212d2:	0143      	lsls	r3, r0, #5
 80212d4:	69b8      	ldr	r0, [r7, #24]
 80212d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80212da:	69b8      	ldr	r0, [r7, #24]
 80212dc:	0142      	lsls	r2, r0, #5
 80212de:	460a      	mov	r2, r1
 80212e0:	2300      	movs	r3, #0
 80212e2:	613a      	str	r2, [r7, #16]
 80212e4:	617b      	str	r3, [r7, #20]
 80212e6:	f04f 0200 	mov.w	r2, #0
 80212ea:	f04f 0300 	mov.w	r3, #0
 80212ee:	6978      	ldr	r0, [r7, #20]
 80212f0:	0143      	lsls	r3, r0, #5
 80212f2:	6938      	ldr	r0, [r7, #16]
 80212f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80212f8:	6938      	ldr	r0, [r7, #16]
 80212fa:	0142      	lsls	r2, r0, #5
 80212fc:	460b      	mov	r3, r1
 80212fe:	009b      	lsls	r3, r3, #2
 8021300:	3307      	adds	r3, #7
 8021302:	08db      	lsrs	r3, r3, #3
 8021304:	00db      	lsls	r3, r3, #3
 8021306:	ebad 0d03 	sub.w	sp, sp, r3
 802130a:	ab02      	add	r3, sp, #8
 802130c:	3303      	adds	r3, #3
 802130e:	089b      	lsrs	r3, r3, #2
 8021310:	009b      	lsls	r3, r3, #2
 8021312:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4

		// Difference
		arm_sub_f32(TEST_ARRAY, cResult, differenceC, measurementCount);
 8021316:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 802131a:	f607 0238 	addw	r2, r7, #2104	; 0x838
 802131e:	f507 715f 	add.w	r1, r7, #892	; 0x37c
 8021322:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8021326:	f002 f969 	bl	80235fc <arm_sub_f32>

		// Mean and Standard Deviation
		arm_mean_f32(differenceC, measurementCount, &meanC);
 802132a:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 802132e:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 8021332:	f607 0038 	addw	r0, r7, #2104	; 0x838
 8021336:	461a      	mov	r2, r3
 8021338:	f001 fbd2 	bl	8022ae0 <arm_mean_f32>
		arm_std_f32(differenceC, measurementCount, &stdDevC);
 802133c:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021340:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8021344:	f607 0038 	addw	r0, r7, #2104	; 0x838
 8021348:	461a      	mov	r2, r3
 802134a:	f001 fb3f 	bl	80229cc <arm_std_f32>

		// Correlation
		arm_correlate_f32(TEST_ARRAY, measurementCount, cResult, measurementCount, correlationC);
 802134e:	f8d7 4be4 	ldr.w	r4, [r7, #3044]	; 0xbe4
 8021352:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021356:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 802135a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 802135e:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	; 0xbcc
 8021362:	9300      	str	r3, [sp, #0]
 8021364:	460b      	mov	r3, r1
 8021366:	4621      	mov	r1, r4
 8021368:	f001 fbf8 	bl	8022b5c <arm_correlate_f32>

		// Convolution
		arm_conv_f32(TEST_ARRAY, measurementCount, cResult, measurementCount, convolutionC);
 802136c:	f8d7 4be4 	ldr.w	r4, [r7, #3044]	; 0xbe4
 8021370:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021374:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8021378:	f107 0054 	add.w	r0, r7, #84	; 0x54
 802137c:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	; 0xbc4
 8021380:	9300      	str	r3, [sp, #0]
 8021382:	460b      	mov	r3, r1
 8021384:	4621      	mov	r1, r4
 8021386:	f001 fe9f 	bl	80230c8 <arm_conv_f32>

		float meanCMSIS, stdDevCMSIS;
		float correlationCMSIS[2 * measurementCount - 1];
 802138a:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 802138e:	005b      	lsls	r3, r3, #1
 8021390:	1e59      	subs	r1, r3, #1
 8021392:	1e4b      	subs	r3, r1, #1
 8021394:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 8021398:	460a      	mov	r2, r1
 802139a:	2300      	movs	r3, #0
 802139c:	60ba      	str	r2, [r7, #8]
 802139e:	60fb      	str	r3, [r7, #12]
 80213a0:	f04f 0200 	mov.w	r2, #0
 80213a4:	f04f 0300 	mov.w	r3, #0
 80213a8:	68f8      	ldr	r0, [r7, #12]
 80213aa:	0143      	lsls	r3, r0, #5
 80213ac:	68b8      	ldr	r0, [r7, #8]
 80213ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80213b2:	68b8      	ldr	r0, [r7, #8]
 80213b4:	0142      	lsls	r2, r0, #5
 80213b6:	460a      	mov	r2, r1
 80213b8:	2300      	movs	r3, #0
 80213ba:	4615      	mov	r5, r2
 80213bc:	461e      	mov	r6, r3
 80213be:	f04f 0200 	mov.w	r2, #0
 80213c2:	f04f 0300 	mov.w	r3, #0
 80213c6:	0173      	lsls	r3, r6, #5
 80213c8:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
 80213cc:	016a      	lsls	r2, r5, #5
 80213ce:	460b      	mov	r3, r1
 80213d0:	009b      	lsls	r3, r3, #2
 80213d2:	3307      	adds	r3, #7
 80213d4:	08db      	lsrs	r3, r3, #3
 80213d6:	00db      	lsls	r3, r3, #3
 80213d8:	ebad 0d03 	sub.w	sp, sp, r3
 80213dc:	ab02      	add	r3, sp, #8
 80213de:	3303      	adds	r3, #3
 80213e0:	089b      	lsrs	r3, r3, #2
 80213e2:	009b      	lsls	r3, r3, #2
 80213e4:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
		float convolutionCMSIS[2 * measurementCount - 1];
 80213e8:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 80213ec:	005b      	lsls	r3, r3, #1
 80213ee:	1e59      	subs	r1, r3, #1
 80213f0:	1e4b      	subs	r3, r1, #1
 80213f2:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
 80213f6:	460a      	mov	r2, r1
 80213f8:	2300      	movs	r3, #0
 80213fa:	4692      	mov	sl, r2
 80213fc:	469b      	mov	fp, r3
 80213fe:	f04f 0200 	mov.w	r2, #0
 8021402:	f04f 0300 	mov.w	r3, #0
 8021406:	ea4f 134b 	mov.w	r3, fp, lsl #5
 802140a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 802140e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8021412:	460a      	mov	r2, r1
 8021414:	2300      	movs	r3, #0
 8021416:	4690      	mov	r8, r2
 8021418:	4699      	mov	r9, r3
 802141a:	f04f 0200 	mov.w	r2, #0
 802141e:	f04f 0300 	mov.w	r3, #0
 8021422:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8021426:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 802142a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 802142e:	460b      	mov	r3, r1
 8021430:	009b      	lsls	r3, r3, #2
 8021432:	3307      	adds	r3, #7
 8021434:	08db      	lsrs	r3, r3, #3
 8021436:	00db      	lsls	r3, r3, #3
 8021438:	ebad 0d03 	sub.w	sp, sp, r3
 802143c:	ab02      	add	r3, sp, #8
 802143e:	3303      	adds	r3, #3
 8021440:	089b      	lsrs	r3, r3, #2
 8021442:	009b      	lsls	r3, r3, #2
 8021444:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4

		// Difference
		arm_sub_f32(TEST_ARRAY, cmsisResult, differenceCMSIS, measurementCount);
 8021448:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 802144c:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8021450:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8021454:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8021458:	f002 f8d0 	bl	80235fc <arm_sub_f32>

		// Mean and Standard Deviation
		arm_mean_f32(differenceCMSIS, measurementCount, &meanCMSIS);
 802145c:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021460:	f607 3364 	addw	r3, r7, #2916	; 0xb64
 8021464:	f607 10cc 	addw	r0, r7, #2508	; 0x9cc
 8021468:	461a      	mov	r2, r3
 802146a:	f001 fb39 	bl	8022ae0 <arm_mean_f32>
		arm_std_f32(differenceCMSIS, measurementCount, &stdDevCMSIS);
 802146e:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021472:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8021476:	f607 10cc 	addw	r0, r7, #2508	; 0x9cc
 802147a:	461a      	mov	r2, r3
 802147c:	f001 faa6 	bl	80229cc <arm_std_f32>

		// Correlation
		arm_correlate_f32(TEST_ARRAY, measurementCount, cmsisResult, measurementCount, correlationCMSIS);
 8021480:	f8d7 4be4 	ldr.w	r4, [r7, #3044]	; 0xbe4
 8021484:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 8021488:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 802148c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8021490:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	; 0xbbc
 8021494:	9300      	str	r3, [sp, #0]
 8021496:	460b      	mov	r3, r1
 8021498:	4621      	mov	r1, r4
 802149a:	f001 fb5f 	bl	8022b5c <arm_correlate_f32>

		// Convolution
		arm_conv_f32(TEST_ARRAY, measurementCount, cmsisResult, measurementCount, convolutionCMSIS);
 802149e:	f8d7 4be4 	ldr.w	r4, [r7, #3044]	; 0xbe4
 80214a2:	f8d7 1be4 	ldr.w	r1, [r7, #3044]	; 0xbe4
 80214a6:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 80214aa:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80214ae:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	; 0xbb4
 80214b2:	9300      	str	r3, [sp, #0]
 80214b4:	460b      	mov	r3, r1
 80214b6:	4621      	mov	r1, r4
 80214b8:	f001 fe06 	bl	80230c8 <arm_conv_f32>
 80214bc:	f8d7 d004 	ldr.w	sp, [r7, #4]
  {
 80214c0:	e522      	b.n	8020f08 <main+0x1c>

  }


  /* USER CODE END 3 */
}
 80214c2:	4618      	mov	r0, r3
 80214c4:	f607 37fc 	addw	r7, r7, #3068	; 0xbfc
 80214c8:	46bd      	mov	sp, r7
 80214ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214ce:	bf00      	nop

080214d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80214d0:	b580      	push	{r7, lr}
 80214d2:	b096      	sub	sp, #88	; 0x58
 80214d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80214d6:	f107 0314 	add.w	r3, r7, #20
 80214da:	2244      	movs	r2, #68	; 0x44
 80214dc:	2100      	movs	r1, #0
 80214de:	4618      	mov	r0, r3
 80214e0:	f002 f9d2 	bl	8023888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80214e4:	463b      	mov	r3, r7
 80214e6:	2200      	movs	r2, #0
 80214e8:	601a      	str	r2, [r3, #0]
 80214ea:	605a      	str	r2, [r3, #4]
 80214ec:	609a      	str	r2, [r3, #8]
 80214ee:	60da      	str	r2, [r3, #12]
 80214f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80214f2:	2000      	movs	r0, #0
 80214f4:	f000 fb26 	bl	8021b44 <HAL_PWREx_ControlVoltageScaling>
 80214f8:	4603      	mov	r3, r0
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d001      	beq.n	8021502 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80214fe:	f000 f851 	bl	80215a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8021502:	2310      	movs	r3, #16
 8021504:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8021506:	2301      	movs	r3, #1
 8021508:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 802150a:	2300      	movs	r3, #0
 802150c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 802150e:	2360      	movs	r3, #96	; 0x60
 8021510:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021512:	2302      	movs	r3, #2
 8021514:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8021516:	2301      	movs	r3, #1
 8021518:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 802151a:	2301      	movs	r3, #1
 802151c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 802151e:	233c      	movs	r3, #60	; 0x3c
 8021520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021522:	2302      	movs	r3, #2
 8021524:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8021526:	2302      	movs	r3, #2
 8021528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802152a:	2302      	movs	r3, #2
 802152c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802152e:	f107 0314 	add.w	r3, r7, #20
 8021532:	4618      	mov	r0, r3
 8021534:	f000 fbaa 	bl	8021c8c <HAL_RCC_OscConfig>
 8021538:	4603      	mov	r3, r0
 802153a:	2b00      	cmp	r3, #0
 802153c:	d001      	beq.n	8021542 <SystemClock_Config+0x72>
  {
    Error_Handler();
 802153e:	f000 f831 	bl	80215a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021542:	230f      	movs	r3, #15
 8021544:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021546:	2303      	movs	r3, #3
 8021548:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802154a:	2300      	movs	r3, #0
 802154c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802154e:	2300      	movs	r3, #0
 8021550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8021552:	2300      	movs	r3, #0
 8021554:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021556:	463b      	mov	r3, r7
 8021558:	2105      	movs	r1, #5
 802155a:	4618      	mov	r0, r3
 802155c:	f000 ffb0 	bl	80224c0 <HAL_RCC_ClockConfig>
 8021560:	4603      	mov	r3, r0
 8021562:	2b00      	cmp	r3, #0
 8021564:	d001      	beq.n	802156a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8021566:	f000 f81d 	bl	80215a4 <Error_Handler>
  }
}
 802156a:	bf00      	nop
 802156c:	3758      	adds	r7, #88	; 0x58
 802156e:	46bd      	mov	sp, r7
 8021570:	bd80      	pop	{r7, pc}
	...

08021574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8021574:	b480      	push	{r7}
 8021576:	b083      	sub	sp, #12
 8021578:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802157a:	4b09      	ldr	r3, [pc, #36]	; (80215a0 <MX_GPIO_Init+0x2c>)
 802157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802157e:	4a08      	ldr	r2, [pc, #32]	; (80215a0 <MX_GPIO_Init+0x2c>)
 8021580:	f043 0302 	orr.w	r3, r3, #2
 8021584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8021586:	4b06      	ldr	r3, [pc, #24]	; (80215a0 <MX_GPIO_Init+0x2c>)
 8021588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802158a:	f003 0302 	and.w	r3, r3, #2
 802158e:	607b      	str	r3, [r7, #4]
 8021590:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8021592:	bf00      	nop
 8021594:	370c      	adds	r7, #12
 8021596:	46bd      	mov	sp, r7
 8021598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802159c:	4770      	bx	lr
 802159e:	bf00      	nop
 80215a0:	40021000 	.word	0x40021000

080215a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80215a4:	b480      	push	{r7}
 80215a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80215a8:	b672      	cpsid	i
}
 80215aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80215ac:	e7fe      	b.n	80215ac <Error_Handler+0x8>
	...

080215b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80215b0:	b480      	push	{r7}
 80215b2:	b083      	sub	sp, #12
 80215b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80215b6:	4b0f      	ldr	r3, [pc, #60]	; (80215f4 <HAL_MspInit+0x44>)
 80215b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80215ba:	4a0e      	ldr	r2, [pc, #56]	; (80215f4 <HAL_MspInit+0x44>)
 80215bc:	f043 0301 	orr.w	r3, r3, #1
 80215c0:	6613      	str	r3, [r2, #96]	; 0x60
 80215c2:	4b0c      	ldr	r3, [pc, #48]	; (80215f4 <HAL_MspInit+0x44>)
 80215c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80215c6:	f003 0301 	and.w	r3, r3, #1
 80215ca:	607b      	str	r3, [r7, #4]
 80215cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80215ce:	4b09      	ldr	r3, [pc, #36]	; (80215f4 <HAL_MspInit+0x44>)
 80215d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80215d2:	4a08      	ldr	r2, [pc, #32]	; (80215f4 <HAL_MspInit+0x44>)
 80215d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80215d8:	6593      	str	r3, [r2, #88]	; 0x58
 80215da:	4b06      	ldr	r3, [pc, #24]	; (80215f4 <HAL_MspInit+0x44>)
 80215dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80215de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80215e2:	603b      	str	r3, [r7, #0]
 80215e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80215e6:	bf00      	nop
 80215e8:	370c      	adds	r7, #12
 80215ea:	46bd      	mov	sp, r7
 80215ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f0:	4770      	bx	lr
 80215f2:	bf00      	nop
 80215f4:	40021000 	.word	0x40021000

080215f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80215f8:	b480      	push	{r7}
 80215fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80215fc:	e7fe      	b.n	80215fc <NMI_Handler+0x4>

080215fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80215fe:	b480      	push	{r7}
 8021600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021602:	e7fe      	b.n	8021602 <HardFault_Handler+0x4>

08021604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021604:	b480      	push	{r7}
 8021606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021608:	e7fe      	b.n	8021608 <MemManage_Handler+0x4>

0802160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802160a:	b480      	push	{r7}
 802160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802160e:	e7fe      	b.n	802160e <BusFault_Handler+0x4>

08021610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021610:	b480      	push	{r7}
 8021612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021614:	e7fe      	b.n	8021614 <UsageFault_Handler+0x4>

08021616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021616:	b480      	push	{r7}
 8021618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802161a:	bf00      	nop
 802161c:	46bd      	mov	sp, r7
 802161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021622:	4770      	bx	lr

08021624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021624:	b480      	push	{r7}
 8021626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021628:	bf00      	nop
 802162a:	46bd      	mov	sp, r7
 802162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021630:	4770      	bx	lr

08021632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021632:	b480      	push	{r7}
 8021634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021636:	bf00      	nop
 8021638:	46bd      	mov	sp, r7
 802163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802163e:	4770      	bx	lr

08021640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021640:	b580      	push	{r7, lr}
 8021642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8021644:	f000 f958 	bl	80218f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021648:	bf00      	nop
 802164a:	bd80      	pop	{r7, pc}

0802164c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802164c:	b480      	push	{r7}
 802164e:	af00      	add	r7, sp, #0
	return 1;
 8021650:	2301      	movs	r3, #1
}
 8021652:	4618      	mov	r0, r3
 8021654:	46bd      	mov	sp, r7
 8021656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802165a:	4770      	bx	lr

0802165c <_kill>:

int _kill(int pid, int sig)
{
 802165c:	b580      	push	{r7, lr}
 802165e:	b082      	sub	sp, #8
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]
 8021664:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8021666:	f002 f8d7 	bl	8023818 <__errno>
 802166a:	4603      	mov	r3, r0
 802166c:	2216      	movs	r2, #22
 802166e:	601a      	str	r2, [r3, #0]
	return -1;
 8021670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021674:	4618      	mov	r0, r3
 8021676:	3708      	adds	r7, #8
 8021678:	46bd      	mov	sp, r7
 802167a:	bd80      	pop	{r7, pc}

0802167c <_exit>:

void _exit (int status)
{
 802167c:	b580      	push	{r7, lr}
 802167e:	b082      	sub	sp, #8
 8021680:	af00      	add	r7, sp, #0
 8021682:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8021684:	f04f 31ff 	mov.w	r1, #4294967295
 8021688:	6878      	ldr	r0, [r7, #4]
 802168a:	f7ff ffe7 	bl	802165c <_kill>
	while (1) {}		/* Make sure we hang here */
 802168e:	e7fe      	b.n	802168e <_exit+0x12>

08021690 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021690:	b580      	push	{r7, lr}
 8021692:	b086      	sub	sp, #24
 8021694:	af00      	add	r7, sp, #0
 8021696:	60f8      	str	r0, [r7, #12]
 8021698:	60b9      	str	r1, [r7, #8]
 802169a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802169c:	2300      	movs	r3, #0
 802169e:	617b      	str	r3, [r7, #20]
 80216a0:	e00a      	b.n	80216b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80216a2:	f3af 8000 	nop.w
 80216a6:	4601      	mov	r1, r0
 80216a8:	68bb      	ldr	r3, [r7, #8]
 80216aa:	1c5a      	adds	r2, r3, #1
 80216ac:	60ba      	str	r2, [r7, #8]
 80216ae:	b2ca      	uxtb	r2, r1
 80216b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216b2:	697b      	ldr	r3, [r7, #20]
 80216b4:	3301      	adds	r3, #1
 80216b6:	617b      	str	r3, [r7, #20]
 80216b8:	697a      	ldr	r2, [r7, #20]
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	429a      	cmp	r2, r3
 80216be:	dbf0      	blt.n	80216a2 <_read+0x12>
	}

return len;
 80216c0:	687b      	ldr	r3, [r7, #4]
}
 80216c2:	4618      	mov	r0, r3
 80216c4:	3718      	adds	r7, #24
 80216c6:	46bd      	mov	sp, r7
 80216c8:	bd80      	pop	{r7, pc}

080216ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80216ca:	b580      	push	{r7, lr}
 80216cc:	b086      	sub	sp, #24
 80216ce:	af00      	add	r7, sp, #0
 80216d0:	60f8      	str	r0, [r7, #12]
 80216d2:	60b9      	str	r1, [r7, #8]
 80216d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216d6:	2300      	movs	r3, #0
 80216d8:	617b      	str	r3, [r7, #20]
 80216da:	e009      	b.n	80216f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80216dc:	68bb      	ldr	r3, [r7, #8]
 80216de:	1c5a      	adds	r2, r3, #1
 80216e0:	60ba      	str	r2, [r7, #8]
 80216e2:	781b      	ldrb	r3, [r3, #0]
 80216e4:	4618      	mov	r0, r3
 80216e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216ea:	697b      	ldr	r3, [r7, #20]
 80216ec:	3301      	adds	r3, #1
 80216ee:	617b      	str	r3, [r7, #20]
 80216f0:	697a      	ldr	r2, [r7, #20]
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	429a      	cmp	r2, r3
 80216f6:	dbf1      	blt.n	80216dc <_write+0x12>
	}
	return len;
 80216f8:	687b      	ldr	r3, [r7, #4]
}
 80216fa:	4618      	mov	r0, r3
 80216fc:	3718      	adds	r7, #24
 80216fe:	46bd      	mov	sp, r7
 8021700:	bd80      	pop	{r7, pc}

08021702 <_close>:

int _close(int file)
{
 8021702:	b480      	push	{r7}
 8021704:	b083      	sub	sp, #12
 8021706:	af00      	add	r7, sp, #0
 8021708:	6078      	str	r0, [r7, #4]
	return -1;
 802170a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802170e:	4618      	mov	r0, r3
 8021710:	370c      	adds	r7, #12
 8021712:	46bd      	mov	sp, r7
 8021714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021718:	4770      	bx	lr

0802171a <_fstat>:


int _fstat(int file, struct stat *st)
{
 802171a:	b480      	push	{r7}
 802171c:	b083      	sub	sp, #12
 802171e:	af00      	add	r7, sp, #0
 8021720:	6078      	str	r0, [r7, #4]
 8021722:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8021724:	683b      	ldr	r3, [r7, #0]
 8021726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802172a:	605a      	str	r2, [r3, #4]
	return 0;
 802172c:	2300      	movs	r3, #0
}
 802172e:	4618      	mov	r0, r3
 8021730:	370c      	adds	r7, #12
 8021732:	46bd      	mov	sp, r7
 8021734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021738:	4770      	bx	lr

0802173a <_isatty>:

int _isatty(int file)
{
 802173a:	b480      	push	{r7}
 802173c:	b083      	sub	sp, #12
 802173e:	af00      	add	r7, sp, #0
 8021740:	6078      	str	r0, [r7, #4]
	return 1;
 8021742:	2301      	movs	r3, #1
}
 8021744:	4618      	mov	r0, r3
 8021746:	370c      	adds	r7, #12
 8021748:	46bd      	mov	sp, r7
 802174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802174e:	4770      	bx	lr

08021750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021750:	b480      	push	{r7}
 8021752:	b085      	sub	sp, #20
 8021754:	af00      	add	r7, sp, #0
 8021756:	60f8      	str	r0, [r7, #12]
 8021758:	60b9      	str	r1, [r7, #8]
 802175a:	607a      	str	r2, [r7, #4]
	return 0;
 802175c:	2300      	movs	r3, #0
}
 802175e:	4618      	mov	r0, r3
 8021760:	3714      	adds	r7, #20
 8021762:	46bd      	mov	sp, r7
 8021764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021768:	4770      	bx	lr
	...

0802176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802176c:	b580      	push	{r7, lr}
 802176e:	b086      	sub	sp, #24
 8021770:	af00      	add	r7, sp, #0
 8021772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021774:	4a14      	ldr	r2, [pc, #80]	; (80217c8 <_sbrk+0x5c>)
 8021776:	4b15      	ldr	r3, [pc, #84]	; (80217cc <_sbrk+0x60>)
 8021778:	1ad3      	subs	r3, r2, r3
 802177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802177c:	697b      	ldr	r3, [r7, #20]
 802177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021780:	4b13      	ldr	r3, [pc, #76]	; (80217d0 <_sbrk+0x64>)
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	2b00      	cmp	r3, #0
 8021786:	d102      	bne.n	802178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021788:	4b11      	ldr	r3, [pc, #68]	; (80217d0 <_sbrk+0x64>)
 802178a:	4a12      	ldr	r2, [pc, #72]	; (80217d4 <_sbrk+0x68>)
 802178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802178e:	4b10      	ldr	r3, [pc, #64]	; (80217d0 <_sbrk+0x64>)
 8021790:	681a      	ldr	r2, [r3, #0]
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	4413      	add	r3, r2
 8021796:	693a      	ldr	r2, [r7, #16]
 8021798:	429a      	cmp	r2, r3
 802179a:	d207      	bcs.n	80217ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 802179c:	f002 f83c 	bl	8023818 <__errno>
 80217a0:	4603      	mov	r3, r0
 80217a2:	220c      	movs	r2, #12
 80217a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80217a6:	f04f 33ff 	mov.w	r3, #4294967295
 80217aa:	e009      	b.n	80217c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80217ac:	4b08      	ldr	r3, [pc, #32]	; (80217d0 <_sbrk+0x64>)
 80217ae:	681b      	ldr	r3, [r3, #0]
 80217b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80217b2:	4b07      	ldr	r3, [pc, #28]	; (80217d0 <_sbrk+0x64>)
 80217b4:	681a      	ldr	r2, [r3, #0]
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	4413      	add	r3, r2
 80217ba:	4a05      	ldr	r2, [pc, #20]	; (80217d0 <_sbrk+0x64>)
 80217bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80217be:	68fb      	ldr	r3, [r7, #12]
}
 80217c0:	4618      	mov	r0, r3
 80217c2:	3718      	adds	r7, #24
 80217c4:	46bd      	mov	sp, r7
 80217c6:	bd80      	pop	{r7, pc}
 80217c8:	200a0000 	.word	0x200a0000
 80217cc:	00000400 	.word	0x00000400
 80217d0:	200001f8 	.word	0x200001f8
 80217d4:	20000210 	.word	0x20000210

080217d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80217d8:	b480      	push	{r7}
 80217da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80217dc:	4b06      	ldr	r3, [pc, #24]	; (80217f8 <SystemInit+0x20>)
 80217de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80217e2:	4a05      	ldr	r2, [pc, #20]	; (80217f8 <SystemInit+0x20>)
 80217e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80217e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80217ec:	bf00      	nop
 80217ee:	46bd      	mov	sp, r7
 80217f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217f4:	4770      	bx	lr
 80217f6:	bf00      	nop
 80217f8:	e000ed00 	.word	0xe000ed00

080217fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80217fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021834 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8021800:	f7ff ffea 	bl	80217d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8021804:	480c      	ldr	r0, [pc, #48]	; (8021838 <LoopForever+0x6>)
  ldr r1, =_edata
 8021806:	490d      	ldr	r1, [pc, #52]	; (802183c <LoopForever+0xa>)
  ldr r2, =_sidata
 8021808:	4a0d      	ldr	r2, [pc, #52]	; (8021840 <LoopForever+0xe>)
  movs r3, #0
 802180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802180c:	e002      	b.n	8021814 <LoopCopyDataInit>

0802180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021812:	3304      	adds	r3, #4

08021814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021818:	d3f9      	bcc.n	802180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802181a:	4a0a      	ldr	r2, [pc, #40]	; (8021844 <LoopForever+0x12>)
  ldr r4, =_ebss
 802181c:	4c0a      	ldr	r4, [pc, #40]	; (8021848 <LoopForever+0x16>)
  movs r3, #0
 802181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021820:	e001      	b.n	8021826 <LoopFillZerobss>

08021822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021824:	3204      	adds	r2, #4

08021826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021828:	d3fb      	bcc.n	8021822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802182a:	f001 fffb 	bl	8023824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 802182e:	f7ff fb5d 	bl	8020eec <main>

08021832 <LoopForever>:

LoopForever:
    b LoopForever
 8021832:	e7fe      	b.n	8021832 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8021834:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8021838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802183c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8021840:	080268bc 	.word	0x080268bc
  ldr r2, =_sbss
 8021844:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8021848:	20000210 	.word	0x20000210

0802184c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 802184c:	e7fe      	b.n	802184c <ADC1_IRQHandler>

0802184e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802184e:	b580      	push	{r7, lr}
 8021850:	b082      	sub	sp, #8
 8021852:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8021854:	2300      	movs	r3, #0
 8021856:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021858:	2003      	movs	r0, #3
 802185a:	f000 f91f 	bl	8021a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802185e:	2000      	movs	r0, #0
 8021860:	f000 f80e 	bl	8021880 <HAL_InitTick>
 8021864:	4603      	mov	r3, r0
 8021866:	2b00      	cmp	r3, #0
 8021868:	d002      	beq.n	8021870 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 802186a:	2301      	movs	r3, #1
 802186c:	71fb      	strb	r3, [r7, #7]
 802186e:	e001      	b.n	8021874 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8021870:	f7ff fe9e 	bl	80215b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8021874:	79fb      	ldrb	r3, [r7, #7]
}
 8021876:	4618      	mov	r0, r3
 8021878:	3708      	adds	r7, #8
 802187a:	46bd      	mov	sp, r7
 802187c:	bd80      	pop	{r7, pc}
	...

08021880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021880:	b580      	push	{r7, lr}
 8021882:	b084      	sub	sp, #16
 8021884:	af00      	add	r7, sp, #0
 8021886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8021888:	2300      	movs	r3, #0
 802188a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 802188c:	4b17      	ldr	r3, [pc, #92]	; (80218ec <HAL_InitTick+0x6c>)
 802188e:	781b      	ldrb	r3, [r3, #0]
 8021890:	2b00      	cmp	r3, #0
 8021892:	d023      	beq.n	80218dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8021894:	4b16      	ldr	r3, [pc, #88]	; (80218f0 <HAL_InitTick+0x70>)
 8021896:	681a      	ldr	r2, [r3, #0]
 8021898:	4b14      	ldr	r3, [pc, #80]	; (80218ec <HAL_InitTick+0x6c>)
 802189a:	781b      	ldrb	r3, [r3, #0]
 802189c:	4619      	mov	r1, r3
 802189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80218a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80218a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80218aa:	4618      	mov	r0, r3
 80218ac:	f000 f91d 	bl	8021aea <HAL_SYSTICK_Config>
 80218b0:	4603      	mov	r3, r0
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d10f      	bne.n	80218d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	2b0f      	cmp	r3, #15
 80218ba:	d809      	bhi.n	80218d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80218bc:	2200      	movs	r2, #0
 80218be:	6879      	ldr	r1, [r7, #4]
 80218c0:	f04f 30ff 	mov.w	r0, #4294967295
 80218c4:	f000 f8f5 	bl	8021ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80218c8:	4a0a      	ldr	r2, [pc, #40]	; (80218f4 <HAL_InitTick+0x74>)
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	6013      	str	r3, [r2, #0]
 80218ce:	e007      	b.n	80218e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80218d0:	2301      	movs	r3, #1
 80218d2:	73fb      	strb	r3, [r7, #15]
 80218d4:	e004      	b.n	80218e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80218d6:	2301      	movs	r3, #1
 80218d8:	73fb      	strb	r3, [r7, #15]
 80218da:	e001      	b.n	80218e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80218dc:	2301      	movs	r3, #1
 80218de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80218e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80218e2:	4618      	mov	r0, r3
 80218e4:	3710      	adds	r7, #16
 80218e6:	46bd      	mov	sp, r7
 80218e8:	bd80      	pop	{r7, pc}
 80218ea:	bf00      	nop
 80218ec:	20000008 	.word	0x20000008
 80218f0:	20000000 	.word	0x20000000
 80218f4:	20000004 	.word	0x20000004

080218f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80218f8:	b480      	push	{r7}
 80218fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80218fc:	4b06      	ldr	r3, [pc, #24]	; (8021918 <HAL_IncTick+0x20>)
 80218fe:	781b      	ldrb	r3, [r3, #0]
 8021900:	461a      	mov	r2, r3
 8021902:	4b06      	ldr	r3, [pc, #24]	; (802191c <HAL_IncTick+0x24>)
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	4413      	add	r3, r2
 8021908:	4a04      	ldr	r2, [pc, #16]	; (802191c <HAL_IncTick+0x24>)
 802190a:	6013      	str	r3, [r2, #0]
}
 802190c:	bf00      	nop
 802190e:	46bd      	mov	sp, r7
 8021910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021914:	4770      	bx	lr
 8021916:	bf00      	nop
 8021918:	20000008 	.word	0x20000008
 802191c:	200001fc 	.word	0x200001fc

08021920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021920:	b480      	push	{r7}
 8021922:	af00      	add	r7, sp, #0
  return uwTick;
 8021924:	4b03      	ldr	r3, [pc, #12]	; (8021934 <HAL_GetTick+0x14>)
 8021926:	681b      	ldr	r3, [r3, #0]
}
 8021928:	4618      	mov	r0, r3
 802192a:	46bd      	mov	sp, r7
 802192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021930:	4770      	bx	lr
 8021932:	bf00      	nop
 8021934:	200001fc 	.word	0x200001fc

08021938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021938:	b480      	push	{r7}
 802193a:	b085      	sub	sp, #20
 802193c:	af00      	add	r7, sp, #0
 802193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	f003 0307 	and.w	r3, r3, #7
 8021946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021948:	4b0c      	ldr	r3, [pc, #48]	; (802197c <__NVIC_SetPriorityGrouping+0x44>)
 802194a:	68db      	ldr	r3, [r3, #12]
 802194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802194e:	68ba      	ldr	r2, [r7, #8]
 8021950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8021954:	4013      	ands	r3, r2
 8021956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021958:	68fb      	ldr	r3, [r7, #12]
 802195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802195c:	68bb      	ldr	r3, [r7, #8]
 802195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8021960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8021964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802196a:	4a04      	ldr	r2, [pc, #16]	; (802197c <__NVIC_SetPriorityGrouping+0x44>)
 802196c:	68bb      	ldr	r3, [r7, #8]
 802196e:	60d3      	str	r3, [r2, #12]
}
 8021970:	bf00      	nop
 8021972:	3714      	adds	r7, #20
 8021974:	46bd      	mov	sp, r7
 8021976:	f85d 7b04 	ldr.w	r7, [sp], #4
 802197a:	4770      	bx	lr
 802197c:	e000ed00 	.word	0xe000ed00

08021980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021980:	b480      	push	{r7}
 8021982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021984:	4b04      	ldr	r3, [pc, #16]	; (8021998 <__NVIC_GetPriorityGrouping+0x18>)
 8021986:	68db      	ldr	r3, [r3, #12]
 8021988:	0a1b      	lsrs	r3, r3, #8
 802198a:	f003 0307 	and.w	r3, r3, #7
}
 802198e:	4618      	mov	r0, r3
 8021990:	46bd      	mov	sp, r7
 8021992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021996:	4770      	bx	lr
 8021998:	e000ed00 	.word	0xe000ed00

0802199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802199c:	b480      	push	{r7}
 802199e:	b083      	sub	sp, #12
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	4603      	mov	r3, r0
 80219a4:	6039      	str	r1, [r7, #0]
 80219a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80219a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	db0a      	blt.n	80219c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80219b0:	683b      	ldr	r3, [r7, #0]
 80219b2:	b2da      	uxtb	r2, r3
 80219b4:	490c      	ldr	r1, [pc, #48]	; (80219e8 <__NVIC_SetPriority+0x4c>)
 80219b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80219ba:	0112      	lsls	r2, r2, #4
 80219bc:	b2d2      	uxtb	r2, r2
 80219be:	440b      	add	r3, r1
 80219c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80219c4:	e00a      	b.n	80219dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80219c6:	683b      	ldr	r3, [r7, #0]
 80219c8:	b2da      	uxtb	r2, r3
 80219ca:	4908      	ldr	r1, [pc, #32]	; (80219ec <__NVIC_SetPriority+0x50>)
 80219cc:	79fb      	ldrb	r3, [r7, #7]
 80219ce:	f003 030f 	and.w	r3, r3, #15
 80219d2:	3b04      	subs	r3, #4
 80219d4:	0112      	lsls	r2, r2, #4
 80219d6:	b2d2      	uxtb	r2, r2
 80219d8:	440b      	add	r3, r1
 80219da:	761a      	strb	r2, [r3, #24]
}
 80219dc:	bf00      	nop
 80219de:	370c      	adds	r7, #12
 80219e0:	46bd      	mov	sp, r7
 80219e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219e6:	4770      	bx	lr
 80219e8:	e000e100 	.word	0xe000e100
 80219ec:	e000ed00 	.word	0xe000ed00

080219f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80219f0:	b480      	push	{r7}
 80219f2:	b089      	sub	sp, #36	; 0x24
 80219f4:	af00      	add	r7, sp, #0
 80219f6:	60f8      	str	r0, [r7, #12]
 80219f8:	60b9      	str	r1, [r7, #8]
 80219fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80219fc:	68fb      	ldr	r3, [r7, #12]
 80219fe:	f003 0307 	and.w	r3, r3, #7
 8021a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8021a04:	69fb      	ldr	r3, [r7, #28]
 8021a06:	f1c3 0307 	rsb	r3, r3, #7
 8021a0a:	2b04      	cmp	r3, #4
 8021a0c:	bf28      	it	cs
 8021a0e:	2304      	movcs	r3, #4
 8021a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021a12:	69fb      	ldr	r3, [r7, #28]
 8021a14:	3304      	adds	r3, #4
 8021a16:	2b06      	cmp	r3, #6
 8021a18:	d902      	bls.n	8021a20 <NVIC_EncodePriority+0x30>
 8021a1a:	69fb      	ldr	r3, [r7, #28]
 8021a1c:	3b03      	subs	r3, #3
 8021a1e:	e000      	b.n	8021a22 <NVIC_EncodePriority+0x32>
 8021a20:	2300      	movs	r3, #0
 8021a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021a24:	f04f 32ff 	mov.w	r2, #4294967295
 8021a28:	69bb      	ldr	r3, [r7, #24]
 8021a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8021a2e:	43da      	mvns	r2, r3
 8021a30:	68bb      	ldr	r3, [r7, #8]
 8021a32:	401a      	ands	r2, r3
 8021a34:	697b      	ldr	r3, [r7, #20]
 8021a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8021a38:	f04f 31ff 	mov.w	r1, #4294967295
 8021a3c:	697b      	ldr	r3, [r7, #20]
 8021a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8021a42:	43d9      	mvns	r1, r3
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021a48:	4313      	orrs	r3, r2
         );
}
 8021a4a:	4618      	mov	r0, r3
 8021a4c:	3724      	adds	r7, #36	; 0x24
 8021a4e:	46bd      	mov	sp, r7
 8021a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a54:	4770      	bx	lr
	...

08021a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8021a58:	b580      	push	{r7, lr}
 8021a5a:	b082      	sub	sp, #8
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	3b01      	subs	r3, #1
 8021a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8021a68:	d301      	bcc.n	8021a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8021a6a:	2301      	movs	r3, #1
 8021a6c:	e00f      	b.n	8021a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021a6e:	4a0a      	ldr	r2, [pc, #40]	; (8021a98 <SysTick_Config+0x40>)
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	3b01      	subs	r3, #1
 8021a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8021a76:	210f      	movs	r1, #15
 8021a78:	f04f 30ff 	mov.w	r0, #4294967295
 8021a7c:	f7ff ff8e 	bl	802199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021a80:	4b05      	ldr	r3, [pc, #20]	; (8021a98 <SysTick_Config+0x40>)
 8021a82:	2200      	movs	r2, #0
 8021a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021a86:	4b04      	ldr	r3, [pc, #16]	; (8021a98 <SysTick_Config+0x40>)
 8021a88:	2207      	movs	r2, #7
 8021a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021a8c:	2300      	movs	r3, #0
}
 8021a8e:	4618      	mov	r0, r3
 8021a90:	3708      	adds	r7, #8
 8021a92:	46bd      	mov	sp, r7
 8021a94:	bd80      	pop	{r7, pc}
 8021a96:	bf00      	nop
 8021a98:	e000e010 	.word	0xe000e010

08021a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021a9c:	b580      	push	{r7, lr}
 8021a9e:	b082      	sub	sp, #8
 8021aa0:	af00      	add	r7, sp, #0
 8021aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021aa4:	6878      	ldr	r0, [r7, #4]
 8021aa6:	f7ff ff47 	bl	8021938 <__NVIC_SetPriorityGrouping>
}
 8021aaa:	bf00      	nop
 8021aac:	3708      	adds	r7, #8
 8021aae:	46bd      	mov	sp, r7
 8021ab0:	bd80      	pop	{r7, pc}

08021ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021ab2:	b580      	push	{r7, lr}
 8021ab4:	b086      	sub	sp, #24
 8021ab6:	af00      	add	r7, sp, #0
 8021ab8:	4603      	mov	r3, r0
 8021aba:	60b9      	str	r1, [r7, #8]
 8021abc:	607a      	str	r2, [r7, #4]
 8021abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8021ac0:	2300      	movs	r3, #0
 8021ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8021ac4:	f7ff ff5c 	bl	8021980 <__NVIC_GetPriorityGrouping>
 8021ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021aca:	687a      	ldr	r2, [r7, #4]
 8021acc:	68b9      	ldr	r1, [r7, #8]
 8021ace:	6978      	ldr	r0, [r7, #20]
 8021ad0:	f7ff ff8e 	bl	80219f0 <NVIC_EncodePriority>
 8021ad4:	4602      	mov	r2, r0
 8021ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021ada:	4611      	mov	r1, r2
 8021adc:	4618      	mov	r0, r3
 8021ade:	f7ff ff5d 	bl	802199c <__NVIC_SetPriority>
}
 8021ae2:	bf00      	nop
 8021ae4:	3718      	adds	r7, #24
 8021ae6:	46bd      	mov	sp, r7
 8021ae8:	bd80      	pop	{r7, pc}

08021aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8021aea:	b580      	push	{r7, lr}
 8021aec:	b082      	sub	sp, #8
 8021aee:	af00      	add	r7, sp, #0
 8021af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8021af2:	6878      	ldr	r0, [r7, #4]
 8021af4:	f7ff ffb0 	bl	8021a58 <SysTick_Config>
 8021af8:	4603      	mov	r3, r0
}
 8021afa:	4618      	mov	r0, r3
 8021afc:	3708      	adds	r7, #8
 8021afe:	46bd      	mov	sp, r7
 8021b00:	bd80      	pop	{r7, pc}
	...

08021b04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8021b04:	b480      	push	{r7}
 8021b06:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b08:	4b0d      	ldr	r3, [pc, #52]	; (8021b40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8021b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021b14:	d102      	bne.n	8021b1c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8021b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021b1a:	e00b      	b.n	8021b34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8021b1c:	4b08      	ldr	r3, [pc, #32]	; (8021b40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8021b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021b2a:	d102      	bne.n	8021b32 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8021b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021b30:	e000      	b.n	8021b34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8021b32:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8021b34:	4618      	mov	r0, r3
 8021b36:	46bd      	mov	sp, r7
 8021b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b3c:	4770      	bx	lr
 8021b3e:	bf00      	nop
 8021b40:	40007000 	.word	0x40007000

08021b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8021b44:	b480      	push	{r7}
 8021b46:	b085      	sub	sp, #20
 8021b48:	af00      	add	r7, sp, #0
 8021b4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	d141      	bne.n	8021bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b52:	4b4b      	ldr	r3, [pc, #300]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b54:	681b      	ldr	r3, [r3, #0]
 8021b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8021b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021b5e:	d131      	bne.n	8021bc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021b60:	4b47      	ldr	r3, [pc, #284]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021b66:	4a46      	ldr	r2, [pc, #280]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021b70:	4b43      	ldr	r3, [pc, #268]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b72:	681b      	ldr	r3, [r3, #0]
 8021b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8021b78:	4a41      	ldr	r2, [pc, #260]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021b80:	4b40      	ldr	r3, [pc, #256]	; (8021c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8021b82:	681b      	ldr	r3, [r3, #0]
 8021b84:	2232      	movs	r2, #50	; 0x32
 8021b86:	fb02 f303 	mul.w	r3, r2, r3
 8021b8a:	4a3f      	ldr	r2, [pc, #252]	; (8021c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8021b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8021b90:	0c9b      	lsrs	r3, r3, #18
 8021b92:	3301      	adds	r3, #1
 8021b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021b96:	e002      	b.n	8021b9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8021b98:	68fb      	ldr	r3, [r7, #12]
 8021b9a:	3b01      	subs	r3, #1
 8021b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021b9e:	4b38      	ldr	r3, [pc, #224]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021ba0:	695b      	ldr	r3, [r3, #20]
 8021ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021baa:	d102      	bne.n	8021bb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8021bac:	68fb      	ldr	r3, [r7, #12]
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d1f2      	bne.n	8021b98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021bb2:	4b33      	ldr	r3, [pc, #204]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bb4:	695b      	ldr	r3, [r3, #20]
 8021bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021bbe:	d158      	bne.n	8021c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8021bc0:	2303      	movs	r3, #3
 8021bc2:	e057      	b.n	8021c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021bc4:	4b2e      	ldr	r3, [pc, #184]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021bca:	4a2d      	ldr	r2, [pc, #180]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8021bd4:	e04d      	b.n	8021c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021bdc:	d141      	bne.n	8021c62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021bde:	4b28      	ldr	r3, [pc, #160]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021be0:	681b      	ldr	r3, [r3, #0]
 8021be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8021be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021bea:	d131      	bne.n	8021c50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021bec:	4b24      	ldr	r3, [pc, #144]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021bf2:	4a23      	ldr	r2, [pc, #140]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021bfc:	4b20      	ldr	r3, [pc, #128]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bfe:	681b      	ldr	r3, [r3, #0]
 8021c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8021c04:	4a1e      	ldr	r2, [pc, #120]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021c0c:	4b1d      	ldr	r3, [pc, #116]	; (8021c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	2232      	movs	r2, #50	; 0x32
 8021c12:	fb02 f303 	mul.w	r3, r2, r3
 8021c16:	4a1c      	ldr	r2, [pc, #112]	; (8021c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8021c18:	fba2 2303 	umull	r2, r3, r2, r3
 8021c1c:	0c9b      	lsrs	r3, r3, #18
 8021c1e:	3301      	adds	r3, #1
 8021c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021c22:	e002      	b.n	8021c2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8021c24:	68fb      	ldr	r3, [r7, #12]
 8021c26:	3b01      	subs	r3, #1
 8021c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021c2a:	4b15      	ldr	r3, [pc, #84]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c2c:	695b      	ldr	r3, [r3, #20]
 8021c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021c36:	d102      	bne.n	8021c3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8021c38:	68fb      	ldr	r3, [r7, #12]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d1f2      	bne.n	8021c24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021c3e:	4b10      	ldr	r3, [pc, #64]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c40:	695b      	ldr	r3, [r3, #20]
 8021c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021c4a:	d112      	bne.n	8021c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8021c4c:	2303      	movs	r3, #3
 8021c4e:	e011      	b.n	8021c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021c50:	4b0b      	ldr	r3, [pc, #44]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021c56:	4a0a      	ldr	r2, [pc, #40]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8021c60:	e007      	b.n	8021c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8021c62:	4b07      	ldr	r3, [pc, #28]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c64:	681b      	ldr	r3, [r3, #0]
 8021c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8021c6a:	4a05      	ldr	r2, [pc, #20]	; (8021c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021c70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8021c72:	2300      	movs	r3, #0
}
 8021c74:	4618      	mov	r0, r3
 8021c76:	3714      	adds	r7, #20
 8021c78:	46bd      	mov	sp, r7
 8021c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c7e:	4770      	bx	lr
 8021c80:	40007000 	.word	0x40007000
 8021c84:	20000000 	.word	0x20000000
 8021c88:	431bde83 	.word	0x431bde83

08021c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021c8c:	b580      	push	{r7, lr}
 8021c8e:	b088      	sub	sp, #32
 8021c90:	af00      	add	r7, sp, #0
 8021c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d102      	bne.n	8021ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8021c9a:	2301      	movs	r3, #1
 8021c9c:	f000 bc08 	b.w	80224b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021ca0:	4b96      	ldr	r3, [pc, #600]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021ca2:	689b      	ldr	r3, [r3, #8]
 8021ca4:	f003 030c 	and.w	r3, r3, #12
 8021ca8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021caa:	4b94      	ldr	r3, [pc, #592]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021cac:	68db      	ldr	r3, [r3, #12]
 8021cae:	f003 0303 	and.w	r3, r3, #3
 8021cb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	681b      	ldr	r3, [r3, #0]
 8021cb8:	f003 0310 	and.w	r3, r3, #16
 8021cbc:	2b00      	cmp	r3, #0
 8021cbe:	f000 80e4 	beq.w	8021e8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021cc2:	69bb      	ldr	r3, [r7, #24]
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d007      	beq.n	8021cd8 <HAL_RCC_OscConfig+0x4c>
 8021cc8:	69bb      	ldr	r3, [r7, #24]
 8021cca:	2b0c      	cmp	r3, #12
 8021ccc:	f040 808b 	bne.w	8021de6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021cd0:	697b      	ldr	r3, [r7, #20]
 8021cd2:	2b01      	cmp	r3, #1
 8021cd4:	f040 8087 	bne.w	8021de6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021cd8:	4b88      	ldr	r3, [pc, #544]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021cda:	681b      	ldr	r3, [r3, #0]
 8021cdc:	f003 0302 	and.w	r3, r3, #2
 8021ce0:	2b00      	cmp	r3, #0
 8021ce2:	d005      	beq.n	8021cf0 <HAL_RCC_OscConfig+0x64>
 8021ce4:	687b      	ldr	r3, [r7, #4]
 8021ce6:	699b      	ldr	r3, [r3, #24]
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	d101      	bne.n	8021cf0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8021cec:	2301      	movs	r3, #1
 8021cee:	e3df      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	6a1a      	ldr	r2, [r3, #32]
 8021cf4:	4b81      	ldr	r3, [pc, #516]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021cf6:	681b      	ldr	r3, [r3, #0]
 8021cf8:	f003 0308 	and.w	r3, r3, #8
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d004      	beq.n	8021d0a <HAL_RCC_OscConfig+0x7e>
 8021d00:	4b7e      	ldr	r3, [pc, #504]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d02:	681b      	ldr	r3, [r3, #0]
 8021d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021d08:	e005      	b.n	8021d16 <HAL_RCC_OscConfig+0x8a>
 8021d0a:	4b7c      	ldr	r3, [pc, #496]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021d10:	091b      	lsrs	r3, r3, #4
 8021d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021d16:	4293      	cmp	r3, r2
 8021d18:	d223      	bcs.n	8021d62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	6a1b      	ldr	r3, [r3, #32]
 8021d1e:	4618      	mov	r0, r3
 8021d20:	f000 fd94 	bl	802284c <RCC_SetFlashLatencyFromMSIRange>
 8021d24:	4603      	mov	r3, r0
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d001      	beq.n	8021d2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8021d2a:	2301      	movs	r3, #1
 8021d2c:	e3c0      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021d2e:	4b73      	ldr	r3, [pc, #460]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d30:	681b      	ldr	r3, [r3, #0]
 8021d32:	4a72      	ldr	r2, [pc, #456]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d34:	f043 0308 	orr.w	r3, r3, #8
 8021d38:	6013      	str	r3, [r2, #0]
 8021d3a:	4b70      	ldr	r3, [pc, #448]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	6a1b      	ldr	r3, [r3, #32]
 8021d46:	496d      	ldr	r1, [pc, #436]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d48:	4313      	orrs	r3, r2
 8021d4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021d4c:	4b6b      	ldr	r3, [pc, #428]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d4e:	685b      	ldr	r3, [r3, #4]
 8021d50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	69db      	ldr	r3, [r3, #28]
 8021d58:	021b      	lsls	r3, r3, #8
 8021d5a:	4968      	ldr	r1, [pc, #416]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d5c:	4313      	orrs	r3, r2
 8021d5e:	604b      	str	r3, [r1, #4]
 8021d60:	e025      	b.n	8021dae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021d62:	4b66      	ldr	r3, [pc, #408]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	4a65      	ldr	r2, [pc, #404]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d68:	f043 0308 	orr.w	r3, r3, #8
 8021d6c:	6013      	str	r3, [r2, #0]
 8021d6e:	4b63      	ldr	r3, [pc, #396]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d70:	681b      	ldr	r3, [r3, #0]
 8021d72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021d76:	687b      	ldr	r3, [r7, #4]
 8021d78:	6a1b      	ldr	r3, [r3, #32]
 8021d7a:	4960      	ldr	r1, [pc, #384]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d7c:	4313      	orrs	r3, r2
 8021d7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021d80:	4b5e      	ldr	r3, [pc, #376]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d82:	685b      	ldr	r3, [r3, #4]
 8021d84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	69db      	ldr	r3, [r3, #28]
 8021d8c:	021b      	lsls	r3, r3, #8
 8021d8e:	495b      	ldr	r1, [pc, #364]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021d90:	4313      	orrs	r3, r2
 8021d92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021d94:	69bb      	ldr	r3, [r7, #24]
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	d109      	bne.n	8021dae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	6a1b      	ldr	r3, [r3, #32]
 8021d9e:	4618      	mov	r0, r3
 8021da0:	f000 fd54 	bl	802284c <RCC_SetFlashLatencyFromMSIRange>
 8021da4:	4603      	mov	r3, r0
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	d001      	beq.n	8021dae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8021daa:	2301      	movs	r3, #1
 8021dac:	e380      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021dae:	f000 fcc1 	bl	8022734 <HAL_RCC_GetSysClockFreq>
 8021db2:	4602      	mov	r2, r0
 8021db4:	4b51      	ldr	r3, [pc, #324]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021db6:	689b      	ldr	r3, [r3, #8]
 8021db8:	091b      	lsrs	r3, r3, #4
 8021dba:	f003 030f 	and.w	r3, r3, #15
 8021dbe:	4950      	ldr	r1, [pc, #320]	; (8021f00 <HAL_RCC_OscConfig+0x274>)
 8021dc0:	5ccb      	ldrb	r3, [r1, r3]
 8021dc2:	f003 031f 	and.w	r3, r3, #31
 8021dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8021dca:	4a4e      	ldr	r2, [pc, #312]	; (8021f04 <HAL_RCC_OscConfig+0x278>)
 8021dcc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8021dce:	4b4e      	ldr	r3, [pc, #312]	; (8021f08 <HAL_RCC_OscConfig+0x27c>)
 8021dd0:	681b      	ldr	r3, [r3, #0]
 8021dd2:	4618      	mov	r0, r3
 8021dd4:	f7ff fd54 	bl	8021880 <HAL_InitTick>
 8021dd8:	4603      	mov	r3, r0
 8021dda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8021ddc:	7bfb      	ldrb	r3, [r7, #15]
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	d052      	beq.n	8021e88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8021de2:	7bfb      	ldrb	r3, [r7, #15]
 8021de4:	e364      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	699b      	ldr	r3, [r3, #24]
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d032      	beq.n	8021e54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8021dee:	4b43      	ldr	r3, [pc, #268]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	4a42      	ldr	r2, [pc, #264]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021df4:	f043 0301 	orr.w	r3, r3, #1
 8021df8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021dfa:	f7ff fd91 	bl	8021920 <HAL_GetTick>
 8021dfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021e00:	e008      	b.n	8021e14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021e02:	f7ff fd8d 	bl	8021920 <HAL_GetTick>
 8021e06:	4602      	mov	r2, r0
 8021e08:	693b      	ldr	r3, [r7, #16]
 8021e0a:	1ad3      	subs	r3, r2, r3
 8021e0c:	2b02      	cmp	r3, #2
 8021e0e:	d901      	bls.n	8021e14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8021e10:	2303      	movs	r3, #3
 8021e12:	e34d      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021e14:	4b39      	ldr	r3, [pc, #228]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e16:	681b      	ldr	r3, [r3, #0]
 8021e18:	f003 0302 	and.w	r3, r3, #2
 8021e1c:	2b00      	cmp	r3, #0
 8021e1e:	d0f0      	beq.n	8021e02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021e20:	4b36      	ldr	r3, [pc, #216]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	4a35      	ldr	r2, [pc, #212]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e26:	f043 0308 	orr.w	r3, r3, #8
 8021e2a:	6013      	str	r3, [r2, #0]
 8021e2c:	4b33      	ldr	r3, [pc, #204]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e2e:	681b      	ldr	r3, [r3, #0]
 8021e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	6a1b      	ldr	r3, [r3, #32]
 8021e38:	4930      	ldr	r1, [pc, #192]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e3a:	4313      	orrs	r3, r2
 8021e3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021e3e:	4b2f      	ldr	r3, [pc, #188]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e40:	685b      	ldr	r3, [r3, #4]
 8021e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	69db      	ldr	r3, [r3, #28]
 8021e4a:	021b      	lsls	r3, r3, #8
 8021e4c:	492b      	ldr	r1, [pc, #172]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e4e:	4313      	orrs	r3, r2
 8021e50:	604b      	str	r3, [r1, #4]
 8021e52:	e01a      	b.n	8021e8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8021e54:	4b29      	ldr	r3, [pc, #164]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e56:	681b      	ldr	r3, [r3, #0]
 8021e58:	4a28      	ldr	r2, [pc, #160]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e5a:	f023 0301 	bic.w	r3, r3, #1
 8021e5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021e60:	f7ff fd5e 	bl	8021920 <HAL_GetTick>
 8021e64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021e66:	e008      	b.n	8021e7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021e68:	f7ff fd5a 	bl	8021920 <HAL_GetTick>
 8021e6c:	4602      	mov	r2, r0
 8021e6e:	693b      	ldr	r3, [r7, #16]
 8021e70:	1ad3      	subs	r3, r2, r3
 8021e72:	2b02      	cmp	r3, #2
 8021e74:	d901      	bls.n	8021e7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8021e76:	2303      	movs	r3, #3
 8021e78:	e31a      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021e7a:	4b20      	ldr	r3, [pc, #128]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021e7c:	681b      	ldr	r3, [r3, #0]
 8021e7e:	f003 0302 	and.w	r3, r3, #2
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d1f0      	bne.n	8021e68 <HAL_RCC_OscConfig+0x1dc>
 8021e86:	e000      	b.n	8021e8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021e88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	681b      	ldr	r3, [r3, #0]
 8021e8e:	f003 0301 	and.w	r3, r3, #1
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	d073      	beq.n	8021f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8021e96:	69bb      	ldr	r3, [r7, #24]
 8021e98:	2b08      	cmp	r3, #8
 8021e9a:	d005      	beq.n	8021ea8 <HAL_RCC_OscConfig+0x21c>
 8021e9c:	69bb      	ldr	r3, [r7, #24]
 8021e9e:	2b0c      	cmp	r3, #12
 8021ea0:	d10e      	bne.n	8021ec0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021ea2:	697b      	ldr	r3, [r7, #20]
 8021ea4:	2b03      	cmp	r3, #3
 8021ea6:	d10b      	bne.n	8021ec0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021ea8:	4b14      	ldr	r3, [pc, #80]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d063      	beq.n	8021f7c <HAL_RCC_OscConfig+0x2f0>
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	685b      	ldr	r3, [r3, #4]
 8021eb8:	2b00      	cmp	r3, #0
 8021eba:	d15f      	bne.n	8021f7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8021ebc:	2301      	movs	r3, #1
 8021ebe:	e2f7      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	685b      	ldr	r3, [r3, #4]
 8021ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021ec8:	d106      	bne.n	8021ed8 <HAL_RCC_OscConfig+0x24c>
 8021eca:	4b0c      	ldr	r3, [pc, #48]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	4a0b      	ldr	r2, [pc, #44]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021ed4:	6013      	str	r3, [r2, #0]
 8021ed6:	e025      	b.n	8021f24 <HAL_RCC_OscConfig+0x298>
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	685b      	ldr	r3, [r3, #4]
 8021edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021ee0:	d114      	bne.n	8021f0c <HAL_RCC_OscConfig+0x280>
 8021ee2:	4b06      	ldr	r3, [pc, #24]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	4a05      	ldr	r2, [pc, #20]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021eec:	6013      	str	r3, [r2, #0]
 8021eee:	4b03      	ldr	r3, [pc, #12]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	4a02      	ldr	r2, [pc, #8]	; (8021efc <HAL_RCC_OscConfig+0x270>)
 8021ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021ef8:	6013      	str	r3, [r2, #0]
 8021efa:	e013      	b.n	8021f24 <HAL_RCC_OscConfig+0x298>
 8021efc:	40021000 	.word	0x40021000
 8021f00:	0802649c 	.word	0x0802649c
 8021f04:	20000000 	.word	0x20000000
 8021f08:	20000004 	.word	0x20000004
 8021f0c:	4ba0      	ldr	r3, [pc, #640]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021f0e:	681b      	ldr	r3, [r3, #0]
 8021f10:	4a9f      	ldr	r2, [pc, #636]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021f16:	6013      	str	r3, [r2, #0]
 8021f18:	4b9d      	ldr	r3, [pc, #628]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021f1a:	681b      	ldr	r3, [r3, #0]
 8021f1c:	4a9c      	ldr	r2, [pc, #624]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	685b      	ldr	r3, [r3, #4]
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	d013      	beq.n	8021f54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021f2c:	f7ff fcf8 	bl	8021920 <HAL_GetTick>
 8021f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021f32:	e008      	b.n	8021f46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021f34:	f7ff fcf4 	bl	8021920 <HAL_GetTick>
 8021f38:	4602      	mov	r2, r0
 8021f3a:	693b      	ldr	r3, [r7, #16]
 8021f3c:	1ad3      	subs	r3, r2, r3
 8021f3e:	2b64      	cmp	r3, #100	; 0x64
 8021f40:	d901      	bls.n	8021f46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8021f42:	2303      	movs	r3, #3
 8021f44:	e2b4      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021f46:	4b92      	ldr	r3, [pc, #584]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021f48:	681b      	ldr	r3, [r3, #0]
 8021f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	d0f0      	beq.n	8021f34 <HAL_RCC_OscConfig+0x2a8>
 8021f52:	e014      	b.n	8021f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021f54:	f7ff fce4 	bl	8021920 <HAL_GetTick>
 8021f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021f5a:	e008      	b.n	8021f6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021f5c:	f7ff fce0 	bl	8021920 <HAL_GetTick>
 8021f60:	4602      	mov	r2, r0
 8021f62:	693b      	ldr	r3, [r7, #16]
 8021f64:	1ad3      	subs	r3, r2, r3
 8021f66:	2b64      	cmp	r3, #100	; 0x64
 8021f68:	d901      	bls.n	8021f6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8021f6a:	2303      	movs	r3, #3
 8021f6c:	e2a0      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021f6e:	4b88      	ldr	r3, [pc, #544]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d1f0      	bne.n	8021f5c <HAL_RCC_OscConfig+0x2d0>
 8021f7a:	e000      	b.n	8021f7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	f003 0302 	and.w	r3, r3, #2
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	d060      	beq.n	802204c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8021f8a:	69bb      	ldr	r3, [r7, #24]
 8021f8c:	2b04      	cmp	r3, #4
 8021f8e:	d005      	beq.n	8021f9c <HAL_RCC_OscConfig+0x310>
 8021f90:	69bb      	ldr	r3, [r7, #24]
 8021f92:	2b0c      	cmp	r3, #12
 8021f94:	d119      	bne.n	8021fca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021f96:	697b      	ldr	r3, [r7, #20]
 8021f98:	2b02      	cmp	r3, #2
 8021f9a:	d116      	bne.n	8021fca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021f9c:	4b7c      	ldr	r3, [pc, #496]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d005      	beq.n	8021fb4 <HAL_RCC_OscConfig+0x328>
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	68db      	ldr	r3, [r3, #12]
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d101      	bne.n	8021fb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8021fb0:	2301      	movs	r3, #1
 8021fb2:	e27d      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021fb4:	4b76      	ldr	r3, [pc, #472]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021fb6:	685b      	ldr	r3, [r3, #4]
 8021fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8021fbc:	687b      	ldr	r3, [r7, #4]
 8021fbe:	691b      	ldr	r3, [r3, #16]
 8021fc0:	061b      	lsls	r3, r3, #24
 8021fc2:	4973      	ldr	r1, [pc, #460]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021fc4:	4313      	orrs	r3, r2
 8021fc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021fc8:	e040      	b.n	802204c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	68db      	ldr	r3, [r3, #12]
 8021fce:	2b00      	cmp	r3, #0
 8021fd0:	d023      	beq.n	802201a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021fd2:	4b6f      	ldr	r3, [pc, #444]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021fd4:	681b      	ldr	r3, [r3, #0]
 8021fd6:	4a6e      	ldr	r2, [pc, #440]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021fde:	f7ff fc9f 	bl	8021920 <HAL_GetTick>
 8021fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021fe4:	e008      	b.n	8021ff8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021fe6:	f7ff fc9b 	bl	8021920 <HAL_GetTick>
 8021fea:	4602      	mov	r2, r0
 8021fec:	693b      	ldr	r3, [r7, #16]
 8021fee:	1ad3      	subs	r3, r2, r3
 8021ff0:	2b02      	cmp	r3, #2
 8021ff2:	d901      	bls.n	8021ff8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8021ff4:	2303      	movs	r3, #3
 8021ff6:	e25b      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021ff8:	4b65      	ldr	r3, [pc, #404]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8021ffa:	681b      	ldr	r3, [r3, #0]
 8021ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022000:	2b00      	cmp	r3, #0
 8022002:	d0f0      	beq.n	8021fe6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022004:	4b62      	ldr	r3, [pc, #392]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022006:	685b      	ldr	r3, [r3, #4]
 8022008:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	691b      	ldr	r3, [r3, #16]
 8022010:	061b      	lsls	r3, r3, #24
 8022012:	495f      	ldr	r1, [pc, #380]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022014:	4313      	orrs	r3, r2
 8022016:	604b      	str	r3, [r1, #4]
 8022018:	e018      	b.n	802204c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802201a:	4b5d      	ldr	r3, [pc, #372]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 802201c:	681b      	ldr	r3, [r3, #0]
 802201e:	4a5c      	ldr	r2, [pc, #368]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8022024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022026:	f7ff fc7b 	bl	8021920 <HAL_GetTick>
 802202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802202c:	e008      	b.n	8022040 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802202e:	f7ff fc77 	bl	8021920 <HAL_GetTick>
 8022032:	4602      	mov	r2, r0
 8022034:	693b      	ldr	r3, [r7, #16]
 8022036:	1ad3      	subs	r3, r2, r3
 8022038:	2b02      	cmp	r3, #2
 802203a:	d901      	bls.n	8022040 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 802203c:	2303      	movs	r3, #3
 802203e:	e237      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8022040:	4b53      	ldr	r3, [pc, #332]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022048:	2b00      	cmp	r3, #0
 802204a:	d1f0      	bne.n	802202e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802204c:	687b      	ldr	r3, [r7, #4]
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	f003 0308 	and.w	r3, r3, #8
 8022054:	2b00      	cmp	r3, #0
 8022056:	d03c      	beq.n	80220d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	695b      	ldr	r3, [r3, #20]
 802205c:	2b00      	cmp	r3, #0
 802205e:	d01c      	beq.n	802209a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8022060:	4b4b      	ldr	r3, [pc, #300]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8022066:	4a4a      	ldr	r2, [pc, #296]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022068:	f043 0301 	orr.w	r3, r3, #1
 802206c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022070:	f7ff fc56 	bl	8021920 <HAL_GetTick>
 8022074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8022076:	e008      	b.n	802208a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022078:	f7ff fc52 	bl	8021920 <HAL_GetTick>
 802207c:	4602      	mov	r2, r0
 802207e:	693b      	ldr	r3, [r7, #16]
 8022080:	1ad3      	subs	r3, r2, r3
 8022082:	2b02      	cmp	r3, #2
 8022084:	d901      	bls.n	802208a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8022086:	2303      	movs	r3, #3
 8022088:	e212      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802208a:	4b41      	ldr	r3, [pc, #260]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 802208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8022090:	f003 0302 	and.w	r3, r3, #2
 8022094:	2b00      	cmp	r3, #0
 8022096:	d0ef      	beq.n	8022078 <HAL_RCC_OscConfig+0x3ec>
 8022098:	e01b      	b.n	80220d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802209a:	4b3d      	ldr	r3, [pc, #244]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 802209c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80220a0:	4a3b      	ldr	r2, [pc, #236]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 80220a2:	f023 0301 	bic.w	r3, r3, #1
 80220a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80220aa:	f7ff fc39 	bl	8021920 <HAL_GetTick>
 80220ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80220b0:	e008      	b.n	80220c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80220b2:	f7ff fc35 	bl	8021920 <HAL_GetTick>
 80220b6:	4602      	mov	r2, r0
 80220b8:	693b      	ldr	r3, [r7, #16]
 80220ba:	1ad3      	subs	r3, r2, r3
 80220bc:	2b02      	cmp	r3, #2
 80220be:	d901      	bls.n	80220c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80220c0:	2303      	movs	r3, #3
 80220c2:	e1f5      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80220c4:	4b32      	ldr	r3, [pc, #200]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 80220c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80220ca:	f003 0302 	and.w	r3, r3, #2
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	d1ef      	bne.n	80220b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	681b      	ldr	r3, [r3, #0]
 80220d6:	f003 0304 	and.w	r3, r3, #4
 80220da:	2b00      	cmp	r3, #0
 80220dc:	f000 80a6 	beq.w	802222c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80220e0:	2300      	movs	r3, #0
 80220e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80220e4:	4b2a      	ldr	r3, [pc, #168]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 80220e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80220e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80220ec:	2b00      	cmp	r3, #0
 80220ee:	d10d      	bne.n	802210c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80220f0:	4b27      	ldr	r3, [pc, #156]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 80220f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80220f4:	4a26      	ldr	r2, [pc, #152]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 80220f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80220fa:	6593      	str	r3, [r2, #88]	; 0x58
 80220fc:	4b24      	ldr	r3, [pc, #144]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 80220fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022104:	60bb      	str	r3, [r7, #8]
 8022106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8022108:	2301      	movs	r3, #1
 802210a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802210c:	4b21      	ldr	r3, [pc, #132]	; (8022194 <HAL_RCC_OscConfig+0x508>)
 802210e:	681b      	ldr	r3, [r3, #0]
 8022110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022114:	2b00      	cmp	r3, #0
 8022116:	d118      	bne.n	802214a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8022118:	4b1e      	ldr	r3, [pc, #120]	; (8022194 <HAL_RCC_OscConfig+0x508>)
 802211a:	681b      	ldr	r3, [r3, #0]
 802211c:	4a1d      	ldr	r2, [pc, #116]	; (8022194 <HAL_RCC_OscConfig+0x508>)
 802211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8022124:	f7ff fbfc 	bl	8021920 <HAL_GetTick>
 8022128:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802212a:	e008      	b.n	802213e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802212c:	f7ff fbf8 	bl	8021920 <HAL_GetTick>
 8022130:	4602      	mov	r2, r0
 8022132:	693b      	ldr	r3, [r7, #16]
 8022134:	1ad3      	subs	r3, r2, r3
 8022136:	2b02      	cmp	r3, #2
 8022138:	d901      	bls.n	802213e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 802213a:	2303      	movs	r3, #3
 802213c:	e1b8      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802213e:	4b15      	ldr	r3, [pc, #84]	; (8022194 <HAL_RCC_OscConfig+0x508>)
 8022140:	681b      	ldr	r3, [r3, #0]
 8022142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022146:	2b00      	cmp	r3, #0
 8022148:	d0f0      	beq.n	802212c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	689b      	ldr	r3, [r3, #8]
 802214e:	2b01      	cmp	r3, #1
 8022150:	d108      	bne.n	8022164 <HAL_RCC_OscConfig+0x4d8>
 8022152:	4b0f      	ldr	r3, [pc, #60]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022158:	4a0d      	ldr	r2, [pc, #52]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 802215a:	f043 0301 	orr.w	r3, r3, #1
 802215e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8022162:	e029      	b.n	80221b8 <HAL_RCC_OscConfig+0x52c>
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	689b      	ldr	r3, [r3, #8]
 8022168:	2b05      	cmp	r3, #5
 802216a:	d115      	bne.n	8022198 <HAL_RCC_OscConfig+0x50c>
 802216c:	4b08      	ldr	r3, [pc, #32]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 802216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022172:	4a07      	ldr	r2, [pc, #28]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022174:	f043 0304 	orr.w	r3, r3, #4
 8022178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 802217c:	4b04      	ldr	r3, [pc, #16]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 802217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022182:	4a03      	ldr	r2, [pc, #12]	; (8022190 <HAL_RCC_OscConfig+0x504>)
 8022184:	f043 0301 	orr.w	r3, r3, #1
 8022188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 802218c:	e014      	b.n	80221b8 <HAL_RCC_OscConfig+0x52c>
 802218e:	bf00      	nop
 8022190:	40021000 	.word	0x40021000
 8022194:	40007000 	.word	0x40007000
 8022198:	4b9d      	ldr	r3, [pc, #628]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802219e:	4a9c      	ldr	r2, [pc, #624]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80221a0:	f023 0301 	bic.w	r3, r3, #1
 80221a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80221a8:	4b99      	ldr	r3, [pc, #612]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80221aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80221ae:	4a98      	ldr	r2, [pc, #608]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80221b0:	f023 0304 	bic.w	r3, r3, #4
 80221b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	689b      	ldr	r3, [r3, #8]
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d016      	beq.n	80221ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80221c0:	f7ff fbae 	bl	8021920 <HAL_GetTick>
 80221c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80221c6:	e00a      	b.n	80221de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80221c8:	f7ff fbaa 	bl	8021920 <HAL_GetTick>
 80221cc:	4602      	mov	r2, r0
 80221ce:	693b      	ldr	r3, [r7, #16]
 80221d0:	1ad3      	subs	r3, r2, r3
 80221d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80221d6:	4293      	cmp	r3, r2
 80221d8:	d901      	bls.n	80221de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80221da:	2303      	movs	r3, #3
 80221dc:	e168      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80221de:	4b8c      	ldr	r3, [pc, #560]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80221e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80221e4:	f003 0302 	and.w	r3, r3, #2
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d0ed      	beq.n	80221c8 <HAL_RCC_OscConfig+0x53c>
 80221ec:	e015      	b.n	802221a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80221ee:	f7ff fb97 	bl	8021920 <HAL_GetTick>
 80221f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80221f4:	e00a      	b.n	802220c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80221f6:	f7ff fb93 	bl	8021920 <HAL_GetTick>
 80221fa:	4602      	mov	r2, r0
 80221fc:	693b      	ldr	r3, [r7, #16]
 80221fe:	1ad3      	subs	r3, r2, r3
 8022200:	f241 3288 	movw	r2, #5000	; 0x1388
 8022204:	4293      	cmp	r3, r2
 8022206:	d901      	bls.n	802220c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8022208:	2303      	movs	r3, #3
 802220a:	e151      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 802220c:	4b80      	ldr	r3, [pc, #512]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022212:	f003 0302 	and.w	r3, r3, #2
 8022216:	2b00      	cmp	r3, #0
 8022218:	d1ed      	bne.n	80221f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802221a:	7ffb      	ldrb	r3, [r7, #31]
 802221c:	2b01      	cmp	r3, #1
 802221e:	d105      	bne.n	802222c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8022220:	4b7b      	ldr	r3, [pc, #492]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022224:	4a7a      	ldr	r2, [pc, #488]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802222a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	681b      	ldr	r3, [r3, #0]
 8022230:	f003 0320 	and.w	r3, r3, #32
 8022234:	2b00      	cmp	r3, #0
 8022236:	d03c      	beq.n	80222b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802223c:	2b00      	cmp	r3, #0
 802223e:	d01c      	beq.n	802227a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8022240:	4b73      	ldr	r3, [pc, #460]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8022246:	4a72      	ldr	r2, [pc, #456]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022248:	f043 0301 	orr.w	r3, r3, #1
 802224c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022250:	f7ff fb66 	bl	8021920 <HAL_GetTick>
 8022254:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8022256:	e008      	b.n	802226a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8022258:	f7ff fb62 	bl	8021920 <HAL_GetTick>
 802225c:	4602      	mov	r2, r0
 802225e:	693b      	ldr	r3, [r7, #16]
 8022260:	1ad3      	subs	r3, r2, r3
 8022262:	2b02      	cmp	r3, #2
 8022264:	d901      	bls.n	802226a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8022266:	2303      	movs	r3, #3
 8022268:	e122      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 802226a:	4b69      	ldr	r3, [pc, #420]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802226c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8022270:	f003 0302 	and.w	r3, r3, #2
 8022274:	2b00      	cmp	r3, #0
 8022276:	d0ef      	beq.n	8022258 <HAL_RCC_OscConfig+0x5cc>
 8022278:	e01b      	b.n	80222b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 802227a:	4b65      	ldr	r3, [pc, #404]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802227c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8022280:	4a63      	ldr	r2, [pc, #396]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022282:	f023 0301 	bic.w	r3, r3, #1
 8022286:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802228a:	f7ff fb49 	bl	8021920 <HAL_GetTick>
 802228e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8022290:	e008      	b.n	80222a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8022292:	f7ff fb45 	bl	8021920 <HAL_GetTick>
 8022296:	4602      	mov	r2, r0
 8022298:	693b      	ldr	r3, [r7, #16]
 802229a:	1ad3      	subs	r3, r2, r3
 802229c:	2b02      	cmp	r3, #2
 802229e:	d901      	bls.n	80222a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80222a0:	2303      	movs	r3, #3
 80222a2:	e105      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80222a4:	4b5a      	ldr	r3, [pc, #360]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80222a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80222aa:	f003 0302 	and.w	r3, r3, #2
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d1ef      	bne.n	8022292 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	f000 80f9 	beq.w	80224ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80222bc:	687b      	ldr	r3, [r7, #4]
 80222be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80222c0:	2b02      	cmp	r3, #2
 80222c2:	f040 80cf 	bne.w	8022464 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80222c6:	4b52      	ldr	r3, [pc, #328]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80222c8:	68db      	ldr	r3, [r3, #12]
 80222ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80222cc:	697b      	ldr	r3, [r7, #20]
 80222ce:	f003 0203 	and.w	r2, r3, #3
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80222d6:	429a      	cmp	r2, r3
 80222d8:	d12c      	bne.n	8022334 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80222da:	697b      	ldr	r3, [r7, #20]
 80222dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222e4:	3b01      	subs	r3, #1
 80222e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80222e8:	429a      	cmp	r2, r3
 80222ea:	d123      	bne.n	8022334 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80222ec:	697b      	ldr	r3, [r7, #20]
 80222ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80222f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80222f8:	429a      	cmp	r2, r3
 80222fa:	d11b      	bne.n	8022334 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80222fc:	697b      	ldr	r3, [r7, #20]
 80222fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022306:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8022308:	429a      	cmp	r2, r3
 802230a:	d113      	bne.n	8022334 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 802230c:	697b      	ldr	r3, [r7, #20]
 802230e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022316:	085b      	lsrs	r3, r3, #1
 8022318:	3b01      	subs	r3, #1
 802231a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 802231c:	429a      	cmp	r2, r3
 802231e:	d109      	bne.n	8022334 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8022320:	697b      	ldr	r3, [r7, #20]
 8022322:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802232a:	085b      	lsrs	r3, r3, #1
 802232c:	3b01      	subs	r3, #1
 802232e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8022330:	429a      	cmp	r2, r3
 8022332:	d071      	beq.n	8022418 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8022334:	69bb      	ldr	r3, [r7, #24]
 8022336:	2b0c      	cmp	r3, #12
 8022338:	d068      	beq.n	802240c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 802233a:	4b35      	ldr	r3, [pc, #212]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802233c:	681b      	ldr	r3, [r3, #0]
 802233e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022342:	2b00      	cmp	r3, #0
 8022344:	d105      	bne.n	8022352 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8022346:	4b32      	ldr	r3, [pc, #200]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802234e:	2b00      	cmp	r3, #0
 8022350:	d001      	beq.n	8022356 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8022352:	2301      	movs	r3, #1
 8022354:	e0ac      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8022356:	4b2e      	ldr	r3, [pc, #184]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022358:	681b      	ldr	r3, [r3, #0]
 802235a:	4a2d      	ldr	r2, [pc, #180]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802235c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8022360:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8022362:	f7ff fadd 	bl	8021920 <HAL_GetTick>
 8022366:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022368:	e008      	b.n	802237c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802236a:	f7ff fad9 	bl	8021920 <HAL_GetTick>
 802236e:	4602      	mov	r2, r0
 8022370:	693b      	ldr	r3, [r7, #16]
 8022372:	1ad3      	subs	r3, r2, r3
 8022374:	2b02      	cmp	r3, #2
 8022376:	d901      	bls.n	802237c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8022378:	2303      	movs	r3, #3
 802237a:	e099      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 802237c:	4b24      	ldr	r3, [pc, #144]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802237e:	681b      	ldr	r3, [r3, #0]
 8022380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022384:	2b00      	cmp	r3, #0
 8022386:	d1f0      	bne.n	802236a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8022388:	4b21      	ldr	r3, [pc, #132]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 802238a:	68da      	ldr	r2, [r3, #12]
 802238c:	4b21      	ldr	r3, [pc, #132]	; (8022414 <HAL_RCC_OscConfig+0x788>)
 802238e:	4013      	ands	r3, r2
 8022390:	687a      	ldr	r2, [r7, #4]
 8022392:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8022394:	687a      	ldr	r2, [r7, #4]
 8022396:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8022398:	3a01      	subs	r2, #1
 802239a:	0112      	lsls	r2, r2, #4
 802239c:	4311      	orrs	r1, r2
 802239e:	687a      	ldr	r2, [r7, #4]
 80223a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80223a2:	0212      	lsls	r2, r2, #8
 80223a4:	4311      	orrs	r1, r2
 80223a6:	687a      	ldr	r2, [r7, #4]
 80223a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80223aa:	0852      	lsrs	r2, r2, #1
 80223ac:	3a01      	subs	r2, #1
 80223ae:	0552      	lsls	r2, r2, #21
 80223b0:	4311      	orrs	r1, r2
 80223b2:	687a      	ldr	r2, [r7, #4]
 80223b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80223b6:	0852      	lsrs	r2, r2, #1
 80223b8:	3a01      	subs	r2, #1
 80223ba:	0652      	lsls	r2, r2, #25
 80223bc:	4311      	orrs	r1, r2
 80223be:	687a      	ldr	r2, [r7, #4]
 80223c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80223c2:	06d2      	lsls	r2, r2, #27
 80223c4:	430a      	orrs	r2, r1
 80223c6:	4912      	ldr	r1, [pc, #72]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80223c8:	4313      	orrs	r3, r2
 80223ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80223cc:	4b10      	ldr	r3, [pc, #64]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80223ce:	681b      	ldr	r3, [r3, #0]
 80223d0:	4a0f      	ldr	r2, [pc, #60]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80223d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80223d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80223d8:	4b0d      	ldr	r3, [pc, #52]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80223da:	68db      	ldr	r3, [r3, #12]
 80223dc:	4a0c      	ldr	r2, [pc, #48]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 80223de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80223e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80223e4:	f7ff fa9c 	bl	8021920 <HAL_GetTick>
 80223e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80223ea:	e008      	b.n	80223fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80223ec:	f7ff fa98 	bl	8021920 <HAL_GetTick>
 80223f0:	4602      	mov	r2, r0
 80223f2:	693b      	ldr	r3, [r7, #16]
 80223f4:	1ad3      	subs	r3, r2, r3
 80223f6:	2b02      	cmp	r3, #2
 80223f8:	d901      	bls.n	80223fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80223fa:	2303      	movs	r3, #3
 80223fc:	e058      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80223fe:	4b04      	ldr	r3, [pc, #16]	; (8022410 <HAL_RCC_OscConfig+0x784>)
 8022400:	681b      	ldr	r3, [r3, #0]
 8022402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022406:	2b00      	cmp	r3, #0
 8022408:	d0f0      	beq.n	80223ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 802240a:	e050      	b.n	80224ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 802240c:	2301      	movs	r3, #1
 802240e:	e04f      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
 8022410:	40021000 	.word	0x40021000
 8022414:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022418:	4b27      	ldr	r3, [pc, #156]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022420:	2b00      	cmp	r3, #0
 8022422:	d144      	bne.n	80224ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8022424:	4b24      	ldr	r3, [pc, #144]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 8022426:	681b      	ldr	r3, [r3, #0]
 8022428:	4a23      	ldr	r2, [pc, #140]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 802242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802242e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8022430:	4b21      	ldr	r3, [pc, #132]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 8022432:	68db      	ldr	r3, [r3, #12]
 8022434:	4a20      	ldr	r2, [pc, #128]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 8022436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802243a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 802243c:	f7ff fa70 	bl	8021920 <HAL_GetTick>
 8022440:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022442:	e008      	b.n	8022456 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022444:	f7ff fa6c 	bl	8021920 <HAL_GetTick>
 8022448:	4602      	mov	r2, r0
 802244a:	693b      	ldr	r3, [r7, #16]
 802244c:	1ad3      	subs	r3, r2, r3
 802244e:	2b02      	cmp	r3, #2
 8022450:	d901      	bls.n	8022456 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8022452:	2303      	movs	r3, #3
 8022454:	e02c      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022456:	4b18      	ldr	r3, [pc, #96]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 8022458:	681b      	ldr	r3, [r3, #0]
 802245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802245e:	2b00      	cmp	r3, #0
 8022460:	d0f0      	beq.n	8022444 <HAL_RCC_OscConfig+0x7b8>
 8022462:	e024      	b.n	80224ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8022464:	69bb      	ldr	r3, [r7, #24]
 8022466:	2b0c      	cmp	r3, #12
 8022468:	d01f      	beq.n	80224aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802246a:	4b13      	ldr	r3, [pc, #76]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 802246c:	681b      	ldr	r3, [r3, #0]
 802246e:	4a12      	ldr	r2, [pc, #72]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 8022470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8022474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022476:	f7ff fa53 	bl	8021920 <HAL_GetTick>
 802247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 802247c:	e008      	b.n	8022490 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802247e:	f7ff fa4f 	bl	8021920 <HAL_GetTick>
 8022482:	4602      	mov	r2, r0
 8022484:	693b      	ldr	r3, [r7, #16]
 8022486:	1ad3      	subs	r3, r2, r3
 8022488:	2b02      	cmp	r3, #2
 802248a:	d901      	bls.n	8022490 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 802248c:	2303      	movs	r3, #3
 802248e:	e00f      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022490:	4b09      	ldr	r3, [pc, #36]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 8022492:	681b      	ldr	r3, [r3, #0]
 8022494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022498:	2b00      	cmp	r3, #0
 802249a:	d1f0      	bne.n	802247e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 802249c:	4b06      	ldr	r3, [pc, #24]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 802249e:	68da      	ldr	r2, [r3, #12]
 80224a0:	4905      	ldr	r1, [pc, #20]	; (80224b8 <HAL_RCC_OscConfig+0x82c>)
 80224a2:	4b06      	ldr	r3, [pc, #24]	; (80224bc <HAL_RCC_OscConfig+0x830>)
 80224a4:	4013      	ands	r3, r2
 80224a6:	60cb      	str	r3, [r1, #12]
 80224a8:	e001      	b.n	80224ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80224aa:	2301      	movs	r3, #1
 80224ac:	e000      	b.n	80224b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80224ae:	2300      	movs	r3, #0
}
 80224b0:	4618      	mov	r0, r3
 80224b2:	3720      	adds	r7, #32
 80224b4:	46bd      	mov	sp, r7
 80224b6:	bd80      	pop	{r7, pc}
 80224b8:	40021000 	.word	0x40021000
 80224bc:	feeefffc 	.word	0xfeeefffc

080224c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80224c0:	b580      	push	{r7, lr}
 80224c2:	b086      	sub	sp, #24
 80224c4:	af00      	add	r7, sp, #0
 80224c6:	6078      	str	r0, [r7, #4]
 80224c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80224ca:	2300      	movs	r3, #0
 80224cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d101      	bne.n	80224d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80224d4:	2301      	movs	r3, #1
 80224d6:	e11d      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80224d8:	4b90      	ldr	r3, [pc, #576]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 80224da:	681b      	ldr	r3, [r3, #0]
 80224dc:	f003 030f 	and.w	r3, r3, #15
 80224e0:	683a      	ldr	r2, [r7, #0]
 80224e2:	429a      	cmp	r2, r3
 80224e4:	d910      	bls.n	8022508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80224e6:	4b8d      	ldr	r3, [pc, #564]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 80224e8:	681b      	ldr	r3, [r3, #0]
 80224ea:	f023 020f 	bic.w	r2, r3, #15
 80224ee:	498b      	ldr	r1, [pc, #556]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 80224f0:	683b      	ldr	r3, [r7, #0]
 80224f2:	4313      	orrs	r3, r2
 80224f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80224f6:	4b89      	ldr	r3, [pc, #548]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 80224f8:	681b      	ldr	r3, [r3, #0]
 80224fa:	f003 030f 	and.w	r3, r3, #15
 80224fe:	683a      	ldr	r2, [r7, #0]
 8022500:	429a      	cmp	r2, r3
 8022502:	d001      	beq.n	8022508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8022504:	2301      	movs	r3, #1
 8022506:	e105      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	681b      	ldr	r3, [r3, #0]
 802250c:	f003 0302 	and.w	r3, r3, #2
 8022510:	2b00      	cmp	r3, #0
 8022512:	d010      	beq.n	8022536 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	689a      	ldr	r2, [r3, #8]
 8022518:	4b81      	ldr	r3, [pc, #516]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 802251a:	689b      	ldr	r3, [r3, #8]
 802251c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022520:	429a      	cmp	r2, r3
 8022522:	d908      	bls.n	8022536 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022524:	4b7e      	ldr	r3, [pc, #504]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022526:	689b      	ldr	r3, [r3, #8]
 8022528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	689b      	ldr	r3, [r3, #8]
 8022530:	497b      	ldr	r1, [pc, #492]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022532:	4313      	orrs	r3, r2
 8022534:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	681b      	ldr	r3, [r3, #0]
 802253a:	f003 0301 	and.w	r3, r3, #1
 802253e:	2b00      	cmp	r3, #0
 8022540:	d079      	beq.n	8022636 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	685b      	ldr	r3, [r3, #4]
 8022546:	2b03      	cmp	r3, #3
 8022548:	d11e      	bne.n	8022588 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802254a:	4b75      	ldr	r3, [pc, #468]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022552:	2b00      	cmp	r3, #0
 8022554:	d101      	bne.n	802255a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8022556:	2301      	movs	r3, #1
 8022558:	e0dc      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 802255a:	f000 f9d1 	bl	8022900 <RCC_GetSysClockFreqFromPLLSource>
 802255e:	4603      	mov	r3, r0
 8022560:	4a70      	ldr	r2, [pc, #448]	; (8022724 <HAL_RCC_ClockConfig+0x264>)
 8022562:	4293      	cmp	r3, r2
 8022564:	d946      	bls.n	80225f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8022566:	4b6e      	ldr	r3, [pc, #440]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022568:	689b      	ldr	r3, [r3, #8]
 802256a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802256e:	2b00      	cmp	r3, #0
 8022570:	d140      	bne.n	80225f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8022572:	4b6b      	ldr	r3, [pc, #428]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022574:	689b      	ldr	r3, [r3, #8]
 8022576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802257a:	4a69      	ldr	r2, [pc, #420]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 802257c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8022582:	2380      	movs	r3, #128	; 0x80
 8022584:	617b      	str	r3, [r7, #20]
 8022586:	e035      	b.n	80225f4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	685b      	ldr	r3, [r3, #4]
 802258c:	2b02      	cmp	r3, #2
 802258e:	d107      	bne.n	80225a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8022590:	4b63      	ldr	r3, [pc, #396]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022598:	2b00      	cmp	r3, #0
 802259a:	d115      	bne.n	80225c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 802259c:	2301      	movs	r3, #1
 802259e:	e0b9      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	685b      	ldr	r3, [r3, #4]
 80225a4:	2b00      	cmp	r3, #0
 80225a6:	d107      	bne.n	80225b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80225a8:	4b5d      	ldr	r3, [pc, #372]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80225aa:	681b      	ldr	r3, [r3, #0]
 80225ac:	f003 0302 	and.w	r3, r3, #2
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	d109      	bne.n	80225c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80225b4:	2301      	movs	r3, #1
 80225b6:	e0ad      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80225b8:	4b59      	ldr	r3, [pc, #356]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	d101      	bne.n	80225c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80225c4:	2301      	movs	r3, #1
 80225c6:	e0a5      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80225c8:	f000 f8b4 	bl	8022734 <HAL_RCC_GetSysClockFreq>
 80225cc:	4603      	mov	r3, r0
 80225ce:	4a55      	ldr	r2, [pc, #340]	; (8022724 <HAL_RCC_ClockConfig+0x264>)
 80225d0:	4293      	cmp	r3, r2
 80225d2:	d90f      	bls.n	80225f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80225d4:	4b52      	ldr	r3, [pc, #328]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80225d6:	689b      	ldr	r3, [r3, #8]
 80225d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80225dc:	2b00      	cmp	r3, #0
 80225de:	d109      	bne.n	80225f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80225e0:	4b4f      	ldr	r3, [pc, #316]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80225e2:	689b      	ldr	r3, [r3, #8]
 80225e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80225e8:	4a4d      	ldr	r2, [pc, #308]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80225ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80225ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80225f0:	2380      	movs	r3, #128	; 0x80
 80225f2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80225f4:	4b4a      	ldr	r3, [pc, #296]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80225f6:	689b      	ldr	r3, [r3, #8]
 80225f8:	f023 0203 	bic.w	r2, r3, #3
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	685b      	ldr	r3, [r3, #4]
 8022600:	4947      	ldr	r1, [pc, #284]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022602:	4313      	orrs	r3, r2
 8022604:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022606:	f7ff f98b 	bl	8021920 <HAL_GetTick>
 802260a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802260c:	e00a      	b.n	8022624 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802260e:	f7ff f987 	bl	8021920 <HAL_GetTick>
 8022612:	4602      	mov	r2, r0
 8022614:	693b      	ldr	r3, [r7, #16]
 8022616:	1ad3      	subs	r3, r2, r3
 8022618:	f241 3288 	movw	r2, #5000	; 0x1388
 802261c:	4293      	cmp	r3, r2
 802261e:	d901      	bls.n	8022624 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8022620:	2303      	movs	r3, #3
 8022622:	e077      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022624:	4b3e      	ldr	r3, [pc, #248]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022626:	689b      	ldr	r3, [r3, #8]
 8022628:	f003 020c 	and.w	r2, r3, #12
 802262c:	687b      	ldr	r3, [r7, #4]
 802262e:	685b      	ldr	r3, [r3, #4]
 8022630:	009b      	lsls	r3, r3, #2
 8022632:	429a      	cmp	r2, r3
 8022634:	d1eb      	bne.n	802260e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8022636:	697b      	ldr	r3, [r7, #20]
 8022638:	2b80      	cmp	r3, #128	; 0x80
 802263a:	d105      	bne.n	8022648 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 802263c:	4b38      	ldr	r3, [pc, #224]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 802263e:	689b      	ldr	r3, [r3, #8]
 8022640:	4a37      	ldr	r2, [pc, #220]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022646:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	f003 0302 	and.w	r3, r3, #2
 8022650:	2b00      	cmp	r3, #0
 8022652:	d010      	beq.n	8022676 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	689a      	ldr	r2, [r3, #8]
 8022658:	4b31      	ldr	r3, [pc, #196]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 802265a:	689b      	ldr	r3, [r3, #8]
 802265c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022660:	429a      	cmp	r2, r3
 8022662:	d208      	bcs.n	8022676 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022664:	4b2e      	ldr	r3, [pc, #184]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022666:	689b      	ldr	r3, [r3, #8]
 8022668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	689b      	ldr	r3, [r3, #8]
 8022670:	492b      	ldr	r1, [pc, #172]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 8022672:	4313      	orrs	r3, r2
 8022674:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022676:	4b29      	ldr	r3, [pc, #164]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 8022678:	681b      	ldr	r3, [r3, #0]
 802267a:	f003 030f 	and.w	r3, r3, #15
 802267e:	683a      	ldr	r2, [r7, #0]
 8022680:	429a      	cmp	r2, r3
 8022682:	d210      	bcs.n	80226a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022684:	4b25      	ldr	r3, [pc, #148]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	f023 020f 	bic.w	r2, r3, #15
 802268c:	4923      	ldr	r1, [pc, #140]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 802268e:	683b      	ldr	r3, [r7, #0]
 8022690:	4313      	orrs	r3, r2
 8022692:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022694:	4b21      	ldr	r3, [pc, #132]	; (802271c <HAL_RCC_ClockConfig+0x25c>)
 8022696:	681b      	ldr	r3, [r3, #0]
 8022698:	f003 030f 	and.w	r3, r3, #15
 802269c:	683a      	ldr	r2, [r7, #0]
 802269e:	429a      	cmp	r2, r3
 80226a0:	d001      	beq.n	80226a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80226a2:	2301      	movs	r3, #1
 80226a4:	e036      	b.n	8022714 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	681b      	ldr	r3, [r3, #0]
 80226aa:	f003 0304 	and.w	r3, r3, #4
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	d008      	beq.n	80226c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80226b2:	4b1b      	ldr	r3, [pc, #108]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80226b4:	689b      	ldr	r3, [r3, #8]
 80226b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	68db      	ldr	r3, [r3, #12]
 80226be:	4918      	ldr	r1, [pc, #96]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80226c0:	4313      	orrs	r3, r2
 80226c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80226c4:	687b      	ldr	r3, [r7, #4]
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	f003 0308 	and.w	r3, r3, #8
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	d009      	beq.n	80226e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80226d0:	4b13      	ldr	r3, [pc, #76]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80226d2:	689b      	ldr	r3, [r3, #8]
 80226d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	691b      	ldr	r3, [r3, #16]
 80226dc:	00db      	lsls	r3, r3, #3
 80226de:	4910      	ldr	r1, [pc, #64]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80226e0:	4313      	orrs	r3, r2
 80226e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80226e4:	f000 f826 	bl	8022734 <HAL_RCC_GetSysClockFreq>
 80226e8:	4602      	mov	r2, r0
 80226ea:	4b0d      	ldr	r3, [pc, #52]	; (8022720 <HAL_RCC_ClockConfig+0x260>)
 80226ec:	689b      	ldr	r3, [r3, #8]
 80226ee:	091b      	lsrs	r3, r3, #4
 80226f0:	f003 030f 	and.w	r3, r3, #15
 80226f4:	490c      	ldr	r1, [pc, #48]	; (8022728 <HAL_RCC_ClockConfig+0x268>)
 80226f6:	5ccb      	ldrb	r3, [r1, r3]
 80226f8:	f003 031f 	and.w	r3, r3, #31
 80226fc:	fa22 f303 	lsr.w	r3, r2, r3
 8022700:	4a0a      	ldr	r2, [pc, #40]	; (802272c <HAL_RCC_ClockConfig+0x26c>)
 8022702:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8022704:	4b0a      	ldr	r3, [pc, #40]	; (8022730 <HAL_RCC_ClockConfig+0x270>)
 8022706:	681b      	ldr	r3, [r3, #0]
 8022708:	4618      	mov	r0, r3
 802270a:	f7ff f8b9 	bl	8021880 <HAL_InitTick>
 802270e:	4603      	mov	r3, r0
 8022710:	73fb      	strb	r3, [r7, #15]

  return status;
 8022712:	7bfb      	ldrb	r3, [r7, #15]
}
 8022714:	4618      	mov	r0, r3
 8022716:	3718      	adds	r7, #24
 8022718:	46bd      	mov	sp, r7
 802271a:	bd80      	pop	{r7, pc}
 802271c:	40022000 	.word	0x40022000
 8022720:	40021000 	.word	0x40021000
 8022724:	04c4b400 	.word	0x04c4b400
 8022728:	0802649c 	.word	0x0802649c
 802272c:	20000000 	.word	0x20000000
 8022730:	20000004 	.word	0x20000004

08022734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022734:	b480      	push	{r7}
 8022736:	b089      	sub	sp, #36	; 0x24
 8022738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 802273a:	2300      	movs	r3, #0
 802273c:	61fb      	str	r3, [r7, #28]
 802273e:	2300      	movs	r3, #0
 8022740:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022742:	4b3e      	ldr	r3, [pc, #248]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 8022744:	689b      	ldr	r3, [r3, #8]
 8022746:	f003 030c 	and.w	r3, r3, #12
 802274a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 802274c:	4b3b      	ldr	r3, [pc, #236]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 802274e:	68db      	ldr	r3, [r3, #12]
 8022750:	f003 0303 	and.w	r3, r3, #3
 8022754:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8022756:	693b      	ldr	r3, [r7, #16]
 8022758:	2b00      	cmp	r3, #0
 802275a:	d005      	beq.n	8022768 <HAL_RCC_GetSysClockFreq+0x34>
 802275c:	693b      	ldr	r3, [r7, #16]
 802275e:	2b0c      	cmp	r3, #12
 8022760:	d121      	bne.n	80227a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8022762:	68fb      	ldr	r3, [r7, #12]
 8022764:	2b01      	cmp	r3, #1
 8022766:	d11e      	bne.n	80227a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022768:	4b34      	ldr	r3, [pc, #208]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 802276a:	681b      	ldr	r3, [r3, #0]
 802276c:	f003 0308 	and.w	r3, r3, #8
 8022770:	2b00      	cmp	r3, #0
 8022772:	d107      	bne.n	8022784 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022774:	4b31      	ldr	r3, [pc, #196]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 8022776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802277a:	0a1b      	lsrs	r3, r3, #8
 802277c:	f003 030f 	and.w	r3, r3, #15
 8022780:	61fb      	str	r3, [r7, #28]
 8022782:	e005      	b.n	8022790 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022784:	4b2d      	ldr	r3, [pc, #180]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 8022786:	681b      	ldr	r3, [r3, #0]
 8022788:	091b      	lsrs	r3, r3, #4
 802278a:	f003 030f 	and.w	r3, r3, #15
 802278e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8022790:	4a2b      	ldr	r2, [pc, #172]	; (8022840 <HAL_RCC_GetSysClockFreq+0x10c>)
 8022792:	69fb      	ldr	r3, [r7, #28]
 8022794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022798:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802279a:	693b      	ldr	r3, [r7, #16]
 802279c:	2b00      	cmp	r3, #0
 802279e:	d10d      	bne.n	80227bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80227a0:	69fb      	ldr	r3, [r7, #28]
 80227a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80227a4:	e00a      	b.n	80227bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80227a6:	693b      	ldr	r3, [r7, #16]
 80227a8:	2b04      	cmp	r3, #4
 80227aa:	d102      	bne.n	80227b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80227ac:	4b25      	ldr	r3, [pc, #148]	; (8022844 <HAL_RCC_GetSysClockFreq+0x110>)
 80227ae:	61bb      	str	r3, [r7, #24]
 80227b0:	e004      	b.n	80227bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80227b2:	693b      	ldr	r3, [r7, #16]
 80227b4:	2b08      	cmp	r3, #8
 80227b6:	d101      	bne.n	80227bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80227b8:	4b23      	ldr	r3, [pc, #140]	; (8022848 <HAL_RCC_GetSysClockFreq+0x114>)
 80227ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80227bc:	693b      	ldr	r3, [r7, #16]
 80227be:	2b0c      	cmp	r3, #12
 80227c0:	d134      	bne.n	802282c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80227c2:	4b1e      	ldr	r3, [pc, #120]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 80227c4:	68db      	ldr	r3, [r3, #12]
 80227c6:	f003 0303 	and.w	r3, r3, #3
 80227ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80227cc:	68bb      	ldr	r3, [r7, #8]
 80227ce:	2b02      	cmp	r3, #2
 80227d0:	d003      	beq.n	80227da <HAL_RCC_GetSysClockFreq+0xa6>
 80227d2:	68bb      	ldr	r3, [r7, #8]
 80227d4:	2b03      	cmp	r3, #3
 80227d6:	d003      	beq.n	80227e0 <HAL_RCC_GetSysClockFreq+0xac>
 80227d8:	e005      	b.n	80227e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80227da:	4b1a      	ldr	r3, [pc, #104]	; (8022844 <HAL_RCC_GetSysClockFreq+0x110>)
 80227dc:	617b      	str	r3, [r7, #20]
      break;
 80227de:	e005      	b.n	80227ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80227e0:	4b19      	ldr	r3, [pc, #100]	; (8022848 <HAL_RCC_GetSysClockFreq+0x114>)
 80227e2:	617b      	str	r3, [r7, #20]
      break;
 80227e4:	e002      	b.n	80227ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80227e6:	69fb      	ldr	r3, [r7, #28]
 80227e8:	617b      	str	r3, [r7, #20]
      break;
 80227ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80227ec:	4b13      	ldr	r3, [pc, #76]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 80227ee:	68db      	ldr	r3, [r3, #12]
 80227f0:	091b      	lsrs	r3, r3, #4
 80227f2:	f003 030f 	and.w	r3, r3, #15
 80227f6:	3301      	adds	r3, #1
 80227f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80227fa:	4b10      	ldr	r3, [pc, #64]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 80227fc:	68db      	ldr	r3, [r3, #12]
 80227fe:	0a1b      	lsrs	r3, r3, #8
 8022800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022804:	697a      	ldr	r2, [r7, #20]
 8022806:	fb03 f202 	mul.w	r2, r3, r2
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8022810:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022812:	4b0a      	ldr	r3, [pc, #40]	; (802283c <HAL_RCC_GetSysClockFreq+0x108>)
 8022814:	68db      	ldr	r3, [r3, #12]
 8022816:	0e5b      	lsrs	r3, r3, #25
 8022818:	f003 0303 	and.w	r3, r3, #3
 802281c:	3301      	adds	r3, #1
 802281e:	005b      	lsls	r3, r3, #1
 8022820:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8022822:	697a      	ldr	r2, [r7, #20]
 8022824:	683b      	ldr	r3, [r7, #0]
 8022826:	fbb2 f3f3 	udiv	r3, r2, r3
 802282a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 802282c:	69bb      	ldr	r3, [r7, #24]
}
 802282e:	4618      	mov	r0, r3
 8022830:	3724      	adds	r7, #36	; 0x24
 8022832:	46bd      	mov	sp, r7
 8022834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022838:	4770      	bx	lr
 802283a:	bf00      	nop
 802283c:	40021000 	.word	0x40021000
 8022840:	080264ac 	.word	0x080264ac
 8022844:	00f42400 	.word	0x00f42400
 8022848:	007a1200 	.word	0x007a1200

0802284c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 802284c:	b580      	push	{r7, lr}
 802284e:	b086      	sub	sp, #24
 8022850:	af00      	add	r7, sp, #0
 8022852:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8022854:	2300      	movs	r3, #0
 8022856:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022858:	4b27      	ldr	r3, [pc, #156]	; (80228f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022860:	2b00      	cmp	r3, #0
 8022862:	d003      	beq.n	802286c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8022864:	f7ff f94e 	bl	8021b04 <HAL_PWREx_GetVoltageRange>
 8022868:	6178      	str	r0, [r7, #20]
 802286a:	e014      	b.n	8022896 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 802286c:	4b22      	ldr	r3, [pc, #136]	; (80228f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022870:	4a21      	ldr	r2, [pc, #132]	; (80228f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022876:	6593      	str	r3, [r2, #88]	; 0x58
 8022878:	4b1f      	ldr	r3, [pc, #124]	; (80228f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022880:	60fb      	str	r3, [r7, #12]
 8022882:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8022884:	f7ff f93e 	bl	8021b04 <HAL_PWREx_GetVoltageRange>
 8022888:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 802288a:	4b1b      	ldr	r3, [pc, #108]	; (80228f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802288e:	4a1a      	ldr	r2, [pc, #104]	; (80228f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022894:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022896:	697b      	ldr	r3, [r7, #20]
 8022898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802289c:	d10b      	bne.n	80228b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	2b80      	cmp	r3, #128	; 0x80
 80228a2:	d913      	bls.n	80228cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	2ba0      	cmp	r3, #160	; 0xa0
 80228a8:	d902      	bls.n	80228b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80228aa:	2302      	movs	r3, #2
 80228ac:	613b      	str	r3, [r7, #16]
 80228ae:	e00d      	b.n	80228cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80228b0:	2301      	movs	r3, #1
 80228b2:	613b      	str	r3, [r7, #16]
 80228b4:	e00a      	b.n	80228cc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	2b7f      	cmp	r3, #127	; 0x7f
 80228ba:	d902      	bls.n	80228c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80228bc:	2302      	movs	r3, #2
 80228be:	613b      	str	r3, [r7, #16]
 80228c0:	e004      	b.n	80228cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	2b70      	cmp	r3, #112	; 0x70
 80228c6:	d101      	bne.n	80228cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80228c8:	2301      	movs	r3, #1
 80228ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80228cc:	4b0b      	ldr	r3, [pc, #44]	; (80228fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80228ce:	681b      	ldr	r3, [r3, #0]
 80228d0:	f023 020f 	bic.w	r2, r3, #15
 80228d4:	4909      	ldr	r1, [pc, #36]	; (80228fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80228d6:	693b      	ldr	r3, [r7, #16]
 80228d8:	4313      	orrs	r3, r2
 80228da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80228dc:	4b07      	ldr	r3, [pc, #28]	; (80228fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80228de:	681b      	ldr	r3, [r3, #0]
 80228e0:	f003 030f 	and.w	r3, r3, #15
 80228e4:	693a      	ldr	r2, [r7, #16]
 80228e6:	429a      	cmp	r2, r3
 80228e8:	d001      	beq.n	80228ee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80228ea:	2301      	movs	r3, #1
 80228ec:	e000      	b.n	80228f0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80228ee:	2300      	movs	r3, #0
}
 80228f0:	4618      	mov	r0, r3
 80228f2:	3718      	adds	r7, #24
 80228f4:	46bd      	mov	sp, r7
 80228f6:	bd80      	pop	{r7, pc}
 80228f8:	40021000 	.word	0x40021000
 80228fc:	40022000 	.word	0x40022000

08022900 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8022900:	b480      	push	{r7}
 8022902:	b087      	sub	sp, #28
 8022904:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8022906:	4b2d      	ldr	r3, [pc, #180]	; (80229bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022908:	68db      	ldr	r3, [r3, #12]
 802290a:	f003 0303 	and.w	r3, r3, #3
 802290e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8022910:	68fb      	ldr	r3, [r7, #12]
 8022912:	2b03      	cmp	r3, #3
 8022914:	d00b      	beq.n	802292e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8022916:	68fb      	ldr	r3, [r7, #12]
 8022918:	2b03      	cmp	r3, #3
 802291a:	d825      	bhi.n	8022968 <RCC_GetSysClockFreqFromPLLSource+0x68>
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	2b01      	cmp	r3, #1
 8022920:	d008      	beq.n	8022934 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8022922:	68fb      	ldr	r3, [r7, #12]
 8022924:	2b02      	cmp	r3, #2
 8022926:	d11f      	bne.n	8022968 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8022928:	4b25      	ldr	r3, [pc, #148]	; (80229c0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 802292a:	613b      	str	r3, [r7, #16]
    break;
 802292c:	e01f      	b.n	802296e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 802292e:	4b25      	ldr	r3, [pc, #148]	; (80229c4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8022930:	613b      	str	r3, [r7, #16]
    break;
 8022932:	e01c      	b.n	802296e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022934:	4b21      	ldr	r3, [pc, #132]	; (80229bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	f003 0308 	and.w	r3, r3, #8
 802293c:	2b00      	cmp	r3, #0
 802293e:	d107      	bne.n	8022950 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022940:	4b1e      	ldr	r3, [pc, #120]	; (80229bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8022946:	0a1b      	lsrs	r3, r3, #8
 8022948:	f003 030f 	and.w	r3, r3, #15
 802294c:	617b      	str	r3, [r7, #20]
 802294e:	e005      	b.n	802295c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022950:	4b1a      	ldr	r3, [pc, #104]	; (80229bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022952:	681b      	ldr	r3, [r3, #0]
 8022954:	091b      	lsrs	r3, r3, #4
 8022956:	f003 030f 	and.w	r3, r3, #15
 802295a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 802295c:	4a1a      	ldr	r2, [pc, #104]	; (80229c8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 802295e:	697b      	ldr	r3, [r7, #20]
 8022960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022964:	613b      	str	r3, [r7, #16]
    break;
 8022966:	e002      	b.n	802296e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8022968:	2300      	movs	r3, #0
 802296a:	613b      	str	r3, [r7, #16]
    break;
 802296c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802296e:	4b13      	ldr	r3, [pc, #76]	; (80229bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022970:	68db      	ldr	r3, [r3, #12]
 8022972:	091b      	lsrs	r3, r3, #4
 8022974:	f003 030f 	and.w	r3, r3, #15
 8022978:	3301      	adds	r3, #1
 802297a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 802297c:	4b0f      	ldr	r3, [pc, #60]	; (80229bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802297e:	68db      	ldr	r3, [r3, #12]
 8022980:	0a1b      	lsrs	r3, r3, #8
 8022982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022986:	693a      	ldr	r2, [r7, #16]
 8022988:	fb03 f202 	mul.w	r2, r3, r2
 802298c:	68bb      	ldr	r3, [r7, #8]
 802298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8022992:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022994:	4b09      	ldr	r3, [pc, #36]	; (80229bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022996:	68db      	ldr	r3, [r3, #12]
 8022998:	0e5b      	lsrs	r3, r3, #25
 802299a:	f003 0303 	and.w	r3, r3, #3
 802299e:	3301      	adds	r3, #1
 80229a0:	005b      	lsls	r3, r3, #1
 80229a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80229a4:	693a      	ldr	r2, [r7, #16]
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80229ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80229ae:	683b      	ldr	r3, [r7, #0]
}
 80229b0:	4618      	mov	r0, r3
 80229b2:	371c      	adds	r7, #28
 80229b4:	46bd      	mov	sp, r7
 80229b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229ba:	4770      	bx	lr
 80229bc:	40021000 	.word	0x40021000
 80229c0:	00f42400 	.word	0x00f42400
 80229c4:	007a1200 	.word	0x007a1200
 80229c8:	080264ac 	.word	0x080264ac

080229cc <arm_std_f32>:
 80229cc:	2901      	cmp	r1, #1
 80229ce:	d97d      	bls.n	8022acc <arm_std_f32+0x100>
 80229d0:	b530      	push	{r4, r5, lr}
 80229d2:	ed2d 8b02 	vpush	{d8}
 80229d6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8022adc <arm_std_f32+0x110>
 80229da:	088d      	lsrs	r5, r1, #2
 80229dc:	b083      	sub	sp, #12
 80229de:	eef0 4a47 	vmov.f32	s9, s14
 80229e2:	d028      	beq.n	8022a36 <arm_std_f32+0x6a>
 80229e4:	f100 0310 	add.w	r3, r0, #16
 80229e8:	462c      	mov	r4, r5
 80229ea:	ed53 7a04 	vldr	s15, [r3, #-16]
 80229ee:	ed13 5a03 	vldr	s10, [r3, #-12]
 80229f2:	ed53 5a02 	vldr	s11, [r3, #-8]
 80229f6:	ed13 6a01 	vldr	s12, [r3, #-4]
 80229fa:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80229fe:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8022a02:	ee36 7a87 	vadd.f32	s14, s13, s14
 8022a06:	ee65 6a05 	vmul.f32	s13, s10, s10
 8022a0a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8022a0e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8022a12:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8022a16:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8022a1a:	ee77 6a26 	vadd.f32	s13, s14, s13
 8022a1e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8022a22:	3c01      	subs	r4, #1
 8022a24:	ee77 4a86 	vadd.f32	s9, s15, s12
 8022a28:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022a2c:	f103 0310 	add.w	r3, r3, #16
 8022a30:	d1db      	bne.n	80229ea <arm_std_f32+0x1e>
 8022a32:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8022a36:	f011 0303 	ands.w	r3, r1, #3
 8022a3a:	d01b      	beq.n	8022a74 <arm_std_f32+0xa8>
 8022a3c:	edd0 7a00 	vldr	s15, [r0]
 8022a40:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022a44:	3b01      	subs	r3, #1
 8022a46:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022a4a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022a4e:	d011      	beq.n	8022a74 <arm_std_f32+0xa8>
 8022a50:	edd0 7a01 	vldr	s15, [r0, #4]
 8022a54:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022a58:	2b01      	cmp	r3, #1
 8022a5a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022a5e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022a62:	d007      	beq.n	8022a74 <arm_std_f32+0xa8>
 8022a64:	edd0 7a02 	vldr	s15, [r0, #8]
 8022a68:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022a6c:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022a70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022a74:	ee07 1a90 	vmov	s15, r1
 8022a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022a7c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8022a80:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8022a84:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8022a88:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8022a8c:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8022a90:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8022a94:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8022a98:	ee30 0a66 	vsub.f32	s0, s0, s13
 8022a9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022aa4:	db0c      	blt.n	8022ac0 <arm_std_f32+0xf4>
 8022aa6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8022aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022aae:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8022ab2:	d40e      	bmi.n	8022ad2 <arm_std_f32+0x106>
 8022ab4:	ed82 8a00 	vstr	s16, [r2]
 8022ab8:	b003      	add	sp, #12
 8022aba:	ecbd 8b02 	vpop	{d8}
 8022abe:	bd30      	pop	{r4, r5, pc}
 8022ac0:	2300      	movs	r3, #0
 8022ac2:	6013      	str	r3, [r2, #0]
 8022ac4:	b003      	add	sp, #12
 8022ac6:	ecbd 8b02 	vpop	{d8}
 8022aca:	bd30      	pop	{r4, r5, pc}
 8022acc:	2300      	movs	r3, #0
 8022ace:	6013      	str	r3, [r2, #0]
 8022ad0:	4770      	bx	lr
 8022ad2:	9201      	str	r2, [sp, #4]
 8022ad4:	f003 fbea 	bl	80262ac <sqrtf>
 8022ad8:	9a01      	ldr	r2, [sp, #4]
 8022ada:	e7eb      	b.n	8022ab4 <arm_std_f32+0xe8>
 8022adc:	00000000 	.word	0x00000000

08022ae0 <arm_mean_f32>:
 8022ae0:	b430      	push	{r4, r5}
 8022ae2:	088d      	lsrs	r5, r1, #2
 8022ae4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8022b58 <arm_mean_f32+0x78>
 8022ae8:	d018      	beq.n	8022b1c <arm_mean_f32+0x3c>
 8022aea:	f100 0310 	add.w	r3, r0, #16
 8022aee:	462c      	mov	r4, r5
 8022af0:	ed53 5a04 	vldr	s11, [r3, #-16]
 8022af4:	ed13 6a03 	vldr	s12, [r3, #-12]
 8022af8:	ed53 6a02 	vldr	s13, [r3, #-8]
 8022afc:	ed13 7a01 	vldr	s14, [r3, #-4]
 8022b00:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8022b04:	3c01      	subs	r4, #1
 8022b06:	ee77 7a86 	vadd.f32	s15, s15, s12
 8022b0a:	f103 0310 	add.w	r3, r3, #16
 8022b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b16:	d1eb      	bne.n	8022af0 <arm_mean_f32+0x10>
 8022b18:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8022b1c:	f011 0303 	ands.w	r3, r1, #3
 8022b20:	d00f      	beq.n	8022b42 <arm_mean_f32+0x62>
 8022b22:	ed90 7a00 	vldr	s14, [r0]
 8022b26:	3b01      	subs	r3, #1
 8022b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b2c:	d009      	beq.n	8022b42 <arm_mean_f32+0x62>
 8022b2e:	ed90 7a01 	vldr	s14, [r0, #4]
 8022b32:	2b01      	cmp	r3, #1
 8022b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b38:	bf1c      	itt	ne
 8022b3a:	ed90 7a02 	vldrne	s14, [r0, #8]
 8022b3e:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8022b42:	ee07 1a10 	vmov	s14, r1
 8022b46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8022b4a:	bc30      	pop	{r4, r5}
 8022b4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8022b50:	edc2 6a00 	vstr	s13, [r2]
 8022b54:	4770      	bx	lr
 8022b56:	bf00      	nop
 8022b58:	00000000 	.word	0x00000000

08022b5c <arm_correlate_f32>:
 8022b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b60:	4299      	cmp	r1, r3
 8022b62:	b08d      	sub	sp, #52	; 0x34
 8022b64:	f0c0 824c 	bcc.w	8023000 <arm_correlate_f32+0x4a4>
 8022b68:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022b6a:	eba1 0c03 	sub.w	ip, r1, r3
 8022b6e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8022b72:	f04f 0e04 	mov.w	lr, #4
 8022b76:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8022b7a:	3101      	adds	r1, #1
 8022b7c:	1ac9      	subs	r1, r1, r3
 8022b7e:	3c01      	subs	r4, #1
 8022b80:	1e5e      	subs	r6, r3, #1
 8022b82:	9102      	str	r1, [sp, #8]
 8022b84:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8022b88:	f000 8294 	beq.w	80230b4 <arm_correlate_f32+0x558>
 8022b8c:	eddf 7a53 	vldr	s15, [pc, #332]	; 8022cdc <arm_correlate_f32+0x180>
 8022b90:	f1a1 0804 	sub.w	r8, r1, #4
 8022b94:	46e1      	mov	r9, ip
 8022b96:	4605      	mov	r5, r0
 8022b98:	2401      	movs	r4, #1
 8022b9a:	f014 0703 	ands.w	r7, r4, #3
 8022b9e:	d01b      	beq.n	8022bd8 <arm_correlate_f32+0x7c>
 8022ba0:	ed91 7a00 	vldr	s14, [r1]
 8022ba4:	edd5 6a00 	vldr	s13, [r5]
 8022ba8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022bac:	3f01      	subs	r7, #1
 8022bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022bb2:	d011      	beq.n	8022bd8 <arm_correlate_f32+0x7c>
 8022bb4:	ed91 7a01 	vldr	s14, [r1, #4]
 8022bb8:	edd5 6a01 	vldr	s13, [r5, #4]
 8022bbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022bc0:	2f01      	cmp	r7, #1
 8022bc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022bc6:	d007      	beq.n	8022bd8 <arm_correlate_f32+0x7c>
 8022bc8:	ed95 7a02 	vldr	s14, [r5, #8]
 8022bcc:	edd1 6a02 	vldr	s13, [r1, #8]
 8022bd0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022bd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022bd8:	1c67      	adds	r7, r4, #1
 8022bda:	42bb      	cmp	r3, r7
 8022bdc:	edc9 7a00 	vstr	s15, [r9]
 8022be0:	4641      	mov	r1, r8
 8022be2:	44f1      	add	r9, lr
 8022be4:	d03a      	beq.n	8022c5c <arm_correlate_f32+0x100>
 8022be6:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8022bea:	f000 8267 	beq.w	80230bc <arm_correlate_f32+0x560>
 8022bee:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8022bf2:	f100 0110 	add.w	r1, r0, #16
 8022bf6:	eddf 7a39 	vldr	s15, [pc, #228]	; 8022cdc <arm_correlate_f32+0x180>
 8022bfa:	eb01 050a 	add.w	r5, r1, sl
 8022bfe:	f108 0410 	add.w	r4, r8, #16
 8022c02:	ed11 7a04 	vldr	s14, [r1, #-16]
 8022c06:	ed54 3a04 	vldr	s7, [r4, #-16]
 8022c0a:	ed11 6a03 	vldr	s12, [r1, #-12]
 8022c0e:	ed14 4a03 	vldr	s8, [r4, #-12]
 8022c12:	ed51 6a02 	vldr	s13, [r1, #-8]
 8022c16:	ed54 4a02 	vldr	s9, [r4, #-8]
 8022c1a:	ed51 5a01 	vldr	s11, [r1, #-4]
 8022c1e:	ed14 5a01 	vldr	s10, [r4, #-4]
 8022c22:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022c26:	ee26 6a04 	vmul.f32	s12, s12, s8
 8022c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022c2e:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022c32:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022c36:	ee65 6a85 	vmul.f32	s13, s11, s10
 8022c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022c3e:	3110      	adds	r1, #16
 8022c40:	428d      	cmp	r5, r1
 8022c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022c46:	f104 0410 	add.w	r4, r4, #16
 8022c4a:	d1da      	bne.n	8022c02 <arm_correlate_f32+0xa6>
 8022c4c:	eb00 050a 	add.w	r5, r0, sl
 8022c50:	eb08 010a 	add.w	r1, r8, sl
 8022c54:	f1a8 0804 	sub.w	r8, r8, #4
 8022c58:	463c      	mov	r4, r7
 8022c5a:	e79e      	b.n	8022b9a <arm_correlate_f32+0x3e>
 8022c5c:	2b03      	cmp	r3, #3
 8022c5e:	fb0e cc04 	mla	ip, lr, r4, ip
 8022c62:	f240 81dd 	bls.w	8023020 <arm_correlate_f32+0x4c4>
 8022c66:	9b02      	ldr	r3, [sp, #8]
 8022c68:	0899      	lsrs	r1, r3, #2
 8022c6a:	9103      	str	r1, [sp, #12]
 8022c6c:	f000 8220 	beq.w	80230b0 <arm_correlate_f32+0x554>
 8022c70:	08bb      	lsrs	r3, r7, #2
 8022c72:	f007 0403 	and.w	r4, r7, #3
 8022c76:	9300      	str	r3, [sp, #0]
 8022c78:	011b      	lsls	r3, r3, #4
 8022c7a:	f103 0b0c 	add.w	fp, r3, #12
 8022c7e:	18d5      	adds	r5, r2, r3
 8022c80:	1e63      	subs	r3, r4, #1
 8022c82:	0109      	lsls	r1, r1, #4
 8022c84:	9306      	str	r3, [sp, #24]
 8022c86:	f100 080c 	add.w	r8, r0, #12
 8022c8a:	9401      	str	r4, [sp, #4]
 8022c8c:	9104      	str	r1, [sp, #16]
 8022c8e:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8022c92:	4441      	add	r1, r8
 8022c94:	f102 0310 	add.w	r3, r2, #16
 8022c98:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8022c9c:	9e06      	ldr	r6, [sp, #24]
 8022c9e:	9405      	str	r4, [sp, #20]
 8022ca0:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8022ca4:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8022ca8:	46e1      	mov	r9, ip
 8022caa:	4483      	add	fp, r0
 8022cac:	460f      	mov	r7, r1
 8022cae:	920b      	str	r2, [sp, #44]	; 0x2c
 8022cb0:	469c      	mov	ip, r3
 8022cb2:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8022cdc <arm_correlate_f32+0x180>
 8022cb6:	ed58 1a03 	vldr	s3, [r8, #-12]
 8022cba:	ed18 2a02 	vldr	s4, [r8, #-8]
 8022cbe:	ed58 2a01 	vldr	s5, [r8, #-4]
 8022cc2:	ed98 0a00 	vldr	s0, [r8]
 8022cc6:	9900      	ldr	r1, [sp, #0]
 8022cc8:	eef0 5a46 	vmov.f32	s11, s12
 8022ccc:	eeb0 5a46 	vmov.f32	s10, s12
 8022cd0:	eef0 4a46 	vmov.f32	s9, s12
 8022cd4:	4663      	mov	r3, ip
 8022cd6:	4642      	mov	r2, r8
 8022cd8:	e005      	b.n	8022ce6 <arm_correlate_f32+0x18a>
 8022cda:	bf00      	nop
 8022cdc:	00000000 	.word	0x00000000
 8022ce0:	ed90 0a04 	vldr	s0, [r0, #16]
 8022ce4:	3210      	adds	r2, #16
 8022ce6:	ed53 6a04 	vldr	s13, [r3, #-16]
 8022cea:	ed13 7a03 	vldr	s14, [r3, #-12]
 8022cee:	ed53 7a02 	vldr	s15, [r3, #-8]
 8022cf2:	ed13 1a01 	vldr	s2, [r3, #-4]
 8022cf6:	ee62 3a26 	vmul.f32	s7, s4, s13
 8022cfa:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8022cfe:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8022d02:	edd2 1a01 	vldr	s3, [r2, #4]
 8022d06:	ee66 6a80 	vmul.f32	s13, s13, s0
 8022d0a:	ee22 3a07 	vmul.f32	s6, s4, s14
 8022d0e:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022d12:	ee74 5a25 	vadd.f32	s11, s8, s11
 8022d16:	ee62 3a87 	vmul.f32	s7, s5, s14
 8022d1a:	ee20 4a07 	vmul.f32	s8, s0, s14
 8022d1e:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8022d22:	ee36 6a86 	vadd.f32	s12, s13, s12
 8022d26:	ed92 2a02 	vldr	s4, [r2, #8]
 8022d2a:	ee27 7a21 	vmul.f32	s14, s14, s3
 8022d2e:	ee73 3a85 	vadd.f32	s7, s7, s10
 8022d32:	ee37 7a06 	vadd.f32	s14, s14, s12
 8022d36:	ee20 5a27 	vmul.f32	s10, s0, s15
 8022d3a:	ee33 3a24 	vadd.f32	s6, s6, s9
 8022d3e:	ee34 4a25 	vadd.f32	s8, s8, s11
 8022d42:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8022d46:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8022d4a:	edd2 2a03 	vldr	s5, [r2, #12]
 8022d4e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8022d52:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d5a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8022d5e:	ee20 0a01 	vmul.f32	s0, s0, s2
 8022d62:	ee61 3a81 	vmul.f32	s7, s3, s2
 8022d66:	ee75 5a84 	vadd.f32	s11, s11, s8
 8022d6a:	ee22 7a01 	vmul.f32	s14, s4, s2
 8022d6e:	ee21 6a22 	vmul.f32	s12, s2, s5
 8022d72:	3901      	subs	r1, #1
 8022d74:	f103 0310 	add.w	r3, r3, #16
 8022d78:	ee70 4a24 	vadd.f32	s9, s0, s9
 8022d7c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022d80:	ee77 5a25 	vadd.f32	s11, s14, s11
 8022d84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022d88:	4610      	mov	r0, r2
 8022d8a:	d1a9      	bne.n	8022ce0 <arm_correlate_f32+0x184>
 8022d8c:	9b01      	ldr	r3, [sp, #4]
 8022d8e:	b3f3      	cbz	r3, 8022e0e <arm_correlate_f32+0x2b2>
 8022d90:	edd5 7a00 	vldr	s15, [r5]
 8022d94:	ed9b 4a00 	vldr	s8, [fp]
 8022d98:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8022d9c:	ee62 3a27 	vmul.f32	s7, s4, s15
 8022da0:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8022da4:	ee64 7a27 	vmul.f32	s15, s8, s15
 8022da8:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8022dac:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022db0:	ee75 5a87 	vadd.f32	s11, s11, s14
 8022db4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022db8:	b34e      	cbz	r6, 8022e0e <arm_correlate_f32+0x2b2>
 8022dba:	edd5 7a01 	vldr	s15, [r5, #4]
 8022dbe:	eddb 6a01 	vldr	s13, [fp, #4]
 8022dc2:	ee22 7a27 	vmul.f32	s14, s4, s15
 8022dc6:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8022dca:	ee67 3a84 	vmul.f32	s7, s15, s8
 8022dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022dd2:	2e01      	cmp	r6, #1
 8022dd4:	ee74 4a87 	vadd.f32	s9, s9, s14
 8022dd8:	ee35 5a03 	vadd.f32	s10, s10, s6
 8022ddc:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8022de0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022de4:	d013      	beq.n	8022e0e <arm_correlate_f32+0x2b2>
 8022de6:	ed95 7a02 	vldr	s14, [r5, #8]
 8022dea:	eddb 3a02 	vldr	s7, [fp, #8]
 8022dee:	ee62 7a87 	vmul.f32	s15, s5, s14
 8022df2:	ee27 4a04 	vmul.f32	s8, s14, s8
 8022df6:	ee67 6a26 	vmul.f32	s13, s14, s13
 8022dfa:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022dfe:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022e02:	ee35 5a04 	vadd.f32	s10, s10, s8
 8022e06:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8022e0a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8022e0e:	f108 0810 	add.w	r8, r8, #16
 8022e12:	eb09 020e 	add.w	r2, r9, lr
 8022e16:	eb0a 030e 	add.w	r3, sl, lr
 8022e1a:	4547      	cmp	r7, r8
 8022e1c:	edc9 4a00 	vstr	s9, [r9]
 8022e20:	f10b 0b10 	add.w	fp, fp, #16
 8022e24:	ed82 5a00 	vstr	s10, [r2]
 8022e28:	44a1      	add	r9, r4
 8022e2a:	edca 5a00 	vstr	s11, [sl]
 8022e2e:	ed83 6a00 	vstr	s12, [r3]
 8022e32:	44a2      	add	sl, r4
 8022e34:	f47f af3d 	bne.w	8022cb2 <arm_correlate_f32+0x156>
 8022e38:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8022e3c:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8022e40:	9b03      	ldr	r3, [sp, #12]
 8022e42:	9c05      	ldr	r4, [sp, #20]
 8022e44:	9904      	ldr	r1, [sp, #16]
 8022e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e48:	fb04 cc03 	mla	ip, r4, r3, ip
 8022e4c:	4401      	add	r1, r0
 8022e4e:	009b      	lsls	r3, r3, #2
 8022e50:	460d      	mov	r5, r1
 8022e52:	9303      	str	r3, [sp, #12]
 8022e54:	9b02      	ldr	r3, [sp, #8]
 8022e56:	f013 0303 	ands.w	r3, r3, #3
 8022e5a:	9301      	str	r3, [sp, #4]
 8022e5c:	d071      	beq.n	8022f42 <arm_correlate_f32+0x3e6>
 8022e5e:	9903      	ldr	r1, [sp, #12]
 8022e60:	9205      	str	r2, [sp, #20]
 8022e62:	f007 0403 	and.w	r4, r7, #3
 8022e66:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8022e6a:	1c4f      	adds	r7, r1, #1
 8022e6c:	1859      	adds	r1, r3, r1
 8022e6e:	1d03      	adds	r3, r0, #4
 8022e70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022e74:	9400      	str	r4, [sp, #0]
 8022e76:	f102 0110 	add.w	r1, r2, #16
 8022e7a:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8022e7e:	3c01      	subs	r4, #1
 8022e80:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8022e84:	eb02 090a 	add.w	r9, r2, sl
 8022e88:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8022e8c:	46e0      	mov	r8, ip
 8022e8e:	4618      	mov	r0, r3
 8022e90:	460e      	mov	r6, r1
 8022e92:	4622      	mov	r2, r4
 8022e94:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8022cdc <arm_correlate_f32+0x180>
 8022e98:	f105 0110 	add.w	r1, r5, #16
 8022e9c:	4633      	mov	r3, r6
 8022e9e:	465c      	mov	r4, fp
 8022ea0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8022ea4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8022ea8:	ed11 6a03 	vldr	s12, [r1, #-12]
 8022eac:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022eb0:	ed51 6a02 	vldr	s13, [r1, #-8]
 8022eb4:	ed53 4a02 	vldr	s9, [r3, #-8]
 8022eb8:	ed51 5a01 	vldr	s11, [r1, #-4]
 8022ebc:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022ec0:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022ec4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8022ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022ecc:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022ed0:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022ed4:	ee65 6a85 	vmul.f32	s13, s11, s10
 8022ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022edc:	3c01      	subs	r4, #1
 8022ede:	f101 0110 	add.w	r1, r1, #16
 8022ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022ee6:	f103 0310 	add.w	r3, r3, #16
 8022eea:	d1d9      	bne.n	8022ea0 <arm_correlate_f32+0x344>
 8022eec:	9b00      	ldr	r3, [sp, #0]
 8022eee:	4455      	add	r5, sl
 8022ef0:	b1d3      	cbz	r3, 8022f28 <arm_correlate_f32+0x3cc>
 8022ef2:	ed99 7a00 	vldr	s14, [r9]
 8022ef6:	edd5 6a00 	vldr	s13, [r5]
 8022efa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022f02:	b18a      	cbz	r2, 8022f28 <arm_correlate_f32+0x3cc>
 8022f04:	ed99 7a01 	vldr	s14, [r9, #4]
 8022f08:	edd5 6a01 	vldr	s13, [r5, #4]
 8022f0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022f10:	2a01      	cmp	r2, #1
 8022f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022f16:	d007      	beq.n	8022f28 <arm_correlate_f32+0x3cc>
 8022f18:	ed95 7a02 	vldr	s14, [r5, #8]
 8022f1c:	edd9 6a02 	vldr	s13, [r9, #8]
 8022f20:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022f28:	463d      	mov	r5, r7
 8022f2a:	3704      	adds	r7, #4
 8022f2c:	42b8      	cmp	r0, r7
 8022f2e:	edc8 7a00 	vstr	s15, [r8]
 8022f32:	44f0      	add	r8, lr
 8022f34:	d1ae      	bne.n	8022e94 <arm_correlate_f32+0x338>
 8022f36:	9b01      	ldr	r3, [sp, #4]
 8022f38:	9a05      	ldr	r2, [sp, #20]
 8022f3a:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8022f3e:	fb0e cc03 	mla	ip, lr, r3, ip
 8022f42:	9b02      	ldr	r3, [sp, #8]
 8022f44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8022f48:	08b5      	lsrs	r5, r6, #2
 8022f4a:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8022cdc <arm_correlate_f32+0x180>
 8022f4e:	f000 80ac 	beq.w	80230aa <arm_correlate_f32+0x54e>
 8022f52:	f100 0110 	add.w	r1, r0, #16
 8022f56:	f102 0310 	add.w	r3, r2, #16
 8022f5a:	462c      	mov	r4, r5
 8022f5c:	ed51 6a04 	vldr	s13, [r1, #-16]
 8022f60:	ed53 3a04 	vldr	s7, [r3, #-16]
 8022f64:	ed11 7a03 	vldr	s14, [r1, #-12]
 8022f68:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022f6c:	ed51 7a02 	vldr	s15, [r1, #-8]
 8022f70:	ed53 4a02 	vldr	s9, [r3, #-8]
 8022f74:	ed11 6a01 	vldr	s12, [r1, #-4]
 8022f78:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022f7c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8022f80:	ee27 7a04 	vmul.f32	s14, s14, s8
 8022f84:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8022f88:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8022f8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022f90:	ee66 6a05 	vmul.f32	s13, s12, s10
 8022f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022f98:	3c01      	subs	r4, #1
 8022f9a:	f101 0110 	add.w	r1, r1, #16
 8022f9e:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8022fa2:	f103 0310 	add.w	r3, r3, #16
 8022fa6:	d1d9      	bne.n	8022f5c <arm_correlate_f32+0x400>
 8022fa8:	012d      	lsls	r5, r5, #4
 8022faa:	1941      	adds	r1, r0, r5
 8022fac:	4415      	add	r5, r2
 8022fae:	f016 0303 	ands.w	r3, r6, #3
 8022fb2:	d01b      	beq.n	8022fec <arm_correlate_f32+0x490>
 8022fb4:	edd5 7a00 	vldr	s15, [r5]
 8022fb8:	ed91 7a00 	vldr	s14, [r1]
 8022fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022fc0:	3b01      	subs	r3, #1
 8022fc2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022fc6:	d011      	beq.n	8022fec <arm_correlate_f32+0x490>
 8022fc8:	edd5 7a01 	vldr	s15, [r5, #4]
 8022fcc:	ed91 7a01 	vldr	s14, [r1, #4]
 8022fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022fd4:	2b01      	cmp	r3, #1
 8022fd6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022fda:	d007      	beq.n	8022fec <arm_correlate_f32+0x490>
 8022fdc:	edd1 7a02 	vldr	s15, [r1, #8]
 8022fe0:	ed95 7a02 	vldr	s14, [r5, #8]
 8022fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022fe8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022fec:	3e01      	subs	r6, #1
 8022fee:	edcc 5a00 	vstr	s11, [ip]
 8022ff2:	f100 0004 	add.w	r0, r0, #4
 8022ff6:	44f4      	add	ip, lr
 8022ff8:	d1a6      	bne.n	8022f48 <arm_correlate_f32+0x3ec>
 8022ffa:	b00d      	add	sp, #52	; 0x34
 8022ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023000:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8023004:	4606      	mov	r6, r0
 8023006:	3c02      	subs	r4, #2
 8023008:	4610      	mov	r0, r2
 802300a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802300c:	440c      	add	r4, r1
 802300e:	460d      	mov	r5, r1
 8023010:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8023014:	4619      	mov	r1, r3
 8023016:	4632      	mov	r2, r6
 8023018:	f06f 0e03 	mvn.w	lr, #3
 802301c:	462b      	mov	r3, r5
 802301e:	e5aa      	b.n	8022b76 <arm_correlate_f32+0x1a>
 8023020:	9902      	ldr	r1, [sp, #8]
 8023022:	2900      	cmp	r1, #0
 8023024:	d090      	beq.n	8022f48 <arm_correlate_f32+0x3ec>
 8023026:	9902      	ldr	r1, [sp, #8]
 8023028:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8022cdc <arm_correlate_f32+0x180>
 802302c:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8023030:	eb00 0708 	add.w	r7, r0, r8
 8023034:	4601      	mov	r1, r0
 8023036:	4665      	mov	r5, ip
 8023038:	e020      	b.n	802307c <arm_correlate_f32+0x520>
 802303a:	edd2 7a00 	vldr	s15, [r2]
 802303e:	ecb4 7a01 	vldmia	r4!, {s14}
 8023042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023046:	ee77 7a86 	vadd.f32	s15, s15, s12
 802304a:	b18e      	cbz	r6, 8023070 <arm_correlate_f32+0x514>
 802304c:	ed92 7a01 	vldr	s14, [r2, #4]
 8023050:	edd1 6a01 	vldr	s13, [r1, #4]
 8023054:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023058:	2b02      	cmp	r3, #2
 802305a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802305e:	d007      	beq.n	8023070 <arm_correlate_f32+0x514>
 8023060:	ed91 7a02 	vldr	s14, [r1, #8]
 8023064:	edd2 6a02 	vldr	s13, [r2, #8]
 8023068:	ee27 7a26 	vmul.f32	s14, s14, s13
 802306c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023070:	42bc      	cmp	r4, r7
 8023072:	edc5 7a00 	vstr	s15, [r5]
 8023076:	4621      	mov	r1, r4
 8023078:	4475      	add	r5, lr
 802307a:	d00b      	beq.n	8023094 <arm_correlate_f32+0x538>
 802307c:	460c      	mov	r4, r1
 802307e:	2b00      	cmp	r3, #0
 8023080:	d1db      	bne.n	802303a <arm_correlate_f32+0x4de>
 8023082:	1d0c      	adds	r4, r1, #4
 8023084:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80230c4 <arm_correlate_f32+0x568>
 8023088:	42bc      	cmp	r4, r7
 802308a:	edc5 7a00 	vstr	s15, [r5]
 802308e:	4621      	mov	r1, r4
 8023090:	4475      	add	r5, lr
 8023092:	d1f3      	bne.n	802307c <arm_correlate_f32+0x520>
 8023094:	9b02      	ldr	r3, [sp, #8]
 8023096:	4440      	add	r0, r8
 8023098:	fb0e cc03 	mla	ip, lr, r3, ip
 802309c:	2e00      	cmp	r6, #0
 802309e:	d0ac      	beq.n	8022ffa <arm_correlate_f32+0x49e>
 80230a0:	08b5      	lsrs	r5, r6, #2
 80230a2:	eddf 5a08 	vldr	s11, [pc, #32]	; 80230c4 <arm_correlate_f32+0x568>
 80230a6:	f47f af54 	bne.w	8022f52 <arm_correlate_f32+0x3f6>
 80230aa:	4615      	mov	r5, r2
 80230ac:	4601      	mov	r1, r0
 80230ae:	e77e      	b.n	8022fae <arm_correlate_f32+0x452>
 80230b0:	4605      	mov	r5, r0
 80230b2:	e6cf      	b.n	8022e54 <arm_correlate_f32+0x2f8>
 80230b4:	9902      	ldr	r1, [sp, #8]
 80230b6:	2900      	cmp	r1, #0
 80230b8:	d1b5      	bne.n	8023026 <arm_correlate_f32+0x4ca>
 80230ba:	e79e      	b.n	8022ffa <arm_correlate_f32+0x49e>
 80230bc:	eddf 7a01 	vldr	s15, [pc, #4]	; 80230c4 <arm_correlate_f32+0x568>
 80230c0:	4605      	mov	r5, r0
 80230c2:	e5c7      	b.n	8022c54 <arm_correlate_f32+0xf8>
 80230c4:	00000000 	.word	0x00000000

080230c8 <arm_conv_f32>:
 80230c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230cc:	b08b      	sub	sp, #44	; 0x2c
 80230ce:	4299      	cmp	r1, r3
 80230d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80230d2:	d205      	bcs.n	80230e0 <arm_conv_f32+0x18>
 80230d4:	4606      	mov	r6, r0
 80230d6:	460c      	mov	r4, r1
 80230d8:	4610      	mov	r0, r2
 80230da:	4619      	mov	r1, r3
 80230dc:	4632      	mov	r2, r6
 80230de:	4623      	mov	r3, r4
 80230e0:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 80230e4:	3101      	adds	r1, #1
 80230e6:	1ac9      	subs	r1, r1, r3
 80230e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80230ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80230f0:	9101      	str	r1, [sp, #4]
 80230f2:	1e59      	subs	r1, r3, #1
 80230f4:	eb02 070b 	add.w	r7, r2, fp
 80230f8:	f000 8277 	beq.w	80235ea <arm_conv_f32+0x522>
 80230fc:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80233bc <arm_conv_f32+0x2f4>
 8023100:	f102 0904 	add.w	r9, r2, #4
 8023104:	46aa      	mov	sl, r5
 8023106:	4680      	mov	r8, r0
 8023108:	2401      	movs	r4, #1
 802310a:	f014 0603 	ands.w	r6, r4, #3
 802310e:	d01b      	beq.n	8023148 <arm_conv_f32+0x80>
 8023110:	ed92 7a00 	vldr	s14, [r2]
 8023114:	edd8 6a00 	vldr	s13, [r8]
 8023118:	ee27 7a26 	vmul.f32	s14, s14, s13
 802311c:	3e01      	subs	r6, #1
 802311e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023122:	d011      	beq.n	8023148 <arm_conv_f32+0x80>
 8023124:	ed12 7a01 	vldr	s14, [r2, #-4]
 8023128:	edd8 6a01 	vldr	s13, [r8, #4]
 802312c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023130:	2e01      	cmp	r6, #1
 8023132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023136:	d007      	beq.n	8023148 <arm_conv_f32+0x80>
 8023138:	ed98 7a02 	vldr	s14, [r8, #8]
 802313c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8023140:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023148:	3401      	adds	r4, #1
 802314a:	42a3      	cmp	r3, r4
 802314c:	ecea 7a01 	vstmia	sl!, {s15}
 8023150:	464a      	mov	r2, r9
 8023152:	d03a      	beq.n	80231ca <arm_conv_f32+0x102>
 8023154:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8023158:	f000 824c 	beq.w	80235f4 <arm_conv_f32+0x52c>
 802315c:	f100 0210 	add.w	r2, r0, #16
 8023160:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8023164:	eddf 7a95 	vldr	s15, [pc, #596]	; 80233bc <arm_conv_f32+0x2f4>
 8023168:	eb02 0c08 	add.w	ip, r2, r8
 802316c:	f1a9 0610 	sub.w	r6, r9, #16
 8023170:	ed12 7a04 	vldr	s14, [r2, #-16]
 8023174:	edd6 3a04 	vldr	s7, [r6, #16]
 8023178:	ed12 6a03 	vldr	s12, [r2, #-12]
 802317c:	ed96 4a03 	vldr	s8, [r6, #12]
 8023180:	ed52 6a02 	vldr	s13, [r2, #-8]
 8023184:	edd6 4a02 	vldr	s9, [r6, #8]
 8023188:	ed52 5a01 	vldr	s11, [r2, #-4]
 802318c:	ed96 5a01 	vldr	s10, [r6, #4]
 8023190:	ee27 7a23 	vmul.f32	s14, s14, s7
 8023194:	ee26 6a04 	vmul.f32	s12, s12, s8
 8023198:	ee77 7a27 	vadd.f32	s15, s14, s15
 802319c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80231a0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80231a4:	ee65 6a85 	vmul.f32	s13, s11, s10
 80231a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80231ac:	3210      	adds	r2, #16
 80231ae:	4594      	cmp	ip, r2
 80231b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80231b4:	f1a6 0610 	sub.w	r6, r6, #16
 80231b8:	d1da      	bne.n	8023170 <arm_conv_f32+0xa8>
 80231ba:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 80231be:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 80231c2:	4480      	add	r8, r0
 80231c4:	f109 0904 	add.w	r9, r9, #4
 80231c8:	e79f      	b.n	802310a <arm_conv_f32+0x42>
 80231ca:	2b03      	cmp	r3, #3
 80231cc:	445d      	add	r5, fp
 80231ce:	f240 80e9 	bls.w	80233a4 <arm_conv_f32+0x2dc>
 80231d2:	9b01      	ldr	r3, [sp, #4]
 80231d4:	089a      	lsrs	r2, r3, #2
 80231d6:	9202      	str	r2, [sp, #8]
 80231d8:	f000 8203 	beq.w	80235e2 <arm_conv_f32+0x51a>
 80231dc:	ea4f 0894 	mov.w	r8, r4, lsr #2
 80231e0:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80231e4:	0112      	lsls	r2, r2, #4
 80231e6:	f004 0603 	and.w	r6, r4, #3
 80231ea:	9203      	str	r2, [sp, #12]
 80231ec:	f1a3 0a10 	sub.w	sl, r3, #16
 80231f0:	f1a3 020c 	sub.w	r2, r3, #12
 80231f4:	3b08      	subs	r3, #8
 80231f6:	9204      	str	r2, [sp, #16]
 80231f8:	9305      	str	r3, [sp, #20]
 80231fa:	f106 39ff 	add.w	r9, r6, #4294967295
 80231fe:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8023202:	9a03      	ldr	r2, [sp, #12]
 8023204:	f100 0c1c 	add.w	ip, r0, #28
 8023208:	e9cd 4106 	strd	r4, r1, [sp, #24]
 802320c:	464c      	mov	r4, r9
 802320e:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8023212:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8023216:	f1a7 0310 	sub.w	r3, r7, #16
 802321a:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 802321e:	eb05 0b02 	add.w	fp, r5, r2
 8023222:	461f      	mov	r7, r3
 8023224:	3510      	adds	r5, #16
 8023226:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80233bc <arm_conv_f32+0x2f4>
 802322a:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 802322e:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8023232:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8023236:	eeb0 5a46 	vmov.f32	s10, s12
 802323a:	eef0 4a46 	vmov.f32	s9, s12
 802323e:	eef0 5a46 	vmov.f32	s11, s12
 8023242:	463a      	mov	r2, r7
 8023244:	4663      	mov	r3, ip
 8023246:	4641      	mov	r1, r8
 8023248:	edd2 6a04 	vldr	s13, [r2, #16]
 802324c:	ed13 0a04 	vldr	s0, [r3, #-16]
 8023250:	ed92 7a03 	vldr	s14, [r2, #12]
 8023254:	edd2 7a02 	vldr	s15, [r2, #8]
 8023258:	edd2 0a01 	vldr	s1, [r2, #4]
 802325c:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8023260:	ee62 3a26 	vmul.f32	s7, s4, s13
 8023264:	ee61 2a26 	vmul.f32	s5, s2, s13
 8023268:	ed13 1a03 	vldr	s2, [r3, #-12]
 802326c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8023270:	ee21 4a87 	vmul.f32	s8, s3, s14
 8023274:	ee73 4a24 	vadd.f32	s9, s6, s9
 8023278:	ee33 5a85 	vadd.f32	s10, s7, s10
 802327c:	ee22 3a07 	vmul.f32	s6, s4, s14
 8023280:	ed53 1a02 	vldr	s3, [r3, #-8]
 8023284:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8023288:	ee36 6a86 	vadd.f32	s12, s13, s12
 802328c:	ee60 3a07 	vmul.f32	s7, s0, s14
 8023290:	ee27 7a01 	vmul.f32	s14, s14, s2
 8023294:	ee33 3a24 	vadd.f32	s6, s6, s9
 8023298:	ee37 7a06 	vadd.f32	s14, s14, s12
 802329c:	ee74 2a22 	vadd.f32	s5, s8, s5
 80232a0:	ee60 4a27 	vmul.f32	s9, s0, s15
 80232a4:	ee22 4a27 	vmul.f32	s8, s4, s15
 80232a8:	ee73 3a85 	vadd.f32	s7, s7, s10
 80232ac:	ed13 2a01 	vldr	s4, [r3, #-4]
 80232b0:	ee21 5a27 	vmul.f32	s10, s2, s15
 80232b4:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80232b8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80232bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80232c0:	ee34 4a22 	vadd.f32	s8, s8, s5
 80232c4:	ee60 5a20 	vmul.f32	s11, s0, s1
 80232c8:	ee21 3a20 	vmul.f32	s6, s2, s1
 80232cc:	ee35 5a23 	vadd.f32	s10, s10, s7
 80232d0:	ee21 7aa0 	vmul.f32	s14, s3, s1
 80232d4:	ee20 6a82 	vmul.f32	s12, s1, s4
 80232d8:	3901      	subs	r1, #1
 80232da:	f1a2 0210 	sub.w	r2, r2, #16
 80232de:	ee75 5a84 	vadd.f32	s11, s11, s8
 80232e2:	ee73 4a24 	vadd.f32	s9, s6, s9
 80232e6:	ee37 5a05 	vadd.f32	s10, s14, s10
 80232ea:	ee36 6a27 	vadd.f32	s12, s12, s15
 80232ee:	f103 0310 	add.w	r3, r3, #16
 80232f2:	d1a9      	bne.n	8023248 <arm_conv_f32+0x180>
 80232f4:	eb0a 030c 	add.w	r3, sl, ip
 80232f8:	2e00      	cmp	r6, #0
 80232fa:	d042      	beq.n	8023382 <arm_conv_f32+0x2ba>
 80232fc:	edde 7a00 	vldr	s15, [lr]
 8023300:	ed93 4a00 	vldr	s8, [r3]
 8023304:	ee61 6a27 	vmul.f32	s13, s2, s15
 8023308:	ee61 3aa7 	vmul.f32	s7, s3, s15
 802330c:	ee22 7a27 	vmul.f32	s14, s4, s15
 8023310:	ee64 7a27 	vmul.f32	s15, s8, s15
 8023314:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8023318:	ee74 4aa3 	vadd.f32	s9, s9, s7
 802331c:	ee35 5a07 	vadd.f32	s10, s10, s14
 8023320:	ee36 6a27 	vadd.f32	s12, s12, s15
 8023324:	eb09 030c 	add.w	r3, r9, ip
 8023328:	b35c      	cbz	r4, 8023382 <arm_conv_f32+0x2ba>
 802332a:	ed5e 7a01 	vldr	s15, [lr, #-4]
 802332e:	edd3 6a00 	vldr	s13, [r3]
 8023332:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8023336:	ee22 3a27 	vmul.f32	s6, s4, s15
 802333a:	ee67 3a84 	vmul.f32	s7, s15, s8
 802333e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023342:	2c01      	cmp	r4, #1
 8023344:	ee75 5a87 	vadd.f32	s11, s11, s14
 8023348:	ee74 4a83 	vadd.f32	s9, s9, s6
 802334c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8023350:	ee36 6a27 	vadd.f32	s12, s12, s15
 8023354:	eb00 030c 	add.w	r3, r0, ip
 8023358:	d013      	beq.n	8023382 <arm_conv_f32+0x2ba>
 802335a:	ed1e 7a02 	vldr	s14, [lr, #-8]
 802335e:	edd3 3a00 	vldr	s7, [r3]
 8023362:	ee62 7a07 	vmul.f32	s15, s4, s14
 8023366:	ee27 4a04 	vmul.f32	s8, s14, s8
 802336a:	ee67 6a26 	vmul.f32	s13, s14, s13
 802336e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8023372:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8023376:	ee74 4a84 	vadd.f32	s9, s9, s8
 802337a:	ee35 5a26 	vadd.f32	s10, s10, s13
 802337e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8023382:	45ab      	cmp	fp, r5
 8023384:	ed45 5a04 	vstr	s11, [r5, #-16]
 8023388:	ed45 4a03 	vstr	s9, [r5, #-12]
 802338c:	ed05 5a02 	vstr	s10, [r5, #-8]
 8023390:	ed05 6a01 	vstr	s12, [r5, #-4]
 8023394:	f10c 0c10 	add.w	ip, ip, #16
 8023398:	f105 0310 	add.w	r3, r5, #16
 802339c:	f000 809e 	beq.w	80234dc <arm_conv_f32+0x414>
 80233a0:	461d      	mov	r5, r3
 80233a2:	e740      	b.n	8023226 <arm_conv_f32+0x15e>
 80233a4:	9a01      	ldr	r2, [sp, #4]
 80233a6:	46ac      	mov	ip, r5
 80233a8:	2a00      	cmp	r2, #0
 80233aa:	d037      	beq.n	802341c <arm_conv_f32+0x354>
 80233ac:	9a01      	ldr	r2, [sp, #4]
 80233ae:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80233bc <arm_conv_f32+0x2f4>
 80233b2:	0096      	lsls	r6, r2, #2
 80233b4:	eb05 0c06 	add.w	ip, r5, r6
 80233b8:	4604      	mov	r4, r0
 80233ba:	e021      	b.n	8023400 <arm_conv_f32+0x338>
 80233bc:	00000000 	.word	0x00000000
 80233c0:	edd7 7a00 	vldr	s15, [r7]
 80233c4:	ecb2 7a01 	vldmia	r2!, {s14}
 80233c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80233cc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80233d0:	b189      	cbz	r1, 80233f6 <arm_conv_f32+0x32e>
 80233d2:	ed17 7a01 	vldr	s14, [r7, #-4]
 80233d6:	edd4 6a01 	vldr	s13, [r4, #4]
 80233da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80233de:	2b02      	cmp	r3, #2
 80233e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80233e4:	d007      	beq.n	80233f6 <arm_conv_f32+0x32e>
 80233e6:	ed94 7a02 	vldr	s14, [r4, #8]
 80233ea:	ed57 6a02 	vldr	s13, [r7, #-8]
 80233ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80233f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80233f6:	ece5 7a01 	vstmia	r5!, {s15}
 80233fa:	4565      	cmp	r5, ip
 80233fc:	4614      	mov	r4, r2
 80233fe:	d00a      	beq.n	8023416 <arm_conv_f32+0x34e>
 8023400:	4622      	mov	r2, r4
 8023402:	2b00      	cmp	r3, #0
 8023404:	d1dc      	bne.n	80233c0 <arm_conv_f32+0x2f8>
 8023406:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80233bc <arm_conv_f32+0x2f4>
 802340a:	ece5 7a01 	vstmia	r5!, {s15}
 802340e:	1d22      	adds	r2, r4, #4
 8023410:	4565      	cmp	r5, ip
 8023412:	4614      	mov	r4, r2
 8023414:	d1f4      	bne.n	8023400 <arm_conv_f32+0x338>
 8023416:	4430      	add	r0, r6
 8023418:	2900      	cmp	r1, #0
 802341a:	d059      	beq.n	80234d0 <arm_conv_f32+0x408>
 802341c:	088d      	lsrs	r5, r1, #2
 802341e:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 80233bc <arm_conv_f32+0x2f4>
 8023422:	d058      	beq.n	80234d6 <arm_conv_f32+0x40e>
 8023424:	f100 0210 	add.w	r2, r0, #16
 8023428:	f1a7 0310 	sub.w	r3, r7, #16
 802342c:	462c      	mov	r4, r5
 802342e:	ed52 6a04 	vldr	s13, [r2, #-16]
 8023432:	edd3 3a04 	vldr	s7, [r3, #16]
 8023436:	ed12 7a03 	vldr	s14, [r2, #-12]
 802343a:	ed93 4a03 	vldr	s8, [r3, #12]
 802343e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8023442:	edd3 4a02 	vldr	s9, [r3, #8]
 8023446:	ed12 6a01 	vldr	s12, [r2, #-4]
 802344a:	ed93 5a01 	vldr	s10, [r3, #4]
 802344e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8023452:	ee27 7a04 	vmul.f32	s14, s14, s8
 8023456:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802345a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 802345e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8023462:	ee66 6a05 	vmul.f32	s13, s12, s10
 8023466:	ee77 7a87 	vadd.f32	s15, s15, s14
 802346a:	3c01      	subs	r4, #1
 802346c:	f102 0210 	add.w	r2, r2, #16
 8023470:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8023474:	f1a3 0310 	sub.w	r3, r3, #16
 8023478:	d1d9      	bne.n	802342e <arm_conv_f32+0x366>
 802347a:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 802347e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8023482:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8023486:	f011 0203 	ands.w	r2, r1, #3
 802348a:	d01b      	beq.n	80234c4 <arm_conv_f32+0x3fc>
 802348c:	edd3 7a00 	vldr	s15, [r3]
 8023490:	ed95 7a00 	vldr	s14, [r5]
 8023494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023498:	3a01      	subs	r2, #1
 802349a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802349e:	d011      	beq.n	80234c4 <arm_conv_f32+0x3fc>
 80234a0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80234a4:	ed95 7a01 	vldr	s14, [r5, #4]
 80234a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80234ac:	2a01      	cmp	r2, #1
 80234ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80234b2:	d007      	beq.n	80234c4 <arm_conv_f32+0x3fc>
 80234b4:	edd5 7a02 	vldr	s15, [r5, #8]
 80234b8:	ed13 7a02 	vldr	s14, [r3, #-8]
 80234bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80234c0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80234c4:	3901      	subs	r1, #1
 80234c6:	ecec 5a01 	vstmia	ip!, {s11}
 80234ca:	f100 0004 	add.w	r0, r0, #4
 80234ce:	d1a5      	bne.n	802341c <arm_conv_f32+0x354>
 80234d0:	b00b      	add	sp, #44	; 0x2c
 80234d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234d6:	463b      	mov	r3, r7
 80234d8:	4605      	mov	r5, r0
 80234da:	e7d4      	b.n	8023486 <arm_conv_f32+0x3be>
 80234dc:	9b02      	ldr	r3, [sp, #8]
 80234de:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 80234e2:	009b      	lsls	r3, r3, #2
 80234e4:	9302      	str	r3, [sp, #8]
 80234e6:	9b03      	ldr	r3, [sp, #12]
 80234e8:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 80234ec:	4403      	add	r3, r0
 80234ee:	465d      	mov	r5, fp
 80234f0:	469e      	mov	lr, r3
 80234f2:	9b01      	ldr	r3, [sp, #4]
 80234f4:	f013 0c03 	ands.w	ip, r3, #3
 80234f8:	d075      	beq.n	80235e6 <arm_conv_f32+0x51e>
 80234fa:	9b02      	ldr	r3, [sp, #8]
 80234fc:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8023500:	f004 0403 	and.w	r4, r4, #3
 8023504:	f104 3bff 	add.w	fp, r4, #4294967295
 8023508:	f103 0801 	add.w	r8, r3, #1
 802350c:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8023510:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8023514:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8023518:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 802351c:	f1a7 0210 	sub.w	r2, r7, #16
 8023520:	4618      	mov	r0, r3
 8023522:	465b      	mov	r3, fp
 8023524:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8023528:	468b      	mov	fp, r1
 802352a:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 802352e:	4621      	mov	r1, r4
 8023530:	4617      	mov	r7, r2
 8023532:	461c      	mov	r4, r3
 8023534:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80233bc <arm_conv_f32+0x2f4>
 8023538:	f10e 0210 	add.w	r2, lr, #16
 802353c:	463b      	mov	r3, r7
 802353e:	4656      	mov	r6, sl
 8023540:	ed12 7a04 	vldr	s14, [r2, #-16]
 8023544:	edd3 3a04 	vldr	s7, [r3, #16]
 8023548:	ed12 6a03 	vldr	s12, [r2, #-12]
 802354c:	ed93 4a03 	vldr	s8, [r3, #12]
 8023550:	ed52 6a02 	vldr	s13, [r2, #-8]
 8023554:	edd3 4a02 	vldr	s9, [r3, #8]
 8023558:	ed52 5a01 	vldr	s11, [r2, #-4]
 802355c:	ed93 5a01 	vldr	s10, [r3, #4]
 8023560:	ee27 7a23 	vmul.f32	s14, s14, s7
 8023564:	ee26 6a04 	vmul.f32	s12, s12, s8
 8023568:	ee77 7a27 	vadd.f32	s15, s14, s15
 802356c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8023570:	ee76 7a27 	vadd.f32	s15, s12, s15
 8023574:	ee65 6a85 	vmul.f32	s13, s11, s10
 8023578:	ee77 7a27 	vadd.f32	s15, s14, s15
 802357c:	3e01      	subs	r6, #1
 802357e:	f102 0210 	add.w	r2, r2, #16
 8023582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023586:	f1a3 0310 	sub.w	r3, r3, #16
 802358a:	d1d9      	bne.n	8023540 <arm_conv_f32+0x478>
 802358c:	4486      	add	lr, r0
 802358e:	b1d1      	cbz	r1, 80235c6 <arm_conv_f32+0x4fe>
 8023590:	ed99 7a00 	vldr	s14, [r9]
 8023594:	edde 6a00 	vldr	s13, [lr]
 8023598:	ee27 7a26 	vmul.f32	s14, s14, s13
 802359c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80235a0:	b18c      	cbz	r4, 80235c6 <arm_conv_f32+0x4fe>
 80235a2:	ed19 7a01 	vldr	s14, [r9, #-4]
 80235a6:	edde 6a01 	vldr	s13, [lr, #4]
 80235aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80235ae:	2c01      	cmp	r4, #1
 80235b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80235b4:	d007      	beq.n	80235c6 <arm_conv_f32+0x4fe>
 80235b6:	ed9e 7a02 	vldr	s14, [lr, #8]
 80235ba:	ed59 6a02 	vldr	s13, [r9, #-8]
 80235be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80235c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80235c6:	ece5 7a01 	vstmia	r5!, {s15}
 80235ca:	4565      	cmp	r5, ip
 80235cc:	46c6      	mov	lr, r8
 80235ce:	f108 0804 	add.w	r8, r8, #4
 80235d2:	d1af      	bne.n	8023534 <arm_conv_f32+0x46c>
 80235d4:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 80235d8:	4659      	mov	r1, fp
 80235da:	9b01      	ldr	r3, [sp, #4]
 80235dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80235e0:	e71c      	b.n	802341c <arm_conv_f32+0x354>
 80235e2:	4686      	mov	lr, r0
 80235e4:	e785      	b.n	80234f2 <arm_conv_f32+0x42a>
 80235e6:	46ac      	mov	ip, r5
 80235e8:	e7f7      	b.n	80235da <arm_conv_f32+0x512>
 80235ea:	9a01      	ldr	r2, [sp, #4]
 80235ec:	2a00      	cmp	r2, #0
 80235ee:	f47f aedd 	bne.w	80233ac <arm_conv_f32+0x2e4>
 80235f2:	e76d      	b.n	80234d0 <arm_conv_f32+0x408>
 80235f4:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80233bc <arm_conv_f32+0x2f4>
 80235f8:	4680      	mov	r8, r0
 80235fa:	e5e3      	b.n	80231c4 <arm_conv_f32+0xfc>

080235fc <arm_sub_f32>:
 80235fc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8023600:	b4f0      	push	{r4, r5, r6, r7}
 8023602:	d033      	beq.n	802366c <arm_sub_f32+0x70>
 8023604:	f100 0610 	add.w	r6, r0, #16
 8023608:	f101 0510 	add.w	r5, r1, #16
 802360c:	f102 0410 	add.w	r4, r2, #16
 8023610:	4667      	mov	r7, ip
 8023612:	ed15 7a04 	vldr	s14, [r5, #-16]
 8023616:	ed56 7a04 	vldr	s15, [r6, #-16]
 802361a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802361e:	3f01      	subs	r7, #1
 8023620:	ed44 7a04 	vstr	s15, [r4, #-16]
 8023624:	ed15 7a03 	vldr	s14, [r5, #-12]
 8023628:	ed56 7a03 	vldr	s15, [r6, #-12]
 802362c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023630:	f106 0610 	add.w	r6, r6, #16
 8023634:	ed44 7a03 	vstr	s15, [r4, #-12]
 8023638:	ed15 7a02 	vldr	s14, [r5, #-8]
 802363c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8023640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023644:	f105 0510 	add.w	r5, r5, #16
 8023648:	ed44 7a02 	vstr	s15, [r4, #-8]
 802364c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8023650:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8023654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023658:	f104 0410 	add.w	r4, r4, #16
 802365c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8023660:	d1d7      	bne.n	8023612 <arm_sub_f32+0x16>
 8023662:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8023666:	4420      	add	r0, r4
 8023668:	4421      	add	r1, r4
 802366a:	4422      	add	r2, r4
 802366c:	f013 0303 	ands.w	r3, r3, #3
 8023670:	d01b      	beq.n	80236aa <arm_sub_f32+0xae>
 8023672:	edd0 7a00 	vldr	s15, [r0]
 8023676:	ed91 7a00 	vldr	s14, [r1]
 802367a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802367e:	3b01      	subs	r3, #1
 8023680:	edc2 7a00 	vstr	s15, [r2]
 8023684:	d011      	beq.n	80236aa <arm_sub_f32+0xae>
 8023686:	edd0 7a01 	vldr	s15, [r0, #4]
 802368a:	ed91 7a01 	vldr	s14, [r1, #4]
 802368e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023692:	2b01      	cmp	r3, #1
 8023694:	edc2 7a01 	vstr	s15, [r2, #4]
 8023698:	d007      	beq.n	80236aa <arm_sub_f32+0xae>
 802369a:	edd0 7a02 	vldr	s15, [r0, #8]
 802369e:	ed91 7a02 	vldr	s14, [r1, #8]
 80236a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80236a6:	edc2 7a02 	vstr	s15, [r2, #8]
 80236aa:	bcf0      	pop	{r4, r5, r6, r7}
 80236ac:	4770      	bx	lr
 80236ae:	bf00      	nop

080236b0 <arm_mult_f32>:
 80236b0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80236b4:	b4f0      	push	{r4, r5, r6, r7}
 80236b6:	d033      	beq.n	8023720 <arm_mult_f32+0x70>
 80236b8:	f100 0610 	add.w	r6, r0, #16
 80236bc:	f101 0510 	add.w	r5, r1, #16
 80236c0:	f102 0410 	add.w	r4, r2, #16
 80236c4:	4667      	mov	r7, ip
 80236c6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80236ca:	ed56 7a04 	vldr	s15, [r6, #-16]
 80236ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80236d2:	3f01      	subs	r7, #1
 80236d4:	ed44 7a04 	vstr	s15, [r4, #-16]
 80236d8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80236dc:	ed56 7a03 	vldr	s15, [r6, #-12]
 80236e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80236e4:	f106 0610 	add.w	r6, r6, #16
 80236e8:	ed44 7a03 	vstr	s15, [r4, #-12]
 80236ec:	ed15 7a02 	vldr	s14, [r5, #-8]
 80236f0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80236f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80236f8:	f105 0510 	add.w	r5, r5, #16
 80236fc:	ed44 7a02 	vstr	s15, [r4, #-8]
 8023700:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8023704:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8023708:	ee67 7a87 	vmul.f32	s15, s15, s14
 802370c:	f104 0410 	add.w	r4, r4, #16
 8023710:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8023714:	d1d7      	bne.n	80236c6 <arm_mult_f32+0x16>
 8023716:	ea4f 140c 	mov.w	r4, ip, lsl #4
 802371a:	4420      	add	r0, r4
 802371c:	4421      	add	r1, r4
 802371e:	4422      	add	r2, r4
 8023720:	f013 0303 	ands.w	r3, r3, #3
 8023724:	d01b      	beq.n	802375e <arm_mult_f32+0xae>
 8023726:	edd1 7a00 	vldr	s15, [r1]
 802372a:	ed90 7a00 	vldr	s14, [r0]
 802372e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023732:	3b01      	subs	r3, #1
 8023734:	edc2 7a00 	vstr	s15, [r2]
 8023738:	d011      	beq.n	802375e <arm_mult_f32+0xae>
 802373a:	edd0 7a01 	vldr	s15, [r0, #4]
 802373e:	ed91 7a01 	vldr	s14, [r1, #4]
 8023742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023746:	2b01      	cmp	r3, #1
 8023748:	edc2 7a01 	vstr	s15, [r2, #4]
 802374c:	d007      	beq.n	802375e <arm_mult_f32+0xae>
 802374e:	edd0 7a02 	vldr	s15, [r0, #8]
 8023752:	ed91 7a02 	vldr	s14, [r1, #8]
 8023756:	ee67 7a87 	vmul.f32	s15, s15, s14
 802375a:	edc2 7a02 	vstr	s15, [r2, #8]
 802375e:	bcf0      	pop	{r4, r5, r6, r7}
 8023760:	4770      	bx	lr
 8023762:	bf00      	nop

08023764 <arm_add_f32>:
 8023764:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8023768:	b4f0      	push	{r4, r5, r6, r7}
 802376a:	d033      	beq.n	80237d4 <arm_add_f32+0x70>
 802376c:	f100 0610 	add.w	r6, r0, #16
 8023770:	f101 0510 	add.w	r5, r1, #16
 8023774:	f102 0410 	add.w	r4, r2, #16
 8023778:	4667      	mov	r7, ip
 802377a:	ed15 7a04 	vldr	s14, [r5, #-16]
 802377e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8023782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023786:	3f01      	subs	r7, #1
 8023788:	ed44 7a04 	vstr	s15, [r4, #-16]
 802378c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8023790:	ed56 7a03 	vldr	s15, [r6, #-12]
 8023794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023798:	f106 0610 	add.w	r6, r6, #16
 802379c:	ed44 7a03 	vstr	s15, [r4, #-12]
 80237a0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80237a4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80237a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80237ac:	f105 0510 	add.w	r5, r5, #16
 80237b0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80237b4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80237b8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80237bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80237c0:	f104 0410 	add.w	r4, r4, #16
 80237c4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80237c8:	d1d7      	bne.n	802377a <arm_add_f32+0x16>
 80237ca:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80237ce:	4420      	add	r0, r4
 80237d0:	4421      	add	r1, r4
 80237d2:	4422      	add	r2, r4
 80237d4:	f013 0303 	ands.w	r3, r3, #3
 80237d8:	d01b      	beq.n	8023812 <arm_add_f32+0xae>
 80237da:	edd1 7a00 	vldr	s15, [r1]
 80237de:	ed90 7a00 	vldr	s14, [r0]
 80237e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80237e6:	3b01      	subs	r3, #1
 80237e8:	edc2 7a00 	vstr	s15, [r2]
 80237ec:	d011      	beq.n	8023812 <arm_add_f32+0xae>
 80237ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80237f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80237f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80237fa:	2b01      	cmp	r3, #1
 80237fc:	edc2 7a01 	vstr	s15, [r2, #4]
 8023800:	d007      	beq.n	8023812 <arm_add_f32+0xae>
 8023802:	edd0 7a02 	vldr	s15, [r0, #8]
 8023806:	ed91 7a02 	vldr	s14, [r1, #8]
 802380a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802380e:	edc2 7a02 	vstr	s15, [r2, #8]
 8023812:	bcf0      	pop	{r4, r5, r6, r7}
 8023814:	4770      	bx	lr
 8023816:	bf00      	nop

08023818 <__errno>:
 8023818:	4b01      	ldr	r3, [pc, #4]	; (8023820 <__errno+0x8>)
 802381a:	6818      	ldr	r0, [r3, #0]
 802381c:	4770      	bx	lr
 802381e:	bf00      	nop
 8023820:	2000000c 	.word	0x2000000c

08023824 <__libc_init_array>:
 8023824:	b570      	push	{r4, r5, r6, lr}
 8023826:	4d0d      	ldr	r5, [pc, #52]	; (802385c <__libc_init_array+0x38>)
 8023828:	4c0d      	ldr	r4, [pc, #52]	; (8023860 <__libc_init_array+0x3c>)
 802382a:	1b64      	subs	r4, r4, r5
 802382c:	10a4      	asrs	r4, r4, #2
 802382e:	2600      	movs	r6, #0
 8023830:	42a6      	cmp	r6, r4
 8023832:	d109      	bne.n	8023848 <__libc_init_array+0x24>
 8023834:	4d0b      	ldr	r5, [pc, #44]	; (8023864 <__libc_init_array+0x40>)
 8023836:	4c0c      	ldr	r4, [pc, #48]	; (8023868 <__libc_init_array+0x44>)
 8023838:	f002 fd5a 	bl	80262f0 <_init>
 802383c:	1b64      	subs	r4, r4, r5
 802383e:	10a4      	asrs	r4, r4, #2
 8023840:	2600      	movs	r6, #0
 8023842:	42a6      	cmp	r6, r4
 8023844:	d105      	bne.n	8023852 <__libc_init_array+0x2e>
 8023846:	bd70      	pop	{r4, r5, r6, pc}
 8023848:	f855 3b04 	ldr.w	r3, [r5], #4
 802384c:	4798      	blx	r3
 802384e:	3601      	adds	r6, #1
 8023850:	e7ee      	b.n	8023830 <__libc_init_array+0xc>
 8023852:	f855 3b04 	ldr.w	r3, [r5], #4
 8023856:	4798      	blx	r3
 8023858:	3601      	adds	r6, #1
 802385a:	e7f2      	b.n	8023842 <__libc_init_array+0x1e>
 802385c:	080268b4 	.word	0x080268b4
 8023860:	080268b4 	.word	0x080268b4
 8023864:	080268b4 	.word	0x080268b4
 8023868:	080268b8 	.word	0x080268b8

0802386c <memcpy>:
 802386c:	440a      	add	r2, r1
 802386e:	4291      	cmp	r1, r2
 8023870:	f100 33ff 	add.w	r3, r0, #4294967295
 8023874:	d100      	bne.n	8023878 <memcpy+0xc>
 8023876:	4770      	bx	lr
 8023878:	b510      	push	{r4, lr}
 802387a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802387e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023882:	4291      	cmp	r1, r2
 8023884:	d1f9      	bne.n	802387a <memcpy+0xe>
 8023886:	bd10      	pop	{r4, pc}

08023888 <memset>:
 8023888:	4402      	add	r2, r0
 802388a:	4603      	mov	r3, r0
 802388c:	4293      	cmp	r3, r2
 802388e:	d100      	bne.n	8023892 <memset+0xa>
 8023890:	4770      	bx	lr
 8023892:	f803 1b01 	strb.w	r1, [r3], #1
 8023896:	e7f9      	b.n	802388c <memset+0x4>

08023898 <__cvt>:
 8023898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802389c:	ec55 4b10 	vmov	r4, r5, d0
 80238a0:	2d00      	cmp	r5, #0
 80238a2:	460e      	mov	r6, r1
 80238a4:	4619      	mov	r1, r3
 80238a6:	462b      	mov	r3, r5
 80238a8:	bfbb      	ittet	lt
 80238aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80238ae:	461d      	movlt	r5, r3
 80238b0:	2300      	movge	r3, #0
 80238b2:	232d      	movlt	r3, #45	; 0x2d
 80238b4:	700b      	strb	r3, [r1, #0]
 80238b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80238b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80238bc:	4691      	mov	r9, r2
 80238be:	f023 0820 	bic.w	r8, r3, #32
 80238c2:	bfbc      	itt	lt
 80238c4:	4622      	movlt	r2, r4
 80238c6:	4614      	movlt	r4, r2
 80238c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80238cc:	d005      	beq.n	80238da <__cvt+0x42>
 80238ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80238d2:	d100      	bne.n	80238d6 <__cvt+0x3e>
 80238d4:	3601      	adds	r6, #1
 80238d6:	2102      	movs	r1, #2
 80238d8:	e000      	b.n	80238dc <__cvt+0x44>
 80238da:	2103      	movs	r1, #3
 80238dc:	ab03      	add	r3, sp, #12
 80238de:	9301      	str	r3, [sp, #4]
 80238e0:	ab02      	add	r3, sp, #8
 80238e2:	9300      	str	r3, [sp, #0]
 80238e4:	ec45 4b10 	vmov	d0, r4, r5
 80238e8:	4653      	mov	r3, sl
 80238ea:	4632      	mov	r2, r6
 80238ec:	f000 fccc 	bl	8024288 <_dtoa_r>
 80238f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80238f4:	4607      	mov	r7, r0
 80238f6:	d102      	bne.n	80238fe <__cvt+0x66>
 80238f8:	f019 0f01 	tst.w	r9, #1
 80238fc:	d022      	beq.n	8023944 <__cvt+0xac>
 80238fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023902:	eb07 0906 	add.w	r9, r7, r6
 8023906:	d110      	bne.n	802392a <__cvt+0x92>
 8023908:	783b      	ldrb	r3, [r7, #0]
 802390a:	2b30      	cmp	r3, #48	; 0x30
 802390c:	d10a      	bne.n	8023924 <__cvt+0x8c>
 802390e:	2200      	movs	r2, #0
 8023910:	2300      	movs	r3, #0
 8023912:	4620      	mov	r0, r4
 8023914:	4629      	mov	r1, r5
 8023916:	f7fd f84f 	bl	80209b8 <__aeabi_dcmpeq>
 802391a:	b918      	cbnz	r0, 8023924 <__cvt+0x8c>
 802391c:	f1c6 0601 	rsb	r6, r6, #1
 8023920:	f8ca 6000 	str.w	r6, [sl]
 8023924:	f8da 3000 	ldr.w	r3, [sl]
 8023928:	4499      	add	r9, r3
 802392a:	2200      	movs	r2, #0
 802392c:	2300      	movs	r3, #0
 802392e:	4620      	mov	r0, r4
 8023930:	4629      	mov	r1, r5
 8023932:	f7fd f841 	bl	80209b8 <__aeabi_dcmpeq>
 8023936:	b108      	cbz	r0, 802393c <__cvt+0xa4>
 8023938:	f8cd 900c 	str.w	r9, [sp, #12]
 802393c:	2230      	movs	r2, #48	; 0x30
 802393e:	9b03      	ldr	r3, [sp, #12]
 8023940:	454b      	cmp	r3, r9
 8023942:	d307      	bcc.n	8023954 <__cvt+0xbc>
 8023944:	9b03      	ldr	r3, [sp, #12]
 8023946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023948:	1bdb      	subs	r3, r3, r7
 802394a:	4638      	mov	r0, r7
 802394c:	6013      	str	r3, [r2, #0]
 802394e:	b004      	add	sp, #16
 8023950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023954:	1c59      	adds	r1, r3, #1
 8023956:	9103      	str	r1, [sp, #12]
 8023958:	701a      	strb	r2, [r3, #0]
 802395a:	e7f0      	b.n	802393e <__cvt+0xa6>

0802395c <__exponent>:
 802395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802395e:	4603      	mov	r3, r0
 8023960:	2900      	cmp	r1, #0
 8023962:	bfb8      	it	lt
 8023964:	4249      	neglt	r1, r1
 8023966:	f803 2b02 	strb.w	r2, [r3], #2
 802396a:	bfb4      	ite	lt
 802396c:	222d      	movlt	r2, #45	; 0x2d
 802396e:	222b      	movge	r2, #43	; 0x2b
 8023970:	2909      	cmp	r1, #9
 8023972:	7042      	strb	r2, [r0, #1]
 8023974:	dd2a      	ble.n	80239cc <__exponent+0x70>
 8023976:	f10d 0407 	add.w	r4, sp, #7
 802397a:	46a4      	mov	ip, r4
 802397c:	270a      	movs	r7, #10
 802397e:	46a6      	mov	lr, r4
 8023980:	460a      	mov	r2, r1
 8023982:	fb91 f6f7 	sdiv	r6, r1, r7
 8023986:	fb07 1516 	mls	r5, r7, r6, r1
 802398a:	3530      	adds	r5, #48	; 0x30
 802398c:	2a63      	cmp	r2, #99	; 0x63
 802398e:	f104 34ff 	add.w	r4, r4, #4294967295
 8023992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023996:	4631      	mov	r1, r6
 8023998:	dcf1      	bgt.n	802397e <__exponent+0x22>
 802399a:	3130      	adds	r1, #48	; 0x30
 802399c:	f1ae 0502 	sub.w	r5, lr, #2
 80239a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80239a4:	1c44      	adds	r4, r0, #1
 80239a6:	4629      	mov	r1, r5
 80239a8:	4561      	cmp	r1, ip
 80239aa:	d30a      	bcc.n	80239c2 <__exponent+0x66>
 80239ac:	f10d 0209 	add.w	r2, sp, #9
 80239b0:	eba2 020e 	sub.w	r2, r2, lr
 80239b4:	4565      	cmp	r5, ip
 80239b6:	bf88      	it	hi
 80239b8:	2200      	movhi	r2, #0
 80239ba:	4413      	add	r3, r2
 80239bc:	1a18      	subs	r0, r3, r0
 80239be:	b003      	add	sp, #12
 80239c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80239c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80239c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80239ca:	e7ed      	b.n	80239a8 <__exponent+0x4c>
 80239cc:	2330      	movs	r3, #48	; 0x30
 80239ce:	3130      	adds	r1, #48	; 0x30
 80239d0:	7083      	strb	r3, [r0, #2]
 80239d2:	70c1      	strb	r1, [r0, #3]
 80239d4:	1d03      	adds	r3, r0, #4
 80239d6:	e7f1      	b.n	80239bc <__exponent+0x60>

080239d8 <_printf_float>:
 80239d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239dc:	ed2d 8b02 	vpush	{d8}
 80239e0:	b08d      	sub	sp, #52	; 0x34
 80239e2:	460c      	mov	r4, r1
 80239e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80239e8:	4616      	mov	r6, r2
 80239ea:	461f      	mov	r7, r3
 80239ec:	4605      	mov	r5, r0
 80239ee:	f001 fa39 	bl	8024e64 <_localeconv_r>
 80239f2:	f8d0 a000 	ldr.w	sl, [r0]
 80239f6:	4650      	mov	r0, sl
 80239f8:	f7fc fb60 	bl	80200bc <strlen>
 80239fc:	2300      	movs	r3, #0
 80239fe:	930a      	str	r3, [sp, #40]	; 0x28
 8023a00:	6823      	ldr	r3, [r4, #0]
 8023a02:	9305      	str	r3, [sp, #20]
 8023a04:	f8d8 3000 	ldr.w	r3, [r8]
 8023a08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8023a0c:	3307      	adds	r3, #7
 8023a0e:	f023 0307 	bic.w	r3, r3, #7
 8023a12:	f103 0208 	add.w	r2, r3, #8
 8023a16:	f8c8 2000 	str.w	r2, [r8]
 8023a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8023a22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8023a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023a2a:	9307      	str	r3, [sp, #28]
 8023a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8023a30:	ee08 0a10 	vmov	s16, r0
 8023a34:	4b9f      	ldr	r3, [pc, #636]	; (8023cb4 <_printf_float+0x2dc>)
 8023a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8023a3e:	f7fc ffed 	bl	8020a1c <__aeabi_dcmpun>
 8023a42:	bb88      	cbnz	r0, 8023aa8 <_printf_float+0xd0>
 8023a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023a48:	4b9a      	ldr	r3, [pc, #616]	; (8023cb4 <_printf_float+0x2dc>)
 8023a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8023a4e:	f7fc ffc7 	bl	80209e0 <__aeabi_dcmple>
 8023a52:	bb48      	cbnz	r0, 8023aa8 <_printf_float+0xd0>
 8023a54:	2200      	movs	r2, #0
 8023a56:	2300      	movs	r3, #0
 8023a58:	4640      	mov	r0, r8
 8023a5a:	4649      	mov	r1, r9
 8023a5c:	f7fc ffb6 	bl	80209cc <__aeabi_dcmplt>
 8023a60:	b110      	cbz	r0, 8023a68 <_printf_float+0x90>
 8023a62:	232d      	movs	r3, #45	; 0x2d
 8023a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023a68:	4b93      	ldr	r3, [pc, #588]	; (8023cb8 <_printf_float+0x2e0>)
 8023a6a:	4894      	ldr	r0, [pc, #592]	; (8023cbc <_printf_float+0x2e4>)
 8023a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8023a70:	bf94      	ite	ls
 8023a72:	4698      	movls	r8, r3
 8023a74:	4680      	movhi	r8, r0
 8023a76:	2303      	movs	r3, #3
 8023a78:	6123      	str	r3, [r4, #16]
 8023a7a:	9b05      	ldr	r3, [sp, #20]
 8023a7c:	f023 0204 	bic.w	r2, r3, #4
 8023a80:	6022      	str	r2, [r4, #0]
 8023a82:	f04f 0900 	mov.w	r9, #0
 8023a86:	9700      	str	r7, [sp, #0]
 8023a88:	4633      	mov	r3, r6
 8023a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8023a8c:	4621      	mov	r1, r4
 8023a8e:	4628      	mov	r0, r5
 8023a90:	f000 f9d8 	bl	8023e44 <_printf_common>
 8023a94:	3001      	adds	r0, #1
 8023a96:	f040 8090 	bne.w	8023bba <_printf_float+0x1e2>
 8023a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8023a9e:	b00d      	add	sp, #52	; 0x34
 8023aa0:	ecbd 8b02 	vpop	{d8}
 8023aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023aa8:	4642      	mov	r2, r8
 8023aaa:	464b      	mov	r3, r9
 8023aac:	4640      	mov	r0, r8
 8023aae:	4649      	mov	r1, r9
 8023ab0:	f7fc ffb4 	bl	8020a1c <__aeabi_dcmpun>
 8023ab4:	b140      	cbz	r0, 8023ac8 <_printf_float+0xf0>
 8023ab6:	464b      	mov	r3, r9
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	bfbc      	itt	lt
 8023abc:	232d      	movlt	r3, #45	; 0x2d
 8023abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023ac2:	487f      	ldr	r0, [pc, #508]	; (8023cc0 <_printf_float+0x2e8>)
 8023ac4:	4b7f      	ldr	r3, [pc, #508]	; (8023cc4 <_printf_float+0x2ec>)
 8023ac6:	e7d1      	b.n	8023a6c <_printf_float+0x94>
 8023ac8:	6863      	ldr	r3, [r4, #4]
 8023aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023ace:	9206      	str	r2, [sp, #24]
 8023ad0:	1c5a      	adds	r2, r3, #1
 8023ad2:	d13f      	bne.n	8023b54 <_printf_float+0x17c>
 8023ad4:	2306      	movs	r3, #6
 8023ad6:	6063      	str	r3, [r4, #4]
 8023ad8:	9b05      	ldr	r3, [sp, #20]
 8023ada:	6861      	ldr	r1, [r4, #4]
 8023adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023ae0:	2300      	movs	r3, #0
 8023ae2:	9303      	str	r3, [sp, #12]
 8023ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8023ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8023aea:	ab09      	add	r3, sp, #36	; 0x24
 8023aec:	ec49 8b10 	vmov	d0, r8, r9
 8023af0:	9300      	str	r3, [sp, #0]
 8023af2:	6022      	str	r2, [r4, #0]
 8023af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8023af8:	4628      	mov	r0, r5
 8023afa:	f7ff fecd 	bl	8023898 <__cvt>
 8023afe:	9b06      	ldr	r3, [sp, #24]
 8023b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023b02:	2b47      	cmp	r3, #71	; 0x47
 8023b04:	4680      	mov	r8, r0
 8023b06:	d108      	bne.n	8023b1a <_printf_float+0x142>
 8023b08:	1cc8      	adds	r0, r1, #3
 8023b0a:	db02      	blt.n	8023b12 <_printf_float+0x13a>
 8023b0c:	6863      	ldr	r3, [r4, #4]
 8023b0e:	4299      	cmp	r1, r3
 8023b10:	dd41      	ble.n	8023b96 <_printf_float+0x1be>
 8023b12:	f1ab 0b02 	sub.w	fp, fp, #2
 8023b16:	fa5f fb8b 	uxtb.w	fp, fp
 8023b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023b1e:	d820      	bhi.n	8023b62 <_printf_float+0x18a>
 8023b20:	3901      	subs	r1, #1
 8023b22:	465a      	mov	r2, fp
 8023b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023b28:	9109      	str	r1, [sp, #36]	; 0x24
 8023b2a:	f7ff ff17 	bl	802395c <__exponent>
 8023b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b30:	1813      	adds	r3, r2, r0
 8023b32:	2a01      	cmp	r2, #1
 8023b34:	4681      	mov	r9, r0
 8023b36:	6123      	str	r3, [r4, #16]
 8023b38:	dc02      	bgt.n	8023b40 <_printf_float+0x168>
 8023b3a:	6822      	ldr	r2, [r4, #0]
 8023b3c:	07d2      	lsls	r2, r2, #31
 8023b3e:	d501      	bpl.n	8023b44 <_printf_float+0x16c>
 8023b40:	3301      	adds	r3, #1
 8023b42:	6123      	str	r3, [r4, #16]
 8023b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8023b48:	2b00      	cmp	r3, #0
 8023b4a:	d09c      	beq.n	8023a86 <_printf_float+0xae>
 8023b4c:	232d      	movs	r3, #45	; 0x2d
 8023b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023b52:	e798      	b.n	8023a86 <_printf_float+0xae>
 8023b54:	9a06      	ldr	r2, [sp, #24]
 8023b56:	2a47      	cmp	r2, #71	; 0x47
 8023b58:	d1be      	bne.n	8023ad8 <_printf_float+0x100>
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d1bc      	bne.n	8023ad8 <_printf_float+0x100>
 8023b5e:	2301      	movs	r3, #1
 8023b60:	e7b9      	b.n	8023ad6 <_printf_float+0xfe>
 8023b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8023b66:	d118      	bne.n	8023b9a <_printf_float+0x1c2>
 8023b68:	2900      	cmp	r1, #0
 8023b6a:	6863      	ldr	r3, [r4, #4]
 8023b6c:	dd0b      	ble.n	8023b86 <_printf_float+0x1ae>
 8023b6e:	6121      	str	r1, [r4, #16]
 8023b70:	b913      	cbnz	r3, 8023b78 <_printf_float+0x1a0>
 8023b72:	6822      	ldr	r2, [r4, #0]
 8023b74:	07d0      	lsls	r0, r2, #31
 8023b76:	d502      	bpl.n	8023b7e <_printf_float+0x1a6>
 8023b78:	3301      	adds	r3, #1
 8023b7a:	440b      	add	r3, r1
 8023b7c:	6123      	str	r3, [r4, #16]
 8023b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8023b80:	f04f 0900 	mov.w	r9, #0
 8023b84:	e7de      	b.n	8023b44 <_printf_float+0x16c>
 8023b86:	b913      	cbnz	r3, 8023b8e <_printf_float+0x1b6>
 8023b88:	6822      	ldr	r2, [r4, #0]
 8023b8a:	07d2      	lsls	r2, r2, #31
 8023b8c:	d501      	bpl.n	8023b92 <_printf_float+0x1ba>
 8023b8e:	3302      	adds	r3, #2
 8023b90:	e7f4      	b.n	8023b7c <_printf_float+0x1a4>
 8023b92:	2301      	movs	r3, #1
 8023b94:	e7f2      	b.n	8023b7c <_printf_float+0x1a4>
 8023b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b9c:	4299      	cmp	r1, r3
 8023b9e:	db05      	blt.n	8023bac <_printf_float+0x1d4>
 8023ba0:	6823      	ldr	r3, [r4, #0]
 8023ba2:	6121      	str	r1, [r4, #16]
 8023ba4:	07d8      	lsls	r0, r3, #31
 8023ba6:	d5ea      	bpl.n	8023b7e <_printf_float+0x1a6>
 8023ba8:	1c4b      	adds	r3, r1, #1
 8023baa:	e7e7      	b.n	8023b7c <_printf_float+0x1a4>
 8023bac:	2900      	cmp	r1, #0
 8023bae:	bfd4      	ite	le
 8023bb0:	f1c1 0202 	rsble	r2, r1, #2
 8023bb4:	2201      	movgt	r2, #1
 8023bb6:	4413      	add	r3, r2
 8023bb8:	e7e0      	b.n	8023b7c <_printf_float+0x1a4>
 8023bba:	6823      	ldr	r3, [r4, #0]
 8023bbc:	055a      	lsls	r2, r3, #21
 8023bbe:	d407      	bmi.n	8023bd0 <_printf_float+0x1f8>
 8023bc0:	6923      	ldr	r3, [r4, #16]
 8023bc2:	4642      	mov	r2, r8
 8023bc4:	4631      	mov	r1, r6
 8023bc6:	4628      	mov	r0, r5
 8023bc8:	47b8      	blx	r7
 8023bca:	3001      	adds	r0, #1
 8023bcc:	d12c      	bne.n	8023c28 <_printf_float+0x250>
 8023bce:	e764      	b.n	8023a9a <_printf_float+0xc2>
 8023bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023bd4:	f240 80e0 	bls.w	8023d98 <_printf_float+0x3c0>
 8023bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023bdc:	2200      	movs	r2, #0
 8023bde:	2300      	movs	r3, #0
 8023be0:	f7fc feea 	bl	80209b8 <__aeabi_dcmpeq>
 8023be4:	2800      	cmp	r0, #0
 8023be6:	d034      	beq.n	8023c52 <_printf_float+0x27a>
 8023be8:	4a37      	ldr	r2, [pc, #220]	; (8023cc8 <_printf_float+0x2f0>)
 8023bea:	2301      	movs	r3, #1
 8023bec:	4631      	mov	r1, r6
 8023bee:	4628      	mov	r0, r5
 8023bf0:	47b8      	blx	r7
 8023bf2:	3001      	adds	r0, #1
 8023bf4:	f43f af51 	beq.w	8023a9a <_printf_float+0xc2>
 8023bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023bfc:	429a      	cmp	r2, r3
 8023bfe:	db02      	blt.n	8023c06 <_printf_float+0x22e>
 8023c00:	6823      	ldr	r3, [r4, #0]
 8023c02:	07d8      	lsls	r0, r3, #31
 8023c04:	d510      	bpl.n	8023c28 <_printf_float+0x250>
 8023c06:	ee18 3a10 	vmov	r3, s16
 8023c0a:	4652      	mov	r2, sl
 8023c0c:	4631      	mov	r1, r6
 8023c0e:	4628      	mov	r0, r5
 8023c10:	47b8      	blx	r7
 8023c12:	3001      	adds	r0, #1
 8023c14:	f43f af41 	beq.w	8023a9a <_printf_float+0xc2>
 8023c18:	f04f 0800 	mov.w	r8, #0
 8023c1c:	f104 091a 	add.w	r9, r4, #26
 8023c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c22:	3b01      	subs	r3, #1
 8023c24:	4543      	cmp	r3, r8
 8023c26:	dc09      	bgt.n	8023c3c <_printf_float+0x264>
 8023c28:	6823      	ldr	r3, [r4, #0]
 8023c2a:	079b      	lsls	r3, r3, #30
 8023c2c:	f100 8105 	bmi.w	8023e3a <_printf_float+0x462>
 8023c30:	68e0      	ldr	r0, [r4, #12]
 8023c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c34:	4298      	cmp	r0, r3
 8023c36:	bfb8      	it	lt
 8023c38:	4618      	movlt	r0, r3
 8023c3a:	e730      	b.n	8023a9e <_printf_float+0xc6>
 8023c3c:	2301      	movs	r3, #1
 8023c3e:	464a      	mov	r2, r9
 8023c40:	4631      	mov	r1, r6
 8023c42:	4628      	mov	r0, r5
 8023c44:	47b8      	blx	r7
 8023c46:	3001      	adds	r0, #1
 8023c48:	f43f af27 	beq.w	8023a9a <_printf_float+0xc2>
 8023c4c:	f108 0801 	add.w	r8, r8, #1
 8023c50:	e7e6      	b.n	8023c20 <_printf_float+0x248>
 8023c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	dc39      	bgt.n	8023ccc <_printf_float+0x2f4>
 8023c58:	4a1b      	ldr	r2, [pc, #108]	; (8023cc8 <_printf_float+0x2f0>)
 8023c5a:	2301      	movs	r3, #1
 8023c5c:	4631      	mov	r1, r6
 8023c5e:	4628      	mov	r0, r5
 8023c60:	47b8      	blx	r7
 8023c62:	3001      	adds	r0, #1
 8023c64:	f43f af19 	beq.w	8023a9a <_printf_float+0xc2>
 8023c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023c6c:	4313      	orrs	r3, r2
 8023c6e:	d102      	bne.n	8023c76 <_printf_float+0x29e>
 8023c70:	6823      	ldr	r3, [r4, #0]
 8023c72:	07d9      	lsls	r1, r3, #31
 8023c74:	d5d8      	bpl.n	8023c28 <_printf_float+0x250>
 8023c76:	ee18 3a10 	vmov	r3, s16
 8023c7a:	4652      	mov	r2, sl
 8023c7c:	4631      	mov	r1, r6
 8023c7e:	4628      	mov	r0, r5
 8023c80:	47b8      	blx	r7
 8023c82:	3001      	adds	r0, #1
 8023c84:	f43f af09 	beq.w	8023a9a <_printf_float+0xc2>
 8023c88:	f04f 0900 	mov.w	r9, #0
 8023c8c:	f104 0a1a 	add.w	sl, r4, #26
 8023c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c92:	425b      	negs	r3, r3
 8023c94:	454b      	cmp	r3, r9
 8023c96:	dc01      	bgt.n	8023c9c <_printf_float+0x2c4>
 8023c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c9a:	e792      	b.n	8023bc2 <_printf_float+0x1ea>
 8023c9c:	2301      	movs	r3, #1
 8023c9e:	4652      	mov	r2, sl
 8023ca0:	4631      	mov	r1, r6
 8023ca2:	4628      	mov	r0, r5
 8023ca4:	47b8      	blx	r7
 8023ca6:	3001      	adds	r0, #1
 8023ca8:	f43f aef7 	beq.w	8023a9a <_printf_float+0xc2>
 8023cac:	f109 0901 	add.w	r9, r9, #1
 8023cb0:	e7ee      	b.n	8023c90 <_printf_float+0x2b8>
 8023cb2:	bf00      	nop
 8023cb4:	7fefffff 	.word	0x7fefffff
 8023cb8:	080264e0 	.word	0x080264e0
 8023cbc:	080264e4 	.word	0x080264e4
 8023cc0:	080264ec 	.word	0x080264ec
 8023cc4:	080264e8 	.word	0x080264e8
 8023cc8:	080264f0 	.word	0x080264f0
 8023ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023cd0:	429a      	cmp	r2, r3
 8023cd2:	bfa8      	it	ge
 8023cd4:	461a      	movge	r2, r3
 8023cd6:	2a00      	cmp	r2, #0
 8023cd8:	4691      	mov	r9, r2
 8023cda:	dc37      	bgt.n	8023d4c <_printf_float+0x374>
 8023cdc:	f04f 0b00 	mov.w	fp, #0
 8023ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023ce4:	f104 021a 	add.w	r2, r4, #26
 8023ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023cea:	9305      	str	r3, [sp, #20]
 8023cec:	eba3 0309 	sub.w	r3, r3, r9
 8023cf0:	455b      	cmp	r3, fp
 8023cf2:	dc33      	bgt.n	8023d5c <_printf_float+0x384>
 8023cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023cf8:	429a      	cmp	r2, r3
 8023cfa:	db3b      	blt.n	8023d74 <_printf_float+0x39c>
 8023cfc:	6823      	ldr	r3, [r4, #0]
 8023cfe:	07da      	lsls	r2, r3, #31
 8023d00:	d438      	bmi.n	8023d74 <_printf_float+0x39c>
 8023d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d04:	9a05      	ldr	r2, [sp, #20]
 8023d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023d08:	1a9a      	subs	r2, r3, r2
 8023d0a:	eba3 0901 	sub.w	r9, r3, r1
 8023d0e:	4591      	cmp	r9, r2
 8023d10:	bfa8      	it	ge
 8023d12:	4691      	movge	r9, r2
 8023d14:	f1b9 0f00 	cmp.w	r9, #0
 8023d18:	dc35      	bgt.n	8023d86 <_printf_float+0x3ae>
 8023d1a:	f04f 0800 	mov.w	r8, #0
 8023d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023d22:	f104 0a1a 	add.w	sl, r4, #26
 8023d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023d2a:	1a9b      	subs	r3, r3, r2
 8023d2c:	eba3 0309 	sub.w	r3, r3, r9
 8023d30:	4543      	cmp	r3, r8
 8023d32:	f77f af79 	ble.w	8023c28 <_printf_float+0x250>
 8023d36:	2301      	movs	r3, #1
 8023d38:	4652      	mov	r2, sl
 8023d3a:	4631      	mov	r1, r6
 8023d3c:	4628      	mov	r0, r5
 8023d3e:	47b8      	blx	r7
 8023d40:	3001      	adds	r0, #1
 8023d42:	f43f aeaa 	beq.w	8023a9a <_printf_float+0xc2>
 8023d46:	f108 0801 	add.w	r8, r8, #1
 8023d4a:	e7ec      	b.n	8023d26 <_printf_float+0x34e>
 8023d4c:	4613      	mov	r3, r2
 8023d4e:	4631      	mov	r1, r6
 8023d50:	4642      	mov	r2, r8
 8023d52:	4628      	mov	r0, r5
 8023d54:	47b8      	blx	r7
 8023d56:	3001      	adds	r0, #1
 8023d58:	d1c0      	bne.n	8023cdc <_printf_float+0x304>
 8023d5a:	e69e      	b.n	8023a9a <_printf_float+0xc2>
 8023d5c:	2301      	movs	r3, #1
 8023d5e:	4631      	mov	r1, r6
 8023d60:	4628      	mov	r0, r5
 8023d62:	9205      	str	r2, [sp, #20]
 8023d64:	47b8      	blx	r7
 8023d66:	3001      	adds	r0, #1
 8023d68:	f43f ae97 	beq.w	8023a9a <_printf_float+0xc2>
 8023d6c:	9a05      	ldr	r2, [sp, #20]
 8023d6e:	f10b 0b01 	add.w	fp, fp, #1
 8023d72:	e7b9      	b.n	8023ce8 <_printf_float+0x310>
 8023d74:	ee18 3a10 	vmov	r3, s16
 8023d78:	4652      	mov	r2, sl
 8023d7a:	4631      	mov	r1, r6
 8023d7c:	4628      	mov	r0, r5
 8023d7e:	47b8      	blx	r7
 8023d80:	3001      	adds	r0, #1
 8023d82:	d1be      	bne.n	8023d02 <_printf_float+0x32a>
 8023d84:	e689      	b.n	8023a9a <_printf_float+0xc2>
 8023d86:	9a05      	ldr	r2, [sp, #20]
 8023d88:	464b      	mov	r3, r9
 8023d8a:	4442      	add	r2, r8
 8023d8c:	4631      	mov	r1, r6
 8023d8e:	4628      	mov	r0, r5
 8023d90:	47b8      	blx	r7
 8023d92:	3001      	adds	r0, #1
 8023d94:	d1c1      	bne.n	8023d1a <_printf_float+0x342>
 8023d96:	e680      	b.n	8023a9a <_printf_float+0xc2>
 8023d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d9a:	2a01      	cmp	r2, #1
 8023d9c:	dc01      	bgt.n	8023da2 <_printf_float+0x3ca>
 8023d9e:	07db      	lsls	r3, r3, #31
 8023da0:	d538      	bpl.n	8023e14 <_printf_float+0x43c>
 8023da2:	2301      	movs	r3, #1
 8023da4:	4642      	mov	r2, r8
 8023da6:	4631      	mov	r1, r6
 8023da8:	4628      	mov	r0, r5
 8023daa:	47b8      	blx	r7
 8023dac:	3001      	adds	r0, #1
 8023dae:	f43f ae74 	beq.w	8023a9a <_printf_float+0xc2>
 8023db2:	ee18 3a10 	vmov	r3, s16
 8023db6:	4652      	mov	r2, sl
 8023db8:	4631      	mov	r1, r6
 8023dba:	4628      	mov	r0, r5
 8023dbc:	47b8      	blx	r7
 8023dbe:	3001      	adds	r0, #1
 8023dc0:	f43f ae6b 	beq.w	8023a9a <_printf_float+0xc2>
 8023dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023dc8:	2200      	movs	r2, #0
 8023dca:	2300      	movs	r3, #0
 8023dcc:	f7fc fdf4 	bl	80209b8 <__aeabi_dcmpeq>
 8023dd0:	b9d8      	cbnz	r0, 8023e0a <_printf_float+0x432>
 8023dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dd4:	f108 0201 	add.w	r2, r8, #1
 8023dd8:	3b01      	subs	r3, #1
 8023dda:	4631      	mov	r1, r6
 8023ddc:	4628      	mov	r0, r5
 8023dde:	47b8      	blx	r7
 8023de0:	3001      	adds	r0, #1
 8023de2:	d10e      	bne.n	8023e02 <_printf_float+0x42a>
 8023de4:	e659      	b.n	8023a9a <_printf_float+0xc2>
 8023de6:	2301      	movs	r3, #1
 8023de8:	4652      	mov	r2, sl
 8023dea:	4631      	mov	r1, r6
 8023dec:	4628      	mov	r0, r5
 8023dee:	47b8      	blx	r7
 8023df0:	3001      	adds	r0, #1
 8023df2:	f43f ae52 	beq.w	8023a9a <_printf_float+0xc2>
 8023df6:	f108 0801 	add.w	r8, r8, #1
 8023dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dfc:	3b01      	subs	r3, #1
 8023dfe:	4543      	cmp	r3, r8
 8023e00:	dcf1      	bgt.n	8023de6 <_printf_float+0x40e>
 8023e02:	464b      	mov	r3, r9
 8023e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023e08:	e6dc      	b.n	8023bc4 <_printf_float+0x1ec>
 8023e0a:	f04f 0800 	mov.w	r8, #0
 8023e0e:	f104 0a1a 	add.w	sl, r4, #26
 8023e12:	e7f2      	b.n	8023dfa <_printf_float+0x422>
 8023e14:	2301      	movs	r3, #1
 8023e16:	4642      	mov	r2, r8
 8023e18:	e7df      	b.n	8023dda <_printf_float+0x402>
 8023e1a:	2301      	movs	r3, #1
 8023e1c:	464a      	mov	r2, r9
 8023e1e:	4631      	mov	r1, r6
 8023e20:	4628      	mov	r0, r5
 8023e22:	47b8      	blx	r7
 8023e24:	3001      	adds	r0, #1
 8023e26:	f43f ae38 	beq.w	8023a9a <_printf_float+0xc2>
 8023e2a:	f108 0801 	add.w	r8, r8, #1
 8023e2e:	68e3      	ldr	r3, [r4, #12]
 8023e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023e32:	1a5b      	subs	r3, r3, r1
 8023e34:	4543      	cmp	r3, r8
 8023e36:	dcf0      	bgt.n	8023e1a <_printf_float+0x442>
 8023e38:	e6fa      	b.n	8023c30 <_printf_float+0x258>
 8023e3a:	f04f 0800 	mov.w	r8, #0
 8023e3e:	f104 0919 	add.w	r9, r4, #25
 8023e42:	e7f4      	b.n	8023e2e <_printf_float+0x456>

08023e44 <_printf_common>:
 8023e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e48:	4616      	mov	r6, r2
 8023e4a:	4699      	mov	r9, r3
 8023e4c:	688a      	ldr	r2, [r1, #8]
 8023e4e:	690b      	ldr	r3, [r1, #16]
 8023e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023e54:	4293      	cmp	r3, r2
 8023e56:	bfb8      	it	lt
 8023e58:	4613      	movlt	r3, r2
 8023e5a:	6033      	str	r3, [r6, #0]
 8023e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023e60:	4607      	mov	r7, r0
 8023e62:	460c      	mov	r4, r1
 8023e64:	b10a      	cbz	r2, 8023e6a <_printf_common+0x26>
 8023e66:	3301      	adds	r3, #1
 8023e68:	6033      	str	r3, [r6, #0]
 8023e6a:	6823      	ldr	r3, [r4, #0]
 8023e6c:	0699      	lsls	r1, r3, #26
 8023e6e:	bf42      	ittt	mi
 8023e70:	6833      	ldrmi	r3, [r6, #0]
 8023e72:	3302      	addmi	r3, #2
 8023e74:	6033      	strmi	r3, [r6, #0]
 8023e76:	6825      	ldr	r5, [r4, #0]
 8023e78:	f015 0506 	ands.w	r5, r5, #6
 8023e7c:	d106      	bne.n	8023e8c <_printf_common+0x48>
 8023e7e:	f104 0a19 	add.w	sl, r4, #25
 8023e82:	68e3      	ldr	r3, [r4, #12]
 8023e84:	6832      	ldr	r2, [r6, #0]
 8023e86:	1a9b      	subs	r3, r3, r2
 8023e88:	42ab      	cmp	r3, r5
 8023e8a:	dc26      	bgt.n	8023eda <_printf_common+0x96>
 8023e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023e90:	1e13      	subs	r3, r2, #0
 8023e92:	6822      	ldr	r2, [r4, #0]
 8023e94:	bf18      	it	ne
 8023e96:	2301      	movne	r3, #1
 8023e98:	0692      	lsls	r2, r2, #26
 8023e9a:	d42b      	bmi.n	8023ef4 <_printf_common+0xb0>
 8023e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023ea0:	4649      	mov	r1, r9
 8023ea2:	4638      	mov	r0, r7
 8023ea4:	47c0      	blx	r8
 8023ea6:	3001      	adds	r0, #1
 8023ea8:	d01e      	beq.n	8023ee8 <_printf_common+0xa4>
 8023eaa:	6823      	ldr	r3, [r4, #0]
 8023eac:	68e5      	ldr	r5, [r4, #12]
 8023eae:	6832      	ldr	r2, [r6, #0]
 8023eb0:	f003 0306 	and.w	r3, r3, #6
 8023eb4:	2b04      	cmp	r3, #4
 8023eb6:	bf08      	it	eq
 8023eb8:	1aad      	subeq	r5, r5, r2
 8023eba:	68a3      	ldr	r3, [r4, #8]
 8023ebc:	6922      	ldr	r2, [r4, #16]
 8023ebe:	bf0c      	ite	eq
 8023ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023ec4:	2500      	movne	r5, #0
 8023ec6:	4293      	cmp	r3, r2
 8023ec8:	bfc4      	itt	gt
 8023eca:	1a9b      	subgt	r3, r3, r2
 8023ecc:	18ed      	addgt	r5, r5, r3
 8023ece:	2600      	movs	r6, #0
 8023ed0:	341a      	adds	r4, #26
 8023ed2:	42b5      	cmp	r5, r6
 8023ed4:	d11a      	bne.n	8023f0c <_printf_common+0xc8>
 8023ed6:	2000      	movs	r0, #0
 8023ed8:	e008      	b.n	8023eec <_printf_common+0xa8>
 8023eda:	2301      	movs	r3, #1
 8023edc:	4652      	mov	r2, sl
 8023ede:	4649      	mov	r1, r9
 8023ee0:	4638      	mov	r0, r7
 8023ee2:	47c0      	blx	r8
 8023ee4:	3001      	adds	r0, #1
 8023ee6:	d103      	bne.n	8023ef0 <_printf_common+0xac>
 8023ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8023eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ef0:	3501      	adds	r5, #1
 8023ef2:	e7c6      	b.n	8023e82 <_printf_common+0x3e>
 8023ef4:	18e1      	adds	r1, r4, r3
 8023ef6:	1c5a      	adds	r2, r3, #1
 8023ef8:	2030      	movs	r0, #48	; 0x30
 8023efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023efe:	4422      	add	r2, r4
 8023f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023f08:	3302      	adds	r3, #2
 8023f0a:	e7c7      	b.n	8023e9c <_printf_common+0x58>
 8023f0c:	2301      	movs	r3, #1
 8023f0e:	4622      	mov	r2, r4
 8023f10:	4649      	mov	r1, r9
 8023f12:	4638      	mov	r0, r7
 8023f14:	47c0      	blx	r8
 8023f16:	3001      	adds	r0, #1
 8023f18:	d0e6      	beq.n	8023ee8 <_printf_common+0xa4>
 8023f1a:	3601      	adds	r6, #1
 8023f1c:	e7d9      	b.n	8023ed2 <_printf_common+0x8e>
	...

08023f20 <_printf_i>:
 8023f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023f24:	7e0f      	ldrb	r7, [r1, #24]
 8023f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023f28:	2f78      	cmp	r7, #120	; 0x78
 8023f2a:	4691      	mov	r9, r2
 8023f2c:	4680      	mov	r8, r0
 8023f2e:	460c      	mov	r4, r1
 8023f30:	469a      	mov	sl, r3
 8023f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023f36:	d807      	bhi.n	8023f48 <_printf_i+0x28>
 8023f38:	2f62      	cmp	r7, #98	; 0x62
 8023f3a:	d80a      	bhi.n	8023f52 <_printf_i+0x32>
 8023f3c:	2f00      	cmp	r7, #0
 8023f3e:	f000 80d8 	beq.w	80240f2 <_printf_i+0x1d2>
 8023f42:	2f58      	cmp	r7, #88	; 0x58
 8023f44:	f000 80a3 	beq.w	802408e <_printf_i+0x16e>
 8023f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023f50:	e03a      	b.n	8023fc8 <_printf_i+0xa8>
 8023f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023f56:	2b15      	cmp	r3, #21
 8023f58:	d8f6      	bhi.n	8023f48 <_printf_i+0x28>
 8023f5a:	a101      	add	r1, pc, #4	; (adr r1, 8023f60 <_printf_i+0x40>)
 8023f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023f60:	08023fb9 	.word	0x08023fb9
 8023f64:	08023fcd 	.word	0x08023fcd
 8023f68:	08023f49 	.word	0x08023f49
 8023f6c:	08023f49 	.word	0x08023f49
 8023f70:	08023f49 	.word	0x08023f49
 8023f74:	08023f49 	.word	0x08023f49
 8023f78:	08023fcd 	.word	0x08023fcd
 8023f7c:	08023f49 	.word	0x08023f49
 8023f80:	08023f49 	.word	0x08023f49
 8023f84:	08023f49 	.word	0x08023f49
 8023f88:	08023f49 	.word	0x08023f49
 8023f8c:	080240d9 	.word	0x080240d9
 8023f90:	08023ffd 	.word	0x08023ffd
 8023f94:	080240bb 	.word	0x080240bb
 8023f98:	08023f49 	.word	0x08023f49
 8023f9c:	08023f49 	.word	0x08023f49
 8023fa0:	080240fb 	.word	0x080240fb
 8023fa4:	08023f49 	.word	0x08023f49
 8023fa8:	08023ffd 	.word	0x08023ffd
 8023fac:	08023f49 	.word	0x08023f49
 8023fb0:	08023f49 	.word	0x08023f49
 8023fb4:	080240c3 	.word	0x080240c3
 8023fb8:	682b      	ldr	r3, [r5, #0]
 8023fba:	1d1a      	adds	r2, r3, #4
 8023fbc:	681b      	ldr	r3, [r3, #0]
 8023fbe:	602a      	str	r2, [r5, #0]
 8023fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023fc8:	2301      	movs	r3, #1
 8023fca:	e0a3      	b.n	8024114 <_printf_i+0x1f4>
 8023fcc:	6820      	ldr	r0, [r4, #0]
 8023fce:	6829      	ldr	r1, [r5, #0]
 8023fd0:	0606      	lsls	r6, r0, #24
 8023fd2:	f101 0304 	add.w	r3, r1, #4
 8023fd6:	d50a      	bpl.n	8023fee <_printf_i+0xce>
 8023fd8:	680e      	ldr	r6, [r1, #0]
 8023fda:	602b      	str	r3, [r5, #0]
 8023fdc:	2e00      	cmp	r6, #0
 8023fde:	da03      	bge.n	8023fe8 <_printf_i+0xc8>
 8023fe0:	232d      	movs	r3, #45	; 0x2d
 8023fe2:	4276      	negs	r6, r6
 8023fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023fe8:	485e      	ldr	r0, [pc, #376]	; (8024164 <_printf_i+0x244>)
 8023fea:	230a      	movs	r3, #10
 8023fec:	e019      	b.n	8024022 <_printf_i+0x102>
 8023fee:	680e      	ldr	r6, [r1, #0]
 8023ff0:	602b      	str	r3, [r5, #0]
 8023ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023ff6:	bf18      	it	ne
 8023ff8:	b236      	sxthne	r6, r6
 8023ffa:	e7ef      	b.n	8023fdc <_printf_i+0xbc>
 8023ffc:	682b      	ldr	r3, [r5, #0]
 8023ffe:	6820      	ldr	r0, [r4, #0]
 8024000:	1d19      	adds	r1, r3, #4
 8024002:	6029      	str	r1, [r5, #0]
 8024004:	0601      	lsls	r1, r0, #24
 8024006:	d501      	bpl.n	802400c <_printf_i+0xec>
 8024008:	681e      	ldr	r6, [r3, #0]
 802400a:	e002      	b.n	8024012 <_printf_i+0xf2>
 802400c:	0646      	lsls	r6, r0, #25
 802400e:	d5fb      	bpl.n	8024008 <_printf_i+0xe8>
 8024010:	881e      	ldrh	r6, [r3, #0]
 8024012:	4854      	ldr	r0, [pc, #336]	; (8024164 <_printf_i+0x244>)
 8024014:	2f6f      	cmp	r7, #111	; 0x6f
 8024016:	bf0c      	ite	eq
 8024018:	2308      	moveq	r3, #8
 802401a:	230a      	movne	r3, #10
 802401c:	2100      	movs	r1, #0
 802401e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024022:	6865      	ldr	r5, [r4, #4]
 8024024:	60a5      	str	r5, [r4, #8]
 8024026:	2d00      	cmp	r5, #0
 8024028:	bfa2      	ittt	ge
 802402a:	6821      	ldrge	r1, [r4, #0]
 802402c:	f021 0104 	bicge.w	r1, r1, #4
 8024030:	6021      	strge	r1, [r4, #0]
 8024032:	b90e      	cbnz	r6, 8024038 <_printf_i+0x118>
 8024034:	2d00      	cmp	r5, #0
 8024036:	d04d      	beq.n	80240d4 <_printf_i+0x1b4>
 8024038:	4615      	mov	r5, r2
 802403a:	fbb6 f1f3 	udiv	r1, r6, r3
 802403e:	fb03 6711 	mls	r7, r3, r1, r6
 8024042:	5dc7      	ldrb	r7, [r0, r7]
 8024044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024048:	4637      	mov	r7, r6
 802404a:	42bb      	cmp	r3, r7
 802404c:	460e      	mov	r6, r1
 802404e:	d9f4      	bls.n	802403a <_printf_i+0x11a>
 8024050:	2b08      	cmp	r3, #8
 8024052:	d10b      	bne.n	802406c <_printf_i+0x14c>
 8024054:	6823      	ldr	r3, [r4, #0]
 8024056:	07de      	lsls	r6, r3, #31
 8024058:	d508      	bpl.n	802406c <_printf_i+0x14c>
 802405a:	6923      	ldr	r3, [r4, #16]
 802405c:	6861      	ldr	r1, [r4, #4]
 802405e:	4299      	cmp	r1, r3
 8024060:	bfde      	ittt	le
 8024062:	2330      	movle	r3, #48	; 0x30
 8024064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024068:	f105 35ff 	addle.w	r5, r5, #4294967295
 802406c:	1b52      	subs	r2, r2, r5
 802406e:	6122      	str	r2, [r4, #16]
 8024070:	f8cd a000 	str.w	sl, [sp]
 8024074:	464b      	mov	r3, r9
 8024076:	aa03      	add	r2, sp, #12
 8024078:	4621      	mov	r1, r4
 802407a:	4640      	mov	r0, r8
 802407c:	f7ff fee2 	bl	8023e44 <_printf_common>
 8024080:	3001      	adds	r0, #1
 8024082:	d14c      	bne.n	802411e <_printf_i+0x1fe>
 8024084:	f04f 30ff 	mov.w	r0, #4294967295
 8024088:	b004      	add	sp, #16
 802408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802408e:	4835      	ldr	r0, [pc, #212]	; (8024164 <_printf_i+0x244>)
 8024090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024094:	6829      	ldr	r1, [r5, #0]
 8024096:	6823      	ldr	r3, [r4, #0]
 8024098:	f851 6b04 	ldr.w	r6, [r1], #4
 802409c:	6029      	str	r1, [r5, #0]
 802409e:	061d      	lsls	r5, r3, #24
 80240a0:	d514      	bpl.n	80240cc <_printf_i+0x1ac>
 80240a2:	07df      	lsls	r7, r3, #31
 80240a4:	bf44      	itt	mi
 80240a6:	f043 0320 	orrmi.w	r3, r3, #32
 80240aa:	6023      	strmi	r3, [r4, #0]
 80240ac:	b91e      	cbnz	r6, 80240b6 <_printf_i+0x196>
 80240ae:	6823      	ldr	r3, [r4, #0]
 80240b0:	f023 0320 	bic.w	r3, r3, #32
 80240b4:	6023      	str	r3, [r4, #0]
 80240b6:	2310      	movs	r3, #16
 80240b8:	e7b0      	b.n	802401c <_printf_i+0xfc>
 80240ba:	6823      	ldr	r3, [r4, #0]
 80240bc:	f043 0320 	orr.w	r3, r3, #32
 80240c0:	6023      	str	r3, [r4, #0]
 80240c2:	2378      	movs	r3, #120	; 0x78
 80240c4:	4828      	ldr	r0, [pc, #160]	; (8024168 <_printf_i+0x248>)
 80240c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80240ca:	e7e3      	b.n	8024094 <_printf_i+0x174>
 80240cc:	0659      	lsls	r1, r3, #25
 80240ce:	bf48      	it	mi
 80240d0:	b2b6      	uxthmi	r6, r6
 80240d2:	e7e6      	b.n	80240a2 <_printf_i+0x182>
 80240d4:	4615      	mov	r5, r2
 80240d6:	e7bb      	b.n	8024050 <_printf_i+0x130>
 80240d8:	682b      	ldr	r3, [r5, #0]
 80240da:	6826      	ldr	r6, [r4, #0]
 80240dc:	6961      	ldr	r1, [r4, #20]
 80240de:	1d18      	adds	r0, r3, #4
 80240e0:	6028      	str	r0, [r5, #0]
 80240e2:	0635      	lsls	r5, r6, #24
 80240e4:	681b      	ldr	r3, [r3, #0]
 80240e6:	d501      	bpl.n	80240ec <_printf_i+0x1cc>
 80240e8:	6019      	str	r1, [r3, #0]
 80240ea:	e002      	b.n	80240f2 <_printf_i+0x1d2>
 80240ec:	0670      	lsls	r0, r6, #25
 80240ee:	d5fb      	bpl.n	80240e8 <_printf_i+0x1c8>
 80240f0:	8019      	strh	r1, [r3, #0]
 80240f2:	2300      	movs	r3, #0
 80240f4:	6123      	str	r3, [r4, #16]
 80240f6:	4615      	mov	r5, r2
 80240f8:	e7ba      	b.n	8024070 <_printf_i+0x150>
 80240fa:	682b      	ldr	r3, [r5, #0]
 80240fc:	1d1a      	adds	r2, r3, #4
 80240fe:	602a      	str	r2, [r5, #0]
 8024100:	681d      	ldr	r5, [r3, #0]
 8024102:	6862      	ldr	r2, [r4, #4]
 8024104:	2100      	movs	r1, #0
 8024106:	4628      	mov	r0, r5
 8024108:	f7fb ffe2 	bl	80200d0 <memchr>
 802410c:	b108      	cbz	r0, 8024112 <_printf_i+0x1f2>
 802410e:	1b40      	subs	r0, r0, r5
 8024110:	6060      	str	r0, [r4, #4]
 8024112:	6863      	ldr	r3, [r4, #4]
 8024114:	6123      	str	r3, [r4, #16]
 8024116:	2300      	movs	r3, #0
 8024118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802411c:	e7a8      	b.n	8024070 <_printf_i+0x150>
 802411e:	6923      	ldr	r3, [r4, #16]
 8024120:	462a      	mov	r2, r5
 8024122:	4649      	mov	r1, r9
 8024124:	4640      	mov	r0, r8
 8024126:	47d0      	blx	sl
 8024128:	3001      	adds	r0, #1
 802412a:	d0ab      	beq.n	8024084 <_printf_i+0x164>
 802412c:	6823      	ldr	r3, [r4, #0]
 802412e:	079b      	lsls	r3, r3, #30
 8024130:	d413      	bmi.n	802415a <_printf_i+0x23a>
 8024132:	68e0      	ldr	r0, [r4, #12]
 8024134:	9b03      	ldr	r3, [sp, #12]
 8024136:	4298      	cmp	r0, r3
 8024138:	bfb8      	it	lt
 802413a:	4618      	movlt	r0, r3
 802413c:	e7a4      	b.n	8024088 <_printf_i+0x168>
 802413e:	2301      	movs	r3, #1
 8024140:	4632      	mov	r2, r6
 8024142:	4649      	mov	r1, r9
 8024144:	4640      	mov	r0, r8
 8024146:	47d0      	blx	sl
 8024148:	3001      	adds	r0, #1
 802414a:	d09b      	beq.n	8024084 <_printf_i+0x164>
 802414c:	3501      	adds	r5, #1
 802414e:	68e3      	ldr	r3, [r4, #12]
 8024150:	9903      	ldr	r1, [sp, #12]
 8024152:	1a5b      	subs	r3, r3, r1
 8024154:	42ab      	cmp	r3, r5
 8024156:	dcf2      	bgt.n	802413e <_printf_i+0x21e>
 8024158:	e7eb      	b.n	8024132 <_printf_i+0x212>
 802415a:	2500      	movs	r5, #0
 802415c:	f104 0619 	add.w	r6, r4, #25
 8024160:	e7f5      	b.n	802414e <_printf_i+0x22e>
 8024162:	bf00      	nop
 8024164:	080264f2 	.word	0x080264f2
 8024168:	08026503 	.word	0x08026503

0802416c <quorem>:
 802416c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024170:	6903      	ldr	r3, [r0, #16]
 8024172:	690c      	ldr	r4, [r1, #16]
 8024174:	42a3      	cmp	r3, r4
 8024176:	4607      	mov	r7, r0
 8024178:	f2c0 8081 	blt.w	802427e <quorem+0x112>
 802417c:	3c01      	subs	r4, #1
 802417e:	f101 0814 	add.w	r8, r1, #20
 8024182:	f100 0514 	add.w	r5, r0, #20
 8024186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802418a:	9301      	str	r3, [sp, #4]
 802418c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024194:	3301      	adds	r3, #1
 8024196:	429a      	cmp	r2, r3
 8024198:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802419c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80241a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80241a4:	d331      	bcc.n	802420a <quorem+0x9e>
 80241a6:	f04f 0e00 	mov.w	lr, #0
 80241aa:	4640      	mov	r0, r8
 80241ac:	46ac      	mov	ip, r5
 80241ae:	46f2      	mov	sl, lr
 80241b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80241b4:	b293      	uxth	r3, r2
 80241b6:	fb06 e303 	mla	r3, r6, r3, lr
 80241ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80241be:	b29b      	uxth	r3, r3
 80241c0:	ebaa 0303 	sub.w	r3, sl, r3
 80241c4:	f8dc a000 	ldr.w	sl, [ip]
 80241c8:	0c12      	lsrs	r2, r2, #16
 80241ca:	fa13 f38a 	uxtah	r3, r3, sl
 80241ce:	fb06 e202 	mla	r2, r6, r2, lr
 80241d2:	9300      	str	r3, [sp, #0]
 80241d4:	9b00      	ldr	r3, [sp, #0]
 80241d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80241da:	b292      	uxth	r2, r2
 80241dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80241e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80241e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80241e8:	4581      	cmp	r9, r0
 80241ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80241ee:	f84c 3b04 	str.w	r3, [ip], #4
 80241f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80241f6:	d2db      	bcs.n	80241b0 <quorem+0x44>
 80241f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80241fc:	b92b      	cbnz	r3, 802420a <quorem+0x9e>
 80241fe:	9b01      	ldr	r3, [sp, #4]
 8024200:	3b04      	subs	r3, #4
 8024202:	429d      	cmp	r5, r3
 8024204:	461a      	mov	r2, r3
 8024206:	d32e      	bcc.n	8024266 <quorem+0xfa>
 8024208:	613c      	str	r4, [r7, #16]
 802420a:	4638      	mov	r0, r7
 802420c:	f001 f8b8 	bl	8025380 <__mcmp>
 8024210:	2800      	cmp	r0, #0
 8024212:	db24      	blt.n	802425e <quorem+0xf2>
 8024214:	3601      	adds	r6, #1
 8024216:	4628      	mov	r0, r5
 8024218:	f04f 0c00 	mov.w	ip, #0
 802421c:	f858 2b04 	ldr.w	r2, [r8], #4
 8024220:	f8d0 e000 	ldr.w	lr, [r0]
 8024224:	b293      	uxth	r3, r2
 8024226:	ebac 0303 	sub.w	r3, ip, r3
 802422a:	0c12      	lsrs	r2, r2, #16
 802422c:	fa13 f38e 	uxtah	r3, r3, lr
 8024230:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8024234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024238:	b29b      	uxth	r3, r3
 802423a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802423e:	45c1      	cmp	r9, r8
 8024240:	f840 3b04 	str.w	r3, [r0], #4
 8024244:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8024248:	d2e8      	bcs.n	802421c <quorem+0xb0>
 802424a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802424e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024252:	b922      	cbnz	r2, 802425e <quorem+0xf2>
 8024254:	3b04      	subs	r3, #4
 8024256:	429d      	cmp	r5, r3
 8024258:	461a      	mov	r2, r3
 802425a:	d30a      	bcc.n	8024272 <quorem+0x106>
 802425c:	613c      	str	r4, [r7, #16]
 802425e:	4630      	mov	r0, r6
 8024260:	b003      	add	sp, #12
 8024262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024266:	6812      	ldr	r2, [r2, #0]
 8024268:	3b04      	subs	r3, #4
 802426a:	2a00      	cmp	r2, #0
 802426c:	d1cc      	bne.n	8024208 <quorem+0x9c>
 802426e:	3c01      	subs	r4, #1
 8024270:	e7c7      	b.n	8024202 <quorem+0x96>
 8024272:	6812      	ldr	r2, [r2, #0]
 8024274:	3b04      	subs	r3, #4
 8024276:	2a00      	cmp	r2, #0
 8024278:	d1f0      	bne.n	802425c <quorem+0xf0>
 802427a:	3c01      	subs	r4, #1
 802427c:	e7eb      	b.n	8024256 <quorem+0xea>
 802427e:	2000      	movs	r0, #0
 8024280:	e7ee      	b.n	8024260 <quorem+0xf4>
 8024282:	0000      	movs	r0, r0
 8024284:	0000      	movs	r0, r0
	...

08024288 <_dtoa_r>:
 8024288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802428c:	ed2d 8b04 	vpush	{d8-d9}
 8024290:	ec57 6b10 	vmov	r6, r7, d0
 8024294:	b093      	sub	sp, #76	; 0x4c
 8024296:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8024298:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802429c:	9106      	str	r1, [sp, #24]
 802429e:	ee10 aa10 	vmov	sl, s0
 80242a2:	4604      	mov	r4, r0
 80242a4:	9209      	str	r2, [sp, #36]	; 0x24
 80242a6:	930c      	str	r3, [sp, #48]	; 0x30
 80242a8:	46bb      	mov	fp, r7
 80242aa:	b975      	cbnz	r5, 80242ca <_dtoa_r+0x42>
 80242ac:	2010      	movs	r0, #16
 80242ae:	f000 fddd 	bl	8024e6c <malloc>
 80242b2:	4602      	mov	r2, r0
 80242b4:	6260      	str	r0, [r4, #36]	; 0x24
 80242b6:	b920      	cbnz	r0, 80242c2 <_dtoa_r+0x3a>
 80242b8:	4ba7      	ldr	r3, [pc, #668]	; (8024558 <_dtoa_r+0x2d0>)
 80242ba:	21ea      	movs	r1, #234	; 0xea
 80242bc:	48a7      	ldr	r0, [pc, #668]	; (802455c <_dtoa_r+0x2d4>)
 80242be:	f001 fa67 	bl	8025790 <__assert_func>
 80242c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80242c6:	6005      	str	r5, [r0, #0]
 80242c8:	60c5      	str	r5, [r0, #12]
 80242ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80242cc:	6819      	ldr	r1, [r3, #0]
 80242ce:	b151      	cbz	r1, 80242e6 <_dtoa_r+0x5e>
 80242d0:	685a      	ldr	r2, [r3, #4]
 80242d2:	604a      	str	r2, [r1, #4]
 80242d4:	2301      	movs	r3, #1
 80242d6:	4093      	lsls	r3, r2
 80242d8:	608b      	str	r3, [r1, #8]
 80242da:	4620      	mov	r0, r4
 80242dc:	f000 fe0e 	bl	8024efc <_Bfree>
 80242e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80242e2:	2200      	movs	r2, #0
 80242e4:	601a      	str	r2, [r3, #0]
 80242e6:	1e3b      	subs	r3, r7, #0
 80242e8:	bfaa      	itet	ge
 80242ea:	2300      	movge	r3, #0
 80242ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80242f0:	f8c8 3000 	strge.w	r3, [r8]
 80242f4:	4b9a      	ldr	r3, [pc, #616]	; (8024560 <_dtoa_r+0x2d8>)
 80242f6:	bfbc      	itt	lt
 80242f8:	2201      	movlt	r2, #1
 80242fa:	f8c8 2000 	strlt.w	r2, [r8]
 80242fe:	ea33 030b 	bics.w	r3, r3, fp
 8024302:	d11b      	bne.n	802433c <_dtoa_r+0xb4>
 8024304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024306:	f242 730f 	movw	r3, #9999	; 0x270f
 802430a:	6013      	str	r3, [r2, #0]
 802430c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024310:	4333      	orrs	r3, r6
 8024312:	f000 8592 	beq.w	8024e3a <_dtoa_r+0xbb2>
 8024316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024318:	b963      	cbnz	r3, 8024334 <_dtoa_r+0xac>
 802431a:	4b92      	ldr	r3, [pc, #584]	; (8024564 <_dtoa_r+0x2dc>)
 802431c:	e022      	b.n	8024364 <_dtoa_r+0xdc>
 802431e:	4b92      	ldr	r3, [pc, #584]	; (8024568 <_dtoa_r+0x2e0>)
 8024320:	9301      	str	r3, [sp, #4]
 8024322:	3308      	adds	r3, #8
 8024324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024326:	6013      	str	r3, [r2, #0]
 8024328:	9801      	ldr	r0, [sp, #4]
 802432a:	b013      	add	sp, #76	; 0x4c
 802432c:	ecbd 8b04 	vpop	{d8-d9}
 8024330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024334:	4b8b      	ldr	r3, [pc, #556]	; (8024564 <_dtoa_r+0x2dc>)
 8024336:	9301      	str	r3, [sp, #4]
 8024338:	3303      	adds	r3, #3
 802433a:	e7f3      	b.n	8024324 <_dtoa_r+0x9c>
 802433c:	2200      	movs	r2, #0
 802433e:	2300      	movs	r3, #0
 8024340:	4650      	mov	r0, sl
 8024342:	4659      	mov	r1, fp
 8024344:	f7fc fb38 	bl	80209b8 <__aeabi_dcmpeq>
 8024348:	ec4b ab19 	vmov	d9, sl, fp
 802434c:	4680      	mov	r8, r0
 802434e:	b158      	cbz	r0, 8024368 <_dtoa_r+0xe0>
 8024350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024352:	2301      	movs	r3, #1
 8024354:	6013      	str	r3, [r2, #0]
 8024356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024358:	2b00      	cmp	r3, #0
 802435a:	f000 856b 	beq.w	8024e34 <_dtoa_r+0xbac>
 802435e:	4883      	ldr	r0, [pc, #524]	; (802456c <_dtoa_r+0x2e4>)
 8024360:	6018      	str	r0, [r3, #0]
 8024362:	1e43      	subs	r3, r0, #1
 8024364:	9301      	str	r3, [sp, #4]
 8024366:	e7df      	b.n	8024328 <_dtoa_r+0xa0>
 8024368:	ec4b ab10 	vmov	d0, sl, fp
 802436c:	aa10      	add	r2, sp, #64	; 0x40
 802436e:	a911      	add	r1, sp, #68	; 0x44
 8024370:	4620      	mov	r0, r4
 8024372:	f001 f8ab 	bl	80254cc <__d2b>
 8024376:	f3cb 550a 	ubfx	r5, fp, #20, #11
 802437a:	ee08 0a10 	vmov	s16, r0
 802437e:	2d00      	cmp	r5, #0
 8024380:	f000 8084 	beq.w	802448c <_dtoa_r+0x204>
 8024384:	ee19 3a90 	vmov	r3, s19
 8024388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802438c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8024390:	4656      	mov	r6, sl
 8024392:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8024396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802439a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802439e:	4b74      	ldr	r3, [pc, #464]	; (8024570 <_dtoa_r+0x2e8>)
 80243a0:	2200      	movs	r2, #0
 80243a2:	4630      	mov	r0, r6
 80243a4:	4639      	mov	r1, r7
 80243a6:	f7fb fee7 	bl	8020178 <__aeabi_dsub>
 80243aa:	a365      	add	r3, pc, #404	; (adr r3, 8024540 <_dtoa_r+0x2b8>)
 80243ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243b0:	f7fc f89a 	bl	80204e8 <__aeabi_dmul>
 80243b4:	a364      	add	r3, pc, #400	; (adr r3, 8024548 <_dtoa_r+0x2c0>)
 80243b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243ba:	f7fb fedf 	bl	802017c <__adddf3>
 80243be:	4606      	mov	r6, r0
 80243c0:	4628      	mov	r0, r5
 80243c2:	460f      	mov	r7, r1
 80243c4:	f7fc f826 	bl	8020414 <__aeabi_i2d>
 80243c8:	a361      	add	r3, pc, #388	; (adr r3, 8024550 <_dtoa_r+0x2c8>)
 80243ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243ce:	f7fc f88b 	bl	80204e8 <__aeabi_dmul>
 80243d2:	4602      	mov	r2, r0
 80243d4:	460b      	mov	r3, r1
 80243d6:	4630      	mov	r0, r6
 80243d8:	4639      	mov	r1, r7
 80243da:	f7fb fecf 	bl	802017c <__adddf3>
 80243de:	4606      	mov	r6, r0
 80243e0:	460f      	mov	r7, r1
 80243e2:	f7fc fb31 	bl	8020a48 <__aeabi_d2iz>
 80243e6:	2200      	movs	r2, #0
 80243e8:	9000      	str	r0, [sp, #0]
 80243ea:	2300      	movs	r3, #0
 80243ec:	4630      	mov	r0, r6
 80243ee:	4639      	mov	r1, r7
 80243f0:	f7fc faec 	bl	80209cc <__aeabi_dcmplt>
 80243f4:	b150      	cbz	r0, 802440c <_dtoa_r+0x184>
 80243f6:	9800      	ldr	r0, [sp, #0]
 80243f8:	f7fc f80c 	bl	8020414 <__aeabi_i2d>
 80243fc:	4632      	mov	r2, r6
 80243fe:	463b      	mov	r3, r7
 8024400:	f7fc fada 	bl	80209b8 <__aeabi_dcmpeq>
 8024404:	b910      	cbnz	r0, 802440c <_dtoa_r+0x184>
 8024406:	9b00      	ldr	r3, [sp, #0]
 8024408:	3b01      	subs	r3, #1
 802440a:	9300      	str	r3, [sp, #0]
 802440c:	9b00      	ldr	r3, [sp, #0]
 802440e:	2b16      	cmp	r3, #22
 8024410:	d85a      	bhi.n	80244c8 <_dtoa_r+0x240>
 8024412:	9a00      	ldr	r2, [sp, #0]
 8024414:	4b57      	ldr	r3, [pc, #348]	; (8024574 <_dtoa_r+0x2ec>)
 8024416:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802441e:	ec51 0b19 	vmov	r0, r1, d9
 8024422:	f7fc fad3 	bl	80209cc <__aeabi_dcmplt>
 8024426:	2800      	cmp	r0, #0
 8024428:	d050      	beq.n	80244cc <_dtoa_r+0x244>
 802442a:	9b00      	ldr	r3, [sp, #0]
 802442c:	3b01      	subs	r3, #1
 802442e:	9300      	str	r3, [sp, #0]
 8024430:	2300      	movs	r3, #0
 8024432:	930b      	str	r3, [sp, #44]	; 0x2c
 8024434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024436:	1b5d      	subs	r5, r3, r5
 8024438:	1e6b      	subs	r3, r5, #1
 802443a:	9305      	str	r3, [sp, #20]
 802443c:	bf45      	ittet	mi
 802443e:	f1c5 0301 	rsbmi	r3, r5, #1
 8024442:	9304      	strmi	r3, [sp, #16]
 8024444:	2300      	movpl	r3, #0
 8024446:	2300      	movmi	r3, #0
 8024448:	bf4c      	ite	mi
 802444a:	9305      	strmi	r3, [sp, #20]
 802444c:	9304      	strpl	r3, [sp, #16]
 802444e:	9b00      	ldr	r3, [sp, #0]
 8024450:	2b00      	cmp	r3, #0
 8024452:	db3d      	blt.n	80244d0 <_dtoa_r+0x248>
 8024454:	9b05      	ldr	r3, [sp, #20]
 8024456:	9a00      	ldr	r2, [sp, #0]
 8024458:	920a      	str	r2, [sp, #40]	; 0x28
 802445a:	4413      	add	r3, r2
 802445c:	9305      	str	r3, [sp, #20]
 802445e:	2300      	movs	r3, #0
 8024460:	9307      	str	r3, [sp, #28]
 8024462:	9b06      	ldr	r3, [sp, #24]
 8024464:	2b09      	cmp	r3, #9
 8024466:	f200 8089 	bhi.w	802457c <_dtoa_r+0x2f4>
 802446a:	2b05      	cmp	r3, #5
 802446c:	bfc4      	itt	gt
 802446e:	3b04      	subgt	r3, #4
 8024470:	9306      	strgt	r3, [sp, #24]
 8024472:	9b06      	ldr	r3, [sp, #24]
 8024474:	f1a3 0302 	sub.w	r3, r3, #2
 8024478:	bfcc      	ite	gt
 802447a:	2500      	movgt	r5, #0
 802447c:	2501      	movle	r5, #1
 802447e:	2b03      	cmp	r3, #3
 8024480:	f200 8087 	bhi.w	8024592 <_dtoa_r+0x30a>
 8024484:	e8df f003 	tbb	[pc, r3]
 8024488:	59383a2d 	.word	0x59383a2d
 802448c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8024490:	441d      	add	r5, r3
 8024492:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8024496:	2b20      	cmp	r3, #32
 8024498:	bfc1      	itttt	gt
 802449a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802449e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80244a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80244a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80244aa:	bfda      	itte	le
 80244ac:	f1c3 0320 	rsble	r3, r3, #32
 80244b0:	fa06 f003 	lslle.w	r0, r6, r3
 80244b4:	4318      	orrgt	r0, r3
 80244b6:	f7fb ff9d 	bl	80203f4 <__aeabi_ui2d>
 80244ba:	2301      	movs	r3, #1
 80244bc:	4606      	mov	r6, r0
 80244be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80244c2:	3d01      	subs	r5, #1
 80244c4:	930e      	str	r3, [sp, #56]	; 0x38
 80244c6:	e76a      	b.n	802439e <_dtoa_r+0x116>
 80244c8:	2301      	movs	r3, #1
 80244ca:	e7b2      	b.n	8024432 <_dtoa_r+0x1aa>
 80244cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80244ce:	e7b1      	b.n	8024434 <_dtoa_r+0x1ac>
 80244d0:	9b04      	ldr	r3, [sp, #16]
 80244d2:	9a00      	ldr	r2, [sp, #0]
 80244d4:	1a9b      	subs	r3, r3, r2
 80244d6:	9304      	str	r3, [sp, #16]
 80244d8:	4253      	negs	r3, r2
 80244da:	9307      	str	r3, [sp, #28]
 80244dc:	2300      	movs	r3, #0
 80244de:	930a      	str	r3, [sp, #40]	; 0x28
 80244e0:	e7bf      	b.n	8024462 <_dtoa_r+0x1da>
 80244e2:	2300      	movs	r3, #0
 80244e4:	9308      	str	r3, [sp, #32]
 80244e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	dc55      	bgt.n	8024598 <_dtoa_r+0x310>
 80244ec:	2301      	movs	r3, #1
 80244ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80244f2:	461a      	mov	r2, r3
 80244f4:	9209      	str	r2, [sp, #36]	; 0x24
 80244f6:	e00c      	b.n	8024512 <_dtoa_r+0x28a>
 80244f8:	2301      	movs	r3, #1
 80244fa:	e7f3      	b.n	80244e4 <_dtoa_r+0x25c>
 80244fc:	2300      	movs	r3, #0
 80244fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024500:	9308      	str	r3, [sp, #32]
 8024502:	9b00      	ldr	r3, [sp, #0]
 8024504:	4413      	add	r3, r2
 8024506:	9302      	str	r3, [sp, #8]
 8024508:	3301      	adds	r3, #1
 802450a:	2b01      	cmp	r3, #1
 802450c:	9303      	str	r3, [sp, #12]
 802450e:	bfb8      	it	lt
 8024510:	2301      	movlt	r3, #1
 8024512:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8024514:	2200      	movs	r2, #0
 8024516:	6042      	str	r2, [r0, #4]
 8024518:	2204      	movs	r2, #4
 802451a:	f102 0614 	add.w	r6, r2, #20
 802451e:	429e      	cmp	r6, r3
 8024520:	6841      	ldr	r1, [r0, #4]
 8024522:	d93d      	bls.n	80245a0 <_dtoa_r+0x318>
 8024524:	4620      	mov	r0, r4
 8024526:	f000 fca9 	bl	8024e7c <_Balloc>
 802452a:	9001      	str	r0, [sp, #4]
 802452c:	2800      	cmp	r0, #0
 802452e:	d13b      	bne.n	80245a8 <_dtoa_r+0x320>
 8024530:	4b11      	ldr	r3, [pc, #68]	; (8024578 <_dtoa_r+0x2f0>)
 8024532:	4602      	mov	r2, r0
 8024534:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8024538:	e6c0      	b.n	80242bc <_dtoa_r+0x34>
 802453a:	2301      	movs	r3, #1
 802453c:	e7df      	b.n	80244fe <_dtoa_r+0x276>
 802453e:	bf00      	nop
 8024540:	636f4361 	.word	0x636f4361
 8024544:	3fd287a7 	.word	0x3fd287a7
 8024548:	8b60c8b3 	.word	0x8b60c8b3
 802454c:	3fc68a28 	.word	0x3fc68a28
 8024550:	509f79fb 	.word	0x509f79fb
 8024554:	3fd34413 	.word	0x3fd34413
 8024558:	08026521 	.word	0x08026521
 802455c:	08026538 	.word	0x08026538
 8024560:	7ff00000 	.word	0x7ff00000
 8024564:	0802651d 	.word	0x0802651d
 8024568:	08026514 	.word	0x08026514
 802456c:	080264f1 	.word	0x080264f1
 8024570:	3ff80000 	.word	0x3ff80000
 8024574:	08026628 	.word	0x08026628
 8024578:	08026593 	.word	0x08026593
 802457c:	2501      	movs	r5, #1
 802457e:	2300      	movs	r3, #0
 8024580:	9306      	str	r3, [sp, #24]
 8024582:	9508      	str	r5, [sp, #32]
 8024584:	f04f 33ff 	mov.w	r3, #4294967295
 8024588:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802458c:	2200      	movs	r2, #0
 802458e:	2312      	movs	r3, #18
 8024590:	e7b0      	b.n	80244f4 <_dtoa_r+0x26c>
 8024592:	2301      	movs	r3, #1
 8024594:	9308      	str	r3, [sp, #32]
 8024596:	e7f5      	b.n	8024584 <_dtoa_r+0x2fc>
 8024598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802459a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802459e:	e7b8      	b.n	8024512 <_dtoa_r+0x28a>
 80245a0:	3101      	adds	r1, #1
 80245a2:	6041      	str	r1, [r0, #4]
 80245a4:	0052      	lsls	r2, r2, #1
 80245a6:	e7b8      	b.n	802451a <_dtoa_r+0x292>
 80245a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80245aa:	9a01      	ldr	r2, [sp, #4]
 80245ac:	601a      	str	r2, [r3, #0]
 80245ae:	9b03      	ldr	r3, [sp, #12]
 80245b0:	2b0e      	cmp	r3, #14
 80245b2:	f200 809d 	bhi.w	80246f0 <_dtoa_r+0x468>
 80245b6:	2d00      	cmp	r5, #0
 80245b8:	f000 809a 	beq.w	80246f0 <_dtoa_r+0x468>
 80245bc:	9b00      	ldr	r3, [sp, #0]
 80245be:	2b00      	cmp	r3, #0
 80245c0:	dd32      	ble.n	8024628 <_dtoa_r+0x3a0>
 80245c2:	4ab7      	ldr	r2, [pc, #732]	; (80248a0 <_dtoa_r+0x618>)
 80245c4:	f003 030f 	and.w	r3, r3, #15
 80245c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80245cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80245d0:	9b00      	ldr	r3, [sp, #0]
 80245d2:	05d8      	lsls	r0, r3, #23
 80245d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80245d8:	d516      	bpl.n	8024608 <_dtoa_r+0x380>
 80245da:	4bb2      	ldr	r3, [pc, #712]	; (80248a4 <_dtoa_r+0x61c>)
 80245dc:	ec51 0b19 	vmov	r0, r1, d9
 80245e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80245e4:	f7fc f8aa 	bl	802073c <__aeabi_ddiv>
 80245e8:	f007 070f 	and.w	r7, r7, #15
 80245ec:	4682      	mov	sl, r0
 80245ee:	468b      	mov	fp, r1
 80245f0:	2503      	movs	r5, #3
 80245f2:	4eac      	ldr	r6, [pc, #688]	; (80248a4 <_dtoa_r+0x61c>)
 80245f4:	b957      	cbnz	r7, 802460c <_dtoa_r+0x384>
 80245f6:	4642      	mov	r2, r8
 80245f8:	464b      	mov	r3, r9
 80245fa:	4650      	mov	r0, sl
 80245fc:	4659      	mov	r1, fp
 80245fe:	f7fc f89d 	bl	802073c <__aeabi_ddiv>
 8024602:	4682      	mov	sl, r0
 8024604:	468b      	mov	fp, r1
 8024606:	e028      	b.n	802465a <_dtoa_r+0x3d2>
 8024608:	2502      	movs	r5, #2
 802460a:	e7f2      	b.n	80245f2 <_dtoa_r+0x36a>
 802460c:	07f9      	lsls	r1, r7, #31
 802460e:	d508      	bpl.n	8024622 <_dtoa_r+0x39a>
 8024610:	4640      	mov	r0, r8
 8024612:	4649      	mov	r1, r9
 8024614:	e9d6 2300 	ldrd	r2, r3, [r6]
 8024618:	f7fb ff66 	bl	80204e8 <__aeabi_dmul>
 802461c:	3501      	adds	r5, #1
 802461e:	4680      	mov	r8, r0
 8024620:	4689      	mov	r9, r1
 8024622:	107f      	asrs	r7, r7, #1
 8024624:	3608      	adds	r6, #8
 8024626:	e7e5      	b.n	80245f4 <_dtoa_r+0x36c>
 8024628:	f000 809b 	beq.w	8024762 <_dtoa_r+0x4da>
 802462c:	9b00      	ldr	r3, [sp, #0]
 802462e:	4f9d      	ldr	r7, [pc, #628]	; (80248a4 <_dtoa_r+0x61c>)
 8024630:	425e      	negs	r6, r3
 8024632:	4b9b      	ldr	r3, [pc, #620]	; (80248a0 <_dtoa_r+0x618>)
 8024634:	f006 020f 	and.w	r2, r6, #15
 8024638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024640:	ec51 0b19 	vmov	r0, r1, d9
 8024644:	f7fb ff50 	bl	80204e8 <__aeabi_dmul>
 8024648:	1136      	asrs	r6, r6, #4
 802464a:	4682      	mov	sl, r0
 802464c:	468b      	mov	fp, r1
 802464e:	2300      	movs	r3, #0
 8024650:	2502      	movs	r5, #2
 8024652:	2e00      	cmp	r6, #0
 8024654:	d17a      	bne.n	802474c <_dtoa_r+0x4c4>
 8024656:	2b00      	cmp	r3, #0
 8024658:	d1d3      	bne.n	8024602 <_dtoa_r+0x37a>
 802465a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802465c:	2b00      	cmp	r3, #0
 802465e:	f000 8082 	beq.w	8024766 <_dtoa_r+0x4de>
 8024662:	4b91      	ldr	r3, [pc, #580]	; (80248a8 <_dtoa_r+0x620>)
 8024664:	2200      	movs	r2, #0
 8024666:	4650      	mov	r0, sl
 8024668:	4659      	mov	r1, fp
 802466a:	f7fc f9af 	bl	80209cc <__aeabi_dcmplt>
 802466e:	2800      	cmp	r0, #0
 8024670:	d079      	beq.n	8024766 <_dtoa_r+0x4de>
 8024672:	9b03      	ldr	r3, [sp, #12]
 8024674:	2b00      	cmp	r3, #0
 8024676:	d076      	beq.n	8024766 <_dtoa_r+0x4de>
 8024678:	9b02      	ldr	r3, [sp, #8]
 802467a:	2b00      	cmp	r3, #0
 802467c:	dd36      	ble.n	80246ec <_dtoa_r+0x464>
 802467e:	9b00      	ldr	r3, [sp, #0]
 8024680:	4650      	mov	r0, sl
 8024682:	4659      	mov	r1, fp
 8024684:	1e5f      	subs	r7, r3, #1
 8024686:	2200      	movs	r2, #0
 8024688:	4b88      	ldr	r3, [pc, #544]	; (80248ac <_dtoa_r+0x624>)
 802468a:	f7fb ff2d 	bl	80204e8 <__aeabi_dmul>
 802468e:	9e02      	ldr	r6, [sp, #8]
 8024690:	4682      	mov	sl, r0
 8024692:	468b      	mov	fp, r1
 8024694:	3501      	adds	r5, #1
 8024696:	4628      	mov	r0, r5
 8024698:	f7fb febc 	bl	8020414 <__aeabi_i2d>
 802469c:	4652      	mov	r2, sl
 802469e:	465b      	mov	r3, fp
 80246a0:	f7fb ff22 	bl	80204e8 <__aeabi_dmul>
 80246a4:	4b82      	ldr	r3, [pc, #520]	; (80248b0 <_dtoa_r+0x628>)
 80246a6:	2200      	movs	r2, #0
 80246a8:	f7fb fd68 	bl	802017c <__adddf3>
 80246ac:	46d0      	mov	r8, sl
 80246ae:	46d9      	mov	r9, fp
 80246b0:	4682      	mov	sl, r0
 80246b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80246b6:	2e00      	cmp	r6, #0
 80246b8:	d158      	bne.n	802476c <_dtoa_r+0x4e4>
 80246ba:	4b7e      	ldr	r3, [pc, #504]	; (80248b4 <_dtoa_r+0x62c>)
 80246bc:	2200      	movs	r2, #0
 80246be:	4640      	mov	r0, r8
 80246c0:	4649      	mov	r1, r9
 80246c2:	f7fb fd59 	bl	8020178 <__aeabi_dsub>
 80246c6:	4652      	mov	r2, sl
 80246c8:	465b      	mov	r3, fp
 80246ca:	4680      	mov	r8, r0
 80246cc:	4689      	mov	r9, r1
 80246ce:	f7fc f99b 	bl	8020a08 <__aeabi_dcmpgt>
 80246d2:	2800      	cmp	r0, #0
 80246d4:	f040 8295 	bne.w	8024c02 <_dtoa_r+0x97a>
 80246d8:	4652      	mov	r2, sl
 80246da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80246de:	4640      	mov	r0, r8
 80246e0:	4649      	mov	r1, r9
 80246e2:	f7fc f973 	bl	80209cc <__aeabi_dcmplt>
 80246e6:	2800      	cmp	r0, #0
 80246e8:	f040 8289 	bne.w	8024bfe <_dtoa_r+0x976>
 80246ec:	ec5b ab19 	vmov	sl, fp, d9
 80246f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80246f2:	2b00      	cmp	r3, #0
 80246f4:	f2c0 8148 	blt.w	8024988 <_dtoa_r+0x700>
 80246f8:	9a00      	ldr	r2, [sp, #0]
 80246fa:	2a0e      	cmp	r2, #14
 80246fc:	f300 8144 	bgt.w	8024988 <_dtoa_r+0x700>
 8024700:	4b67      	ldr	r3, [pc, #412]	; (80248a0 <_dtoa_r+0x618>)
 8024702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024706:	e9d3 8900 	ldrd	r8, r9, [r3]
 802470a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802470c:	2b00      	cmp	r3, #0
 802470e:	f280 80d5 	bge.w	80248bc <_dtoa_r+0x634>
 8024712:	9b03      	ldr	r3, [sp, #12]
 8024714:	2b00      	cmp	r3, #0
 8024716:	f300 80d1 	bgt.w	80248bc <_dtoa_r+0x634>
 802471a:	f040 826f 	bne.w	8024bfc <_dtoa_r+0x974>
 802471e:	4b65      	ldr	r3, [pc, #404]	; (80248b4 <_dtoa_r+0x62c>)
 8024720:	2200      	movs	r2, #0
 8024722:	4640      	mov	r0, r8
 8024724:	4649      	mov	r1, r9
 8024726:	f7fb fedf 	bl	80204e8 <__aeabi_dmul>
 802472a:	4652      	mov	r2, sl
 802472c:	465b      	mov	r3, fp
 802472e:	f7fc f961 	bl	80209f4 <__aeabi_dcmpge>
 8024732:	9e03      	ldr	r6, [sp, #12]
 8024734:	4637      	mov	r7, r6
 8024736:	2800      	cmp	r0, #0
 8024738:	f040 8245 	bne.w	8024bc6 <_dtoa_r+0x93e>
 802473c:	9d01      	ldr	r5, [sp, #4]
 802473e:	2331      	movs	r3, #49	; 0x31
 8024740:	f805 3b01 	strb.w	r3, [r5], #1
 8024744:	9b00      	ldr	r3, [sp, #0]
 8024746:	3301      	adds	r3, #1
 8024748:	9300      	str	r3, [sp, #0]
 802474a:	e240      	b.n	8024bce <_dtoa_r+0x946>
 802474c:	07f2      	lsls	r2, r6, #31
 802474e:	d505      	bpl.n	802475c <_dtoa_r+0x4d4>
 8024750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024754:	f7fb fec8 	bl	80204e8 <__aeabi_dmul>
 8024758:	3501      	adds	r5, #1
 802475a:	2301      	movs	r3, #1
 802475c:	1076      	asrs	r6, r6, #1
 802475e:	3708      	adds	r7, #8
 8024760:	e777      	b.n	8024652 <_dtoa_r+0x3ca>
 8024762:	2502      	movs	r5, #2
 8024764:	e779      	b.n	802465a <_dtoa_r+0x3d2>
 8024766:	9f00      	ldr	r7, [sp, #0]
 8024768:	9e03      	ldr	r6, [sp, #12]
 802476a:	e794      	b.n	8024696 <_dtoa_r+0x40e>
 802476c:	9901      	ldr	r1, [sp, #4]
 802476e:	4b4c      	ldr	r3, [pc, #304]	; (80248a0 <_dtoa_r+0x618>)
 8024770:	4431      	add	r1, r6
 8024772:	910d      	str	r1, [sp, #52]	; 0x34
 8024774:	9908      	ldr	r1, [sp, #32]
 8024776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802477a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802477e:	2900      	cmp	r1, #0
 8024780:	d043      	beq.n	802480a <_dtoa_r+0x582>
 8024782:	494d      	ldr	r1, [pc, #308]	; (80248b8 <_dtoa_r+0x630>)
 8024784:	2000      	movs	r0, #0
 8024786:	f7fb ffd9 	bl	802073c <__aeabi_ddiv>
 802478a:	4652      	mov	r2, sl
 802478c:	465b      	mov	r3, fp
 802478e:	f7fb fcf3 	bl	8020178 <__aeabi_dsub>
 8024792:	9d01      	ldr	r5, [sp, #4]
 8024794:	4682      	mov	sl, r0
 8024796:	468b      	mov	fp, r1
 8024798:	4649      	mov	r1, r9
 802479a:	4640      	mov	r0, r8
 802479c:	f7fc f954 	bl	8020a48 <__aeabi_d2iz>
 80247a0:	4606      	mov	r6, r0
 80247a2:	f7fb fe37 	bl	8020414 <__aeabi_i2d>
 80247a6:	4602      	mov	r2, r0
 80247a8:	460b      	mov	r3, r1
 80247aa:	4640      	mov	r0, r8
 80247ac:	4649      	mov	r1, r9
 80247ae:	f7fb fce3 	bl	8020178 <__aeabi_dsub>
 80247b2:	3630      	adds	r6, #48	; 0x30
 80247b4:	f805 6b01 	strb.w	r6, [r5], #1
 80247b8:	4652      	mov	r2, sl
 80247ba:	465b      	mov	r3, fp
 80247bc:	4680      	mov	r8, r0
 80247be:	4689      	mov	r9, r1
 80247c0:	f7fc f904 	bl	80209cc <__aeabi_dcmplt>
 80247c4:	2800      	cmp	r0, #0
 80247c6:	d163      	bne.n	8024890 <_dtoa_r+0x608>
 80247c8:	4642      	mov	r2, r8
 80247ca:	464b      	mov	r3, r9
 80247cc:	4936      	ldr	r1, [pc, #216]	; (80248a8 <_dtoa_r+0x620>)
 80247ce:	2000      	movs	r0, #0
 80247d0:	f7fb fcd2 	bl	8020178 <__aeabi_dsub>
 80247d4:	4652      	mov	r2, sl
 80247d6:	465b      	mov	r3, fp
 80247d8:	f7fc f8f8 	bl	80209cc <__aeabi_dcmplt>
 80247dc:	2800      	cmp	r0, #0
 80247de:	f040 80b5 	bne.w	802494c <_dtoa_r+0x6c4>
 80247e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80247e4:	429d      	cmp	r5, r3
 80247e6:	d081      	beq.n	80246ec <_dtoa_r+0x464>
 80247e8:	4b30      	ldr	r3, [pc, #192]	; (80248ac <_dtoa_r+0x624>)
 80247ea:	2200      	movs	r2, #0
 80247ec:	4650      	mov	r0, sl
 80247ee:	4659      	mov	r1, fp
 80247f0:	f7fb fe7a 	bl	80204e8 <__aeabi_dmul>
 80247f4:	4b2d      	ldr	r3, [pc, #180]	; (80248ac <_dtoa_r+0x624>)
 80247f6:	4682      	mov	sl, r0
 80247f8:	468b      	mov	fp, r1
 80247fa:	4640      	mov	r0, r8
 80247fc:	4649      	mov	r1, r9
 80247fe:	2200      	movs	r2, #0
 8024800:	f7fb fe72 	bl	80204e8 <__aeabi_dmul>
 8024804:	4680      	mov	r8, r0
 8024806:	4689      	mov	r9, r1
 8024808:	e7c6      	b.n	8024798 <_dtoa_r+0x510>
 802480a:	4650      	mov	r0, sl
 802480c:	4659      	mov	r1, fp
 802480e:	f7fb fe6b 	bl	80204e8 <__aeabi_dmul>
 8024812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024814:	9d01      	ldr	r5, [sp, #4]
 8024816:	930f      	str	r3, [sp, #60]	; 0x3c
 8024818:	4682      	mov	sl, r0
 802481a:	468b      	mov	fp, r1
 802481c:	4649      	mov	r1, r9
 802481e:	4640      	mov	r0, r8
 8024820:	f7fc f912 	bl	8020a48 <__aeabi_d2iz>
 8024824:	4606      	mov	r6, r0
 8024826:	f7fb fdf5 	bl	8020414 <__aeabi_i2d>
 802482a:	3630      	adds	r6, #48	; 0x30
 802482c:	4602      	mov	r2, r0
 802482e:	460b      	mov	r3, r1
 8024830:	4640      	mov	r0, r8
 8024832:	4649      	mov	r1, r9
 8024834:	f7fb fca0 	bl	8020178 <__aeabi_dsub>
 8024838:	f805 6b01 	strb.w	r6, [r5], #1
 802483c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802483e:	429d      	cmp	r5, r3
 8024840:	4680      	mov	r8, r0
 8024842:	4689      	mov	r9, r1
 8024844:	f04f 0200 	mov.w	r2, #0
 8024848:	d124      	bne.n	8024894 <_dtoa_r+0x60c>
 802484a:	4b1b      	ldr	r3, [pc, #108]	; (80248b8 <_dtoa_r+0x630>)
 802484c:	4650      	mov	r0, sl
 802484e:	4659      	mov	r1, fp
 8024850:	f7fb fc94 	bl	802017c <__adddf3>
 8024854:	4602      	mov	r2, r0
 8024856:	460b      	mov	r3, r1
 8024858:	4640      	mov	r0, r8
 802485a:	4649      	mov	r1, r9
 802485c:	f7fc f8d4 	bl	8020a08 <__aeabi_dcmpgt>
 8024860:	2800      	cmp	r0, #0
 8024862:	d173      	bne.n	802494c <_dtoa_r+0x6c4>
 8024864:	4652      	mov	r2, sl
 8024866:	465b      	mov	r3, fp
 8024868:	4913      	ldr	r1, [pc, #76]	; (80248b8 <_dtoa_r+0x630>)
 802486a:	2000      	movs	r0, #0
 802486c:	f7fb fc84 	bl	8020178 <__aeabi_dsub>
 8024870:	4602      	mov	r2, r0
 8024872:	460b      	mov	r3, r1
 8024874:	4640      	mov	r0, r8
 8024876:	4649      	mov	r1, r9
 8024878:	f7fc f8a8 	bl	80209cc <__aeabi_dcmplt>
 802487c:	2800      	cmp	r0, #0
 802487e:	f43f af35 	beq.w	80246ec <_dtoa_r+0x464>
 8024882:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024884:	1e6b      	subs	r3, r5, #1
 8024886:	930f      	str	r3, [sp, #60]	; 0x3c
 8024888:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802488c:	2b30      	cmp	r3, #48	; 0x30
 802488e:	d0f8      	beq.n	8024882 <_dtoa_r+0x5fa>
 8024890:	9700      	str	r7, [sp, #0]
 8024892:	e049      	b.n	8024928 <_dtoa_r+0x6a0>
 8024894:	4b05      	ldr	r3, [pc, #20]	; (80248ac <_dtoa_r+0x624>)
 8024896:	f7fb fe27 	bl	80204e8 <__aeabi_dmul>
 802489a:	4680      	mov	r8, r0
 802489c:	4689      	mov	r9, r1
 802489e:	e7bd      	b.n	802481c <_dtoa_r+0x594>
 80248a0:	08026628 	.word	0x08026628
 80248a4:	08026600 	.word	0x08026600
 80248a8:	3ff00000 	.word	0x3ff00000
 80248ac:	40240000 	.word	0x40240000
 80248b0:	401c0000 	.word	0x401c0000
 80248b4:	40140000 	.word	0x40140000
 80248b8:	3fe00000 	.word	0x3fe00000
 80248bc:	9d01      	ldr	r5, [sp, #4]
 80248be:	4656      	mov	r6, sl
 80248c0:	465f      	mov	r7, fp
 80248c2:	4642      	mov	r2, r8
 80248c4:	464b      	mov	r3, r9
 80248c6:	4630      	mov	r0, r6
 80248c8:	4639      	mov	r1, r7
 80248ca:	f7fb ff37 	bl	802073c <__aeabi_ddiv>
 80248ce:	f7fc f8bb 	bl	8020a48 <__aeabi_d2iz>
 80248d2:	4682      	mov	sl, r0
 80248d4:	f7fb fd9e 	bl	8020414 <__aeabi_i2d>
 80248d8:	4642      	mov	r2, r8
 80248da:	464b      	mov	r3, r9
 80248dc:	f7fb fe04 	bl	80204e8 <__aeabi_dmul>
 80248e0:	4602      	mov	r2, r0
 80248e2:	460b      	mov	r3, r1
 80248e4:	4630      	mov	r0, r6
 80248e6:	4639      	mov	r1, r7
 80248e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80248ec:	f7fb fc44 	bl	8020178 <__aeabi_dsub>
 80248f0:	f805 6b01 	strb.w	r6, [r5], #1
 80248f4:	9e01      	ldr	r6, [sp, #4]
 80248f6:	9f03      	ldr	r7, [sp, #12]
 80248f8:	1bae      	subs	r6, r5, r6
 80248fa:	42b7      	cmp	r7, r6
 80248fc:	4602      	mov	r2, r0
 80248fe:	460b      	mov	r3, r1
 8024900:	d135      	bne.n	802496e <_dtoa_r+0x6e6>
 8024902:	f7fb fc3b 	bl	802017c <__adddf3>
 8024906:	4642      	mov	r2, r8
 8024908:	464b      	mov	r3, r9
 802490a:	4606      	mov	r6, r0
 802490c:	460f      	mov	r7, r1
 802490e:	f7fc f87b 	bl	8020a08 <__aeabi_dcmpgt>
 8024912:	b9d0      	cbnz	r0, 802494a <_dtoa_r+0x6c2>
 8024914:	4642      	mov	r2, r8
 8024916:	464b      	mov	r3, r9
 8024918:	4630      	mov	r0, r6
 802491a:	4639      	mov	r1, r7
 802491c:	f7fc f84c 	bl	80209b8 <__aeabi_dcmpeq>
 8024920:	b110      	cbz	r0, 8024928 <_dtoa_r+0x6a0>
 8024922:	f01a 0f01 	tst.w	sl, #1
 8024926:	d110      	bne.n	802494a <_dtoa_r+0x6c2>
 8024928:	4620      	mov	r0, r4
 802492a:	ee18 1a10 	vmov	r1, s16
 802492e:	f000 fae5 	bl	8024efc <_Bfree>
 8024932:	2300      	movs	r3, #0
 8024934:	9800      	ldr	r0, [sp, #0]
 8024936:	702b      	strb	r3, [r5, #0]
 8024938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802493a:	3001      	adds	r0, #1
 802493c:	6018      	str	r0, [r3, #0]
 802493e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024940:	2b00      	cmp	r3, #0
 8024942:	f43f acf1 	beq.w	8024328 <_dtoa_r+0xa0>
 8024946:	601d      	str	r5, [r3, #0]
 8024948:	e4ee      	b.n	8024328 <_dtoa_r+0xa0>
 802494a:	9f00      	ldr	r7, [sp, #0]
 802494c:	462b      	mov	r3, r5
 802494e:	461d      	mov	r5, r3
 8024950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024954:	2a39      	cmp	r2, #57	; 0x39
 8024956:	d106      	bne.n	8024966 <_dtoa_r+0x6de>
 8024958:	9a01      	ldr	r2, [sp, #4]
 802495a:	429a      	cmp	r2, r3
 802495c:	d1f7      	bne.n	802494e <_dtoa_r+0x6c6>
 802495e:	9901      	ldr	r1, [sp, #4]
 8024960:	2230      	movs	r2, #48	; 0x30
 8024962:	3701      	adds	r7, #1
 8024964:	700a      	strb	r2, [r1, #0]
 8024966:	781a      	ldrb	r2, [r3, #0]
 8024968:	3201      	adds	r2, #1
 802496a:	701a      	strb	r2, [r3, #0]
 802496c:	e790      	b.n	8024890 <_dtoa_r+0x608>
 802496e:	4ba6      	ldr	r3, [pc, #664]	; (8024c08 <_dtoa_r+0x980>)
 8024970:	2200      	movs	r2, #0
 8024972:	f7fb fdb9 	bl	80204e8 <__aeabi_dmul>
 8024976:	2200      	movs	r2, #0
 8024978:	2300      	movs	r3, #0
 802497a:	4606      	mov	r6, r0
 802497c:	460f      	mov	r7, r1
 802497e:	f7fc f81b 	bl	80209b8 <__aeabi_dcmpeq>
 8024982:	2800      	cmp	r0, #0
 8024984:	d09d      	beq.n	80248c2 <_dtoa_r+0x63a>
 8024986:	e7cf      	b.n	8024928 <_dtoa_r+0x6a0>
 8024988:	9a08      	ldr	r2, [sp, #32]
 802498a:	2a00      	cmp	r2, #0
 802498c:	f000 80d7 	beq.w	8024b3e <_dtoa_r+0x8b6>
 8024990:	9a06      	ldr	r2, [sp, #24]
 8024992:	2a01      	cmp	r2, #1
 8024994:	f300 80ba 	bgt.w	8024b0c <_dtoa_r+0x884>
 8024998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802499a:	2a00      	cmp	r2, #0
 802499c:	f000 80b2 	beq.w	8024b04 <_dtoa_r+0x87c>
 80249a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80249a4:	9e07      	ldr	r6, [sp, #28]
 80249a6:	9d04      	ldr	r5, [sp, #16]
 80249a8:	9a04      	ldr	r2, [sp, #16]
 80249aa:	441a      	add	r2, r3
 80249ac:	9204      	str	r2, [sp, #16]
 80249ae:	9a05      	ldr	r2, [sp, #20]
 80249b0:	2101      	movs	r1, #1
 80249b2:	441a      	add	r2, r3
 80249b4:	4620      	mov	r0, r4
 80249b6:	9205      	str	r2, [sp, #20]
 80249b8:	f000 fb58 	bl	802506c <__i2b>
 80249bc:	4607      	mov	r7, r0
 80249be:	2d00      	cmp	r5, #0
 80249c0:	dd0c      	ble.n	80249dc <_dtoa_r+0x754>
 80249c2:	9b05      	ldr	r3, [sp, #20]
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	dd09      	ble.n	80249dc <_dtoa_r+0x754>
 80249c8:	42ab      	cmp	r3, r5
 80249ca:	9a04      	ldr	r2, [sp, #16]
 80249cc:	bfa8      	it	ge
 80249ce:	462b      	movge	r3, r5
 80249d0:	1ad2      	subs	r2, r2, r3
 80249d2:	9204      	str	r2, [sp, #16]
 80249d4:	9a05      	ldr	r2, [sp, #20]
 80249d6:	1aed      	subs	r5, r5, r3
 80249d8:	1ad3      	subs	r3, r2, r3
 80249da:	9305      	str	r3, [sp, #20]
 80249dc:	9b07      	ldr	r3, [sp, #28]
 80249de:	b31b      	cbz	r3, 8024a28 <_dtoa_r+0x7a0>
 80249e0:	9b08      	ldr	r3, [sp, #32]
 80249e2:	2b00      	cmp	r3, #0
 80249e4:	f000 80af 	beq.w	8024b46 <_dtoa_r+0x8be>
 80249e8:	2e00      	cmp	r6, #0
 80249ea:	dd13      	ble.n	8024a14 <_dtoa_r+0x78c>
 80249ec:	4639      	mov	r1, r7
 80249ee:	4632      	mov	r2, r6
 80249f0:	4620      	mov	r0, r4
 80249f2:	f000 fbfb 	bl	80251ec <__pow5mult>
 80249f6:	ee18 2a10 	vmov	r2, s16
 80249fa:	4601      	mov	r1, r0
 80249fc:	4607      	mov	r7, r0
 80249fe:	4620      	mov	r0, r4
 8024a00:	f000 fb4a 	bl	8025098 <__multiply>
 8024a04:	ee18 1a10 	vmov	r1, s16
 8024a08:	4680      	mov	r8, r0
 8024a0a:	4620      	mov	r0, r4
 8024a0c:	f000 fa76 	bl	8024efc <_Bfree>
 8024a10:	ee08 8a10 	vmov	s16, r8
 8024a14:	9b07      	ldr	r3, [sp, #28]
 8024a16:	1b9a      	subs	r2, r3, r6
 8024a18:	d006      	beq.n	8024a28 <_dtoa_r+0x7a0>
 8024a1a:	ee18 1a10 	vmov	r1, s16
 8024a1e:	4620      	mov	r0, r4
 8024a20:	f000 fbe4 	bl	80251ec <__pow5mult>
 8024a24:	ee08 0a10 	vmov	s16, r0
 8024a28:	2101      	movs	r1, #1
 8024a2a:	4620      	mov	r0, r4
 8024a2c:	f000 fb1e 	bl	802506c <__i2b>
 8024a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a32:	2b00      	cmp	r3, #0
 8024a34:	4606      	mov	r6, r0
 8024a36:	f340 8088 	ble.w	8024b4a <_dtoa_r+0x8c2>
 8024a3a:	461a      	mov	r2, r3
 8024a3c:	4601      	mov	r1, r0
 8024a3e:	4620      	mov	r0, r4
 8024a40:	f000 fbd4 	bl	80251ec <__pow5mult>
 8024a44:	9b06      	ldr	r3, [sp, #24]
 8024a46:	2b01      	cmp	r3, #1
 8024a48:	4606      	mov	r6, r0
 8024a4a:	f340 8081 	ble.w	8024b50 <_dtoa_r+0x8c8>
 8024a4e:	f04f 0800 	mov.w	r8, #0
 8024a52:	6933      	ldr	r3, [r6, #16]
 8024a54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8024a58:	6918      	ldr	r0, [r3, #16]
 8024a5a:	f000 fab7 	bl	8024fcc <__hi0bits>
 8024a5e:	f1c0 0020 	rsb	r0, r0, #32
 8024a62:	9b05      	ldr	r3, [sp, #20]
 8024a64:	4418      	add	r0, r3
 8024a66:	f010 001f 	ands.w	r0, r0, #31
 8024a6a:	f000 8092 	beq.w	8024b92 <_dtoa_r+0x90a>
 8024a6e:	f1c0 0320 	rsb	r3, r0, #32
 8024a72:	2b04      	cmp	r3, #4
 8024a74:	f340 808a 	ble.w	8024b8c <_dtoa_r+0x904>
 8024a78:	f1c0 001c 	rsb	r0, r0, #28
 8024a7c:	9b04      	ldr	r3, [sp, #16]
 8024a7e:	4403      	add	r3, r0
 8024a80:	9304      	str	r3, [sp, #16]
 8024a82:	9b05      	ldr	r3, [sp, #20]
 8024a84:	4403      	add	r3, r0
 8024a86:	4405      	add	r5, r0
 8024a88:	9305      	str	r3, [sp, #20]
 8024a8a:	9b04      	ldr	r3, [sp, #16]
 8024a8c:	2b00      	cmp	r3, #0
 8024a8e:	dd07      	ble.n	8024aa0 <_dtoa_r+0x818>
 8024a90:	ee18 1a10 	vmov	r1, s16
 8024a94:	461a      	mov	r2, r3
 8024a96:	4620      	mov	r0, r4
 8024a98:	f000 fc02 	bl	80252a0 <__lshift>
 8024a9c:	ee08 0a10 	vmov	s16, r0
 8024aa0:	9b05      	ldr	r3, [sp, #20]
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	dd05      	ble.n	8024ab2 <_dtoa_r+0x82a>
 8024aa6:	4631      	mov	r1, r6
 8024aa8:	461a      	mov	r2, r3
 8024aaa:	4620      	mov	r0, r4
 8024aac:	f000 fbf8 	bl	80252a0 <__lshift>
 8024ab0:	4606      	mov	r6, r0
 8024ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ab4:	2b00      	cmp	r3, #0
 8024ab6:	d06e      	beq.n	8024b96 <_dtoa_r+0x90e>
 8024ab8:	ee18 0a10 	vmov	r0, s16
 8024abc:	4631      	mov	r1, r6
 8024abe:	f000 fc5f 	bl	8025380 <__mcmp>
 8024ac2:	2800      	cmp	r0, #0
 8024ac4:	da67      	bge.n	8024b96 <_dtoa_r+0x90e>
 8024ac6:	9b00      	ldr	r3, [sp, #0]
 8024ac8:	3b01      	subs	r3, #1
 8024aca:	ee18 1a10 	vmov	r1, s16
 8024ace:	9300      	str	r3, [sp, #0]
 8024ad0:	220a      	movs	r2, #10
 8024ad2:	2300      	movs	r3, #0
 8024ad4:	4620      	mov	r0, r4
 8024ad6:	f000 fa33 	bl	8024f40 <__multadd>
 8024ada:	9b08      	ldr	r3, [sp, #32]
 8024adc:	ee08 0a10 	vmov	s16, r0
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	f000 81b1 	beq.w	8024e48 <_dtoa_r+0xbc0>
 8024ae6:	2300      	movs	r3, #0
 8024ae8:	4639      	mov	r1, r7
 8024aea:	220a      	movs	r2, #10
 8024aec:	4620      	mov	r0, r4
 8024aee:	f000 fa27 	bl	8024f40 <__multadd>
 8024af2:	9b02      	ldr	r3, [sp, #8]
 8024af4:	2b00      	cmp	r3, #0
 8024af6:	4607      	mov	r7, r0
 8024af8:	f300 808e 	bgt.w	8024c18 <_dtoa_r+0x990>
 8024afc:	9b06      	ldr	r3, [sp, #24]
 8024afe:	2b02      	cmp	r3, #2
 8024b00:	dc51      	bgt.n	8024ba6 <_dtoa_r+0x91e>
 8024b02:	e089      	b.n	8024c18 <_dtoa_r+0x990>
 8024b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8024b0a:	e74b      	b.n	80249a4 <_dtoa_r+0x71c>
 8024b0c:	9b03      	ldr	r3, [sp, #12]
 8024b0e:	1e5e      	subs	r6, r3, #1
 8024b10:	9b07      	ldr	r3, [sp, #28]
 8024b12:	42b3      	cmp	r3, r6
 8024b14:	bfbf      	itttt	lt
 8024b16:	9b07      	ldrlt	r3, [sp, #28]
 8024b18:	9607      	strlt	r6, [sp, #28]
 8024b1a:	1af2      	sublt	r2, r6, r3
 8024b1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8024b1e:	bfb6      	itet	lt
 8024b20:	189b      	addlt	r3, r3, r2
 8024b22:	1b9e      	subge	r6, r3, r6
 8024b24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8024b26:	9b03      	ldr	r3, [sp, #12]
 8024b28:	bfb8      	it	lt
 8024b2a:	2600      	movlt	r6, #0
 8024b2c:	2b00      	cmp	r3, #0
 8024b2e:	bfb7      	itett	lt
 8024b30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8024b34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8024b38:	1a9d      	sublt	r5, r3, r2
 8024b3a:	2300      	movlt	r3, #0
 8024b3c:	e734      	b.n	80249a8 <_dtoa_r+0x720>
 8024b3e:	9e07      	ldr	r6, [sp, #28]
 8024b40:	9d04      	ldr	r5, [sp, #16]
 8024b42:	9f08      	ldr	r7, [sp, #32]
 8024b44:	e73b      	b.n	80249be <_dtoa_r+0x736>
 8024b46:	9a07      	ldr	r2, [sp, #28]
 8024b48:	e767      	b.n	8024a1a <_dtoa_r+0x792>
 8024b4a:	9b06      	ldr	r3, [sp, #24]
 8024b4c:	2b01      	cmp	r3, #1
 8024b4e:	dc18      	bgt.n	8024b82 <_dtoa_r+0x8fa>
 8024b50:	f1ba 0f00 	cmp.w	sl, #0
 8024b54:	d115      	bne.n	8024b82 <_dtoa_r+0x8fa>
 8024b56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024b5a:	b993      	cbnz	r3, 8024b82 <_dtoa_r+0x8fa>
 8024b5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024b60:	0d1b      	lsrs	r3, r3, #20
 8024b62:	051b      	lsls	r3, r3, #20
 8024b64:	b183      	cbz	r3, 8024b88 <_dtoa_r+0x900>
 8024b66:	9b04      	ldr	r3, [sp, #16]
 8024b68:	3301      	adds	r3, #1
 8024b6a:	9304      	str	r3, [sp, #16]
 8024b6c:	9b05      	ldr	r3, [sp, #20]
 8024b6e:	3301      	adds	r3, #1
 8024b70:	9305      	str	r3, [sp, #20]
 8024b72:	f04f 0801 	mov.w	r8, #1
 8024b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b78:	2b00      	cmp	r3, #0
 8024b7a:	f47f af6a 	bne.w	8024a52 <_dtoa_r+0x7ca>
 8024b7e:	2001      	movs	r0, #1
 8024b80:	e76f      	b.n	8024a62 <_dtoa_r+0x7da>
 8024b82:	f04f 0800 	mov.w	r8, #0
 8024b86:	e7f6      	b.n	8024b76 <_dtoa_r+0x8ee>
 8024b88:	4698      	mov	r8, r3
 8024b8a:	e7f4      	b.n	8024b76 <_dtoa_r+0x8ee>
 8024b8c:	f43f af7d 	beq.w	8024a8a <_dtoa_r+0x802>
 8024b90:	4618      	mov	r0, r3
 8024b92:	301c      	adds	r0, #28
 8024b94:	e772      	b.n	8024a7c <_dtoa_r+0x7f4>
 8024b96:	9b03      	ldr	r3, [sp, #12]
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	dc37      	bgt.n	8024c0c <_dtoa_r+0x984>
 8024b9c:	9b06      	ldr	r3, [sp, #24]
 8024b9e:	2b02      	cmp	r3, #2
 8024ba0:	dd34      	ble.n	8024c0c <_dtoa_r+0x984>
 8024ba2:	9b03      	ldr	r3, [sp, #12]
 8024ba4:	9302      	str	r3, [sp, #8]
 8024ba6:	9b02      	ldr	r3, [sp, #8]
 8024ba8:	b96b      	cbnz	r3, 8024bc6 <_dtoa_r+0x93e>
 8024baa:	4631      	mov	r1, r6
 8024bac:	2205      	movs	r2, #5
 8024bae:	4620      	mov	r0, r4
 8024bb0:	f000 f9c6 	bl	8024f40 <__multadd>
 8024bb4:	4601      	mov	r1, r0
 8024bb6:	4606      	mov	r6, r0
 8024bb8:	ee18 0a10 	vmov	r0, s16
 8024bbc:	f000 fbe0 	bl	8025380 <__mcmp>
 8024bc0:	2800      	cmp	r0, #0
 8024bc2:	f73f adbb 	bgt.w	802473c <_dtoa_r+0x4b4>
 8024bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bc8:	9d01      	ldr	r5, [sp, #4]
 8024bca:	43db      	mvns	r3, r3
 8024bcc:	9300      	str	r3, [sp, #0]
 8024bce:	f04f 0800 	mov.w	r8, #0
 8024bd2:	4631      	mov	r1, r6
 8024bd4:	4620      	mov	r0, r4
 8024bd6:	f000 f991 	bl	8024efc <_Bfree>
 8024bda:	2f00      	cmp	r7, #0
 8024bdc:	f43f aea4 	beq.w	8024928 <_dtoa_r+0x6a0>
 8024be0:	f1b8 0f00 	cmp.w	r8, #0
 8024be4:	d005      	beq.n	8024bf2 <_dtoa_r+0x96a>
 8024be6:	45b8      	cmp	r8, r7
 8024be8:	d003      	beq.n	8024bf2 <_dtoa_r+0x96a>
 8024bea:	4641      	mov	r1, r8
 8024bec:	4620      	mov	r0, r4
 8024bee:	f000 f985 	bl	8024efc <_Bfree>
 8024bf2:	4639      	mov	r1, r7
 8024bf4:	4620      	mov	r0, r4
 8024bf6:	f000 f981 	bl	8024efc <_Bfree>
 8024bfa:	e695      	b.n	8024928 <_dtoa_r+0x6a0>
 8024bfc:	2600      	movs	r6, #0
 8024bfe:	4637      	mov	r7, r6
 8024c00:	e7e1      	b.n	8024bc6 <_dtoa_r+0x93e>
 8024c02:	9700      	str	r7, [sp, #0]
 8024c04:	4637      	mov	r7, r6
 8024c06:	e599      	b.n	802473c <_dtoa_r+0x4b4>
 8024c08:	40240000 	.word	0x40240000
 8024c0c:	9b08      	ldr	r3, [sp, #32]
 8024c0e:	2b00      	cmp	r3, #0
 8024c10:	f000 80ca 	beq.w	8024da8 <_dtoa_r+0xb20>
 8024c14:	9b03      	ldr	r3, [sp, #12]
 8024c16:	9302      	str	r3, [sp, #8]
 8024c18:	2d00      	cmp	r5, #0
 8024c1a:	dd05      	ble.n	8024c28 <_dtoa_r+0x9a0>
 8024c1c:	4639      	mov	r1, r7
 8024c1e:	462a      	mov	r2, r5
 8024c20:	4620      	mov	r0, r4
 8024c22:	f000 fb3d 	bl	80252a0 <__lshift>
 8024c26:	4607      	mov	r7, r0
 8024c28:	f1b8 0f00 	cmp.w	r8, #0
 8024c2c:	d05b      	beq.n	8024ce6 <_dtoa_r+0xa5e>
 8024c2e:	6879      	ldr	r1, [r7, #4]
 8024c30:	4620      	mov	r0, r4
 8024c32:	f000 f923 	bl	8024e7c <_Balloc>
 8024c36:	4605      	mov	r5, r0
 8024c38:	b928      	cbnz	r0, 8024c46 <_dtoa_r+0x9be>
 8024c3a:	4b87      	ldr	r3, [pc, #540]	; (8024e58 <_dtoa_r+0xbd0>)
 8024c3c:	4602      	mov	r2, r0
 8024c3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8024c42:	f7ff bb3b 	b.w	80242bc <_dtoa_r+0x34>
 8024c46:	693a      	ldr	r2, [r7, #16]
 8024c48:	3202      	adds	r2, #2
 8024c4a:	0092      	lsls	r2, r2, #2
 8024c4c:	f107 010c 	add.w	r1, r7, #12
 8024c50:	300c      	adds	r0, #12
 8024c52:	f7fe fe0b 	bl	802386c <memcpy>
 8024c56:	2201      	movs	r2, #1
 8024c58:	4629      	mov	r1, r5
 8024c5a:	4620      	mov	r0, r4
 8024c5c:	f000 fb20 	bl	80252a0 <__lshift>
 8024c60:	9b01      	ldr	r3, [sp, #4]
 8024c62:	f103 0901 	add.w	r9, r3, #1
 8024c66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8024c6a:	4413      	add	r3, r2
 8024c6c:	9305      	str	r3, [sp, #20]
 8024c6e:	f00a 0301 	and.w	r3, sl, #1
 8024c72:	46b8      	mov	r8, r7
 8024c74:	9304      	str	r3, [sp, #16]
 8024c76:	4607      	mov	r7, r0
 8024c78:	4631      	mov	r1, r6
 8024c7a:	ee18 0a10 	vmov	r0, s16
 8024c7e:	f7ff fa75 	bl	802416c <quorem>
 8024c82:	4641      	mov	r1, r8
 8024c84:	9002      	str	r0, [sp, #8]
 8024c86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8024c8a:	ee18 0a10 	vmov	r0, s16
 8024c8e:	f000 fb77 	bl	8025380 <__mcmp>
 8024c92:	463a      	mov	r2, r7
 8024c94:	9003      	str	r0, [sp, #12]
 8024c96:	4631      	mov	r1, r6
 8024c98:	4620      	mov	r0, r4
 8024c9a:	f000 fb8d 	bl	80253b8 <__mdiff>
 8024c9e:	68c2      	ldr	r2, [r0, #12]
 8024ca0:	f109 3bff 	add.w	fp, r9, #4294967295
 8024ca4:	4605      	mov	r5, r0
 8024ca6:	bb02      	cbnz	r2, 8024cea <_dtoa_r+0xa62>
 8024ca8:	4601      	mov	r1, r0
 8024caa:	ee18 0a10 	vmov	r0, s16
 8024cae:	f000 fb67 	bl	8025380 <__mcmp>
 8024cb2:	4602      	mov	r2, r0
 8024cb4:	4629      	mov	r1, r5
 8024cb6:	4620      	mov	r0, r4
 8024cb8:	9207      	str	r2, [sp, #28]
 8024cba:	f000 f91f 	bl	8024efc <_Bfree>
 8024cbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8024cc2:	ea43 0102 	orr.w	r1, r3, r2
 8024cc6:	9b04      	ldr	r3, [sp, #16]
 8024cc8:	430b      	orrs	r3, r1
 8024cca:	464d      	mov	r5, r9
 8024ccc:	d10f      	bne.n	8024cee <_dtoa_r+0xa66>
 8024cce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8024cd2:	d02a      	beq.n	8024d2a <_dtoa_r+0xaa2>
 8024cd4:	9b03      	ldr	r3, [sp, #12]
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	dd02      	ble.n	8024ce0 <_dtoa_r+0xa58>
 8024cda:	9b02      	ldr	r3, [sp, #8]
 8024cdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8024ce0:	f88b a000 	strb.w	sl, [fp]
 8024ce4:	e775      	b.n	8024bd2 <_dtoa_r+0x94a>
 8024ce6:	4638      	mov	r0, r7
 8024ce8:	e7ba      	b.n	8024c60 <_dtoa_r+0x9d8>
 8024cea:	2201      	movs	r2, #1
 8024cec:	e7e2      	b.n	8024cb4 <_dtoa_r+0xa2c>
 8024cee:	9b03      	ldr	r3, [sp, #12]
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	db04      	blt.n	8024cfe <_dtoa_r+0xa76>
 8024cf4:	9906      	ldr	r1, [sp, #24]
 8024cf6:	430b      	orrs	r3, r1
 8024cf8:	9904      	ldr	r1, [sp, #16]
 8024cfa:	430b      	orrs	r3, r1
 8024cfc:	d122      	bne.n	8024d44 <_dtoa_r+0xabc>
 8024cfe:	2a00      	cmp	r2, #0
 8024d00:	ddee      	ble.n	8024ce0 <_dtoa_r+0xa58>
 8024d02:	ee18 1a10 	vmov	r1, s16
 8024d06:	2201      	movs	r2, #1
 8024d08:	4620      	mov	r0, r4
 8024d0a:	f000 fac9 	bl	80252a0 <__lshift>
 8024d0e:	4631      	mov	r1, r6
 8024d10:	ee08 0a10 	vmov	s16, r0
 8024d14:	f000 fb34 	bl	8025380 <__mcmp>
 8024d18:	2800      	cmp	r0, #0
 8024d1a:	dc03      	bgt.n	8024d24 <_dtoa_r+0xa9c>
 8024d1c:	d1e0      	bne.n	8024ce0 <_dtoa_r+0xa58>
 8024d1e:	f01a 0f01 	tst.w	sl, #1
 8024d22:	d0dd      	beq.n	8024ce0 <_dtoa_r+0xa58>
 8024d24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8024d28:	d1d7      	bne.n	8024cda <_dtoa_r+0xa52>
 8024d2a:	2339      	movs	r3, #57	; 0x39
 8024d2c:	f88b 3000 	strb.w	r3, [fp]
 8024d30:	462b      	mov	r3, r5
 8024d32:	461d      	mov	r5, r3
 8024d34:	3b01      	subs	r3, #1
 8024d36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8024d3a:	2a39      	cmp	r2, #57	; 0x39
 8024d3c:	d071      	beq.n	8024e22 <_dtoa_r+0xb9a>
 8024d3e:	3201      	adds	r2, #1
 8024d40:	701a      	strb	r2, [r3, #0]
 8024d42:	e746      	b.n	8024bd2 <_dtoa_r+0x94a>
 8024d44:	2a00      	cmp	r2, #0
 8024d46:	dd07      	ble.n	8024d58 <_dtoa_r+0xad0>
 8024d48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8024d4c:	d0ed      	beq.n	8024d2a <_dtoa_r+0xaa2>
 8024d4e:	f10a 0301 	add.w	r3, sl, #1
 8024d52:	f88b 3000 	strb.w	r3, [fp]
 8024d56:	e73c      	b.n	8024bd2 <_dtoa_r+0x94a>
 8024d58:	9b05      	ldr	r3, [sp, #20]
 8024d5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8024d5e:	4599      	cmp	r9, r3
 8024d60:	d047      	beq.n	8024df2 <_dtoa_r+0xb6a>
 8024d62:	ee18 1a10 	vmov	r1, s16
 8024d66:	2300      	movs	r3, #0
 8024d68:	220a      	movs	r2, #10
 8024d6a:	4620      	mov	r0, r4
 8024d6c:	f000 f8e8 	bl	8024f40 <__multadd>
 8024d70:	45b8      	cmp	r8, r7
 8024d72:	ee08 0a10 	vmov	s16, r0
 8024d76:	f04f 0300 	mov.w	r3, #0
 8024d7a:	f04f 020a 	mov.w	r2, #10
 8024d7e:	4641      	mov	r1, r8
 8024d80:	4620      	mov	r0, r4
 8024d82:	d106      	bne.n	8024d92 <_dtoa_r+0xb0a>
 8024d84:	f000 f8dc 	bl	8024f40 <__multadd>
 8024d88:	4680      	mov	r8, r0
 8024d8a:	4607      	mov	r7, r0
 8024d8c:	f109 0901 	add.w	r9, r9, #1
 8024d90:	e772      	b.n	8024c78 <_dtoa_r+0x9f0>
 8024d92:	f000 f8d5 	bl	8024f40 <__multadd>
 8024d96:	4639      	mov	r1, r7
 8024d98:	4680      	mov	r8, r0
 8024d9a:	2300      	movs	r3, #0
 8024d9c:	220a      	movs	r2, #10
 8024d9e:	4620      	mov	r0, r4
 8024da0:	f000 f8ce 	bl	8024f40 <__multadd>
 8024da4:	4607      	mov	r7, r0
 8024da6:	e7f1      	b.n	8024d8c <_dtoa_r+0xb04>
 8024da8:	9b03      	ldr	r3, [sp, #12]
 8024daa:	9302      	str	r3, [sp, #8]
 8024dac:	9d01      	ldr	r5, [sp, #4]
 8024dae:	ee18 0a10 	vmov	r0, s16
 8024db2:	4631      	mov	r1, r6
 8024db4:	f7ff f9da 	bl	802416c <quorem>
 8024db8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8024dbc:	9b01      	ldr	r3, [sp, #4]
 8024dbe:	f805 ab01 	strb.w	sl, [r5], #1
 8024dc2:	1aea      	subs	r2, r5, r3
 8024dc4:	9b02      	ldr	r3, [sp, #8]
 8024dc6:	4293      	cmp	r3, r2
 8024dc8:	dd09      	ble.n	8024dde <_dtoa_r+0xb56>
 8024dca:	ee18 1a10 	vmov	r1, s16
 8024dce:	2300      	movs	r3, #0
 8024dd0:	220a      	movs	r2, #10
 8024dd2:	4620      	mov	r0, r4
 8024dd4:	f000 f8b4 	bl	8024f40 <__multadd>
 8024dd8:	ee08 0a10 	vmov	s16, r0
 8024ddc:	e7e7      	b.n	8024dae <_dtoa_r+0xb26>
 8024dde:	9b02      	ldr	r3, [sp, #8]
 8024de0:	2b00      	cmp	r3, #0
 8024de2:	bfc8      	it	gt
 8024de4:	461d      	movgt	r5, r3
 8024de6:	9b01      	ldr	r3, [sp, #4]
 8024de8:	bfd8      	it	le
 8024dea:	2501      	movle	r5, #1
 8024dec:	441d      	add	r5, r3
 8024dee:	f04f 0800 	mov.w	r8, #0
 8024df2:	ee18 1a10 	vmov	r1, s16
 8024df6:	2201      	movs	r2, #1
 8024df8:	4620      	mov	r0, r4
 8024dfa:	f000 fa51 	bl	80252a0 <__lshift>
 8024dfe:	4631      	mov	r1, r6
 8024e00:	ee08 0a10 	vmov	s16, r0
 8024e04:	f000 fabc 	bl	8025380 <__mcmp>
 8024e08:	2800      	cmp	r0, #0
 8024e0a:	dc91      	bgt.n	8024d30 <_dtoa_r+0xaa8>
 8024e0c:	d102      	bne.n	8024e14 <_dtoa_r+0xb8c>
 8024e0e:	f01a 0f01 	tst.w	sl, #1
 8024e12:	d18d      	bne.n	8024d30 <_dtoa_r+0xaa8>
 8024e14:	462b      	mov	r3, r5
 8024e16:	461d      	mov	r5, r3
 8024e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024e1c:	2a30      	cmp	r2, #48	; 0x30
 8024e1e:	d0fa      	beq.n	8024e16 <_dtoa_r+0xb8e>
 8024e20:	e6d7      	b.n	8024bd2 <_dtoa_r+0x94a>
 8024e22:	9a01      	ldr	r2, [sp, #4]
 8024e24:	429a      	cmp	r2, r3
 8024e26:	d184      	bne.n	8024d32 <_dtoa_r+0xaaa>
 8024e28:	9b00      	ldr	r3, [sp, #0]
 8024e2a:	3301      	adds	r3, #1
 8024e2c:	9300      	str	r3, [sp, #0]
 8024e2e:	2331      	movs	r3, #49	; 0x31
 8024e30:	7013      	strb	r3, [r2, #0]
 8024e32:	e6ce      	b.n	8024bd2 <_dtoa_r+0x94a>
 8024e34:	4b09      	ldr	r3, [pc, #36]	; (8024e5c <_dtoa_r+0xbd4>)
 8024e36:	f7ff ba95 	b.w	8024364 <_dtoa_r+0xdc>
 8024e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024e3c:	2b00      	cmp	r3, #0
 8024e3e:	f47f aa6e 	bne.w	802431e <_dtoa_r+0x96>
 8024e42:	4b07      	ldr	r3, [pc, #28]	; (8024e60 <_dtoa_r+0xbd8>)
 8024e44:	f7ff ba8e 	b.w	8024364 <_dtoa_r+0xdc>
 8024e48:	9b02      	ldr	r3, [sp, #8]
 8024e4a:	2b00      	cmp	r3, #0
 8024e4c:	dcae      	bgt.n	8024dac <_dtoa_r+0xb24>
 8024e4e:	9b06      	ldr	r3, [sp, #24]
 8024e50:	2b02      	cmp	r3, #2
 8024e52:	f73f aea8 	bgt.w	8024ba6 <_dtoa_r+0x91e>
 8024e56:	e7a9      	b.n	8024dac <_dtoa_r+0xb24>
 8024e58:	08026593 	.word	0x08026593
 8024e5c:	080264f0 	.word	0x080264f0
 8024e60:	08026514 	.word	0x08026514

08024e64 <_localeconv_r>:
 8024e64:	4800      	ldr	r0, [pc, #0]	; (8024e68 <_localeconv_r+0x4>)
 8024e66:	4770      	bx	lr
 8024e68:	20000160 	.word	0x20000160

08024e6c <malloc>:
 8024e6c:	4b02      	ldr	r3, [pc, #8]	; (8024e78 <malloc+0xc>)
 8024e6e:	4601      	mov	r1, r0
 8024e70:	6818      	ldr	r0, [r3, #0]
 8024e72:	f000 bc09 	b.w	8025688 <_malloc_r>
 8024e76:	bf00      	nop
 8024e78:	2000000c 	.word	0x2000000c

08024e7c <_Balloc>:
 8024e7c:	b570      	push	{r4, r5, r6, lr}
 8024e7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024e80:	4604      	mov	r4, r0
 8024e82:	460d      	mov	r5, r1
 8024e84:	b976      	cbnz	r6, 8024ea4 <_Balloc+0x28>
 8024e86:	2010      	movs	r0, #16
 8024e88:	f7ff fff0 	bl	8024e6c <malloc>
 8024e8c:	4602      	mov	r2, r0
 8024e8e:	6260      	str	r0, [r4, #36]	; 0x24
 8024e90:	b920      	cbnz	r0, 8024e9c <_Balloc+0x20>
 8024e92:	4b18      	ldr	r3, [pc, #96]	; (8024ef4 <_Balloc+0x78>)
 8024e94:	4818      	ldr	r0, [pc, #96]	; (8024ef8 <_Balloc+0x7c>)
 8024e96:	2166      	movs	r1, #102	; 0x66
 8024e98:	f000 fc7a 	bl	8025790 <__assert_func>
 8024e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024ea0:	6006      	str	r6, [r0, #0]
 8024ea2:	60c6      	str	r6, [r0, #12]
 8024ea4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8024ea6:	68f3      	ldr	r3, [r6, #12]
 8024ea8:	b183      	cbz	r3, 8024ecc <_Balloc+0x50>
 8024eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024eac:	68db      	ldr	r3, [r3, #12]
 8024eae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8024eb2:	b9b8      	cbnz	r0, 8024ee4 <_Balloc+0x68>
 8024eb4:	2101      	movs	r1, #1
 8024eb6:	fa01 f605 	lsl.w	r6, r1, r5
 8024eba:	1d72      	adds	r2, r6, #5
 8024ebc:	0092      	lsls	r2, r2, #2
 8024ebe:	4620      	mov	r0, r4
 8024ec0:	f000 fb60 	bl	8025584 <_calloc_r>
 8024ec4:	b160      	cbz	r0, 8024ee0 <_Balloc+0x64>
 8024ec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024eca:	e00e      	b.n	8024eea <_Balloc+0x6e>
 8024ecc:	2221      	movs	r2, #33	; 0x21
 8024ece:	2104      	movs	r1, #4
 8024ed0:	4620      	mov	r0, r4
 8024ed2:	f000 fb57 	bl	8025584 <_calloc_r>
 8024ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024ed8:	60f0      	str	r0, [r6, #12]
 8024eda:	68db      	ldr	r3, [r3, #12]
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	d1e4      	bne.n	8024eaa <_Balloc+0x2e>
 8024ee0:	2000      	movs	r0, #0
 8024ee2:	bd70      	pop	{r4, r5, r6, pc}
 8024ee4:	6802      	ldr	r2, [r0, #0]
 8024ee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024eea:	2300      	movs	r3, #0
 8024eec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024ef0:	e7f7      	b.n	8024ee2 <_Balloc+0x66>
 8024ef2:	bf00      	nop
 8024ef4:	08026521 	.word	0x08026521
 8024ef8:	080265a4 	.word	0x080265a4

08024efc <_Bfree>:
 8024efc:	b570      	push	{r4, r5, r6, lr}
 8024efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024f00:	4605      	mov	r5, r0
 8024f02:	460c      	mov	r4, r1
 8024f04:	b976      	cbnz	r6, 8024f24 <_Bfree+0x28>
 8024f06:	2010      	movs	r0, #16
 8024f08:	f7ff ffb0 	bl	8024e6c <malloc>
 8024f0c:	4602      	mov	r2, r0
 8024f0e:	6268      	str	r0, [r5, #36]	; 0x24
 8024f10:	b920      	cbnz	r0, 8024f1c <_Bfree+0x20>
 8024f12:	4b09      	ldr	r3, [pc, #36]	; (8024f38 <_Bfree+0x3c>)
 8024f14:	4809      	ldr	r0, [pc, #36]	; (8024f3c <_Bfree+0x40>)
 8024f16:	218a      	movs	r1, #138	; 0x8a
 8024f18:	f000 fc3a 	bl	8025790 <__assert_func>
 8024f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024f20:	6006      	str	r6, [r0, #0]
 8024f22:	60c6      	str	r6, [r0, #12]
 8024f24:	b13c      	cbz	r4, 8024f36 <_Bfree+0x3a>
 8024f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8024f28:	6862      	ldr	r2, [r4, #4]
 8024f2a:	68db      	ldr	r3, [r3, #12]
 8024f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024f30:	6021      	str	r1, [r4, #0]
 8024f32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8024f36:	bd70      	pop	{r4, r5, r6, pc}
 8024f38:	08026521 	.word	0x08026521
 8024f3c:	080265a4 	.word	0x080265a4

08024f40 <__multadd>:
 8024f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f44:	690d      	ldr	r5, [r1, #16]
 8024f46:	4607      	mov	r7, r0
 8024f48:	460c      	mov	r4, r1
 8024f4a:	461e      	mov	r6, r3
 8024f4c:	f101 0c14 	add.w	ip, r1, #20
 8024f50:	2000      	movs	r0, #0
 8024f52:	f8dc 3000 	ldr.w	r3, [ip]
 8024f56:	b299      	uxth	r1, r3
 8024f58:	fb02 6101 	mla	r1, r2, r1, r6
 8024f5c:	0c1e      	lsrs	r6, r3, #16
 8024f5e:	0c0b      	lsrs	r3, r1, #16
 8024f60:	fb02 3306 	mla	r3, r2, r6, r3
 8024f64:	b289      	uxth	r1, r1
 8024f66:	3001      	adds	r0, #1
 8024f68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024f6c:	4285      	cmp	r5, r0
 8024f6e:	f84c 1b04 	str.w	r1, [ip], #4
 8024f72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8024f76:	dcec      	bgt.n	8024f52 <__multadd+0x12>
 8024f78:	b30e      	cbz	r6, 8024fbe <__multadd+0x7e>
 8024f7a:	68a3      	ldr	r3, [r4, #8]
 8024f7c:	42ab      	cmp	r3, r5
 8024f7e:	dc19      	bgt.n	8024fb4 <__multadd+0x74>
 8024f80:	6861      	ldr	r1, [r4, #4]
 8024f82:	4638      	mov	r0, r7
 8024f84:	3101      	adds	r1, #1
 8024f86:	f7ff ff79 	bl	8024e7c <_Balloc>
 8024f8a:	4680      	mov	r8, r0
 8024f8c:	b928      	cbnz	r0, 8024f9a <__multadd+0x5a>
 8024f8e:	4602      	mov	r2, r0
 8024f90:	4b0c      	ldr	r3, [pc, #48]	; (8024fc4 <__multadd+0x84>)
 8024f92:	480d      	ldr	r0, [pc, #52]	; (8024fc8 <__multadd+0x88>)
 8024f94:	21b5      	movs	r1, #181	; 0xb5
 8024f96:	f000 fbfb 	bl	8025790 <__assert_func>
 8024f9a:	6922      	ldr	r2, [r4, #16]
 8024f9c:	3202      	adds	r2, #2
 8024f9e:	f104 010c 	add.w	r1, r4, #12
 8024fa2:	0092      	lsls	r2, r2, #2
 8024fa4:	300c      	adds	r0, #12
 8024fa6:	f7fe fc61 	bl	802386c <memcpy>
 8024faa:	4621      	mov	r1, r4
 8024fac:	4638      	mov	r0, r7
 8024fae:	f7ff ffa5 	bl	8024efc <_Bfree>
 8024fb2:	4644      	mov	r4, r8
 8024fb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024fb8:	3501      	adds	r5, #1
 8024fba:	615e      	str	r6, [r3, #20]
 8024fbc:	6125      	str	r5, [r4, #16]
 8024fbe:	4620      	mov	r0, r4
 8024fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024fc4:	08026593 	.word	0x08026593
 8024fc8:	080265a4 	.word	0x080265a4

08024fcc <__hi0bits>:
 8024fcc:	0c03      	lsrs	r3, r0, #16
 8024fce:	041b      	lsls	r3, r3, #16
 8024fd0:	b9d3      	cbnz	r3, 8025008 <__hi0bits+0x3c>
 8024fd2:	0400      	lsls	r0, r0, #16
 8024fd4:	2310      	movs	r3, #16
 8024fd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8024fda:	bf04      	itt	eq
 8024fdc:	0200      	lsleq	r0, r0, #8
 8024fde:	3308      	addeq	r3, #8
 8024fe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8024fe4:	bf04      	itt	eq
 8024fe6:	0100      	lsleq	r0, r0, #4
 8024fe8:	3304      	addeq	r3, #4
 8024fea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8024fee:	bf04      	itt	eq
 8024ff0:	0080      	lsleq	r0, r0, #2
 8024ff2:	3302      	addeq	r3, #2
 8024ff4:	2800      	cmp	r0, #0
 8024ff6:	db05      	blt.n	8025004 <__hi0bits+0x38>
 8024ff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8024ffc:	f103 0301 	add.w	r3, r3, #1
 8025000:	bf08      	it	eq
 8025002:	2320      	moveq	r3, #32
 8025004:	4618      	mov	r0, r3
 8025006:	4770      	bx	lr
 8025008:	2300      	movs	r3, #0
 802500a:	e7e4      	b.n	8024fd6 <__hi0bits+0xa>

0802500c <__lo0bits>:
 802500c:	6803      	ldr	r3, [r0, #0]
 802500e:	f013 0207 	ands.w	r2, r3, #7
 8025012:	4601      	mov	r1, r0
 8025014:	d00b      	beq.n	802502e <__lo0bits+0x22>
 8025016:	07da      	lsls	r2, r3, #31
 8025018:	d423      	bmi.n	8025062 <__lo0bits+0x56>
 802501a:	0798      	lsls	r0, r3, #30
 802501c:	bf49      	itett	mi
 802501e:	085b      	lsrmi	r3, r3, #1
 8025020:	089b      	lsrpl	r3, r3, #2
 8025022:	2001      	movmi	r0, #1
 8025024:	600b      	strmi	r3, [r1, #0]
 8025026:	bf5c      	itt	pl
 8025028:	600b      	strpl	r3, [r1, #0]
 802502a:	2002      	movpl	r0, #2
 802502c:	4770      	bx	lr
 802502e:	b298      	uxth	r0, r3
 8025030:	b9a8      	cbnz	r0, 802505e <__lo0bits+0x52>
 8025032:	0c1b      	lsrs	r3, r3, #16
 8025034:	2010      	movs	r0, #16
 8025036:	b2da      	uxtb	r2, r3
 8025038:	b90a      	cbnz	r2, 802503e <__lo0bits+0x32>
 802503a:	3008      	adds	r0, #8
 802503c:	0a1b      	lsrs	r3, r3, #8
 802503e:	071a      	lsls	r2, r3, #28
 8025040:	bf04      	itt	eq
 8025042:	091b      	lsreq	r3, r3, #4
 8025044:	3004      	addeq	r0, #4
 8025046:	079a      	lsls	r2, r3, #30
 8025048:	bf04      	itt	eq
 802504a:	089b      	lsreq	r3, r3, #2
 802504c:	3002      	addeq	r0, #2
 802504e:	07da      	lsls	r2, r3, #31
 8025050:	d403      	bmi.n	802505a <__lo0bits+0x4e>
 8025052:	085b      	lsrs	r3, r3, #1
 8025054:	f100 0001 	add.w	r0, r0, #1
 8025058:	d005      	beq.n	8025066 <__lo0bits+0x5a>
 802505a:	600b      	str	r3, [r1, #0]
 802505c:	4770      	bx	lr
 802505e:	4610      	mov	r0, r2
 8025060:	e7e9      	b.n	8025036 <__lo0bits+0x2a>
 8025062:	2000      	movs	r0, #0
 8025064:	4770      	bx	lr
 8025066:	2020      	movs	r0, #32
 8025068:	4770      	bx	lr
	...

0802506c <__i2b>:
 802506c:	b510      	push	{r4, lr}
 802506e:	460c      	mov	r4, r1
 8025070:	2101      	movs	r1, #1
 8025072:	f7ff ff03 	bl	8024e7c <_Balloc>
 8025076:	4602      	mov	r2, r0
 8025078:	b928      	cbnz	r0, 8025086 <__i2b+0x1a>
 802507a:	4b05      	ldr	r3, [pc, #20]	; (8025090 <__i2b+0x24>)
 802507c:	4805      	ldr	r0, [pc, #20]	; (8025094 <__i2b+0x28>)
 802507e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8025082:	f000 fb85 	bl	8025790 <__assert_func>
 8025086:	2301      	movs	r3, #1
 8025088:	6144      	str	r4, [r0, #20]
 802508a:	6103      	str	r3, [r0, #16]
 802508c:	bd10      	pop	{r4, pc}
 802508e:	bf00      	nop
 8025090:	08026593 	.word	0x08026593
 8025094:	080265a4 	.word	0x080265a4

08025098 <__multiply>:
 8025098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802509c:	4691      	mov	r9, r2
 802509e:	690a      	ldr	r2, [r1, #16]
 80250a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80250a4:	429a      	cmp	r2, r3
 80250a6:	bfb8      	it	lt
 80250a8:	460b      	movlt	r3, r1
 80250aa:	460c      	mov	r4, r1
 80250ac:	bfbc      	itt	lt
 80250ae:	464c      	movlt	r4, r9
 80250b0:	4699      	movlt	r9, r3
 80250b2:	6927      	ldr	r7, [r4, #16]
 80250b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80250b8:	68a3      	ldr	r3, [r4, #8]
 80250ba:	6861      	ldr	r1, [r4, #4]
 80250bc:	eb07 060a 	add.w	r6, r7, sl
 80250c0:	42b3      	cmp	r3, r6
 80250c2:	b085      	sub	sp, #20
 80250c4:	bfb8      	it	lt
 80250c6:	3101      	addlt	r1, #1
 80250c8:	f7ff fed8 	bl	8024e7c <_Balloc>
 80250cc:	b930      	cbnz	r0, 80250dc <__multiply+0x44>
 80250ce:	4602      	mov	r2, r0
 80250d0:	4b44      	ldr	r3, [pc, #272]	; (80251e4 <__multiply+0x14c>)
 80250d2:	4845      	ldr	r0, [pc, #276]	; (80251e8 <__multiply+0x150>)
 80250d4:	f240 115d 	movw	r1, #349	; 0x15d
 80250d8:	f000 fb5a 	bl	8025790 <__assert_func>
 80250dc:	f100 0514 	add.w	r5, r0, #20
 80250e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80250e4:	462b      	mov	r3, r5
 80250e6:	2200      	movs	r2, #0
 80250e8:	4543      	cmp	r3, r8
 80250ea:	d321      	bcc.n	8025130 <__multiply+0x98>
 80250ec:	f104 0314 	add.w	r3, r4, #20
 80250f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80250f4:	f109 0314 	add.w	r3, r9, #20
 80250f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80250fc:	9202      	str	r2, [sp, #8]
 80250fe:	1b3a      	subs	r2, r7, r4
 8025100:	3a15      	subs	r2, #21
 8025102:	f022 0203 	bic.w	r2, r2, #3
 8025106:	3204      	adds	r2, #4
 8025108:	f104 0115 	add.w	r1, r4, #21
 802510c:	428f      	cmp	r7, r1
 802510e:	bf38      	it	cc
 8025110:	2204      	movcc	r2, #4
 8025112:	9201      	str	r2, [sp, #4]
 8025114:	9a02      	ldr	r2, [sp, #8]
 8025116:	9303      	str	r3, [sp, #12]
 8025118:	429a      	cmp	r2, r3
 802511a:	d80c      	bhi.n	8025136 <__multiply+0x9e>
 802511c:	2e00      	cmp	r6, #0
 802511e:	dd03      	ble.n	8025128 <__multiply+0x90>
 8025120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025124:	2b00      	cmp	r3, #0
 8025126:	d05a      	beq.n	80251de <__multiply+0x146>
 8025128:	6106      	str	r6, [r0, #16]
 802512a:	b005      	add	sp, #20
 802512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025130:	f843 2b04 	str.w	r2, [r3], #4
 8025134:	e7d8      	b.n	80250e8 <__multiply+0x50>
 8025136:	f8b3 a000 	ldrh.w	sl, [r3]
 802513a:	f1ba 0f00 	cmp.w	sl, #0
 802513e:	d024      	beq.n	802518a <__multiply+0xf2>
 8025140:	f104 0e14 	add.w	lr, r4, #20
 8025144:	46a9      	mov	r9, r5
 8025146:	f04f 0c00 	mov.w	ip, #0
 802514a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802514e:	f8d9 1000 	ldr.w	r1, [r9]
 8025152:	fa1f fb82 	uxth.w	fp, r2
 8025156:	b289      	uxth	r1, r1
 8025158:	fb0a 110b 	mla	r1, sl, fp, r1
 802515c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8025160:	f8d9 2000 	ldr.w	r2, [r9]
 8025164:	4461      	add	r1, ip
 8025166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802516a:	fb0a c20b 	mla	r2, sl, fp, ip
 802516e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8025172:	b289      	uxth	r1, r1
 8025174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8025178:	4577      	cmp	r7, lr
 802517a:	f849 1b04 	str.w	r1, [r9], #4
 802517e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025182:	d8e2      	bhi.n	802514a <__multiply+0xb2>
 8025184:	9a01      	ldr	r2, [sp, #4]
 8025186:	f845 c002 	str.w	ip, [r5, r2]
 802518a:	9a03      	ldr	r2, [sp, #12]
 802518c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025190:	3304      	adds	r3, #4
 8025192:	f1b9 0f00 	cmp.w	r9, #0
 8025196:	d020      	beq.n	80251da <__multiply+0x142>
 8025198:	6829      	ldr	r1, [r5, #0]
 802519a:	f104 0c14 	add.w	ip, r4, #20
 802519e:	46ae      	mov	lr, r5
 80251a0:	f04f 0a00 	mov.w	sl, #0
 80251a4:	f8bc b000 	ldrh.w	fp, [ip]
 80251a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80251ac:	fb09 220b 	mla	r2, r9, fp, r2
 80251b0:	4492      	add	sl, r2
 80251b2:	b289      	uxth	r1, r1
 80251b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80251b8:	f84e 1b04 	str.w	r1, [lr], #4
 80251bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80251c0:	f8be 1000 	ldrh.w	r1, [lr]
 80251c4:	0c12      	lsrs	r2, r2, #16
 80251c6:	fb09 1102 	mla	r1, r9, r2, r1
 80251ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80251ce:	4567      	cmp	r7, ip
 80251d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80251d4:	d8e6      	bhi.n	80251a4 <__multiply+0x10c>
 80251d6:	9a01      	ldr	r2, [sp, #4]
 80251d8:	50a9      	str	r1, [r5, r2]
 80251da:	3504      	adds	r5, #4
 80251dc:	e79a      	b.n	8025114 <__multiply+0x7c>
 80251de:	3e01      	subs	r6, #1
 80251e0:	e79c      	b.n	802511c <__multiply+0x84>
 80251e2:	bf00      	nop
 80251e4:	08026593 	.word	0x08026593
 80251e8:	080265a4 	.word	0x080265a4

080251ec <__pow5mult>:
 80251ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80251f0:	4615      	mov	r5, r2
 80251f2:	f012 0203 	ands.w	r2, r2, #3
 80251f6:	4606      	mov	r6, r0
 80251f8:	460f      	mov	r7, r1
 80251fa:	d007      	beq.n	802520c <__pow5mult+0x20>
 80251fc:	4c25      	ldr	r4, [pc, #148]	; (8025294 <__pow5mult+0xa8>)
 80251fe:	3a01      	subs	r2, #1
 8025200:	2300      	movs	r3, #0
 8025202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025206:	f7ff fe9b 	bl	8024f40 <__multadd>
 802520a:	4607      	mov	r7, r0
 802520c:	10ad      	asrs	r5, r5, #2
 802520e:	d03d      	beq.n	802528c <__pow5mult+0xa0>
 8025210:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8025212:	b97c      	cbnz	r4, 8025234 <__pow5mult+0x48>
 8025214:	2010      	movs	r0, #16
 8025216:	f7ff fe29 	bl	8024e6c <malloc>
 802521a:	4602      	mov	r2, r0
 802521c:	6270      	str	r0, [r6, #36]	; 0x24
 802521e:	b928      	cbnz	r0, 802522c <__pow5mult+0x40>
 8025220:	4b1d      	ldr	r3, [pc, #116]	; (8025298 <__pow5mult+0xac>)
 8025222:	481e      	ldr	r0, [pc, #120]	; (802529c <__pow5mult+0xb0>)
 8025224:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8025228:	f000 fab2 	bl	8025790 <__assert_func>
 802522c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8025230:	6004      	str	r4, [r0, #0]
 8025232:	60c4      	str	r4, [r0, #12]
 8025234:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8025238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802523c:	b94c      	cbnz	r4, 8025252 <__pow5mult+0x66>
 802523e:	f240 2171 	movw	r1, #625	; 0x271
 8025242:	4630      	mov	r0, r6
 8025244:	f7ff ff12 	bl	802506c <__i2b>
 8025248:	2300      	movs	r3, #0
 802524a:	f8c8 0008 	str.w	r0, [r8, #8]
 802524e:	4604      	mov	r4, r0
 8025250:	6003      	str	r3, [r0, #0]
 8025252:	f04f 0900 	mov.w	r9, #0
 8025256:	07eb      	lsls	r3, r5, #31
 8025258:	d50a      	bpl.n	8025270 <__pow5mult+0x84>
 802525a:	4639      	mov	r1, r7
 802525c:	4622      	mov	r2, r4
 802525e:	4630      	mov	r0, r6
 8025260:	f7ff ff1a 	bl	8025098 <__multiply>
 8025264:	4639      	mov	r1, r7
 8025266:	4680      	mov	r8, r0
 8025268:	4630      	mov	r0, r6
 802526a:	f7ff fe47 	bl	8024efc <_Bfree>
 802526e:	4647      	mov	r7, r8
 8025270:	106d      	asrs	r5, r5, #1
 8025272:	d00b      	beq.n	802528c <__pow5mult+0xa0>
 8025274:	6820      	ldr	r0, [r4, #0]
 8025276:	b938      	cbnz	r0, 8025288 <__pow5mult+0x9c>
 8025278:	4622      	mov	r2, r4
 802527a:	4621      	mov	r1, r4
 802527c:	4630      	mov	r0, r6
 802527e:	f7ff ff0b 	bl	8025098 <__multiply>
 8025282:	6020      	str	r0, [r4, #0]
 8025284:	f8c0 9000 	str.w	r9, [r0]
 8025288:	4604      	mov	r4, r0
 802528a:	e7e4      	b.n	8025256 <__pow5mult+0x6a>
 802528c:	4638      	mov	r0, r7
 802528e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025292:	bf00      	nop
 8025294:	080266f0 	.word	0x080266f0
 8025298:	08026521 	.word	0x08026521
 802529c:	080265a4 	.word	0x080265a4

080252a0 <__lshift>:
 80252a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80252a4:	460c      	mov	r4, r1
 80252a6:	6849      	ldr	r1, [r1, #4]
 80252a8:	6923      	ldr	r3, [r4, #16]
 80252aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80252ae:	68a3      	ldr	r3, [r4, #8]
 80252b0:	4607      	mov	r7, r0
 80252b2:	4691      	mov	r9, r2
 80252b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80252b8:	f108 0601 	add.w	r6, r8, #1
 80252bc:	42b3      	cmp	r3, r6
 80252be:	db0b      	blt.n	80252d8 <__lshift+0x38>
 80252c0:	4638      	mov	r0, r7
 80252c2:	f7ff fddb 	bl	8024e7c <_Balloc>
 80252c6:	4605      	mov	r5, r0
 80252c8:	b948      	cbnz	r0, 80252de <__lshift+0x3e>
 80252ca:	4602      	mov	r2, r0
 80252cc:	4b2a      	ldr	r3, [pc, #168]	; (8025378 <__lshift+0xd8>)
 80252ce:	482b      	ldr	r0, [pc, #172]	; (802537c <__lshift+0xdc>)
 80252d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80252d4:	f000 fa5c 	bl	8025790 <__assert_func>
 80252d8:	3101      	adds	r1, #1
 80252da:	005b      	lsls	r3, r3, #1
 80252dc:	e7ee      	b.n	80252bc <__lshift+0x1c>
 80252de:	2300      	movs	r3, #0
 80252e0:	f100 0114 	add.w	r1, r0, #20
 80252e4:	f100 0210 	add.w	r2, r0, #16
 80252e8:	4618      	mov	r0, r3
 80252ea:	4553      	cmp	r3, sl
 80252ec:	db37      	blt.n	802535e <__lshift+0xbe>
 80252ee:	6920      	ldr	r0, [r4, #16]
 80252f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80252f4:	f104 0314 	add.w	r3, r4, #20
 80252f8:	f019 091f 	ands.w	r9, r9, #31
 80252fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8025300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8025304:	d02f      	beq.n	8025366 <__lshift+0xc6>
 8025306:	f1c9 0e20 	rsb	lr, r9, #32
 802530a:	468a      	mov	sl, r1
 802530c:	f04f 0c00 	mov.w	ip, #0
 8025310:	681a      	ldr	r2, [r3, #0]
 8025312:	fa02 f209 	lsl.w	r2, r2, r9
 8025316:	ea42 020c 	orr.w	r2, r2, ip
 802531a:	f84a 2b04 	str.w	r2, [sl], #4
 802531e:	f853 2b04 	ldr.w	r2, [r3], #4
 8025322:	4298      	cmp	r0, r3
 8025324:	fa22 fc0e 	lsr.w	ip, r2, lr
 8025328:	d8f2      	bhi.n	8025310 <__lshift+0x70>
 802532a:	1b03      	subs	r3, r0, r4
 802532c:	3b15      	subs	r3, #21
 802532e:	f023 0303 	bic.w	r3, r3, #3
 8025332:	3304      	adds	r3, #4
 8025334:	f104 0215 	add.w	r2, r4, #21
 8025338:	4290      	cmp	r0, r2
 802533a:	bf38      	it	cc
 802533c:	2304      	movcc	r3, #4
 802533e:	f841 c003 	str.w	ip, [r1, r3]
 8025342:	f1bc 0f00 	cmp.w	ip, #0
 8025346:	d001      	beq.n	802534c <__lshift+0xac>
 8025348:	f108 0602 	add.w	r6, r8, #2
 802534c:	3e01      	subs	r6, #1
 802534e:	4638      	mov	r0, r7
 8025350:	612e      	str	r6, [r5, #16]
 8025352:	4621      	mov	r1, r4
 8025354:	f7ff fdd2 	bl	8024efc <_Bfree>
 8025358:	4628      	mov	r0, r5
 802535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802535e:	f842 0f04 	str.w	r0, [r2, #4]!
 8025362:	3301      	adds	r3, #1
 8025364:	e7c1      	b.n	80252ea <__lshift+0x4a>
 8025366:	3904      	subs	r1, #4
 8025368:	f853 2b04 	ldr.w	r2, [r3], #4
 802536c:	f841 2f04 	str.w	r2, [r1, #4]!
 8025370:	4298      	cmp	r0, r3
 8025372:	d8f9      	bhi.n	8025368 <__lshift+0xc8>
 8025374:	e7ea      	b.n	802534c <__lshift+0xac>
 8025376:	bf00      	nop
 8025378:	08026593 	.word	0x08026593
 802537c:	080265a4 	.word	0x080265a4

08025380 <__mcmp>:
 8025380:	b530      	push	{r4, r5, lr}
 8025382:	6902      	ldr	r2, [r0, #16]
 8025384:	690c      	ldr	r4, [r1, #16]
 8025386:	1b12      	subs	r2, r2, r4
 8025388:	d10e      	bne.n	80253a8 <__mcmp+0x28>
 802538a:	f100 0314 	add.w	r3, r0, #20
 802538e:	3114      	adds	r1, #20
 8025390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8025394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8025398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802539c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80253a0:	42a5      	cmp	r5, r4
 80253a2:	d003      	beq.n	80253ac <__mcmp+0x2c>
 80253a4:	d305      	bcc.n	80253b2 <__mcmp+0x32>
 80253a6:	2201      	movs	r2, #1
 80253a8:	4610      	mov	r0, r2
 80253aa:	bd30      	pop	{r4, r5, pc}
 80253ac:	4283      	cmp	r3, r0
 80253ae:	d3f3      	bcc.n	8025398 <__mcmp+0x18>
 80253b0:	e7fa      	b.n	80253a8 <__mcmp+0x28>
 80253b2:	f04f 32ff 	mov.w	r2, #4294967295
 80253b6:	e7f7      	b.n	80253a8 <__mcmp+0x28>

080253b8 <__mdiff>:
 80253b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253bc:	460c      	mov	r4, r1
 80253be:	4606      	mov	r6, r0
 80253c0:	4611      	mov	r1, r2
 80253c2:	4620      	mov	r0, r4
 80253c4:	4690      	mov	r8, r2
 80253c6:	f7ff ffdb 	bl	8025380 <__mcmp>
 80253ca:	1e05      	subs	r5, r0, #0
 80253cc:	d110      	bne.n	80253f0 <__mdiff+0x38>
 80253ce:	4629      	mov	r1, r5
 80253d0:	4630      	mov	r0, r6
 80253d2:	f7ff fd53 	bl	8024e7c <_Balloc>
 80253d6:	b930      	cbnz	r0, 80253e6 <__mdiff+0x2e>
 80253d8:	4b3a      	ldr	r3, [pc, #232]	; (80254c4 <__mdiff+0x10c>)
 80253da:	4602      	mov	r2, r0
 80253dc:	f240 2132 	movw	r1, #562	; 0x232
 80253e0:	4839      	ldr	r0, [pc, #228]	; (80254c8 <__mdiff+0x110>)
 80253e2:	f000 f9d5 	bl	8025790 <__assert_func>
 80253e6:	2301      	movs	r3, #1
 80253e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80253ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253f0:	bfa4      	itt	ge
 80253f2:	4643      	movge	r3, r8
 80253f4:	46a0      	movge	r8, r4
 80253f6:	4630      	mov	r0, r6
 80253f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80253fc:	bfa6      	itte	ge
 80253fe:	461c      	movge	r4, r3
 8025400:	2500      	movge	r5, #0
 8025402:	2501      	movlt	r5, #1
 8025404:	f7ff fd3a 	bl	8024e7c <_Balloc>
 8025408:	b920      	cbnz	r0, 8025414 <__mdiff+0x5c>
 802540a:	4b2e      	ldr	r3, [pc, #184]	; (80254c4 <__mdiff+0x10c>)
 802540c:	4602      	mov	r2, r0
 802540e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8025412:	e7e5      	b.n	80253e0 <__mdiff+0x28>
 8025414:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8025418:	6926      	ldr	r6, [r4, #16]
 802541a:	60c5      	str	r5, [r0, #12]
 802541c:	f104 0914 	add.w	r9, r4, #20
 8025420:	f108 0514 	add.w	r5, r8, #20
 8025424:	f100 0e14 	add.w	lr, r0, #20
 8025428:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802542c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8025430:	f108 0210 	add.w	r2, r8, #16
 8025434:	46f2      	mov	sl, lr
 8025436:	2100      	movs	r1, #0
 8025438:	f859 3b04 	ldr.w	r3, [r9], #4
 802543c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8025440:	fa1f f883 	uxth.w	r8, r3
 8025444:	fa11 f18b 	uxtah	r1, r1, fp
 8025448:	0c1b      	lsrs	r3, r3, #16
 802544a:	eba1 0808 	sub.w	r8, r1, r8
 802544e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8025452:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8025456:	fa1f f888 	uxth.w	r8, r8
 802545a:	1419      	asrs	r1, r3, #16
 802545c:	454e      	cmp	r6, r9
 802545e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8025462:	f84a 3b04 	str.w	r3, [sl], #4
 8025466:	d8e7      	bhi.n	8025438 <__mdiff+0x80>
 8025468:	1b33      	subs	r3, r6, r4
 802546a:	3b15      	subs	r3, #21
 802546c:	f023 0303 	bic.w	r3, r3, #3
 8025470:	3304      	adds	r3, #4
 8025472:	3415      	adds	r4, #21
 8025474:	42a6      	cmp	r6, r4
 8025476:	bf38      	it	cc
 8025478:	2304      	movcc	r3, #4
 802547a:	441d      	add	r5, r3
 802547c:	4473      	add	r3, lr
 802547e:	469e      	mov	lr, r3
 8025480:	462e      	mov	r6, r5
 8025482:	4566      	cmp	r6, ip
 8025484:	d30e      	bcc.n	80254a4 <__mdiff+0xec>
 8025486:	f10c 0203 	add.w	r2, ip, #3
 802548a:	1b52      	subs	r2, r2, r5
 802548c:	f022 0203 	bic.w	r2, r2, #3
 8025490:	3d03      	subs	r5, #3
 8025492:	45ac      	cmp	ip, r5
 8025494:	bf38      	it	cc
 8025496:	2200      	movcc	r2, #0
 8025498:	441a      	add	r2, r3
 802549a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802549e:	b17b      	cbz	r3, 80254c0 <__mdiff+0x108>
 80254a0:	6107      	str	r7, [r0, #16]
 80254a2:	e7a3      	b.n	80253ec <__mdiff+0x34>
 80254a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80254a8:	fa11 f288 	uxtah	r2, r1, r8
 80254ac:	1414      	asrs	r4, r2, #16
 80254ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80254b2:	b292      	uxth	r2, r2
 80254b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80254b8:	f84e 2b04 	str.w	r2, [lr], #4
 80254bc:	1421      	asrs	r1, r4, #16
 80254be:	e7e0      	b.n	8025482 <__mdiff+0xca>
 80254c0:	3f01      	subs	r7, #1
 80254c2:	e7ea      	b.n	802549a <__mdiff+0xe2>
 80254c4:	08026593 	.word	0x08026593
 80254c8:	080265a4 	.word	0x080265a4

080254cc <__d2b>:
 80254cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80254d0:	4689      	mov	r9, r1
 80254d2:	2101      	movs	r1, #1
 80254d4:	ec57 6b10 	vmov	r6, r7, d0
 80254d8:	4690      	mov	r8, r2
 80254da:	f7ff fccf 	bl	8024e7c <_Balloc>
 80254de:	4604      	mov	r4, r0
 80254e0:	b930      	cbnz	r0, 80254f0 <__d2b+0x24>
 80254e2:	4602      	mov	r2, r0
 80254e4:	4b25      	ldr	r3, [pc, #148]	; (802557c <__d2b+0xb0>)
 80254e6:	4826      	ldr	r0, [pc, #152]	; (8025580 <__d2b+0xb4>)
 80254e8:	f240 310a 	movw	r1, #778	; 0x30a
 80254ec:	f000 f950 	bl	8025790 <__assert_func>
 80254f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80254f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80254f8:	bb35      	cbnz	r5, 8025548 <__d2b+0x7c>
 80254fa:	2e00      	cmp	r6, #0
 80254fc:	9301      	str	r3, [sp, #4]
 80254fe:	d028      	beq.n	8025552 <__d2b+0x86>
 8025500:	4668      	mov	r0, sp
 8025502:	9600      	str	r6, [sp, #0]
 8025504:	f7ff fd82 	bl	802500c <__lo0bits>
 8025508:	9900      	ldr	r1, [sp, #0]
 802550a:	b300      	cbz	r0, 802554e <__d2b+0x82>
 802550c:	9a01      	ldr	r2, [sp, #4]
 802550e:	f1c0 0320 	rsb	r3, r0, #32
 8025512:	fa02 f303 	lsl.w	r3, r2, r3
 8025516:	430b      	orrs	r3, r1
 8025518:	40c2      	lsrs	r2, r0
 802551a:	6163      	str	r3, [r4, #20]
 802551c:	9201      	str	r2, [sp, #4]
 802551e:	9b01      	ldr	r3, [sp, #4]
 8025520:	61a3      	str	r3, [r4, #24]
 8025522:	2b00      	cmp	r3, #0
 8025524:	bf14      	ite	ne
 8025526:	2202      	movne	r2, #2
 8025528:	2201      	moveq	r2, #1
 802552a:	6122      	str	r2, [r4, #16]
 802552c:	b1d5      	cbz	r5, 8025564 <__d2b+0x98>
 802552e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8025532:	4405      	add	r5, r0
 8025534:	f8c9 5000 	str.w	r5, [r9]
 8025538:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802553c:	f8c8 0000 	str.w	r0, [r8]
 8025540:	4620      	mov	r0, r4
 8025542:	b003      	add	sp, #12
 8025544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802554c:	e7d5      	b.n	80254fa <__d2b+0x2e>
 802554e:	6161      	str	r1, [r4, #20]
 8025550:	e7e5      	b.n	802551e <__d2b+0x52>
 8025552:	a801      	add	r0, sp, #4
 8025554:	f7ff fd5a 	bl	802500c <__lo0bits>
 8025558:	9b01      	ldr	r3, [sp, #4]
 802555a:	6163      	str	r3, [r4, #20]
 802555c:	2201      	movs	r2, #1
 802555e:	6122      	str	r2, [r4, #16]
 8025560:	3020      	adds	r0, #32
 8025562:	e7e3      	b.n	802552c <__d2b+0x60>
 8025564:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8025568:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802556c:	f8c9 0000 	str.w	r0, [r9]
 8025570:	6918      	ldr	r0, [r3, #16]
 8025572:	f7ff fd2b 	bl	8024fcc <__hi0bits>
 8025576:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802557a:	e7df      	b.n	802553c <__d2b+0x70>
 802557c:	08026593 	.word	0x08026593
 8025580:	080265a4 	.word	0x080265a4

08025584 <_calloc_r>:
 8025584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025586:	fba1 2402 	umull	r2, r4, r1, r2
 802558a:	b94c      	cbnz	r4, 80255a0 <_calloc_r+0x1c>
 802558c:	4611      	mov	r1, r2
 802558e:	9201      	str	r2, [sp, #4]
 8025590:	f000 f87a 	bl	8025688 <_malloc_r>
 8025594:	9a01      	ldr	r2, [sp, #4]
 8025596:	4605      	mov	r5, r0
 8025598:	b930      	cbnz	r0, 80255a8 <_calloc_r+0x24>
 802559a:	4628      	mov	r0, r5
 802559c:	b003      	add	sp, #12
 802559e:	bd30      	pop	{r4, r5, pc}
 80255a0:	220c      	movs	r2, #12
 80255a2:	6002      	str	r2, [r0, #0]
 80255a4:	2500      	movs	r5, #0
 80255a6:	e7f8      	b.n	802559a <_calloc_r+0x16>
 80255a8:	4621      	mov	r1, r4
 80255aa:	f7fe f96d 	bl	8023888 <memset>
 80255ae:	e7f4      	b.n	802559a <_calloc_r+0x16>

080255b0 <_free_r>:
 80255b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80255b2:	2900      	cmp	r1, #0
 80255b4:	d044      	beq.n	8025640 <_free_r+0x90>
 80255b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80255ba:	9001      	str	r0, [sp, #4]
 80255bc:	2b00      	cmp	r3, #0
 80255be:	f1a1 0404 	sub.w	r4, r1, #4
 80255c2:	bfb8      	it	lt
 80255c4:	18e4      	addlt	r4, r4, r3
 80255c6:	f000 f925 	bl	8025814 <__malloc_lock>
 80255ca:	4a1e      	ldr	r2, [pc, #120]	; (8025644 <_free_r+0x94>)
 80255cc:	9801      	ldr	r0, [sp, #4]
 80255ce:	6813      	ldr	r3, [r2, #0]
 80255d0:	b933      	cbnz	r3, 80255e0 <_free_r+0x30>
 80255d2:	6063      	str	r3, [r4, #4]
 80255d4:	6014      	str	r4, [r2, #0]
 80255d6:	b003      	add	sp, #12
 80255d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80255dc:	f000 b920 	b.w	8025820 <__malloc_unlock>
 80255e0:	42a3      	cmp	r3, r4
 80255e2:	d908      	bls.n	80255f6 <_free_r+0x46>
 80255e4:	6825      	ldr	r5, [r4, #0]
 80255e6:	1961      	adds	r1, r4, r5
 80255e8:	428b      	cmp	r3, r1
 80255ea:	bf01      	itttt	eq
 80255ec:	6819      	ldreq	r1, [r3, #0]
 80255ee:	685b      	ldreq	r3, [r3, #4]
 80255f0:	1949      	addeq	r1, r1, r5
 80255f2:	6021      	streq	r1, [r4, #0]
 80255f4:	e7ed      	b.n	80255d2 <_free_r+0x22>
 80255f6:	461a      	mov	r2, r3
 80255f8:	685b      	ldr	r3, [r3, #4]
 80255fa:	b10b      	cbz	r3, 8025600 <_free_r+0x50>
 80255fc:	42a3      	cmp	r3, r4
 80255fe:	d9fa      	bls.n	80255f6 <_free_r+0x46>
 8025600:	6811      	ldr	r1, [r2, #0]
 8025602:	1855      	adds	r5, r2, r1
 8025604:	42a5      	cmp	r5, r4
 8025606:	d10b      	bne.n	8025620 <_free_r+0x70>
 8025608:	6824      	ldr	r4, [r4, #0]
 802560a:	4421      	add	r1, r4
 802560c:	1854      	adds	r4, r2, r1
 802560e:	42a3      	cmp	r3, r4
 8025610:	6011      	str	r1, [r2, #0]
 8025612:	d1e0      	bne.n	80255d6 <_free_r+0x26>
 8025614:	681c      	ldr	r4, [r3, #0]
 8025616:	685b      	ldr	r3, [r3, #4]
 8025618:	6053      	str	r3, [r2, #4]
 802561a:	4421      	add	r1, r4
 802561c:	6011      	str	r1, [r2, #0]
 802561e:	e7da      	b.n	80255d6 <_free_r+0x26>
 8025620:	d902      	bls.n	8025628 <_free_r+0x78>
 8025622:	230c      	movs	r3, #12
 8025624:	6003      	str	r3, [r0, #0]
 8025626:	e7d6      	b.n	80255d6 <_free_r+0x26>
 8025628:	6825      	ldr	r5, [r4, #0]
 802562a:	1961      	adds	r1, r4, r5
 802562c:	428b      	cmp	r3, r1
 802562e:	bf04      	itt	eq
 8025630:	6819      	ldreq	r1, [r3, #0]
 8025632:	685b      	ldreq	r3, [r3, #4]
 8025634:	6063      	str	r3, [r4, #4]
 8025636:	bf04      	itt	eq
 8025638:	1949      	addeq	r1, r1, r5
 802563a:	6021      	streq	r1, [r4, #0]
 802563c:	6054      	str	r4, [r2, #4]
 802563e:	e7ca      	b.n	80255d6 <_free_r+0x26>
 8025640:	b003      	add	sp, #12
 8025642:	bd30      	pop	{r4, r5, pc}
 8025644:	20000200 	.word	0x20000200

08025648 <sbrk_aligned>:
 8025648:	b570      	push	{r4, r5, r6, lr}
 802564a:	4e0e      	ldr	r6, [pc, #56]	; (8025684 <sbrk_aligned+0x3c>)
 802564c:	460c      	mov	r4, r1
 802564e:	6831      	ldr	r1, [r6, #0]
 8025650:	4605      	mov	r5, r0
 8025652:	b911      	cbnz	r1, 802565a <sbrk_aligned+0x12>
 8025654:	f000 f88c 	bl	8025770 <_sbrk_r>
 8025658:	6030      	str	r0, [r6, #0]
 802565a:	4621      	mov	r1, r4
 802565c:	4628      	mov	r0, r5
 802565e:	f000 f887 	bl	8025770 <_sbrk_r>
 8025662:	1c43      	adds	r3, r0, #1
 8025664:	d00a      	beq.n	802567c <sbrk_aligned+0x34>
 8025666:	1cc4      	adds	r4, r0, #3
 8025668:	f024 0403 	bic.w	r4, r4, #3
 802566c:	42a0      	cmp	r0, r4
 802566e:	d007      	beq.n	8025680 <sbrk_aligned+0x38>
 8025670:	1a21      	subs	r1, r4, r0
 8025672:	4628      	mov	r0, r5
 8025674:	f000 f87c 	bl	8025770 <_sbrk_r>
 8025678:	3001      	adds	r0, #1
 802567a:	d101      	bne.n	8025680 <sbrk_aligned+0x38>
 802567c:	f04f 34ff 	mov.w	r4, #4294967295
 8025680:	4620      	mov	r0, r4
 8025682:	bd70      	pop	{r4, r5, r6, pc}
 8025684:	20000204 	.word	0x20000204

08025688 <_malloc_r>:
 8025688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802568c:	1ccd      	adds	r5, r1, #3
 802568e:	f025 0503 	bic.w	r5, r5, #3
 8025692:	3508      	adds	r5, #8
 8025694:	2d0c      	cmp	r5, #12
 8025696:	bf38      	it	cc
 8025698:	250c      	movcc	r5, #12
 802569a:	2d00      	cmp	r5, #0
 802569c:	4607      	mov	r7, r0
 802569e:	db01      	blt.n	80256a4 <_malloc_r+0x1c>
 80256a0:	42a9      	cmp	r1, r5
 80256a2:	d905      	bls.n	80256b0 <_malloc_r+0x28>
 80256a4:	230c      	movs	r3, #12
 80256a6:	603b      	str	r3, [r7, #0]
 80256a8:	2600      	movs	r6, #0
 80256aa:	4630      	mov	r0, r6
 80256ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80256b0:	4e2e      	ldr	r6, [pc, #184]	; (802576c <_malloc_r+0xe4>)
 80256b2:	f000 f8af 	bl	8025814 <__malloc_lock>
 80256b6:	6833      	ldr	r3, [r6, #0]
 80256b8:	461c      	mov	r4, r3
 80256ba:	bb34      	cbnz	r4, 802570a <_malloc_r+0x82>
 80256bc:	4629      	mov	r1, r5
 80256be:	4638      	mov	r0, r7
 80256c0:	f7ff ffc2 	bl	8025648 <sbrk_aligned>
 80256c4:	1c43      	adds	r3, r0, #1
 80256c6:	4604      	mov	r4, r0
 80256c8:	d14d      	bne.n	8025766 <_malloc_r+0xde>
 80256ca:	6834      	ldr	r4, [r6, #0]
 80256cc:	4626      	mov	r6, r4
 80256ce:	2e00      	cmp	r6, #0
 80256d0:	d140      	bne.n	8025754 <_malloc_r+0xcc>
 80256d2:	6823      	ldr	r3, [r4, #0]
 80256d4:	4631      	mov	r1, r6
 80256d6:	4638      	mov	r0, r7
 80256d8:	eb04 0803 	add.w	r8, r4, r3
 80256dc:	f000 f848 	bl	8025770 <_sbrk_r>
 80256e0:	4580      	cmp	r8, r0
 80256e2:	d13a      	bne.n	802575a <_malloc_r+0xd2>
 80256e4:	6821      	ldr	r1, [r4, #0]
 80256e6:	3503      	adds	r5, #3
 80256e8:	1a6d      	subs	r5, r5, r1
 80256ea:	f025 0503 	bic.w	r5, r5, #3
 80256ee:	3508      	adds	r5, #8
 80256f0:	2d0c      	cmp	r5, #12
 80256f2:	bf38      	it	cc
 80256f4:	250c      	movcc	r5, #12
 80256f6:	4629      	mov	r1, r5
 80256f8:	4638      	mov	r0, r7
 80256fa:	f7ff ffa5 	bl	8025648 <sbrk_aligned>
 80256fe:	3001      	adds	r0, #1
 8025700:	d02b      	beq.n	802575a <_malloc_r+0xd2>
 8025702:	6823      	ldr	r3, [r4, #0]
 8025704:	442b      	add	r3, r5
 8025706:	6023      	str	r3, [r4, #0]
 8025708:	e00e      	b.n	8025728 <_malloc_r+0xa0>
 802570a:	6822      	ldr	r2, [r4, #0]
 802570c:	1b52      	subs	r2, r2, r5
 802570e:	d41e      	bmi.n	802574e <_malloc_r+0xc6>
 8025710:	2a0b      	cmp	r2, #11
 8025712:	d916      	bls.n	8025742 <_malloc_r+0xba>
 8025714:	1961      	adds	r1, r4, r5
 8025716:	42a3      	cmp	r3, r4
 8025718:	6025      	str	r5, [r4, #0]
 802571a:	bf18      	it	ne
 802571c:	6059      	strne	r1, [r3, #4]
 802571e:	6863      	ldr	r3, [r4, #4]
 8025720:	bf08      	it	eq
 8025722:	6031      	streq	r1, [r6, #0]
 8025724:	5162      	str	r2, [r4, r5]
 8025726:	604b      	str	r3, [r1, #4]
 8025728:	4638      	mov	r0, r7
 802572a:	f104 060b 	add.w	r6, r4, #11
 802572e:	f000 f877 	bl	8025820 <__malloc_unlock>
 8025732:	f026 0607 	bic.w	r6, r6, #7
 8025736:	1d23      	adds	r3, r4, #4
 8025738:	1af2      	subs	r2, r6, r3
 802573a:	d0b6      	beq.n	80256aa <_malloc_r+0x22>
 802573c:	1b9b      	subs	r3, r3, r6
 802573e:	50a3      	str	r3, [r4, r2]
 8025740:	e7b3      	b.n	80256aa <_malloc_r+0x22>
 8025742:	6862      	ldr	r2, [r4, #4]
 8025744:	42a3      	cmp	r3, r4
 8025746:	bf0c      	ite	eq
 8025748:	6032      	streq	r2, [r6, #0]
 802574a:	605a      	strne	r2, [r3, #4]
 802574c:	e7ec      	b.n	8025728 <_malloc_r+0xa0>
 802574e:	4623      	mov	r3, r4
 8025750:	6864      	ldr	r4, [r4, #4]
 8025752:	e7b2      	b.n	80256ba <_malloc_r+0x32>
 8025754:	4634      	mov	r4, r6
 8025756:	6876      	ldr	r6, [r6, #4]
 8025758:	e7b9      	b.n	80256ce <_malloc_r+0x46>
 802575a:	230c      	movs	r3, #12
 802575c:	603b      	str	r3, [r7, #0]
 802575e:	4638      	mov	r0, r7
 8025760:	f000 f85e 	bl	8025820 <__malloc_unlock>
 8025764:	e7a1      	b.n	80256aa <_malloc_r+0x22>
 8025766:	6025      	str	r5, [r4, #0]
 8025768:	e7de      	b.n	8025728 <_malloc_r+0xa0>
 802576a:	bf00      	nop
 802576c:	20000200 	.word	0x20000200

08025770 <_sbrk_r>:
 8025770:	b538      	push	{r3, r4, r5, lr}
 8025772:	4d06      	ldr	r5, [pc, #24]	; (802578c <_sbrk_r+0x1c>)
 8025774:	2300      	movs	r3, #0
 8025776:	4604      	mov	r4, r0
 8025778:	4608      	mov	r0, r1
 802577a:	602b      	str	r3, [r5, #0]
 802577c:	f7fb fff6 	bl	802176c <_sbrk>
 8025780:	1c43      	adds	r3, r0, #1
 8025782:	d102      	bne.n	802578a <_sbrk_r+0x1a>
 8025784:	682b      	ldr	r3, [r5, #0]
 8025786:	b103      	cbz	r3, 802578a <_sbrk_r+0x1a>
 8025788:	6023      	str	r3, [r4, #0]
 802578a:	bd38      	pop	{r3, r4, r5, pc}
 802578c:	20000208 	.word	0x20000208

08025790 <__assert_func>:
 8025790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025792:	4614      	mov	r4, r2
 8025794:	461a      	mov	r2, r3
 8025796:	4b09      	ldr	r3, [pc, #36]	; (80257bc <__assert_func+0x2c>)
 8025798:	681b      	ldr	r3, [r3, #0]
 802579a:	4605      	mov	r5, r0
 802579c:	68d8      	ldr	r0, [r3, #12]
 802579e:	b14c      	cbz	r4, 80257b4 <__assert_func+0x24>
 80257a0:	4b07      	ldr	r3, [pc, #28]	; (80257c0 <__assert_func+0x30>)
 80257a2:	9100      	str	r1, [sp, #0]
 80257a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80257a8:	4906      	ldr	r1, [pc, #24]	; (80257c4 <__assert_func+0x34>)
 80257aa:	462b      	mov	r3, r5
 80257ac:	f000 f80e 	bl	80257cc <fiprintf>
 80257b0:	f000 fa64 	bl	8025c7c <abort>
 80257b4:	4b04      	ldr	r3, [pc, #16]	; (80257c8 <__assert_func+0x38>)
 80257b6:	461c      	mov	r4, r3
 80257b8:	e7f3      	b.n	80257a2 <__assert_func+0x12>
 80257ba:	bf00      	nop
 80257bc:	2000000c 	.word	0x2000000c
 80257c0:	080266fc 	.word	0x080266fc
 80257c4:	08026709 	.word	0x08026709
 80257c8:	08026737 	.word	0x08026737

080257cc <fiprintf>:
 80257cc:	b40e      	push	{r1, r2, r3}
 80257ce:	b503      	push	{r0, r1, lr}
 80257d0:	4601      	mov	r1, r0
 80257d2:	ab03      	add	r3, sp, #12
 80257d4:	4805      	ldr	r0, [pc, #20]	; (80257ec <fiprintf+0x20>)
 80257d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80257da:	6800      	ldr	r0, [r0, #0]
 80257dc:	9301      	str	r3, [sp, #4]
 80257de:	f000 f84f 	bl	8025880 <_vfiprintf_r>
 80257e2:	b002      	add	sp, #8
 80257e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80257e8:	b003      	add	sp, #12
 80257ea:	4770      	bx	lr
 80257ec:	2000000c 	.word	0x2000000c

080257f0 <__ascii_mbtowc>:
 80257f0:	b082      	sub	sp, #8
 80257f2:	b901      	cbnz	r1, 80257f6 <__ascii_mbtowc+0x6>
 80257f4:	a901      	add	r1, sp, #4
 80257f6:	b142      	cbz	r2, 802580a <__ascii_mbtowc+0x1a>
 80257f8:	b14b      	cbz	r3, 802580e <__ascii_mbtowc+0x1e>
 80257fa:	7813      	ldrb	r3, [r2, #0]
 80257fc:	600b      	str	r3, [r1, #0]
 80257fe:	7812      	ldrb	r2, [r2, #0]
 8025800:	1e10      	subs	r0, r2, #0
 8025802:	bf18      	it	ne
 8025804:	2001      	movne	r0, #1
 8025806:	b002      	add	sp, #8
 8025808:	4770      	bx	lr
 802580a:	4610      	mov	r0, r2
 802580c:	e7fb      	b.n	8025806 <__ascii_mbtowc+0x16>
 802580e:	f06f 0001 	mvn.w	r0, #1
 8025812:	e7f8      	b.n	8025806 <__ascii_mbtowc+0x16>

08025814 <__malloc_lock>:
 8025814:	4801      	ldr	r0, [pc, #4]	; (802581c <__malloc_lock+0x8>)
 8025816:	f000 bbf1 	b.w	8025ffc <__retarget_lock_acquire_recursive>
 802581a:	bf00      	nop
 802581c:	2000020c 	.word	0x2000020c

08025820 <__malloc_unlock>:
 8025820:	4801      	ldr	r0, [pc, #4]	; (8025828 <__malloc_unlock+0x8>)
 8025822:	f000 bbec 	b.w	8025ffe <__retarget_lock_release_recursive>
 8025826:	bf00      	nop
 8025828:	2000020c 	.word	0x2000020c

0802582c <__sfputc_r>:
 802582c:	6893      	ldr	r3, [r2, #8]
 802582e:	3b01      	subs	r3, #1
 8025830:	2b00      	cmp	r3, #0
 8025832:	b410      	push	{r4}
 8025834:	6093      	str	r3, [r2, #8]
 8025836:	da08      	bge.n	802584a <__sfputc_r+0x1e>
 8025838:	6994      	ldr	r4, [r2, #24]
 802583a:	42a3      	cmp	r3, r4
 802583c:	db01      	blt.n	8025842 <__sfputc_r+0x16>
 802583e:	290a      	cmp	r1, #10
 8025840:	d103      	bne.n	802584a <__sfputc_r+0x1e>
 8025842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025846:	f000 b94b 	b.w	8025ae0 <__swbuf_r>
 802584a:	6813      	ldr	r3, [r2, #0]
 802584c:	1c58      	adds	r0, r3, #1
 802584e:	6010      	str	r0, [r2, #0]
 8025850:	7019      	strb	r1, [r3, #0]
 8025852:	4608      	mov	r0, r1
 8025854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025858:	4770      	bx	lr

0802585a <__sfputs_r>:
 802585a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802585c:	4606      	mov	r6, r0
 802585e:	460f      	mov	r7, r1
 8025860:	4614      	mov	r4, r2
 8025862:	18d5      	adds	r5, r2, r3
 8025864:	42ac      	cmp	r4, r5
 8025866:	d101      	bne.n	802586c <__sfputs_r+0x12>
 8025868:	2000      	movs	r0, #0
 802586a:	e007      	b.n	802587c <__sfputs_r+0x22>
 802586c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025870:	463a      	mov	r2, r7
 8025872:	4630      	mov	r0, r6
 8025874:	f7ff ffda 	bl	802582c <__sfputc_r>
 8025878:	1c43      	adds	r3, r0, #1
 802587a:	d1f3      	bne.n	8025864 <__sfputs_r+0xa>
 802587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025880 <_vfiprintf_r>:
 8025880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025884:	460d      	mov	r5, r1
 8025886:	b09d      	sub	sp, #116	; 0x74
 8025888:	4614      	mov	r4, r2
 802588a:	4698      	mov	r8, r3
 802588c:	4606      	mov	r6, r0
 802588e:	b118      	cbz	r0, 8025898 <_vfiprintf_r+0x18>
 8025890:	6983      	ldr	r3, [r0, #24]
 8025892:	b90b      	cbnz	r3, 8025898 <_vfiprintf_r+0x18>
 8025894:	f000 fb14 	bl	8025ec0 <__sinit>
 8025898:	4b89      	ldr	r3, [pc, #548]	; (8025ac0 <_vfiprintf_r+0x240>)
 802589a:	429d      	cmp	r5, r3
 802589c:	d11b      	bne.n	80258d6 <_vfiprintf_r+0x56>
 802589e:	6875      	ldr	r5, [r6, #4]
 80258a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80258a2:	07d9      	lsls	r1, r3, #31
 80258a4:	d405      	bmi.n	80258b2 <_vfiprintf_r+0x32>
 80258a6:	89ab      	ldrh	r3, [r5, #12]
 80258a8:	059a      	lsls	r2, r3, #22
 80258aa:	d402      	bmi.n	80258b2 <_vfiprintf_r+0x32>
 80258ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80258ae:	f000 fba5 	bl	8025ffc <__retarget_lock_acquire_recursive>
 80258b2:	89ab      	ldrh	r3, [r5, #12]
 80258b4:	071b      	lsls	r3, r3, #28
 80258b6:	d501      	bpl.n	80258bc <_vfiprintf_r+0x3c>
 80258b8:	692b      	ldr	r3, [r5, #16]
 80258ba:	b9eb      	cbnz	r3, 80258f8 <_vfiprintf_r+0x78>
 80258bc:	4629      	mov	r1, r5
 80258be:	4630      	mov	r0, r6
 80258c0:	f000 f96e 	bl	8025ba0 <__swsetup_r>
 80258c4:	b1c0      	cbz	r0, 80258f8 <_vfiprintf_r+0x78>
 80258c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80258c8:	07dc      	lsls	r4, r3, #31
 80258ca:	d50e      	bpl.n	80258ea <_vfiprintf_r+0x6a>
 80258cc:	f04f 30ff 	mov.w	r0, #4294967295
 80258d0:	b01d      	add	sp, #116	; 0x74
 80258d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258d6:	4b7b      	ldr	r3, [pc, #492]	; (8025ac4 <_vfiprintf_r+0x244>)
 80258d8:	429d      	cmp	r5, r3
 80258da:	d101      	bne.n	80258e0 <_vfiprintf_r+0x60>
 80258dc:	68b5      	ldr	r5, [r6, #8]
 80258de:	e7df      	b.n	80258a0 <_vfiprintf_r+0x20>
 80258e0:	4b79      	ldr	r3, [pc, #484]	; (8025ac8 <_vfiprintf_r+0x248>)
 80258e2:	429d      	cmp	r5, r3
 80258e4:	bf08      	it	eq
 80258e6:	68f5      	ldreq	r5, [r6, #12]
 80258e8:	e7da      	b.n	80258a0 <_vfiprintf_r+0x20>
 80258ea:	89ab      	ldrh	r3, [r5, #12]
 80258ec:	0598      	lsls	r0, r3, #22
 80258ee:	d4ed      	bmi.n	80258cc <_vfiprintf_r+0x4c>
 80258f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80258f2:	f000 fb84 	bl	8025ffe <__retarget_lock_release_recursive>
 80258f6:	e7e9      	b.n	80258cc <_vfiprintf_r+0x4c>
 80258f8:	2300      	movs	r3, #0
 80258fa:	9309      	str	r3, [sp, #36]	; 0x24
 80258fc:	2320      	movs	r3, #32
 80258fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025902:	f8cd 800c 	str.w	r8, [sp, #12]
 8025906:	2330      	movs	r3, #48	; 0x30
 8025908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025acc <_vfiprintf_r+0x24c>
 802590c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025910:	f04f 0901 	mov.w	r9, #1
 8025914:	4623      	mov	r3, r4
 8025916:	469a      	mov	sl, r3
 8025918:	f813 2b01 	ldrb.w	r2, [r3], #1
 802591c:	b10a      	cbz	r2, 8025922 <_vfiprintf_r+0xa2>
 802591e:	2a25      	cmp	r2, #37	; 0x25
 8025920:	d1f9      	bne.n	8025916 <_vfiprintf_r+0x96>
 8025922:	ebba 0b04 	subs.w	fp, sl, r4
 8025926:	d00b      	beq.n	8025940 <_vfiprintf_r+0xc0>
 8025928:	465b      	mov	r3, fp
 802592a:	4622      	mov	r2, r4
 802592c:	4629      	mov	r1, r5
 802592e:	4630      	mov	r0, r6
 8025930:	f7ff ff93 	bl	802585a <__sfputs_r>
 8025934:	3001      	adds	r0, #1
 8025936:	f000 80aa 	beq.w	8025a8e <_vfiprintf_r+0x20e>
 802593a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802593c:	445a      	add	r2, fp
 802593e:	9209      	str	r2, [sp, #36]	; 0x24
 8025940:	f89a 3000 	ldrb.w	r3, [sl]
 8025944:	2b00      	cmp	r3, #0
 8025946:	f000 80a2 	beq.w	8025a8e <_vfiprintf_r+0x20e>
 802594a:	2300      	movs	r3, #0
 802594c:	f04f 32ff 	mov.w	r2, #4294967295
 8025950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025954:	f10a 0a01 	add.w	sl, sl, #1
 8025958:	9304      	str	r3, [sp, #16]
 802595a:	9307      	str	r3, [sp, #28]
 802595c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025960:	931a      	str	r3, [sp, #104]	; 0x68
 8025962:	4654      	mov	r4, sl
 8025964:	2205      	movs	r2, #5
 8025966:	f814 1b01 	ldrb.w	r1, [r4], #1
 802596a:	4858      	ldr	r0, [pc, #352]	; (8025acc <_vfiprintf_r+0x24c>)
 802596c:	f7fa fbb0 	bl	80200d0 <memchr>
 8025970:	9a04      	ldr	r2, [sp, #16]
 8025972:	b9d8      	cbnz	r0, 80259ac <_vfiprintf_r+0x12c>
 8025974:	06d1      	lsls	r1, r2, #27
 8025976:	bf44      	itt	mi
 8025978:	2320      	movmi	r3, #32
 802597a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802597e:	0713      	lsls	r3, r2, #28
 8025980:	bf44      	itt	mi
 8025982:	232b      	movmi	r3, #43	; 0x2b
 8025984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025988:	f89a 3000 	ldrb.w	r3, [sl]
 802598c:	2b2a      	cmp	r3, #42	; 0x2a
 802598e:	d015      	beq.n	80259bc <_vfiprintf_r+0x13c>
 8025990:	9a07      	ldr	r2, [sp, #28]
 8025992:	4654      	mov	r4, sl
 8025994:	2000      	movs	r0, #0
 8025996:	f04f 0c0a 	mov.w	ip, #10
 802599a:	4621      	mov	r1, r4
 802599c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80259a0:	3b30      	subs	r3, #48	; 0x30
 80259a2:	2b09      	cmp	r3, #9
 80259a4:	d94e      	bls.n	8025a44 <_vfiprintf_r+0x1c4>
 80259a6:	b1b0      	cbz	r0, 80259d6 <_vfiprintf_r+0x156>
 80259a8:	9207      	str	r2, [sp, #28]
 80259aa:	e014      	b.n	80259d6 <_vfiprintf_r+0x156>
 80259ac:	eba0 0308 	sub.w	r3, r0, r8
 80259b0:	fa09 f303 	lsl.w	r3, r9, r3
 80259b4:	4313      	orrs	r3, r2
 80259b6:	9304      	str	r3, [sp, #16]
 80259b8:	46a2      	mov	sl, r4
 80259ba:	e7d2      	b.n	8025962 <_vfiprintf_r+0xe2>
 80259bc:	9b03      	ldr	r3, [sp, #12]
 80259be:	1d19      	adds	r1, r3, #4
 80259c0:	681b      	ldr	r3, [r3, #0]
 80259c2:	9103      	str	r1, [sp, #12]
 80259c4:	2b00      	cmp	r3, #0
 80259c6:	bfbb      	ittet	lt
 80259c8:	425b      	neglt	r3, r3
 80259ca:	f042 0202 	orrlt.w	r2, r2, #2
 80259ce:	9307      	strge	r3, [sp, #28]
 80259d0:	9307      	strlt	r3, [sp, #28]
 80259d2:	bfb8      	it	lt
 80259d4:	9204      	strlt	r2, [sp, #16]
 80259d6:	7823      	ldrb	r3, [r4, #0]
 80259d8:	2b2e      	cmp	r3, #46	; 0x2e
 80259da:	d10c      	bne.n	80259f6 <_vfiprintf_r+0x176>
 80259dc:	7863      	ldrb	r3, [r4, #1]
 80259de:	2b2a      	cmp	r3, #42	; 0x2a
 80259e0:	d135      	bne.n	8025a4e <_vfiprintf_r+0x1ce>
 80259e2:	9b03      	ldr	r3, [sp, #12]
 80259e4:	1d1a      	adds	r2, r3, #4
 80259e6:	681b      	ldr	r3, [r3, #0]
 80259e8:	9203      	str	r2, [sp, #12]
 80259ea:	2b00      	cmp	r3, #0
 80259ec:	bfb8      	it	lt
 80259ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80259f2:	3402      	adds	r4, #2
 80259f4:	9305      	str	r3, [sp, #20]
 80259f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025adc <_vfiprintf_r+0x25c>
 80259fa:	7821      	ldrb	r1, [r4, #0]
 80259fc:	2203      	movs	r2, #3
 80259fe:	4650      	mov	r0, sl
 8025a00:	f7fa fb66 	bl	80200d0 <memchr>
 8025a04:	b140      	cbz	r0, 8025a18 <_vfiprintf_r+0x198>
 8025a06:	2340      	movs	r3, #64	; 0x40
 8025a08:	eba0 000a 	sub.w	r0, r0, sl
 8025a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8025a10:	9b04      	ldr	r3, [sp, #16]
 8025a12:	4303      	orrs	r3, r0
 8025a14:	3401      	adds	r4, #1
 8025a16:	9304      	str	r3, [sp, #16]
 8025a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025a1c:	482c      	ldr	r0, [pc, #176]	; (8025ad0 <_vfiprintf_r+0x250>)
 8025a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025a22:	2206      	movs	r2, #6
 8025a24:	f7fa fb54 	bl	80200d0 <memchr>
 8025a28:	2800      	cmp	r0, #0
 8025a2a:	d03f      	beq.n	8025aac <_vfiprintf_r+0x22c>
 8025a2c:	4b29      	ldr	r3, [pc, #164]	; (8025ad4 <_vfiprintf_r+0x254>)
 8025a2e:	bb1b      	cbnz	r3, 8025a78 <_vfiprintf_r+0x1f8>
 8025a30:	9b03      	ldr	r3, [sp, #12]
 8025a32:	3307      	adds	r3, #7
 8025a34:	f023 0307 	bic.w	r3, r3, #7
 8025a38:	3308      	adds	r3, #8
 8025a3a:	9303      	str	r3, [sp, #12]
 8025a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a3e:	443b      	add	r3, r7
 8025a40:	9309      	str	r3, [sp, #36]	; 0x24
 8025a42:	e767      	b.n	8025914 <_vfiprintf_r+0x94>
 8025a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8025a48:	460c      	mov	r4, r1
 8025a4a:	2001      	movs	r0, #1
 8025a4c:	e7a5      	b.n	802599a <_vfiprintf_r+0x11a>
 8025a4e:	2300      	movs	r3, #0
 8025a50:	3401      	adds	r4, #1
 8025a52:	9305      	str	r3, [sp, #20]
 8025a54:	4619      	mov	r1, r3
 8025a56:	f04f 0c0a 	mov.w	ip, #10
 8025a5a:	4620      	mov	r0, r4
 8025a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025a60:	3a30      	subs	r2, #48	; 0x30
 8025a62:	2a09      	cmp	r2, #9
 8025a64:	d903      	bls.n	8025a6e <_vfiprintf_r+0x1ee>
 8025a66:	2b00      	cmp	r3, #0
 8025a68:	d0c5      	beq.n	80259f6 <_vfiprintf_r+0x176>
 8025a6a:	9105      	str	r1, [sp, #20]
 8025a6c:	e7c3      	b.n	80259f6 <_vfiprintf_r+0x176>
 8025a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8025a72:	4604      	mov	r4, r0
 8025a74:	2301      	movs	r3, #1
 8025a76:	e7f0      	b.n	8025a5a <_vfiprintf_r+0x1da>
 8025a78:	ab03      	add	r3, sp, #12
 8025a7a:	9300      	str	r3, [sp, #0]
 8025a7c:	462a      	mov	r2, r5
 8025a7e:	4b16      	ldr	r3, [pc, #88]	; (8025ad8 <_vfiprintf_r+0x258>)
 8025a80:	a904      	add	r1, sp, #16
 8025a82:	4630      	mov	r0, r6
 8025a84:	f7fd ffa8 	bl	80239d8 <_printf_float>
 8025a88:	4607      	mov	r7, r0
 8025a8a:	1c78      	adds	r0, r7, #1
 8025a8c:	d1d6      	bne.n	8025a3c <_vfiprintf_r+0x1bc>
 8025a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025a90:	07d9      	lsls	r1, r3, #31
 8025a92:	d405      	bmi.n	8025aa0 <_vfiprintf_r+0x220>
 8025a94:	89ab      	ldrh	r3, [r5, #12]
 8025a96:	059a      	lsls	r2, r3, #22
 8025a98:	d402      	bmi.n	8025aa0 <_vfiprintf_r+0x220>
 8025a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025a9c:	f000 faaf 	bl	8025ffe <__retarget_lock_release_recursive>
 8025aa0:	89ab      	ldrh	r3, [r5, #12]
 8025aa2:	065b      	lsls	r3, r3, #25
 8025aa4:	f53f af12 	bmi.w	80258cc <_vfiprintf_r+0x4c>
 8025aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025aaa:	e711      	b.n	80258d0 <_vfiprintf_r+0x50>
 8025aac:	ab03      	add	r3, sp, #12
 8025aae:	9300      	str	r3, [sp, #0]
 8025ab0:	462a      	mov	r2, r5
 8025ab2:	4b09      	ldr	r3, [pc, #36]	; (8025ad8 <_vfiprintf_r+0x258>)
 8025ab4:	a904      	add	r1, sp, #16
 8025ab6:	4630      	mov	r0, r6
 8025ab8:	f7fe fa32 	bl	8023f20 <_printf_i>
 8025abc:	e7e4      	b.n	8025a88 <_vfiprintf_r+0x208>
 8025abe:	bf00      	nop
 8025ac0:	08026874 	.word	0x08026874
 8025ac4:	08026894 	.word	0x08026894
 8025ac8:	08026854 	.word	0x08026854
 8025acc:	08026742 	.word	0x08026742
 8025ad0:	0802674c 	.word	0x0802674c
 8025ad4:	080239d9 	.word	0x080239d9
 8025ad8:	0802585b 	.word	0x0802585b
 8025adc:	08026748 	.word	0x08026748

08025ae0 <__swbuf_r>:
 8025ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ae2:	460e      	mov	r6, r1
 8025ae4:	4614      	mov	r4, r2
 8025ae6:	4605      	mov	r5, r0
 8025ae8:	b118      	cbz	r0, 8025af2 <__swbuf_r+0x12>
 8025aea:	6983      	ldr	r3, [r0, #24]
 8025aec:	b90b      	cbnz	r3, 8025af2 <__swbuf_r+0x12>
 8025aee:	f000 f9e7 	bl	8025ec0 <__sinit>
 8025af2:	4b21      	ldr	r3, [pc, #132]	; (8025b78 <__swbuf_r+0x98>)
 8025af4:	429c      	cmp	r4, r3
 8025af6:	d12b      	bne.n	8025b50 <__swbuf_r+0x70>
 8025af8:	686c      	ldr	r4, [r5, #4]
 8025afa:	69a3      	ldr	r3, [r4, #24]
 8025afc:	60a3      	str	r3, [r4, #8]
 8025afe:	89a3      	ldrh	r3, [r4, #12]
 8025b00:	071a      	lsls	r2, r3, #28
 8025b02:	d52f      	bpl.n	8025b64 <__swbuf_r+0x84>
 8025b04:	6923      	ldr	r3, [r4, #16]
 8025b06:	b36b      	cbz	r3, 8025b64 <__swbuf_r+0x84>
 8025b08:	6923      	ldr	r3, [r4, #16]
 8025b0a:	6820      	ldr	r0, [r4, #0]
 8025b0c:	1ac0      	subs	r0, r0, r3
 8025b0e:	6963      	ldr	r3, [r4, #20]
 8025b10:	b2f6      	uxtb	r6, r6
 8025b12:	4283      	cmp	r3, r0
 8025b14:	4637      	mov	r7, r6
 8025b16:	dc04      	bgt.n	8025b22 <__swbuf_r+0x42>
 8025b18:	4621      	mov	r1, r4
 8025b1a:	4628      	mov	r0, r5
 8025b1c:	f000 f93c 	bl	8025d98 <_fflush_r>
 8025b20:	bb30      	cbnz	r0, 8025b70 <__swbuf_r+0x90>
 8025b22:	68a3      	ldr	r3, [r4, #8]
 8025b24:	3b01      	subs	r3, #1
 8025b26:	60a3      	str	r3, [r4, #8]
 8025b28:	6823      	ldr	r3, [r4, #0]
 8025b2a:	1c5a      	adds	r2, r3, #1
 8025b2c:	6022      	str	r2, [r4, #0]
 8025b2e:	701e      	strb	r6, [r3, #0]
 8025b30:	6963      	ldr	r3, [r4, #20]
 8025b32:	3001      	adds	r0, #1
 8025b34:	4283      	cmp	r3, r0
 8025b36:	d004      	beq.n	8025b42 <__swbuf_r+0x62>
 8025b38:	89a3      	ldrh	r3, [r4, #12]
 8025b3a:	07db      	lsls	r3, r3, #31
 8025b3c:	d506      	bpl.n	8025b4c <__swbuf_r+0x6c>
 8025b3e:	2e0a      	cmp	r6, #10
 8025b40:	d104      	bne.n	8025b4c <__swbuf_r+0x6c>
 8025b42:	4621      	mov	r1, r4
 8025b44:	4628      	mov	r0, r5
 8025b46:	f000 f927 	bl	8025d98 <_fflush_r>
 8025b4a:	b988      	cbnz	r0, 8025b70 <__swbuf_r+0x90>
 8025b4c:	4638      	mov	r0, r7
 8025b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b50:	4b0a      	ldr	r3, [pc, #40]	; (8025b7c <__swbuf_r+0x9c>)
 8025b52:	429c      	cmp	r4, r3
 8025b54:	d101      	bne.n	8025b5a <__swbuf_r+0x7a>
 8025b56:	68ac      	ldr	r4, [r5, #8]
 8025b58:	e7cf      	b.n	8025afa <__swbuf_r+0x1a>
 8025b5a:	4b09      	ldr	r3, [pc, #36]	; (8025b80 <__swbuf_r+0xa0>)
 8025b5c:	429c      	cmp	r4, r3
 8025b5e:	bf08      	it	eq
 8025b60:	68ec      	ldreq	r4, [r5, #12]
 8025b62:	e7ca      	b.n	8025afa <__swbuf_r+0x1a>
 8025b64:	4621      	mov	r1, r4
 8025b66:	4628      	mov	r0, r5
 8025b68:	f000 f81a 	bl	8025ba0 <__swsetup_r>
 8025b6c:	2800      	cmp	r0, #0
 8025b6e:	d0cb      	beq.n	8025b08 <__swbuf_r+0x28>
 8025b70:	f04f 37ff 	mov.w	r7, #4294967295
 8025b74:	e7ea      	b.n	8025b4c <__swbuf_r+0x6c>
 8025b76:	bf00      	nop
 8025b78:	08026874 	.word	0x08026874
 8025b7c:	08026894 	.word	0x08026894
 8025b80:	08026854 	.word	0x08026854

08025b84 <__ascii_wctomb>:
 8025b84:	b149      	cbz	r1, 8025b9a <__ascii_wctomb+0x16>
 8025b86:	2aff      	cmp	r2, #255	; 0xff
 8025b88:	bf85      	ittet	hi
 8025b8a:	238a      	movhi	r3, #138	; 0x8a
 8025b8c:	6003      	strhi	r3, [r0, #0]
 8025b8e:	700a      	strbls	r2, [r1, #0]
 8025b90:	f04f 30ff 	movhi.w	r0, #4294967295
 8025b94:	bf98      	it	ls
 8025b96:	2001      	movls	r0, #1
 8025b98:	4770      	bx	lr
 8025b9a:	4608      	mov	r0, r1
 8025b9c:	4770      	bx	lr
	...

08025ba0 <__swsetup_r>:
 8025ba0:	4b32      	ldr	r3, [pc, #200]	; (8025c6c <__swsetup_r+0xcc>)
 8025ba2:	b570      	push	{r4, r5, r6, lr}
 8025ba4:	681d      	ldr	r5, [r3, #0]
 8025ba6:	4606      	mov	r6, r0
 8025ba8:	460c      	mov	r4, r1
 8025baa:	b125      	cbz	r5, 8025bb6 <__swsetup_r+0x16>
 8025bac:	69ab      	ldr	r3, [r5, #24]
 8025bae:	b913      	cbnz	r3, 8025bb6 <__swsetup_r+0x16>
 8025bb0:	4628      	mov	r0, r5
 8025bb2:	f000 f985 	bl	8025ec0 <__sinit>
 8025bb6:	4b2e      	ldr	r3, [pc, #184]	; (8025c70 <__swsetup_r+0xd0>)
 8025bb8:	429c      	cmp	r4, r3
 8025bba:	d10f      	bne.n	8025bdc <__swsetup_r+0x3c>
 8025bbc:	686c      	ldr	r4, [r5, #4]
 8025bbe:	89a3      	ldrh	r3, [r4, #12]
 8025bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025bc4:	0719      	lsls	r1, r3, #28
 8025bc6:	d42c      	bmi.n	8025c22 <__swsetup_r+0x82>
 8025bc8:	06dd      	lsls	r5, r3, #27
 8025bca:	d411      	bmi.n	8025bf0 <__swsetup_r+0x50>
 8025bcc:	2309      	movs	r3, #9
 8025bce:	6033      	str	r3, [r6, #0]
 8025bd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025bd4:	81a3      	strh	r3, [r4, #12]
 8025bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8025bda:	e03e      	b.n	8025c5a <__swsetup_r+0xba>
 8025bdc:	4b25      	ldr	r3, [pc, #148]	; (8025c74 <__swsetup_r+0xd4>)
 8025bde:	429c      	cmp	r4, r3
 8025be0:	d101      	bne.n	8025be6 <__swsetup_r+0x46>
 8025be2:	68ac      	ldr	r4, [r5, #8]
 8025be4:	e7eb      	b.n	8025bbe <__swsetup_r+0x1e>
 8025be6:	4b24      	ldr	r3, [pc, #144]	; (8025c78 <__swsetup_r+0xd8>)
 8025be8:	429c      	cmp	r4, r3
 8025bea:	bf08      	it	eq
 8025bec:	68ec      	ldreq	r4, [r5, #12]
 8025bee:	e7e6      	b.n	8025bbe <__swsetup_r+0x1e>
 8025bf0:	0758      	lsls	r0, r3, #29
 8025bf2:	d512      	bpl.n	8025c1a <__swsetup_r+0x7a>
 8025bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025bf6:	b141      	cbz	r1, 8025c0a <__swsetup_r+0x6a>
 8025bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025bfc:	4299      	cmp	r1, r3
 8025bfe:	d002      	beq.n	8025c06 <__swsetup_r+0x66>
 8025c00:	4630      	mov	r0, r6
 8025c02:	f7ff fcd5 	bl	80255b0 <_free_r>
 8025c06:	2300      	movs	r3, #0
 8025c08:	6363      	str	r3, [r4, #52]	; 0x34
 8025c0a:	89a3      	ldrh	r3, [r4, #12]
 8025c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025c10:	81a3      	strh	r3, [r4, #12]
 8025c12:	2300      	movs	r3, #0
 8025c14:	6063      	str	r3, [r4, #4]
 8025c16:	6923      	ldr	r3, [r4, #16]
 8025c18:	6023      	str	r3, [r4, #0]
 8025c1a:	89a3      	ldrh	r3, [r4, #12]
 8025c1c:	f043 0308 	orr.w	r3, r3, #8
 8025c20:	81a3      	strh	r3, [r4, #12]
 8025c22:	6923      	ldr	r3, [r4, #16]
 8025c24:	b94b      	cbnz	r3, 8025c3a <__swsetup_r+0x9a>
 8025c26:	89a3      	ldrh	r3, [r4, #12]
 8025c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025c30:	d003      	beq.n	8025c3a <__swsetup_r+0x9a>
 8025c32:	4621      	mov	r1, r4
 8025c34:	4630      	mov	r0, r6
 8025c36:	f000 fa09 	bl	802604c <__smakebuf_r>
 8025c3a:	89a0      	ldrh	r0, [r4, #12]
 8025c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025c40:	f010 0301 	ands.w	r3, r0, #1
 8025c44:	d00a      	beq.n	8025c5c <__swsetup_r+0xbc>
 8025c46:	2300      	movs	r3, #0
 8025c48:	60a3      	str	r3, [r4, #8]
 8025c4a:	6963      	ldr	r3, [r4, #20]
 8025c4c:	425b      	negs	r3, r3
 8025c4e:	61a3      	str	r3, [r4, #24]
 8025c50:	6923      	ldr	r3, [r4, #16]
 8025c52:	b943      	cbnz	r3, 8025c66 <__swsetup_r+0xc6>
 8025c54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025c58:	d1ba      	bne.n	8025bd0 <__swsetup_r+0x30>
 8025c5a:	bd70      	pop	{r4, r5, r6, pc}
 8025c5c:	0781      	lsls	r1, r0, #30
 8025c5e:	bf58      	it	pl
 8025c60:	6963      	ldrpl	r3, [r4, #20]
 8025c62:	60a3      	str	r3, [r4, #8]
 8025c64:	e7f4      	b.n	8025c50 <__swsetup_r+0xb0>
 8025c66:	2000      	movs	r0, #0
 8025c68:	e7f7      	b.n	8025c5a <__swsetup_r+0xba>
 8025c6a:	bf00      	nop
 8025c6c:	2000000c 	.word	0x2000000c
 8025c70:	08026874 	.word	0x08026874
 8025c74:	08026894 	.word	0x08026894
 8025c78:	08026854 	.word	0x08026854

08025c7c <abort>:
 8025c7c:	b508      	push	{r3, lr}
 8025c7e:	2006      	movs	r0, #6
 8025c80:	f000 fa4c 	bl	802611c <raise>
 8025c84:	2001      	movs	r0, #1
 8025c86:	f7fb fcf9 	bl	802167c <_exit>
	...

08025c8c <__sflush_r>:
 8025c8c:	898a      	ldrh	r2, [r1, #12]
 8025c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c92:	4605      	mov	r5, r0
 8025c94:	0710      	lsls	r0, r2, #28
 8025c96:	460c      	mov	r4, r1
 8025c98:	d458      	bmi.n	8025d4c <__sflush_r+0xc0>
 8025c9a:	684b      	ldr	r3, [r1, #4]
 8025c9c:	2b00      	cmp	r3, #0
 8025c9e:	dc05      	bgt.n	8025cac <__sflush_r+0x20>
 8025ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	dc02      	bgt.n	8025cac <__sflush_r+0x20>
 8025ca6:	2000      	movs	r0, #0
 8025ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025cae:	2e00      	cmp	r6, #0
 8025cb0:	d0f9      	beq.n	8025ca6 <__sflush_r+0x1a>
 8025cb2:	2300      	movs	r3, #0
 8025cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025cb8:	682f      	ldr	r7, [r5, #0]
 8025cba:	602b      	str	r3, [r5, #0]
 8025cbc:	d032      	beq.n	8025d24 <__sflush_r+0x98>
 8025cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025cc0:	89a3      	ldrh	r3, [r4, #12]
 8025cc2:	075a      	lsls	r2, r3, #29
 8025cc4:	d505      	bpl.n	8025cd2 <__sflush_r+0x46>
 8025cc6:	6863      	ldr	r3, [r4, #4]
 8025cc8:	1ac0      	subs	r0, r0, r3
 8025cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025ccc:	b10b      	cbz	r3, 8025cd2 <__sflush_r+0x46>
 8025cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025cd0:	1ac0      	subs	r0, r0, r3
 8025cd2:	2300      	movs	r3, #0
 8025cd4:	4602      	mov	r2, r0
 8025cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025cd8:	6a21      	ldr	r1, [r4, #32]
 8025cda:	4628      	mov	r0, r5
 8025cdc:	47b0      	blx	r6
 8025cde:	1c43      	adds	r3, r0, #1
 8025ce0:	89a3      	ldrh	r3, [r4, #12]
 8025ce2:	d106      	bne.n	8025cf2 <__sflush_r+0x66>
 8025ce4:	6829      	ldr	r1, [r5, #0]
 8025ce6:	291d      	cmp	r1, #29
 8025ce8:	d82c      	bhi.n	8025d44 <__sflush_r+0xb8>
 8025cea:	4a2a      	ldr	r2, [pc, #168]	; (8025d94 <__sflush_r+0x108>)
 8025cec:	40ca      	lsrs	r2, r1
 8025cee:	07d6      	lsls	r6, r2, #31
 8025cf0:	d528      	bpl.n	8025d44 <__sflush_r+0xb8>
 8025cf2:	2200      	movs	r2, #0
 8025cf4:	6062      	str	r2, [r4, #4]
 8025cf6:	04d9      	lsls	r1, r3, #19
 8025cf8:	6922      	ldr	r2, [r4, #16]
 8025cfa:	6022      	str	r2, [r4, #0]
 8025cfc:	d504      	bpl.n	8025d08 <__sflush_r+0x7c>
 8025cfe:	1c42      	adds	r2, r0, #1
 8025d00:	d101      	bne.n	8025d06 <__sflush_r+0x7a>
 8025d02:	682b      	ldr	r3, [r5, #0]
 8025d04:	b903      	cbnz	r3, 8025d08 <__sflush_r+0x7c>
 8025d06:	6560      	str	r0, [r4, #84]	; 0x54
 8025d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025d0a:	602f      	str	r7, [r5, #0]
 8025d0c:	2900      	cmp	r1, #0
 8025d0e:	d0ca      	beq.n	8025ca6 <__sflush_r+0x1a>
 8025d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025d14:	4299      	cmp	r1, r3
 8025d16:	d002      	beq.n	8025d1e <__sflush_r+0x92>
 8025d18:	4628      	mov	r0, r5
 8025d1a:	f7ff fc49 	bl	80255b0 <_free_r>
 8025d1e:	2000      	movs	r0, #0
 8025d20:	6360      	str	r0, [r4, #52]	; 0x34
 8025d22:	e7c1      	b.n	8025ca8 <__sflush_r+0x1c>
 8025d24:	6a21      	ldr	r1, [r4, #32]
 8025d26:	2301      	movs	r3, #1
 8025d28:	4628      	mov	r0, r5
 8025d2a:	47b0      	blx	r6
 8025d2c:	1c41      	adds	r1, r0, #1
 8025d2e:	d1c7      	bne.n	8025cc0 <__sflush_r+0x34>
 8025d30:	682b      	ldr	r3, [r5, #0]
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	d0c4      	beq.n	8025cc0 <__sflush_r+0x34>
 8025d36:	2b1d      	cmp	r3, #29
 8025d38:	d001      	beq.n	8025d3e <__sflush_r+0xb2>
 8025d3a:	2b16      	cmp	r3, #22
 8025d3c:	d101      	bne.n	8025d42 <__sflush_r+0xb6>
 8025d3e:	602f      	str	r7, [r5, #0]
 8025d40:	e7b1      	b.n	8025ca6 <__sflush_r+0x1a>
 8025d42:	89a3      	ldrh	r3, [r4, #12]
 8025d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d48:	81a3      	strh	r3, [r4, #12]
 8025d4a:	e7ad      	b.n	8025ca8 <__sflush_r+0x1c>
 8025d4c:	690f      	ldr	r7, [r1, #16]
 8025d4e:	2f00      	cmp	r7, #0
 8025d50:	d0a9      	beq.n	8025ca6 <__sflush_r+0x1a>
 8025d52:	0793      	lsls	r3, r2, #30
 8025d54:	680e      	ldr	r6, [r1, #0]
 8025d56:	bf08      	it	eq
 8025d58:	694b      	ldreq	r3, [r1, #20]
 8025d5a:	600f      	str	r7, [r1, #0]
 8025d5c:	bf18      	it	ne
 8025d5e:	2300      	movne	r3, #0
 8025d60:	eba6 0807 	sub.w	r8, r6, r7
 8025d64:	608b      	str	r3, [r1, #8]
 8025d66:	f1b8 0f00 	cmp.w	r8, #0
 8025d6a:	dd9c      	ble.n	8025ca6 <__sflush_r+0x1a>
 8025d6c:	6a21      	ldr	r1, [r4, #32]
 8025d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025d70:	4643      	mov	r3, r8
 8025d72:	463a      	mov	r2, r7
 8025d74:	4628      	mov	r0, r5
 8025d76:	47b0      	blx	r6
 8025d78:	2800      	cmp	r0, #0
 8025d7a:	dc06      	bgt.n	8025d8a <__sflush_r+0xfe>
 8025d7c:	89a3      	ldrh	r3, [r4, #12]
 8025d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d82:	81a3      	strh	r3, [r4, #12]
 8025d84:	f04f 30ff 	mov.w	r0, #4294967295
 8025d88:	e78e      	b.n	8025ca8 <__sflush_r+0x1c>
 8025d8a:	4407      	add	r7, r0
 8025d8c:	eba8 0800 	sub.w	r8, r8, r0
 8025d90:	e7e9      	b.n	8025d66 <__sflush_r+0xda>
 8025d92:	bf00      	nop
 8025d94:	20400001 	.word	0x20400001

08025d98 <_fflush_r>:
 8025d98:	b538      	push	{r3, r4, r5, lr}
 8025d9a:	690b      	ldr	r3, [r1, #16]
 8025d9c:	4605      	mov	r5, r0
 8025d9e:	460c      	mov	r4, r1
 8025da0:	b913      	cbnz	r3, 8025da8 <_fflush_r+0x10>
 8025da2:	2500      	movs	r5, #0
 8025da4:	4628      	mov	r0, r5
 8025da6:	bd38      	pop	{r3, r4, r5, pc}
 8025da8:	b118      	cbz	r0, 8025db2 <_fflush_r+0x1a>
 8025daa:	6983      	ldr	r3, [r0, #24]
 8025dac:	b90b      	cbnz	r3, 8025db2 <_fflush_r+0x1a>
 8025dae:	f000 f887 	bl	8025ec0 <__sinit>
 8025db2:	4b14      	ldr	r3, [pc, #80]	; (8025e04 <_fflush_r+0x6c>)
 8025db4:	429c      	cmp	r4, r3
 8025db6:	d11b      	bne.n	8025df0 <_fflush_r+0x58>
 8025db8:	686c      	ldr	r4, [r5, #4]
 8025dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025dbe:	2b00      	cmp	r3, #0
 8025dc0:	d0ef      	beq.n	8025da2 <_fflush_r+0xa>
 8025dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025dc4:	07d0      	lsls	r0, r2, #31
 8025dc6:	d404      	bmi.n	8025dd2 <_fflush_r+0x3a>
 8025dc8:	0599      	lsls	r1, r3, #22
 8025dca:	d402      	bmi.n	8025dd2 <_fflush_r+0x3a>
 8025dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025dce:	f000 f915 	bl	8025ffc <__retarget_lock_acquire_recursive>
 8025dd2:	4628      	mov	r0, r5
 8025dd4:	4621      	mov	r1, r4
 8025dd6:	f7ff ff59 	bl	8025c8c <__sflush_r>
 8025dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025ddc:	07da      	lsls	r2, r3, #31
 8025dde:	4605      	mov	r5, r0
 8025de0:	d4e0      	bmi.n	8025da4 <_fflush_r+0xc>
 8025de2:	89a3      	ldrh	r3, [r4, #12]
 8025de4:	059b      	lsls	r3, r3, #22
 8025de6:	d4dd      	bmi.n	8025da4 <_fflush_r+0xc>
 8025de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025dea:	f000 f908 	bl	8025ffe <__retarget_lock_release_recursive>
 8025dee:	e7d9      	b.n	8025da4 <_fflush_r+0xc>
 8025df0:	4b05      	ldr	r3, [pc, #20]	; (8025e08 <_fflush_r+0x70>)
 8025df2:	429c      	cmp	r4, r3
 8025df4:	d101      	bne.n	8025dfa <_fflush_r+0x62>
 8025df6:	68ac      	ldr	r4, [r5, #8]
 8025df8:	e7df      	b.n	8025dba <_fflush_r+0x22>
 8025dfa:	4b04      	ldr	r3, [pc, #16]	; (8025e0c <_fflush_r+0x74>)
 8025dfc:	429c      	cmp	r4, r3
 8025dfe:	bf08      	it	eq
 8025e00:	68ec      	ldreq	r4, [r5, #12]
 8025e02:	e7da      	b.n	8025dba <_fflush_r+0x22>
 8025e04:	08026874 	.word	0x08026874
 8025e08:	08026894 	.word	0x08026894
 8025e0c:	08026854 	.word	0x08026854

08025e10 <std>:
 8025e10:	2300      	movs	r3, #0
 8025e12:	b510      	push	{r4, lr}
 8025e14:	4604      	mov	r4, r0
 8025e16:	e9c0 3300 	strd	r3, r3, [r0]
 8025e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025e1e:	6083      	str	r3, [r0, #8]
 8025e20:	8181      	strh	r1, [r0, #12]
 8025e22:	6643      	str	r3, [r0, #100]	; 0x64
 8025e24:	81c2      	strh	r2, [r0, #14]
 8025e26:	6183      	str	r3, [r0, #24]
 8025e28:	4619      	mov	r1, r3
 8025e2a:	2208      	movs	r2, #8
 8025e2c:	305c      	adds	r0, #92	; 0x5c
 8025e2e:	f7fd fd2b 	bl	8023888 <memset>
 8025e32:	4b05      	ldr	r3, [pc, #20]	; (8025e48 <std+0x38>)
 8025e34:	6263      	str	r3, [r4, #36]	; 0x24
 8025e36:	4b05      	ldr	r3, [pc, #20]	; (8025e4c <std+0x3c>)
 8025e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8025e3a:	4b05      	ldr	r3, [pc, #20]	; (8025e50 <std+0x40>)
 8025e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025e3e:	4b05      	ldr	r3, [pc, #20]	; (8025e54 <std+0x44>)
 8025e40:	6224      	str	r4, [r4, #32]
 8025e42:	6323      	str	r3, [r4, #48]	; 0x30
 8025e44:	bd10      	pop	{r4, pc}
 8025e46:	bf00      	nop
 8025e48:	08026155 	.word	0x08026155
 8025e4c:	08026177 	.word	0x08026177
 8025e50:	080261af 	.word	0x080261af
 8025e54:	080261d3 	.word	0x080261d3

08025e58 <_cleanup_r>:
 8025e58:	4901      	ldr	r1, [pc, #4]	; (8025e60 <_cleanup_r+0x8>)
 8025e5a:	f000 b8af 	b.w	8025fbc <_fwalk_reent>
 8025e5e:	bf00      	nop
 8025e60:	08025d99 	.word	0x08025d99

08025e64 <__sfmoreglue>:
 8025e64:	b570      	push	{r4, r5, r6, lr}
 8025e66:	2268      	movs	r2, #104	; 0x68
 8025e68:	1e4d      	subs	r5, r1, #1
 8025e6a:	4355      	muls	r5, r2
 8025e6c:	460e      	mov	r6, r1
 8025e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025e72:	f7ff fc09 	bl	8025688 <_malloc_r>
 8025e76:	4604      	mov	r4, r0
 8025e78:	b140      	cbz	r0, 8025e8c <__sfmoreglue+0x28>
 8025e7a:	2100      	movs	r1, #0
 8025e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8025e80:	300c      	adds	r0, #12
 8025e82:	60a0      	str	r0, [r4, #8]
 8025e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025e88:	f7fd fcfe 	bl	8023888 <memset>
 8025e8c:	4620      	mov	r0, r4
 8025e8e:	bd70      	pop	{r4, r5, r6, pc}

08025e90 <__sfp_lock_acquire>:
 8025e90:	4801      	ldr	r0, [pc, #4]	; (8025e98 <__sfp_lock_acquire+0x8>)
 8025e92:	f000 b8b3 	b.w	8025ffc <__retarget_lock_acquire_recursive>
 8025e96:	bf00      	nop
 8025e98:	2000020d 	.word	0x2000020d

08025e9c <__sfp_lock_release>:
 8025e9c:	4801      	ldr	r0, [pc, #4]	; (8025ea4 <__sfp_lock_release+0x8>)
 8025e9e:	f000 b8ae 	b.w	8025ffe <__retarget_lock_release_recursive>
 8025ea2:	bf00      	nop
 8025ea4:	2000020d 	.word	0x2000020d

08025ea8 <__sinit_lock_acquire>:
 8025ea8:	4801      	ldr	r0, [pc, #4]	; (8025eb0 <__sinit_lock_acquire+0x8>)
 8025eaa:	f000 b8a7 	b.w	8025ffc <__retarget_lock_acquire_recursive>
 8025eae:	bf00      	nop
 8025eb0:	2000020e 	.word	0x2000020e

08025eb4 <__sinit_lock_release>:
 8025eb4:	4801      	ldr	r0, [pc, #4]	; (8025ebc <__sinit_lock_release+0x8>)
 8025eb6:	f000 b8a2 	b.w	8025ffe <__retarget_lock_release_recursive>
 8025eba:	bf00      	nop
 8025ebc:	2000020e 	.word	0x2000020e

08025ec0 <__sinit>:
 8025ec0:	b510      	push	{r4, lr}
 8025ec2:	4604      	mov	r4, r0
 8025ec4:	f7ff fff0 	bl	8025ea8 <__sinit_lock_acquire>
 8025ec8:	69a3      	ldr	r3, [r4, #24]
 8025eca:	b11b      	cbz	r3, 8025ed4 <__sinit+0x14>
 8025ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ed0:	f7ff bff0 	b.w	8025eb4 <__sinit_lock_release>
 8025ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8025eda:	4b13      	ldr	r3, [pc, #76]	; (8025f28 <__sinit+0x68>)
 8025edc:	4a13      	ldr	r2, [pc, #76]	; (8025f2c <__sinit+0x6c>)
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8025ee2:	42a3      	cmp	r3, r4
 8025ee4:	bf04      	itt	eq
 8025ee6:	2301      	moveq	r3, #1
 8025ee8:	61a3      	streq	r3, [r4, #24]
 8025eea:	4620      	mov	r0, r4
 8025eec:	f000 f820 	bl	8025f30 <__sfp>
 8025ef0:	6060      	str	r0, [r4, #4]
 8025ef2:	4620      	mov	r0, r4
 8025ef4:	f000 f81c 	bl	8025f30 <__sfp>
 8025ef8:	60a0      	str	r0, [r4, #8]
 8025efa:	4620      	mov	r0, r4
 8025efc:	f000 f818 	bl	8025f30 <__sfp>
 8025f00:	2200      	movs	r2, #0
 8025f02:	60e0      	str	r0, [r4, #12]
 8025f04:	2104      	movs	r1, #4
 8025f06:	6860      	ldr	r0, [r4, #4]
 8025f08:	f7ff ff82 	bl	8025e10 <std>
 8025f0c:	68a0      	ldr	r0, [r4, #8]
 8025f0e:	2201      	movs	r2, #1
 8025f10:	2109      	movs	r1, #9
 8025f12:	f7ff ff7d 	bl	8025e10 <std>
 8025f16:	68e0      	ldr	r0, [r4, #12]
 8025f18:	2202      	movs	r2, #2
 8025f1a:	2112      	movs	r1, #18
 8025f1c:	f7ff ff78 	bl	8025e10 <std>
 8025f20:	2301      	movs	r3, #1
 8025f22:	61a3      	str	r3, [r4, #24]
 8025f24:	e7d2      	b.n	8025ecc <__sinit+0xc>
 8025f26:	bf00      	nop
 8025f28:	080264dc 	.word	0x080264dc
 8025f2c:	08025e59 	.word	0x08025e59

08025f30 <__sfp>:
 8025f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f32:	4607      	mov	r7, r0
 8025f34:	f7ff ffac 	bl	8025e90 <__sfp_lock_acquire>
 8025f38:	4b1e      	ldr	r3, [pc, #120]	; (8025fb4 <__sfp+0x84>)
 8025f3a:	681e      	ldr	r6, [r3, #0]
 8025f3c:	69b3      	ldr	r3, [r6, #24]
 8025f3e:	b913      	cbnz	r3, 8025f46 <__sfp+0x16>
 8025f40:	4630      	mov	r0, r6
 8025f42:	f7ff ffbd 	bl	8025ec0 <__sinit>
 8025f46:	3648      	adds	r6, #72	; 0x48
 8025f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025f4c:	3b01      	subs	r3, #1
 8025f4e:	d503      	bpl.n	8025f58 <__sfp+0x28>
 8025f50:	6833      	ldr	r3, [r6, #0]
 8025f52:	b30b      	cbz	r3, 8025f98 <__sfp+0x68>
 8025f54:	6836      	ldr	r6, [r6, #0]
 8025f56:	e7f7      	b.n	8025f48 <__sfp+0x18>
 8025f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025f5c:	b9d5      	cbnz	r5, 8025f94 <__sfp+0x64>
 8025f5e:	4b16      	ldr	r3, [pc, #88]	; (8025fb8 <__sfp+0x88>)
 8025f60:	60e3      	str	r3, [r4, #12]
 8025f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025f66:	6665      	str	r5, [r4, #100]	; 0x64
 8025f68:	f000 f847 	bl	8025ffa <__retarget_lock_init_recursive>
 8025f6c:	f7ff ff96 	bl	8025e9c <__sfp_lock_release>
 8025f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025f78:	6025      	str	r5, [r4, #0]
 8025f7a:	61a5      	str	r5, [r4, #24]
 8025f7c:	2208      	movs	r2, #8
 8025f7e:	4629      	mov	r1, r5
 8025f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025f84:	f7fd fc80 	bl	8023888 <memset>
 8025f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025f90:	4620      	mov	r0, r4
 8025f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025f94:	3468      	adds	r4, #104	; 0x68
 8025f96:	e7d9      	b.n	8025f4c <__sfp+0x1c>
 8025f98:	2104      	movs	r1, #4
 8025f9a:	4638      	mov	r0, r7
 8025f9c:	f7ff ff62 	bl	8025e64 <__sfmoreglue>
 8025fa0:	4604      	mov	r4, r0
 8025fa2:	6030      	str	r0, [r6, #0]
 8025fa4:	2800      	cmp	r0, #0
 8025fa6:	d1d5      	bne.n	8025f54 <__sfp+0x24>
 8025fa8:	f7ff ff78 	bl	8025e9c <__sfp_lock_release>
 8025fac:	230c      	movs	r3, #12
 8025fae:	603b      	str	r3, [r7, #0]
 8025fb0:	e7ee      	b.n	8025f90 <__sfp+0x60>
 8025fb2:	bf00      	nop
 8025fb4:	080264dc 	.word	0x080264dc
 8025fb8:	ffff0001 	.word	0xffff0001

08025fbc <_fwalk_reent>:
 8025fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025fc0:	4606      	mov	r6, r0
 8025fc2:	4688      	mov	r8, r1
 8025fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025fc8:	2700      	movs	r7, #0
 8025fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025fce:	f1b9 0901 	subs.w	r9, r9, #1
 8025fd2:	d505      	bpl.n	8025fe0 <_fwalk_reent+0x24>
 8025fd4:	6824      	ldr	r4, [r4, #0]
 8025fd6:	2c00      	cmp	r4, #0
 8025fd8:	d1f7      	bne.n	8025fca <_fwalk_reent+0xe>
 8025fda:	4638      	mov	r0, r7
 8025fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025fe0:	89ab      	ldrh	r3, [r5, #12]
 8025fe2:	2b01      	cmp	r3, #1
 8025fe4:	d907      	bls.n	8025ff6 <_fwalk_reent+0x3a>
 8025fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025fea:	3301      	adds	r3, #1
 8025fec:	d003      	beq.n	8025ff6 <_fwalk_reent+0x3a>
 8025fee:	4629      	mov	r1, r5
 8025ff0:	4630      	mov	r0, r6
 8025ff2:	47c0      	blx	r8
 8025ff4:	4307      	orrs	r7, r0
 8025ff6:	3568      	adds	r5, #104	; 0x68
 8025ff8:	e7e9      	b.n	8025fce <_fwalk_reent+0x12>

08025ffa <__retarget_lock_init_recursive>:
 8025ffa:	4770      	bx	lr

08025ffc <__retarget_lock_acquire_recursive>:
 8025ffc:	4770      	bx	lr

08025ffe <__retarget_lock_release_recursive>:
 8025ffe:	4770      	bx	lr

08026000 <__swhatbuf_r>:
 8026000:	b570      	push	{r4, r5, r6, lr}
 8026002:	460e      	mov	r6, r1
 8026004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026008:	2900      	cmp	r1, #0
 802600a:	b096      	sub	sp, #88	; 0x58
 802600c:	4614      	mov	r4, r2
 802600e:	461d      	mov	r5, r3
 8026010:	da08      	bge.n	8026024 <__swhatbuf_r+0x24>
 8026012:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026016:	2200      	movs	r2, #0
 8026018:	602a      	str	r2, [r5, #0]
 802601a:	061a      	lsls	r2, r3, #24
 802601c:	d410      	bmi.n	8026040 <__swhatbuf_r+0x40>
 802601e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026022:	e00e      	b.n	8026042 <__swhatbuf_r+0x42>
 8026024:	466a      	mov	r2, sp
 8026026:	f000 f8fb 	bl	8026220 <_fstat_r>
 802602a:	2800      	cmp	r0, #0
 802602c:	dbf1      	blt.n	8026012 <__swhatbuf_r+0x12>
 802602e:	9a01      	ldr	r2, [sp, #4]
 8026030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026038:	425a      	negs	r2, r3
 802603a:	415a      	adcs	r2, r3
 802603c:	602a      	str	r2, [r5, #0]
 802603e:	e7ee      	b.n	802601e <__swhatbuf_r+0x1e>
 8026040:	2340      	movs	r3, #64	; 0x40
 8026042:	2000      	movs	r0, #0
 8026044:	6023      	str	r3, [r4, #0]
 8026046:	b016      	add	sp, #88	; 0x58
 8026048:	bd70      	pop	{r4, r5, r6, pc}
	...

0802604c <__smakebuf_r>:
 802604c:	898b      	ldrh	r3, [r1, #12]
 802604e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026050:	079d      	lsls	r5, r3, #30
 8026052:	4606      	mov	r6, r0
 8026054:	460c      	mov	r4, r1
 8026056:	d507      	bpl.n	8026068 <__smakebuf_r+0x1c>
 8026058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802605c:	6023      	str	r3, [r4, #0]
 802605e:	6123      	str	r3, [r4, #16]
 8026060:	2301      	movs	r3, #1
 8026062:	6163      	str	r3, [r4, #20]
 8026064:	b002      	add	sp, #8
 8026066:	bd70      	pop	{r4, r5, r6, pc}
 8026068:	ab01      	add	r3, sp, #4
 802606a:	466a      	mov	r2, sp
 802606c:	f7ff ffc8 	bl	8026000 <__swhatbuf_r>
 8026070:	9900      	ldr	r1, [sp, #0]
 8026072:	4605      	mov	r5, r0
 8026074:	4630      	mov	r0, r6
 8026076:	f7ff fb07 	bl	8025688 <_malloc_r>
 802607a:	b948      	cbnz	r0, 8026090 <__smakebuf_r+0x44>
 802607c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026080:	059a      	lsls	r2, r3, #22
 8026082:	d4ef      	bmi.n	8026064 <__smakebuf_r+0x18>
 8026084:	f023 0303 	bic.w	r3, r3, #3
 8026088:	f043 0302 	orr.w	r3, r3, #2
 802608c:	81a3      	strh	r3, [r4, #12]
 802608e:	e7e3      	b.n	8026058 <__smakebuf_r+0xc>
 8026090:	4b0d      	ldr	r3, [pc, #52]	; (80260c8 <__smakebuf_r+0x7c>)
 8026092:	62b3      	str	r3, [r6, #40]	; 0x28
 8026094:	89a3      	ldrh	r3, [r4, #12]
 8026096:	6020      	str	r0, [r4, #0]
 8026098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802609c:	81a3      	strh	r3, [r4, #12]
 802609e:	9b00      	ldr	r3, [sp, #0]
 80260a0:	6163      	str	r3, [r4, #20]
 80260a2:	9b01      	ldr	r3, [sp, #4]
 80260a4:	6120      	str	r0, [r4, #16]
 80260a6:	b15b      	cbz	r3, 80260c0 <__smakebuf_r+0x74>
 80260a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80260ac:	4630      	mov	r0, r6
 80260ae:	f000 f8c9 	bl	8026244 <_isatty_r>
 80260b2:	b128      	cbz	r0, 80260c0 <__smakebuf_r+0x74>
 80260b4:	89a3      	ldrh	r3, [r4, #12]
 80260b6:	f023 0303 	bic.w	r3, r3, #3
 80260ba:	f043 0301 	orr.w	r3, r3, #1
 80260be:	81a3      	strh	r3, [r4, #12]
 80260c0:	89a0      	ldrh	r0, [r4, #12]
 80260c2:	4305      	orrs	r5, r0
 80260c4:	81a5      	strh	r5, [r4, #12]
 80260c6:	e7cd      	b.n	8026064 <__smakebuf_r+0x18>
 80260c8:	08025e59 	.word	0x08025e59

080260cc <_raise_r>:
 80260cc:	291f      	cmp	r1, #31
 80260ce:	b538      	push	{r3, r4, r5, lr}
 80260d0:	4604      	mov	r4, r0
 80260d2:	460d      	mov	r5, r1
 80260d4:	d904      	bls.n	80260e0 <_raise_r+0x14>
 80260d6:	2316      	movs	r3, #22
 80260d8:	6003      	str	r3, [r0, #0]
 80260da:	f04f 30ff 	mov.w	r0, #4294967295
 80260de:	bd38      	pop	{r3, r4, r5, pc}
 80260e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80260e2:	b112      	cbz	r2, 80260ea <_raise_r+0x1e>
 80260e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80260e8:	b94b      	cbnz	r3, 80260fe <_raise_r+0x32>
 80260ea:	4620      	mov	r0, r4
 80260ec:	f000 f830 	bl	8026150 <_getpid_r>
 80260f0:	462a      	mov	r2, r5
 80260f2:	4601      	mov	r1, r0
 80260f4:	4620      	mov	r0, r4
 80260f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80260fa:	f000 b817 	b.w	802612c <_kill_r>
 80260fe:	2b01      	cmp	r3, #1
 8026100:	d00a      	beq.n	8026118 <_raise_r+0x4c>
 8026102:	1c59      	adds	r1, r3, #1
 8026104:	d103      	bne.n	802610e <_raise_r+0x42>
 8026106:	2316      	movs	r3, #22
 8026108:	6003      	str	r3, [r0, #0]
 802610a:	2001      	movs	r0, #1
 802610c:	e7e7      	b.n	80260de <_raise_r+0x12>
 802610e:	2400      	movs	r4, #0
 8026110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026114:	4628      	mov	r0, r5
 8026116:	4798      	blx	r3
 8026118:	2000      	movs	r0, #0
 802611a:	e7e0      	b.n	80260de <_raise_r+0x12>

0802611c <raise>:
 802611c:	4b02      	ldr	r3, [pc, #8]	; (8026128 <raise+0xc>)
 802611e:	4601      	mov	r1, r0
 8026120:	6818      	ldr	r0, [r3, #0]
 8026122:	f7ff bfd3 	b.w	80260cc <_raise_r>
 8026126:	bf00      	nop
 8026128:	2000000c 	.word	0x2000000c

0802612c <_kill_r>:
 802612c:	b538      	push	{r3, r4, r5, lr}
 802612e:	4d07      	ldr	r5, [pc, #28]	; (802614c <_kill_r+0x20>)
 8026130:	2300      	movs	r3, #0
 8026132:	4604      	mov	r4, r0
 8026134:	4608      	mov	r0, r1
 8026136:	4611      	mov	r1, r2
 8026138:	602b      	str	r3, [r5, #0]
 802613a:	f7fb fa8f 	bl	802165c <_kill>
 802613e:	1c43      	adds	r3, r0, #1
 8026140:	d102      	bne.n	8026148 <_kill_r+0x1c>
 8026142:	682b      	ldr	r3, [r5, #0]
 8026144:	b103      	cbz	r3, 8026148 <_kill_r+0x1c>
 8026146:	6023      	str	r3, [r4, #0]
 8026148:	bd38      	pop	{r3, r4, r5, pc}
 802614a:	bf00      	nop
 802614c:	20000208 	.word	0x20000208

08026150 <_getpid_r>:
 8026150:	f7fb ba7c 	b.w	802164c <_getpid>

08026154 <__sread>:
 8026154:	b510      	push	{r4, lr}
 8026156:	460c      	mov	r4, r1
 8026158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802615c:	f000 f894 	bl	8026288 <_read_r>
 8026160:	2800      	cmp	r0, #0
 8026162:	bfab      	itete	ge
 8026164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026166:	89a3      	ldrhlt	r3, [r4, #12]
 8026168:	181b      	addge	r3, r3, r0
 802616a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802616e:	bfac      	ite	ge
 8026170:	6563      	strge	r3, [r4, #84]	; 0x54
 8026172:	81a3      	strhlt	r3, [r4, #12]
 8026174:	bd10      	pop	{r4, pc}

08026176 <__swrite>:
 8026176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802617a:	461f      	mov	r7, r3
 802617c:	898b      	ldrh	r3, [r1, #12]
 802617e:	05db      	lsls	r3, r3, #23
 8026180:	4605      	mov	r5, r0
 8026182:	460c      	mov	r4, r1
 8026184:	4616      	mov	r6, r2
 8026186:	d505      	bpl.n	8026194 <__swrite+0x1e>
 8026188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802618c:	2302      	movs	r3, #2
 802618e:	2200      	movs	r2, #0
 8026190:	f000 f868 	bl	8026264 <_lseek_r>
 8026194:	89a3      	ldrh	r3, [r4, #12]
 8026196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802619a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802619e:	81a3      	strh	r3, [r4, #12]
 80261a0:	4632      	mov	r2, r6
 80261a2:	463b      	mov	r3, r7
 80261a4:	4628      	mov	r0, r5
 80261a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80261aa:	f000 b817 	b.w	80261dc <_write_r>

080261ae <__sseek>:
 80261ae:	b510      	push	{r4, lr}
 80261b0:	460c      	mov	r4, r1
 80261b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261b6:	f000 f855 	bl	8026264 <_lseek_r>
 80261ba:	1c43      	adds	r3, r0, #1
 80261bc:	89a3      	ldrh	r3, [r4, #12]
 80261be:	bf15      	itete	ne
 80261c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80261c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80261c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80261ca:	81a3      	strheq	r3, [r4, #12]
 80261cc:	bf18      	it	ne
 80261ce:	81a3      	strhne	r3, [r4, #12]
 80261d0:	bd10      	pop	{r4, pc}

080261d2 <__sclose>:
 80261d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261d6:	f000 b813 	b.w	8026200 <_close_r>
	...

080261dc <_write_r>:
 80261dc:	b538      	push	{r3, r4, r5, lr}
 80261de:	4d07      	ldr	r5, [pc, #28]	; (80261fc <_write_r+0x20>)
 80261e0:	4604      	mov	r4, r0
 80261e2:	4608      	mov	r0, r1
 80261e4:	4611      	mov	r1, r2
 80261e6:	2200      	movs	r2, #0
 80261e8:	602a      	str	r2, [r5, #0]
 80261ea:	461a      	mov	r2, r3
 80261ec:	f7fb fa6d 	bl	80216ca <_write>
 80261f0:	1c43      	adds	r3, r0, #1
 80261f2:	d102      	bne.n	80261fa <_write_r+0x1e>
 80261f4:	682b      	ldr	r3, [r5, #0]
 80261f6:	b103      	cbz	r3, 80261fa <_write_r+0x1e>
 80261f8:	6023      	str	r3, [r4, #0]
 80261fa:	bd38      	pop	{r3, r4, r5, pc}
 80261fc:	20000208 	.word	0x20000208

08026200 <_close_r>:
 8026200:	b538      	push	{r3, r4, r5, lr}
 8026202:	4d06      	ldr	r5, [pc, #24]	; (802621c <_close_r+0x1c>)
 8026204:	2300      	movs	r3, #0
 8026206:	4604      	mov	r4, r0
 8026208:	4608      	mov	r0, r1
 802620a:	602b      	str	r3, [r5, #0]
 802620c:	f7fb fa79 	bl	8021702 <_close>
 8026210:	1c43      	adds	r3, r0, #1
 8026212:	d102      	bne.n	802621a <_close_r+0x1a>
 8026214:	682b      	ldr	r3, [r5, #0]
 8026216:	b103      	cbz	r3, 802621a <_close_r+0x1a>
 8026218:	6023      	str	r3, [r4, #0]
 802621a:	bd38      	pop	{r3, r4, r5, pc}
 802621c:	20000208 	.word	0x20000208

08026220 <_fstat_r>:
 8026220:	b538      	push	{r3, r4, r5, lr}
 8026222:	4d07      	ldr	r5, [pc, #28]	; (8026240 <_fstat_r+0x20>)
 8026224:	2300      	movs	r3, #0
 8026226:	4604      	mov	r4, r0
 8026228:	4608      	mov	r0, r1
 802622a:	4611      	mov	r1, r2
 802622c:	602b      	str	r3, [r5, #0]
 802622e:	f7fb fa74 	bl	802171a <_fstat>
 8026232:	1c43      	adds	r3, r0, #1
 8026234:	d102      	bne.n	802623c <_fstat_r+0x1c>
 8026236:	682b      	ldr	r3, [r5, #0]
 8026238:	b103      	cbz	r3, 802623c <_fstat_r+0x1c>
 802623a:	6023      	str	r3, [r4, #0]
 802623c:	bd38      	pop	{r3, r4, r5, pc}
 802623e:	bf00      	nop
 8026240:	20000208 	.word	0x20000208

08026244 <_isatty_r>:
 8026244:	b538      	push	{r3, r4, r5, lr}
 8026246:	4d06      	ldr	r5, [pc, #24]	; (8026260 <_isatty_r+0x1c>)
 8026248:	2300      	movs	r3, #0
 802624a:	4604      	mov	r4, r0
 802624c:	4608      	mov	r0, r1
 802624e:	602b      	str	r3, [r5, #0]
 8026250:	f7fb fa73 	bl	802173a <_isatty>
 8026254:	1c43      	adds	r3, r0, #1
 8026256:	d102      	bne.n	802625e <_isatty_r+0x1a>
 8026258:	682b      	ldr	r3, [r5, #0]
 802625a:	b103      	cbz	r3, 802625e <_isatty_r+0x1a>
 802625c:	6023      	str	r3, [r4, #0]
 802625e:	bd38      	pop	{r3, r4, r5, pc}
 8026260:	20000208 	.word	0x20000208

08026264 <_lseek_r>:
 8026264:	b538      	push	{r3, r4, r5, lr}
 8026266:	4d07      	ldr	r5, [pc, #28]	; (8026284 <_lseek_r+0x20>)
 8026268:	4604      	mov	r4, r0
 802626a:	4608      	mov	r0, r1
 802626c:	4611      	mov	r1, r2
 802626e:	2200      	movs	r2, #0
 8026270:	602a      	str	r2, [r5, #0]
 8026272:	461a      	mov	r2, r3
 8026274:	f7fb fa6c 	bl	8021750 <_lseek>
 8026278:	1c43      	adds	r3, r0, #1
 802627a:	d102      	bne.n	8026282 <_lseek_r+0x1e>
 802627c:	682b      	ldr	r3, [r5, #0]
 802627e:	b103      	cbz	r3, 8026282 <_lseek_r+0x1e>
 8026280:	6023      	str	r3, [r4, #0]
 8026282:	bd38      	pop	{r3, r4, r5, pc}
 8026284:	20000208 	.word	0x20000208

08026288 <_read_r>:
 8026288:	b538      	push	{r3, r4, r5, lr}
 802628a:	4d07      	ldr	r5, [pc, #28]	; (80262a8 <_read_r+0x20>)
 802628c:	4604      	mov	r4, r0
 802628e:	4608      	mov	r0, r1
 8026290:	4611      	mov	r1, r2
 8026292:	2200      	movs	r2, #0
 8026294:	602a      	str	r2, [r5, #0]
 8026296:	461a      	mov	r2, r3
 8026298:	f7fb f9fa 	bl	8021690 <_read>
 802629c:	1c43      	adds	r3, r0, #1
 802629e:	d102      	bne.n	80262a6 <_read_r+0x1e>
 80262a0:	682b      	ldr	r3, [r5, #0]
 80262a2:	b103      	cbz	r3, 80262a6 <_read_r+0x1e>
 80262a4:	6023      	str	r3, [r4, #0]
 80262a6:	bd38      	pop	{r3, r4, r5, pc}
 80262a8:	20000208 	.word	0x20000208

080262ac <sqrtf>:
 80262ac:	b508      	push	{r3, lr}
 80262ae:	ed2d 8b02 	vpush	{d8}
 80262b2:	eeb0 8a40 	vmov.f32	s16, s0
 80262b6:	f000 f817 	bl	80262e8 <__ieee754_sqrtf>
 80262ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80262be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262c2:	d60c      	bvs.n	80262de <sqrtf+0x32>
 80262c4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80262e4 <sqrtf+0x38>
 80262c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80262cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262d0:	d505      	bpl.n	80262de <sqrtf+0x32>
 80262d2:	f7fd faa1 	bl	8023818 <__errno>
 80262d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80262da:	2321      	movs	r3, #33	; 0x21
 80262dc:	6003      	str	r3, [r0, #0]
 80262de:	ecbd 8b02 	vpop	{d8}
 80262e2:	bd08      	pop	{r3, pc}
 80262e4:	00000000 	.word	0x00000000

080262e8 <__ieee754_sqrtf>:
 80262e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80262ec:	4770      	bx	lr
	...

080262f0 <_init>:
 80262f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262f2:	bf00      	nop
 80262f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80262f6:	bc08      	pop	{r3}
 80262f8:	469e      	mov	lr, r3
 80262fa:	4770      	bx	lr

080262fc <_fini>:
 80262fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262fe:	bf00      	nop
 8026300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026302:	bc08      	pop	{r3}
 8026304:	469e      	mov	lr, r3
 8026306:	4770      	bx	lr
