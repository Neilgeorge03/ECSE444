
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009530  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080096f0  080096f0  000196f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b44  08009b44  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200001dc  08009d28  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08009d28  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a834  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d79  00000000  00000000  0003aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0003d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  0003ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e2c8  00000000  00000000  00040378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ad5  00000000  00000000  0006e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e1e9  00000000  00000000  00088115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a62fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007060  00000000  00000000  001a6350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080096d8 	.word	0x080096d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	080096d8 	.word	0x080096d8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f001 f9ef 	bl	80022c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f81e 	bl	8000f24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ee8:	f000 f87e 	bl	8000fe8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 fbd4 	bl	8001698 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ef0:	f000 f8aa 	bl	8001048 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000ef4:	f000 f90c 	bl	8001110 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000ef8:	f000 f942 	bl	8001180 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000efc:	f000 f980 	bl	8001200 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000f00:	f000 f9be 	bl	8001280 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000f04:	f000 fa12 	bl	800132c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000f08:	f000 fa4e 	bl	80013a8 <MX_SPI3_Init>
  MX_UART4_Init();
 8000f0c:	f000 fa8a 	bl	8001424 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000f10:	f000 fad4 	bl	80014bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f14:	f000 fb1e 	bl	8001554 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f18:	f000 fb6a 	bl	80015f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000f1c:	f000 fbb4 	bl	8001688 <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <main+0x44>
	...

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	; 0x58
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2244      	movs	r2, #68	; 0x44
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f005 feb0 	bl	8006c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f46:	2000      	movs	r0, #0
 8000f48:	f003 fb30 	bl	80045ac <HAL_PWREx_ControlVoltageScaling>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f52:	f000 fce3 	bl	800191c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f56:	f003 faf9 	bl	800454c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <SystemClock_Config+0xc0>)
 8000f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f60:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <SystemClock_Config+0xc0>)
 8000f62:	f023 0318 	bic.w	r3, r3, #24
 8000f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f6a:	2314      	movs	r3, #20
 8000f6c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f7a:	2360      	movs	r3, #96	; 0x60
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f8a:	233c      	movs	r3, #60	; 0x3c
 8000f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fba8 	bl	80046f4 <HAL_RCC_OscConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000faa:	f000 fcb7 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 ffae 	bl	8004f28 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000fd2:	f000 fca3 	bl	800191c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fd6:	f004 fd95 	bl	8005b04 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fda:	bf00      	nop
 8000fdc:	3758      	adds	r7, #88	; 0x58
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a6      	sub	sp, #152	; 0x98
 8000fec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2294      	movs	r2, #148	; 0x94
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 fe4f 	bl	8006c98 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000ffa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ffe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001008:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800100c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800100e:	2301      	movs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001016:	2318      	movs	r3, #24
 8001018:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001026:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800102a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f004 fa38 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800103a:	f000 fc6f 	bl	800191c <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3798      	adds	r7, #152	; 0x98
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_ADC1_Init+0xbc>)
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <MX_ADC1_Init+0xc0>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <MX_ADC1_Init+0xbc>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_ADC1_Init+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <MX_ADC1_Init+0xbc>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_ADC1_Init+0xbc>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <MX_ADC1_Init+0xbc>)
 800107e:	2204      	movs	r2, #4
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_ADC1_Init+0xbc>)
 8001084:	2200      	movs	r2, #0
 8001086:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_ADC1_Init+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_ADC1_Init+0xbc>)
 8001090:	2201      	movs	r2, #1
 8001092:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_ADC1_Init+0xbc>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_ADC1_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_ADC1_Init+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_ADC1_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_ADC1_Init+0xbc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_ADC1_Init+0xbc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_ADC1_Init+0xbc>)
 80010c0:	f001 fb14 	bl	80026ec <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010ca:	f000 fc27 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_ADC1_Init+0xc4>)
 80010d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d2:	2306      	movs	r3, #6
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010da:	237f      	movs	r3, #127	; 0x7f
 80010dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010de:	2304      	movs	r3, #4
 80010e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_ADC1_Init+0xbc>)
 80010ec:	f001 fc4a 	bl	8002984 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010f6:	f000 fc11 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f8 	.word	0x200001f8
 8001108:	50040000 	.word	0x50040000
 800110c:	04300002 	.word	0x04300002

08001110 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <MX_DFSDM1_Init+0x6c>)
 8001118:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_DFSDM1_Init+0x68>)
 800111c:	2201      	movs	r2, #1
 800111e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001128:	2202      	movs	r2, #2
 800112a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_DFSDM1_Init+0x68>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_DFSDM1_Init+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001146:	2204      	movs	r2, #4
 8001148:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_DFSDM1_Init+0x68>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001152:	2201      	movs	r2, #1
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001158:	2200      	movs	r2, #0
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_DFSDM1_Init+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_DFSDM1_Init+0x68>)
 8001164:	f002 f91c 	bl	80033a0 <HAL_DFSDM_ChannelInit>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800116e:	f000 fbd5 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000260 	.word	0x20000260
 800117c:	40016040 	.word	0x40016040

08001180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_I2C1_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_I2C1_Init+0x74>)
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_I2C1_Init+0x7c>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001198:	2201      	movs	r2, #1
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011bc:	f002 fbc9 	bl	8003952 <HAL_I2C_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011c6:	f000 fba9 	bl	800191c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011ce:	f002 fc4f 	bl	8003a70 <HAL_I2CEx_ConfigAnalogFilter>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d8:	f000 fba0 	bl	800191c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011e0:	f002 fc91 	bl	8003b06 <HAL_I2CEx_ConfigDigitalFilter>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fb97 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000298 	.word	0x20000298
 80011f8:	40005400 	.word	0x40005400
 80011fc:	307075b1 	.word	0x307075b1

08001200 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C2_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C2_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C2_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C2_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C2_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C2_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C2_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C2_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C2_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C2_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C2_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C2_Init+0x74>)
 800123c:	f002 fb89 	bl	8003952 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fb69 	bl	800191c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C2_Init+0x74>)
 800124e:	f002 fc0f 	bl	8003a70 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fb60 	bl	800191c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C2_Init+0x74>)
 8001260:	f002 fc51 	bl	8003b06 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fb57 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002ec 	.word	0x200002ec
 8001278:	40005800 	.word	0x40005800
 800127c:	307075b1 	.word	0x307075b1

08001280 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 8001296:	4a24      	ldr	r2, [pc, #144]	; (8001328 <MX_OCTOSPI1_Init+0xa8>)
 8001298:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 800129c:	2201      	movs	r2, #1
 800129e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012ac:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012b0:	2220      	movs	r2, #32
 80012b2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012e0:	2208      	movs	r2, #8
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 80012e6:	f002 fc5b 	bl	8003ba0 <HAL_OSPI_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80012f0:	f000 fb14 	bl	800191c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80012fc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001300:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	f241 3288 	movw	r2, #5000	; 0x1388
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_OCTOSPI1_Init+0xa4>)
 800130c:	f002 fd02 	bl	8003d14 <HAL_OSPIM_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001316:	f000 fb01 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000340 	.word	0x20000340
 8001328:	a0001000 	.word	0xa0001000

0800132c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001332:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <MX_SPI1_Init+0x78>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800133c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001346:	f44f 7240 	mov.w	r2, #768	; 0x300
 800134a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_SPI1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_SPI1_Init+0x74>)
 800135a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001362:	2208      	movs	r2, #8
 8001364:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_SPI1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_SPI1_Init+0x74>)
 800137a:	2207      	movs	r2, #7
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_SPI1_Init+0x74>)
 8001386:	2208      	movs	r2, #8
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_SPI1_Init+0x74>)
 800138c:	f004 fdb2 	bl	8005ef4 <HAL_SPI_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001396:	f000 fac1 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000390 	.word	0x20000390
 80013a4:	40013000 	.word	0x40013000

080013a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_SPI3_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_SPI3_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_SPI3_Init+0x74>)
 80013b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_SPI3_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_SPI3_Init+0x74>)
 80013c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_SPI3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_SPI3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_SPI3_Init+0x74>)
 80013d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_SPI3_Init+0x74>)
 80013de:	2208      	movs	r2, #8
 80013e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_SPI3_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_SPI3_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_SPI3_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_SPI3_Init+0x74>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_SPI3_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_SPI3_Init+0x74>)
 8001402:	2208      	movs	r2, #8
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_SPI3_Init+0x74>)
 8001408:	f004 fd74 	bl	8005ef4 <HAL_SPI_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001412:	f000 fa83 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200003f4 	.word	0x200003f4
 8001420:	40003c00 	.word	0x40003c00

08001424 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_UART4_Init+0x90>)
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <MX_UART4_Init+0x94>)
 800142c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_UART4_Init+0x90>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_UART4_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_UART4_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_UART4_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_UART4_Init+0x90>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_UART4_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_UART4_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_UART4_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_UART4_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_UART4_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_UART4_Init+0x90>)
 800146e:	f004 fde4 	bl	800603a <HAL_UART_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001478:	f000 fa50 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_UART4_Init+0x90>)
 8001480:	f005 fb16 	bl	8006ab0 <HAL_UARTEx_SetTxFifoThreshold>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800148a:	f000 fa47 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <MX_UART4_Init+0x90>)
 8001492:	f005 fb4b 	bl	8006b2c <HAL_UARTEx_SetRxFifoThreshold>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800149c:	f000 fa3e 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_UART4_Init+0x90>)
 80014a2:	f005 facc 	bl	8006a3e <HAL_UARTEx_DisableFifoMode>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014ac:	f000 fa36 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000458 	.word	0x20000458
 80014b8:	40004c00 	.word	0x40004c00

080014bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <MX_USART1_UART_Init+0x94>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_USART1_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <MX_USART1_UART_Init+0x90>)
 8001506:	f004 fd98 	bl	800603a <HAL_UART_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001510:	f000 fa04 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_USART1_UART_Init+0x90>)
 8001518:	f005 faca 	bl	8006ab0 <HAL_UARTEx_SetTxFifoThreshold>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001522:	f000 f9fb 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <MX_USART1_UART_Init+0x90>)
 800152a:	f005 faff 	bl	8006b2c <HAL_UARTEx_SetRxFifoThreshold>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001534:	f000 f9f2 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_USART1_UART_Init+0x90>)
 800153a:	f005 fa80 	bl	8006a3e <HAL_UARTEx_DisableFifoMode>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001544:	f000 f9ea 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200004e8 	.word	0x200004e8
 8001550:	40013800 	.word	0x40013800

08001554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800155a:	4a24      	ldr	r2, [pc, #144]	; (80015ec <MX_USART2_UART_Init+0x98>)
 800155c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001580:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001584:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 80015a0:	f004 fd4b 	bl	800603a <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80015aa:	f000 f9b7 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ae:	2100      	movs	r1, #0
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 80015b2:	f005 fa7d 	bl	8006ab0 <HAL_UARTEx_SetTxFifoThreshold>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80015bc:	f000 f9ae 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	4809      	ldr	r0, [pc, #36]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 80015c4:	f005 fab2 	bl	8006b2c <HAL_UARTEx_SetRxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80015ce:	f000 f9a5 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 80015d4:	f005 fa33 	bl	8006a3e <HAL_UARTEx_DisableFifoMode>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80015de:	f000 f99d 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000578 	.word	0x20000578
 80015ec:	40004400 	.word	0x40004400

080015f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_USART3_UART_Init+0x90>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <MX_USART3_UART_Init+0x94>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_USART3_UART_Init+0x90>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_USART3_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_USART3_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_USART3_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_USART3_UART_Init+0x90>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_USART3_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_USART3_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_USART3_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_USART3_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_USART3_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <MX_USART3_UART_Init+0x90>)
 800163a:	f004 fcfe 	bl	800603a <HAL_UART_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 f96a 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <MX_USART3_UART_Init+0x90>)
 800164c:	f005 fa30 	bl	8006ab0 <HAL_UARTEx_SetTxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001656:	f000 f961 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <MX_USART3_UART_Init+0x90>)
 800165e:	f005 fa65 	bl	8006b2c <HAL_UARTEx_SetRxFifoThreshold>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001668:	f000 f958 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_USART3_UART_Init+0x90>)
 800166e:	f005 f9e6 	bl	8006a3e <HAL_UARTEx_DisableFifoMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 f950 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000608 	.word	0x20000608
 8001684:	40004800 	.word	0x40004800

08001688 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	4b96      	ldr	r3, [pc, #600]	; (8001908 <MX_GPIO_Init+0x270>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a95      	ldr	r2, [pc, #596]	; (8001908 <MX_GPIO_Init+0x270>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b93      	ldr	r3, [pc, #588]	; (8001908 <MX_GPIO_Init+0x270>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	4b90      	ldr	r3, [pc, #576]	; (8001908 <MX_GPIO_Init+0x270>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a8f      	ldr	r2, [pc, #572]	; (8001908 <MX_GPIO_Init+0x270>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b8d      	ldr	r3, [pc, #564]	; (8001908 <MX_GPIO_Init+0x270>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	4b8a      	ldr	r3, [pc, #552]	; (8001908 <MX_GPIO_Init+0x270>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a89      	ldr	r2, [pc, #548]	; (8001908 <MX_GPIO_Init+0x270>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b87      	ldr	r3, [pc, #540]	; (8001908 <MX_GPIO_Init+0x270>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b84      	ldr	r3, [pc, #528]	; (8001908 <MX_GPIO_Init+0x270>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a83      	ldr	r2, [pc, #524]	; (8001908 <MX_GPIO_Init+0x270>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b81      	ldr	r3, [pc, #516]	; (8001908 <MX_GPIO_Init+0x270>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	4b7e      	ldr	r3, [pc, #504]	; (8001908 <MX_GPIO_Init+0x270>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a7d      	ldr	r2, [pc, #500]	; (8001908 <MX_GPIO_Init+0x270>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b7b      	ldr	r3, [pc, #492]	; (8001908 <MX_GPIO_Init+0x270>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001726:	4b78      	ldr	r3, [pc, #480]	; (8001908 <MX_GPIO_Init+0x270>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a77      	ldr	r2, [pc, #476]	; (8001908 <MX_GPIO_Init+0x270>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <MX_GPIO_Init+0x270>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f240 1105 	movw	r1, #261	; 0x105
 8001744:	4871      	ldr	r0, [pc, #452]	; (800190c <MX_GPIO_Init+0x274>)
 8001746:	f002 f8c9 	bl	80038dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800174a:	2200      	movs	r2, #0
 800174c:	f248 111c 	movw	r1, #33052	; 0x811c
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f002 f8c2 	bl	80038dc <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001758:	2200      	movs	r2, #0
 800175a:	f24f 0134 	movw	r1, #61492	; 0xf034
 800175e:	486c      	ldr	r0, [pc, #432]	; (8001910 <MX_GPIO_Init+0x278>)
 8001760:	f002 f8bc 	bl	80038dc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	f242 0183 	movw	r1, #8323	; 0x2083
 800176a:	486a      	ldr	r0, [pc, #424]	; (8001914 <MX_GPIO_Init+0x27c>)
 800176c:	f002 f8b6 	bl	80038dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001776:	4868      	ldr	r0, [pc, #416]	; (8001918 <MX_GPIO_Init+0x280>)
 8001778:	f002 f8b0 	bl	80038dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800177c:	f240 1305 	movw	r3, #261	; 0x105
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	485d      	ldr	r0, [pc, #372]	; (800190c <MX_GPIO_Init+0x274>)
 8001796:	f001 ff0f 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800179a:	237a      	movs	r3, #122	; 0x7a
 800179c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4857      	ldr	r0, [pc, #348]	; (800190c <MX_GPIO_Init+0x274>)
 80017b0:	f001 ff02 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80017b4:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4853      	ldr	r0, [pc, #332]	; (8001918 <MX_GPIO_Init+0x280>)
 80017cc:	f001 fef4 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80017d0:	f248 131c 	movw	r3, #33052	; 0x811c
 80017d4:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f001 fee4 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4842      	ldr	r0, [pc, #264]	; (8001910 <MX_GPIO_Init+0x278>)
 8001806:	f001 fed7 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800180a:	2302      	movs	r3, #2
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800181a:	2302      	movs	r3, #2
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	483a      	ldr	r0, [pc, #232]	; (8001910 <MX_GPIO_Init+0x278>)
 8001826:	f001 fec7 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800182a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800182e:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	4833      	ldr	r0, [pc, #204]	; (8001910 <MX_GPIO_Init+0x278>)
 8001844:	f001 feb8 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001848:	f64d 4304 	movw	r3, #56324	; 0xdc04
 800184c:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	482d      	ldr	r0, [pc, #180]	; (8001914 <MX_GPIO_Init+0x27c>)
 8001860:	f001 feaa 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001864:	f242 0383 	movw	r3, #8323	; 0x2083
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4825      	ldr	r0, [pc, #148]	; (8001914 <MX_GPIO_Init+0x27c>)
 800187e:	f001 fe9b 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001882:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	481f      	ldr	r0, [pc, #124]	; (8001918 <MX_GPIO_Init+0x280>)
 800189c:	f001 fe8c 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80018a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f001 fe7e 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80018bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ce:	230a      	movs	r3, #10
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018dc:	f001 fe6c 	bl	80035b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2017      	movs	r0, #23
 80018e6:	f001 fd24 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018ea:	2017      	movs	r0, #23
 80018ec:	f001 fd3d 	bl	800336a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2028      	movs	r0, #40	; 0x28
 80018f6:	f001 fd1c 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018fa:	2028      	movs	r0, #40	; 0x28
 80018fc:	f001 fd35 	bl	800336a <HAL_NVIC_EnableIRQ>

}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	48001000 	.word	0x48001000
 8001910:	48000400 	.word	0x48000400
 8001914:	48000c00 	.word	0x48000c00
 8001918:	48000800 	.word	0x48000800

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	e7fe      	b.n	8001924 <Error_Handler+0x8>
	...

08001928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_MspInit+0x44>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_MspInit+0x44>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6613      	str	r3, [r2, #96]	; 0x60
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_MspInit+0x44>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x44>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x44>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6593      	str	r3, [r2, #88]	; 0x58
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x44>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <HAL_ADC_MspInit+0x74>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d123      	bne.n	80019da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_ADC_MspInit+0x78>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_ADC_MspInit+0x78>)
 8001998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_ADC_MspInit+0x78>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_ADC_MspInit+0x78>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_ADC_MspInit+0x78>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_ADC_MspInit+0x78>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80019c2:	233f      	movs	r3, #63	; 0x3f
 80019c4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019c6:	230b      	movs	r3, #11
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_ADC_MspInit+0x7c>)
 80019d6:	f001 fdef 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	50040000 	.word	0x50040000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000800 	.word	0x48000800

080019f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0ae      	sub	sp, #184	; 0xb8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	2294      	movs	r2, #148	; 0x94
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f005 f941 	bl	8006c98 <memset>
  if(DFSDM1_Init == 0)
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d142      	bne.n	8001aa4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fd38 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001a3a:	f7ff ff6f 	bl	800191c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a48:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001a6e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001a96:	f001 fd8f 	bl	80035b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a02      	ldr	r2, [pc, #8]	; (8001aac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001aa2:	6013      	str	r3, [r2, #0]
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	37b8      	adds	r7, #184	; 0xb8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000698 	.word	0x20000698
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48001000 	.word	0x48001000

08001ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0b0      	sub	sp, #192	; 0xc0
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	2294      	movs	r2, #148	; 0x94
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 f8dd 	bl	8006c98 <memset>
  if(hi2c->Instance==I2C1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a42      	ldr	r2, [pc, #264]	; (8001bec <HAL_I2C_MspInit+0x134>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d13c      	bne.n	8001b62 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fcd5 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b00:	f7ff ff0c 	bl	800191c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001b1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b24:	2312      	movs	r3, #18
 8001b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b36:	2304      	movs	r3, #4
 8001b38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b40:	4619      	mov	r1, r3
 8001b42:	482c      	ldr	r0, [pc, #176]	; (8001bf4 <HAL_I2C_MspInit+0x13c>)
 8001b44:	f001 fd38 	bl	80035b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b52:	6593      	str	r3, [r2, #88]	; 0x58
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b60:	e040      	b.n	8001be4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d13b      	bne.n	8001be4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fc93 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001b84:	f7ff feca 	bl	800191c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001ba0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <HAL_I2C_MspInit+0x13c>)
 8001bc8:	f001 fcf6 	bl	80035b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_I2C_MspInit+0x138>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
}
 8001be4:	bf00      	nop
 8001be6:	37c0      	adds	r7, #192	; 0xc0
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	40005800 	.word	0x40005800

08001bfc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0b0      	sub	sp, #192	; 0xc0
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	2294      	movs	r2, #148	; 0x94
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 f83b 	bl	8006c98 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <HAL_OSPI_MspInit+0xcc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d149      	bne.n	8001cc0 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fc31 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001c48:	f7ff fe68 	bl	800191c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c68:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6513      	str	r3, [r2, #80]	; 0x50
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_OSPI_MspInit+0xd0>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001c94:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001cae:	230a      	movs	r3, #10
 8001cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_OSPI_MspInit+0xd4>)
 8001cbc:	f001 fc7c 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	37c0      	adds	r7, #192	; 0xc0
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	a0001000 	.word	0xa0001000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48001000 	.word	0x48001000

08001cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <HAL_SPI_MspInit+0xdc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d129      	bne.n	8001d4a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d00:	6613      	str	r3, [r2, #96]	; 0x60
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001d26:	23e0      	movs	r3, #224	; 0xe0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d36:	2305      	movs	r3, #5
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d44:	f001 fc38 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d48:	e02d      	b.n	8001da6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <HAL_SPI_MspInit+0xe4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d128      	bne.n	8001da6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_SPI_MspInit+0xe0>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001d84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d96:	2306      	movs	r3, #6
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4806      	ldr	r0, [pc, #24]	; (8001dbc <HAL_SPI_MspInit+0xe8>)
 8001da2:	f001 fc09 	bl	80035b8 <HAL_GPIO_Init>
}
 8001da6:	bf00      	nop
 8001da8:	3730      	adds	r7, #48	; 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40013000 	.word	0x40013000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40003c00 	.word	0x40003c00
 8001dbc:	48000800 	.word	0x48000800

08001dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0b4      	sub	sp, #208	; 0xd0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ddc:	2294      	movs	r2, #148	; 0x94
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 ff59 	bl	8006c98 <memset>
  if(huart->Instance==UART4)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a83      	ldr	r2, [pc, #524]	; (8001ff8 <HAL_UART_MspInit+0x238>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d13c      	bne.n	8001e6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001df0:	2308      	movs	r3, #8
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fb51 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e08:	f7ff fd88 	bl	800191c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	4a7a      	ldr	r2, [pc, #488]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e16:	6593      	str	r3, [r2, #88]	; 0x58
 8001e18:	4b78      	ldr	r3, [pc, #480]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	4a74      	ldr	r2, [pc, #464]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e30:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e54:	2308      	movs	r3, #8
 8001e56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f001 fba8 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e68:	e0c2      	b.n	8001ff0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a64      	ldr	r2, [pc, #400]	; (8002000 <HAL_UART_MspInit+0x240>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d13b      	bne.n	8001eec <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fb0f 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001e8c:	f7ff fd46 	bl	800191c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e90:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e94:	4a59      	ldr	r2, [pc, #356]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9c:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea8:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb4:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed8:	2307      	movs	r3, #7
 8001eda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4847      	ldr	r0, [pc, #284]	; (8002004 <HAL_UART_MspInit+0x244>)
 8001ee6:	f001 fb67 	bl	80035b8 <HAL_GPIO_Init>
}
 8001eea:	e081      	b.n	8001ff0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a45      	ldr	r2, [pc, #276]	; (8002008 <HAL_UART_MspInit+0x248>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d13b      	bne.n	8001f6e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 face 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001f0e:	f7ff fd05 	bl	800191c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4a39      	ldr	r2, [pc, #228]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001f42:	2378      	movs	r3, #120	; 0x78
 8001f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f64:	4619      	mov	r1, r3
 8001f66:	4829      	ldr	r0, [pc, #164]	; (800200c <HAL_UART_MspInit+0x24c>)
 8001f68:	f001 fb26 	bl	80035b8 <HAL_GPIO_Init>
}
 8001f6c:	e040      	b.n	8001ff0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a27      	ldr	r2, [pc, #156]	; (8002010 <HAL_UART_MspInit+0x250>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d13b      	bne.n	8001ff0 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 fa8d 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001f90:	f7ff fcc4 	bl	800191c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_UART_MspInit+0x23c>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001fc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fde:	2307      	movs	r3, #7
 8001fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <HAL_UART_MspInit+0x24c>)
 8001fec:	f001 fae4 	bl	80035b8 <HAL_GPIO_Init>
}
 8001ff0:	bf00      	nop
 8001ff2:	37d0      	adds	r7, #208	; 0xd0
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40004c00 	.word	0x40004c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40013800 	.word	0x40013800
 8002004:	48000400 	.word	0x48000400
 8002008:	40004400 	.word	0x40004400
 800200c:	48000c00 	.word	0x48000c00
 8002010:	40004800 	.word	0x40004800

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler+0x4>

0800201a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler+0x4>

08002026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler+0x4>

08002032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002060:	f000 f984 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800206c:	2020      	movs	r0, #32
 800206e:	f001 fc4d 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002072:	2040      	movs	r0, #64	; 0x40
 8002074:	f001 fc4a 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002078:	2080      	movs	r0, #128	; 0x80
 800207a:	f001 fc47 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800207e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002082:	f001 fc43 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}

0800208a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800208e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002092:	f001 fc3b 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002096:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800209a:	f001 fc37 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800209e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020a2:	f001 fc33 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80020a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020aa:	f001 fc2f 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80020ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020b2:	f001 fc2b 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80020b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020ba:	f001 fc27 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
	return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_kill>:

int _kill(int pid, int sig)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020dc:	f004 fdb2 	bl	8006c44 <__errno>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2216      	movs	r2, #22
 80020e4:	601a      	str	r2, [r3, #0]
	return -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_exit>:

void _exit (int status)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020fa:	f04f 31ff 	mov.w	r1, #4294967295
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffe7 	bl	80020d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002104:	e7fe      	b.n	8002104 <_exit+0x12>

08002106 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e00a      	b.n	800212e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002118:	f3af 8000 	nop.w
 800211c:	4601      	mov	r1, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	b2ca      	uxtb	r2, r1
 8002126:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	dbf0      	blt.n	8002118 <_read+0x12>
	}

return len;
 8002136:	687b      	ldr	r3, [r7, #4]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e009      	b.n	8002166 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	60ba      	str	r2, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbf1      	blt.n	8002152 <_write+0x12>
	}
	return len;
 800216e:	687b      	ldr	r3, [r7, #4]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_close>:

int _close(int file)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a0:	605a      	str	r2, [r3, #4]
	return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_isatty>:

int _isatty(int file)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
	return 0;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f004 fd18 	bl	8006c44 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200a0000 	.word	0x200a0000
 8002240:	00000400 	.word	0x00000400
 8002244:	2000069c 	.word	0x2000069c
 8002248:	200006d8 	.word	0x200006d8

0800224c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemInit+0x20>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <SystemInit+0x20>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002274:	f7ff ffea 	bl	800224c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <LoopForever+0x6>)
  ldr r1, =_edata
 800227a:	490d      	ldr	r1, [pc, #52]	; (80022b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <LoopForever+0xe>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002290:	4c0a      	ldr	r4, [pc, #40]	; (80022bc <LoopForever+0x16>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f004 fcd7 	bl	8006c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a2:	f7fe fe1b 	bl	8000edc <main>

080022a6 <LoopForever>:

LoopForever:
    b LoopForever
 80022a6:	e7fe      	b.n	80022a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022a8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022b4:	08009b4c 	.word	0x08009b4c
  ldr r2, =_sbss
 80022b8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022bc:	200006d8 	.word	0x200006d8

080022c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_IRQHandler>

080022c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f001 f825 	bl	800331c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f80e 	bl	80022f4 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	e001      	b.n	80022e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e4:	f7ff fb20 	bl	8001928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_InitTick+0x6c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d023      	beq.n	8002350 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_InitTick+0x70>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_InitTick+0x6c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f001 f831 	bl	8003386 <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d809      	bhi.n	8002344 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f000 fffb 	bl	8003332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_InitTick+0x74>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e007      	b.n	8002354 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e004      	b.n	8002354 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e001      	b.n	8002354 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000008 	.word	0x20000008
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000008 	.word	0x20000008
 8002390:	200006a0 	.word	0x200006a0

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	200006a0 	.word	0x200006a0

080023ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3360      	adds	r3, #96	; 0x60
 8002426:	461a      	mov	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <LL_ADC_SetOffset+0x44>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	4313      	orrs	r3, r2
 8002444:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	03fff000 	.word	0x03fff000

0800245c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3360      	adds	r3, #96	; 0x60
 800246a:	461a      	mov	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3360      	adds	r3, #96	; 0x60
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	615a      	str	r2, [r3, #20]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3330      	adds	r3, #48	; 0x30
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	4413      	add	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	211f      	movs	r1, #31
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	f003 011f 	and.w	r1, r3, #31
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	431a      	orrs	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3314      	adds	r3, #20
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0e5b      	lsrs	r3, r3, #25
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	4413      	add	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	0d1b      	lsrs	r3, r3, #20
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2107      	movs	r1, #7
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0d1b      	lsrs	r3, r3, #20
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	431a      	orrs	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0318 	and.w	r3, r3, #24
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b8:	40d9      	lsrs	r1, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	400b      	ands	r3, r1
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	0007ffff 	.word	0x0007ffff

080025dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6093      	str	r3, [r2, #8]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d101      	bne.n	800261a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800263c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002664:	d101      	bne.n	800266a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <LL_ADC_IsEnabled+0x18>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <LL_ADC_IsEnabled+0x1a>
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d101      	bne.n	80026b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d101      	bne.n	80026dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e12f      	b.n	8002966 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff f92b 	bl	8001970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff67 	bl	8002600 <LL_ADC_IsDeepPowerDownEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff4d 	bl	80025dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff82 	bl	8002650 <LL_ADC_IsInternalRegulatorEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff66 	bl	8002628 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800275c:	4b84      	ldr	r3, [pc, #528]	; (8002970 <HAL_ADC_Init+0x284>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	4a84      	ldr	r2, [pc, #528]	; (8002974 <HAL_ADC_Init+0x288>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002770:	e002      	b.n	8002778 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff64 	bl	8002650 <LL_ADC_IsInternalRegulatorEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f043 0210 	orr.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff75 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 80027b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80c8 	bne.w	8002954 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80c4 	bne.w	8002954 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027d4:	f043 0202 	orr.w	r2, r3, #2
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff49 	bl	8002678 <LL_ADC_IsEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ec:	4862      	ldr	r0, [pc, #392]	; (8002978 <HAL_ADC_Init+0x28c>)
 80027ee:	f7ff ff43 	bl	8002678 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4619      	mov	r1, r3
 80027fe:	485f      	ldr	r0, [pc, #380]	; (800297c <HAL_ADC_Init+0x290>)
 8002800:	f7ff fdd4 	bl	80023ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7e5b      	ldrb	r3, [r3, #25]
 8002808:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800280e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002814:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800281a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002822:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	3b01      	subs	r3, #1
 8002838:	045b      	lsls	r3, r3, #17
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_ADC_Init+0x294>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	430b      	orrs	r3, r1
 800286e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff12 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 800287a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff1f 	bl	80026c4 <LL_ADC_INJ_IsConversionOngoing>
 8002886:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d140      	bne.n	8002910 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d13d      	bne.n	8002910 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7e1b      	ldrb	r3, [r3, #24]
 800289c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800289e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b6:	f023 0306 	bic.w	r3, r3, #6
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	69b9      	ldr	r1, [r7, #24]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d118      	bne.n	8002900 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028f0:	430a      	orrs	r2, r1
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	e007      	b.n	8002910 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d10c      	bne.n	8002932 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f023 010f 	bic.w	r1, r3, #15
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	1e5a      	subs	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
 8002930:	e007      	b.n	8002942 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 020f 	bic.w	r2, r2, #15
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	f043 0201 	orr.w	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	659a      	str	r2, [r3, #88]	; 0x58
 8002952:	e007      	b.n	8002964 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f043 0210 	orr.w	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002964:	7ffb      	ldrb	r3, [r7, #31]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000
 8002974:	053e2d63 	.word	0x053e2d63
 8002978:	50040000 	.word	0x50040000
 800297c:	50040300 	.word	0x50040300
 8002980:	fff0c007 	.word	0xfff0c007

08002984 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0b6      	sub	sp, #216	; 0xd8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x22>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e3d5      	b.n	8003152 <HAL_ADC_ConfigChannel+0x7ce>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fe73 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 83ba 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d824      	bhi.n	8002a12 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	3b02      	subs	r3, #2
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d81b      	bhi.n	8002a0a <HAL_ADC_ConfigChannel+0x86>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <HAL_ADC_ConfigChannel+0x54>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	080029f1 	.word	0x080029f1
 80029e0:	080029f9 	.word	0x080029f9
 80029e4:	08002a01 	.word	0x08002a01
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	220c      	movs	r2, #12
 80029ec:	605a      	str	r2, [r3, #4]
          break;
 80029ee:	e011      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2212      	movs	r2, #18
 80029f4:	605a      	str	r2, [r3, #4]
          break;
 80029f6:	e00d      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2218      	movs	r2, #24
 80029fc:	605a      	str	r2, [r3, #4]
          break;
 80029fe:	e009      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a06:	605a      	str	r2, [r3, #4]
          break;
 8002a08:	e004      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2206      	movs	r2, #6
 8002a0e:	605a      	str	r2, [r3, #4]
          break;
 8002a10:	e000      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a12:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	f7ff fd5f 	bl	80024e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fe37 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 8002a30:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fe43 	bl	80026c4 <LL_ADC_INJ_IsConversionOngoing>
 8002a3e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 81c1 	bne.w	8002dce <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 81bc 	bne.w	8002dce <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a5e:	d10f      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f7ff fd66 	bl	800253c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fd20 	bl	80024be <LL_ADC_SetSamplingTimeCommonConfig>
 8002a7e:	e00e      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fd55 	bl	800253c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fd10 	bl	80024be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00a      	beq.n	8002ad6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6919      	ldr	r1, [r3, #16]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ad0:	f7ff fca0 	bl	8002414 <LL_ADC_SetOffset>
 8002ad4:	e17b      	b.n	8002dce <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fcbd 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x17e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fcb2 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	e01e      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x1bc>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fca7 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e004      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1d4>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	e018      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x206>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e004      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d106      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fc76 	bl	8002488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fc5a 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x244>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fc4f 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 021f 	and.w	r2, r3, #31
 8002bc6:	e01e      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x282>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fc44 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e004      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x29a>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	e018      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x2cc>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e004      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d106      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fc13 	bl	8002488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fbf7 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x30a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fbec 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	0e9b      	lsrs	r3, r3, #26
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	e01e      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x348>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2102      	movs	r1, #2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fbe1 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e004      	b.n	8002cca <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x360>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	e016      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x38e>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e004      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d106      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fbb2 	bl	8002488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2103      	movs	r1, #3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb96 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x3cc>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2103      	movs	r1, #3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fb8b 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	f003 021f 	and.w	r2, r3, #31
 8002d4e:	e017      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x3fc>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2103      	movs	r1, #3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fb80 	bl	800245c <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d6a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002d72:	2320      	movs	r3, #32
 8002d74:	e003      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x414>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	e011      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x438>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d106      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fb5d 	bl	8002488 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc50 	bl	8002678 <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 8140 	bne.w	8003060 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f7ff fbd1 	bl	8002594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a8f      	ldr	r2, [pc, #572]	; (8003034 <HAL_ADC_ConfigChannel+0x6b0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	f040 8131 	bne.w	8003060 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x4a2>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0e9b      	lsrs	r3, r3, #26
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2b09      	cmp	r3, #9
 8002e1c:	bf94      	ite	ls
 8002e1e:	2301      	movls	r3, #1
 8002e20:	2300      	movhi	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e019      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4d6>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e36:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e003      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	bf94      	ite	ls
 8002e54:	2301      	movls	r3, #1
 8002e56:	2300      	movhi	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d079      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x4f6>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	3301      	adds	r3, #1
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e78:	e015      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x522>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e003      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	069b      	lsls	r3, r3, #26
 8002ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x542>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	0e9b      	lsrs	r3, r3, #26
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	e017      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x572>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002ede:	2320      	movs	r3, #32
 8002ee0:	e003      	b.n	8002eea <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	ea42 0103 	orr.w	r1, r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x598>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	051b      	lsls	r3, r3, #20
 8002f1a:	e018      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x5ca>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002f34:	2320      	movs	r3, #32
 8002f36:	e003      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f003 021f 	and.w	r2, r3, #31
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	e081      	b.n	8003056 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x5ea>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	3301      	adds	r3, #1
 8002f66:	069b      	lsls	r3, r3, #26
 8002f68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6c:	e015      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x616>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e003      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	069b      	lsls	r3, r3, #26
 8002f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x636>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0e9b      	lsrs	r3, r3, #26
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	e017      	b.n	8002fea <HAL_ADC_ConfigChannel+0x666>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	61fb      	str	r3, [r7, #28]
  return result;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e003      	b.n	8002fde <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	ea42 0103 	orr.w	r1, r2, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x692>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	3301      	adds	r3, #1
 8003002:	f003 021f 	and.w	r2, r3, #31
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	3b1e      	subs	r3, #30
 800300e:	051b      	lsls	r3, r3, #20
 8003010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003014:	e01e      	b.n	8003054 <HAL_ADC_ConfigChannel+0x6d0>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	613b      	str	r3, [r7, #16]
  return result;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e006      	b.n	8003040 <HAL_ADC_ConfigChannel+0x6bc>
 8003032:	bf00      	nop
 8003034:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f003 021f 	and.w	r2, r3, #31
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	3b1e      	subs	r3, #30
 800304e:	051b      	lsls	r3, r3, #20
 8003050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003054:	430b      	orrs	r3, r1
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	6892      	ldr	r2, [r2, #8]
 800305a:	4619      	mov	r1, r3
 800305c:	f7ff fa6e 	bl	800253c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_ADC_ConfigChannel+0x7d8>)
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d06c      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800306c:	483c      	ldr	r0, [pc, #240]	; (8003160 <HAL_ADC_ConfigChannel+0x7dc>)
 800306e:	f7ff f9c3 	bl	80023f8 <LL_ADC_GetCommonPathInternalCh>
 8003072:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a3a      	ldr	r2, [pc, #232]	; (8003164 <HAL_ADC_ConfigChannel+0x7e0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d127      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d121      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a35      	ldr	r2, [pc, #212]	; (8003168 <HAL_ADC_ConfigChannel+0x7e4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d157      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800309a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800309e:	4619      	mov	r1, r3
 80030a0:	482f      	ldr	r0, [pc, #188]	; (8003160 <HAL_ADC_ConfigChannel+0x7dc>)
 80030a2:	f7ff f996 	bl	80023d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <HAL_ADC_ConfigChannel+0x7e8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	4a30      	ldr	r2, [pc, #192]	; (8003170 <HAL_ADC_ConfigChannel+0x7ec>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030c0:	e002      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f9      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ce:	e03a      	b.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a27      	ldr	r2, [pc, #156]	; (8003174 <HAL_ADC_ConfigChannel+0x7f0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d113      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x77e>
 80030da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <HAL_ADC_ConfigChannel+0x7e4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d12a      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f8:	4619      	mov	r1, r3
 80030fa:	4819      	ldr	r0, [pc, #100]	; (8003160 <HAL_ADC_ConfigChannel+0x7dc>)
 80030fc:	f7ff f969 	bl	80023d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003100:	e021      	b.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_ADC_ConfigChannel+0x7f4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d11c      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800310c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d116      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a12      	ldr	r2, [pc, #72]	; (8003168 <HAL_ADC_ConfigChannel+0x7e4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d111      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800312a:	4619      	mov	r1, r3
 800312c:	480c      	ldr	r0, [pc, #48]	; (8003160 <HAL_ADC_ConfigChannel+0x7dc>)
 800312e:	f7ff f950 	bl	80023d2 <LL_ADC_SetCommonPathInternalCh>
 8003132:	e008      	b.n	8003146 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800314e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003152:	4618      	mov	r0, r3
 8003154:	37d8      	adds	r7, #216	; 0xd8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	80080000 	.word	0x80080000
 8003160:	50040300 	.word	0x50040300
 8003164:	c7520000 	.word	0xc7520000
 8003168:	50040000 	.word	0x50040000
 800316c:	20000000 	.word	0x20000000
 8003170:	053e2d63 	.word	0x053e2d63
 8003174:	cb840000 	.word	0xcb840000
 8003178:	80000001 	.word	0x80000001

0800317c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003198:	4013      	ands	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	60d3      	str	r3, [r2, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <__NVIC_GetPriorityGrouping+0x18>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	f003 0307 	and.w	r3, r3, #7
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	db0b      	blt.n	800320a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	4907      	ldr	r1, [pc, #28]	; (8003218 <__NVIC_EnableIRQ+0x38>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2001      	movs	r0, #1
 8003202:	fa00 f202 	lsl.w	r2, r0, r2
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e100 	.word	0xe000e100

0800321c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322c:	2b00      	cmp	r3, #0
 800322e:	db0a      	blt.n	8003246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	490c      	ldr	r1, [pc, #48]	; (8003268 <__NVIC_SetPriority+0x4c>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	440b      	add	r3, r1
 8003240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003244:	e00a      	b.n	800325c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4908      	ldr	r1, [pc, #32]	; (800326c <__NVIC_SetPriority+0x50>)
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	3b04      	subs	r3, #4
 8003254:	0112      	lsls	r2, r2, #4
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	440b      	add	r3, r1
 800325a:	761a      	strb	r2, [r3, #24]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000e100 	.word	0xe000e100
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f1c3 0307 	rsb	r3, r3, #7
 800328a:	2b04      	cmp	r3, #4
 800328c:	bf28      	it	cs
 800328e:	2304      	movcs	r3, #4
 8003290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3304      	adds	r3, #4
 8003296:	2b06      	cmp	r3, #6
 8003298:	d902      	bls.n	80032a0 <NVIC_EncodePriority+0x30>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3b03      	subs	r3, #3
 800329e:	e000      	b.n	80032a2 <NVIC_EncodePriority+0x32>
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	4313      	orrs	r3, r2
         );
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e8:	d301      	bcc.n	80032ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00f      	b.n	800330e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <SysTick_Config+0x40>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f6:	210f      	movs	r1, #15
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f7ff ff8e 	bl	800321c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SysTick_Config+0x40>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SysTick_Config+0x40>)
 8003308:	2207      	movs	r2, #7
 800330a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff29 	bl	800317c <__NVIC_SetPriorityGrouping>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff3e 	bl	80031c4 <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff8e 	bl	8003270 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5d 	bl	800321c <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff31 	bl	80031e0 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa2 	bl	80032d8 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0ac      	b.n	800350c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f8b2 	bl	8003520 <DFSDM_GetChannelFromInstance>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_DFSDM_ChannelInit+0x174>)
 80033c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e09f      	b.n	800350c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fe fb0f 	bl	80019f0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80033d2:	4b51      	ldr	r3, [pc, #324]	; (8003518 <HAL_DFSDM_ChannelInit+0x178>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_DFSDM_ChannelInit+0x178>)
 80033da:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80033dc:	4b4e      	ldr	r3, [pc, #312]	; (8003518 <HAL_DFSDM_ChannelInit+0x178>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d125      	bne.n	8003430 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80033e4:	4b4d      	ldr	r3, [pc, #308]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a4c      	ldr	r2, [pc, #304]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 80033ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4948      	ldr	r1, [pc, #288]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a46      	ldr	r2, [pc, #280]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 8003404:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003408:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	791b      	ldrb	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d108      	bne.n	8003424 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003412:	4b42      	ldr	r3, [pc, #264]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	3b01      	subs	r3, #1
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	493f      	ldr	r1, [pc, #252]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003424:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3c      	ldr	r2, [pc, #240]	; (800351c <HAL_DFSDM_ChannelInit+0x17c>)
 800342a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800342e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800343e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6819      	ldr	r1, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800344e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003454:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 020f 	bic.w	r2, r2, #15
 800346c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003494:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f002 0207 	and.w	r2, r2, #7
 80034c0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f810 	bl	8003520 <DFSDM_GetChannelFromInstance>
 8003500:	4602      	mov	r2, r0
 8003502:	4904      	ldr	r1, [pc, #16]	; (8003514 <HAL_DFSDM_ChannelInit+0x174>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200006a8 	.word	0x200006a8
 8003518:	200006a4 	.word	0x200006a4
 800351c:	40016000 	.word	0x40016000

08003520 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <DFSDM_GetChannelFromInstance+0x7c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e02b      	b.n	800358e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <DFSDM_GetChannelFromInstance+0x80>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d102      	bne.n	8003544 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e024      	b.n	800358e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <DFSDM_GetChannelFromInstance+0x84>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800354c:	2302      	movs	r3, #2
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e01d      	b.n	800358e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <DFSDM_GetChannelFromInstance+0x88>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d102      	bne.n	8003560 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800355a:	2304      	movs	r3, #4
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e016      	b.n	800358e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a12      	ldr	r2, [pc, #72]	; (80035ac <DFSDM_GetChannelFromInstance+0x8c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d102      	bne.n	800356e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003568:	2305      	movs	r3, #5
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e00f      	b.n	800358e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a0f      	ldr	r2, [pc, #60]	; (80035b0 <DFSDM_GetChannelFromInstance+0x90>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d102      	bne.n	800357c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003576:	2306      	movs	r3, #6
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e008      	b.n	800358e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <DFSDM_GetChannelFromInstance+0x94>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003584:	2307      	movs	r3, #7
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e001      	b.n	800358e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800358a:	2303      	movs	r3, #3
 800358c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800358e:	68fb      	ldr	r3, [r7, #12]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40016000 	.word	0x40016000
 80035a0:	40016020 	.word	0x40016020
 80035a4:	40016040 	.word	0x40016040
 80035a8:	40016080 	.word	0x40016080
 80035ac:	400160a0 	.word	0x400160a0
 80035b0:	400160c0 	.word	0x400160c0
 80035b4:	400160e0 	.word	0x400160e0

080035b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c6:	e166      	b.n	8003896 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2101      	movs	r1, #1
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8158 	beq.w	8003890 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d005      	beq.n	80035f8 <HAL_GPIO_Init+0x40>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d130      	bne.n	800365a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800362e:	2201      	movs	r2, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0201 	and.w	r2, r3, #1
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d017      	beq.n	8003696 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2203      	movs	r2, #3
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d123      	bne.n	80036ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2203      	movs	r2, #3
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0203 	and.w	r2, r3, #3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80b2 	beq.w	8003890 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372c:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_GPIO_Init+0x2fc>)
 800372e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003730:	4a60      	ldr	r2, [pc, #384]	; (80038b4 <HAL_GPIO_Init+0x2fc>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6613      	str	r3, [r2, #96]	; 0x60
 8003738:	4b5e      	ldr	r3, [pc, #376]	; (80038b4 <HAL_GPIO_Init+0x2fc>)
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003744:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <HAL_GPIO_Init+0x300>)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3302      	adds	r3, #2
 800374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800376e:	d02b      	beq.n	80037c8 <HAL_GPIO_Init+0x210>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_GPIO_Init+0x304>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d025      	beq.n	80037c4 <HAL_GPIO_Init+0x20c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_GPIO_Init+0x308>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d01f      	beq.n	80037c0 <HAL_GPIO_Init+0x208>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a50      	ldr	r2, [pc, #320]	; (80038c4 <HAL_GPIO_Init+0x30c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d019      	beq.n	80037bc <HAL_GPIO_Init+0x204>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a4f      	ldr	r2, [pc, #316]	; (80038c8 <HAL_GPIO_Init+0x310>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_GPIO_Init+0x200>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_GPIO_Init+0x314>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00d      	beq.n	80037b4 <HAL_GPIO_Init+0x1fc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_GPIO_Init+0x318>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <HAL_GPIO_Init+0x1f8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a4c      	ldr	r2, [pc, #304]	; (80038d4 <HAL_GPIO_Init+0x31c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_GPIO_Init+0x1f4>
 80037a8:	2307      	movs	r3, #7
 80037aa:	e00e      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037ac:	2308      	movs	r3, #8
 80037ae:	e00c      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037b0:	2306      	movs	r3, #6
 80037b2:	e00a      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037b4:	2305      	movs	r3, #5
 80037b6:	e008      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037b8:	2304      	movs	r3, #4
 80037ba:	e006      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037bc:	2303      	movs	r3, #3
 80037be:	e004      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e002      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_GPIO_Init+0x212>
 80037c8:	2300      	movs	r3, #0
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	f002 0203 	and.w	r2, r2, #3
 80037d0:	0092      	lsls	r2, r2, #2
 80037d2:	4093      	lsls	r3, r2
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037da:	4937      	ldr	r1, [pc, #220]	; (80038b8 <HAL_GPIO_Init+0x300>)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	3302      	adds	r3, #2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037e8:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_GPIO_Init+0x320>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800380c:	4a32      	ldr	r2, [pc, #200]	; (80038d8 <HAL_GPIO_Init+0x320>)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_GPIO_Init+0x320>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003836:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <HAL_GPIO_Init+0x320>)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800383c:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <HAL_GPIO_Init+0x320>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003860:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <HAL_GPIO_Init+0x320>)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003866:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <HAL_GPIO_Init+0x320>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_GPIO_Init+0x320>)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3301      	adds	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f47f ae91 	bne.w	80035c8 <HAL_GPIO_Init+0x10>
  }
}
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40010000 	.word	0x40010000
 80038bc:	48000400 	.word	0x48000400
 80038c0:	48000800 	.word	0x48000800
 80038c4:	48000c00 	.word	0x48000c00
 80038c8:	48001000 	.word	0x48001000
 80038cc:	48001400 	.word	0x48001400
 80038d0:	48001800 	.word	0x48001800
 80038d4:	48001c00 	.word	0x48001c00
 80038d8:	40010400 	.word	0x40010400

080038dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
 80038e8:	4613      	mov	r3, r2
 80038ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ec:	787b      	ldrb	r3, [r7, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038f2:	887a      	ldrh	r2, [r7, #2]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038fa:	887a      	ldrh	r2, [r7, #2]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003922:	4a05      	ldr	r2, [pc, #20]	; (8003938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f806 	bl	800393c <HAL_GPIO_EXTI_Callback>
  }
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e081      	b.n	8003a68 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fe f89d 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2224      	movs	r2, #36	; 0x24
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	e006      	b.n	80039da <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d104      	bne.n	80039ec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69d9      	ldr	r1, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d138      	bne.n	8003af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e032      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d139      	bne.n	8003b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e033      	b.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003bac:	f7fe fbf2 	bl	8002394 <HAL_GetTick>
 8003bb0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e092      	b.n	8003ce4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 808b 	bne.w	8003ce4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe f814 	bl	8001bfc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003bd4:	f241 3188 	movw	r1, #5000	; 0x1388
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f88b 	bl	8003cf4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_OSPI_Init+0x150>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68d1      	ldr	r1, [r2, #12]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6912      	ldr	r2, [r2, #16]
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	0412      	lsls	r2, r2, #16
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6952      	ldr	r2, [r2, #20]
 8003bfa:	3a01      	subs	r2, #1
 8003bfc:	0212      	lsls	r2, r2, #8
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c04:	4311      	orrs	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	69d2      	ldr	r2, [r2, #28]
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0412      	lsls	r2, r2, #16
 8003c1e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	021a      	lsls	r2, r3, #8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2200      	movs	r2, #0
 8003c44:	2120      	movs	r1, #32
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fb98 	bl	800437c <OSPI_WaitFlagStateUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d146      	bne.n	8003ce4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c8c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d107      	bne.n	8003ccc <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0202 	orr.w	r2, r2, #2
 8003cca:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd4:	d103      	bne.n	8003cde <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
 8003cdc:	e002      	b.n	8003ce4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	f8e0f8f4 	.word	0xf8e0f8f4

08003cf4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b092      	sub	sp, #72	; 0x48
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <HAL_OSPIM_Config+0x40>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d105      	bne.n	8003d42 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003d40:	e004      	b.n	8003d4c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003d42:	2301      	movs	r3, #1
 8003d44:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003d52:	e01f      	b.n	8003d94 <HAL_OSPIM_Config+0x80>
 8003d54:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	b2d8      	uxtb	r0, r3
 8003d60:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003d64:	f107 0114 	add.w	r1, r7, #20
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	4619      	mov	r1, r3
 8003d74:	f000 fb3a 	bl	80043ec <OSPIM_GetConfig>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2208      	movs	r2, #8
 8003d88:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d9dd      	bls.n	8003d58 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 82de 	bne.w	8004362 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003da6:	4bc6      	ldr	r3, [pc, #792]	; (80040c0 <HAL_OSPIM_Config+0x3ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003db2:	4bc3      	ldr	r3, [pc, #780]	; (80040c0 <HAL_OSPIM_Config+0x3ac>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4ac2      	ldr	r2, [pc, #776]	; (80040c0 <HAL_OSPIM_Config+0x3ac>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003dbe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003dca:	4bbe      	ldr	r3, [pc, #760]	; (80040c4 <HAL_OSPIM_Config+0x3b0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003dd6:	4bbb      	ldr	r3, [pc, #748]	; (80040c4 <HAL_OSPIM_Config+0x3b0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4aba      	ldr	r2, [pc, #744]	; (80040c4 <HAL_OSPIM_Config+0x3b0>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003de2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003dee:	49b6      	ldr	r1, [pc, #728]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	3348      	adds	r3, #72	; 0x48
 8003dfc:	443b      	add	r3, r7
 8003dfe:	3b2c      	subs	r3, #44	; 0x2c
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	48af      	ldr	r0, [pc, #700]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	3348      	adds	r3, #72	; 0x48
 8003e18:	443b      	add	r3, r7
 8003e1a:	3b2c      	subs	r3, #44	; 0x2c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4403      	add	r3, r0
 8003e28:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	3348      	adds	r3, #72	; 0x48
 8003e36:	443b      	add	r3, r7
 8003e38:	3b34      	subs	r3, #52	; 0x34
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a1 	beq.w	8003f84 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003e42:	49a1      	ldr	r1, [pc, #644]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3348      	adds	r3, #72	; 0x48
 8003e50:	443b      	add	r3, r7
 8003e52:	3b34      	subs	r3, #52	; 0x34
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	489a      	ldr	r0, [pc, #616]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003e60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	3348      	adds	r3, #72	; 0x48
 8003e6c:	443b      	add	r3, r7
 8003e6e:	3b34      	subs	r3, #52	; 0x34
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f021 0201 	bic.w	r2, r1, #1
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4403      	add	r3, r0
 8003e7c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	3348      	adds	r3, #72	; 0x48
 8003e8a:	443b      	add	r3, r7
 8003e8c:	3b30      	subs	r3, #48	; 0x30
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01d      	beq.n	8003ed0 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003e94:	498c      	ldr	r1, [pc, #560]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	3348      	adds	r3, #72	; 0x48
 8003ea2:	443b      	add	r3, r7
 8003ea4:	3b30      	subs	r3, #48	; 0x30
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	4885      	ldr	r0, [pc, #532]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3348      	adds	r3, #72	; 0x48
 8003ebe:	443b      	add	r3, r7
 8003ec0:	3b30      	subs	r3, #48	; 0x30
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	f021 0210 	bic.w	r2, r1, #16
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4403      	add	r3, r0
 8003ece:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003ed0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	3348      	adds	r3, #72	; 0x48
 8003edc:	443b      	add	r3, r7
 8003ede:	3b28      	subs	r3, #40	; 0x28
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d021      	beq.n	8003f2a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003ee6:	4978      	ldr	r1, [pc, #480]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	3348      	adds	r3, #72	; 0x48
 8003ef4:	443b      	add	r3, r7
 8003ef6:	3b28      	subs	r3, #40	; 0x28
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	4870      	ldr	r0, [pc, #448]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	3348      	adds	r3, #72	; 0x48
 8003f14:	443b      	add	r3, r7
 8003f16:	3b28      	subs	r3, #40	; 0x28
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4403      	add	r3, r0
 8003f28:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3348      	adds	r3, #72	; 0x48
 8003f36:	443b      	add	r3, r7
 8003f38:	3b24      	subs	r3, #36	; 0x24
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d021      	beq.n	8003f84 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003f40:	4961      	ldr	r1, [pc, #388]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	3348      	adds	r3, #72	; 0x48
 8003f4e:	443b      	add	r3, r7
 8003f50:	3b24      	subs	r3, #36	; 0x24
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	4859      	ldr	r0, [pc, #356]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8003f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3348      	adds	r3, #72	; 0x48
 8003f6e:	443b      	add	r3, r7
 8003f70:	3b24      	subs	r3, #36	; 0x24
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4403      	add	r3, r0
 8003f82:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6819      	ldr	r1, [r3, #0]
 8003f88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	3348      	adds	r3, #72	; 0x48
 8003f96:	443b      	add	r3, r7
 8003f98:	3b34      	subs	r3, #52	; 0x34
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	d038      	beq.n	8004012 <HAL_OSPIM_Config+0x2fe>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	3348      	adds	r3, #72	; 0x48
 8003fb2:	443b      	add	r3, r7
 8003fb4:	3b30      	subs	r3, #48	; 0x30
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d02a      	beq.n	8004012 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	3348      	adds	r3, #72	; 0x48
 8003fce:	443b      	add	r3, r7
 8003fd0:	3b2c      	subs	r3, #44	; 0x2c
 8003fd2:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d01c      	beq.n	8004012 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	68d9      	ldr	r1, [r3, #12]
 8003fdc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3348      	adds	r3, #72	; 0x48
 8003fea:	443b      	add	r3, r7
 8003fec:	3b28      	subs	r3, #40	; 0x28
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4299      	cmp	r1, r3
 8003ff2:	d00e      	beq.n	8004012 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6919      	ldr	r1, [r3, #16]
 8003ff8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	3348      	adds	r3, #72	; 0x48
 8004006:	443b      	add	r3, r7
 8004008:	3b24      	subs	r3, #36	; 0x24
 800400a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800400c:	4299      	cmp	r1, r3
 800400e:	f040 80d3 	bne.w	80041b8 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004012:	492d      	ldr	r1, [pc, #180]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8004014:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	3348      	adds	r3, #72	; 0x48
 8004022:	443b      	add	r3, r7
 8004024:	3b34      	subs	r3, #52	; 0x34
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3b01      	subs	r3, #1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 8004032:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	3348      	adds	r3, #72	; 0x48
 8004040:	443b      	add	r3, r7
 8004042:	3b34      	subs	r3, #52	; 0x34
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	f021 0201 	bic.w	r2, r1, #1
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4403      	add	r3, r0
 8004050:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004052:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3348      	adds	r3, #72	; 0x48
 8004060:	443b      	add	r3, r7
 8004062:	3b30      	subs	r3, #48	; 0x30
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01f      	beq.n	80040aa <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800406a:	4917      	ldr	r1, [pc, #92]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 800406c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	3348      	adds	r3, #72	; 0x48
 800407a:	443b      	add	r3, r7
 800407c:	3b30      	subs	r3, #48	; 0x30
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	480f      	ldr	r0, [pc, #60]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 800408a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	3348      	adds	r3, #72	; 0x48
 8004098:	443b      	add	r3, r7
 800409a:	3b30      	subs	r3, #48	; 0x30
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	f021 0210 	bic.w	r2, r1, #16
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4403      	add	r3, r0
 80040a8:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80040aa:	4907      	ldr	r1, [pc, #28]	; (80040c8 <HAL_OSPIM_Config+0x3b4>)
 80040ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	3348      	adds	r3, #72	; 0x48
 80040ba:	443b      	add	r3, r7
 80040bc:	3b2c      	subs	r3, #44	; 0x2c
 80040be:	e005      	b.n	80040cc <HAL_OSPIM_Config+0x3b8>
 80040c0:	a0001000 	.word	0xa0001000
 80040c4:	a0001400 	.word	0xa0001400
 80040c8:	50061c00 	.word	0x50061c00
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	48a6      	ldr	r0, [pc, #664]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80040d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	3348      	adds	r3, #72	; 0x48
 80040e6:	443b      	add	r3, r7
 80040e8:	3b2c      	subs	r3, #44	; 0x2c
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4403      	add	r3, r0
 80040f6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80040f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	3348      	adds	r3, #72	; 0x48
 8004106:	443b      	add	r3, r7
 8004108:	3b28      	subs	r3, #40	; 0x28
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d023      	beq.n	8004158 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004110:	4997      	ldr	r1, [pc, #604]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004112:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	3348      	adds	r3, #72	; 0x48
 8004120:	443b      	add	r3, r7
 8004122:	3b28      	subs	r3, #40	; 0x28
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3b01      	subs	r3, #1
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	488f      	ldr	r0, [pc, #572]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004134:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	3348      	adds	r3, #72	; 0x48
 8004142:	443b      	add	r3, r7
 8004144:	3b28      	subs	r3, #40	; 0x28
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3b01      	subs	r3, #1
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4403      	add	r3, r0
 8004156:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004158:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	3348      	adds	r3, #72	; 0x48
 8004166:	443b      	add	r3, r7
 8004168:	3b24      	subs	r3, #36	; 0x24
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d023      	beq.n	80041b8 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004170:	497f      	ldr	r1, [pc, #508]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004172:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	3348      	adds	r3, #72	; 0x48
 8004180:	443b      	add	r3, r7
 8004182:	3b24      	subs	r3, #36	; 0x24
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3b01      	subs	r3, #1
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	4877      	ldr	r0, [pc, #476]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004194:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	3348      	adds	r3, #72	; 0x48
 80041a2:	443b      	add	r3, r7
 80041a4:	3b24      	subs	r3, #36	; 0x24
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4403      	add	r3, r0
 80041b6:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80041b8:	4a6d      	ldr	r2, [pc, #436]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	3b01      	subs	r3, #1
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041cc:	025b      	lsls	r3, r3, #9
 80041ce:	431a      	orrs	r2, r3
 80041d0:	4967      	ldr	r1, [pc, #412]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80041e2:	4a63      	ldr	r2, [pc, #396]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 0203 	bic.w	r2, r3, #3
 80041f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	431a      	orrs	r2, r3
 80041fa:	495d      	ldr	r1, [pc, #372]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3b01      	subs	r3, #1
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d014      	beq.n	800423e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004214:	4a56      	ldr	r2, [pc, #344]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004228:	015b      	lsls	r3, r3, #5
 800422a:	431a      	orrs	r2, r3
 800422c:	4950      	ldr	r1, [pc, #320]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	3b01      	subs	r3, #1
 8004234:	f042 0210 	orr.w	r2, r2, #16
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d019      	beq.n	800427e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800424a:	4a49      	ldr	r2, [pc, #292]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	3b01      	subs	r3, #1
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004262:	049b      	lsls	r3, r3, #18
 8004264:	431a      	orrs	r2, r3
 8004266:	4942      	ldr	r1, [pc, #264]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	3b01      	subs	r3, #1
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	e01c      	b.n	80042b8 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d018      	beq.n	80042b8 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004286:	4a3a      	ldr	r2, [pc, #232]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800429c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429e:	069b      	lsls	r3, r3, #26
 80042a0:	431a      	orrs	r2, r3
 80042a2:	4933      	ldr	r1, [pc, #204]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d019      	beq.n	80042f8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80042c4:	4a2a      	ldr	r2, [pc, #168]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80042da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042dc:	049b      	lsls	r3, r3, #18
 80042de:	431a      	orrs	r2, r3
 80042e0:	4923      	ldr	r1, [pc, #140]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	e01c      	b.n	8004332 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d018      	beq.n	8004332 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	3b01      	subs	r3, #1
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004318:	069b      	lsls	r3, r3, #26
 800431a:	431a      	orrs	r2, r3
 800431c:	4914      	ldr	r1, [pc, #80]	; (8004370 <HAL_OSPIM_Config+0x65c>)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	3b01      	subs	r3, #1
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004332:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_OSPIM_Config+0x660>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <HAL_OSPIM_Config+0x660>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800434a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_OSPIM_Config+0x664>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a07      	ldr	r2, [pc, #28]	; (8004378 <HAL_OSPIM_Config+0x664>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004362:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004366:	4618      	mov	r0, r3
 8004368:	3748      	adds	r7, #72	; 0x48
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	50061c00 	.word	0x50061c00
 8004374:	a0001000 	.word	0xa0001000
 8004378:	a0001400 	.word	0xa0001400

0800437c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800438c:	e01a      	b.n	80043c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d016      	beq.n	80043c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fd fffd 	bl	8002394 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <OSPI_WaitFlagStateUntilTimeout+0x30>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b2:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e00e      	b.n	80043e2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1d6      	bne.n	800438e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <OSPIM_GetConfig+0x26>
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d802      	bhi.n	8004412 <OSPIM_GetConfig+0x26>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
 8004416:	e08e      	b.n	8004536 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d101      	bne.n	8004440 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800443c:	4b41      	ldr	r3, [pc, #260]	; (8004544 <OSPIM_GetConfig+0x158>)
 800443e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e074      	b.n	8004530 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004446:	4a40      	ldr	r2, [pc, #256]	; (8004548 <OSPIM_GetConfig+0x15c>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4053      	eors	r3, r2
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4053      	eors	r3, r2
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4053      	eors	r3, r2
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d018      	beq.n	80044ee <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4053      	eors	r3, r2
 80044c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d111      	bne.n	80044ee <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	e005      	b.n	80044ee <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d018      	beq.n	800452a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4053      	eors	r3, r2
 80044fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d111      	bne.n	800452a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	611a      	str	r2, [r3, #16]
 800451c:	e005      	b.n	800452a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3301      	adds	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d987      	bls.n	8004446 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	04040222 	.word	0x04040222
 8004548:	50061c00 	.word	0x50061c00

0800454c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40007000 	.word	0x40007000

0800456c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d102      	bne.n	8004584 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004582:	e00b      	b.n	800459c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004584:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004592:	d102      	bne.n	800459a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004598:	e000      	b.n	800459c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800459a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40007000 	.word	0x40007000

080045ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d141      	bne.n	800463e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ba:	4b4b      	ldr	r3, [pc, #300]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c6:	d131      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045c8:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ce:	4a46      	ldr	r2, [pc, #280]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045e0:	4a41      	ldr	r2, [pc, #260]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80045e8:	4b40      	ldr	r3, [pc, #256]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2232      	movs	r2, #50	; 0x32
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	4a3f      	ldr	r2, [pc, #252]	; (80046f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	0c9b      	lsrs	r3, r3, #18
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045fe:	e002      	b.n	8004606 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b01      	subs	r3, #1
 8004604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004612:	d102      	bne.n	800461a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f2      	bne.n	8004600 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800461a:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004626:	d158      	bne.n	80046da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e057      	b.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800462c:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	4a2d      	ldr	r2, [pc, #180]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800463c:	e04d      	b.n	80046da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d141      	bne.n	80046ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d131      	bne.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800465a:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004664:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800466c:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2232      	movs	r2, #50	; 0x32
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	0c9b      	lsrs	r3, r3, #18
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468a:	e002      	b.n	8004692 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3b01      	subs	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d102      	bne.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f2      	bne.n	800468c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d112      	bne.n	80046da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e011      	b.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046be:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046c8:	e007      	b.n	80046da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046d2:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40007000 	.word	0x40007000
 80046ec:	20000000 	.word	0x20000000
 80046f0:	431bde83 	.word	0x431bde83

080046f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f000 bc08 	b.w	8004f18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004708:	4b96      	ldr	r3, [pc, #600]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004712:	4b94      	ldr	r3, [pc, #592]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80e4 	beq.w	80048f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_RCC_OscConfig+0x4c>
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	f040 808b 	bne.w	800484e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b01      	cmp	r3, #1
 800473c:	f040 8087 	bne.w	800484e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004740:	4b88      	ldr	r3, [pc, #544]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_OscConfig+0x64>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e3df      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	4b81      	ldr	r3, [pc, #516]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <HAL_RCC_OscConfig+0x7e>
 8004768:	4b7e      	ldr	r3, [pc, #504]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004770:	e005      	b.n	800477e <HAL_RCC_OscConfig+0x8a>
 8004772:	4b7c      	ldr	r3, [pc, #496]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477e:	4293      	cmp	r3, r2
 8004780:	d223      	bcs.n	80047ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fdcc 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e3c0      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004796:	4b73      	ldr	r3, [pc, #460]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a72      	ldr	r2, [pc, #456]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b70      	ldr	r3, [pc, #448]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	496d      	ldr	r1, [pc, #436]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b4:	4b6b      	ldr	r3, [pc, #428]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	4968      	ldr	r1, [pc, #416]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
 80047c8:	e025      	b.n	8004816 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047ca:	4b66      	ldr	r3, [pc, #408]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a65      	ldr	r2, [pc, #404]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047d0:	f043 0308 	orr.w	r3, r3, #8
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4960      	ldr	r1, [pc, #384]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047e8:	4b5e      	ldr	r3, [pc, #376]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	495b      	ldr	r1, [pc, #364]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd8c 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e380      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004816:	f000 fcc1 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	4950      	ldr	r1, [pc, #320]	; (8004968 <HAL_RCC_OscConfig+0x274>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	4a4e      	ldr	r2, [pc, #312]	; (800496c <HAL_RCC_OscConfig+0x278>)
 8004834:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004836:	4b4e      	ldr	r3, [pc, #312]	; (8004970 <HAL_RCC_OscConfig+0x27c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fd5a 	bl	80022f4 <HAL_InitTick>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d052      	beq.n	80048f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	e364      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d032      	beq.n	80048bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004856:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a42      	ldr	r2, [pc, #264]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004862:	f7fd fd97 	bl	8002394 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486a:	f7fd fd93 	bl	8002394 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e34d      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800487c:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004888:	4b36      	ldr	r3, [pc, #216]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a35      	ldr	r2, [pc, #212]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800488e:	f043 0308 	orr.w	r3, r3, #8
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b33      	ldr	r3, [pc, #204]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4930      	ldr	r1, [pc, #192]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	492b      	ldr	r1, [pc, #172]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	604b      	str	r3, [r1, #4]
 80048ba:	e01a      	b.n	80048f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048bc:	4b29      	ldr	r3, [pc, #164]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a28      	ldr	r2, [pc, #160]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048c8:	f7fd fd64 	bl	8002394 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d0:	f7fd fd60 	bl	8002394 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e31a      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x1dc>
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d073      	beq.n	80049e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d005      	beq.n	8004910 <HAL_RCC_OscConfig+0x21c>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d10e      	bne.n	8004928 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d10b      	bne.n	8004928 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d063      	beq.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d15f      	bne.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e2f7      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x24c>
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e025      	b.n	800498c <HAL_RCC_OscConfig+0x298>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004948:	d114      	bne.n	8004974 <HAL_RCC_OscConfig+0x280>
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a05      	ldr	r2, [pc, #20]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a02      	ldr	r2, [pc, #8]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e013      	b.n	800498c <HAL_RCC_OscConfig+0x298>
 8004964:	40021000 	.word	0x40021000
 8004968:	080096f0 	.word	0x080096f0
 800496c:	20000000 	.word	0x20000000
 8004970:	20000004 	.word	0x20000004
 8004974:	4ba0      	ldr	r3, [pc, #640]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a9f      	ldr	r2, [pc, #636]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 800497a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b9d      	ldr	r3, [pc, #628]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a9c      	ldr	r2, [pc, #624]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd fcfe 	bl	8002394 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7fd fcfa 	bl	8002394 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e2b4      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ae:	4b92      	ldr	r3, [pc, #584]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x2a8>
 80049ba:	e014      	b.n	80049e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fd fcea 	bl	8002394 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c4:	f7fd fce6 	bl	8002394 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	; 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e2a0      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049d6:	4b88      	ldr	r3, [pc, #544]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2d0>
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d060      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_OscConfig+0x310>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d119      	bne.n	8004a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d116      	bne.n	8004a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a04:	4b7c      	ldr	r3, [pc, #496]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_OscConfig+0x328>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e27d      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	4973      	ldr	r1, [pc, #460]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a30:	e040      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d023      	beq.n	8004a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3a:	4b6f      	ldr	r3, [pc, #444]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6e      	ldr	r2, [pc, #440]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fd fca5 	bl	8002394 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4e:	f7fd fca1 	bl	8002394 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e25b      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a60:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b62      	ldr	r3, [pc, #392]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	495f      	ldr	r1, [pc, #380]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
 8004a80:	e018      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a82:	4b5d      	ldr	r3, [pc, #372]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a5c      	ldr	r2, [pc, #368]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fc81 	bl	8002394 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fd fc7d 	bl	8002394 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e237      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d03c      	beq.n	8004b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01c      	beq.n	8004b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac8:	4b4b      	ldr	r3, [pc, #300]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ace:	4a4a      	ldr	r2, [pc, #296]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fd fc5c 	bl	8002394 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fd fc58 	bl	8002394 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e212      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ef      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x3ec>
 8004b00:	e01b      	b.n	8004b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b08:	4a3b      	ldr	r2, [pc, #236]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b12:	f7fd fc3f 	bl	8002394 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1a:	f7fd fc3b 	bl	8002394 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1f5      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b2c:	4b32      	ldr	r3, [pc, #200]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ef      	bne.n	8004b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80a6 	beq.w	8004c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10d      	bne.n	8004b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6593      	str	r3, [r2, #88]	; 0x58
 8004b64:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b70:	2301      	movs	r3, #1
 8004b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d118      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8c:	f7fd fc02 	bl	8002394 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b94:	f7fd fbfe 	bl	8002394 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1b8      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d108      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4d8>
 8004bba:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bca:	e029      	b.n	8004c20 <HAL_RCC_OscConfig+0x52c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d115      	bne.n	8004c00 <HAL_RCC_OscConfig+0x50c>
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a03      	ldr	r2, [pc, #12]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x52c>
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	4b9d      	ldr	r3, [pc, #628]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	4a9c      	ldr	r2, [pc, #624]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c10:	4b99      	ldr	r3, [pc, #612]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	4a98      	ldr	r2, [pc, #608]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d016      	beq.n	8004c56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fd fbb4 	bl	8002394 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fd fbb0 	bl	8002394 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e168      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c46:	4b8c      	ldr	r3, [pc, #560]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ed      	beq.n	8004c30 <HAL_RCC_OscConfig+0x53c>
 8004c54:	e015      	b.n	8004c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c56:	f7fd fb9d 	bl	8002394 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5e:	f7fd fb99 	bl	8002394 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e151      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c74:	4b80      	ldr	r3, [pc, #512]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1ed      	bne.n	8004c5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c82:	7ffb      	ldrb	r3, [r7, #31]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d105      	bne.n	8004c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c88:	4b7b      	ldr	r3, [pc, #492]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	4a7a      	ldr	r2, [pc, #488]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d03c      	beq.n	8004d1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01c      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ca8:	4b73      	ldr	r3, [pc, #460]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cae:	4a72      	ldr	r2, [pc, #456]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7fd fb6c 	bl	8002394 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cc0:	f7fd fb68 	bl	8002394 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e122      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cd2:	4b69      	ldr	r3, [pc, #420]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ef      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x5cc>
 8004ce0:	e01b      	b.n	8004d1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ce2:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ce8:	4a63      	ldr	r2, [pc, #396]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7fd fb4f 	bl	8002394 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cfa:	f7fd fb4b 	bl	8002394 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e105      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d0c:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ef      	bne.n	8004cfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80f9 	beq.w	8004f16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f040 80cf 	bne.w	8004ecc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d2e:	4b52      	ldr	r3, [pc, #328]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f003 0203 	and.w	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d12c      	bne.n	8004d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d123      	bne.n	8004d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d11b      	bne.n	8004d9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d113      	bne.n	8004d9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	3b01      	subs	r3, #1
 8004d82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d109      	bne.n	8004d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	3b01      	subs	r3, #1
 8004d96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d071      	beq.n	8004e80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d068      	beq.n	8004e74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004da2:	4b35      	ldr	r3, [pc, #212]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004dae:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0ac      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b2e      	ldr	r3, [pc, #184]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dca:	f7fd fae3 	bl	8002394 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fd fadf 	bl	8002394 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e099      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df0:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_RCC_OscConfig+0x788>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e00:	3a01      	subs	r2, #1
 8004e02:	0112      	lsls	r2, r2, #4
 8004e04:	4311      	orrs	r1, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e0a:	0212      	lsls	r2, r2, #8
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e12:	0852      	lsrs	r2, r2, #1
 8004e14:	3a01      	subs	r2, #1
 8004e16:	0552      	lsls	r2, r2, #21
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e1e:	0852      	lsrs	r2, r2, #1
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0652      	lsls	r2, r2, #25
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e2a:	06d2      	lsls	r2, r2, #27
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	4912      	ldr	r1, [pc, #72]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e4c:	f7fd faa2 	bl	8002394 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd fa9e 	bl	8002394 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e058      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e72:	e050      	b.n	8004f16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e04f      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d144      	bne.n	8004f16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e98:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ea4:	f7fd fa76 	bl	8002394 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fd fa72 	bl	8002394 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e02c      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ebe:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x7b8>
 8004eca:	e024      	b.n	8004f16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d01f      	beq.n	8004f12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fd fa59 	bl	8002394 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fd fa55 	bl	8002394 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	4905      	ldr	r1, [pc, #20]	; (8004f20 <HAL_RCC_OscConfig+0x82c>)
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_RCC_OscConfig+0x830>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60cb      	str	r3, [r1, #12]
 8004f10:	e001      	b.n	8004f16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	feeefffc 	.word	0xfeeefffc

08004f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e11d      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f40:	4b90      	ldr	r3, [pc, #576]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d910      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4e:	4b8d      	ldr	r3, [pc, #564]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 020f 	bic.w	r2, r3, #15
 8004f56:	498b      	ldr	r1, [pc, #556]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b89      	ldr	r3, [pc, #548]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e105      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	4b81      	ldr	r3, [pc, #516]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d908      	bls.n	8004f9e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f8c:	4b7e      	ldr	r3, [pc, #504]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	497b      	ldr	r1, [pc, #492]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d079      	beq.n	800509e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d11e      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb2:	4b75      	ldr	r3, [pc, #468]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e0dc      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004fc2:	f000 fa09 	bl	80053d8 <RCC_GetSysClockFreqFromPLLSource>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a70      	ldr	r2, [pc, #448]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d946      	bls.n	800505c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004fce:	4b6e      	ldr	r3, [pc, #440]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d140      	bne.n	800505c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fda:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe2:	4a69      	ldr	r2, [pc, #420]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	e035      	b.n	800505c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff8:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d115      	bne.n	8005030 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0b9      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005010:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0ad      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005020:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0a5      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005030:	f000 f8b4 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8005034:	4603      	mov	r3, r0
 8005036:	4a55      	ldr	r2, [pc, #340]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d90f      	bls.n	800505c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800503c:	4b52      	ldr	r3, [pc, #328]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005048:	4b4f      	ldr	r3, [pc, #316]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005050:	4a4d      	ldr	r2, [pc, #308]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800505c:	4b4a      	ldr	r3, [pc, #296]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f023 0203 	bic.w	r2, r3, #3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4947      	ldr	r1, [pc, #284]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506e:	f7fd f991 	bl	8002394 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005074:	e00a      	b.n	800508c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005076:	f7fd f98d 	bl	8002394 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e077      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508c:	4b3e      	ldr	r3, [pc, #248]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 020c 	and.w	r2, r3, #12
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	429a      	cmp	r2, r3
 800509c:	d1eb      	bne.n	8005076 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d105      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050a4:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a37      	ldr	r2, [pc, #220]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d208      	bcs.n	80050de <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	492b      	ldr	r1, [pc, #172]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050de:	4b29      	ldr	r3, [pc, #164]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d210      	bcs.n	800510e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f023 020f 	bic.w	r2, r3, #15
 80050f4:	4923      	ldr	r1, [pc, #140]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fc:	4b21      	ldr	r3, [pc, #132]	; (8005184 <HAL_RCC_ClockConfig+0x25c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d001      	beq.n	800510e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e036      	b.n	800517c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	4918      	ldr	r1, [pc, #96]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8005128:	4313      	orrs	r3, r2
 800512a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4910      	ldr	r1, [pc, #64]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800514c:	f000 f826 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8005150:	4602      	mov	r2, r0
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	490c      	ldr	r1, [pc, #48]	; (8005190 <HAL_RCC_ClockConfig+0x268>)
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x26c>)
 800516a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fd f8bf 	bl	80022f4 <HAL_InitTick>
 8005176:	4603      	mov	r3, r0
 8005178:	73fb      	strb	r3, [r7, #15]

  return status;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40022000 	.word	0x40022000
 8005188:	40021000 	.word	0x40021000
 800518c:	04c4b400 	.word	0x04c4b400
 8005190:	080096f0 	.word	0x080096f0
 8005194:	20000000 	.word	0x20000000
 8005198:	20000004 	.word	0x20000004

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	b480      	push	{r7}
 800519e:	b089      	sub	sp, #36	; 0x24
 80051a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051aa:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051b4:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x34>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d121      	bne.n	800520e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d11e      	bne.n	800520e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051d0:	4b34      	ldr	r3, [pc, #208]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051dc:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	e005      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051ec:	4b2d      	ldr	r3, [pc, #180]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051f8:	4a2b      	ldr	r2, [pc, #172]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10d      	bne.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d102      	bne.n	800521a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e004      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b08      	cmp	r3, #8
 800521e:	d101      	bne.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005220:	4b23      	ldr	r3, [pc, #140]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005222:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d134      	bne.n	8005294 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800522a:	4b1e      	ldr	r3, [pc, #120]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d003      	beq.n	8005242 <HAL_RCC_GetSysClockFreq+0xa6>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d003      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0xac>
 8005240:	e005      	b.n	800524e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005242:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005244:	617b      	str	r3, [r7, #20]
      break;
 8005246:	e005      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800524a:	617b      	str	r3, [r7, #20]
      break;
 800524c:	e002      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	617b      	str	r3, [r7, #20]
      break;
 8005252:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005254:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	3301      	adds	r3, #1
 8005260:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005262:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	fb03 f202 	mul.w	r2, r3, r2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	0e5b      	lsrs	r3, r3, #25
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	3301      	adds	r3, #1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005292:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005294:	69bb      	ldr	r3, [r7, #24]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3724      	adds	r7, #36	; 0x24
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	08009708 	.word	0x08009708
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	007a1200 	.word	0x007a1200

080052b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000000 	.word	0x20000000

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4904      	ldr	r1, [pc, #16]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	08009700 	.word	0x08009700

080052f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052fc:	f7ff ffda 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	0adb      	lsrs	r3, r3, #11
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	4904      	ldr	r1, [pc, #16]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	08009700 	.word	0x08009700

08005324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800533c:	f7ff f916 	bl	800456c <HAL_PWREx_GetVoltageRange>
 8005340:	6178      	str	r0, [r7, #20]
 8005342:	e014      	b.n	800536e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005344:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534e:	6593      	str	r3, [r2, #88]	; 0x58
 8005350:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800535c:	f7ff f906 	bl	800456c <HAL_PWREx_GetVoltageRange>
 8005360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	4a1a      	ldr	r2, [pc, #104]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005374:	d10b      	bne.n	800538e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d913      	bls.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2ba0      	cmp	r3, #160	; 0xa0
 8005380:	d902      	bls.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005382:	2302      	movs	r3, #2
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e00d      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005388:	2301      	movs	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e00a      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b7f      	cmp	r3, #127	; 0x7f
 8005392:	d902      	bls.n	800539a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005394:	2302      	movs	r3, #2
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e004      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b70      	cmp	r3, #112	; 0x70
 800539e:	d101      	bne.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053a0:	2301      	movs	r3, #1
 80053a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 020f 	bic.w	r2, r3, #15
 80053ac:	4909      	ldr	r1, [pc, #36]	; (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d001      	beq.n	80053c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40022000 	.word	0x40022000

080053d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053de:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d00b      	beq.n	8005406 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d825      	bhi.n	8005440 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d008      	beq.n	800540c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d11f      	bne.n	8005440 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005402:	613b      	str	r3, [r7, #16]
    break;
 8005404:	e01f      	b.n	8005446 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005406:	4b25      	ldr	r3, [pc, #148]	; (800549c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005408:	613b      	str	r3, [r7, #16]
    break;
 800540a:	e01c      	b.n	8005446 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800540c:	4b21      	ldr	r3, [pc, #132]	; (8005494 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005418:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e005      	b.n	8005434 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005428:	4b1a      	ldr	r3, [pc, #104]	; (8005494 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005434:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543c:	613b      	str	r3, [r7, #16]
    break;
 800543e:	e002      	b.n	8005446 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]
    break;
 8005444:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	3301      	adds	r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005454:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	fb03 f202 	mul.w	r2, r3, r2
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	fbb2 f3f3 	udiv	r3, r2, r3
 800546a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0e5b      	lsrs	r3, r3, #25
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005486:	683b      	ldr	r3, [r7, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40021000 	.word	0x40021000
 8005498:	00f42400 	.word	0x00f42400
 800549c:	007a1200 	.word	0x007a1200
 80054a0:	08009708 	.word	0x08009708

080054a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b0:	2300      	movs	r3, #0
 80054b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d040      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	d02a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d825      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054cc:	2b60      	cmp	r3, #96	; 0x60
 80054ce:	d026      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054d0:	2b60      	cmp	r3, #96	; 0x60
 80054d2:	d821      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d006      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d81d      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d010      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80054e4:	e018      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054e6:	4b89      	ldr	r3, [pc, #548]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4a88      	ldr	r2, [pc, #544]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f2:	e015      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fb12 	bl	8005b24 <RCCEx_PLLSAI1_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005504:	e00c      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3320      	adds	r3, #32
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fbfd 	bl	8005d0c <RCCEx_PLLSAI2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005516:	e003      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	74fb      	strb	r3, [r7, #19]
      break;
 800551c:	e000      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800551e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005526:	4b79      	ldr	r3, [pc, #484]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800552c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005534:	4975      	ldr	r1, [pc, #468]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800553c:	e001      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	7cfb      	ldrb	r3, [r7, #19]
 8005540:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d047      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005556:	d030      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555c:	d82a      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800555e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005562:	d02a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005568:	d824      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800556a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556e:	d008      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005574:	d81e      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800557a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557e:	d010      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005580:	e018      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005582:	4b62      	ldr	r3, [pc, #392]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	4a61      	ldr	r2, [pc, #388]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800558e:	e015      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fac4 	bl	8005b24 <RCCEx_PLLSAI1_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055a0:	e00c      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3320      	adds	r3, #32
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fbaf 	bl	8005d0c <RCCEx_PLLSAI2_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055b2:	e003      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	74fb      	strb	r3, [r7, #19]
      break;
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80055ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055c2:	4b52      	ldr	r3, [pc, #328]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	494e      	ldr	r1, [pc, #312]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055d8:	e001      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 809f 	beq.w	800572a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ec:	2300      	movs	r3, #0
 80055ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055f0:	4b46      	ldr	r3, [pc, #280]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	4b41      	ldr	r3, [pc, #260]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	4a40      	ldr	r2, [pc, #256]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005610:	6593      	str	r3, [r2, #88]	; 0x58
 8005612:	4b3e      	ldr	r3, [pc, #248]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561e:	2301      	movs	r3, #1
 8005620:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a3a      	ldr	r2, [pc, #232]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800562e:	f7fc feb1 	bl	8002394 <HAL_GetTick>
 8005632:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005634:	e009      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005636:	f7fc fead 	bl	8002394 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d902      	bls.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	74fb      	strb	r3, [r7, #19]
        break;
 8005648:	e005      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800564a:	4b31      	ldr	r3, [pc, #196]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0ef      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d15b      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800565c:	4b2b      	ldr	r3, [pc, #172]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005666:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01f      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	429a      	cmp	r2, r3
 8005678:	d019      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005686:	4b21      	ldr	r3, [pc, #132]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	4a1b      	ldr	r2, [pc, #108]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800569e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056a6:	4a19      	ldr	r2, [pc, #100]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fc fe6c 	bl	8002394 <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056be:	e00b      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c0:	f7fc fe68 	bl	8002394 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d902      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	74fb      	strb	r3, [r7, #19]
            break;
 80056d6:	e006      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0ec      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10c      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	4903      	ldr	r1, [pc, #12]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005704:	e008      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	74bb      	strb	r3, [r7, #18]
 800570a:	e005      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800570c:	40021000 	.word	0x40021000
 8005710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	7cfb      	ldrb	r3, [r7, #19]
 8005716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005718:	7c7b      	ldrb	r3, [r7, #17]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d105      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571e:	4ba0      	ldr	r3, [pc, #640]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	4a9f      	ldr	r2, [pc, #636]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005728:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005736:	4b9a      	ldr	r3, [pc, #616]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f023 0203 	bic.w	r2, r3, #3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005744:	4996      	ldr	r1, [pc, #600]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005758:	4b91      	ldr	r3, [pc, #580]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	f023 020c 	bic.w	r2, r3, #12
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	498e      	ldr	r1, [pc, #568]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800577a:	4b89      	ldr	r3, [pc, #548]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005780:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	4985      	ldr	r1, [pc, #532]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800579c:	4b80      	ldr	r3, [pc, #512]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057aa:	497d      	ldr	r1, [pc, #500]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057be:	4b78      	ldr	r3, [pc, #480]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057cc:	4974      	ldr	r1, [pc, #464]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057e0:	4b6f      	ldr	r3, [pc, #444]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ee:	496c      	ldr	r1, [pc, #432]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005802:	4b67      	ldr	r3, [pc, #412]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005810:	4963      	ldr	r1, [pc, #396]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005824:	4b5e      	ldr	r3, [pc, #376]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005832:	495b      	ldr	r1, [pc, #364]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005846:	4b56      	ldr	r3, [pc, #344]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	4952      	ldr	r1, [pc, #328]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005868:	4b4d      	ldr	r3, [pc, #308]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005876:	494a      	ldr	r1, [pc, #296]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800588a:	4b45      	ldr	r3, [pc, #276]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	4941      	ldr	r1, [pc, #260]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ac:	4b3c      	ldr	r3, [pc, #240]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ba:	4939      	ldr	r1, [pc, #228]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d028      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ce:	4b34      	ldr	r3, [pc, #208]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058dc:	4930      	ldr	r1, [pc, #192]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ec:	d106      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ee:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f8:	60d3      	str	r3, [r2, #12]
 80058fa:	e011      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005904:	d10c      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f909 	bl	8005b24 <RCCEx_PLLSAI1_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d04d      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005934:	d108      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005936:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800593c:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005942:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005946:	e012      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800594a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800594e:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005954:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005966:	490e      	ldr	r1, [pc, #56]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005976:	d106      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005978:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005982:	60d3      	str	r3, [r2, #12]
 8005984:	e020      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800598a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598e:	d109      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005990:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4a02      	ldr	r2, [pc, #8]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599a:	60d3      	str	r3, [r2, #12]
 800599c:	e014      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800599e:	bf00      	nop
 80059a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f8b5 	bl	8005b24 <RCCEx_PLLSAI1_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059be:	7cfb      	ldrb	r3, [r7, #19]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d028      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d4:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e2:	4947      	ldr	r1, [pc, #284]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f2:	d106      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f4:	4b42      	ldr	r3, [pc, #264]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a41      	ldr	r2, [pc, #260]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fe:	60d3      	str	r3, [r2, #12]
 8005a00:	e011      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a0a:	d10c      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	2101      	movs	r1, #1
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f886 	bl	8005b24 <RCCEx_PLLSAI1_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005a22:	7cfb      	ldrb	r3, [r7, #19]
 8005a24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01e      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a32:	4b33      	ldr	r3, [pc, #204]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a42:	492f      	ldr	r1, [pc, #188]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 f861 	bl	8005b24 <RCCEx_PLLSAI1_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a66:	7cfb      	ldrb	r3, [r7, #19]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005a6c:	7cfb      	ldrb	r3, [r7, #19]
 8005a6e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a7c:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a82:	f023 0204 	bic.w	r2, r3, #4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8c:	491c      	ldr	r1, [pc, #112]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aa6:	f023 0218 	bic.w	r2, r3, #24
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	4913      	ldr	r1, [pc, #76]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d017      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad4:	490a      	ldr	r1, [pc, #40]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000

08005b04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b0e:	f043 0304 	orr.w	r3, r3, #4
 8005b12:	6013      	str	r3, [r2, #0]
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000

08005b24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b32:	4b72      	ldr	r3, [pc, #456]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00e      	beq.n	8005b5c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b3e:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0203 	and.w	r2, r3, #3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d103      	bne.n	8005b56 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
       ||
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d142      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
 8005b5a:	e03f      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d018      	beq.n	8005b96 <RCCEx_PLLSAI1_Config+0x72>
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d825      	bhi.n	8005bb4 <RCCEx_PLLSAI1_Config+0x90>
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d002      	beq.n	8005b72 <RCCEx_PLLSAI1_Config+0x4e>
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d009      	beq.n	8005b84 <RCCEx_PLLSAI1_Config+0x60>
 8005b70:	e020      	b.n	8005bb4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b72:	4b62      	ldr	r3, [pc, #392]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11d      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b82:	e01a      	b.n	8005bba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b84:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d116      	bne.n	8005bbe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b94:	e013      	b.n	8005bbe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b96:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10f      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ba2:	4b56      	ldr	r3, [pc, #344]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bb2:	e006      	b.n	8005bc2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb8:	e004      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d108      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005bca:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f023 0203 	bic.w	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4949      	ldr	r1, [pc, #292]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 8086 	bne.w	8005cf0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005be4:	4b45      	ldr	r3, [pc, #276]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a44      	ldr	r2, [pc, #272]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf0:	f7fc fbd0 	bl	8002394 <HAL_GetTick>
 8005bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bf6:	e009      	b.n	8005c0c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bf8:	f7fc fbcc 	bl	8002394 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d902      	bls.n	8005c0c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	73fb      	strb	r3, [r7, #15]
        break;
 8005c0a:	e005      	b.n	8005c18 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ef      	bne.n	8005bf8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d168      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d113      	bne.n	8005c4c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c24:	4b35      	ldr	r3, [pc, #212]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	4b35      	ldr	r3, [pc, #212]	; (8005d00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6892      	ldr	r2, [r2, #8]
 8005c30:	0211      	lsls	r1, r2, #8
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68d2      	ldr	r2, [r2, #12]
 8005c36:	06d2      	lsls	r2, r2, #27
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6852      	ldr	r2, [r2, #4]
 8005c3e:	3a01      	subs	r2, #1
 8005c40:	0112      	lsls	r2, r2, #4
 8005c42:	430a      	orrs	r2, r1
 8005c44:	492d      	ldr	r1, [pc, #180]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	610b      	str	r3, [r1, #16]
 8005c4a:	e02d      	b.n	8005ca8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d115      	bne.n	8005c7e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c52:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6892      	ldr	r2, [r2, #8]
 8005c5e:	0211      	lsls	r1, r2, #8
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6912      	ldr	r2, [r2, #16]
 8005c64:	0852      	lsrs	r2, r2, #1
 8005c66:	3a01      	subs	r2, #1
 8005c68:	0552      	lsls	r2, r2, #21
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6852      	ldr	r2, [r2, #4]
 8005c70:	3a01      	subs	r2, #1
 8005c72:	0112      	lsls	r2, r2, #4
 8005c74:	430a      	orrs	r2, r1
 8005c76:	4921      	ldr	r1, [pc, #132]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	610b      	str	r3, [r1, #16]
 8005c7c:	e014      	b.n	8005ca8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c7e:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6892      	ldr	r2, [r2, #8]
 8005c8a:	0211      	lsls	r1, r2, #8
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6952      	ldr	r2, [r2, #20]
 8005c90:	0852      	lsrs	r2, r2, #1
 8005c92:	3a01      	subs	r2, #1
 8005c94:	0652      	lsls	r2, r2, #25
 8005c96:	4311      	orrs	r1, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6852      	ldr	r2, [r2, #4]
 8005c9c:	3a01      	subs	r2, #1
 8005c9e:	0112      	lsls	r2, r2, #4
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	4916      	ldr	r1, [pc, #88]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ca8:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fc fb6e 	bl	8002394 <HAL_GetTick>
 8005cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cba:	e009      	b.n	8005cd0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cbc:	f7fc fb6a 	bl	8002394 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d902      	bls.n	8005cd0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8005cce:	e005      	b.n	8005cdc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ef      	beq.n	8005cbc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	4904      	ldr	r1, [pc, #16]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	07ff800f 	.word	0x07ff800f
 8005d04:	ff9f800f 	.word	0xff9f800f
 8005d08:	f9ff800f 	.word	0xf9ff800f

08005d0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d1a:	4b72      	ldr	r3, [pc, #456]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00e      	beq.n	8005d44 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d26:	4b6f      	ldr	r3, [pc, #444]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0203 	and.w	r2, r3, #3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d103      	bne.n	8005d3e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
       ||
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d142      	bne.n	8005dc4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
 8005d42:	e03f      	b.n	8005dc4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d018      	beq.n	8005d7e <RCCEx_PLLSAI2_Config+0x72>
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d825      	bhi.n	8005d9c <RCCEx_PLLSAI2_Config+0x90>
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d002      	beq.n	8005d5a <RCCEx_PLLSAI2_Config+0x4e>
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d009      	beq.n	8005d6c <RCCEx_PLLSAI2_Config+0x60>
 8005d58:	e020      	b.n	8005d9c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d5a:	4b62      	ldr	r3, [pc, #392]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11d      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d6a:	e01a      	b.n	8005da2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d6c:	4b5d      	ldr	r3, [pc, #372]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d116      	bne.n	8005da6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d7c:	e013      	b.n	8005da6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d7e:	4b59      	ldr	r3, [pc, #356]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d8a:	4b56      	ldr	r3, [pc, #344]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d9a:	e006      	b.n	8005daa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005da0:	e004      	b.n	8005dac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005da2:	bf00      	nop
 8005da4:	e002      	b.n	8005dac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005daa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005db2:	4b4c      	ldr	r3, [pc, #304]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f023 0203 	bic.w	r2, r3, #3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4949      	ldr	r1, [pc, #292]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 8086 	bne.w	8005ed8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dcc:	4b45      	ldr	r3, [pc, #276]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a44      	ldr	r2, [pc, #272]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd8:	f7fc fadc 	bl	8002394 <HAL_GetTick>
 8005ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dde:	e009      	b.n	8005df4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005de0:	f7fc fad8 	bl	8002394 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d902      	bls.n	8005df4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	73fb      	strb	r3, [r7, #15]
        break;
 8005df2:	e005      	b.n	8005e00 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005df4:	4b3b      	ldr	r3, [pc, #236]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ef      	bne.n	8005de0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d168      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d113      	bne.n	8005e34 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e0c:	4b35      	ldr	r3, [pc, #212]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	4b35      	ldr	r3, [pc, #212]	; (8005ee8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6892      	ldr	r2, [r2, #8]
 8005e18:	0211      	lsls	r1, r2, #8
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	68d2      	ldr	r2, [r2, #12]
 8005e1e:	06d2      	lsls	r2, r2, #27
 8005e20:	4311      	orrs	r1, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6852      	ldr	r2, [r2, #4]
 8005e26:	3a01      	subs	r2, #1
 8005e28:	0112      	lsls	r2, r2, #4
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	492d      	ldr	r1, [pc, #180]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	614b      	str	r3, [r1, #20]
 8005e32:	e02d      	b.n	8005e90 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d115      	bne.n	8005e66 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <RCCEx_PLLSAI2_Config+0x1e0>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	0211      	lsls	r1, r2, #8
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6912      	ldr	r2, [r2, #16]
 8005e4c:	0852      	lsrs	r2, r2, #1
 8005e4e:	3a01      	subs	r2, #1
 8005e50:	0552      	lsls	r2, r2, #21
 8005e52:	4311      	orrs	r1, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6852      	ldr	r2, [r2, #4]
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	0112      	lsls	r2, r2, #4
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	4921      	ldr	r1, [pc, #132]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	614b      	str	r3, [r1, #20]
 8005e64:	e014      	b.n	8005e90 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e66:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6892      	ldr	r2, [r2, #8]
 8005e72:	0211      	lsls	r1, r2, #8
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6952      	ldr	r2, [r2, #20]
 8005e78:	0852      	lsrs	r2, r2, #1
 8005e7a:	3a01      	subs	r2, #1
 8005e7c:	0652      	lsls	r2, r2, #25
 8005e7e:	4311      	orrs	r1, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6852      	ldr	r2, [r2, #4]
 8005e84:	3a01      	subs	r2, #1
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	4916      	ldr	r1, [pc, #88]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e90:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9c:	f7fc fa7a 	bl	8002394 <HAL_GetTick>
 8005ea0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ea2:	e009      	b.n	8005eb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ea4:	f7fc fa76 	bl	8002394 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d902      	bls.n	8005eb8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	73fb      	strb	r3, [r7, #15]
          break;
 8005eb6:	e005      	b.n	8005ec4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ef      	beq.n	8005ea4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	4904      	ldr	r1, [pc, #16]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	07ff800f 	.word	0x07ff800f
 8005eec:	ff9f800f 	.word	0xff9f800f
 8005ef0:	f9ff800f 	.word	0xf9ff800f

08005ef4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e095      	b.n	8006032 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f16:	d009      	beq.n	8005f2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	61da      	str	r2, [r3, #28]
 8005f1e:	e005      	b.n	8005f2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fb fec4 	bl	8001cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f6c:	d902      	bls.n	8005f74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e002      	b.n	8005f7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f82:	d007      	beq.n	8005f94 <HAL_SPI_Init+0xa0>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f8c:	d002      	beq.n	8005f94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	ea42 0103 	orr.w	r1, r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	f003 0204 	and.w	r2, r3, #4
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006010:	ea42 0103 	orr.w	r1, r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e042      	b.n	80060d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fb feae 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2224      	movs	r2, #36	; 0x24
 8006068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f82d 	bl	80060dc <UART_SetConfig>
 8006082:	4603      	mov	r3, r0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e022      	b.n	80060d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fb1d 	bl	80066d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0201 	orr.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fba4 	bl	8006818 <UART_CheckIdleState>
 80060d0:	4603      	mov	r3, r0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b08c      	sub	sp, #48	; 0x30
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	431a      	orrs	r2, r3
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	4313      	orrs	r3, r2
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4baa      	ldr	r3, [pc, #680]	; (80063b4 <UART_SetConfig+0x2d8>)
 800610c:	4013      	ands	r3, r2
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006114:	430b      	orrs	r3, r1
 8006116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a9f      	ldr	r2, [pc, #636]	; (80063b8 <UART_SetConfig+0x2dc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006144:	4313      	orrs	r3, r2
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006152:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800615c:	430b      	orrs	r3, r1
 800615e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	f023 010f 	bic.w	r1, r3, #15
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a90      	ldr	r2, [pc, #576]	; (80063bc <UART_SetConfig+0x2e0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d125      	bne.n	80061cc <UART_SetConfig+0xf0>
 8006180:	4b8f      	ldr	r3, [pc, #572]	; (80063c0 <UART_SetConfig+0x2e4>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b03      	cmp	r3, #3
 800618c:	d81a      	bhi.n	80061c4 <UART_SetConfig+0xe8>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0xb8>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061b5 	.word	0x080061b5
 800619c:	080061ad 	.word	0x080061ad
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061aa:	e116      	b.n	80063da <UART_SetConfig+0x2fe>
 80061ac:	2302      	movs	r3, #2
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b2:	e112      	b.n	80063da <UART_SetConfig+0x2fe>
 80061b4:	2304      	movs	r3, #4
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ba:	e10e      	b.n	80063da <UART_SetConfig+0x2fe>
 80061bc:	2308      	movs	r3, #8
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c2:	e10a      	b.n	80063da <UART_SetConfig+0x2fe>
 80061c4:	2310      	movs	r3, #16
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ca:	e106      	b.n	80063da <UART_SetConfig+0x2fe>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a7c      	ldr	r2, [pc, #496]	; (80063c4 <UART_SetConfig+0x2e8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d138      	bne.n	8006248 <UART_SetConfig+0x16c>
 80061d6:	4b7a      	ldr	r3, [pc, #488]	; (80063c0 <UART_SetConfig+0x2e4>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f003 030c 	and.w	r3, r3, #12
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d82d      	bhi.n	8006240 <UART_SetConfig+0x164>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0x110>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006221 	.word	0x08006221
 80061f0:	08006241 	.word	0x08006241
 80061f4:	08006241 	.word	0x08006241
 80061f8:	08006241 	.word	0x08006241
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006241 	.word	0x08006241
 8006204:	08006241 	.word	0x08006241
 8006208:	08006241 	.word	0x08006241
 800620c:	08006229 	.word	0x08006229
 8006210:	08006241 	.word	0x08006241
 8006214:	08006241 	.word	0x08006241
 8006218:	08006241 	.word	0x08006241
 800621c:	08006239 	.word	0x08006239
 8006220:	2300      	movs	r3, #0
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006226:	e0d8      	b.n	80063da <UART_SetConfig+0x2fe>
 8006228:	2302      	movs	r3, #2
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622e:	e0d4      	b.n	80063da <UART_SetConfig+0x2fe>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006236:	e0d0      	b.n	80063da <UART_SetConfig+0x2fe>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623e:	e0cc      	b.n	80063da <UART_SetConfig+0x2fe>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006246:	e0c8      	b.n	80063da <UART_SetConfig+0x2fe>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a5e      	ldr	r2, [pc, #376]	; (80063c8 <UART_SetConfig+0x2ec>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d125      	bne.n	800629e <UART_SetConfig+0x1c2>
 8006252:	4b5b      	ldr	r3, [pc, #364]	; (80063c0 <UART_SetConfig+0x2e4>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800625c:	2b30      	cmp	r3, #48	; 0x30
 800625e:	d016      	beq.n	800628e <UART_SetConfig+0x1b2>
 8006260:	2b30      	cmp	r3, #48	; 0x30
 8006262:	d818      	bhi.n	8006296 <UART_SetConfig+0x1ba>
 8006264:	2b20      	cmp	r3, #32
 8006266:	d00a      	beq.n	800627e <UART_SetConfig+0x1a2>
 8006268:	2b20      	cmp	r3, #32
 800626a:	d814      	bhi.n	8006296 <UART_SetConfig+0x1ba>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <UART_SetConfig+0x19a>
 8006270:	2b10      	cmp	r3, #16
 8006272:	d008      	beq.n	8006286 <UART_SetConfig+0x1aa>
 8006274:	e00f      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006276:	2300      	movs	r3, #0
 8006278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627c:	e0ad      	b.n	80063da <UART_SetConfig+0x2fe>
 800627e:	2302      	movs	r3, #2
 8006280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006284:	e0a9      	b.n	80063da <UART_SetConfig+0x2fe>
 8006286:	2304      	movs	r3, #4
 8006288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628c:	e0a5      	b.n	80063da <UART_SetConfig+0x2fe>
 800628e:	2308      	movs	r3, #8
 8006290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006294:	e0a1      	b.n	80063da <UART_SetConfig+0x2fe>
 8006296:	2310      	movs	r3, #16
 8006298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800629c:	e09d      	b.n	80063da <UART_SetConfig+0x2fe>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a4a      	ldr	r2, [pc, #296]	; (80063cc <UART_SetConfig+0x2f0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d125      	bne.n	80062f4 <UART_SetConfig+0x218>
 80062a8:	4b45      	ldr	r3, [pc, #276]	; (80063c0 <UART_SetConfig+0x2e4>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062b2:	2bc0      	cmp	r3, #192	; 0xc0
 80062b4:	d016      	beq.n	80062e4 <UART_SetConfig+0x208>
 80062b6:	2bc0      	cmp	r3, #192	; 0xc0
 80062b8:	d818      	bhi.n	80062ec <UART_SetConfig+0x210>
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d00a      	beq.n	80062d4 <UART_SetConfig+0x1f8>
 80062be:	2b80      	cmp	r3, #128	; 0x80
 80062c0:	d814      	bhi.n	80062ec <UART_SetConfig+0x210>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <UART_SetConfig+0x1f0>
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d008      	beq.n	80062dc <UART_SetConfig+0x200>
 80062ca:	e00f      	b.n	80062ec <UART_SetConfig+0x210>
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d2:	e082      	b.n	80063da <UART_SetConfig+0x2fe>
 80062d4:	2302      	movs	r3, #2
 80062d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062da:	e07e      	b.n	80063da <UART_SetConfig+0x2fe>
 80062dc:	2304      	movs	r3, #4
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e2:	e07a      	b.n	80063da <UART_SetConfig+0x2fe>
 80062e4:	2308      	movs	r3, #8
 80062e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ea:	e076      	b.n	80063da <UART_SetConfig+0x2fe>
 80062ec:	2310      	movs	r3, #16
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f2:	e072      	b.n	80063da <UART_SetConfig+0x2fe>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a35      	ldr	r2, [pc, #212]	; (80063d0 <UART_SetConfig+0x2f4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d12a      	bne.n	8006354 <UART_SetConfig+0x278>
 80062fe:	4b30      	ldr	r3, [pc, #192]	; (80063c0 <UART_SetConfig+0x2e4>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630c:	d01a      	beq.n	8006344 <UART_SetConfig+0x268>
 800630e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006312:	d81b      	bhi.n	800634c <UART_SetConfig+0x270>
 8006314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006318:	d00c      	beq.n	8006334 <UART_SetConfig+0x258>
 800631a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631e:	d815      	bhi.n	800634c <UART_SetConfig+0x270>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <UART_SetConfig+0x250>
 8006324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006328:	d008      	beq.n	800633c <UART_SetConfig+0x260>
 800632a:	e00f      	b.n	800634c <UART_SetConfig+0x270>
 800632c:	2300      	movs	r3, #0
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006332:	e052      	b.n	80063da <UART_SetConfig+0x2fe>
 8006334:	2302      	movs	r3, #2
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633a:	e04e      	b.n	80063da <UART_SetConfig+0x2fe>
 800633c:	2304      	movs	r3, #4
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006342:	e04a      	b.n	80063da <UART_SetConfig+0x2fe>
 8006344:	2308      	movs	r3, #8
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800634a:	e046      	b.n	80063da <UART_SetConfig+0x2fe>
 800634c:	2310      	movs	r3, #16
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006352:	e042      	b.n	80063da <UART_SetConfig+0x2fe>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <UART_SetConfig+0x2dc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d13a      	bne.n	80063d4 <UART_SetConfig+0x2f8>
 800635e:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <UART_SetConfig+0x2e4>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800636c:	d01a      	beq.n	80063a4 <UART_SetConfig+0x2c8>
 800636e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006372:	d81b      	bhi.n	80063ac <UART_SetConfig+0x2d0>
 8006374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006378:	d00c      	beq.n	8006394 <UART_SetConfig+0x2b8>
 800637a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637e:	d815      	bhi.n	80063ac <UART_SetConfig+0x2d0>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <UART_SetConfig+0x2b0>
 8006384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006388:	d008      	beq.n	800639c <UART_SetConfig+0x2c0>
 800638a:	e00f      	b.n	80063ac <UART_SetConfig+0x2d0>
 800638c:	2300      	movs	r3, #0
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006392:	e022      	b.n	80063da <UART_SetConfig+0x2fe>
 8006394:	2302      	movs	r3, #2
 8006396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639a:	e01e      	b.n	80063da <UART_SetConfig+0x2fe>
 800639c:	2304      	movs	r3, #4
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a2:	e01a      	b.n	80063da <UART_SetConfig+0x2fe>
 80063a4:	2308      	movs	r3, #8
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063aa:	e016      	b.n	80063da <UART_SetConfig+0x2fe>
 80063ac:	2310      	movs	r3, #16
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b2:	e012      	b.n	80063da <UART_SetConfig+0x2fe>
 80063b4:	cfff69f3 	.word	0xcfff69f3
 80063b8:	40008000 	.word	0x40008000
 80063bc:	40013800 	.word	0x40013800
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40004400 	.word	0x40004400
 80063c8:	40004800 	.word	0x40004800
 80063cc:	40004c00 	.word	0x40004c00
 80063d0:	40005000 	.word	0x40005000
 80063d4:	2310      	movs	r3, #16
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4aae      	ldr	r2, [pc, #696]	; (8006698 <UART_SetConfig+0x5bc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	f040 8097 	bne.w	8006514 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d823      	bhi.n	8006436 <UART_SetConfig+0x35a>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0x318>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006437 	.word	0x08006437
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006437 	.word	0x08006437
 8006404:	08006427 	.word	0x08006427
 8006408:	08006437 	.word	0x08006437
 800640c:	08006437 	.word	0x08006437
 8006410:	08006437 	.word	0x08006437
 8006414:	0800642f 	.word	0x0800642f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006418:	f7fe ff58 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 800641c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800641e:	e010      	b.n	8006442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006420:	4b9e      	ldr	r3, [pc, #632]	; (800669c <UART_SetConfig+0x5c0>)
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006424:	e00d      	b.n	8006442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006426:	f7fe feb9 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800642a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800642c:	e009      	b.n	8006442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006434:	e005      	b.n	8006442 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006440:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8130 	beq.w	80066aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	4a94      	ldr	r2, [pc, #592]	; (80066a0 <UART_SetConfig+0x5c4>)
 8006450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006454:	461a      	mov	r2, r3
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	fbb3 f3f2 	udiv	r3, r3, r2
 800645c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	429a      	cmp	r2, r3
 800646c:	d305      	bcc.n	800647a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d903      	bls.n	8006482 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006480:	e113      	b.n	80066aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	2200      	movs	r2, #0
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	60fa      	str	r2, [r7, #12]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	4a84      	ldr	r2, [pc, #528]	; (80066a0 <UART_SetConfig+0x5c4>)
 8006490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006494:	b29b      	uxth	r3, r3
 8006496:	2200      	movs	r2, #0
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a4:	f7fa fb98 	bl	8000bd8 <__aeabi_uldivmod>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	020b      	lsls	r3, r1, #8
 80064ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064be:	0202      	lsls	r2, r0, #8
 80064c0:	6979      	ldr	r1, [r7, #20]
 80064c2:	6849      	ldr	r1, [r1, #4]
 80064c4:	0849      	lsrs	r1, r1, #1
 80064c6:	2000      	movs	r0, #0
 80064c8:	460c      	mov	r4, r1
 80064ca:	4605      	mov	r5, r0
 80064cc:	eb12 0804 	adds.w	r8, r2, r4
 80064d0:	eb43 0905 	adc.w	r9, r3, r5
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	469a      	mov	sl, r3
 80064dc:	4693      	mov	fp, r2
 80064de:	4652      	mov	r2, sl
 80064e0:	465b      	mov	r3, fp
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7fa fb77 	bl	8000bd8 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4613      	mov	r3, r2
 80064f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f8:	d308      	bcc.n	800650c <UART_SetConfig+0x430>
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006500:	d204      	bcs.n	800650c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	60da      	str	r2, [r3, #12]
 800650a:	e0ce      	b.n	80066aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006512:	e0ca      	b.n	80066aa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651c:	d166      	bne.n	80065ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800651e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006522:	2b08      	cmp	r3, #8
 8006524:	d827      	bhi.n	8006576 <UART_SetConfig+0x49a>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x450>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	08006577 	.word	0x08006577
 800653c:	08006567 	.word	0x08006567
 8006540:	08006577 	.word	0x08006577
 8006544:	08006577 	.word	0x08006577
 8006548:	08006577 	.word	0x08006577
 800654c:	0800656f 	.word	0x0800656f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fe febc 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006556:	e014      	b.n	8006582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006558:	f7fe fece 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800655e:	e010      	b.n	8006582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006560:	4b4e      	ldr	r3, [pc, #312]	; (800669c <UART_SetConfig+0x5c0>)
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006564:	e00d      	b.n	8006582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7fe fe19 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800656c:	e009      	b.n	8006582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006574:	e005      	b.n	8006582 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8090 	beq.w	80066aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	4a44      	ldr	r2, [pc, #272]	; (80066a0 <UART_SetConfig+0x5c4>)
 8006590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006594:	461a      	mov	r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	fbb3 f3f2 	udiv	r3, r3, r2
 800659c:	005a      	lsls	r2, r3, #1
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	441a      	add	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2b0f      	cmp	r3, #15
 80065b4:	d916      	bls.n	80065e4 <UART_SetConfig+0x508>
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065bc:	d212      	bcs.n	80065e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f023 030f 	bic.w	r3, r3, #15
 80065c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	8bfa      	ldrh	r2, [r7, #30]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e062      	b.n	80066aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065ea:	e05e      	b.n	80066aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d828      	bhi.n	8006646 <UART_SetConfig+0x56a>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x520>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006621 	.word	0x08006621
 8006600:	08006629 	.word	0x08006629
 8006604:	08006631 	.word	0x08006631
 8006608:	08006647 	.word	0x08006647
 800660c:	08006637 	.word	0x08006637
 8006610:	08006647 	.word	0x08006647
 8006614:	08006647 	.word	0x08006647
 8006618:	08006647 	.word	0x08006647
 800661c:	0800663f 	.word	0x0800663f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fe fe54 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006626:	e014      	b.n	8006652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006628:	f7fe fe66 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 800662c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800662e:	e010      	b.n	8006652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006630:	4b1a      	ldr	r3, [pc, #104]	; (800669c <UART_SetConfig+0x5c0>)
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006634:	e00d      	b.n	8006652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006636:	f7fe fdb1 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800663a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800663c:	e009      	b.n	8006652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006644:	e005      	b.n	8006652 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006650:	bf00      	nop
    }

    if (pclk != 0U)
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d028      	beq.n	80066aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	4a10      	ldr	r2, [pc, #64]	; (80066a0 <UART_SetConfig+0x5c4>)
 800665e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006662:	461a      	mov	r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	fbb3 f2f2 	udiv	r2, r3, r2
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	441a      	add	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b0f      	cmp	r3, #15
 8006680:	d910      	bls.n	80066a4 <UART_SetConfig+0x5c8>
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d20c      	bcs.n	80066a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	b29a      	uxth	r2, r3
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	e009      	b.n	80066aa <UART_SetConfig+0x5ce>
 8006696:	bf00      	nop
 8006698:	40008000 	.word	0x40008000
 800669c:	00f42400 	.word	0x00f42400
 80066a0:	08009738 	.word	0x08009738
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2200      	movs	r2, #0
 80066be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2200      	movs	r2, #0
 80066c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80066c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3730      	adds	r7, #48	; 0x30
 80066ce:	46bd      	mov	sp, r7
 80066d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01a      	beq.n	80067ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d2:	d10a      	bne.n	80067ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006828:	f7fb fdb4 	bl	8002394 <HAL_GetTick>
 800682c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	2b08      	cmp	r3, #8
 800683a:	d10e      	bne.n	800685a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800683c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f82f 	bl	80068ae <UART_WaitOnFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e025      	b.n	80068a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b04      	cmp	r3, #4
 8006866:	d10e      	bne.n	8006886 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f819 	bl	80068ae <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e00f      	b.n	80068a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b09c      	sub	sp, #112	; 0x70
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	603b      	str	r3, [r7, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068be:	e0a9      	b.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	f000 80a5 	beq.w	8006a14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fb fd63 	bl	8002394 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80068da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d140      	bne.n	8006962 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068f4:	667b      	str	r3, [r7, #100]	; 0x64
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006900:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800690c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e6      	bne.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	663b      	str	r3, [r7, #96]	; 0x60
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006932:	64ba      	str	r2, [r7, #72]	; 0x48
 8006934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e069      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d051      	beq.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697e:	d149      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006988:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800699e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
 80069aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e6      	bne.n	800698a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	613b      	str	r3, [r7, #16]
   return(result);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3308      	adds	r3, #8
 80069da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069dc:	623a      	str	r2, [r7, #32]
 80069de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	69f9      	ldr	r1, [r7, #28]
 80069e2:	6a3a      	ldr	r2, [r7, #32]
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e5      	bne.n	80069bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e010      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69da      	ldr	r2, [r3, #28]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bf0c      	ite	eq
 8006a24:	2301      	moveq	r3, #1
 8006a26:	2300      	movne	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	f43f af46 	beq.w	80068c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3770      	adds	r7, #112	; 0x70
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e027      	b.n	8006aa4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2224      	movs	r2, #36	; 0x24
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0201 	bic.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e02d      	b.n	8006b24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2224      	movs	r2, #36	; 0x24
 8006ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f84f 	bl	8006ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e02d      	b.n	8006ba0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2224      	movs	r2, #36	; 0x24
 8006b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f811 	bl	8006ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d108      	bne.n	8006bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bc8:	e031      	b.n	8006c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bca:	2308      	movs	r3, #8
 8006bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bce:	2308      	movs	r3, #8
 8006bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	0e5b      	lsrs	r3, r3, #25
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	0f5b      	lsrs	r3, r3, #29
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	7b3a      	ldrb	r2, [r7, #12]
 8006bf6:	4911      	ldr	r1, [pc, #68]	; (8006c3c <UARTEx_SetNbDataToProcess+0x94>)
 8006bf8:	5c8a      	ldrb	r2, [r1, r2]
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bfe:	7b3a      	ldrb	r2, [r7, #12]
 8006c00:	490f      	ldr	r1, [pc, #60]	; (8006c40 <UARTEx_SetNbDataToProcess+0x98>)
 8006c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	7b7a      	ldrb	r2, [r7, #13]
 8006c14:	4909      	ldr	r1, [pc, #36]	; (8006c3c <UARTEx_SetNbDataToProcess+0x94>)
 8006c16:	5c8a      	ldrb	r2, [r1, r2]
 8006c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c1c:	7b7a      	ldrb	r2, [r7, #13]
 8006c1e:	4908      	ldr	r1, [pc, #32]	; (8006c40 <UARTEx_SetNbDataToProcess+0x98>)
 8006c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	08009750 	.word	0x08009750
 8006c40:	08009758 	.word	0x08009758

08006c44 <__errno>:
 8006c44:	4b01      	ldr	r3, [pc, #4]	; (8006c4c <__errno+0x8>)
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	2000000c 	.word	0x2000000c

08006c50 <__libc_init_array>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	4d0d      	ldr	r5, [pc, #52]	; (8006c88 <__libc_init_array+0x38>)
 8006c54:	4c0d      	ldr	r4, [pc, #52]	; (8006c8c <__libc_init_array+0x3c>)
 8006c56:	1b64      	subs	r4, r4, r5
 8006c58:	10a4      	asrs	r4, r4, #2
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	42a6      	cmp	r6, r4
 8006c5e:	d109      	bne.n	8006c74 <__libc_init_array+0x24>
 8006c60:	4d0b      	ldr	r5, [pc, #44]	; (8006c90 <__libc_init_array+0x40>)
 8006c62:	4c0c      	ldr	r4, [pc, #48]	; (8006c94 <__libc_init_array+0x44>)
 8006c64:	f002 fd38 	bl	80096d8 <_init>
 8006c68:	1b64      	subs	r4, r4, r5
 8006c6a:	10a4      	asrs	r4, r4, #2
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	42a6      	cmp	r6, r4
 8006c70:	d105      	bne.n	8006c7e <__libc_init_array+0x2e>
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c78:	4798      	blx	r3
 8006c7a:	3601      	adds	r6, #1
 8006c7c:	e7ee      	b.n	8006c5c <__libc_init_array+0xc>
 8006c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c82:	4798      	blx	r3
 8006c84:	3601      	adds	r6, #1
 8006c86:	e7f2      	b.n	8006c6e <__libc_init_array+0x1e>
 8006c88:	08009b44 	.word	0x08009b44
 8006c8c:	08009b44 	.word	0x08009b44
 8006c90:	08009b44 	.word	0x08009b44
 8006c94:	08009b48 	.word	0x08009b48

08006c98 <memset>:
 8006c98:	4402      	add	r2, r0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d100      	bne.n	8006ca2 <memset+0xa>
 8006ca0:	4770      	bx	lr
 8006ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca6:	e7f9      	b.n	8006c9c <memset+0x4>

08006ca8 <__cvt>:
 8006ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	ec55 4b10 	vmov	r4, r5, d0
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	460e      	mov	r6, r1
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	bfbb      	ittet	lt
 8006cba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cbe:	461d      	movlt	r5, r3
 8006cc0:	2300      	movge	r3, #0
 8006cc2:	232d      	movlt	r3, #45	; 0x2d
 8006cc4:	700b      	strb	r3, [r1, #0]
 8006cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ccc:	4691      	mov	r9, r2
 8006cce:	f023 0820 	bic.w	r8, r3, #32
 8006cd2:	bfbc      	itt	lt
 8006cd4:	4622      	movlt	r2, r4
 8006cd6:	4614      	movlt	r4, r2
 8006cd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cdc:	d005      	beq.n	8006cea <__cvt+0x42>
 8006cde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ce2:	d100      	bne.n	8006ce6 <__cvt+0x3e>
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	e000      	b.n	8006cec <__cvt+0x44>
 8006cea:	2103      	movs	r1, #3
 8006cec:	ab03      	add	r3, sp, #12
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	ab02      	add	r3, sp, #8
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	ec45 4b10 	vmov	d0, r4, r5
 8006cf8:	4653      	mov	r3, sl
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	f000 fccc 	bl	8007698 <_dtoa_r>
 8006d00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d04:	4607      	mov	r7, r0
 8006d06:	d102      	bne.n	8006d0e <__cvt+0x66>
 8006d08:	f019 0f01 	tst.w	r9, #1
 8006d0c:	d022      	beq.n	8006d54 <__cvt+0xac>
 8006d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d12:	eb07 0906 	add.w	r9, r7, r6
 8006d16:	d110      	bne.n	8006d3a <__cvt+0x92>
 8006d18:	783b      	ldrb	r3, [r7, #0]
 8006d1a:	2b30      	cmp	r3, #48	; 0x30
 8006d1c:	d10a      	bne.n	8006d34 <__cvt+0x8c>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2300      	movs	r3, #0
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 fee7 	bl	8000af8 <__aeabi_dcmpeq>
 8006d2a:	b918      	cbnz	r0, 8006d34 <__cvt+0x8c>
 8006d2c:	f1c6 0601 	rsb	r6, r6, #1
 8006d30:	f8ca 6000 	str.w	r6, [sl]
 8006d34:	f8da 3000 	ldr.w	r3, [sl]
 8006d38:	4499      	add	r9, r3
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 fed9 	bl	8000af8 <__aeabi_dcmpeq>
 8006d46:	b108      	cbz	r0, 8006d4c <__cvt+0xa4>
 8006d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d4c:	2230      	movs	r2, #48	; 0x30
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	454b      	cmp	r3, r9
 8006d52:	d307      	bcc.n	8006d64 <__cvt+0xbc>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d58:	1bdb      	subs	r3, r3, r7
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	b004      	add	sp, #16
 8006d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d64:	1c59      	adds	r1, r3, #1
 8006d66:	9103      	str	r1, [sp, #12]
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	e7f0      	b.n	8006d4e <__cvt+0xa6>

08006d6c <__exponent>:
 8006d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2900      	cmp	r1, #0
 8006d72:	bfb8      	it	lt
 8006d74:	4249      	neglt	r1, r1
 8006d76:	f803 2b02 	strb.w	r2, [r3], #2
 8006d7a:	bfb4      	ite	lt
 8006d7c:	222d      	movlt	r2, #45	; 0x2d
 8006d7e:	222b      	movge	r2, #43	; 0x2b
 8006d80:	2909      	cmp	r1, #9
 8006d82:	7042      	strb	r2, [r0, #1]
 8006d84:	dd2a      	ble.n	8006ddc <__exponent+0x70>
 8006d86:	f10d 0407 	add.w	r4, sp, #7
 8006d8a:	46a4      	mov	ip, r4
 8006d8c:	270a      	movs	r7, #10
 8006d8e:	46a6      	mov	lr, r4
 8006d90:	460a      	mov	r2, r1
 8006d92:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d96:	fb07 1516 	mls	r5, r7, r6, r1
 8006d9a:	3530      	adds	r5, #48	; 0x30
 8006d9c:	2a63      	cmp	r2, #99	; 0x63
 8006d9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006da2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006da6:	4631      	mov	r1, r6
 8006da8:	dcf1      	bgt.n	8006d8e <__exponent+0x22>
 8006daa:	3130      	adds	r1, #48	; 0x30
 8006dac:	f1ae 0502 	sub.w	r5, lr, #2
 8006db0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006db4:	1c44      	adds	r4, r0, #1
 8006db6:	4629      	mov	r1, r5
 8006db8:	4561      	cmp	r1, ip
 8006dba:	d30a      	bcc.n	8006dd2 <__exponent+0x66>
 8006dbc:	f10d 0209 	add.w	r2, sp, #9
 8006dc0:	eba2 020e 	sub.w	r2, r2, lr
 8006dc4:	4565      	cmp	r5, ip
 8006dc6:	bf88      	it	hi
 8006dc8:	2200      	movhi	r2, #0
 8006dca:	4413      	add	r3, r2
 8006dcc:	1a18      	subs	r0, r3, r0
 8006dce:	b003      	add	sp, #12
 8006dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dda:	e7ed      	b.n	8006db8 <__exponent+0x4c>
 8006ddc:	2330      	movs	r3, #48	; 0x30
 8006dde:	3130      	adds	r1, #48	; 0x30
 8006de0:	7083      	strb	r3, [r0, #2]
 8006de2:	70c1      	strb	r1, [r0, #3]
 8006de4:	1d03      	adds	r3, r0, #4
 8006de6:	e7f1      	b.n	8006dcc <__exponent+0x60>

08006de8 <_printf_float>:
 8006de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	ed2d 8b02 	vpush	{d8}
 8006df0:	b08d      	sub	sp, #52	; 0x34
 8006df2:	460c      	mov	r4, r1
 8006df4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006df8:	4616      	mov	r6, r2
 8006dfa:	461f      	mov	r7, r3
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	f001 fa39 	bl	8008274 <_localeconv_r>
 8006e02:	f8d0 a000 	ldr.w	sl, [r0]
 8006e06:	4650      	mov	r0, sl
 8006e08:	f7f9 f9fa 	bl	8000200 <strlen>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	f8d8 3000 	ldr.w	r3, [r8]
 8006e18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	f023 0307 	bic.w	r3, r3, #7
 8006e22:	f103 0208 	add.w	r2, r3, #8
 8006e26:	f8c8 2000 	str.w	r2, [r8]
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e3a:	9307      	str	r3, [sp, #28]
 8006e3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e40:	ee08 0a10 	vmov	s16, r0
 8006e44:	4b9f      	ldr	r3, [pc, #636]	; (80070c4 <_printf_float+0x2dc>)
 8006e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	f7f9 fe85 	bl	8000b5c <__aeabi_dcmpun>
 8006e52:	bb88      	cbnz	r0, 8006eb8 <_printf_float+0xd0>
 8006e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e58:	4b9a      	ldr	r3, [pc, #616]	; (80070c4 <_printf_float+0x2dc>)
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	f7f9 fe5f 	bl	8000b20 <__aeabi_dcmple>
 8006e62:	bb48      	cbnz	r0, 8006eb8 <_printf_float+0xd0>
 8006e64:	2200      	movs	r2, #0
 8006e66:	2300      	movs	r3, #0
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 fe4e 	bl	8000b0c <__aeabi_dcmplt>
 8006e70:	b110      	cbz	r0, 8006e78 <_printf_float+0x90>
 8006e72:	232d      	movs	r3, #45	; 0x2d
 8006e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e78:	4b93      	ldr	r3, [pc, #588]	; (80070c8 <_printf_float+0x2e0>)
 8006e7a:	4894      	ldr	r0, [pc, #592]	; (80070cc <_printf_float+0x2e4>)
 8006e7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e80:	bf94      	ite	ls
 8006e82:	4698      	movls	r8, r3
 8006e84:	4680      	movhi	r8, r0
 8006e86:	2303      	movs	r3, #3
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	9b05      	ldr	r3, [sp, #20]
 8006e8c:	f023 0204 	bic.w	r2, r3, #4
 8006e90:	6022      	str	r2, [r4, #0]
 8006e92:	f04f 0900 	mov.w	r9, #0
 8006e96:	9700      	str	r7, [sp, #0]
 8006e98:	4633      	mov	r3, r6
 8006e9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 f9d8 	bl	8007254 <_printf_common>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f040 8090 	bne.w	8006fca <_printf_float+0x1e2>
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006eae:	b00d      	add	sp, #52	; 0x34
 8006eb0:	ecbd 8b02 	vpop	{d8}
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	4642      	mov	r2, r8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 fe4c 	bl	8000b5c <__aeabi_dcmpun>
 8006ec4:	b140      	cbz	r0, 8006ed8 <_printf_float+0xf0>
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfbc      	itt	lt
 8006ecc:	232d      	movlt	r3, #45	; 0x2d
 8006ece:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ed2:	487f      	ldr	r0, [pc, #508]	; (80070d0 <_printf_float+0x2e8>)
 8006ed4:	4b7f      	ldr	r3, [pc, #508]	; (80070d4 <_printf_float+0x2ec>)
 8006ed6:	e7d1      	b.n	8006e7c <_printf_float+0x94>
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ede:	9206      	str	r2, [sp, #24]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	d13f      	bne.n	8006f64 <_printf_float+0x17c>
 8006ee4:	2306      	movs	r3, #6
 8006ee6:	6063      	str	r3, [r4, #4]
 8006ee8:	9b05      	ldr	r3, [sp, #20]
 8006eea:	6861      	ldr	r1, [r4, #4]
 8006eec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9303      	str	r3, [sp, #12]
 8006ef4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ef6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006efa:	ab09      	add	r3, sp, #36	; 0x24
 8006efc:	ec49 8b10 	vmov	d0, r8, r9
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f7ff fecd 	bl	8006ca8 <__cvt>
 8006f0e:	9b06      	ldr	r3, [sp, #24]
 8006f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f12:	2b47      	cmp	r3, #71	; 0x47
 8006f14:	4680      	mov	r8, r0
 8006f16:	d108      	bne.n	8006f2a <_printf_float+0x142>
 8006f18:	1cc8      	adds	r0, r1, #3
 8006f1a:	db02      	blt.n	8006f22 <_printf_float+0x13a>
 8006f1c:	6863      	ldr	r3, [r4, #4]
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	dd41      	ble.n	8006fa6 <_printf_float+0x1be>
 8006f22:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f26:	fa5f fb8b 	uxtb.w	fp, fp
 8006f2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f2e:	d820      	bhi.n	8006f72 <_printf_float+0x18a>
 8006f30:	3901      	subs	r1, #1
 8006f32:	465a      	mov	r2, fp
 8006f34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f38:	9109      	str	r1, [sp, #36]	; 0x24
 8006f3a:	f7ff ff17 	bl	8006d6c <__exponent>
 8006f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f40:	1813      	adds	r3, r2, r0
 8006f42:	2a01      	cmp	r2, #1
 8006f44:	4681      	mov	r9, r0
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	dc02      	bgt.n	8006f50 <_printf_float+0x168>
 8006f4a:	6822      	ldr	r2, [r4, #0]
 8006f4c:	07d2      	lsls	r2, r2, #31
 8006f4e:	d501      	bpl.n	8006f54 <_printf_float+0x16c>
 8006f50:	3301      	adds	r3, #1
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d09c      	beq.n	8006e96 <_printf_float+0xae>
 8006f5c:	232d      	movs	r3, #45	; 0x2d
 8006f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f62:	e798      	b.n	8006e96 <_printf_float+0xae>
 8006f64:	9a06      	ldr	r2, [sp, #24]
 8006f66:	2a47      	cmp	r2, #71	; 0x47
 8006f68:	d1be      	bne.n	8006ee8 <_printf_float+0x100>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1bc      	bne.n	8006ee8 <_printf_float+0x100>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e7b9      	b.n	8006ee6 <_printf_float+0xfe>
 8006f72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f76:	d118      	bne.n	8006faa <_printf_float+0x1c2>
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	6863      	ldr	r3, [r4, #4]
 8006f7c:	dd0b      	ble.n	8006f96 <_printf_float+0x1ae>
 8006f7e:	6121      	str	r1, [r4, #16]
 8006f80:	b913      	cbnz	r3, 8006f88 <_printf_float+0x1a0>
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	07d0      	lsls	r0, r2, #31
 8006f86:	d502      	bpl.n	8006f8e <_printf_float+0x1a6>
 8006f88:	3301      	adds	r3, #1
 8006f8a:	440b      	add	r3, r1
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f90:	f04f 0900 	mov.w	r9, #0
 8006f94:	e7de      	b.n	8006f54 <_printf_float+0x16c>
 8006f96:	b913      	cbnz	r3, 8006f9e <_printf_float+0x1b6>
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	07d2      	lsls	r2, r2, #31
 8006f9c:	d501      	bpl.n	8006fa2 <_printf_float+0x1ba>
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	e7f4      	b.n	8006f8c <_printf_float+0x1a4>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7f2      	b.n	8006f8c <_printf_float+0x1a4>
 8006fa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fac:	4299      	cmp	r1, r3
 8006fae:	db05      	blt.n	8006fbc <_printf_float+0x1d4>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	6121      	str	r1, [r4, #16]
 8006fb4:	07d8      	lsls	r0, r3, #31
 8006fb6:	d5ea      	bpl.n	8006f8e <_printf_float+0x1a6>
 8006fb8:	1c4b      	adds	r3, r1, #1
 8006fba:	e7e7      	b.n	8006f8c <_printf_float+0x1a4>
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	bfd4      	ite	le
 8006fc0:	f1c1 0202 	rsble	r2, r1, #2
 8006fc4:	2201      	movgt	r2, #1
 8006fc6:	4413      	add	r3, r2
 8006fc8:	e7e0      	b.n	8006f8c <_printf_float+0x1a4>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	055a      	lsls	r2, r3, #21
 8006fce:	d407      	bmi.n	8006fe0 <_printf_float+0x1f8>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d12c      	bne.n	8007038 <_printf_float+0x250>
 8006fde:	e764      	b.n	8006eaa <_printf_float+0xc2>
 8006fe0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe4:	f240 80e0 	bls.w	80071a8 <_printf_float+0x3c0>
 8006fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fec:	2200      	movs	r2, #0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f7f9 fd82 	bl	8000af8 <__aeabi_dcmpeq>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d034      	beq.n	8007062 <_printf_float+0x27a>
 8006ff8:	4a37      	ldr	r2, [pc, #220]	; (80070d8 <_printf_float+0x2f0>)
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f af51 	beq.w	8006eaa <_printf_float+0xc2>
 8007008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800700c:	429a      	cmp	r2, r3
 800700e:	db02      	blt.n	8007016 <_printf_float+0x22e>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	07d8      	lsls	r0, r3, #31
 8007014:	d510      	bpl.n	8007038 <_printf_float+0x250>
 8007016:	ee18 3a10 	vmov	r3, s16
 800701a:	4652      	mov	r2, sl
 800701c:	4631      	mov	r1, r6
 800701e:	4628      	mov	r0, r5
 8007020:	47b8      	blx	r7
 8007022:	3001      	adds	r0, #1
 8007024:	f43f af41 	beq.w	8006eaa <_printf_float+0xc2>
 8007028:	f04f 0800 	mov.w	r8, #0
 800702c:	f104 091a 	add.w	r9, r4, #26
 8007030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007032:	3b01      	subs	r3, #1
 8007034:	4543      	cmp	r3, r8
 8007036:	dc09      	bgt.n	800704c <_printf_float+0x264>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	079b      	lsls	r3, r3, #30
 800703c:	f100 8105 	bmi.w	800724a <_printf_float+0x462>
 8007040:	68e0      	ldr	r0, [r4, #12]
 8007042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007044:	4298      	cmp	r0, r3
 8007046:	bfb8      	it	lt
 8007048:	4618      	movlt	r0, r3
 800704a:	e730      	b.n	8006eae <_printf_float+0xc6>
 800704c:	2301      	movs	r3, #1
 800704e:	464a      	mov	r2, r9
 8007050:	4631      	mov	r1, r6
 8007052:	4628      	mov	r0, r5
 8007054:	47b8      	blx	r7
 8007056:	3001      	adds	r0, #1
 8007058:	f43f af27 	beq.w	8006eaa <_printf_float+0xc2>
 800705c:	f108 0801 	add.w	r8, r8, #1
 8007060:	e7e6      	b.n	8007030 <_printf_float+0x248>
 8007062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	dc39      	bgt.n	80070dc <_printf_float+0x2f4>
 8007068:	4a1b      	ldr	r2, [pc, #108]	; (80070d8 <_printf_float+0x2f0>)
 800706a:	2301      	movs	r3, #1
 800706c:	4631      	mov	r1, r6
 800706e:	4628      	mov	r0, r5
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f af19 	beq.w	8006eaa <_printf_float+0xc2>
 8007078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800707c:	4313      	orrs	r3, r2
 800707e:	d102      	bne.n	8007086 <_printf_float+0x29e>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	07d9      	lsls	r1, r3, #31
 8007084:	d5d8      	bpl.n	8007038 <_printf_float+0x250>
 8007086:	ee18 3a10 	vmov	r3, s16
 800708a:	4652      	mov	r2, sl
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f af09 	beq.w	8006eaa <_printf_float+0xc2>
 8007098:	f04f 0900 	mov.w	r9, #0
 800709c:	f104 0a1a 	add.w	sl, r4, #26
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	425b      	negs	r3, r3
 80070a4:	454b      	cmp	r3, r9
 80070a6:	dc01      	bgt.n	80070ac <_printf_float+0x2c4>
 80070a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070aa:	e792      	b.n	8006fd2 <_printf_float+0x1ea>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4652      	mov	r2, sl
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f aef7 	beq.w	8006eaa <_printf_float+0xc2>
 80070bc:	f109 0901 	add.w	r9, r9, #1
 80070c0:	e7ee      	b.n	80070a0 <_printf_float+0x2b8>
 80070c2:	bf00      	nop
 80070c4:	7fefffff 	.word	0x7fefffff
 80070c8:	08009764 	.word	0x08009764
 80070cc:	08009768 	.word	0x08009768
 80070d0:	08009770 	.word	0x08009770
 80070d4:	0800976c 	.word	0x0800976c
 80070d8:	08009774 	.word	0x08009774
 80070dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070e0:	429a      	cmp	r2, r3
 80070e2:	bfa8      	it	ge
 80070e4:	461a      	movge	r2, r3
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	4691      	mov	r9, r2
 80070ea:	dc37      	bgt.n	800715c <_printf_float+0x374>
 80070ec:	f04f 0b00 	mov.w	fp, #0
 80070f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f4:	f104 021a 	add.w	r2, r4, #26
 80070f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	eba3 0309 	sub.w	r3, r3, r9
 8007100:	455b      	cmp	r3, fp
 8007102:	dc33      	bgt.n	800716c <_printf_float+0x384>
 8007104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007108:	429a      	cmp	r2, r3
 800710a:	db3b      	blt.n	8007184 <_printf_float+0x39c>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	07da      	lsls	r2, r3, #31
 8007110:	d438      	bmi.n	8007184 <_printf_float+0x39c>
 8007112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007114:	9a05      	ldr	r2, [sp, #20]
 8007116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007118:	1a9a      	subs	r2, r3, r2
 800711a:	eba3 0901 	sub.w	r9, r3, r1
 800711e:	4591      	cmp	r9, r2
 8007120:	bfa8      	it	ge
 8007122:	4691      	movge	r9, r2
 8007124:	f1b9 0f00 	cmp.w	r9, #0
 8007128:	dc35      	bgt.n	8007196 <_printf_float+0x3ae>
 800712a:	f04f 0800 	mov.w	r8, #0
 800712e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007132:	f104 0a1a 	add.w	sl, r4, #26
 8007136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	eba3 0309 	sub.w	r3, r3, r9
 8007140:	4543      	cmp	r3, r8
 8007142:	f77f af79 	ble.w	8007038 <_printf_float+0x250>
 8007146:	2301      	movs	r3, #1
 8007148:	4652      	mov	r2, sl
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f aeaa 	beq.w	8006eaa <_printf_float+0xc2>
 8007156:	f108 0801 	add.w	r8, r8, #1
 800715a:	e7ec      	b.n	8007136 <_printf_float+0x34e>
 800715c:	4613      	mov	r3, r2
 800715e:	4631      	mov	r1, r6
 8007160:	4642      	mov	r2, r8
 8007162:	4628      	mov	r0, r5
 8007164:	47b8      	blx	r7
 8007166:	3001      	adds	r0, #1
 8007168:	d1c0      	bne.n	80070ec <_printf_float+0x304>
 800716a:	e69e      	b.n	8006eaa <_printf_float+0xc2>
 800716c:	2301      	movs	r3, #1
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	9205      	str	r2, [sp, #20]
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	f43f ae97 	beq.w	8006eaa <_printf_float+0xc2>
 800717c:	9a05      	ldr	r2, [sp, #20]
 800717e:	f10b 0b01 	add.w	fp, fp, #1
 8007182:	e7b9      	b.n	80070f8 <_printf_float+0x310>
 8007184:	ee18 3a10 	vmov	r3, s16
 8007188:	4652      	mov	r2, sl
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	47b8      	blx	r7
 8007190:	3001      	adds	r0, #1
 8007192:	d1be      	bne.n	8007112 <_printf_float+0x32a>
 8007194:	e689      	b.n	8006eaa <_printf_float+0xc2>
 8007196:	9a05      	ldr	r2, [sp, #20]
 8007198:	464b      	mov	r3, r9
 800719a:	4442      	add	r2, r8
 800719c:	4631      	mov	r1, r6
 800719e:	4628      	mov	r0, r5
 80071a0:	47b8      	blx	r7
 80071a2:	3001      	adds	r0, #1
 80071a4:	d1c1      	bne.n	800712a <_printf_float+0x342>
 80071a6:	e680      	b.n	8006eaa <_printf_float+0xc2>
 80071a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071aa:	2a01      	cmp	r2, #1
 80071ac:	dc01      	bgt.n	80071b2 <_printf_float+0x3ca>
 80071ae:	07db      	lsls	r3, r3, #31
 80071b0:	d538      	bpl.n	8007224 <_printf_float+0x43c>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4642      	mov	r2, r8
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	47b8      	blx	r7
 80071bc:	3001      	adds	r0, #1
 80071be:	f43f ae74 	beq.w	8006eaa <_printf_float+0xc2>
 80071c2:	ee18 3a10 	vmov	r3, s16
 80071c6:	4652      	mov	r2, sl
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f ae6b 	beq.w	8006eaa <_printf_float+0xc2>
 80071d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d8:	2200      	movs	r2, #0
 80071da:	2300      	movs	r3, #0
 80071dc:	f7f9 fc8c 	bl	8000af8 <__aeabi_dcmpeq>
 80071e0:	b9d8      	cbnz	r0, 800721a <_printf_float+0x432>
 80071e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e4:	f108 0201 	add.w	r2, r8, #1
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	d10e      	bne.n	8007212 <_printf_float+0x42a>
 80071f4:	e659      	b.n	8006eaa <_printf_float+0xc2>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4652      	mov	r2, sl
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	f43f ae52 	beq.w	8006eaa <_printf_float+0xc2>
 8007206:	f108 0801 	add.w	r8, r8, #1
 800720a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720c:	3b01      	subs	r3, #1
 800720e:	4543      	cmp	r3, r8
 8007210:	dcf1      	bgt.n	80071f6 <_printf_float+0x40e>
 8007212:	464b      	mov	r3, r9
 8007214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007218:	e6dc      	b.n	8006fd4 <_printf_float+0x1ec>
 800721a:	f04f 0800 	mov.w	r8, #0
 800721e:	f104 0a1a 	add.w	sl, r4, #26
 8007222:	e7f2      	b.n	800720a <_printf_float+0x422>
 8007224:	2301      	movs	r3, #1
 8007226:	4642      	mov	r2, r8
 8007228:	e7df      	b.n	80071ea <_printf_float+0x402>
 800722a:	2301      	movs	r3, #1
 800722c:	464a      	mov	r2, r9
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	f43f ae38 	beq.w	8006eaa <_printf_float+0xc2>
 800723a:	f108 0801 	add.w	r8, r8, #1
 800723e:	68e3      	ldr	r3, [r4, #12]
 8007240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007242:	1a5b      	subs	r3, r3, r1
 8007244:	4543      	cmp	r3, r8
 8007246:	dcf0      	bgt.n	800722a <_printf_float+0x442>
 8007248:	e6fa      	b.n	8007040 <_printf_float+0x258>
 800724a:	f04f 0800 	mov.w	r8, #0
 800724e:	f104 0919 	add.w	r9, r4, #25
 8007252:	e7f4      	b.n	800723e <_printf_float+0x456>

08007254 <_printf_common>:
 8007254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	4616      	mov	r6, r2
 800725a:	4699      	mov	r9, r3
 800725c:	688a      	ldr	r2, [r1, #8]
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007264:	4293      	cmp	r3, r2
 8007266:	bfb8      	it	lt
 8007268:	4613      	movlt	r3, r2
 800726a:	6033      	str	r3, [r6, #0]
 800726c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007270:	4607      	mov	r7, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b10a      	cbz	r2, 800727a <_printf_common+0x26>
 8007276:	3301      	adds	r3, #1
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	0699      	lsls	r1, r3, #26
 800727e:	bf42      	ittt	mi
 8007280:	6833      	ldrmi	r3, [r6, #0]
 8007282:	3302      	addmi	r3, #2
 8007284:	6033      	strmi	r3, [r6, #0]
 8007286:	6825      	ldr	r5, [r4, #0]
 8007288:	f015 0506 	ands.w	r5, r5, #6
 800728c:	d106      	bne.n	800729c <_printf_common+0x48>
 800728e:	f104 0a19 	add.w	sl, r4, #25
 8007292:	68e3      	ldr	r3, [r4, #12]
 8007294:	6832      	ldr	r2, [r6, #0]
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc26      	bgt.n	80072ea <_printf_common+0x96>
 800729c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a0:	1e13      	subs	r3, r2, #0
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	bf18      	it	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	0692      	lsls	r2, r2, #26
 80072aa:	d42b      	bmi.n	8007304 <_printf_common+0xb0>
 80072ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b0:	4649      	mov	r1, r9
 80072b2:	4638      	mov	r0, r7
 80072b4:	47c0      	blx	r8
 80072b6:	3001      	adds	r0, #1
 80072b8:	d01e      	beq.n	80072f8 <_printf_common+0xa4>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	68e5      	ldr	r5, [r4, #12]
 80072be:	6832      	ldr	r2, [r6, #0]
 80072c0:	f003 0306 	and.w	r3, r3, #6
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	bf08      	it	eq
 80072c8:	1aad      	subeq	r5, r5, r2
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	bf0c      	ite	eq
 80072d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d4:	2500      	movne	r5, #0
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bfc4      	itt	gt
 80072da:	1a9b      	subgt	r3, r3, r2
 80072dc:	18ed      	addgt	r5, r5, r3
 80072de:	2600      	movs	r6, #0
 80072e0:	341a      	adds	r4, #26
 80072e2:	42b5      	cmp	r5, r6
 80072e4:	d11a      	bne.n	800731c <_printf_common+0xc8>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e008      	b.n	80072fc <_printf_common+0xa8>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4649      	mov	r1, r9
 80072f0:	4638      	mov	r0, r7
 80072f2:	47c0      	blx	r8
 80072f4:	3001      	adds	r0, #1
 80072f6:	d103      	bne.n	8007300 <_printf_common+0xac>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007300:	3501      	adds	r5, #1
 8007302:	e7c6      	b.n	8007292 <_printf_common+0x3e>
 8007304:	18e1      	adds	r1, r4, r3
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	2030      	movs	r0, #48	; 0x30
 800730a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730e:	4422      	add	r2, r4
 8007310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007318:	3302      	adds	r3, #2
 800731a:	e7c7      	b.n	80072ac <_printf_common+0x58>
 800731c:	2301      	movs	r3, #1
 800731e:	4622      	mov	r2, r4
 8007320:	4649      	mov	r1, r9
 8007322:	4638      	mov	r0, r7
 8007324:	47c0      	blx	r8
 8007326:	3001      	adds	r0, #1
 8007328:	d0e6      	beq.n	80072f8 <_printf_common+0xa4>
 800732a:	3601      	adds	r6, #1
 800732c:	e7d9      	b.n	80072e2 <_printf_common+0x8e>
	...

08007330 <_printf_i>:
 8007330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	7e0f      	ldrb	r7, [r1, #24]
 8007336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007338:	2f78      	cmp	r7, #120	; 0x78
 800733a:	4691      	mov	r9, r2
 800733c:	4680      	mov	r8, r0
 800733e:	460c      	mov	r4, r1
 8007340:	469a      	mov	sl, r3
 8007342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007346:	d807      	bhi.n	8007358 <_printf_i+0x28>
 8007348:	2f62      	cmp	r7, #98	; 0x62
 800734a:	d80a      	bhi.n	8007362 <_printf_i+0x32>
 800734c:	2f00      	cmp	r7, #0
 800734e:	f000 80d8 	beq.w	8007502 <_printf_i+0x1d2>
 8007352:	2f58      	cmp	r7, #88	; 0x58
 8007354:	f000 80a3 	beq.w	800749e <_printf_i+0x16e>
 8007358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007360:	e03a      	b.n	80073d8 <_printf_i+0xa8>
 8007362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007366:	2b15      	cmp	r3, #21
 8007368:	d8f6      	bhi.n	8007358 <_printf_i+0x28>
 800736a:	a101      	add	r1, pc, #4	; (adr r1, 8007370 <_printf_i+0x40>)
 800736c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073dd 	.word	0x080073dd
 8007378:	08007359 	.word	0x08007359
 800737c:	08007359 	.word	0x08007359
 8007380:	08007359 	.word	0x08007359
 8007384:	08007359 	.word	0x08007359
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007359 	.word	0x08007359
 8007390:	08007359 	.word	0x08007359
 8007394:	08007359 	.word	0x08007359
 8007398:	08007359 	.word	0x08007359
 800739c:	080074e9 	.word	0x080074e9
 80073a0:	0800740d 	.word	0x0800740d
 80073a4:	080074cb 	.word	0x080074cb
 80073a8:	08007359 	.word	0x08007359
 80073ac:	08007359 	.word	0x08007359
 80073b0:	0800750b 	.word	0x0800750b
 80073b4:	08007359 	.word	0x08007359
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007359 	.word	0x08007359
 80073c0:	08007359 	.word	0x08007359
 80073c4:	080074d3 	.word	0x080074d3
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	1d1a      	adds	r2, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	602a      	str	r2, [r5, #0]
 80073d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d8:	2301      	movs	r3, #1
 80073da:	e0a3      	b.n	8007524 <_printf_i+0x1f4>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	6829      	ldr	r1, [r5, #0]
 80073e0:	0606      	lsls	r6, r0, #24
 80073e2:	f101 0304 	add.w	r3, r1, #4
 80073e6:	d50a      	bpl.n	80073fe <_printf_i+0xce>
 80073e8:	680e      	ldr	r6, [r1, #0]
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	da03      	bge.n	80073f8 <_printf_i+0xc8>
 80073f0:	232d      	movs	r3, #45	; 0x2d
 80073f2:	4276      	negs	r6, r6
 80073f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f8:	485e      	ldr	r0, [pc, #376]	; (8007574 <_printf_i+0x244>)
 80073fa:	230a      	movs	r3, #10
 80073fc:	e019      	b.n	8007432 <_printf_i+0x102>
 80073fe:	680e      	ldr	r6, [r1, #0]
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007406:	bf18      	it	ne
 8007408:	b236      	sxthne	r6, r6
 800740a:	e7ef      	b.n	80073ec <_printf_i+0xbc>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	6820      	ldr	r0, [r4, #0]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	6029      	str	r1, [r5, #0]
 8007414:	0601      	lsls	r1, r0, #24
 8007416:	d501      	bpl.n	800741c <_printf_i+0xec>
 8007418:	681e      	ldr	r6, [r3, #0]
 800741a:	e002      	b.n	8007422 <_printf_i+0xf2>
 800741c:	0646      	lsls	r6, r0, #25
 800741e:	d5fb      	bpl.n	8007418 <_printf_i+0xe8>
 8007420:	881e      	ldrh	r6, [r3, #0]
 8007422:	4854      	ldr	r0, [pc, #336]	; (8007574 <_printf_i+0x244>)
 8007424:	2f6f      	cmp	r7, #111	; 0x6f
 8007426:	bf0c      	ite	eq
 8007428:	2308      	moveq	r3, #8
 800742a:	230a      	movne	r3, #10
 800742c:	2100      	movs	r1, #0
 800742e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007432:	6865      	ldr	r5, [r4, #4]
 8007434:	60a5      	str	r5, [r4, #8]
 8007436:	2d00      	cmp	r5, #0
 8007438:	bfa2      	ittt	ge
 800743a:	6821      	ldrge	r1, [r4, #0]
 800743c:	f021 0104 	bicge.w	r1, r1, #4
 8007440:	6021      	strge	r1, [r4, #0]
 8007442:	b90e      	cbnz	r6, 8007448 <_printf_i+0x118>
 8007444:	2d00      	cmp	r5, #0
 8007446:	d04d      	beq.n	80074e4 <_printf_i+0x1b4>
 8007448:	4615      	mov	r5, r2
 800744a:	fbb6 f1f3 	udiv	r1, r6, r3
 800744e:	fb03 6711 	mls	r7, r3, r1, r6
 8007452:	5dc7      	ldrb	r7, [r0, r7]
 8007454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007458:	4637      	mov	r7, r6
 800745a:	42bb      	cmp	r3, r7
 800745c:	460e      	mov	r6, r1
 800745e:	d9f4      	bls.n	800744a <_printf_i+0x11a>
 8007460:	2b08      	cmp	r3, #8
 8007462:	d10b      	bne.n	800747c <_printf_i+0x14c>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	07de      	lsls	r6, r3, #31
 8007468:	d508      	bpl.n	800747c <_printf_i+0x14c>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	6861      	ldr	r1, [r4, #4]
 800746e:	4299      	cmp	r1, r3
 8007470:	bfde      	ittt	le
 8007472:	2330      	movle	r3, #48	; 0x30
 8007474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800747c:	1b52      	subs	r2, r2, r5
 800747e:	6122      	str	r2, [r4, #16]
 8007480:	f8cd a000 	str.w	sl, [sp]
 8007484:	464b      	mov	r3, r9
 8007486:	aa03      	add	r2, sp, #12
 8007488:	4621      	mov	r1, r4
 800748a:	4640      	mov	r0, r8
 800748c:	f7ff fee2 	bl	8007254 <_printf_common>
 8007490:	3001      	adds	r0, #1
 8007492:	d14c      	bne.n	800752e <_printf_i+0x1fe>
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	b004      	add	sp, #16
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	4835      	ldr	r0, [pc, #212]	; (8007574 <_printf_i+0x244>)
 80074a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074a4:	6829      	ldr	r1, [r5, #0]
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074ac:	6029      	str	r1, [r5, #0]
 80074ae:	061d      	lsls	r5, r3, #24
 80074b0:	d514      	bpl.n	80074dc <_printf_i+0x1ac>
 80074b2:	07df      	lsls	r7, r3, #31
 80074b4:	bf44      	itt	mi
 80074b6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ba:	6023      	strmi	r3, [r4, #0]
 80074bc:	b91e      	cbnz	r6, 80074c6 <_printf_i+0x196>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f023 0320 	bic.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	2310      	movs	r3, #16
 80074c8:	e7b0      	b.n	800742c <_printf_i+0xfc>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f043 0320 	orr.w	r3, r3, #32
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	2378      	movs	r3, #120	; 0x78
 80074d4:	4828      	ldr	r0, [pc, #160]	; (8007578 <_printf_i+0x248>)
 80074d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074da:	e7e3      	b.n	80074a4 <_printf_i+0x174>
 80074dc:	0659      	lsls	r1, r3, #25
 80074de:	bf48      	it	mi
 80074e0:	b2b6      	uxthmi	r6, r6
 80074e2:	e7e6      	b.n	80074b2 <_printf_i+0x182>
 80074e4:	4615      	mov	r5, r2
 80074e6:	e7bb      	b.n	8007460 <_printf_i+0x130>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	6826      	ldr	r6, [r4, #0]
 80074ec:	6961      	ldr	r1, [r4, #20]
 80074ee:	1d18      	adds	r0, r3, #4
 80074f0:	6028      	str	r0, [r5, #0]
 80074f2:	0635      	lsls	r5, r6, #24
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	d501      	bpl.n	80074fc <_printf_i+0x1cc>
 80074f8:	6019      	str	r1, [r3, #0]
 80074fa:	e002      	b.n	8007502 <_printf_i+0x1d2>
 80074fc:	0670      	lsls	r0, r6, #25
 80074fe:	d5fb      	bpl.n	80074f8 <_printf_i+0x1c8>
 8007500:	8019      	strh	r1, [r3, #0]
 8007502:	2300      	movs	r3, #0
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	4615      	mov	r5, r2
 8007508:	e7ba      	b.n	8007480 <_printf_i+0x150>
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	1d1a      	adds	r2, r3, #4
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	681d      	ldr	r5, [r3, #0]
 8007512:	6862      	ldr	r2, [r4, #4]
 8007514:	2100      	movs	r1, #0
 8007516:	4628      	mov	r0, r5
 8007518:	f7f8 fe7a 	bl	8000210 <memchr>
 800751c:	b108      	cbz	r0, 8007522 <_printf_i+0x1f2>
 800751e:	1b40      	subs	r0, r0, r5
 8007520:	6060      	str	r0, [r4, #4]
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	2300      	movs	r3, #0
 8007528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752c:	e7a8      	b.n	8007480 <_printf_i+0x150>
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	462a      	mov	r2, r5
 8007532:	4649      	mov	r1, r9
 8007534:	4640      	mov	r0, r8
 8007536:	47d0      	blx	sl
 8007538:	3001      	adds	r0, #1
 800753a:	d0ab      	beq.n	8007494 <_printf_i+0x164>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	079b      	lsls	r3, r3, #30
 8007540:	d413      	bmi.n	800756a <_printf_i+0x23a>
 8007542:	68e0      	ldr	r0, [r4, #12]
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	4298      	cmp	r0, r3
 8007548:	bfb8      	it	lt
 800754a:	4618      	movlt	r0, r3
 800754c:	e7a4      	b.n	8007498 <_printf_i+0x168>
 800754e:	2301      	movs	r3, #1
 8007550:	4632      	mov	r2, r6
 8007552:	4649      	mov	r1, r9
 8007554:	4640      	mov	r0, r8
 8007556:	47d0      	blx	sl
 8007558:	3001      	adds	r0, #1
 800755a:	d09b      	beq.n	8007494 <_printf_i+0x164>
 800755c:	3501      	adds	r5, #1
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	9903      	ldr	r1, [sp, #12]
 8007562:	1a5b      	subs	r3, r3, r1
 8007564:	42ab      	cmp	r3, r5
 8007566:	dcf2      	bgt.n	800754e <_printf_i+0x21e>
 8007568:	e7eb      	b.n	8007542 <_printf_i+0x212>
 800756a:	2500      	movs	r5, #0
 800756c:	f104 0619 	add.w	r6, r4, #25
 8007570:	e7f5      	b.n	800755e <_printf_i+0x22e>
 8007572:	bf00      	nop
 8007574:	08009776 	.word	0x08009776
 8007578:	08009787 	.word	0x08009787

0800757c <quorem>:
 800757c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	6903      	ldr	r3, [r0, #16]
 8007582:	690c      	ldr	r4, [r1, #16]
 8007584:	42a3      	cmp	r3, r4
 8007586:	4607      	mov	r7, r0
 8007588:	f2c0 8081 	blt.w	800768e <quorem+0x112>
 800758c:	3c01      	subs	r4, #1
 800758e:	f101 0814 	add.w	r8, r1, #20
 8007592:	f100 0514 	add.w	r5, r0, #20
 8007596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a4:	3301      	adds	r3, #1
 80075a6:	429a      	cmp	r2, r3
 80075a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80075b4:	d331      	bcc.n	800761a <quorem+0x9e>
 80075b6:	f04f 0e00 	mov.w	lr, #0
 80075ba:	4640      	mov	r0, r8
 80075bc:	46ac      	mov	ip, r5
 80075be:	46f2      	mov	sl, lr
 80075c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80075c4:	b293      	uxth	r3, r2
 80075c6:	fb06 e303 	mla	r3, r6, r3, lr
 80075ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ebaa 0303 	sub.w	r3, sl, r3
 80075d4:	f8dc a000 	ldr.w	sl, [ip]
 80075d8:	0c12      	lsrs	r2, r2, #16
 80075da:	fa13 f38a 	uxtah	r3, r3, sl
 80075de:	fb06 e202 	mla	r2, r6, r2, lr
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075ea:	b292      	uxth	r2, r2
 80075ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80075f8:	4581      	cmp	r9, r0
 80075fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fe:	f84c 3b04 	str.w	r3, [ip], #4
 8007602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007606:	d2db      	bcs.n	80075c0 <quorem+0x44>
 8007608:	f855 300b 	ldr.w	r3, [r5, fp]
 800760c:	b92b      	cbnz	r3, 800761a <quorem+0x9e>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	3b04      	subs	r3, #4
 8007612:	429d      	cmp	r5, r3
 8007614:	461a      	mov	r2, r3
 8007616:	d32e      	bcc.n	8007676 <quorem+0xfa>
 8007618:	613c      	str	r4, [r7, #16]
 800761a:	4638      	mov	r0, r7
 800761c:	f001 f8c6 	bl	80087ac <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	db24      	blt.n	800766e <quorem+0xf2>
 8007624:	3601      	adds	r6, #1
 8007626:	4628      	mov	r0, r5
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007630:	f8d0 e000 	ldr.w	lr, [r0]
 8007634:	b293      	uxth	r3, r2
 8007636:	ebac 0303 	sub.w	r3, ip, r3
 800763a:	0c12      	lsrs	r2, r2, #16
 800763c:	fa13 f38e 	uxtah	r3, r3, lr
 8007640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007648:	b29b      	uxth	r3, r3
 800764a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800764e:	45c1      	cmp	r9, r8
 8007650:	f840 3b04 	str.w	r3, [r0], #4
 8007654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007658:	d2e8      	bcs.n	800762c <quorem+0xb0>
 800765a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800765e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007662:	b922      	cbnz	r2, 800766e <quorem+0xf2>
 8007664:	3b04      	subs	r3, #4
 8007666:	429d      	cmp	r5, r3
 8007668:	461a      	mov	r2, r3
 800766a:	d30a      	bcc.n	8007682 <quorem+0x106>
 800766c:	613c      	str	r4, [r7, #16]
 800766e:	4630      	mov	r0, r6
 8007670:	b003      	add	sp, #12
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	3b04      	subs	r3, #4
 800767a:	2a00      	cmp	r2, #0
 800767c:	d1cc      	bne.n	8007618 <quorem+0x9c>
 800767e:	3c01      	subs	r4, #1
 8007680:	e7c7      	b.n	8007612 <quorem+0x96>
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	3b04      	subs	r3, #4
 8007686:	2a00      	cmp	r2, #0
 8007688:	d1f0      	bne.n	800766c <quorem+0xf0>
 800768a:	3c01      	subs	r4, #1
 800768c:	e7eb      	b.n	8007666 <quorem+0xea>
 800768e:	2000      	movs	r0, #0
 8007690:	e7ee      	b.n	8007670 <quorem+0xf4>
 8007692:	0000      	movs	r0, r0
 8007694:	0000      	movs	r0, r0
	...

08007698 <_dtoa_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	ed2d 8b04 	vpush	{d8-d9}
 80076a0:	ec57 6b10 	vmov	r6, r7, d0
 80076a4:	b093      	sub	sp, #76	; 0x4c
 80076a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076ac:	9106      	str	r1, [sp, #24]
 80076ae:	ee10 aa10 	vmov	sl, s0
 80076b2:	4604      	mov	r4, r0
 80076b4:	9209      	str	r2, [sp, #36]	; 0x24
 80076b6:	930c      	str	r3, [sp, #48]	; 0x30
 80076b8:	46bb      	mov	fp, r7
 80076ba:	b975      	cbnz	r5, 80076da <_dtoa_r+0x42>
 80076bc:	2010      	movs	r0, #16
 80076be:	f000 fddd 	bl	800827c <malloc>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6260      	str	r0, [r4, #36]	; 0x24
 80076c6:	b920      	cbnz	r0, 80076d2 <_dtoa_r+0x3a>
 80076c8:	4ba7      	ldr	r3, [pc, #668]	; (8007968 <_dtoa_r+0x2d0>)
 80076ca:	21ea      	movs	r1, #234	; 0xea
 80076cc:	48a7      	ldr	r0, [pc, #668]	; (800796c <_dtoa_r+0x2d4>)
 80076ce:	f001 fa75 	bl	8008bbc <__assert_func>
 80076d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076d6:	6005      	str	r5, [r0, #0]
 80076d8:	60c5      	str	r5, [r0, #12]
 80076da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076dc:	6819      	ldr	r1, [r3, #0]
 80076de:	b151      	cbz	r1, 80076f6 <_dtoa_r+0x5e>
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	604a      	str	r2, [r1, #4]
 80076e4:	2301      	movs	r3, #1
 80076e6:	4093      	lsls	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fe1c 	bl	8008328 <_Bfree>
 80076f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	1e3b      	subs	r3, r7, #0
 80076f8:	bfaa      	itet	ge
 80076fa:	2300      	movge	r3, #0
 80076fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007700:	f8c8 3000 	strge.w	r3, [r8]
 8007704:	4b9a      	ldr	r3, [pc, #616]	; (8007970 <_dtoa_r+0x2d8>)
 8007706:	bfbc      	itt	lt
 8007708:	2201      	movlt	r2, #1
 800770a:	f8c8 2000 	strlt.w	r2, [r8]
 800770e:	ea33 030b 	bics.w	r3, r3, fp
 8007712:	d11b      	bne.n	800774c <_dtoa_r+0xb4>
 8007714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007716:	f242 730f 	movw	r3, #9999	; 0x270f
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007720:	4333      	orrs	r3, r6
 8007722:	f000 8592 	beq.w	800824a <_dtoa_r+0xbb2>
 8007726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007728:	b963      	cbnz	r3, 8007744 <_dtoa_r+0xac>
 800772a:	4b92      	ldr	r3, [pc, #584]	; (8007974 <_dtoa_r+0x2dc>)
 800772c:	e022      	b.n	8007774 <_dtoa_r+0xdc>
 800772e:	4b92      	ldr	r3, [pc, #584]	; (8007978 <_dtoa_r+0x2e0>)
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	3308      	adds	r3, #8
 8007734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	9801      	ldr	r0, [sp, #4]
 800773a:	b013      	add	sp, #76	; 0x4c
 800773c:	ecbd 8b04 	vpop	{d8-d9}
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	4b8b      	ldr	r3, [pc, #556]	; (8007974 <_dtoa_r+0x2dc>)
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	3303      	adds	r3, #3
 800774a:	e7f3      	b.n	8007734 <_dtoa_r+0x9c>
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	4650      	mov	r0, sl
 8007752:	4659      	mov	r1, fp
 8007754:	f7f9 f9d0 	bl	8000af8 <__aeabi_dcmpeq>
 8007758:	ec4b ab19 	vmov	d9, sl, fp
 800775c:	4680      	mov	r8, r0
 800775e:	b158      	cbz	r0, 8007778 <_dtoa_r+0xe0>
 8007760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007762:	2301      	movs	r3, #1
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 856b 	beq.w	8008244 <_dtoa_r+0xbac>
 800776e:	4883      	ldr	r0, [pc, #524]	; (800797c <_dtoa_r+0x2e4>)
 8007770:	6018      	str	r0, [r3, #0]
 8007772:	1e43      	subs	r3, r0, #1
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	e7df      	b.n	8007738 <_dtoa_r+0xa0>
 8007778:	ec4b ab10 	vmov	d0, sl, fp
 800777c:	aa10      	add	r2, sp, #64	; 0x40
 800777e:	a911      	add	r1, sp, #68	; 0x44
 8007780:	4620      	mov	r0, r4
 8007782:	f001 f8b9 	bl	80088f8 <__d2b>
 8007786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800778a:	ee08 0a10 	vmov	s16, r0
 800778e:	2d00      	cmp	r5, #0
 8007790:	f000 8084 	beq.w	800789c <_dtoa_r+0x204>
 8007794:	ee19 3a90 	vmov	r3, s19
 8007798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800779c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077a0:	4656      	mov	r6, sl
 80077a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077ae:	4b74      	ldr	r3, [pc, #464]	; (8007980 <_dtoa_r+0x2e8>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	4630      	mov	r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	f7f8 fd7f 	bl	80002b8 <__aeabi_dsub>
 80077ba:	a365      	add	r3, pc, #404	; (adr r3, 8007950 <_dtoa_r+0x2b8>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 ff32 	bl	8000628 <__aeabi_dmul>
 80077c4:	a364      	add	r3, pc, #400	; (adr r3, 8007958 <_dtoa_r+0x2c0>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f7f8 fd77 	bl	80002bc <__adddf3>
 80077ce:	4606      	mov	r6, r0
 80077d0:	4628      	mov	r0, r5
 80077d2:	460f      	mov	r7, r1
 80077d4:	f7f8 febe 	bl	8000554 <__aeabi_i2d>
 80077d8:	a361      	add	r3, pc, #388	; (adr r3, 8007960 <_dtoa_r+0x2c8>)
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f8 ff23 	bl	8000628 <__aeabi_dmul>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	f7f8 fd67 	bl	80002bc <__adddf3>
 80077ee:	4606      	mov	r6, r0
 80077f0:	460f      	mov	r7, r1
 80077f2:	f7f9 f9c9 	bl	8000b88 <__aeabi_d2iz>
 80077f6:	2200      	movs	r2, #0
 80077f8:	9000      	str	r0, [sp, #0]
 80077fa:	2300      	movs	r3, #0
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f9 f984 	bl	8000b0c <__aeabi_dcmplt>
 8007804:	b150      	cbz	r0, 800781c <_dtoa_r+0x184>
 8007806:	9800      	ldr	r0, [sp, #0]
 8007808:	f7f8 fea4 	bl	8000554 <__aeabi_i2d>
 800780c:	4632      	mov	r2, r6
 800780e:	463b      	mov	r3, r7
 8007810:	f7f9 f972 	bl	8000af8 <__aeabi_dcmpeq>
 8007814:	b910      	cbnz	r0, 800781c <_dtoa_r+0x184>
 8007816:	9b00      	ldr	r3, [sp, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	9b00      	ldr	r3, [sp, #0]
 800781e:	2b16      	cmp	r3, #22
 8007820:	d85a      	bhi.n	80078d8 <_dtoa_r+0x240>
 8007822:	9a00      	ldr	r2, [sp, #0]
 8007824:	4b57      	ldr	r3, [pc, #348]	; (8007984 <_dtoa_r+0x2ec>)
 8007826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	ec51 0b19 	vmov	r0, r1, d9
 8007832:	f7f9 f96b 	bl	8000b0c <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d050      	beq.n	80078dc <_dtoa_r+0x244>
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	3b01      	subs	r3, #1
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	2300      	movs	r3, #0
 8007842:	930b      	str	r3, [sp, #44]	; 0x2c
 8007844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007846:	1b5d      	subs	r5, r3, r5
 8007848:	1e6b      	subs	r3, r5, #1
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	bf45      	ittet	mi
 800784e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007852:	9304      	strmi	r3, [sp, #16]
 8007854:	2300      	movpl	r3, #0
 8007856:	2300      	movmi	r3, #0
 8007858:	bf4c      	ite	mi
 800785a:	9305      	strmi	r3, [sp, #20]
 800785c:	9304      	strpl	r3, [sp, #16]
 800785e:	9b00      	ldr	r3, [sp, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	db3d      	blt.n	80078e0 <_dtoa_r+0x248>
 8007864:	9b05      	ldr	r3, [sp, #20]
 8007866:	9a00      	ldr	r2, [sp, #0]
 8007868:	920a      	str	r2, [sp, #40]	; 0x28
 800786a:	4413      	add	r3, r2
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	2300      	movs	r3, #0
 8007870:	9307      	str	r3, [sp, #28]
 8007872:	9b06      	ldr	r3, [sp, #24]
 8007874:	2b09      	cmp	r3, #9
 8007876:	f200 8089 	bhi.w	800798c <_dtoa_r+0x2f4>
 800787a:	2b05      	cmp	r3, #5
 800787c:	bfc4      	itt	gt
 800787e:	3b04      	subgt	r3, #4
 8007880:	9306      	strgt	r3, [sp, #24]
 8007882:	9b06      	ldr	r3, [sp, #24]
 8007884:	f1a3 0302 	sub.w	r3, r3, #2
 8007888:	bfcc      	ite	gt
 800788a:	2500      	movgt	r5, #0
 800788c:	2501      	movle	r5, #1
 800788e:	2b03      	cmp	r3, #3
 8007890:	f200 8087 	bhi.w	80079a2 <_dtoa_r+0x30a>
 8007894:	e8df f003 	tbb	[pc, r3]
 8007898:	59383a2d 	.word	0x59383a2d
 800789c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078a0:	441d      	add	r5, r3
 80078a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	bfc1      	itttt	gt
 80078aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078ba:	bfda      	itte	le
 80078bc:	f1c3 0320 	rsble	r3, r3, #32
 80078c0:	fa06 f003 	lslle.w	r0, r6, r3
 80078c4:	4318      	orrgt	r0, r3
 80078c6:	f7f8 fe35 	bl	8000534 <__aeabi_ui2d>
 80078ca:	2301      	movs	r3, #1
 80078cc:	4606      	mov	r6, r0
 80078ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078d2:	3d01      	subs	r5, #1
 80078d4:	930e      	str	r3, [sp, #56]	; 0x38
 80078d6:	e76a      	b.n	80077ae <_dtoa_r+0x116>
 80078d8:	2301      	movs	r3, #1
 80078da:	e7b2      	b.n	8007842 <_dtoa_r+0x1aa>
 80078dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80078de:	e7b1      	b.n	8007844 <_dtoa_r+0x1ac>
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	9a00      	ldr	r2, [sp, #0]
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	4253      	negs	r3, r2
 80078ea:	9307      	str	r3, [sp, #28]
 80078ec:	2300      	movs	r3, #0
 80078ee:	930a      	str	r3, [sp, #40]	; 0x28
 80078f0:	e7bf      	b.n	8007872 <_dtoa_r+0x1da>
 80078f2:	2300      	movs	r3, #0
 80078f4:	9308      	str	r3, [sp, #32]
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dc55      	bgt.n	80079a8 <_dtoa_r+0x310>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007902:	461a      	mov	r2, r3
 8007904:	9209      	str	r2, [sp, #36]	; 0x24
 8007906:	e00c      	b.n	8007922 <_dtoa_r+0x28a>
 8007908:	2301      	movs	r3, #1
 800790a:	e7f3      	b.n	80078f4 <_dtoa_r+0x25c>
 800790c:	2300      	movs	r3, #0
 800790e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007910:	9308      	str	r3, [sp, #32]
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	4413      	add	r3, r2
 8007916:	9302      	str	r3, [sp, #8]
 8007918:	3301      	adds	r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	bfb8      	it	lt
 8007920:	2301      	movlt	r3, #1
 8007922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007924:	2200      	movs	r2, #0
 8007926:	6042      	str	r2, [r0, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	f102 0614 	add.w	r6, r2, #20
 800792e:	429e      	cmp	r6, r3
 8007930:	6841      	ldr	r1, [r0, #4]
 8007932:	d93d      	bls.n	80079b0 <_dtoa_r+0x318>
 8007934:	4620      	mov	r0, r4
 8007936:	f000 fcb7 	bl	80082a8 <_Balloc>
 800793a:	9001      	str	r0, [sp, #4]
 800793c:	2800      	cmp	r0, #0
 800793e:	d13b      	bne.n	80079b8 <_dtoa_r+0x320>
 8007940:	4b11      	ldr	r3, [pc, #68]	; (8007988 <_dtoa_r+0x2f0>)
 8007942:	4602      	mov	r2, r0
 8007944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007948:	e6c0      	b.n	80076cc <_dtoa_r+0x34>
 800794a:	2301      	movs	r3, #1
 800794c:	e7df      	b.n	800790e <_dtoa_r+0x276>
 800794e:	bf00      	nop
 8007950:	636f4361 	.word	0x636f4361
 8007954:	3fd287a7 	.word	0x3fd287a7
 8007958:	8b60c8b3 	.word	0x8b60c8b3
 800795c:	3fc68a28 	.word	0x3fc68a28
 8007960:	509f79fb 	.word	0x509f79fb
 8007964:	3fd34413 	.word	0x3fd34413
 8007968:	080097a5 	.word	0x080097a5
 800796c:	080097bc 	.word	0x080097bc
 8007970:	7ff00000 	.word	0x7ff00000
 8007974:	080097a1 	.word	0x080097a1
 8007978:	08009798 	.word	0x08009798
 800797c:	08009775 	.word	0x08009775
 8007980:	3ff80000 	.word	0x3ff80000
 8007984:	080098b0 	.word	0x080098b0
 8007988:	08009817 	.word	0x08009817
 800798c:	2501      	movs	r5, #1
 800798e:	2300      	movs	r3, #0
 8007990:	9306      	str	r3, [sp, #24]
 8007992:	9508      	str	r5, [sp, #32]
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
 8007998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	2312      	movs	r3, #18
 80079a0:	e7b0      	b.n	8007904 <_dtoa_r+0x26c>
 80079a2:	2301      	movs	r3, #1
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	e7f5      	b.n	8007994 <_dtoa_r+0x2fc>
 80079a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079ae:	e7b8      	b.n	8007922 <_dtoa_r+0x28a>
 80079b0:	3101      	adds	r1, #1
 80079b2:	6041      	str	r1, [r0, #4]
 80079b4:	0052      	lsls	r2, r2, #1
 80079b6:	e7b8      	b.n	800792a <_dtoa_r+0x292>
 80079b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ba:	9a01      	ldr	r2, [sp, #4]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	2b0e      	cmp	r3, #14
 80079c2:	f200 809d 	bhi.w	8007b00 <_dtoa_r+0x468>
 80079c6:	2d00      	cmp	r5, #0
 80079c8:	f000 809a 	beq.w	8007b00 <_dtoa_r+0x468>
 80079cc:	9b00      	ldr	r3, [sp, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd32      	ble.n	8007a38 <_dtoa_r+0x3a0>
 80079d2:	4ab7      	ldr	r2, [pc, #732]	; (8007cb0 <_dtoa_r+0x618>)
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079e0:	9b00      	ldr	r3, [sp, #0]
 80079e2:	05d8      	lsls	r0, r3, #23
 80079e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80079e8:	d516      	bpl.n	8007a18 <_dtoa_r+0x380>
 80079ea:	4bb2      	ldr	r3, [pc, #712]	; (8007cb4 <_dtoa_r+0x61c>)
 80079ec:	ec51 0b19 	vmov	r0, r1, d9
 80079f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079f4:	f7f8 ff42 	bl	800087c <__aeabi_ddiv>
 80079f8:	f007 070f 	and.w	r7, r7, #15
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	2503      	movs	r5, #3
 8007a02:	4eac      	ldr	r6, [pc, #688]	; (8007cb4 <_dtoa_r+0x61c>)
 8007a04:	b957      	cbnz	r7, 8007a1c <_dtoa_r+0x384>
 8007a06:	4642      	mov	r2, r8
 8007a08:	464b      	mov	r3, r9
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	f7f8 ff35 	bl	800087c <__aeabi_ddiv>
 8007a12:	4682      	mov	sl, r0
 8007a14:	468b      	mov	fp, r1
 8007a16:	e028      	b.n	8007a6a <_dtoa_r+0x3d2>
 8007a18:	2502      	movs	r5, #2
 8007a1a:	e7f2      	b.n	8007a02 <_dtoa_r+0x36a>
 8007a1c:	07f9      	lsls	r1, r7, #31
 8007a1e:	d508      	bpl.n	8007a32 <_dtoa_r+0x39a>
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a28:	f7f8 fdfe 	bl	8000628 <__aeabi_dmul>
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	4680      	mov	r8, r0
 8007a30:	4689      	mov	r9, r1
 8007a32:	107f      	asrs	r7, r7, #1
 8007a34:	3608      	adds	r6, #8
 8007a36:	e7e5      	b.n	8007a04 <_dtoa_r+0x36c>
 8007a38:	f000 809b 	beq.w	8007b72 <_dtoa_r+0x4da>
 8007a3c:	9b00      	ldr	r3, [sp, #0]
 8007a3e:	4f9d      	ldr	r7, [pc, #628]	; (8007cb4 <_dtoa_r+0x61c>)
 8007a40:	425e      	negs	r6, r3
 8007a42:	4b9b      	ldr	r3, [pc, #620]	; (8007cb0 <_dtoa_r+0x618>)
 8007a44:	f006 020f 	and.w	r2, r6, #15
 8007a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	ec51 0b19 	vmov	r0, r1, d9
 8007a54:	f7f8 fde8 	bl	8000628 <__aeabi_dmul>
 8007a58:	1136      	asrs	r6, r6, #4
 8007a5a:	4682      	mov	sl, r0
 8007a5c:	468b      	mov	fp, r1
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2502      	movs	r5, #2
 8007a62:	2e00      	cmp	r6, #0
 8007a64:	d17a      	bne.n	8007b5c <_dtoa_r+0x4c4>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1d3      	bne.n	8007a12 <_dtoa_r+0x37a>
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8082 	beq.w	8007b76 <_dtoa_r+0x4de>
 8007a72:	4b91      	ldr	r3, [pc, #580]	; (8007cb8 <_dtoa_r+0x620>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	4650      	mov	r0, sl
 8007a78:	4659      	mov	r1, fp
 8007a7a:	f7f9 f847 	bl	8000b0c <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d079      	beq.n	8007b76 <_dtoa_r+0x4de>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d076      	beq.n	8007b76 <_dtoa_r+0x4de>
 8007a88:	9b02      	ldr	r3, [sp, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd36      	ble.n	8007afc <_dtoa_r+0x464>
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	4650      	mov	r0, sl
 8007a92:	4659      	mov	r1, fp
 8007a94:	1e5f      	subs	r7, r3, #1
 8007a96:	2200      	movs	r2, #0
 8007a98:	4b88      	ldr	r3, [pc, #544]	; (8007cbc <_dtoa_r+0x624>)
 8007a9a:	f7f8 fdc5 	bl	8000628 <__aeabi_dmul>
 8007a9e:	9e02      	ldr	r6, [sp, #8]
 8007aa0:	4682      	mov	sl, r0
 8007aa2:	468b      	mov	fp, r1
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f7f8 fd54 	bl	8000554 <__aeabi_i2d>
 8007aac:	4652      	mov	r2, sl
 8007aae:	465b      	mov	r3, fp
 8007ab0:	f7f8 fdba 	bl	8000628 <__aeabi_dmul>
 8007ab4:	4b82      	ldr	r3, [pc, #520]	; (8007cc0 <_dtoa_r+0x628>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f7f8 fc00 	bl	80002bc <__adddf3>
 8007abc:	46d0      	mov	r8, sl
 8007abe:	46d9      	mov	r9, fp
 8007ac0:	4682      	mov	sl, r0
 8007ac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	d158      	bne.n	8007b7c <_dtoa_r+0x4e4>
 8007aca:	4b7e      	ldr	r3, [pc, #504]	; (8007cc4 <_dtoa_r+0x62c>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f8 fbf1 	bl	80002b8 <__aeabi_dsub>
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	465b      	mov	r3, fp
 8007ada:	4680      	mov	r8, r0
 8007adc:	4689      	mov	r9, r1
 8007ade:	f7f9 f833 	bl	8000b48 <__aeabi_dcmpgt>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	f040 8295 	bne.w	8008012 <_dtoa_r+0x97a>
 8007ae8:	4652      	mov	r2, sl
 8007aea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f9 f80b 	bl	8000b0c <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f040 8289 	bne.w	800800e <_dtoa_r+0x976>
 8007afc:	ec5b ab19 	vmov	sl, fp, d9
 8007b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f2c0 8148 	blt.w	8007d98 <_dtoa_r+0x700>
 8007b08:	9a00      	ldr	r2, [sp, #0]
 8007b0a:	2a0e      	cmp	r2, #14
 8007b0c:	f300 8144 	bgt.w	8007d98 <_dtoa_r+0x700>
 8007b10:	4b67      	ldr	r3, [pc, #412]	; (8007cb0 <_dtoa_r+0x618>)
 8007b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f280 80d5 	bge.w	8007ccc <_dtoa_r+0x634>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f300 80d1 	bgt.w	8007ccc <_dtoa_r+0x634>
 8007b2a:	f040 826f 	bne.w	800800c <_dtoa_r+0x974>
 8007b2e:	4b65      	ldr	r3, [pc, #404]	; (8007cc4 <_dtoa_r+0x62c>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	4640      	mov	r0, r8
 8007b34:	4649      	mov	r1, r9
 8007b36:	f7f8 fd77 	bl	8000628 <__aeabi_dmul>
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	f7f8 fff9 	bl	8000b34 <__aeabi_dcmpge>
 8007b42:	9e03      	ldr	r6, [sp, #12]
 8007b44:	4637      	mov	r7, r6
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f040 8245 	bne.w	8007fd6 <_dtoa_r+0x93e>
 8007b4c:	9d01      	ldr	r5, [sp, #4]
 8007b4e:	2331      	movs	r3, #49	; 0x31
 8007b50:	f805 3b01 	strb.w	r3, [r5], #1
 8007b54:	9b00      	ldr	r3, [sp, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	e240      	b.n	8007fde <_dtoa_r+0x946>
 8007b5c:	07f2      	lsls	r2, r6, #31
 8007b5e:	d505      	bpl.n	8007b6c <_dtoa_r+0x4d4>
 8007b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b64:	f7f8 fd60 	bl	8000628 <__aeabi_dmul>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	1076      	asrs	r6, r6, #1
 8007b6e:	3708      	adds	r7, #8
 8007b70:	e777      	b.n	8007a62 <_dtoa_r+0x3ca>
 8007b72:	2502      	movs	r5, #2
 8007b74:	e779      	b.n	8007a6a <_dtoa_r+0x3d2>
 8007b76:	9f00      	ldr	r7, [sp, #0]
 8007b78:	9e03      	ldr	r6, [sp, #12]
 8007b7a:	e794      	b.n	8007aa6 <_dtoa_r+0x40e>
 8007b7c:	9901      	ldr	r1, [sp, #4]
 8007b7e:	4b4c      	ldr	r3, [pc, #304]	; (8007cb0 <_dtoa_r+0x618>)
 8007b80:	4431      	add	r1, r6
 8007b82:	910d      	str	r1, [sp, #52]	; 0x34
 8007b84:	9908      	ldr	r1, [sp, #32]
 8007b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	d043      	beq.n	8007c1a <_dtoa_r+0x582>
 8007b92:	494d      	ldr	r1, [pc, #308]	; (8007cc8 <_dtoa_r+0x630>)
 8007b94:	2000      	movs	r0, #0
 8007b96:	f7f8 fe71 	bl	800087c <__aeabi_ddiv>
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	f7f8 fb8b 	bl	80002b8 <__aeabi_dsub>
 8007ba2:	9d01      	ldr	r5, [sp, #4]
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	468b      	mov	fp, r1
 8007ba8:	4649      	mov	r1, r9
 8007baa:	4640      	mov	r0, r8
 8007bac:	f7f8 ffec 	bl	8000b88 <__aeabi_d2iz>
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	f7f8 fccf 	bl	8000554 <__aeabi_i2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb7b 	bl	80002b8 <__aeabi_dsub>
 8007bc2:	3630      	adds	r6, #48	; 0x30
 8007bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8007bc8:	4652      	mov	r2, sl
 8007bca:	465b      	mov	r3, fp
 8007bcc:	4680      	mov	r8, r0
 8007bce:	4689      	mov	r9, r1
 8007bd0:	f7f8 ff9c 	bl	8000b0c <__aeabi_dcmplt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d163      	bne.n	8007ca0 <_dtoa_r+0x608>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	464b      	mov	r3, r9
 8007bdc:	4936      	ldr	r1, [pc, #216]	; (8007cb8 <_dtoa_r+0x620>)
 8007bde:	2000      	movs	r0, #0
 8007be0:	f7f8 fb6a 	bl	80002b8 <__aeabi_dsub>
 8007be4:	4652      	mov	r2, sl
 8007be6:	465b      	mov	r3, fp
 8007be8:	f7f8 ff90 	bl	8000b0c <__aeabi_dcmplt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f040 80b5 	bne.w	8007d5c <_dtoa_r+0x6c4>
 8007bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf4:	429d      	cmp	r5, r3
 8007bf6:	d081      	beq.n	8007afc <_dtoa_r+0x464>
 8007bf8:	4b30      	ldr	r3, [pc, #192]	; (8007cbc <_dtoa_r+0x624>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	4659      	mov	r1, fp
 8007c00:	f7f8 fd12 	bl	8000628 <__aeabi_dmul>
 8007c04:	4b2d      	ldr	r3, [pc, #180]	; (8007cbc <_dtoa_r+0x624>)
 8007c06:	4682      	mov	sl, r0
 8007c08:	468b      	mov	fp, r1
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7f8 fd0a 	bl	8000628 <__aeabi_dmul>
 8007c14:	4680      	mov	r8, r0
 8007c16:	4689      	mov	r9, r1
 8007c18:	e7c6      	b.n	8007ba8 <_dtoa_r+0x510>
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f7f8 fd03 	bl	8000628 <__aeabi_dmul>
 8007c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c24:	9d01      	ldr	r5, [sp, #4]
 8007c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c28:	4682      	mov	sl, r0
 8007c2a:	468b      	mov	fp, r1
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7f8 ffaa 	bl	8000b88 <__aeabi_d2iz>
 8007c34:	4606      	mov	r6, r0
 8007c36:	f7f8 fc8d 	bl	8000554 <__aeabi_i2d>
 8007c3a:	3630      	adds	r6, #48	; 0x30
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4640      	mov	r0, r8
 8007c42:	4649      	mov	r1, r9
 8007c44:	f7f8 fb38 	bl	80002b8 <__aeabi_dsub>
 8007c48:	f805 6b01 	strb.w	r6, [r5], #1
 8007c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	4680      	mov	r8, r0
 8007c52:	4689      	mov	r9, r1
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	d124      	bne.n	8007ca4 <_dtoa_r+0x60c>
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <_dtoa_r+0x630>)
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f8 fb2c 	bl	80002bc <__adddf3>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4640      	mov	r0, r8
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 ff6c 	bl	8000b48 <__aeabi_dcmpgt>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d173      	bne.n	8007d5c <_dtoa_r+0x6c4>
 8007c74:	4652      	mov	r2, sl
 8007c76:	465b      	mov	r3, fp
 8007c78:	4913      	ldr	r1, [pc, #76]	; (8007cc8 <_dtoa_r+0x630>)
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f8 fb1c 	bl	80002b8 <__aeabi_dsub>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	f7f8 ff40 	bl	8000b0c <__aeabi_dcmplt>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	f43f af35 	beq.w	8007afc <_dtoa_r+0x464>
 8007c92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c94:	1e6b      	subs	r3, r5, #1
 8007c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c9c:	2b30      	cmp	r3, #48	; 0x30
 8007c9e:	d0f8      	beq.n	8007c92 <_dtoa_r+0x5fa>
 8007ca0:	9700      	str	r7, [sp, #0]
 8007ca2:	e049      	b.n	8007d38 <_dtoa_r+0x6a0>
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <_dtoa_r+0x624>)
 8007ca6:	f7f8 fcbf 	bl	8000628 <__aeabi_dmul>
 8007caa:	4680      	mov	r8, r0
 8007cac:	4689      	mov	r9, r1
 8007cae:	e7bd      	b.n	8007c2c <_dtoa_r+0x594>
 8007cb0:	080098b0 	.word	0x080098b0
 8007cb4:	08009888 	.word	0x08009888
 8007cb8:	3ff00000 	.word	0x3ff00000
 8007cbc:	40240000 	.word	0x40240000
 8007cc0:	401c0000 	.word	0x401c0000
 8007cc4:	40140000 	.word	0x40140000
 8007cc8:	3fe00000 	.word	0x3fe00000
 8007ccc:	9d01      	ldr	r5, [sp, #4]
 8007cce:	4656      	mov	r6, sl
 8007cd0:	465f      	mov	r7, fp
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f7f8 fdcf 	bl	800087c <__aeabi_ddiv>
 8007cde:	f7f8 ff53 	bl	8000b88 <__aeabi_d2iz>
 8007ce2:	4682      	mov	sl, r0
 8007ce4:	f7f8 fc36 	bl	8000554 <__aeabi_i2d>
 8007ce8:	4642      	mov	r2, r8
 8007cea:	464b      	mov	r3, r9
 8007cec:	f7f8 fc9c 	bl	8000628 <__aeabi_dmul>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007cfc:	f7f8 fadc 	bl	80002b8 <__aeabi_dsub>
 8007d00:	f805 6b01 	strb.w	r6, [r5], #1
 8007d04:	9e01      	ldr	r6, [sp, #4]
 8007d06:	9f03      	ldr	r7, [sp, #12]
 8007d08:	1bae      	subs	r6, r5, r6
 8007d0a:	42b7      	cmp	r7, r6
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	d135      	bne.n	8007d7e <_dtoa_r+0x6e6>
 8007d12:	f7f8 fad3 	bl	80002bc <__adddf3>
 8007d16:	4642      	mov	r2, r8
 8007d18:	464b      	mov	r3, r9
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	f7f8 ff13 	bl	8000b48 <__aeabi_dcmpgt>
 8007d22:	b9d0      	cbnz	r0, 8007d5a <_dtoa_r+0x6c2>
 8007d24:	4642      	mov	r2, r8
 8007d26:	464b      	mov	r3, r9
 8007d28:	4630      	mov	r0, r6
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 fee4 	bl	8000af8 <__aeabi_dcmpeq>
 8007d30:	b110      	cbz	r0, 8007d38 <_dtoa_r+0x6a0>
 8007d32:	f01a 0f01 	tst.w	sl, #1
 8007d36:	d110      	bne.n	8007d5a <_dtoa_r+0x6c2>
 8007d38:	4620      	mov	r0, r4
 8007d3a:	ee18 1a10 	vmov	r1, s16
 8007d3e:	f000 faf3 	bl	8008328 <_Bfree>
 8007d42:	2300      	movs	r3, #0
 8007d44:	9800      	ldr	r0, [sp, #0]
 8007d46:	702b      	strb	r3, [r5, #0]
 8007d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	6018      	str	r0, [r3, #0]
 8007d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f43f acf1 	beq.w	8007738 <_dtoa_r+0xa0>
 8007d56:	601d      	str	r5, [r3, #0]
 8007d58:	e4ee      	b.n	8007738 <_dtoa_r+0xa0>
 8007d5a:	9f00      	ldr	r7, [sp, #0]
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	461d      	mov	r5, r3
 8007d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d64:	2a39      	cmp	r2, #57	; 0x39
 8007d66:	d106      	bne.n	8007d76 <_dtoa_r+0x6de>
 8007d68:	9a01      	ldr	r2, [sp, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d1f7      	bne.n	8007d5e <_dtoa_r+0x6c6>
 8007d6e:	9901      	ldr	r1, [sp, #4]
 8007d70:	2230      	movs	r2, #48	; 0x30
 8007d72:	3701      	adds	r7, #1
 8007d74:	700a      	strb	r2, [r1, #0]
 8007d76:	781a      	ldrb	r2, [r3, #0]
 8007d78:	3201      	adds	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	e790      	b.n	8007ca0 <_dtoa_r+0x608>
 8007d7e:	4ba6      	ldr	r3, [pc, #664]	; (8008018 <_dtoa_r+0x980>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	f7f8 fc51 	bl	8000628 <__aeabi_dmul>
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460f      	mov	r7, r1
 8007d8e:	f7f8 feb3 	bl	8000af8 <__aeabi_dcmpeq>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d09d      	beq.n	8007cd2 <_dtoa_r+0x63a>
 8007d96:	e7cf      	b.n	8007d38 <_dtoa_r+0x6a0>
 8007d98:	9a08      	ldr	r2, [sp, #32]
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	f000 80d7 	beq.w	8007f4e <_dtoa_r+0x8b6>
 8007da0:	9a06      	ldr	r2, [sp, #24]
 8007da2:	2a01      	cmp	r2, #1
 8007da4:	f300 80ba 	bgt.w	8007f1c <_dtoa_r+0x884>
 8007da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	f000 80b2 	beq.w	8007f14 <_dtoa_r+0x87c>
 8007db0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007db4:	9e07      	ldr	r6, [sp, #28]
 8007db6:	9d04      	ldr	r5, [sp, #16]
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	441a      	add	r2, r3
 8007dbc:	9204      	str	r2, [sp, #16]
 8007dbe:	9a05      	ldr	r2, [sp, #20]
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	441a      	add	r2, r3
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	9205      	str	r2, [sp, #20]
 8007dc8:	f000 fb66 	bl	8008498 <__i2b>
 8007dcc:	4607      	mov	r7, r0
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	dd0c      	ble.n	8007dec <_dtoa_r+0x754>
 8007dd2:	9b05      	ldr	r3, [sp, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd09      	ble.n	8007dec <_dtoa_r+0x754>
 8007dd8:	42ab      	cmp	r3, r5
 8007dda:	9a04      	ldr	r2, [sp, #16]
 8007ddc:	bfa8      	it	ge
 8007dde:	462b      	movge	r3, r5
 8007de0:	1ad2      	subs	r2, r2, r3
 8007de2:	9204      	str	r2, [sp, #16]
 8007de4:	9a05      	ldr	r2, [sp, #20]
 8007de6:	1aed      	subs	r5, r5, r3
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	9305      	str	r3, [sp, #20]
 8007dec:	9b07      	ldr	r3, [sp, #28]
 8007dee:	b31b      	cbz	r3, 8007e38 <_dtoa_r+0x7a0>
 8007df0:	9b08      	ldr	r3, [sp, #32]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80af 	beq.w	8007f56 <_dtoa_r+0x8be>
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	dd13      	ble.n	8007e24 <_dtoa_r+0x78c>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4632      	mov	r2, r6
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fc09 	bl	8008618 <__pow5mult>
 8007e06:	ee18 2a10 	vmov	r2, s16
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fb58 	bl	80084c4 <__multiply>
 8007e14:	ee18 1a10 	vmov	r1, s16
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 fa84 	bl	8008328 <_Bfree>
 8007e20:	ee08 8a10 	vmov	s16, r8
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	1b9a      	subs	r2, r3, r6
 8007e28:	d006      	beq.n	8007e38 <_dtoa_r+0x7a0>
 8007e2a:	ee18 1a10 	vmov	r1, s16
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fbf2 	bl	8008618 <__pow5mult>
 8007e34:	ee08 0a10 	vmov	s16, r0
 8007e38:	2101      	movs	r1, #1
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fb2c 	bl	8008498 <__i2b>
 8007e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	4606      	mov	r6, r0
 8007e46:	f340 8088 	ble.w	8007f5a <_dtoa_r+0x8c2>
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fbe2 	bl	8008618 <__pow5mult>
 8007e54:	9b06      	ldr	r3, [sp, #24]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	4606      	mov	r6, r0
 8007e5a:	f340 8081 	ble.w	8007f60 <_dtoa_r+0x8c8>
 8007e5e:	f04f 0800 	mov.w	r8, #0
 8007e62:	6933      	ldr	r3, [r6, #16]
 8007e64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e68:	6918      	ldr	r0, [r3, #16]
 8007e6a:	f000 fac5 	bl	80083f8 <__hi0bits>
 8007e6e:	f1c0 0020 	rsb	r0, r0, #32
 8007e72:	9b05      	ldr	r3, [sp, #20]
 8007e74:	4418      	add	r0, r3
 8007e76:	f010 001f 	ands.w	r0, r0, #31
 8007e7a:	f000 8092 	beq.w	8007fa2 <_dtoa_r+0x90a>
 8007e7e:	f1c0 0320 	rsb	r3, r0, #32
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	f340 808a 	ble.w	8007f9c <_dtoa_r+0x904>
 8007e88:	f1c0 001c 	rsb	r0, r0, #28
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	4403      	add	r3, r0
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	4403      	add	r3, r0
 8007e96:	4405      	add	r5, r0
 8007e98:	9305      	str	r3, [sp, #20]
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dd07      	ble.n	8007eb0 <_dtoa_r+0x818>
 8007ea0:	ee18 1a10 	vmov	r1, s16
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 fc10 	bl	80086cc <__lshift>
 8007eac:	ee08 0a10 	vmov	s16, r0
 8007eb0:	9b05      	ldr	r3, [sp, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	dd05      	ble.n	8007ec2 <_dtoa_r+0x82a>
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fc06 	bl	80086cc <__lshift>
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d06e      	beq.n	8007fa6 <_dtoa_r+0x90e>
 8007ec8:	ee18 0a10 	vmov	r0, s16
 8007ecc:	4631      	mov	r1, r6
 8007ece:	f000 fc6d 	bl	80087ac <__mcmp>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	da67      	bge.n	8007fa6 <_dtoa_r+0x90e>
 8007ed6:	9b00      	ldr	r3, [sp, #0]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fa41 	bl	800836c <__multadd>
 8007eea:	9b08      	ldr	r3, [sp, #32]
 8007eec:	ee08 0a10 	vmov	s16, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 81b1 	beq.w	8008258 <_dtoa_r+0xbc0>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4639      	mov	r1, r7
 8007efa:	220a      	movs	r2, #10
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 fa35 	bl	800836c <__multadd>
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	4607      	mov	r7, r0
 8007f08:	f300 808e 	bgt.w	8008028 <_dtoa_r+0x990>
 8007f0c:	9b06      	ldr	r3, [sp, #24]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	dc51      	bgt.n	8007fb6 <_dtoa_r+0x91e>
 8007f12:	e089      	b.n	8008028 <_dtoa_r+0x990>
 8007f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f1a:	e74b      	b.n	8007db4 <_dtoa_r+0x71c>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	1e5e      	subs	r6, r3, #1
 8007f20:	9b07      	ldr	r3, [sp, #28]
 8007f22:	42b3      	cmp	r3, r6
 8007f24:	bfbf      	itttt	lt
 8007f26:	9b07      	ldrlt	r3, [sp, #28]
 8007f28:	9607      	strlt	r6, [sp, #28]
 8007f2a:	1af2      	sublt	r2, r6, r3
 8007f2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f2e:	bfb6      	itet	lt
 8007f30:	189b      	addlt	r3, r3, r2
 8007f32:	1b9e      	subge	r6, r3, r6
 8007f34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	bfb8      	it	lt
 8007f3a:	2600      	movlt	r6, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bfb7      	itett	lt
 8007f40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f48:	1a9d      	sublt	r5, r3, r2
 8007f4a:	2300      	movlt	r3, #0
 8007f4c:	e734      	b.n	8007db8 <_dtoa_r+0x720>
 8007f4e:	9e07      	ldr	r6, [sp, #28]
 8007f50:	9d04      	ldr	r5, [sp, #16]
 8007f52:	9f08      	ldr	r7, [sp, #32]
 8007f54:	e73b      	b.n	8007dce <_dtoa_r+0x736>
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	e767      	b.n	8007e2a <_dtoa_r+0x792>
 8007f5a:	9b06      	ldr	r3, [sp, #24]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	dc18      	bgt.n	8007f92 <_dtoa_r+0x8fa>
 8007f60:	f1ba 0f00 	cmp.w	sl, #0
 8007f64:	d115      	bne.n	8007f92 <_dtoa_r+0x8fa>
 8007f66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f6a:	b993      	cbnz	r3, 8007f92 <_dtoa_r+0x8fa>
 8007f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f70:	0d1b      	lsrs	r3, r3, #20
 8007f72:	051b      	lsls	r3, r3, #20
 8007f74:	b183      	cbz	r3, 8007f98 <_dtoa_r+0x900>
 8007f76:	9b04      	ldr	r3, [sp, #16]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	9b05      	ldr	r3, [sp, #20]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	f04f 0801 	mov.w	r8, #1
 8007f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f47f af6a 	bne.w	8007e62 <_dtoa_r+0x7ca>
 8007f8e:	2001      	movs	r0, #1
 8007f90:	e76f      	b.n	8007e72 <_dtoa_r+0x7da>
 8007f92:	f04f 0800 	mov.w	r8, #0
 8007f96:	e7f6      	b.n	8007f86 <_dtoa_r+0x8ee>
 8007f98:	4698      	mov	r8, r3
 8007f9a:	e7f4      	b.n	8007f86 <_dtoa_r+0x8ee>
 8007f9c:	f43f af7d 	beq.w	8007e9a <_dtoa_r+0x802>
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	301c      	adds	r0, #28
 8007fa4:	e772      	b.n	8007e8c <_dtoa_r+0x7f4>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc37      	bgt.n	800801c <_dtoa_r+0x984>
 8007fac:	9b06      	ldr	r3, [sp, #24]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	dd34      	ble.n	800801c <_dtoa_r+0x984>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	9302      	str	r3, [sp, #8]
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	b96b      	cbnz	r3, 8007fd6 <_dtoa_r+0x93e>
 8007fba:	4631      	mov	r1, r6
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f9d4 	bl	800836c <__multadd>
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	ee18 0a10 	vmov	r0, s16
 8007fcc:	f000 fbee 	bl	80087ac <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f73f adbb 	bgt.w	8007b4c <_dtoa_r+0x4b4>
 8007fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd8:	9d01      	ldr	r5, [sp, #4]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 f99f 	bl	8008328 <_Bfree>
 8007fea:	2f00      	cmp	r7, #0
 8007fec:	f43f aea4 	beq.w	8007d38 <_dtoa_r+0x6a0>
 8007ff0:	f1b8 0f00 	cmp.w	r8, #0
 8007ff4:	d005      	beq.n	8008002 <_dtoa_r+0x96a>
 8007ff6:	45b8      	cmp	r8, r7
 8007ff8:	d003      	beq.n	8008002 <_dtoa_r+0x96a>
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 f993 	bl	8008328 <_Bfree>
 8008002:	4639      	mov	r1, r7
 8008004:	4620      	mov	r0, r4
 8008006:	f000 f98f 	bl	8008328 <_Bfree>
 800800a:	e695      	b.n	8007d38 <_dtoa_r+0x6a0>
 800800c:	2600      	movs	r6, #0
 800800e:	4637      	mov	r7, r6
 8008010:	e7e1      	b.n	8007fd6 <_dtoa_r+0x93e>
 8008012:	9700      	str	r7, [sp, #0]
 8008014:	4637      	mov	r7, r6
 8008016:	e599      	b.n	8007b4c <_dtoa_r+0x4b4>
 8008018:	40240000 	.word	0x40240000
 800801c:	9b08      	ldr	r3, [sp, #32]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 80ca 	beq.w	80081b8 <_dtoa_r+0xb20>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	2d00      	cmp	r5, #0
 800802a:	dd05      	ble.n	8008038 <_dtoa_r+0x9a0>
 800802c:	4639      	mov	r1, r7
 800802e:	462a      	mov	r2, r5
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fb4b 	bl	80086cc <__lshift>
 8008036:	4607      	mov	r7, r0
 8008038:	f1b8 0f00 	cmp.w	r8, #0
 800803c:	d05b      	beq.n	80080f6 <_dtoa_r+0xa5e>
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4620      	mov	r0, r4
 8008042:	f000 f931 	bl	80082a8 <_Balloc>
 8008046:	4605      	mov	r5, r0
 8008048:	b928      	cbnz	r0, 8008056 <_dtoa_r+0x9be>
 800804a:	4b87      	ldr	r3, [pc, #540]	; (8008268 <_dtoa_r+0xbd0>)
 800804c:	4602      	mov	r2, r0
 800804e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008052:	f7ff bb3b 	b.w	80076cc <_dtoa_r+0x34>
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	3202      	adds	r2, #2
 800805a:	0092      	lsls	r2, r2, #2
 800805c:	f107 010c 	add.w	r1, r7, #12
 8008060:	300c      	adds	r0, #12
 8008062:	f000 f913 	bl	800828c <memcpy>
 8008066:	2201      	movs	r2, #1
 8008068:	4629      	mov	r1, r5
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fb2e 	bl	80086cc <__lshift>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	f103 0901 	add.w	r9, r3, #1
 8008076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800807a:	4413      	add	r3, r2
 800807c:	9305      	str	r3, [sp, #20]
 800807e:	f00a 0301 	and.w	r3, sl, #1
 8008082:	46b8      	mov	r8, r7
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	4607      	mov	r7, r0
 8008088:	4631      	mov	r1, r6
 800808a:	ee18 0a10 	vmov	r0, s16
 800808e:	f7ff fa75 	bl	800757c <quorem>
 8008092:	4641      	mov	r1, r8
 8008094:	9002      	str	r0, [sp, #8]
 8008096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800809a:	ee18 0a10 	vmov	r0, s16
 800809e:	f000 fb85 	bl	80087ac <__mcmp>
 80080a2:	463a      	mov	r2, r7
 80080a4:	9003      	str	r0, [sp, #12]
 80080a6:	4631      	mov	r1, r6
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 fb9b 	bl	80087e4 <__mdiff>
 80080ae:	68c2      	ldr	r2, [r0, #12]
 80080b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080b4:	4605      	mov	r5, r0
 80080b6:	bb02      	cbnz	r2, 80080fa <_dtoa_r+0xa62>
 80080b8:	4601      	mov	r1, r0
 80080ba:	ee18 0a10 	vmov	r0, s16
 80080be:	f000 fb75 	bl	80087ac <__mcmp>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4629      	mov	r1, r5
 80080c6:	4620      	mov	r0, r4
 80080c8:	9207      	str	r2, [sp, #28]
 80080ca:	f000 f92d 	bl	8008328 <_Bfree>
 80080ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080d2:	ea43 0102 	orr.w	r1, r3, r2
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	430b      	orrs	r3, r1
 80080da:	464d      	mov	r5, r9
 80080dc:	d10f      	bne.n	80080fe <_dtoa_r+0xa66>
 80080de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080e2:	d02a      	beq.n	800813a <_dtoa_r+0xaa2>
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	dd02      	ble.n	80080f0 <_dtoa_r+0xa58>
 80080ea:	9b02      	ldr	r3, [sp, #8]
 80080ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80080f0:	f88b a000 	strb.w	sl, [fp]
 80080f4:	e775      	b.n	8007fe2 <_dtoa_r+0x94a>
 80080f6:	4638      	mov	r0, r7
 80080f8:	e7ba      	b.n	8008070 <_dtoa_r+0x9d8>
 80080fa:	2201      	movs	r2, #1
 80080fc:	e7e2      	b.n	80080c4 <_dtoa_r+0xa2c>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db04      	blt.n	800810e <_dtoa_r+0xa76>
 8008104:	9906      	ldr	r1, [sp, #24]
 8008106:	430b      	orrs	r3, r1
 8008108:	9904      	ldr	r1, [sp, #16]
 800810a:	430b      	orrs	r3, r1
 800810c:	d122      	bne.n	8008154 <_dtoa_r+0xabc>
 800810e:	2a00      	cmp	r2, #0
 8008110:	ddee      	ble.n	80080f0 <_dtoa_r+0xa58>
 8008112:	ee18 1a10 	vmov	r1, s16
 8008116:	2201      	movs	r2, #1
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fad7 	bl	80086cc <__lshift>
 800811e:	4631      	mov	r1, r6
 8008120:	ee08 0a10 	vmov	s16, r0
 8008124:	f000 fb42 	bl	80087ac <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	dc03      	bgt.n	8008134 <_dtoa_r+0xa9c>
 800812c:	d1e0      	bne.n	80080f0 <_dtoa_r+0xa58>
 800812e:	f01a 0f01 	tst.w	sl, #1
 8008132:	d0dd      	beq.n	80080f0 <_dtoa_r+0xa58>
 8008134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008138:	d1d7      	bne.n	80080ea <_dtoa_r+0xa52>
 800813a:	2339      	movs	r3, #57	; 0x39
 800813c:	f88b 3000 	strb.w	r3, [fp]
 8008140:	462b      	mov	r3, r5
 8008142:	461d      	mov	r5, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800814a:	2a39      	cmp	r2, #57	; 0x39
 800814c:	d071      	beq.n	8008232 <_dtoa_r+0xb9a>
 800814e:	3201      	adds	r2, #1
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	e746      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008154:	2a00      	cmp	r2, #0
 8008156:	dd07      	ble.n	8008168 <_dtoa_r+0xad0>
 8008158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800815c:	d0ed      	beq.n	800813a <_dtoa_r+0xaa2>
 800815e:	f10a 0301 	add.w	r3, sl, #1
 8008162:	f88b 3000 	strb.w	r3, [fp]
 8008166:	e73c      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800816e:	4599      	cmp	r9, r3
 8008170:	d047      	beq.n	8008202 <_dtoa_r+0xb6a>
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	2300      	movs	r3, #0
 8008178:	220a      	movs	r2, #10
 800817a:	4620      	mov	r0, r4
 800817c:	f000 f8f6 	bl	800836c <__multadd>
 8008180:	45b8      	cmp	r8, r7
 8008182:	ee08 0a10 	vmov	s16, r0
 8008186:	f04f 0300 	mov.w	r3, #0
 800818a:	f04f 020a 	mov.w	r2, #10
 800818e:	4641      	mov	r1, r8
 8008190:	4620      	mov	r0, r4
 8008192:	d106      	bne.n	80081a2 <_dtoa_r+0xb0a>
 8008194:	f000 f8ea 	bl	800836c <__multadd>
 8008198:	4680      	mov	r8, r0
 800819a:	4607      	mov	r7, r0
 800819c:	f109 0901 	add.w	r9, r9, #1
 80081a0:	e772      	b.n	8008088 <_dtoa_r+0x9f0>
 80081a2:	f000 f8e3 	bl	800836c <__multadd>
 80081a6:	4639      	mov	r1, r7
 80081a8:	4680      	mov	r8, r0
 80081aa:	2300      	movs	r3, #0
 80081ac:	220a      	movs	r2, #10
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f8dc 	bl	800836c <__multadd>
 80081b4:	4607      	mov	r7, r0
 80081b6:	e7f1      	b.n	800819c <_dtoa_r+0xb04>
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	9302      	str	r3, [sp, #8]
 80081bc:	9d01      	ldr	r5, [sp, #4]
 80081be:	ee18 0a10 	vmov	r0, s16
 80081c2:	4631      	mov	r1, r6
 80081c4:	f7ff f9da 	bl	800757c <quorem>
 80081c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081cc:	9b01      	ldr	r3, [sp, #4]
 80081ce:	f805 ab01 	strb.w	sl, [r5], #1
 80081d2:	1aea      	subs	r2, r5, r3
 80081d4:	9b02      	ldr	r3, [sp, #8]
 80081d6:	4293      	cmp	r3, r2
 80081d8:	dd09      	ble.n	80081ee <_dtoa_r+0xb56>
 80081da:	ee18 1a10 	vmov	r1, s16
 80081de:	2300      	movs	r3, #0
 80081e0:	220a      	movs	r2, #10
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 f8c2 	bl	800836c <__multadd>
 80081e8:	ee08 0a10 	vmov	s16, r0
 80081ec:	e7e7      	b.n	80081be <_dtoa_r+0xb26>
 80081ee:	9b02      	ldr	r3, [sp, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bfc8      	it	gt
 80081f4:	461d      	movgt	r5, r3
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	bfd8      	it	le
 80081fa:	2501      	movle	r5, #1
 80081fc:	441d      	add	r5, r3
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	ee18 1a10 	vmov	r1, s16
 8008206:	2201      	movs	r2, #1
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fa5f 	bl	80086cc <__lshift>
 800820e:	4631      	mov	r1, r6
 8008210:	ee08 0a10 	vmov	s16, r0
 8008214:	f000 faca 	bl	80087ac <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	dc91      	bgt.n	8008140 <_dtoa_r+0xaa8>
 800821c:	d102      	bne.n	8008224 <_dtoa_r+0xb8c>
 800821e:	f01a 0f01 	tst.w	sl, #1
 8008222:	d18d      	bne.n	8008140 <_dtoa_r+0xaa8>
 8008224:	462b      	mov	r3, r5
 8008226:	461d      	mov	r5, r3
 8008228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800822c:	2a30      	cmp	r2, #48	; 0x30
 800822e:	d0fa      	beq.n	8008226 <_dtoa_r+0xb8e>
 8008230:	e6d7      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d184      	bne.n	8008142 <_dtoa_r+0xaaa>
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	2331      	movs	r3, #49	; 0x31
 8008240:	7013      	strb	r3, [r2, #0]
 8008242:	e6ce      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008244:	4b09      	ldr	r3, [pc, #36]	; (800826c <_dtoa_r+0xbd4>)
 8008246:	f7ff ba95 	b.w	8007774 <_dtoa_r+0xdc>
 800824a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800824c:	2b00      	cmp	r3, #0
 800824e:	f47f aa6e 	bne.w	800772e <_dtoa_r+0x96>
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <_dtoa_r+0xbd8>)
 8008254:	f7ff ba8e 	b.w	8007774 <_dtoa_r+0xdc>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dcae      	bgt.n	80081bc <_dtoa_r+0xb24>
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	2b02      	cmp	r3, #2
 8008262:	f73f aea8 	bgt.w	8007fb6 <_dtoa_r+0x91e>
 8008266:	e7a9      	b.n	80081bc <_dtoa_r+0xb24>
 8008268:	08009817 	.word	0x08009817
 800826c:	08009774 	.word	0x08009774
 8008270:	08009798 	.word	0x08009798

08008274 <_localeconv_r>:
 8008274:	4800      	ldr	r0, [pc, #0]	; (8008278 <_localeconv_r+0x4>)
 8008276:	4770      	bx	lr
 8008278:	20000160 	.word	0x20000160

0800827c <malloc>:
 800827c:	4b02      	ldr	r3, [pc, #8]	; (8008288 <malloc+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f000 bc17 	b.w	8008ab4 <_malloc_r>
 8008286:	bf00      	nop
 8008288:	2000000c 	.word	0x2000000c

0800828c <memcpy>:
 800828c:	440a      	add	r2, r1
 800828e:	4291      	cmp	r1, r2
 8008290:	f100 33ff 	add.w	r3, r0, #4294967295
 8008294:	d100      	bne.n	8008298 <memcpy+0xc>
 8008296:	4770      	bx	lr
 8008298:	b510      	push	{r4, lr}
 800829a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800829e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082a2:	4291      	cmp	r1, r2
 80082a4:	d1f9      	bne.n	800829a <memcpy+0xe>
 80082a6:	bd10      	pop	{r4, pc}

080082a8 <_Balloc>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082ac:	4604      	mov	r4, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	b976      	cbnz	r6, 80082d0 <_Balloc+0x28>
 80082b2:	2010      	movs	r0, #16
 80082b4:	f7ff ffe2 	bl	800827c <malloc>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6260      	str	r0, [r4, #36]	; 0x24
 80082bc:	b920      	cbnz	r0, 80082c8 <_Balloc+0x20>
 80082be:	4b18      	ldr	r3, [pc, #96]	; (8008320 <_Balloc+0x78>)
 80082c0:	4818      	ldr	r0, [pc, #96]	; (8008324 <_Balloc+0x7c>)
 80082c2:	2166      	movs	r1, #102	; 0x66
 80082c4:	f000 fc7a 	bl	8008bbc <__assert_func>
 80082c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082cc:	6006      	str	r6, [r0, #0]
 80082ce:	60c6      	str	r6, [r0, #12]
 80082d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082d2:	68f3      	ldr	r3, [r6, #12]
 80082d4:	b183      	cbz	r3, 80082f8 <_Balloc+0x50>
 80082d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082de:	b9b8      	cbnz	r0, 8008310 <_Balloc+0x68>
 80082e0:	2101      	movs	r1, #1
 80082e2:	fa01 f605 	lsl.w	r6, r1, r5
 80082e6:	1d72      	adds	r2, r6, #5
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fb60 	bl	80089b0 <_calloc_r>
 80082f0:	b160      	cbz	r0, 800830c <_Balloc+0x64>
 80082f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082f6:	e00e      	b.n	8008316 <_Balloc+0x6e>
 80082f8:	2221      	movs	r2, #33	; 0x21
 80082fa:	2104      	movs	r1, #4
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fb57 	bl	80089b0 <_calloc_r>
 8008302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008304:	60f0      	str	r0, [r6, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e4      	bne.n	80082d6 <_Balloc+0x2e>
 800830c:	2000      	movs	r0, #0
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	6802      	ldr	r2, [r0, #0]
 8008312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008316:	2300      	movs	r3, #0
 8008318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800831c:	e7f7      	b.n	800830e <_Balloc+0x66>
 800831e:	bf00      	nop
 8008320:	080097a5 	.word	0x080097a5
 8008324:	08009828 	.word	0x08009828

08008328 <_Bfree>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800832c:	4605      	mov	r5, r0
 800832e:	460c      	mov	r4, r1
 8008330:	b976      	cbnz	r6, 8008350 <_Bfree+0x28>
 8008332:	2010      	movs	r0, #16
 8008334:	f7ff ffa2 	bl	800827c <malloc>
 8008338:	4602      	mov	r2, r0
 800833a:	6268      	str	r0, [r5, #36]	; 0x24
 800833c:	b920      	cbnz	r0, 8008348 <_Bfree+0x20>
 800833e:	4b09      	ldr	r3, [pc, #36]	; (8008364 <_Bfree+0x3c>)
 8008340:	4809      	ldr	r0, [pc, #36]	; (8008368 <_Bfree+0x40>)
 8008342:	218a      	movs	r1, #138	; 0x8a
 8008344:	f000 fc3a 	bl	8008bbc <__assert_func>
 8008348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800834c:	6006      	str	r6, [r0, #0]
 800834e:	60c6      	str	r6, [r0, #12]
 8008350:	b13c      	cbz	r4, 8008362 <_Bfree+0x3a>
 8008352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008354:	6862      	ldr	r2, [r4, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800835c:	6021      	str	r1, [r4, #0]
 800835e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	080097a5 	.word	0x080097a5
 8008368:	08009828 	.word	0x08009828

0800836c <__multadd>:
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	690d      	ldr	r5, [r1, #16]
 8008372:	4607      	mov	r7, r0
 8008374:	460c      	mov	r4, r1
 8008376:	461e      	mov	r6, r3
 8008378:	f101 0c14 	add.w	ip, r1, #20
 800837c:	2000      	movs	r0, #0
 800837e:	f8dc 3000 	ldr.w	r3, [ip]
 8008382:	b299      	uxth	r1, r3
 8008384:	fb02 6101 	mla	r1, r2, r1, r6
 8008388:	0c1e      	lsrs	r6, r3, #16
 800838a:	0c0b      	lsrs	r3, r1, #16
 800838c:	fb02 3306 	mla	r3, r2, r6, r3
 8008390:	b289      	uxth	r1, r1
 8008392:	3001      	adds	r0, #1
 8008394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008398:	4285      	cmp	r5, r0
 800839a:	f84c 1b04 	str.w	r1, [ip], #4
 800839e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083a2:	dcec      	bgt.n	800837e <__multadd+0x12>
 80083a4:	b30e      	cbz	r6, 80083ea <__multadd+0x7e>
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	dc19      	bgt.n	80083e0 <__multadd+0x74>
 80083ac:	6861      	ldr	r1, [r4, #4]
 80083ae:	4638      	mov	r0, r7
 80083b0:	3101      	adds	r1, #1
 80083b2:	f7ff ff79 	bl	80082a8 <_Balloc>
 80083b6:	4680      	mov	r8, r0
 80083b8:	b928      	cbnz	r0, 80083c6 <__multadd+0x5a>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <__multadd+0x84>)
 80083be:	480d      	ldr	r0, [pc, #52]	; (80083f4 <__multadd+0x88>)
 80083c0:	21b5      	movs	r1, #181	; 0xb5
 80083c2:	f000 fbfb 	bl	8008bbc <__assert_func>
 80083c6:	6922      	ldr	r2, [r4, #16]
 80083c8:	3202      	adds	r2, #2
 80083ca:	f104 010c 	add.w	r1, r4, #12
 80083ce:	0092      	lsls	r2, r2, #2
 80083d0:	300c      	adds	r0, #12
 80083d2:	f7ff ff5b 	bl	800828c <memcpy>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff ffa5 	bl	8008328 <_Bfree>
 80083de:	4644      	mov	r4, r8
 80083e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083e4:	3501      	adds	r5, #1
 80083e6:	615e      	str	r6, [r3, #20]
 80083e8:	6125      	str	r5, [r4, #16]
 80083ea:	4620      	mov	r0, r4
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f0:	08009817 	.word	0x08009817
 80083f4:	08009828 	.word	0x08009828

080083f8 <__hi0bits>:
 80083f8:	0c03      	lsrs	r3, r0, #16
 80083fa:	041b      	lsls	r3, r3, #16
 80083fc:	b9d3      	cbnz	r3, 8008434 <__hi0bits+0x3c>
 80083fe:	0400      	lsls	r0, r0, #16
 8008400:	2310      	movs	r3, #16
 8008402:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008406:	bf04      	itt	eq
 8008408:	0200      	lsleq	r0, r0, #8
 800840a:	3308      	addeq	r3, #8
 800840c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008410:	bf04      	itt	eq
 8008412:	0100      	lsleq	r0, r0, #4
 8008414:	3304      	addeq	r3, #4
 8008416:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800841a:	bf04      	itt	eq
 800841c:	0080      	lsleq	r0, r0, #2
 800841e:	3302      	addeq	r3, #2
 8008420:	2800      	cmp	r0, #0
 8008422:	db05      	blt.n	8008430 <__hi0bits+0x38>
 8008424:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008428:	f103 0301 	add.w	r3, r3, #1
 800842c:	bf08      	it	eq
 800842e:	2320      	moveq	r3, #32
 8008430:	4618      	mov	r0, r3
 8008432:	4770      	bx	lr
 8008434:	2300      	movs	r3, #0
 8008436:	e7e4      	b.n	8008402 <__hi0bits+0xa>

08008438 <__lo0bits>:
 8008438:	6803      	ldr	r3, [r0, #0]
 800843a:	f013 0207 	ands.w	r2, r3, #7
 800843e:	4601      	mov	r1, r0
 8008440:	d00b      	beq.n	800845a <__lo0bits+0x22>
 8008442:	07da      	lsls	r2, r3, #31
 8008444:	d423      	bmi.n	800848e <__lo0bits+0x56>
 8008446:	0798      	lsls	r0, r3, #30
 8008448:	bf49      	itett	mi
 800844a:	085b      	lsrmi	r3, r3, #1
 800844c:	089b      	lsrpl	r3, r3, #2
 800844e:	2001      	movmi	r0, #1
 8008450:	600b      	strmi	r3, [r1, #0]
 8008452:	bf5c      	itt	pl
 8008454:	600b      	strpl	r3, [r1, #0]
 8008456:	2002      	movpl	r0, #2
 8008458:	4770      	bx	lr
 800845a:	b298      	uxth	r0, r3
 800845c:	b9a8      	cbnz	r0, 800848a <__lo0bits+0x52>
 800845e:	0c1b      	lsrs	r3, r3, #16
 8008460:	2010      	movs	r0, #16
 8008462:	b2da      	uxtb	r2, r3
 8008464:	b90a      	cbnz	r2, 800846a <__lo0bits+0x32>
 8008466:	3008      	adds	r0, #8
 8008468:	0a1b      	lsrs	r3, r3, #8
 800846a:	071a      	lsls	r2, r3, #28
 800846c:	bf04      	itt	eq
 800846e:	091b      	lsreq	r3, r3, #4
 8008470:	3004      	addeq	r0, #4
 8008472:	079a      	lsls	r2, r3, #30
 8008474:	bf04      	itt	eq
 8008476:	089b      	lsreq	r3, r3, #2
 8008478:	3002      	addeq	r0, #2
 800847a:	07da      	lsls	r2, r3, #31
 800847c:	d403      	bmi.n	8008486 <__lo0bits+0x4e>
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	f100 0001 	add.w	r0, r0, #1
 8008484:	d005      	beq.n	8008492 <__lo0bits+0x5a>
 8008486:	600b      	str	r3, [r1, #0]
 8008488:	4770      	bx	lr
 800848a:	4610      	mov	r0, r2
 800848c:	e7e9      	b.n	8008462 <__lo0bits+0x2a>
 800848e:	2000      	movs	r0, #0
 8008490:	4770      	bx	lr
 8008492:	2020      	movs	r0, #32
 8008494:	4770      	bx	lr
	...

08008498 <__i2b>:
 8008498:	b510      	push	{r4, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	2101      	movs	r1, #1
 800849e:	f7ff ff03 	bl	80082a8 <_Balloc>
 80084a2:	4602      	mov	r2, r0
 80084a4:	b928      	cbnz	r0, 80084b2 <__i2b+0x1a>
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <__i2b+0x24>)
 80084a8:	4805      	ldr	r0, [pc, #20]	; (80084c0 <__i2b+0x28>)
 80084aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084ae:	f000 fb85 	bl	8008bbc <__assert_func>
 80084b2:	2301      	movs	r3, #1
 80084b4:	6144      	str	r4, [r0, #20]
 80084b6:	6103      	str	r3, [r0, #16]
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	bf00      	nop
 80084bc:	08009817 	.word	0x08009817
 80084c0:	08009828 	.word	0x08009828

080084c4 <__multiply>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	4691      	mov	r9, r2
 80084ca:	690a      	ldr	r2, [r1, #16]
 80084cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	bfb8      	it	lt
 80084d4:	460b      	movlt	r3, r1
 80084d6:	460c      	mov	r4, r1
 80084d8:	bfbc      	itt	lt
 80084da:	464c      	movlt	r4, r9
 80084dc:	4699      	movlt	r9, r3
 80084de:	6927      	ldr	r7, [r4, #16]
 80084e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084e4:	68a3      	ldr	r3, [r4, #8]
 80084e6:	6861      	ldr	r1, [r4, #4]
 80084e8:	eb07 060a 	add.w	r6, r7, sl
 80084ec:	42b3      	cmp	r3, r6
 80084ee:	b085      	sub	sp, #20
 80084f0:	bfb8      	it	lt
 80084f2:	3101      	addlt	r1, #1
 80084f4:	f7ff fed8 	bl	80082a8 <_Balloc>
 80084f8:	b930      	cbnz	r0, 8008508 <__multiply+0x44>
 80084fa:	4602      	mov	r2, r0
 80084fc:	4b44      	ldr	r3, [pc, #272]	; (8008610 <__multiply+0x14c>)
 80084fe:	4845      	ldr	r0, [pc, #276]	; (8008614 <__multiply+0x150>)
 8008500:	f240 115d 	movw	r1, #349	; 0x15d
 8008504:	f000 fb5a 	bl	8008bbc <__assert_func>
 8008508:	f100 0514 	add.w	r5, r0, #20
 800850c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008510:	462b      	mov	r3, r5
 8008512:	2200      	movs	r2, #0
 8008514:	4543      	cmp	r3, r8
 8008516:	d321      	bcc.n	800855c <__multiply+0x98>
 8008518:	f104 0314 	add.w	r3, r4, #20
 800851c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008520:	f109 0314 	add.w	r3, r9, #20
 8008524:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008528:	9202      	str	r2, [sp, #8]
 800852a:	1b3a      	subs	r2, r7, r4
 800852c:	3a15      	subs	r2, #21
 800852e:	f022 0203 	bic.w	r2, r2, #3
 8008532:	3204      	adds	r2, #4
 8008534:	f104 0115 	add.w	r1, r4, #21
 8008538:	428f      	cmp	r7, r1
 800853a:	bf38      	it	cc
 800853c:	2204      	movcc	r2, #4
 800853e:	9201      	str	r2, [sp, #4]
 8008540:	9a02      	ldr	r2, [sp, #8]
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	429a      	cmp	r2, r3
 8008546:	d80c      	bhi.n	8008562 <__multiply+0x9e>
 8008548:	2e00      	cmp	r6, #0
 800854a:	dd03      	ble.n	8008554 <__multiply+0x90>
 800854c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008550:	2b00      	cmp	r3, #0
 8008552:	d05a      	beq.n	800860a <__multiply+0x146>
 8008554:	6106      	str	r6, [r0, #16]
 8008556:	b005      	add	sp, #20
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	f843 2b04 	str.w	r2, [r3], #4
 8008560:	e7d8      	b.n	8008514 <__multiply+0x50>
 8008562:	f8b3 a000 	ldrh.w	sl, [r3]
 8008566:	f1ba 0f00 	cmp.w	sl, #0
 800856a:	d024      	beq.n	80085b6 <__multiply+0xf2>
 800856c:	f104 0e14 	add.w	lr, r4, #20
 8008570:	46a9      	mov	r9, r5
 8008572:	f04f 0c00 	mov.w	ip, #0
 8008576:	f85e 2b04 	ldr.w	r2, [lr], #4
 800857a:	f8d9 1000 	ldr.w	r1, [r9]
 800857e:	fa1f fb82 	uxth.w	fp, r2
 8008582:	b289      	uxth	r1, r1
 8008584:	fb0a 110b 	mla	r1, sl, fp, r1
 8008588:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800858c:	f8d9 2000 	ldr.w	r2, [r9]
 8008590:	4461      	add	r1, ip
 8008592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008596:	fb0a c20b 	mla	r2, sl, fp, ip
 800859a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800859e:	b289      	uxth	r1, r1
 80085a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085a4:	4577      	cmp	r7, lr
 80085a6:	f849 1b04 	str.w	r1, [r9], #4
 80085aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085ae:	d8e2      	bhi.n	8008576 <__multiply+0xb2>
 80085b0:	9a01      	ldr	r2, [sp, #4]
 80085b2:	f845 c002 	str.w	ip, [r5, r2]
 80085b6:	9a03      	ldr	r2, [sp, #12]
 80085b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085bc:	3304      	adds	r3, #4
 80085be:	f1b9 0f00 	cmp.w	r9, #0
 80085c2:	d020      	beq.n	8008606 <__multiply+0x142>
 80085c4:	6829      	ldr	r1, [r5, #0]
 80085c6:	f104 0c14 	add.w	ip, r4, #20
 80085ca:	46ae      	mov	lr, r5
 80085cc:	f04f 0a00 	mov.w	sl, #0
 80085d0:	f8bc b000 	ldrh.w	fp, [ip]
 80085d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085d8:	fb09 220b 	mla	r2, r9, fp, r2
 80085dc:	4492      	add	sl, r2
 80085de:	b289      	uxth	r1, r1
 80085e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085e4:	f84e 1b04 	str.w	r1, [lr], #4
 80085e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085ec:	f8be 1000 	ldrh.w	r1, [lr]
 80085f0:	0c12      	lsrs	r2, r2, #16
 80085f2:	fb09 1102 	mla	r1, r9, r2, r1
 80085f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085fa:	4567      	cmp	r7, ip
 80085fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008600:	d8e6      	bhi.n	80085d0 <__multiply+0x10c>
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	50a9      	str	r1, [r5, r2]
 8008606:	3504      	adds	r5, #4
 8008608:	e79a      	b.n	8008540 <__multiply+0x7c>
 800860a:	3e01      	subs	r6, #1
 800860c:	e79c      	b.n	8008548 <__multiply+0x84>
 800860e:	bf00      	nop
 8008610:	08009817 	.word	0x08009817
 8008614:	08009828 	.word	0x08009828

08008618 <__pow5mult>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	4615      	mov	r5, r2
 800861e:	f012 0203 	ands.w	r2, r2, #3
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	d007      	beq.n	8008638 <__pow5mult+0x20>
 8008628:	4c25      	ldr	r4, [pc, #148]	; (80086c0 <__pow5mult+0xa8>)
 800862a:	3a01      	subs	r2, #1
 800862c:	2300      	movs	r3, #0
 800862e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008632:	f7ff fe9b 	bl	800836c <__multadd>
 8008636:	4607      	mov	r7, r0
 8008638:	10ad      	asrs	r5, r5, #2
 800863a:	d03d      	beq.n	80086b8 <__pow5mult+0xa0>
 800863c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800863e:	b97c      	cbnz	r4, 8008660 <__pow5mult+0x48>
 8008640:	2010      	movs	r0, #16
 8008642:	f7ff fe1b 	bl	800827c <malloc>
 8008646:	4602      	mov	r2, r0
 8008648:	6270      	str	r0, [r6, #36]	; 0x24
 800864a:	b928      	cbnz	r0, 8008658 <__pow5mult+0x40>
 800864c:	4b1d      	ldr	r3, [pc, #116]	; (80086c4 <__pow5mult+0xac>)
 800864e:	481e      	ldr	r0, [pc, #120]	; (80086c8 <__pow5mult+0xb0>)
 8008650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008654:	f000 fab2 	bl	8008bbc <__assert_func>
 8008658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800865c:	6004      	str	r4, [r0, #0]
 800865e:	60c4      	str	r4, [r0, #12]
 8008660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008668:	b94c      	cbnz	r4, 800867e <__pow5mult+0x66>
 800866a:	f240 2171 	movw	r1, #625	; 0x271
 800866e:	4630      	mov	r0, r6
 8008670:	f7ff ff12 	bl	8008498 <__i2b>
 8008674:	2300      	movs	r3, #0
 8008676:	f8c8 0008 	str.w	r0, [r8, #8]
 800867a:	4604      	mov	r4, r0
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	f04f 0900 	mov.w	r9, #0
 8008682:	07eb      	lsls	r3, r5, #31
 8008684:	d50a      	bpl.n	800869c <__pow5mult+0x84>
 8008686:	4639      	mov	r1, r7
 8008688:	4622      	mov	r2, r4
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff ff1a 	bl	80084c4 <__multiply>
 8008690:	4639      	mov	r1, r7
 8008692:	4680      	mov	r8, r0
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff fe47 	bl	8008328 <_Bfree>
 800869a:	4647      	mov	r7, r8
 800869c:	106d      	asrs	r5, r5, #1
 800869e:	d00b      	beq.n	80086b8 <__pow5mult+0xa0>
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	b938      	cbnz	r0, 80086b4 <__pow5mult+0x9c>
 80086a4:	4622      	mov	r2, r4
 80086a6:	4621      	mov	r1, r4
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff ff0b 	bl	80084c4 <__multiply>
 80086ae:	6020      	str	r0, [r4, #0]
 80086b0:	f8c0 9000 	str.w	r9, [r0]
 80086b4:	4604      	mov	r4, r0
 80086b6:	e7e4      	b.n	8008682 <__pow5mult+0x6a>
 80086b8:	4638      	mov	r0, r7
 80086ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086be:	bf00      	nop
 80086c0:	08009978 	.word	0x08009978
 80086c4:	080097a5 	.word	0x080097a5
 80086c8:	08009828 	.word	0x08009828

080086cc <__lshift>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	6849      	ldr	r1, [r1, #4]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	4607      	mov	r7, r0
 80086de:	4691      	mov	r9, r2
 80086e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086e4:	f108 0601 	add.w	r6, r8, #1
 80086e8:	42b3      	cmp	r3, r6
 80086ea:	db0b      	blt.n	8008704 <__lshift+0x38>
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff fddb 	bl	80082a8 <_Balloc>
 80086f2:	4605      	mov	r5, r0
 80086f4:	b948      	cbnz	r0, 800870a <__lshift+0x3e>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <__lshift+0xd8>)
 80086fa:	482b      	ldr	r0, [pc, #172]	; (80087a8 <__lshift+0xdc>)
 80086fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008700:	f000 fa5c 	bl	8008bbc <__assert_func>
 8008704:	3101      	adds	r1, #1
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	e7ee      	b.n	80086e8 <__lshift+0x1c>
 800870a:	2300      	movs	r3, #0
 800870c:	f100 0114 	add.w	r1, r0, #20
 8008710:	f100 0210 	add.w	r2, r0, #16
 8008714:	4618      	mov	r0, r3
 8008716:	4553      	cmp	r3, sl
 8008718:	db37      	blt.n	800878a <__lshift+0xbe>
 800871a:	6920      	ldr	r0, [r4, #16]
 800871c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008720:	f104 0314 	add.w	r3, r4, #20
 8008724:	f019 091f 	ands.w	r9, r9, #31
 8008728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800872c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008730:	d02f      	beq.n	8008792 <__lshift+0xc6>
 8008732:	f1c9 0e20 	rsb	lr, r9, #32
 8008736:	468a      	mov	sl, r1
 8008738:	f04f 0c00 	mov.w	ip, #0
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	fa02 f209 	lsl.w	r2, r2, r9
 8008742:	ea42 020c 	orr.w	r2, r2, ip
 8008746:	f84a 2b04 	str.w	r2, [sl], #4
 800874a:	f853 2b04 	ldr.w	r2, [r3], #4
 800874e:	4298      	cmp	r0, r3
 8008750:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008754:	d8f2      	bhi.n	800873c <__lshift+0x70>
 8008756:	1b03      	subs	r3, r0, r4
 8008758:	3b15      	subs	r3, #21
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	3304      	adds	r3, #4
 8008760:	f104 0215 	add.w	r2, r4, #21
 8008764:	4290      	cmp	r0, r2
 8008766:	bf38      	it	cc
 8008768:	2304      	movcc	r3, #4
 800876a:	f841 c003 	str.w	ip, [r1, r3]
 800876e:	f1bc 0f00 	cmp.w	ip, #0
 8008772:	d001      	beq.n	8008778 <__lshift+0xac>
 8008774:	f108 0602 	add.w	r6, r8, #2
 8008778:	3e01      	subs	r6, #1
 800877a:	4638      	mov	r0, r7
 800877c:	612e      	str	r6, [r5, #16]
 800877e:	4621      	mov	r1, r4
 8008780:	f7ff fdd2 	bl	8008328 <_Bfree>
 8008784:	4628      	mov	r0, r5
 8008786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878a:	f842 0f04 	str.w	r0, [r2, #4]!
 800878e:	3301      	adds	r3, #1
 8008790:	e7c1      	b.n	8008716 <__lshift+0x4a>
 8008792:	3904      	subs	r1, #4
 8008794:	f853 2b04 	ldr.w	r2, [r3], #4
 8008798:	f841 2f04 	str.w	r2, [r1, #4]!
 800879c:	4298      	cmp	r0, r3
 800879e:	d8f9      	bhi.n	8008794 <__lshift+0xc8>
 80087a0:	e7ea      	b.n	8008778 <__lshift+0xac>
 80087a2:	bf00      	nop
 80087a4:	08009817 	.word	0x08009817
 80087a8:	08009828 	.word	0x08009828

080087ac <__mcmp>:
 80087ac:	b530      	push	{r4, r5, lr}
 80087ae:	6902      	ldr	r2, [r0, #16]
 80087b0:	690c      	ldr	r4, [r1, #16]
 80087b2:	1b12      	subs	r2, r2, r4
 80087b4:	d10e      	bne.n	80087d4 <__mcmp+0x28>
 80087b6:	f100 0314 	add.w	r3, r0, #20
 80087ba:	3114      	adds	r1, #20
 80087bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087cc:	42a5      	cmp	r5, r4
 80087ce:	d003      	beq.n	80087d8 <__mcmp+0x2c>
 80087d0:	d305      	bcc.n	80087de <__mcmp+0x32>
 80087d2:	2201      	movs	r2, #1
 80087d4:	4610      	mov	r0, r2
 80087d6:	bd30      	pop	{r4, r5, pc}
 80087d8:	4283      	cmp	r3, r0
 80087da:	d3f3      	bcc.n	80087c4 <__mcmp+0x18>
 80087dc:	e7fa      	b.n	80087d4 <__mcmp+0x28>
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	e7f7      	b.n	80087d4 <__mcmp+0x28>

080087e4 <__mdiff>:
 80087e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	460c      	mov	r4, r1
 80087ea:	4606      	mov	r6, r0
 80087ec:	4611      	mov	r1, r2
 80087ee:	4620      	mov	r0, r4
 80087f0:	4690      	mov	r8, r2
 80087f2:	f7ff ffdb 	bl	80087ac <__mcmp>
 80087f6:	1e05      	subs	r5, r0, #0
 80087f8:	d110      	bne.n	800881c <__mdiff+0x38>
 80087fa:	4629      	mov	r1, r5
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff fd53 	bl	80082a8 <_Balloc>
 8008802:	b930      	cbnz	r0, 8008812 <__mdiff+0x2e>
 8008804:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <__mdiff+0x10c>)
 8008806:	4602      	mov	r2, r0
 8008808:	f240 2132 	movw	r1, #562	; 0x232
 800880c:	4839      	ldr	r0, [pc, #228]	; (80088f4 <__mdiff+0x110>)
 800880e:	f000 f9d5 	bl	8008bbc <__assert_func>
 8008812:	2301      	movs	r3, #1
 8008814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881c:	bfa4      	itt	ge
 800881e:	4643      	movge	r3, r8
 8008820:	46a0      	movge	r8, r4
 8008822:	4630      	mov	r0, r6
 8008824:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008828:	bfa6      	itte	ge
 800882a:	461c      	movge	r4, r3
 800882c:	2500      	movge	r5, #0
 800882e:	2501      	movlt	r5, #1
 8008830:	f7ff fd3a 	bl	80082a8 <_Balloc>
 8008834:	b920      	cbnz	r0, 8008840 <__mdiff+0x5c>
 8008836:	4b2e      	ldr	r3, [pc, #184]	; (80088f0 <__mdiff+0x10c>)
 8008838:	4602      	mov	r2, r0
 800883a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800883e:	e7e5      	b.n	800880c <__mdiff+0x28>
 8008840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008844:	6926      	ldr	r6, [r4, #16]
 8008846:	60c5      	str	r5, [r0, #12]
 8008848:	f104 0914 	add.w	r9, r4, #20
 800884c:	f108 0514 	add.w	r5, r8, #20
 8008850:	f100 0e14 	add.w	lr, r0, #20
 8008854:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800885c:	f108 0210 	add.w	r2, r8, #16
 8008860:	46f2      	mov	sl, lr
 8008862:	2100      	movs	r1, #0
 8008864:	f859 3b04 	ldr.w	r3, [r9], #4
 8008868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800886c:	fa1f f883 	uxth.w	r8, r3
 8008870:	fa11 f18b 	uxtah	r1, r1, fp
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	eba1 0808 	sub.w	r8, r1, r8
 800887a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800887e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008882:	fa1f f888 	uxth.w	r8, r8
 8008886:	1419      	asrs	r1, r3, #16
 8008888:	454e      	cmp	r6, r9
 800888a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800888e:	f84a 3b04 	str.w	r3, [sl], #4
 8008892:	d8e7      	bhi.n	8008864 <__mdiff+0x80>
 8008894:	1b33      	subs	r3, r6, r4
 8008896:	3b15      	subs	r3, #21
 8008898:	f023 0303 	bic.w	r3, r3, #3
 800889c:	3304      	adds	r3, #4
 800889e:	3415      	adds	r4, #21
 80088a0:	42a6      	cmp	r6, r4
 80088a2:	bf38      	it	cc
 80088a4:	2304      	movcc	r3, #4
 80088a6:	441d      	add	r5, r3
 80088a8:	4473      	add	r3, lr
 80088aa:	469e      	mov	lr, r3
 80088ac:	462e      	mov	r6, r5
 80088ae:	4566      	cmp	r6, ip
 80088b0:	d30e      	bcc.n	80088d0 <__mdiff+0xec>
 80088b2:	f10c 0203 	add.w	r2, ip, #3
 80088b6:	1b52      	subs	r2, r2, r5
 80088b8:	f022 0203 	bic.w	r2, r2, #3
 80088bc:	3d03      	subs	r5, #3
 80088be:	45ac      	cmp	ip, r5
 80088c0:	bf38      	it	cc
 80088c2:	2200      	movcc	r2, #0
 80088c4:	441a      	add	r2, r3
 80088c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088ca:	b17b      	cbz	r3, 80088ec <__mdiff+0x108>
 80088cc:	6107      	str	r7, [r0, #16]
 80088ce:	e7a3      	b.n	8008818 <__mdiff+0x34>
 80088d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80088d4:	fa11 f288 	uxtah	r2, r1, r8
 80088d8:	1414      	asrs	r4, r2, #16
 80088da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088de:	b292      	uxth	r2, r2
 80088e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088e4:	f84e 2b04 	str.w	r2, [lr], #4
 80088e8:	1421      	asrs	r1, r4, #16
 80088ea:	e7e0      	b.n	80088ae <__mdiff+0xca>
 80088ec:	3f01      	subs	r7, #1
 80088ee:	e7ea      	b.n	80088c6 <__mdiff+0xe2>
 80088f0:	08009817 	.word	0x08009817
 80088f4:	08009828 	.word	0x08009828

080088f8 <__d2b>:
 80088f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	4689      	mov	r9, r1
 80088fe:	2101      	movs	r1, #1
 8008900:	ec57 6b10 	vmov	r6, r7, d0
 8008904:	4690      	mov	r8, r2
 8008906:	f7ff fccf 	bl	80082a8 <_Balloc>
 800890a:	4604      	mov	r4, r0
 800890c:	b930      	cbnz	r0, 800891c <__d2b+0x24>
 800890e:	4602      	mov	r2, r0
 8008910:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <__d2b+0xb0>)
 8008912:	4826      	ldr	r0, [pc, #152]	; (80089ac <__d2b+0xb4>)
 8008914:	f240 310a 	movw	r1, #778	; 0x30a
 8008918:	f000 f950 	bl	8008bbc <__assert_func>
 800891c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008924:	bb35      	cbnz	r5, 8008974 <__d2b+0x7c>
 8008926:	2e00      	cmp	r6, #0
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	d028      	beq.n	800897e <__d2b+0x86>
 800892c:	4668      	mov	r0, sp
 800892e:	9600      	str	r6, [sp, #0]
 8008930:	f7ff fd82 	bl	8008438 <__lo0bits>
 8008934:	9900      	ldr	r1, [sp, #0]
 8008936:	b300      	cbz	r0, 800897a <__d2b+0x82>
 8008938:	9a01      	ldr	r2, [sp, #4]
 800893a:	f1c0 0320 	rsb	r3, r0, #32
 800893e:	fa02 f303 	lsl.w	r3, r2, r3
 8008942:	430b      	orrs	r3, r1
 8008944:	40c2      	lsrs	r2, r0
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	9201      	str	r2, [sp, #4]
 800894a:	9b01      	ldr	r3, [sp, #4]
 800894c:	61a3      	str	r3, [r4, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	bf14      	ite	ne
 8008952:	2202      	movne	r2, #2
 8008954:	2201      	moveq	r2, #1
 8008956:	6122      	str	r2, [r4, #16]
 8008958:	b1d5      	cbz	r5, 8008990 <__d2b+0x98>
 800895a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800895e:	4405      	add	r5, r0
 8008960:	f8c9 5000 	str.w	r5, [r9]
 8008964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008968:	f8c8 0000 	str.w	r0, [r8]
 800896c:	4620      	mov	r0, r4
 800896e:	b003      	add	sp, #12
 8008970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008978:	e7d5      	b.n	8008926 <__d2b+0x2e>
 800897a:	6161      	str	r1, [r4, #20]
 800897c:	e7e5      	b.n	800894a <__d2b+0x52>
 800897e:	a801      	add	r0, sp, #4
 8008980:	f7ff fd5a 	bl	8008438 <__lo0bits>
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	6163      	str	r3, [r4, #20]
 8008988:	2201      	movs	r2, #1
 800898a:	6122      	str	r2, [r4, #16]
 800898c:	3020      	adds	r0, #32
 800898e:	e7e3      	b.n	8008958 <__d2b+0x60>
 8008990:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008994:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008998:	f8c9 0000 	str.w	r0, [r9]
 800899c:	6918      	ldr	r0, [r3, #16]
 800899e:	f7ff fd2b 	bl	80083f8 <__hi0bits>
 80089a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089a6:	e7df      	b.n	8008968 <__d2b+0x70>
 80089a8:	08009817 	.word	0x08009817
 80089ac:	08009828 	.word	0x08009828

080089b0 <_calloc_r>:
 80089b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b2:	fba1 2402 	umull	r2, r4, r1, r2
 80089b6:	b94c      	cbnz	r4, 80089cc <_calloc_r+0x1c>
 80089b8:	4611      	mov	r1, r2
 80089ba:	9201      	str	r2, [sp, #4]
 80089bc:	f000 f87a 	bl	8008ab4 <_malloc_r>
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	4605      	mov	r5, r0
 80089c4:	b930      	cbnz	r0, 80089d4 <_calloc_r+0x24>
 80089c6:	4628      	mov	r0, r5
 80089c8:	b003      	add	sp, #12
 80089ca:	bd30      	pop	{r4, r5, pc}
 80089cc:	220c      	movs	r2, #12
 80089ce:	6002      	str	r2, [r0, #0]
 80089d0:	2500      	movs	r5, #0
 80089d2:	e7f8      	b.n	80089c6 <_calloc_r+0x16>
 80089d4:	4621      	mov	r1, r4
 80089d6:	f7fe f95f 	bl	8006c98 <memset>
 80089da:	e7f4      	b.n	80089c6 <_calloc_r+0x16>

080089dc <_free_r>:
 80089dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089de:	2900      	cmp	r1, #0
 80089e0:	d044      	beq.n	8008a6c <_free_r+0x90>
 80089e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e6:	9001      	str	r0, [sp, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f1a1 0404 	sub.w	r4, r1, #4
 80089ee:	bfb8      	it	lt
 80089f0:	18e4      	addlt	r4, r4, r3
 80089f2:	f000 f925 	bl	8008c40 <__malloc_lock>
 80089f6:	4a1e      	ldr	r2, [pc, #120]	; (8008a70 <_free_r+0x94>)
 80089f8:	9801      	ldr	r0, [sp, #4]
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	b933      	cbnz	r3, 8008a0c <_free_r+0x30>
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	6014      	str	r4, [r2, #0]
 8008a02:	b003      	add	sp, #12
 8008a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a08:	f000 b920 	b.w	8008c4c <__malloc_unlock>
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	d908      	bls.n	8008a22 <_free_r+0x46>
 8008a10:	6825      	ldr	r5, [r4, #0]
 8008a12:	1961      	adds	r1, r4, r5
 8008a14:	428b      	cmp	r3, r1
 8008a16:	bf01      	itttt	eq
 8008a18:	6819      	ldreq	r1, [r3, #0]
 8008a1a:	685b      	ldreq	r3, [r3, #4]
 8008a1c:	1949      	addeq	r1, r1, r5
 8008a1e:	6021      	streq	r1, [r4, #0]
 8008a20:	e7ed      	b.n	80089fe <_free_r+0x22>
 8008a22:	461a      	mov	r2, r3
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	b10b      	cbz	r3, 8008a2c <_free_r+0x50>
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	d9fa      	bls.n	8008a22 <_free_r+0x46>
 8008a2c:	6811      	ldr	r1, [r2, #0]
 8008a2e:	1855      	adds	r5, r2, r1
 8008a30:	42a5      	cmp	r5, r4
 8008a32:	d10b      	bne.n	8008a4c <_free_r+0x70>
 8008a34:	6824      	ldr	r4, [r4, #0]
 8008a36:	4421      	add	r1, r4
 8008a38:	1854      	adds	r4, r2, r1
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	d1e0      	bne.n	8008a02 <_free_r+0x26>
 8008a40:	681c      	ldr	r4, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	6053      	str	r3, [r2, #4]
 8008a46:	4421      	add	r1, r4
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	e7da      	b.n	8008a02 <_free_r+0x26>
 8008a4c:	d902      	bls.n	8008a54 <_free_r+0x78>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	e7d6      	b.n	8008a02 <_free_r+0x26>
 8008a54:	6825      	ldr	r5, [r4, #0]
 8008a56:	1961      	adds	r1, r4, r5
 8008a58:	428b      	cmp	r3, r1
 8008a5a:	bf04      	itt	eq
 8008a5c:	6819      	ldreq	r1, [r3, #0]
 8008a5e:	685b      	ldreq	r3, [r3, #4]
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	bf04      	itt	eq
 8008a64:	1949      	addeq	r1, r1, r5
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	6054      	str	r4, [r2, #4]
 8008a6a:	e7ca      	b.n	8008a02 <_free_r+0x26>
 8008a6c:	b003      	add	sp, #12
 8008a6e:	bd30      	pop	{r4, r5, pc}
 8008a70:	200006c8 	.word	0x200006c8

08008a74 <sbrk_aligned>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	4e0e      	ldr	r6, [pc, #56]	; (8008ab0 <sbrk_aligned+0x3c>)
 8008a78:	460c      	mov	r4, r1
 8008a7a:	6831      	ldr	r1, [r6, #0]
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	b911      	cbnz	r1, 8008a86 <sbrk_aligned+0x12>
 8008a80:	f000 f88c 	bl	8008b9c <_sbrk_r>
 8008a84:	6030      	str	r0, [r6, #0]
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 f887 	bl	8008b9c <_sbrk_r>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d00a      	beq.n	8008aa8 <sbrk_aligned+0x34>
 8008a92:	1cc4      	adds	r4, r0, #3
 8008a94:	f024 0403 	bic.w	r4, r4, #3
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d007      	beq.n	8008aac <sbrk_aligned+0x38>
 8008a9c:	1a21      	subs	r1, r4, r0
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 f87c 	bl	8008b9c <_sbrk_r>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d101      	bne.n	8008aac <sbrk_aligned+0x38>
 8008aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8008aac:	4620      	mov	r0, r4
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	200006cc 	.word	0x200006cc

08008ab4 <_malloc_r>:
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	1ccd      	adds	r5, r1, #3
 8008aba:	f025 0503 	bic.w	r5, r5, #3
 8008abe:	3508      	adds	r5, #8
 8008ac0:	2d0c      	cmp	r5, #12
 8008ac2:	bf38      	it	cc
 8008ac4:	250c      	movcc	r5, #12
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	4607      	mov	r7, r0
 8008aca:	db01      	blt.n	8008ad0 <_malloc_r+0x1c>
 8008acc:	42a9      	cmp	r1, r5
 8008ace:	d905      	bls.n	8008adc <_malloc_r+0x28>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008adc:	4e2e      	ldr	r6, [pc, #184]	; (8008b98 <_malloc_r+0xe4>)
 8008ade:	f000 f8af 	bl	8008c40 <__malloc_lock>
 8008ae2:	6833      	ldr	r3, [r6, #0]
 8008ae4:	461c      	mov	r4, r3
 8008ae6:	bb34      	cbnz	r4, 8008b36 <_malloc_r+0x82>
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4638      	mov	r0, r7
 8008aec:	f7ff ffc2 	bl	8008a74 <sbrk_aligned>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	4604      	mov	r4, r0
 8008af4:	d14d      	bne.n	8008b92 <_malloc_r+0xde>
 8008af6:	6834      	ldr	r4, [r6, #0]
 8008af8:	4626      	mov	r6, r4
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d140      	bne.n	8008b80 <_malloc_r+0xcc>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	4631      	mov	r1, r6
 8008b02:	4638      	mov	r0, r7
 8008b04:	eb04 0803 	add.w	r8, r4, r3
 8008b08:	f000 f848 	bl	8008b9c <_sbrk_r>
 8008b0c:	4580      	cmp	r8, r0
 8008b0e:	d13a      	bne.n	8008b86 <_malloc_r+0xd2>
 8008b10:	6821      	ldr	r1, [r4, #0]
 8008b12:	3503      	adds	r5, #3
 8008b14:	1a6d      	subs	r5, r5, r1
 8008b16:	f025 0503 	bic.w	r5, r5, #3
 8008b1a:	3508      	adds	r5, #8
 8008b1c:	2d0c      	cmp	r5, #12
 8008b1e:	bf38      	it	cc
 8008b20:	250c      	movcc	r5, #12
 8008b22:	4629      	mov	r1, r5
 8008b24:	4638      	mov	r0, r7
 8008b26:	f7ff ffa5 	bl	8008a74 <sbrk_aligned>
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d02b      	beq.n	8008b86 <_malloc_r+0xd2>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	442b      	add	r3, r5
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	e00e      	b.n	8008b54 <_malloc_r+0xa0>
 8008b36:	6822      	ldr	r2, [r4, #0]
 8008b38:	1b52      	subs	r2, r2, r5
 8008b3a:	d41e      	bmi.n	8008b7a <_malloc_r+0xc6>
 8008b3c:	2a0b      	cmp	r2, #11
 8008b3e:	d916      	bls.n	8008b6e <_malloc_r+0xba>
 8008b40:	1961      	adds	r1, r4, r5
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	6025      	str	r5, [r4, #0]
 8008b46:	bf18      	it	ne
 8008b48:	6059      	strne	r1, [r3, #4]
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	bf08      	it	eq
 8008b4e:	6031      	streq	r1, [r6, #0]
 8008b50:	5162      	str	r2, [r4, r5]
 8008b52:	604b      	str	r3, [r1, #4]
 8008b54:	4638      	mov	r0, r7
 8008b56:	f104 060b 	add.w	r6, r4, #11
 8008b5a:	f000 f877 	bl	8008c4c <__malloc_unlock>
 8008b5e:	f026 0607 	bic.w	r6, r6, #7
 8008b62:	1d23      	adds	r3, r4, #4
 8008b64:	1af2      	subs	r2, r6, r3
 8008b66:	d0b6      	beq.n	8008ad6 <_malloc_r+0x22>
 8008b68:	1b9b      	subs	r3, r3, r6
 8008b6a:	50a3      	str	r3, [r4, r2]
 8008b6c:	e7b3      	b.n	8008ad6 <_malloc_r+0x22>
 8008b6e:	6862      	ldr	r2, [r4, #4]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	bf0c      	ite	eq
 8008b74:	6032      	streq	r2, [r6, #0]
 8008b76:	605a      	strne	r2, [r3, #4]
 8008b78:	e7ec      	b.n	8008b54 <_malloc_r+0xa0>
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	6864      	ldr	r4, [r4, #4]
 8008b7e:	e7b2      	b.n	8008ae6 <_malloc_r+0x32>
 8008b80:	4634      	mov	r4, r6
 8008b82:	6876      	ldr	r6, [r6, #4]
 8008b84:	e7b9      	b.n	8008afa <_malloc_r+0x46>
 8008b86:	230c      	movs	r3, #12
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f000 f85e 	bl	8008c4c <__malloc_unlock>
 8008b90:	e7a1      	b.n	8008ad6 <_malloc_r+0x22>
 8008b92:	6025      	str	r5, [r4, #0]
 8008b94:	e7de      	b.n	8008b54 <_malloc_r+0xa0>
 8008b96:	bf00      	nop
 8008b98:	200006c8 	.word	0x200006c8

08008b9c <_sbrk_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4d06      	ldr	r5, [pc, #24]	; (8008bb8 <_sbrk_r+0x1c>)
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	f7f9 fb1a 	bl	80021e0 <_sbrk>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_sbrk_r+0x1a>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_sbrk_r+0x1a>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	200006d0 	.word	0x200006d0

08008bbc <__assert_func>:
 8008bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bbe:	4614      	mov	r4, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <__assert_func+0x2c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	68d8      	ldr	r0, [r3, #12]
 8008bca:	b14c      	cbz	r4, 8008be0 <__assert_func+0x24>
 8008bcc:	4b07      	ldr	r3, [pc, #28]	; (8008bec <__assert_func+0x30>)
 8008bce:	9100      	str	r1, [sp, #0]
 8008bd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bd4:	4906      	ldr	r1, [pc, #24]	; (8008bf0 <__assert_func+0x34>)
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f000 f80e 	bl	8008bf8 <fiprintf>
 8008bdc:	f000 fa64 	bl	80090a8 <abort>
 8008be0:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <__assert_func+0x38>)
 8008be2:	461c      	mov	r4, r3
 8008be4:	e7f3      	b.n	8008bce <__assert_func+0x12>
 8008be6:	bf00      	nop
 8008be8:	2000000c 	.word	0x2000000c
 8008bec:	08009984 	.word	0x08009984
 8008bf0:	08009991 	.word	0x08009991
 8008bf4:	080099bf 	.word	0x080099bf

08008bf8 <fiprintf>:
 8008bf8:	b40e      	push	{r1, r2, r3}
 8008bfa:	b503      	push	{r0, r1, lr}
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	ab03      	add	r3, sp, #12
 8008c00:	4805      	ldr	r0, [pc, #20]	; (8008c18 <fiprintf+0x20>)
 8008c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c06:	6800      	ldr	r0, [r0, #0]
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	f000 f84f 	bl	8008cac <_vfiprintf_r>
 8008c0e:	b002      	add	sp, #8
 8008c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c14:	b003      	add	sp, #12
 8008c16:	4770      	bx	lr
 8008c18:	2000000c 	.word	0x2000000c

08008c1c <__ascii_mbtowc>:
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	b901      	cbnz	r1, 8008c22 <__ascii_mbtowc+0x6>
 8008c20:	a901      	add	r1, sp, #4
 8008c22:	b142      	cbz	r2, 8008c36 <__ascii_mbtowc+0x1a>
 8008c24:	b14b      	cbz	r3, 8008c3a <__ascii_mbtowc+0x1e>
 8008c26:	7813      	ldrb	r3, [r2, #0]
 8008c28:	600b      	str	r3, [r1, #0]
 8008c2a:	7812      	ldrb	r2, [r2, #0]
 8008c2c:	1e10      	subs	r0, r2, #0
 8008c2e:	bf18      	it	ne
 8008c30:	2001      	movne	r0, #1
 8008c32:	b002      	add	sp, #8
 8008c34:	4770      	bx	lr
 8008c36:	4610      	mov	r0, r2
 8008c38:	e7fb      	b.n	8008c32 <__ascii_mbtowc+0x16>
 8008c3a:	f06f 0001 	mvn.w	r0, #1
 8008c3e:	e7f8      	b.n	8008c32 <__ascii_mbtowc+0x16>

08008c40 <__malloc_lock>:
 8008c40:	4801      	ldr	r0, [pc, #4]	; (8008c48 <__malloc_lock+0x8>)
 8008c42:	f000 bbf1 	b.w	8009428 <__retarget_lock_acquire_recursive>
 8008c46:	bf00      	nop
 8008c48:	200006d4 	.word	0x200006d4

08008c4c <__malloc_unlock>:
 8008c4c:	4801      	ldr	r0, [pc, #4]	; (8008c54 <__malloc_unlock+0x8>)
 8008c4e:	f000 bbec 	b.w	800942a <__retarget_lock_release_recursive>
 8008c52:	bf00      	nop
 8008c54:	200006d4 	.word	0x200006d4

08008c58 <__sfputc_r>:
 8008c58:	6893      	ldr	r3, [r2, #8]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	b410      	push	{r4}
 8008c60:	6093      	str	r3, [r2, #8]
 8008c62:	da08      	bge.n	8008c76 <__sfputc_r+0x1e>
 8008c64:	6994      	ldr	r4, [r2, #24]
 8008c66:	42a3      	cmp	r3, r4
 8008c68:	db01      	blt.n	8008c6e <__sfputc_r+0x16>
 8008c6a:	290a      	cmp	r1, #10
 8008c6c:	d103      	bne.n	8008c76 <__sfputc_r+0x1e>
 8008c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c72:	f000 b94b 	b.w	8008f0c <__swbuf_r>
 8008c76:	6813      	ldr	r3, [r2, #0]
 8008c78:	1c58      	adds	r0, r3, #1
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	7019      	strb	r1, [r3, #0]
 8008c7e:	4608      	mov	r0, r1
 8008c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <__sfputs_r>:
 8008c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c88:	4606      	mov	r6, r0
 8008c8a:	460f      	mov	r7, r1
 8008c8c:	4614      	mov	r4, r2
 8008c8e:	18d5      	adds	r5, r2, r3
 8008c90:	42ac      	cmp	r4, r5
 8008c92:	d101      	bne.n	8008c98 <__sfputs_r+0x12>
 8008c94:	2000      	movs	r0, #0
 8008c96:	e007      	b.n	8008ca8 <__sfputs_r+0x22>
 8008c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9c:	463a      	mov	r2, r7
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7ff ffda 	bl	8008c58 <__sfputc_r>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	d1f3      	bne.n	8008c90 <__sfputs_r+0xa>
 8008ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cac <_vfiprintf_r>:
 8008cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	b09d      	sub	sp, #116	; 0x74
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	4698      	mov	r8, r3
 8008cb8:	4606      	mov	r6, r0
 8008cba:	b118      	cbz	r0, 8008cc4 <_vfiprintf_r+0x18>
 8008cbc:	6983      	ldr	r3, [r0, #24]
 8008cbe:	b90b      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x18>
 8008cc0:	f000 fb14 	bl	80092ec <__sinit>
 8008cc4:	4b89      	ldr	r3, [pc, #548]	; (8008eec <_vfiprintf_r+0x240>)
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	d11b      	bne.n	8008d02 <_vfiprintf_r+0x56>
 8008cca:	6875      	ldr	r5, [r6, #4]
 8008ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cce:	07d9      	lsls	r1, r3, #31
 8008cd0:	d405      	bmi.n	8008cde <_vfiprintf_r+0x32>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	059a      	lsls	r2, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_vfiprintf_r+0x32>
 8008cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cda:	f000 fba5 	bl	8009428 <__retarget_lock_acquire_recursive>
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	071b      	lsls	r3, r3, #28
 8008ce2:	d501      	bpl.n	8008ce8 <_vfiprintf_r+0x3c>
 8008ce4:	692b      	ldr	r3, [r5, #16]
 8008ce6:	b9eb      	cbnz	r3, 8008d24 <_vfiprintf_r+0x78>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4630      	mov	r0, r6
 8008cec:	f000 f96e 	bl	8008fcc <__swsetup_r>
 8008cf0:	b1c0      	cbz	r0, 8008d24 <_vfiprintf_r+0x78>
 8008cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf4:	07dc      	lsls	r4, r3, #31
 8008cf6:	d50e      	bpl.n	8008d16 <_vfiprintf_r+0x6a>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	b01d      	add	sp, #116	; 0x74
 8008cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d02:	4b7b      	ldr	r3, [pc, #492]	; (8008ef0 <_vfiprintf_r+0x244>)
 8008d04:	429d      	cmp	r5, r3
 8008d06:	d101      	bne.n	8008d0c <_vfiprintf_r+0x60>
 8008d08:	68b5      	ldr	r5, [r6, #8]
 8008d0a:	e7df      	b.n	8008ccc <_vfiprintf_r+0x20>
 8008d0c:	4b79      	ldr	r3, [pc, #484]	; (8008ef4 <_vfiprintf_r+0x248>)
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	bf08      	it	eq
 8008d12:	68f5      	ldreq	r5, [r6, #12]
 8008d14:	e7da      	b.n	8008ccc <_vfiprintf_r+0x20>
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	0598      	lsls	r0, r3, #22
 8008d1a:	d4ed      	bmi.n	8008cf8 <_vfiprintf_r+0x4c>
 8008d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d1e:	f000 fb84 	bl	800942a <__retarget_lock_release_recursive>
 8008d22:	e7e9      	b.n	8008cf8 <_vfiprintf_r+0x4c>
 8008d24:	2300      	movs	r3, #0
 8008d26:	9309      	str	r3, [sp, #36]	; 0x24
 8008d28:	2320      	movs	r3, #32
 8008d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d32:	2330      	movs	r3, #48	; 0x30
 8008d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ef8 <_vfiprintf_r+0x24c>
 8008d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d3c:	f04f 0901 	mov.w	r9, #1
 8008d40:	4623      	mov	r3, r4
 8008d42:	469a      	mov	sl, r3
 8008d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d48:	b10a      	cbz	r2, 8008d4e <_vfiprintf_r+0xa2>
 8008d4a:	2a25      	cmp	r2, #37	; 0x25
 8008d4c:	d1f9      	bne.n	8008d42 <_vfiprintf_r+0x96>
 8008d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d52:	d00b      	beq.n	8008d6c <_vfiprintf_r+0xc0>
 8008d54:	465b      	mov	r3, fp
 8008d56:	4622      	mov	r2, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff ff93 	bl	8008c86 <__sfputs_r>
 8008d60:	3001      	adds	r0, #1
 8008d62:	f000 80aa 	beq.w	8008eba <_vfiprintf_r+0x20e>
 8008d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d68:	445a      	add	r2, fp
 8008d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 80a2 	beq.w	8008eba <_vfiprintf_r+0x20e>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d80:	f10a 0a01 	add.w	sl, sl, #1
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d8e:	4654      	mov	r4, sl
 8008d90:	2205      	movs	r2, #5
 8008d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d96:	4858      	ldr	r0, [pc, #352]	; (8008ef8 <_vfiprintf_r+0x24c>)
 8008d98:	f7f7 fa3a 	bl	8000210 <memchr>
 8008d9c:	9a04      	ldr	r2, [sp, #16]
 8008d9e:	b9d8      	cbnz	r0, 8008dd8 <_vfiprintf_r+0x12c>
 8008da0:	06d1      	lsls	r1, r2, #27
 8008da2:	bf44      	itt	mi
 8008da4:	2320      	movmi	r3, #32
 8008da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008daa:	0713      	lsls	r3, r2, #28
 8008dac:	bf44      	itt	mi
 8008dae:	232b      	movmi	r3, #43	; 0x2b
 8008db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db4:	f89a 3000 	ldrb.w	r3, [sl]
 8008db8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dba:	d015      	beq.n	8008de8 <_vfiprintf_r+0x13c>
 8008dbc:	9a07      	ldr	r2, [sp, #28]
 8008dbe:	4654      	mov	r4, sl
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f04f 0c0a 	mov.w	ip, #10
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dcc:	3b30      	subs	r3, #48	; 0x30
 8008dce:	2b09      	cmp	r3, #9
 8008dd0:	d94e      	bls.n	8008e70 <_vfiprintf_r+0x1c4>
 8008dd2:	b1b0      	cbz	r0, 8008e02 <_vfiprintf_r+0x156>
 8008dd4:	9207      	str	r2, [sp, #28]
 8008dd6:	e014      	b.n	8008e02 <_vfiprintf_r+0x156>
 8008dd8:	eba0 0308 	sub.w	r3, r0, r8
 8008ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8008de0:	4313      	orrs	r3, r2
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	46a2      	mov	sl, r4
 8008de6:	e7d2      	b.n	8008d8e <_vfiprintf_r+0xe2>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	1d19      	adds	r1, r3, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	9103      	str	r1, [sp, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bfbb      	ittet	lt
 8008df4:	425b      	neglt	r3, r3
 8008df6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfa:	9307      	strge	r3, [sp, #28]
 8008dfc:	9307      	strlt	r3, [sp, #28]
 8008dfe:	bfb8      	it	lt
 8008e00:	9204      	strlt	r2, [sp, #16]
 8008e02:	7823      	ldrb	r3, [r4, #0]
 8008e04:	2b2e      	cmp	r3, #46	; 0x2e
 8008e06:	d10c      	bne.n	8008e22 <_vfiprintf_r+0x176>
 8008e08:	7863      	ldrb	r3, [r4, #1]
 8008e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0c:	d135      	bne.n	8008e7a <_vfiprintf_r+0x1ce>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	1d1a      	adds	r2, r3, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	9203      	str	r2, [sp, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bfb8      	it	lt
 8008e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e1e:	3402      	adds	r4, #2
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f08 <_vfiprintf_r+0x25c>
 8008e26:	7821      	ldrb	r1, [r4, #0]
 8008e28:	2203      	movs	r2, #3
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	f7f7 f9f0 	bl	8000210 <memchr>
 8008e30:	b140      	cbz	r0, 8008e44 <_vfiprintf_r+0x198>
 8008e32:	2340      	movs	r3, #64	; 0x40
 8008e34:	eba0 000a 	sub.w	r0, r0, sl
 8008e38:	fa03 f000 	lsl.w	r0, r3, r0
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	4303      	orrs	r3, r0
 8008e40:	3401      	adds	r4, #1
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e48:	482c      	ldr	r0, [pc, #176]	; (8008efc <_vfiprintf_r+0x250>)
 8008e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e4e:	2206      	movs	r2, #6
 8008e50:	f7f7 f9de 	bl	8000210 <memchr>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d03f      	beq.n	8008ed8 <_vfiprintf_r+0x22c>
 8008e58:	4b29      	ldr	r3, [pc, #164]	; (8008f00 <_vfiprintf_r+0x254>)
 8008e5a:	bb1b      	cbnz	r3, 8008ea4 <_vfiprintf_r+0x1f8>
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	3307      	adds	r3, #7
 8008e60:	f023 0307 	bic.w	r3, r3, #7
 8008e64:	3308      	adds	r3, #8
 8008e66:	9303      	str	r3, [sp, #12]
 8008e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6a:	443b      	add	r3, r7
 8008e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6e:	e767      	b.n	8008d40 <_vfiprintf_r+0x94>
 8008e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e74:	460c      	mov	r4, r1
 8008e76:	2001      	movs	r0, #1
 8008e78:	e7a5      	b.n	8008dc6 <_vfiprintf_r+0x11a>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	3401      	adds	r4, #1
 8008e7e:	9305      	str	r3, [sp, #20]
 8008e80:	4619      	mov	r1, r3
 8008e82:	f04f 0c0a 	mov.w	ip, #10
 8008e86:	4620      	mov	r0, r4
 8008e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8c:	3a30      	subs	r2, #48	; 0x30
 8008e8e:	2a09      	cmp	r2, #9
 8008e90:	d903      	bls.n	8008e9a <_vfiprintf_r+0x1ee>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0c5      	beq.n	8008e22 <_vfiprintf_r+0x176>
 8008e96:	9105      	str	r1, [sp, #20]
 8008e98:	e7c3      	b.n	8008e22 <_vfiprintf_r+0x176>
 8008e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e7f0      	b.n	8008e86 <_vfiprintf_r+0x1da>
 8008ea4:	ab03      	add	r3, sp, #12
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4b16      	ldr	r3, [pc, #88]	; (8008f04 <_vfiprintf_r+0x258>)
 8008eac:	a904      	add	r1, sp, #16
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7fd ff9a 	bl	8006de8 <_printf_float>
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	1c78      	adds	r0, r7, #1
 8008eb8:	d1d6      	bne.n	8008e68 <_vfiprintf_r+0x1bc>
 8008eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ebc:	07d9      	lsls	r1, r3, #31
 8008ebe:	d405      	bmi.n	8008ecc <_vfiprintf_r+0x220>
 8008ec0:	89ab      	ldrh	r3, [r5, #12]
 8008ec2:	059a      	lsls	r2, r3, #22
 8008ec4:	d402      	bmi.n	8008ecc <_vfiprintf_r+0x220>
 8008ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec8:	f000 faaf 	bl	800942a <__retarget_lock_release_recursive>
 8008ecc:	89ab      	ldrh	r3, [r5, #12]
 8008ece:	065b      	lsls	r3, r3, #25
 8008ed0:	f53f af12 	bmi.w	8008cf8 <_vfiprintf_r+0x4c>
 8008ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed6:	e711      	b.n	8008cfc <_vfiprintf_r+0x50>
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	462a      	mov	r2, r5
 8008ede:	4b09      	ldr	r3, [pc, #36]	; (8008f04 <_vfiprintf_r+0x258>)
 8008ee0:	a904      	add	r1, sp, #16
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7fe fa24 	bl	8007330 <_printf_i>
 8008ee8:	e7e4      	b.n	8008eb4 <_vfiprintf_r+0x208>
 8008eea:	bf00      	nop
 8008eec:	08009afc 	.word	0x08009afc
 8008ef0:	08009b1c 	.word	0x08009b1c
 8008ef4:	08009adc 	.word	0x08009adc
 8008ef8:	080099ca 	.word	0x080099ca
 8008efc:	080099d4 	.word	0x080099d4
 8008f00:	08006de9 	.word	0x08006de9
 8008f04:	08008c87 	.word	0x08008c87
 8008f08:	080099d0 	.word	0x080099d0

08008f0c <__swbuf_r>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	460e      	mov	r6, r1
 8008f10:	4614      	mov	r4, r2
 8008f12:	4605      	mov	r5, r0
 8008f14:	b118      	cbz	r0, 8008f1e <__swbuf_r+0x12>
 8008f16:	6983      	ldr	r3, [r0, #24]
 8008f18:	b90b      	cbnz	r3, 8008f1e <__swbuf_r+0x12>
 8008f1a:	f000 f9e7 	bl	80092ec <__sinit>
 8008f1e:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <__swbuf_r+0x98>)
 8008f20:	429c      	cmp	r4, r3
 8008f22:	d12b      	bne.n	8008f7c <__swbuf_r+0x70>
 8008f24:	686c      	ldr	r4, [r5, #4]
 8008f26:	69a3      	ldr	r3, [r4, #24]
 8008f28:	60a3      	str	r3, [r4, #8]
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	071a      	lsls	r2, r3, #28
 8008f2e:	d52f      	bpl.n	8008f90 <__swbuf_r+0x84>
 8008f30:	6923      	ldr	r3, [r4, #16]
 8008f32:	b36b      	cbz	r3, 8008f90 <__swbuf_r+0x84>
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	6820      	ldr	r0, [r4, #0]
 8008f38:	1ac0      	subs	r0, r0, r3
 8008f3a:	6963      	ldr	r3, [r4, #20]
 8008f3c:	b2f6      	uxtb	r6, r6
 8008f3e:	4283      	cmp	r3, r0
 8008f40:	4637      	mov	r7, r6
 8008f42:	dc04      	bgt.n	8008f4e <__swbuf_r+0x42>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4628      	mov	r0, r5
 8008f48:	f000 f93c 	bl	80091c4 <_fflush_r>
 8008f4c:	bb30      	cbnz	r0, 8008f9c <__swbuf_r+0x90>
 8008f4e:	68a3      	ldr	r3, [r4, #8]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	60a3      	str	r3, [r4, #8]
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	701e      	strb	r6, [r3, #0]
 8008f5c:	6963      	ldr	r3, [r4, #20]
 8008f5e:	3001      	adds	r0, #1
 8008f60:	4283      	cmp	r3, r0
 8008f62:	d004      	beq.n	8008f6e <__swbuf_r+0x62>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	07db      	lsls	r3, r3, #31
 8008f68:	d506      	bpl.n	8008f78 <__swbuf_r+0x6c>
 8008f6a:	2e0a      	cmp	r6, #10
 8008f6c:	d104      	bne.n	8008f78 <__swbuf_r+0x6c>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f927 	bl	80091c4 <_fflush_r>
 8008f76:	b988      	cbnz	r0, 8008f9c <__swbuf_r+0x90>
 8008f78:	4638      	mov	r0, r7
 8008f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <__swbuf_r+0x9c>)
 8008f7e:	429c      	cmp	r4, r3
 8008f80:	d101      	bne.n	8008f86 <__swbuf_r+0x7a>
 8008f82:	68ac      	ldr	r4, [r5, #8]
 8008f84:	e7cf      	b.n	8008f26 <__swbuf_r+0x1a>
 8008f86:	4b09      	ldr	r3, [pc, #36]	; (8008fac <__swbuf_r+0xa0>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	bf08      	it	eq
 8008f8c:	68ec      	ldreq	r4, [r5, #12]
 8008f8e:	e7ca      	b.n	8008f26 <__swbuf_r+0x1a>
 8008f90:	4621      	mov	r1, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 f81a 	bl	8008fcc <__swsetup_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d0cb      	beq.n	8008f34 <__swbuf_r+0x28>
 8008f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008fa0:	e7ea      	b.n	8008f78 <__swbuf_r+0x6c>
 8008fa2:	bf00      	nop
 8008fa4:	08009afc 	.word	0x08009afc
 8008fa8:	08009b1c 	.word	0x08009b1c
 8008fac:	08009adc 	.word	0x08009adc

08008fb0 <__ascii_wctomb>:
 8008fb0:	b149      	cbz	r1, 8008fc6 <__ascii_wctomb+0x16>
 8008fb2:	2aff      	cmp	r2, #255	; 0xff
 8008fb4:	bf85      	ittet	hi
 8008fb6:	238a      	movhi	r3, #138	; 0x8a
 8008fb8:	6003      	strhi	r3, [r0, #0]
 8008fba:	700a      	strbls	r2, [r1, #0]
 8008fbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fc0:	bf98      	it	ls
 8008fc2:	2001      	movls	r0, #1
 8008fc4:	4770      	bx	lr
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4770      	bx	lr
	...

08008fcc <__swsetup_r>:
 8008fcc:	4b32      	ldr	r3, [pc, #200]	; (8009098 <__swsetup_r+0xcc>)
 8008fce:	b570      	push	{r4, r5, r6, lr}
 8008fd0:	681d      	ldr	r5, [r3, #0]
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	b125      	cbz	r5, 8008fe2 <__swsetup_r+0x16>
 8008fd8:	69ab      	ldr	r3, [r5, #24]
 8008fda:	b913      	cbnz	r3, 8008fe2 <__swsetup_r+0x16>
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 f985 	bl	80092ec <__sinit>
 8008fe2:	4b2e      	ldr	r3, [pc, #184]	; (800909c <__swsetup_r+0xd0>)
 8008fe4:	429c      	cmp	r4, r3
 8008fe6:	d10f      	bne.n	8009008 <__swsetup_r+0x3c>
 8008fe8:	686c      	ldr	r4, [r5, #4]
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ff0:	0719      	lsls	r1, r3, #28
 8008ff2:	d42c      	bmi.n	800904e <__swsetup_r+0x82>
 8008ff4:	06dd      	lsls	r5, r3, #27
 8008ff6:	d411      	bmi.n	800901c <__swsetup_r+0x50>
 8008ff8:	2309      	movs	r3, #9
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	f04f 30ff 	mov.w	r0, #4294967295
 8009006:	e03e      	b.n	8009086 <__swsetup_r+0xba>
 8009008:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <__swsetup_r+0xd4>)
 800900a:	429c      	cmp	r4, r3
 800900c:	d101      	bne.n	8009012 <__swsetup_r+0x46>
 800900e:	68ac      	ldr	r4, [r5, #8]
 8009010:	e7eb      	b.n	8008fea <__swsetup_r+0x1e>
 8009012:	4b24      	ldr	r3, [pc, #144]	; (80090a4 <__swsetup_r+0xd8>)
 8009014:	429c      	cmp	r4, r3
 8009016:	bf08      	it	eq
 8009018:	68ec      	ldreq	r4, [r5, #12]
 800901a:	e7e6      	b.n	8008fea <__swsetup_r+0x1e>
 800901c:	0758      	lsls	r0, r3, #29
 800901e:	d512      	bpl.n	8009046 <__swsetup_r+0x7a>
 8009020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009022:	b141      	cbz	r1, 8009036 <__swsetup_r+0x6a>
 8009024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009028:	4299      	cmp	r1, r3
 800902a:	d002      	beq.n	8009032 <__swsetup_r+0x66>
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff fcd5 	bl	80089dc <_free_r>
 8009032:	2300      	movs	r3, #0
 8009034:	6363      	str	r3, [r4, #52]	; 0x34
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	2300      	movs	r3, #0
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f043 0308 	orr.w	r3, r3, #8
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	b94b      	cbnz	r3, 8009066 <__swsetup_r+0x9a>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905c:	d003      	beq.n	8009066 <__swsetup_r+0x9a>
 800905e:	4621      	mov	r1, r4
 8009060:	4630      	mov	r0, r6
 8009062:	f000 fa09 	bl	8009478 <__smakebuf_r>
 8009066:	89a0      	ldrh	r0, [r4, #12]
 8009068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800906c:	f010 0301 	ands.w	r3, r0, #1
 8009070:	d00a      	beq.n	8009088 <__swsetup_r+0xbc>
 8009072:	2300      	movs	r3, #0
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	6963      	ldr	r3, [r4, #20]
 8009078:	425b      	negs	r3, r3
 800907a:	61a3      	str	r3, [r4, #24]
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b943      	cbnz	r3, 8009092 <__swsetup_r+0xc6>
 8009080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009084:	d1ba      	bne.n	8008ffc <__swsetup_r+0x30>
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	0781      	lsls	r1, r0, #30
 800908a:	bf58      	it	pl
 800908c:	6963      	ldrpl	r3, [r4, #20]
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	e7f4      	b.n	800907c <__swsetup_r+0xb0>
 8009092:	2000      	movs	r0, #0
 8009094:	e7f7      	b.n	8009086 <__swsetup_r+0xba>
 8009096:	bf00      	nop
 8009098:	2000000c 	.word	0x2000000c
 800909c:	08009afc 	.word	0x08009afc
 80090a0:	08009b1c 	.word	0x08009b1c
 80090a4:	08009adc 	.word	0x08009adc

080090a8 <abort>:
 80090a8:	b508      	push	{r3, lr}
 80090aa:	2006      	movs	r0, #6
 80090ac:	f000 fa4c 	bl	8009548 <raise>
 80090b0:	2001      	movs	r0, #1
 80090b2:	f7f9 f81e 	bl	80020f2 <_exit>
	...

080090b8 <__sflush_r>:
 80090b8:	898a      	ldrh	r2, [r1, #12]
 80090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	4605      	mov	r5, r0
 80090c0:	0710      	lsls	r0, r2, #28
 80090c2:	460c      	mov	r4, r1
 80090c4:	d458      	bmi.n	8009178 <__sflush_r+0xc0>
 80090c6:	684b      	ldr	r3, [r1, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dc05      	bgt.n	80090d8 <__sflush_r+0x20>
 80090cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dc02      	bgt.n	80090d8 <__sflush_r+0x20>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090da:	2e00      	cmp	r6, #0
 80090dc:	d0f9      	beq.n	80090d2 <__sflush_r+0x1a>
 80090de:	2300      	movs	r3, #0
 80090e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e4:	682f      	ldr	r7, [r5, #0]
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	d032      	beq.n	8009150 <__sflush_r+0x98>
 80090ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	075a      	lsls	r2, r3, #29
 80090f0:	d505      	bpl.n	80090fe <__sflush_r+0x46>
 80090f2:	6863      	ldr	r3, [r4, #4]
 80090f4:	1ac0      	subs	r0, r0, r3
 80090f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090f8:	b10b      	cbz	r3, 80090fe <__sflush_r+0x46>
 80090fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	2300      	movs	r3, #0
 8009100:	4602      	mov	r2, r0
 8009102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009104:	6a21      	ldr	r1, [r4, #32]
 8009106:	4628      	mov	r0, r5
 8009108:	47b0      	blx	r6
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	d106      	bne.n	800911e <__sflush_r+0x66>
 8009110:	6829      	ldr	r1, [r5, #0]
 8009112:	291d      	cmp	r1, #29
 8009114:	d82c      	bhi.n	8009170 <__sflush_r+0xb8>
 8009116:	4a2a      	ldr	r2, [pc, #168]	; (80091c0 <__sflush_r+0x108>)
 8009118:	40ca      	lsrs	r2, r1
 800911a:	07d6      	lsls	r6, r2, #31
 800911c:	d528      	bpl.n	8009170 <__sflush_r+0xb8>
 800911e:	2200      	movs	r2, #0
 8009120:	6062      	str	r2, [r4, #4]
 8009122:	04d9      	lsls	r1, r3, #19
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	d504      	bpl.n	8009134 <__sflush_r+0x7c>
 800912a:	1c42      	adds	r2, r0, #1
 800912c:	d101      	bne.n	8009132 <__sflush_r+0x7a>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b903      	cbnz	r3, 8009134 <__sflush_r+0x7c>
 8009132:	6560      	str	r0, [r4, #84]	; 0x54
 8009134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009136:	602f      	str	r7, [r5, #0]
 8009138:	2900      	cmp	r1, #0
 800913a:	d0ca      	beq.n	80090d2 <__sflush_r+0x1a>
 800913c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009140:	4299      	cmp	r1, r3
 8009142:	d002      	beq.n	800914a <__sflush_r+0x92>
 8009144:	4628      	mov	r0, r5
 8009146:	f7ff fc49 	bl	80089dc <_free_r>
 800914a:	2000      	movs	r0, #0
 800914c:	6360      	str	r0, [r4, #52]	; 0x34
 800914e:	e7c1      	b.n	80090d4 <__sflush_r+0x1c>
 8009150:	6a21      	ldr	r1, [r4, #32]
 8009152:	2301      	movs	r3, #1
 8009154:	4628      	mov	r0, r5
 8009156:	47b0      	blx	r6
 8009158:	1c41      	adds	r1, r0, #1
 800915a:	d1c7      	bne.n	80090ec <__sflush_r+0x34>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0c4      	beq.n	80090ec <__sflush_r+0x34>
 8009162:	2b1d      	cmp	r3, #29
 8009164:	d001      	beq.n	800916a <__sflush_r+0xb2>
 8009166:	2b16      	cmp	r3, #22
 8009168:	d101      	bne.n	800916e <__sflush_r+0xb6>
 800916a:	602f      	str	r7, [r5, #0]
 800916c:	e7b1      	b.n	80090d2 <__sflush_r+0x1a>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	e7ad      	b.n	80090d4 <__sflush_r+0x1c>
 8009178:	690f      	ldr	r7, [r1, #16]
 800917a:	2f00      	cmp	r7, #0
 800917c:	d0a9      	beq.n	80090d2 <__sflush_r+0x1a>
 800917e:	0793      	lsls	r3, r2, #30
 8009180:	680e      	ldr	r6, [r1, #0]
 8009182:	bf08      	it	eq
 8009184:	694b      	ldreq	r3, [r1, #20]
 8009186:	600f      	str	r7, [r1, #0]
 8009188:	bf18      	it	ne
 800918a:	2300      	movne	r3, #0
 800918c:	eba6 0807 	sub.w	r8, r6, r7
 8009190:	608b      	str	r3, [r1, #8]
 8009192:	f1b8 0f00 	cmp.w	r8, #0
 8009196:	dd9c      	ble.n	80090d2 <__sflush_r+0x1a>
 8009198:	6a21      	ldr	r1, [r4, #32]
 800919a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800919c:	4643      	mov	r3, r8
 800919e:	463a      	mov	r2, r7
 80091a0:	4628      	mov	r0, r5
 80091a2:	47b0      	blx	r6
 80091a4:	2800      	cmp	r0, #0
 80091a6:	dc06      	bgt.n	80091b6 <__sflush_r+0xfe>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	e78e      	b.n	80090d4 <__sflush_r+0x1c>
 80091b6:	4407      	add	r7, r0
 80091b8:	eba8 0800 	sub.w	r8, r8, r0
 80091bc:	e7e9      	b.n	8009192 <__sflush_r+0xda>
 80091be:	bf00      	nop
 80091c0:	20400001 	.word	0x20400001

080091c4 <_fflush_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	690b      	ldr	r3, [r1, #16]
 80091c8:	4605      	mov	r5, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b913      	cbnz	r3, 80091d4 <_fflush_r+0x10>
 80091ce:	2500      	movs	r5, #0
 80091d0:	4628      	mov	r0, r5
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	b118      	cbz	r0, 80091de <_fflush_r+0x1a>
 80091d6:	6983      	ldr	r3, [r0, #24]
 80091d8:	b90b      	cbnz	r3, 80091de <_fflush_r+0x1a>
 80091da:	f000 f887 	bl	80092ec <__sinit>
 80091de:	4b14      	ldr	r3, [pc, #80]	; (8009230 <_fflush_r+0x6c>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	d11b      	bne.n	800921c <_fflush_r+0x58>
 80091e4:	686c      	ldr	r4, [r5, #4]
 80091e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0ef      	beq.n	80091ce <_fflush_r+0xa>
 80091ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091f0:	07d0      	lsls	r0, r2, #31
 80091f2:	d404      	bmi.n	80091fe <_fflush_r+0x3a>
 80091f4:	0599      	lsls	r1, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_fflush_r+0x3a>
 80091f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091fa:	f000 f915 	bl	8009428 <__retarget_lock_acquire_recursive>
 80091fe:	4628      	mov	r0, r5
 8009200:	4621      	mov	r1, r4
 8009202:	f7ff ff59 	bl	80090b8 <__sflush_r>
 8009206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009208:	07da      	lsls	r2, r3, #31
 800920a:	4605      	mov	r5, r0
 800920c:	d4e0      	bmi.n	80091d0 <_fflush_r+0xc>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	059b      	lsls	r3, r3, #22
 8009212:	d4dd      	bmi.n	80091d0 <_fflush_r+0xc>
 8009214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009216:	f000 f908 	bl	800942a <__retarget_lock_release_recursive>
 800921a:	e7d9      	b.n	80091d0 <_fflush_r+0xc>
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <_fflush_r+0x70>)
 800921e:	429c      	cmp	r4, r3
 8009220:	d101      	bne.n	8009226 <_fflush_r+0x62>
 8009222:	68ac      	ldr	r4, [r5, #8]
 8009224:	e7df      	b.n	80091e6 <_fflush_r+0x22>
 8009226:	4b04      	ldr	r3, [pc, #16]	; (8009238 <_fflush_r+0x74>)
 8009228:	429c      	cmp	r4, r3
 800922a:	bf08      	it	eq
 800922c:	68ec      	ldreq	r4, [r5, #12]
 800922e:	e7da      	b.n	80091e6 <_fflush_r+0x22>
 8009230:	08009afc 	.word	0x08009afc
 8009234:	08009b1c 	.word	0x08009b1c
 8009238:	08009adc 	.word	0x08009adc

0800923c <std>:
 800923c:	2300      	movs	r3, #0
 800923e:	b510      	push	{r4, lr}
 8009240:	4604      	mov	r4, r0
 8009242:	e9c0 3300 	strd	r3, r3, [r0]
 8009246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800924a:	6083      	str	r3, [r0, #8]
 800924c:	8181      	strh	r1, [r0, #12]
 800924e:	6643      	str	r3, [r0, #100]	; 0x64
 8009250:	81c2      	strh	r2, [r0, #14]
 8009252:	6183      	str	r3, [r0, #24]
 8009254:	4619      	mov	r1, r3
 8009256:	2208      	movs	r2, #8
 8009258:	305c      	adds	r0, #92	; 0x5c
 800925a:	f7fd fd1d 	bl	8006c98 <memset>
 800925e:	4b05      	ldr	r3, [pc, #20]	; (8009274 <std+0x38>)
 8009260:	6263      	str	r3, [r4, #36]	; 0x24
 8009262:	4b05      	ldr	r3, [pc, #20]	; (8009278 <std+0x3c>)
 8009264:	62a3      	str	r3, [r4, #40]	; 0x28
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <std+0x40>)
 8009268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <std+0x44>)
 800926c:	6224      	str	r4, [r4, #32]
 800926e:	6323      	str	r3, [r4, #48]	; 0x30
 8009270:	bd10      	pop	{r4, pc}
 8009272:	bf00      	nop
 8009274:	08009581 	.word	0x08009581
 8009278:	080095a3 	.word	0x080095a3
 800927c:	080095db 	.word	0x080095db
 8009280:	080095ff 	.word	0x080095ff

08009284 <_cleanup_r>:
 8009284:	4901      	ldr	r1, [pc, #4]	; (800928c <_cleanup_r+0x8>)
 8009286:	f000 b8af 	b.w	80093e8 <_fwalk_reent>
 800928a:	bf00      	nop
 800928c:	080091c5 	.word	0x080091c5

08009290 <__sfmoreglue>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	2268      	movs	r2, #104	; 0x68
 8009294:	1e4d      	subs	r5, r1, #1
 8009296:	4355      	muls	r5, r2
 8009298:	460e      	mov	r6, r1
 800929a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800929e:	f7ff fc09 	bl	8008ab4 <_malloc_r>
 80092a2:	4604      	mov	r4, r0
 80092a4:	b140      	cbz	r0, 80092b8 <__sfmoreglue+0x28>
 80092a6:	2100      	movs	r1, #0
 80092a8:	e9c0 1600 	strd	r1, r6, [r0]
 80092ac:	300c      	adds	r0, #12
 80092ae:	60a0      	str	r0, [r4, #8]
 80092b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092b4:	f7fd fcf0 	bl	8006c98 <memset>
 80092b8:	4620      	mov	r0, r4
 80092ba:	bd70      	pop	{r4, r5, r6, pc}

080092bc <__sfp_lock_acquire>:
 80092bc:	4801      	ldr	r0, [pc, #4]	; (80092c4 <__sfp_lock_acquire+0x8>)
 80092be:	f000 b8b3 	b.w	8009428 <__retarget_lock_acquire_recursive>
 80092c2:	bf00      	nop
 80092c4:	200006d5 	.word	0x200006d5

080092c8 <__sfp_lock_release>:
 80092c8:	4801      	ldr	r0, [pc, #4]	; (80092d0 <__sfp_lock_release+0x8>)
 80092ca:	f000 b8ae 	b.w	800942a <__retarget_lock_release_recursive>
 80092ce:	bf00      	nop
 80092d0:	200006d5 	.word	0x200006d5

080092d4 <__sinit_lock_acquire>:
 80092d4:	4801      	ldr	r0, [pc, #4]	; (80092dc <__sinit_lock_acquire+0x8>)
 80092d6:	f000 b8a7 	b.w	8009428 <__retarget_lock_acquire_recursive>
 80092da:	bf00      	nop
 80092dc:	200006d6 	.word	0x200006d6

080092e0 <__sinit_lock_release>:
 80092e0:	4801      	ldr	r0, [pc, #4]	; (80092e8 <__sinit_lock_release+0x8>)
 80092e2:	f000 b8a2 	b.w	800942a <__retarget_lock_release_recursive>
 80092e6:	bf00      	nop
 80092e8:	200006d6 	.word	0x200006d6

080092ec <__sinit>:
 80092ec:	b510      	push	{r4, lr}
 80092ee:	4604      	mov	r4, r0
 80092f0:	f7ff fff0 	bl	80092d4 <__sinit_lock_acquire>
 80092f4:	69a3      	ldr	r3, [r4, #24]
 80092f6:	b11b      	cbz	r3, 8009300 <__sinit+0x14>
 80092f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092fc:	f7ff bff0 	b.w	80092e0 <__sinit_lock_release>
 8009300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009304:	6523      	str	r3, [r4, #80]	; 0x50
 8009306:	4b13      	ldr	r3, [pc, #76]	; (8009354 <__sinit+0x68>)
 8009308:	4a13      	ldr	r2, [pc, #76]	; (8009358 <__sinit+0x6c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	62a2      	str	r2, [r4, #40]	; 0x28
 800930e:	42a3      	cmp	r3, r4
 8009310:	bf04      	itt	eq
 8009312:	2301      	moveq	r3, #1
 8009314:	61a3      	streq	r3, [r4, #24]
 8009316:	4620      	mov	r0, r4
 8009318:	f000 f820 	bl	800935c <__sfp>
 800931c:	6060      	str	r0, [r4, #4]
 800931e:	4620      	mov	r0, r4
 8009320:	f000 f81c 	bl	800935c <__sfp>
 8009324:	60a0      	str	r0, [r4, #8]
 8009326:	4620      	mov	r0, r4
 8009328:	f000 f818 	bl	800935c <__sfp>
 800932c:	2200      	movs	r2, #0
 800932e:	60e0      	str	r0, [r4, #12]
 8009330:	2104      	movs	r1, #4
 8009332:	6860      	ldr	r0, [r4, #4]
 8009334:	f7ff ff82 	bl	800923c <std>
 8009338:	68a0      	ldr	r0, [r4, #8]
 800933a:	2201      	movs	r2, #1
 800933c:	2109      	movs	r1, #9
 800933e:	f7ff ff7d 	bl	800923c <std>
 8009342:	68e0      	ldr	r0, [r4, #12]
 8009344:	2202      	movs	r2, #2
 8009346:	2112      	movs	r1, #18
 8009348:	f7ff ff78 	bl	800923c <std>
 800934c:	2301      	movs	r3, #1
 800934e:	61a3      	str	r3, [r4, #24]
 8009350:	e7d2      	b.n	80092f8 <__sinit+0xc>
 8009352:	bf00      	nop
 8009354:	08009760 	.word	0x08009760
 8009358:	08009285 	.word	0x08009285

0800935c <__sfp>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	4607      	mov	r7, r0
 8009360:	f7ff ffac 	bl	80092bc <__sfp_lock_acquire>
 8009364:	4b1e      	ldr	r3, [pc, #120]	; (80093e0 <__sfp+0x84>)
 8009366:	681e      	ldr	r6, [r3, #0]
 8009368:	69b3      	ldr	r3, [r6, #24]
 800936a:	b913      	cbnz	r3, 8009372 <__sfp+0x16>
 800936c:	4630      	mov	r0, r6
 800936e:	f7ff ffbd 	bl	80092ec <__sinit>
 8009372:	3648      	adds	r6, #72	; 0x48
 8009374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009378:	3b01      	subs	r3, #1
 800937a:	d503      	bpl.n	8009384 <__sfp+0x28>
 800937c:	6833      	ldr	r3, [r6, #0]
 800937e:	b30b      	cbz	r3, 80093c4 <__sfp+0x68>
 8009380:	6836      	ldr	r6, [r6, #0]
 8009382:	e7f7      	b.n	8009374 <__sfp+0x18>
 8009384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009388:	b9d5      	cbnz	r5, 80093c0 <__sfp+0x64>
 800938a:	4b16      	ldr	r3, [pc, #88]	; (80093e4 <__sfp+0x88>)
 800938c:	60e3      	str	r3, [r4, #12]
 800938e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009392:	6665      	str	r5, [r4, #100]	; 0x64
 8009394:	f000 f847 	bl	8009426 <__retarget_lock_init_recursive>
 8009398:	f7ff ff96 	bl	80092c8 <__sfp_lock_release>
 800939c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093a4:	6025      	str	r5, [r4, #0]
 80093a6:	61a5      	str	r5, [r4, #24]
 80093a8:	2208      	movs	r2, #8
 80093aa:	4629      	mov	r1, r5
 80093ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093b0:	f7fd fc72 	bl	8006c98 <memset>
 80093b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093bc:	4620      	mov	r0, r4
 80093be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c0:	3468      	adds	r4, #104	; 0x68
 80093c2:	e7d9      	b.n	8009378 <__sfp+0x1c>
 80093c4:	2104      	movs	r1, #4
 80093c6:	4638      	mov	r0, r7
 80093c8:	f7ff ff62 	bl	8009290 <__sfmoreglue>
 80093cc:	4604      	mov	r4, r0
 80093ce:	6030      	str	r0, [r6, #0]
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d1d5      	bne.n	8009380 <__sfp+0x24>
 80093d4:	f7ff ff78 	bl	80092c8 <__sfp_lock_release>
 80093d8:	230c      	movs	r3, #12
 80093da:	603b      	str	r3, [r7, #0]
 80093dc:	e7ee      	b.n	80093bc <__sfp+0x60>
 80093de:	bf00      	nop
 80093e0:	08009760 	.word	0x08009760
 80093e4:	ffff0001 	.word	0xffff0001

080093e8 <_fwalk_reent>:
 80093e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ec:	4606      	mov	r6, r0
 80093ee:	4688      	mov	r8, r1
 80093f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093f4:	2700      	movs	r7, #0
 80093f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093fa:	f1b9 0901 	subs.w	r9, r9, #1
 80093fe:	d505      	bpl.n	800940c <_fwalk_reent+0x24>
 8009400:	6824      	ldr	r4, [r4, #0]
 8009402:	2c00      	cmp	r4, #0
 8009404:	d1f7      	bne.n	80093f6 <_fwalk_reent+0xe>
 8009406:	4638      	mov	r0, r7
 8009408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940c:	89ab      	ldrh	r3, [r5, #12]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d907      	bls.n	8009422 <_fwalk_reent+0x3a>
 8009412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009416:	3301      	adds	r3, #1
 8009418:	d003      	beq.n	8009422 <_fwalk_reent+0x3a>
 800941a:	4629      	mov	r1, r5
 800941c:	4630      	mov	r0, r6
 800941e:	47c0      	blx	r8
 8009420:	4307      	orrs	r7, r0
 8009422:	3568      	adds	r5, #104	; 0x68
 8009424:	e7e9      	b.n	80093fa <_fwalk_reent+0x12>

08009426 <__retarget_lock_init_recursive>:
 8009426:	4770      	bx	lr

08009428 <__retarget_lock_acquire_recursive>:
 8009428:	4770      	bx	lr

0800942a <__retarget_lock_release_recursive>:
 800942a:	4770      	bx	lr

0800942c <__swhatbuf_r>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	460e      	mov	r6, r1
 8009430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009434:	2900      	cmp	r1, #0
 8009436:	b096      	sub	sp, #88	; 0x58
 8009438:	4614      	mov	r4, r2
 800943a:	461d      	mov	r5, r3
 800943c:	da08      	bge.n	8009450 <__swhatbuf_r+0x24>
 800943e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	602a      	str	r2, [r5, #0]
 8009446:	061a      	lsls	r2, r3, #24
 8009448:	d410      	bmi.n	800946c <__swhatbuf_r+0x40>
 800944a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800944e:	e00e      	b.n	800946e <__swhatbuf_r+0x42>
 8009450:	466a      	mov	r2, sp
 8009452:	f000 f8fb 	bl	800964c <_fstat_r>
 8009456:	2800      	cmp	r0, #0
 8009458:	dbf1      	blt.n	800943e <__swhatbuf_r+0x12>
 800945a:	9a01      	ldr	r2, [sp, #4]
 800945c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009460:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009464:	425a      	negs	r2, r3
 8009466:	415a      	adcs	r2, r3
 8009468:	602a      	str	r2, [r5, #0]
 800946a:	e7ee      	b.n	800944a <__swhatbuf_r+0x1e>
 800946c:	2340      	movs	r3, #64	; 0x40
 800946e:	2000      	movs	r0, #0
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	b016      	add	sp, #88	; 0x58
 8009474:	bd70      	pop	{r4, r5, r6, pc}
	...

08009478 <__smakebuf_r>:
 8009478:	898b      	ldrh	r3, [r1, #12]
 800947a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800947c:	079d      	lsls	r5, r3, #30
 800947e:	4606      	mov	r6, r0
 8009480:	460c      	mov	r4, r1
 8009482:	d507      	bpl.n	8009494 <__smakebuf_r+0x1c>
 8009484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	2301      	movs	r3, #1
 800948e:	6163      	str	r3, [r4, #20]
 8009490:	b002      	add	sp, #8
 8009492:	bd70      	pop	{r4, r5, r6, pc}
 8009494:	ab01      	add	r3, sp, #4
 8009496:	466a      	mov	r2, sp
 8009498:	f7ff ffc8 	bl	800942c <__swhatbuf_r>
 800949c:	9900      	ldr	r1, [sp, #0]
 800949e:	4605      	mov	r5, r0
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7ff fb07 	bl	8008ab4 <_malloc_r>
 80094a6:	b948      	cbnz	r0, 80094bc <__smakebuf_r+0x44>
 80094a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ac:	059a      	lsls	r2, r3, #22
 80094ae:	d4ef      	bmi.n	8009490 <__smakebuf_r+0x18>
 80094b0:	f023 0303 	bic.w	r3, r3, #3
 80094b4:	f043 0302 	orr.w	r3, r3, #2
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	e7e3      	b.n	8009484 <__smakebuf_r+0xc>
 80094bc:	4b0d      	ldr	r3, [pc, #52]	; (80094f4 <__smakebuf_r+0x7c>)
 80094be:	62b3      	str	r3, [r6, #40]	; 0x28
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	6020      	str	r0, [r4, #0]
 80094c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c8:	81a3      	strh	r3, [r4, #12]
 80094ca:	9b00      	ldr	r3, [sp, #0]
 80094cc:	6163      	str	r3, [r4, #20]
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	6120      	str	r0, [r4, #16]
 80094d2:	b15b      	cbz	r3, 80094ec <__smakebuf_r+0x74>
 80094d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d8:	4630      	mov	r0, r6
 80094da:	f000 f8c9 	bl	8009670 <_isatty_r>
 80094de:	b128      	cbz	r0, 80094ec <__smakebuf_r+0x74>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f023 0303 	bic.w	r3, r3, #3
 80094e6:	f043 0301 	orr.w	r3, r3, #1
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	89a0      	ldrh	r0, [r4, #12]
 80094ee:	4305      	orrs	r5, r0
 80094f0:	81a5      	strh	r5, [r4, #12]
 80094f2:	e7cd      	b.n	8009490 <__smakebuf_r+0x18>
 80094f4:	08009285 	.word	0x08009285

080094f8 <_raise_r>:
 80094f8:	291f      	cmp	r1, #31
 80094fa:	b538      	push	{r3, r4, r5, lr}
 80094fc:	4604      	mov	r4, r0
 80094fe:	460d      	mov	r5, r1
 8009500:	d904      	bls.n	800950c <_raise_r+0x14>
 8009502:	2316      	movs	r3, #22
 8009504:	6003      	str	r3, [r0, #0]
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800950e:	b112      	cbz	r2, 8009516 <_raise_r+0x1e>
 8009510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009514:	b94b      	cbnz	r3, 800952a <_raise_r+0x32>
 8009516:	4620      	mov	r0, r4
 8009518:	f000 f830 	bl	800957c <_getpid_r>
 800951c:	462a      	mov	r2, r5
 800951e:	4601      	mov	r1, r0
 8009520:	4620      	mov	r0, r4
 8009522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009526:	f000 b817 	b.w	8009558 <_kill_r>
 800952a:	2b01      	cmp	r3, #1
 800952c:	d00a      	beq.n	8009544 <_raise_r+0x4c>
 800952e:	1c59      	adds	r1, r3, #1
 8009530:	d103      	bne.n	800953a <_raise_r+0x42>
 8009532:	2316      	movs	r3, #22
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	2001      	movs	r0, #1
 8009538:	e7e7      	b.n	800950a <_raise_r+0x12>
 800953a:	2400      	movs	r4, #0
 800953c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009540:	4628      	mov	r0, r5
 8009542:	4798      	blx	r3
 8009544:	2000      	movs	r0, #0
 8009546:	e7e0      	b.n	800950a <_raise_r+0x12>

08009548 <raise>:
 8009548:	4b02      	ldr	r3, [pc, #8]	; (8009554 <raise+0xc>)
 800954a:	4601      	mov	r1, r0
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	f7ff bfd3 	b.w	80094f8 <_raise_r>
 8009552:	bf00      	nop
 8009554:	2000000c 	.word	0x2000000c

08009558 <_kill_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_kill_r+0x20>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	4611      	mov	r1, r2
 8009564:	602b      	str	r3, [r5, #0]
 8009566:	f7f8 fdb4 	bl	80020d2 <_kill>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d102      	bne.n	8009574 <_kill_r+0x1c>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	b103      	cbz	r3, 8009574 <_kill_r+0x1c>
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	bf00      	nop
 8009578:	200006d0 	.word	0x200006d0

0800957c <_getpid_r>:
 800957c:	f7f8 bda1 	b.w	80020c2 <_getpid>

08009580 <__sread>:
 8009580:	b510      	push	{r4, lr}
 8009582:	460c      	mov	r4, r1
 8009584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009588:	f000 f894 	bl	80096b4 <_read_r>
 800958c:	2800      	cmp	r0, #0
 800958e:	bfab      	itete	ge
 8009590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009592:	89a3      	ldrhlt	r3, [r4, #12]
 8009594:	181b      	addge	r3, r3, r0
 8009596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800959a:	bfac      	ite	ge
 800959c:	6563      	strge	r3, [r4, #84]	; 0x54
 800959e:	81a3      	strhlt	r3, [r4, #12]
 80095a0:	bd10      	pop	{r4, pc}

080095a2 <__swrite>:
 80095a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a6:	461f      	mov	r7, r3
 80095a8:	898b      	ldrh	r3, [r1, #12]
 80095aa:	05db      	lsls	r3, r3, #23
 80095ac:	4605      	mov	r5, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	4616      	mov	r6, r2
 80095b2:	d505      	bpl.n	80095c0 <__swrite+0x1e>
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	2302      	movs	r3, #2
 80095ba:	2200      	movs	r2, #0
 80095bc:	f000 f868 	bl	8009690 <_lseek_r>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	4632      	mov	r2, r6
 80095ce:	463b      	mov	r3, r7
 80095d0:	4628      	mov	r0, r5
 80095d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	f000 b817 	b.w	8009608 <_write_r>

080095da <__sseek>:
 80095da:	b510      	push	{r4, lr}
 80095dc:	460c      	mov	r4, r1
 80095de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e2:	f000 f855 	bl	8009690 <_lseek_r>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	bf15      	itete	ne
 80095ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80095ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095f6:	81a3      	strheq	r3, [r4, #12]
 80095f8:	bf18      	it	ne
 80095fa:	81a3      	strhne	r3, [r4, #12]
 80095fc:	bd10      	pop	{r4, pc}

080095fe <__sclose>:
 80095fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009602:	f000 b813 	b.w	800962c <_close_r>
	...

08009608 <_write_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d07      	ldr	r5, [pc, #28]	; (8009628 <_write_r+0x20>)
 800960c:	4604      	mov	r4, r0
 800960e:	4608      	mov	r0, r1
 8009610:	4611      	mov	r1, r2
 8009612:	2200      	movs	r2, #0
 8009614:	602a      	str	r2, [r5, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f7f8 fd92 	bl	8002140 <_write>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_write_r+0x1e>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_write_r+0x1e>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	200006d0 	.word	0x200006d0

0800962c <_close_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d06      	ldr	r5, [pc, #24]	; (8009648 <_close_r+0x1c>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	f7f8 fd9e 	bl	8002178 <_close>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_close_r+0x1a>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_close_r+0x1a>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	200006d0 	.word	0x200006d0

0800964c <_fstat_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	; (800966c <_fstat_r+0x20>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	4611      	mov	r1, r2
 8009658:	602b      	str	r3, [r5, #0]
 800965a:	f7f8 fd99 	bl	8002190 <_fstat>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d102      	bne.n	8009668 <_fstat_r+0x1c>
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	b103      	cbz	r3, 8009668 <_fstat_r+0x1c>
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	bd38      	pop	{r3, r4, r5, pc}
 800966a:	bf00      	nop
 800966c:	200006d0 	.word	0x200006d0

08009670 <_isatty_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d06      	ldr	r5, [pc, #24]	; (800968c <_isatty_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	f7f8 fd98 	bl	80021b0 <_isatty>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_isatty_r+0x1a>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_isatty_r+0x1a>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	200006d0 	.word	0x200006d0

08009690 <_lseek_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	; (80096b0 <_lseek_r+0x20>)
 8009694:	4604      	mov	r4, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f8 fd91 	bl	80021c6 <_lseek>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_lseek_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_lseek_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	200006d0 	.word	0x200006d0

080096b4 <_read_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d07      	ldr	r5, [pc, #28]	; (80096d4 <_read_r+0x20>)
 80096b8:	4604      	mov	r4, r0
 80096ba:	4608      	mov	r0, r1
 80096bc:	4611      	mov	r1, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7f8 fd1f 	bl	8002106 <_read>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_read_r+0x1e>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_read_r+0x1e>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	200006d0 	.word	0x200006d0

080096d8 <_init>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr

080096e4 <_fini>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr
