
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08004cb8  08004cb8  00014cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080050fc  080050fc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050fc  080050fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  080052e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080052e0  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000659d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00004c16  00000000  00000000  000267a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000113b  00000000  00000000  0002b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  0002c500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fcde3  00000000  00000000  0002cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000578  00000000  00000000  00129928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028326  00000000  00000000  00129ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001521c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  00152218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004ca0 	.word	0x08004ca0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08004ca0 	.word	0x08004ca0

08000200 <kalmanFilter>:
    .global kalmanFilter

kalmanFilter:
	# floats are each 4 bytes, the struct is located at R0 and we want each value q, r, x p which are found at each 4 bytes

    VLDR S1, [R0, #0]		// q
 8000200:	edd0 0a00 	vldr	s1, [r0]
    VLDR S2, [R0, #4]		// r
 8000204:	ed90 1a01 	vldr	s2, [r0, #4]
    VLDR S3, [R0, #8]		// x
 8000208:	edd0 1a02 	vldr	s3, [r0, #8]
    VLDR S4, [R0, #12]		// p
 800020c:	ed90 2a03 	vldr	s4, [r0, #12]
    VLDR S5, [R0, #16]		// k
 8000210:	edd0 2a04 	vldr	s5, [r0, #16]

    // p = p + q
	VADD.F32 S4, S4, S1
 8000214:	ee32 2a20 	vadd.f32	s4, s4, s1

    // k = p / (p + r)
	VADD.F32 S6, S4, S2
 8000218:	ee32 3a01 	vadd.f32	s6, s4, s2
	VDIV.F32 S5, S4, S6
 800021c:	eec2 2a03 	vdiv.f32	s5, s4, s6

    // x = x + k * (measurement - x)
	VSUB.F32 S6, S0, S3
 8000220:	ee30 3a61 	vsub.f32	s6, s0, s3
	VMUL.F32 S6, S5, S6
 8000224:	ee22 3a83 	vmul.f32	s6, s5, s6
	VADD.F32 S3, S3, S6
 8000228:	ee71 1a83 	vadd.f32	s3, s3, s6

    // p = (1 - k) * p
    VMOV.F32 S7, #1.0
 800022c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    VSUB.F32 S6, S7, S5
 8000230:	ee33 3ae2 	vsub.f32	s6, s7, s5
    VMUL.F32 S4, S6, S4
 8000234:	ee23 2a02 	vmul.f32	s4, s6, s4

    // Loading it back into memor
    VSTR S1, [R0, #0]		// q
 8000238:	edc0 0a00 	vstr	s1, [r0]
    VSTR S2, [R0, #4]		// r
 800023c:	ed80 1a01 	vstr	s2, [r0, #4]
    VSTR S3, [R0, #8]		// x
 8000240:	edc0 1a02 	vstr	s3, [r0, #8]
    VSTR S4, [R0, #12]		// p
 8000244:	ed80 2a03 	vstr	s4, [r0, #12]
    VSTR S5, [R0, #16]		// k
 8000248:	edc0 2a04 	vstr	s5, [r0, #16]

    BX LR                   // Return from subroutine
 800024c:	4770      	bx	lr

0800024e <strlen>:
 800024e:	4603      	mov	r3, r0
 8000250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000254:	2a00      	cmp	r2, #0
 8000256:	d1fb      	bne.n	8000250 <strlen+0x2>
 8000258:	1a18      	subs	r0, r3, r0
 800025a:	3801      	subs	r0, #1
 800025c:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__gedf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa0:	e006      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__ledf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpdf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac6:	d01b      	beq.n	8000b00 <__cmpdf2+0x54>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ace:	bf0c      	ite	eq
 8000ad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad4:	ea91 0f03 	teqne	r1, r3
 8000ad8:	bf02      	ittt	eq
 8000ada:	ea90 0f02 	teqeq	r0, r2
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	4770      	bxeq	lr
 8000ae2:	f110 0f00 	cmn.w	r0, #0
 8000ae6:	ea91 0f03 	teq	r1, r3
 8000aea:	bf58      	it	pl
 8000aec:	4299      	cmppl	r1, r3
 8000aee:	bf08      	it	eq
 8000af0:	4290      	cmpeq	r0, r2
 8000af2:	bf2c      	ite	cs
 8000af4:	17d8      	asrcs	r0, r3, #31
 8000af6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afa:	f040 0001 	orr.w	r0, r0, #1
 8000afe:	4770      	bx	lr
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__cmpdf2+0x64>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d107      	bne.n	8000b20 <__cmpdf2+0x74>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d1d6      	bne.n	8000ac8 <__cmpdf2+0x1c>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d0d3      	beq.n	8000ac8 <__cmpdf2+0x1c>
 8000b20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdrcmple>:
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4619      	mov	r1, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	e000      	b.n	8000b38 <__aeabi_cdcmpeq>
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdcmpeq>:
 8000b38:	b501      	push	{r0, lr}
 8000b3a:	f7ff ffb7 	bl	8000aac <__cmpdf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	bf48      	it	mi
 8000b42:	f110 0f00 	cmnmi.w	r0, #0
 8000b46:	bd01      	pop	{r0, pc}

08000b48 <__aeabi_dcmpeq>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff fff4 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmplt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffea 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmple>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffe0 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b78:	bf94      	ite	ls
 8000b7a:	2001      	movls	r0, #1
 8000b7c:	2000      	movhi	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpge>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffce 	bl	8000b28 <__aeabi_cdrcmple>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmpgt>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffc4 	bl	8000b28 <__aeabi_cdrcmple>
 8000ba0:	bf34      	ite	cc
 8000ba2:	2001      	movcc	r0, #1
 8000ba4:	2000      	movcs	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpun>:
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x10>
 8000bb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x20>
 8000bc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0001 	mov.w	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2iz>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d215      	bcs.n	8000c0e <__aeabi_d2iz+0x36>
 8000be2:	d511      	bpl.n	8000c08 <__aeabi_d2iz+0x30>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d912      	bls.n	8000c14 <__aeabi_d2iz+0x3c>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d105      	bne.n	8000c20 <__aeabi_d2iz+0x48>
 8000c14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	bf08      	it	eq
 8000c1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	kalman_state kstate = {
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <main+0x68>)
 8000c30:	1d3c      	adds	r4, r7, #4
 8000c32:	461d      	mov	r5, r3
 8000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c38:	682b      	ldr	r3, [r5, #0]
 8000c3a:	6023      	str	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 f9eb 	bl	8001016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f82a 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f000 f87a 	bl	8000d3c <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (int i = 0; i < 5; i++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	e01b      	b.n	8000c86 <main+0x5e>
		  float measurement = (float) i;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	ee07 3a90 	vmov	s15, r3
 8000c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c58:	edc7 7a06 	vstr	s15, [r7, #24]
			kalmanFilter(&kstate, measurement);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff facc 	bl	8000200 <kalmanFilter>
		  printf("Updated estimate: %f\n", kstate.x);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fcac 	bl	80005c8 <__aeabi_f2d>
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <main+0x6c>)
 8000c76:	f001 ff4d 	bl	8002b14 <iprintf>
		  HAL_Delay(100);
 8000c7a:	2064      	movs	r0, #100	; 0x64
 8000c7c:	f000 fa40 	bl	8001100 <HAL_Delay>
	  for (int i = 0; i < 5; i++){
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	3301      	adds	r3, #1
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	dde0      	ble.n	8000c4e <main+0x26>
 8000c8c:	e7dc      	b.n	8000c48 <main+0x20>
 8000c8e:	bf00      	nop
 8000c90:	08004cd0 	.word	0x08004cd0
 8000c94:	08004cb8 	.word	0x08004cb8

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b096      	sub	sp, #88	; 0x58
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2244      	movs	r2, #68	; 0x44
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fac2 	bl	8002230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 fb4a 	bl	8001354 <HAL_PWREx_ControlVoltageScaling>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cc6:	f000 f851 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cd6:	2360      	movs	r3, #96	; 0x60
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ce6:	233c      	movs	r3, #60	; 0x3c
 8000ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fbce 	bl	800149c <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d06:	f000 f831 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2105      	movs	r1, #5
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 ffd4 	bl	8001cd0 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d2e:	f000 f81d 	bl	8000d6c <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3758      	adds	r7, #88	; 0x58
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_GPIO_Init+0x2c>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <MX_GPIO_Init+0x2c>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_GPIO_Init+0x2c>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_MspInit+0x44>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6593      	str	r3, [r2, #88]	; 0x58
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f958 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
	return 1;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_kill>:

int _kill(int pid, int sig)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e2e:	f001 f9d5 	bl	80021dc <__errno>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2216      	movs	r2, #22
 8000e36:	601a      	str	r2, [r3, #0]
	return -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_exit>:

void _exit (int status)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e56:	e7fe      	b.n	8000e56 <_exit+0x12>

08000e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00a      	b.n	8000e80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4601      	mov	r1, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf0      	blt.n	8000e6a <_read+0x12>
	}

return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e009      	b.n	8000eb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf1      	blt.n	8000ea4 <_write+0x12>
	}
	return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_isatty>:

int _isatty(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return 1;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f001 f93a 	bl	80021dc <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200a0000 	.word	0x200a0000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	200001f8 	.word	0x200001f8
 8000f9c:	20000210 	.word	0x20000210

08000fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <LoopForever+0xe>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	; (8001010 <LoopForever+0x16>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f001 f8f9 	bl	80021e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff6:	f7ff fe17 	bl	8000c28 <main>

08000ffa <LoopForever>:

LoopForever:
    b LoopForever
 8000ffa:	e7fe      	b.n	8000ffa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001008:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 800100c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001010:	20000210 	.word	0x20000210

08001014 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_IRQHandler>

08001016 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f943 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f80e 	bl	8001048 <HAL_InitTick>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	e001      	b.n	800103c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001038:	f7ff fe9e 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103c:	79fb      	ldrb	r3, [r7, #7]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_InitTick+0x70>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_InitTick+0x6c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f941 	bl	80012fa <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10f      	bne.n	800109e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d809      	bhi.n	8001098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f919 	bl	80012c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_InitTick+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e007      	b.n	80010a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e004      	b.n	80010a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e001      	b.n	80010a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	200001fc 	.word	0x200001fc

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200001fc 	.word	0x200001fc

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff47 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff5c 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffb0 	bl	8001268 <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_PWREx_GetVoltageRange+0x3c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001324:	d102      	bne.n	800132c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132a:	e00b      	b.n	8001344 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_PWREx_GetVoltageRange+0x3c>)
 800132e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800133a:	d102      	bne.n	8001342 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800133c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001340:	e000      	b.n	8001344 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001342:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40007000 	.word	0x40007000

08001354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d141      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800136a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136e:	d131      	bne.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001370:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001376:	4a46      	ldr	r2, [pc, #280]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800137c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001388:	4a41      	ldr	r2, [pc, #260]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001390:	4b40      	ldr	r3, [pc, #256]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2232      	movs	r2, #50	; 0x32
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a6:	e002      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d102      	bne.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f2      	bne.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013c2:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ce:	d158      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e057      	b.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013e4:	e04d      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ec:	d141      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fa:	d131      	bne.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001402:	4a23      	ldr	r2, [pc, #140]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001414:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2232      	movs	r2, #50	; 0x32
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001432:	e002      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3b01      	subs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001446:	d102      	bne.n	800144e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f2      	bne.n	8001434 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d112      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e011      	b.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001470:	e007      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001480:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40007000 	.word	0x40007000
 8001494:	20000000 	.word	0x20000000
 8001498:	431bde83 	.word	0x431bde83

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f000 bc08 	b.w	8001cc0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b0:	4b96      	ldr	r3, [pc, #600]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ba:	4b94      	ldr	r3, [pc, #592]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80e4 	beq.w	800169a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4c>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	f040 808b 	bne.w	80015f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	f040 8087 	bne.w	80015f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e8:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x64>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e3df      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_RCC_OscConfig+0x7e>
 8001510:	4b7e      	ldr	r3, [pc, #504]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001518:	e005      	b.n	8001526 <HAL_RCC_OscConfig+0x8a>
 800151a:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800151c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001526:	4293      	cmp	r3, r2
 8001528:	d223      	bcs.n	8001572 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fd94 	bl	800205c <RCC_SetFlashLatencyFromMSIRange>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e3c0      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a72      	ldr	r2, [pc, #456]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b70      	ldr	r3, [pc, #448]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	496d      	ldr	r1, [pc, #436]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	4968      	ldr	r1, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e025      	b.n	80015be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001572:	4b66      	ldr	r3, [pc, #408]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a65      	ldr	r2, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4960      	ldr	r1, [pc, #384]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001590:	4b5e      	ldr	r3, [pc, #376]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	495b      	ldr	r1, [pc, #364]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fd54 	bl	800205c <RCC_SetFlashLatencyFromMSIRange>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e380      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015be:	f000 fcc1 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	4950      	ldr	r1, [pc, #320]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80015d0:	5ccb      	ldrb	r3, [r1, r3]
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	4a4e      	ldr	r2, [pc, #312]	; (8001714 <HAL_RCC_OscConfig+0x278>)
 80015dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fd30 	bl	8001048 <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d052      	beq.n	8001698 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	e364      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d032      	beq.n	8001664 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a42      	ldr	r2, [pc, #264]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160a:	f7ff fd6d 	bl	80010e8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001612:	f7ff fd69 	bl	80010e8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e34d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a35      	ldr	r2, [pc, #212]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4930      	ldr	r1, [pc, #192]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	492b      	ldr	r1, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
 8001662:	e01a      	b.n	800169a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001670:	f7ff fd3a 	bl	80010e8 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001678:	f7ff fd36 	bl	80010e8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e31a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1dc>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d073      	beq.n	800178e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x21c>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d10e      	bne.n	80016d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d10b      	bne.n	80016d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d063      	beq.n	800178c <HAL_RCC_OscConfig+0x2f0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d15f      	bne.n	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e2f7      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x24c>
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e025      	b.n	8001734 <HAL_RCC_OscConfig+0x298>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d114      	bne.n	800171c <HAL_RCC_OscConfig+0x280>
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a02      	ldr	r2, [pc, #8]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e013      	b.n	8001734 <HAL_RCC_OscConfig+0x298>
 800170c:	40021000 	.word	0x40021000
 8001710:	08004ce4 	.word	0x08004ce4
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004
 800171c:	4ba0      	ldr	r3, [pc, #640]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a9f      	ldr	r2, [pc, #636]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b9d      	ldr	r3, [pc, #628]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a9c      	ldr	r2, [pc, #624]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fcd4 	bl	80010e8 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fcd0 	bl	80010e8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e2b4      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x2a8>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fcc0 	bl	80010e8 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fcbc 	bl	80010e8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e2a0      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177e:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x2d0>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d060      	beq.n	800185c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d005      	beq.n	80017ac <HAL_RCC_OscConfig+0x310>
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d119      	bne.n	80017da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d116      	bne.n	80017da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x328>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e27d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	4973      	ldr	r1, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d8:	e040      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d023      	beq.n	800182a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e2:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6e      	ldr	r2, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fc7b 	bl	80010e8 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fc77 	bl	80010e8 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e25b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001808:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	495f      	ldr	r1, [pc, #380]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e018      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a5c      	ldr	r2, [pc, #368]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fc57 	bl	80010e8 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fc53 	bl	80010e8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e237      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d03c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01c      	beq.n	80018aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001876:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001880:	f7ff fc32 	bl	80010e8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff fc2e 	bl	80010e8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e212      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ef      	beq.n	8001888 <HAL_RCC_OscConfig+0x3ec>
 80018a8:	e01b      	b.n	80018e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b0:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff fc15 	bl	80010e8 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc11 	bl	80010e8 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1f5      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ef      	bne.n	80018c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a6 	beq.w	8001a3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10d      	bne.n	800191c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190a:	6593      	str	r3, [r2, #88]	; 0x58
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001918:	2301      	movs	r3, #1
 800191a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d118      	bne.n	800195a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001934:	f7ff fbd8 	bl	80010e8 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193c:	f7ff fbd4 	bl	80010e8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1b8      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <HAL_RCC_OscConfig+0x4d8>
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001972:	e029      	b.n	80019c8 <HAL_RCC_OscConfig+0x52c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d115      	bne.n	80019a8 <HAL_RCC_OscConfig+0x50c>
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001992:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x52c>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
 80019a8:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a9c      	ldr	r2, [pc, #624]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b8:	4b99      	ldr	r3, [pc, #612]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d016      	beq.n	80019fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fb8a 	bl	80010e8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff fb86 	bl	80010e8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e168      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ed      	beq.n	80019d8 <HAL_RCC_OscConfig+0x53c>
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb73 	bl	80010e8 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb6f 	bl	80010e8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e151      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1c:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ed      	bne.n	8001a06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	4a7a      	ldr	r2, [pc, #488]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a56:	4a72      	ldr	r2, [pc, #456]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fb42 	bl	80010e8 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a68:	f7ff fb3e 	bl	80010e8 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e122      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7a:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ef      	beq.n	8001a68 <HAL_RCC_OscConfig+0x5cc>
 8001a88:	e01b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a90:	4a63      	ldr	r2, [pc, #396]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fb25 	bl	80010e8 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa2:	f7ff fb21 	bl	80010e8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e105      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ef      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80f9 	beq.w	8001cbe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 80cf 	bne.w	8001c74 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0203 	and.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d12c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	3b01      	subs	r3, #1
 8001af6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d123      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d11b      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d113      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	085b      	lsrs	r3, r3, #1
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d109      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d071      	beq.n	8001c28 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d068      	beq.n	8001c1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0ac      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b72:	f7ff fab9 	bl	80010e8 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fab5 	bl	80010e8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e099      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x788>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bb2:	0212      	lsls	r2, r2, #8
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bba:	0852      	lsrs	r2, r2, #1
 8001bbc:	3a01      	subs	r2, #1
 8001bbe:	0552      	lsls	r2, r2, #21
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bc6:	0852      	lsrs	r2, r2, #1
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0652      	lsls	r2, r2, #25
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd2:	06d2      	lsls	r2, r2, #27
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	4912      	ldr	r1, [pc, #72]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf4:	f7ff fa78 	bl	80010e8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa74 	bl	80010e8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1a:	e050      	b.n	8001cbe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e04f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
 8001c20:	40021000 	.word	0x40021000
 8001c24:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d144      	bne.n	8001cbe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c4c:	f7ff fa4c 	bl	80010e8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fa48 	bl	80010e8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e02c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x7b8>
 8001c72:	e024      	b.n	8001cbe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d01f      	beq.n	8001cba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fa2f 	bl	80010e8 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff fa2b 	bl	80010e8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e00f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x830>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e001      	b.n	8001cbe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	feeefffc 	.word	0xfeeefffc

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e11d      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d910      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 020f 	bic.w	r2, r3, #15
 8001cfe:	498b      	ldr	r1, [pc, #556]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e105      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d010      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d908      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	497b      	ldr	r1, [pc, #492]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d079      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d11e      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0dc      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d6a:	f000 f9d1 	bl	8002110 <RCC_GetSysClockFreqFromPLLSource>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a70      	ldr	r2, [pc, #448]	; (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d946      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d140      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d82:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e035      	b.n	8001e04 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da0:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d115      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b9      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0ad      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0a5      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001dd8:	f000 f8b4 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a55      	ldr	r2, [pc, #340]	; (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d90f      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001de4:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001df0:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001df8:	4a4d      	ldr	r2, [pc, #308]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e04:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 0203 	bic.w	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4947      	ldr	r1, [pc, #284]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e16:	f7ff f967 	bl	80010e8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1e:	f7ff f963 	bl	80010e8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e077      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e34:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 020c 	and.w	r2, r3, #12
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d1eb      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a37      	ldr	r2, [pc, #220]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e56:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d208      	bcs.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	492b      	ldr	r1, [pc, #172]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d210      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 020f 	bic.w	r2, r3, #15
 8001e9c:	4923      	ldr	r1, [pc, #140]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e036      	b.n	8001f24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	4918      	ldr	r1, [pc, #96]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4910      	ldr	r1, [pc, #64]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef4:	f000 f826 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <HAL_RCC_ClockConfig+0x268>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x26c>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f895 	bl	8001048 <HAL_InitTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	04c4b400 	.word	0x04c4b400
 8001f38:	08004ce4 	.word	0x08004ce4
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x34>
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d121      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11e      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f78:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e005      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e004      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d134      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fe8:	e005      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fec:	617b      	str	r3, [r7, #20]
      break;
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff2:	617b      	str	r3, [r7, #20]
      break;
 8001ff4:	e002      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	fb03 f202 	mul.w	r2, r3, r2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0e5b      	lsrs	r3, r3, #25
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	3301      	adds	r3, #1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800203c:	69bb      	ldr	r3, [r7, #24]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	08004cf4 	.word	0x08004cf4
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002074:	f7ff f94e 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8002078:	6178      	str	r0, [r7, #20]
 800207a:	e014      	b.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6593      	str	r3, [r2, #88]	; 0x58
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002094:	f7ff f93e 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8002098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ac:	d10b      	bne.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d913      	bls.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2ba0      	cmp	r3, #160	; 0xa0
 80020b8:	d902      	bls.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ba:	2302      	movs	r3, #2
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e00d      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c0:	2301      	movs	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e00a      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ca:	d902      	bls.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80020cc:	2302      	movs	r3, #2
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e004      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b70      	cmp	r3, #112	; 0x70
 80020d6:	d101      	bne.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 020f 	bic.w	r2, r3, #15
 80020e4:	4909      	ldr	r1, [pc, #36]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	40022000 	.word	0x40022000

08002110 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d00b      	beq.n	800213e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d825      	bhi.n	8002178 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d008      	beq.n	8002144 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d11f      	bne.n	8002178 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800213a:	613b      	str	r3, [r7, #16]
    break;
 800213c:	e01f      	b.n	800217e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800213e:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002140:	613b      	str	r3, [r7, #16]
    break;
 8002142:	e01c      	b.n	800217e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e005      	b.n	800216c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002174:	613b      	str	r3, [r7, #16]
    break;
 8002176:	e002      	b.n	800217e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
    break;
 800217c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	3301      	adds	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	fb03 f202 	mul.w	r2, r3, r2
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0e5b      	lsrs	r3, r3, #25
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80021be:	683b      	ldr	r3, [r7, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	08004cf4 	.word	0x08004cf4

080021dc <__errno>:
 80021dc:	4b01      	ldr	r3, [pc, #4]	; (80021e4 <__errno+0x8>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000000c 	.word	0x2000000c

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	4d0d      	ldr	r5, [pc, #52]	; (8002220 <__libc_init_array+0x38>)
 80021ec:	4c0d      	ldr	r4, [pc, #52]	; (8002224 <__libc_init_array+0x3c>)
 80021ee:	1b64      	subs	r4, r4, r5
 80021f0:	10a4      	asrs	r4, r4, #2
 80021f2:	2600      	movs	r6, #0
 80021f4:	42a6      	cmp	r6, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	4d0b      	ldr	r5, [pc, #44]	; (8002228 <__libc_init_array+0x40>)
 80021fa:	4c0c      	ldr	r4, [pc, #48]	; (800222c <__libc_init_array+0x44>)
 80021fc:	f002 fd50 	bl	8004ca0 <_init>
 8002200:	1b64      	subs	r4, r4, r5
 8002202:	10a4      	asrs	r4, r4, #2
 8002204:	2600      	movs	r6, #0
 8002206:	42a6      	cmp	r6, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002210:	4798      	blx	r3
 8002212:	3601      	adds	r6, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	f855 3b04 	ldr.w	r3, [r5], #4
 800221a:	4798      	blx	r3
 800221c:	3601      	adds	r6, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	080050fc 	.word	0x080050fc
 8002224:	080050fc 	.word	0x080050fc
 8002228:	080050fc 	.word	0x080050fc
 800222c:	08005100 	.word	0x08005100

08002230 <memset>:
 8002230:	4402      	add	r2, r0
 8002232:	4603      	mov	r3, r0
 8002234:	4293      	cmp	r3, r2
 8002236:	d100      	bne.n	800223a <memset+0xa>
 8002238:	4770      	bx	lr
 800223a:	f803 1b01 	strb.w	r1, [r3], #1
 800223e:	e7f9      	b.n	8002234 <memset+0x4>

08002240 <__cvt>:
 8002240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002244:	ec55 4b10 	vmov	r4, r5, d0
 8002248:	2d00      	cmp	r5, #0
 800224a:	460e      	mov	r6, r1
 800224c:	4619      	mov	r1, r3
 800224e:	462b      	mov	r3, r5
 8002250:	bfbb      	ittet	lt
 8002252:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002256:	461d      	movlt	r5, r3
 8002258:	2300      	movge	r3, #0
 800225a:	232d      	movlt	r3, #45	; 0x2d
 800225c:	700b      	strb	r3, [r1, #0]
 800225e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002260:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002264:	4691      	mov	r9, r2
 8002266:	f023 0820 	bic.w	r8, r3, #32
 800226a:	bfbc      	itt	lt
 800226c:	4622      	movlt	r2, r4
 800226e:	4614      	movlt	r4, r2
 8002270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002274:	d005      	beq.n	8002282 <__cvt+0x42>
 8002276:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800227a:	d100      	bne.n	800227e <__cvt+0x3e>
 800227c:	3601      	adds	r6, #1
 800227e:	2102      	movs	r1, #2
 8002280:	e000      	b.n	8002284 <__cvt+0x44>
 8002282:	2103      	movs	r1, #3
 8002284:	ab03      	add	r3, sp, #12
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	ab02      	add	r3, sp, #8
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	ec45 4b10 	vmov	d0, r4, r5
 8002290:	4653      	mov	r3, sl
 8002292:	4632      	mov	r2, r6
 8002294:	f000 fce4 	bl	8002c60 <_dtoa_r>
 8002298:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800229c:	4607      	mov	r7, r0
 800229e:	d102      	bne.n	80022a6 <__cvt+0x66>
 80022a0:	f019 0f01 	tst.w	r9, #1
 80022a4:	d022      	beq.n	80022ec <__cvt+0xac>
 80022a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80022aa:	eb07 0906 	add.w	r9, r7, r6
 80022ae:	d110      	bne.n	80022d2 <__cvt+0x92>
 80022b0:	783b      	ldrb	r3, [r7, #0]
 80022b2:	2b30      	cmp	r3, #48	; 0x30
 80022b4:	d10a      	bne.n	80022cc <__cvt+0x8c>
 80022b6:	2200      	movs	r2, #0
 80022b8:	2300      	movs	r3, #0
 80022ba:	4620      	mov	r0, r4
 80022bc:	4629      	mov	r1, r5
 80022be:	f7fe fc43 	bl	8000b48 <__aeabi_dcmpeq>
 80022c2:	b918      	cbnz	r0, 80022cc <__cvt+0x8c>
 80022c4:	f1c6 0601 	rsb	r6, r6, #1
 80022c8:	f8ca 6000 	str.w	r6, [sl]
 80022cc:	f8da 3000 	ldr.w	r3, [sl]
 80022d0:	4499      	add	r9, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	2300      	movs	r3, #0
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fe fc35 	bl	8000b48 <__aeabi_dcmpeq>
 80022de:	b108      	cbz	r0, 80022e4 <__cvt+0xa4>
 80022e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80022e4:	2230      	movs	r2, #48	; 0x30
 80022e6:	9b03      	ldr	r3, [sp, #12]
 80022e8:	454b      	cmp	r3, r9
 80022ea:	d307      	bcc.n	80022fc <__cvt+0xbc>
 80022ec:	9b03      	ldr	r3, [sp, #12]
 80022ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80022f0:	1bdb      	subs	r3, r3, r7
 80022f2:	4638      	mov	r0, r7
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	b004      	add	sp, #16
 80022f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fc:	1c59      	adds	r1, r3, #1
 80022fe:	9103      	str	r1, [sp, #12]
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e7f0      	b.n	80022e6 <__cvt+0xa6>

08002304 <__exponent>:
 8002304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002306:	4603      	mov	r3, r0
 8002308:	2900      	cmp	r1, #0
 800230a:	bfb8      	it	lt
 800230c:	4249      	neglt	r1, r1
 800230e:	f803 2b02 	strb.w	r2, [r3], #2
 8002312:	bfb4      	ite	lt
 8002314:	222d      	movlt	r2, #45	; 0x2d
 8002316:	222b      	movge	r2, #43	; 0x2b
 8002318:	2909      	cmp	r1, #9
 800231a:	7042      	strb	r2, [r0, #1]
 800231c:	dd2a      	ble.n	8002374 <__exponent+0x70>
 800231e:	f10d 0407 	add.w	r4, sp, #7
 8002322:	46a4      	mov	ip, r4
 8002324:	270a      	movs	r7, #10
 8002326:	46a6      	mov	lr, r4
 8002328:	460a      	mov	r2, r1
 800232a:	fb91 f6f7 	sdiv	r6, r1, r7
 800232e:	fb07 1516 	mls	r5, r7, r6, r1
 8002332:	3530      	adds	r5, #48	; 0x30
 8002334:	2a63      	cmp	r2, #99	; 0x63
 8002336:	f104 34ff 	add.w	r4, r4, #4294967295
 800233a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800233e:	4631      	mov	r1, r6
 8002340:	dcf1      	bgt.n	8002326 <__exponent+0x22>
 8002342:	3130      	adds	r1, #48	; 0x30
 8002344:	f1ae 0502 	sub.w	r5, lr, #2
 8002348:	f804 1c01 	strb.w	r1, [r4, #-1]
 800234c:	1c44      	adds	r4, r0, #1
 800234e:	4629      	mov	r1, r5
 8002350:	4561      	cmp	r1, ip
 8002352:	d30a      	bcc.n	800236a <__exponent+0x66>
 8002354:	f10d 0209 	add.w	r2, sp, #9
 8002358:	eba2 020e 	sub.w	r2, r2, lr
 800235c:	4565      	cmp	r5, ip
 800235e:	bf88      	it	hi
 8002360:	2200      	movhi	r2, #0
 8002362:	4413      	add	r3, r2
 8002364:	1a18      	subs	r0, r3, r0
 8002366:	b003      	add	sp, #12
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800236e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002372:	e7ed      	b.n	8002350 <__exponent+0x4c>
 8002374:	2330      	movs	r3, #48	; 0x30
 8002376:	3130      	adds	r1, #48	; 0x30
 8002378:	7083      	strb	r3, [r0, #2]
 800237a:	70c1      	strb	r1, [r0, #3]
 800237c:	1d03      	adds	r3, r0, #4
 800237e:	e7f1      	b.n	8002364 <__exponent+0x60>

08002380 <_printf_float>:
 8002380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002384:	ed2d 8b02 	vpush	{d8}
 8002388:	b08d      	sub	sp, #52	; 0x34
 800238a:	460c      	mov	r4, r1
 800238c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002390:	4616      	mov	r6, r2
 8002392:	461f      	mov	r7, r3
 8002394:	4605      	mov	r5, r0
 8002396:	f001 fb47 	bl	8003a28 <_localeconv_r>
 800239a:	f8d0 a000 	ldr.w	sl, [r0]
 800239e:	4650      	mov	r0, sl
 80023a0:	f7fd ff55 	bl	800024e <strlen>
 80023a4:	2300      	movs	r3, #0
 80023a6:	930a      	str	r3, [sp, #40]	; 0x28
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	9305      	str	r3, [sp, #20]
 80023ac:	f8d8 3000 	ldr.w	r3, [r8]
 80023b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80023b4:	3307      	adds	r3, #7
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	f103 0208 	add.w	r2, r3, #8
 80023be:	f8c8 2000 	str.w	r2, [r8]
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80023ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80023ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80023d2:	9307      	str	r3, [sp, #28]
 80023d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80023d8:	ee08 0a10 	vmov	s16, r0
 80023dc:	4b9f      	ldr	r3, [pc, #636]	; (800265c <_printf_float+0x2dc>)
 80023de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80023e2:	f04f 32ff 	mov.w	r2, #4294967295
 80023e6:	f7fe fbe1 	bl	8000bac <__aeabi_dcmpun>
 80023ea:	bb88      	cbnz	r0, 8002450 <_printf_float+0xd0>
 80023ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80023f0:	4b9a      	ldr	r3, [pc, #616]	; (800265c <_printf_float+0x2dc>)
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	f7fe fbbb 	bl	8000b70 <__aeabi_dcmple>
 80023fa:	bb48      	cbnz	r0, 8002450 <_printf_float+0xd0>
 80023fc:	2200      	movs	r2, #0
 80023fe:	2300      	movs	r3, #0
 8002400:	4640      	mov	r0, r8
 8002402:	4649      	mov	r1, r9
 8002404:	f7fe fbaa 	bl	8000b5c <__aeabi_dcmplt>
 8002408:	b110      	cbz	r0, 8002410 <_printf_float+0x90>
 800240a:	232d      	movs	r3, #45	; 0x2d
 800240c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002410:	4b93      	ldr	r3, [pc, #588]	; (8002660 <_printf_float+0x2e0>)
 8002412:	4894      	ldr	r0, [pc, #592]	; (8002664 <_printf_float+0x2e4>)
 8002414:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002418:	bf94      	ite	ls
 800241a:	4698      	movls	r8, r3
 800241c:	4680      	movhi	r8, r0
 800241e:	2303      	movs	r3, #3
 8002420:	6123      	str	r3, [r4, #16]
 8002422:	9b05      	ldr	r3, [sp, #20]
 8002424:	f023 0204 	bic.w	r2, r3, #4
 8002428:	6022      	str	r2, [r4, #0]
 800242a:	f04f 0900 	mov.w	r9, #0
 800242e:	9700      	str	r7, [sp, #0]
 8002430:	4633      	mov	r3, r6
 8002432:	aa0b      	add	r2, sp, #44	; 0x2c
 8002434:	4621      	mov	r1, r4
 8002436:	4628      	mov	r0, r5
 8002438:	f000 f9d8 	bl	80027ec <_printf_common>
 800243c:	3001      	adds	r0, #1
 800243e:	f040 8090 	bne.w	8002562 <_printf_float+0x1e2>
 8002442:	f04f 30ff 	mov.w	r0, #4294967295
 8002446:	b00d      	add	sp, #52	; 0x34
 8002448:	ecbd 8b02 	vpop	{d8}
 800244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002450:	4642      	mov	r2, r8
 8002452:	464b      	mov	r3, r9
 8002454:	4640      	mov	r0, r8
 8002456:	4649      	mov	r1, r9
 8002458:	f7fe fba8 	bl	8000bac <__aeabi_dcmpun>
 800245c:	b140      	cbz	r0, 8002470 <_printf_float+0xf0>
 800245e:	464b      	mov	r3, r9
 8002460:	2b00      	cmp	r3, #0
 8002462:	bfbc      	itt	lt
 8002464:	232d      	movlt	r3, #45	; 0x2d
 8002466:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800246a:	487f      	ldr	r0, [pc, #508]	; (8002668 <_printf_float+0x2e8>)
 800246c:	4b7f      	ldr	r3, [pc, #508]	; (800266c <_printf_float+0x2ec>)
 800246e:	e7d1      	b.n	8002414 <_printf_float+0x94>
 8002470:	6863      	ldr	r3, [r4, #4]
 8002472:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002476:	9206      	str	r2, [sp, #24]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	d13f      	bne.n	80024fc <_printf_float+0x17c>
 800247c:	2306      	movs	r3, #6
 800247e:	6063      	str	r3, [r4, #4]
 8002480:	9b05      	ldr	r3, [sp, #20]
 8002482:	6861      	ldr	r1, [r4, #4]
 8002484:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002488:	2300      	movs	r3, #0
 800248a:	9303      	str	r3, [sp, #12]
 800248c:	ab0a      	add	r3, sp, #40	; 0x28
 800248e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002492:	ab09      	add	r3, sp, #36	; 0x24
 8002494:	ec49 8b10 	vmov	d0, r8, r9
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	6022      	str	r2, [r4, #0]
 800249c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80024a0:	4628      	mov	r0, r5
 80024a2:	f7ff fecd 	bl	8002240 <__cvt>
 80024a6:	9b06      	ldr	r3, [sp, #24]
 80024a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80024aa:	2b47      	cmp	r3, #71	; 0x47
 80024ac:	4680      	mov	r8, r0
 80024ae:	d108      	bne.n	80024c2 <_printf_float+0x142>
 80024b0:	1cc8      	adds	r0, r1, #3
 80024b2:	db02      	blt.n	80024ba <_printf_float+0x13a>
 80024b4:	6863      	ldr	r3, [r4, #4]
 80024b6:	4299      	cmp	r1, r3
 80024b8:	dd41      	ble.n	800253e <_printf_float+0x1be>
 80024ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80024be:	fa5f fb8b 	uxtb.w	fp, fp
 80024c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80024c6:	d820      	bhi.n	800250a <_printf_float+0x18a>
 80024c8:	3901      	subs	r1, #1
 80024ca:	465a      	mov	r2, fp
 80024cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80024d0:	9109      	str	r1, [sp, #36]	; 0x24
 80024d2:	f7ff ff17 	bl	8002304 <__exponent>
 80024d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024d8:	1813      	adds	r3, r2, r0
 80024da:	2a01      	cmp	r2, #1
 80024dc:	4681      	mov	r9, r0
 80024de:	6123      	str	r3, [r4, #16]
 80024e0:	dc02      	bgt.n	80024e8 <_printf_float+0x168>
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	07d2      	lsls	r2, r2, #31
 80024e6:	d501      	bpl.n	80024ec <_printf_float+0x16c>
 80024e8:	3301      	adds	r3, #1
 80024ea:	6123      	str	r3, [r4, #16]
 80024ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d09c      	beq.n	800242e <_printf_float+0xae>
 80024f4:	232d      	movs	r3, #45	; 0x2d
 80024f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024fa:	e798      	b.n	800242e <_printf_float+0xae>
 80024fc:	9a06      	ldr	r2, [sp, #24]
 80024fe:	2a47      	cmp	r2, #71	; 0x47
 8002500:	d1be      	bne.n	8002480 <_printf_float+0x100>
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1bc      	bne.n	8002480 <_printf_float+0x100>
 8002506:	2301      	movs	r3, #1
 8002508:	e7b9      	b.n	800247e <_printf_float+0xfe>
 800250a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800250e:	d118      	bne.n	8002542 <_printf_float+0x1c2>
 8002510:	2900      	cmp	r1, #0
 8002512:	6863      	ldr	r3, [r4, #4]
 8002514:	dd0b      	ble.n	800252e <_printf_float+0x1ae>
 8002516:	6121      	str	r1, [r4, #16]
 8002518:	b913      	cbnz	r3, 8002520 <_printf_float+0x1a0>
 800251a:	6822      	ldr	r2, [r4, #0]
 800251c:	07d0      	lsls	r0, r2, #31
 800251e:	d502      	bpl.n	8002526 <_printf_float+0x1a6>
 8002520:	3301      	adds	r3, #1
 8002522:	440b      	add	r3, r1
 8002524:	6123      	str	r3, [r4, #16]
 8002526:	65a1      	str	r1, [r4, #88]	; 0x58
 8002528:	f04f 0900 	mov.w	r9, #0
 800252c:	e7de      	b.n	80024ec <_printf_float+0x16c>
 800252e:	b913      	cbnz	r3, 8002536 <_printf_float+0x1b6>
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	07d2      	lsls	r2, r2, #31
 8002534:	d501      	bpl.n	800253a <_printf_float+0x1ba>
 8002536:	3302      	adds	r3, #2
 8002538:	e7f4      	b.n	8002524 <_printf_float+0x1a4>
 800253a:	2301      	movs	r3, #1
 800253c:	e7f2      	b.n	8002524 <_printf_float+0x1a4>
 800253e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002544:	4299      	cmp	r1, r3
 8002546:	db05      	blt.n	8002554 <_printf_float+0x1d4>
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	6121      	str	r1, [r4, #16]
 800254c:	07d8      	lsls	r0, r3, #31
 800254e:	d5ea      	bpl.n	8002526 <_printf_float+0x1a6>
 8002550:	1c4b      	adds	r3, r1, #1
 8002552:	e7e7      	b.n	8002524 <_printf_float+0x1a4>
 8002554:	2900      	cmp	r1, #0
 8002556:	bfd4      	ite	le
 8002558:	f1c1 0202 	rsble	r2, r1, #2
 800255c:	2201      	movgt	r2, #1
 800255e:	4413      	add	r3, r2
 8002560:	e7e0      	b.n	8002524 <_printf_float+0x1a4>
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	055a      	lsls	r2, r3, #21
 8002566:	d407      	bmi.n	8002578 <_printf_float+0x1f8>
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	4642      	mov	r2, r8
 800256c:	4631      	mov	r1, r6
 800256e:	4628      	mov	r0, r5
 8002570:	47b8      	blx	r7
 8002572:	3001      	adds	r0, #1
 8002574:	d12c      	bne.n	80025d0 <_printf_float+0x250>
 8002576:	e764      	b.n	8002442 <_printf_float+0xc2>
 8002578:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800257c:	f240 80e0 	bls.w	8002740 <_printf_float+0x3c0>
 8002580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002584:	2200      	movs	r2, #0
 8002586:	2300      	movs	r3, #0
 8002588:	f7fe fade 	bl	8000b48 <__aeabi_dcmpeq>
 800258c:	2800      	cmp	r0, #0
 800258e:	d034      	beq.n	80025fa <_printf_float+0x27a>
 8002590:	4a37      	ldr	r2, [pc, #220]	; (8002670 <_printf_float+0x2f0>)
 8002592:	2301      	movs	r3, #1
 8002594:	4631      	mov	r1, r6
 8002596:	4628      	mov	r0, r5
 8002598:	47b8      	blx	r7
 800259a:	3001      	adds	r0, #1
 800259c:	f43f af51 	beq.w	8002442 <_printf_float+0xc2>
 80025a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025a4:	429a      	cmp	r2, r3
 80025a6:	db02      	blt.n	80025ae <_printf_float+0x22e>
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	07d8      	lsls	r0, r3, #31
 80025ac:	d510      	bpl.n	80025d0 <_printf_float+0x250>
 80025ae:	ee18 3a10 	vmov	r3, s16
 80025b2:	4652      	mov	r2, sl
 80025b4:	4631      	mov	r1, r6
 80025b6:	4628      	mov	r0, r5
 80025b8:	47b8      	blx	r7
 80025ba:	3001      	adds	r0, #1
 80025bc:	f43f af41 	beq.w	8002442 <_printf_float+0xc2>
 80025c0:	f04f 0800 	mov.w	r8, #0
 80025c4:	f104 091a 	add.w	r9, r4, #26
 80025c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	4543      	cmp	r3, r8
 80025ce:	dc09      	bgt.n	80025e4 <_printf_float+0x264>
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	079b      	lsls	r3, r3, #30
 80025d4:	f100 8105 	bmi.w	80027e2 <_printf_float+0x462>
 80025d8:	68e0      	ldr	r0, [r4, #12]
 80025da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025dc:	4298      	cmp	r0, r3
 80025de:	bfb8      	it	lt
 80025e0:	4618      	movlt	r0, r3
 80025e2:	e730      	b.n	8002446 <_printf_float+0xc6>
 80025e4:	2301      	movs	r3, #1
 80025e6:	464a      	mov	r2, r9
 80025e8:	4631      	mov	r1, r6
 80025ea:	4628      	mov	r0, r5
 80025ec:	47b8      	blx	r7
 80025ee:	3001      	adds	r0, #1
 80025f0:	f43f af27 	beq.w	8002442 <_printf_float+0xc2>
 80025f4:	f108 0801 	add.w	r8, r8, #1
 80025f8:	e7e6      	b.n	80025c8 <_printf_float+0x248>
 80025fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	dc39      	bgt.n	8002674 <_printf_float+0x2f4>
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <_printf_float+0x2f0>)
 8002602:	2301      	movs	r3, #1
 8002604:	4631      	mov	r1, r6
 8002606:	4628      	mov	r0, r5
 8002608:	47b8      	blx	r7
 800260a:	3001      	adds	r0, #1
 800260c:	f43f af19 	beq.w	8002442 <_printf_float+0xc2>
 8002610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002614:	4313      	orrs	r3, r2
 8002616:	d102      	bne.n	800261e <_printf_float+0x29e>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	07d9      	lsls	r1, r3, #31
 800261c:	d5d8      	bpl.n	80025d0 <_printf_float+0x250>
 800261e:	ee18 3a10 	vmov	r3, s16
 8002622:	4652      	mov	r2, sl
 8002624:	4631      	mov	r1, r6
 8002626:	4628      	mov	r0, r5
 8002628:	47b8      	blx	r7
 800262a:	3001      	adds	r0, #1
 800262c:	f43f af09 	beq.w	8002442 <_printf_float+0xc2>
 8002630:	f04f 0900 	mov.w	r9, #0
 8002634:	f104 0a1a 	add.w	sl, r4, #26
 8002638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800263a:	425b      	negs	r3, r3
 800263c:	454b      	cmp	r3, r9
 800263e:	dc01      	bgt.n	8002644 <_printf_float+0x2c4>
 8002640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002642:	e792      	b.n	800256a <_printf_float+0x1ea>
 8002644:	2301      	movs	r3, #1
 8002646:	4652      	mov	r2, sl
 8002648:	4631      	mov	r1, r6
 800264a:	4628      	mov	r0, r5
 800264c:	47b8      	blx	r7
 800264e:	3001      	adds	r0, #1
 8002650:	f43f aef7 	beq.w	8002442 <_printf_float+0xc2>
 8002654:	f109 0901 	add.w	r9, r9, #1
 8002658:	e7ee      	b.n	8002638 <_printf_float+0x2b8>
 800265a:	bf00      	nop
 800265c:	7fefffff 	.word	0x7fefffff
 8002660:	08004d28 	.word	0x08004d28
 8002664:	08004d2c 	.word	0x08004d2c
 8002668:	08004d34 	.word	0x08004d34
 800266c:	08004d30 	.word	0x08004d30
 8002670:	08004d38 	.word	0x08004d38
 8002674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002676:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002678:	429a      	cmp	r2, r3
 800267a:	bfa8      	it	ge
 800267c:	461a      	movge	r2, r3
 800267e:	2a00      	cmp	r2, #0
 8002680:	4691      	mov	r9, r2
 8002682:	dc37      	bgt.n	80026f4 <_printf_float+0x374>
 8002684:	f04f 0b00 	mov.w	fp, #0
 8002688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800268c:	f104 021a 	add.w	r2, r4, #26
 8002690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002692:	9305      	str	r3, [sp, #20]
 8002694:	eba3 0309 	sub.w	r3, r3, r9
 8002698:	455b      	cmp	r3, fp
 800269a:	dc33      	bgt.n	8002704 <_printf_float+0x384>
 800269c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026a0:	429a      	cmp	r2, r3
 80026a2:	db3b      	blt.n	800271c <_printf_float+0x39c>
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	07da      	lsls	r2, r3, #31
 80026a8:	d438      	bmi.n	800271c <_printf_float+0x39c>
 80026aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026ac:	9a05      	ldr	r2, [sp, #20]
 80026ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80026b0:	1a9a      	subs	r2, r3, r2
 80026b2:	eba3 0901 	sub.w	r9, r3, r1
 80026b6:	4591      	cmp	r9, r2
 80026b8:	bfa8      	it	ge
 80026ba:	4691      	movge	r9, r2
 80026bc:	f1b9 0f00 	cmp.w	r9, #0
 80026c0:	dc35      	bgt.n	800272e <_printf_float+0x3ae>
 80026c2:	f04f 0800 	mov.w	r8, #0
 80026c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80026ca:	f104 0a1a 	add.w	sl, r4, #26
 80026ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	eba3 0309 	sub.w	r3, r3, r9
 80026d8:	4543      	cmp	r3, r8
 80026da:	f77f af79 	ble.w	80025d0 <_printf_float+0x250>
 80026de:	2301      	movs	r3, #1
 80026e0:	4652      	mov	r2, sl
 80026e2:	4631      	mov	r1, r6
 80026e4:	4628      	mov	r0, r5
 80026e6:	47b8      	blx	r7
 80026e8:	3001      	adds	r0, #1
 80026ea:	f43f aeaa 	beq.w	8002442 <_printf_float+0xc2>
 80026ee:	f108 0801 	add.w	r8, r8, #1
 80026f2:	e7ec      	b.n	80026ce <_printf_float+0x34e>
 80026f4:	4613      	mov	r3, r2
 80026f6:	4631      	mov	r1, r6
 80026f8:	4642      	mov	r2, r8
 80026fa:	4628      	mov	r0, r5
 80026fc:	47b8      	blx	r7
 80026fe:	3001      	adds	r0, #1
 8002700:	d1c0      	bne.n	8002684 <_printf_float+0x304>
 8002702:	e69e      	b.n	8002442 <_printf_float+0xc2>
 8002704:	2301      	movs	r3, #1
 8002706:	4631      	mov	r1, r6
 8002708:	4628      	mov	r0, r5
 800270a:	9205      	str	r2, [sp, #20]
 800270c:	47b8      	blx	r7
 800270e:	3001      	adds	r0, #1
 8002710:	f43f ae97 	beq.w	8002442 <_printf_float+0xc2>
 8002714:	9a05      	ldr	r2, [sp, #20]
 8002716:	f10b 0b01 	add.w	fp, fp, #1
 800271a:	e7b9      	b.n	8002690 <_printf_float+0x310>
 800271c:	ee18 3a10 	vmov	r3, s16
 8002720:	4652      	mov	r2, sl
 8002722:	4631      	mov	r1, r6
 8002724:	4628      	mov	r0, r5
 8002726:	47b8      	blx	r7
 8002728:	3001      	adds	r0, #1
 800272a:	d1be      	bne.n	80026aa <_printf_float+0x32a>
 800272c:	e689      	b.n	8002442 <_printf_float+0xc2>
 800272e:	9a05      	ldr	r2, [sp, #20]
 8002730:	464b      	mov	r3, r9
 8002732:	4442      	add	r2, r8
 8002734:	4631      	mov	r1, r6
 8002736:	4628      	mov	r0, r5
 8002738:	47b8      	blx	r7
 800273a:	3001      	adds	r0, #1
 800273c:	d1c1      	bne.n	80026c2 <_printf_float+0x342>
 800273e:	e680      	b.n	8002442 <_printf_float+0xc2>
 8002740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002742:	2a01      	cmp	r2, #1
 8002744:	dc01      	bgt.n	800274a <_printf_float+0x3ca>
 8002746:	07db      	lsls	r3, r3, #31
 8002748:	d538      	bpl.n	80027bc <_printf_float+0x43c>
 800274a:	2301      	movs	r3, #1
 800274c:	4642      	mov	r2, r8
 800274e:	4631      	mov	r1, r6
 8002750:	4628      	mov	r0, r5
 8002752:	47b8      	blx	r7
 8002754:	3001      	adds	r0, #1
 8002756:	f43f ae74 	beq.w	8002442 <_printf_float+0xc2>
 800275a:	ee18 3a10 	vmov	r3, s16
 800275e:	4652      	mov	r2, sl
 8002760:	4631      	mov	r1, r6
 8002762:	4628      	mov	r0, r5
 8002764:	47b8      	blx	r7
 8002766:	3001      	adds	r0, #1
 8002768:	f43f ae6b 	beq.w	8002442 <_printf_float+0xc2>
 800276c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002770:	2200      	movs	r2, #0
 8002772:	2300      	movs	r3, #0
 8002774:	f7fe f9e8 	bl	8000b48 <__aeabi_dcmpeq>
 8002778:	b9d8      	cbnz	r0, 80027b2 <_printf_float+0x432>
 800277a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800277c:	f108 0201 	add.w	r2, r8, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	4631      	mov	r1, r6
 8002784:	4628      	mov	r0, r5
 8002786:	47b8      	blx	r7
 8002788:	3001      	adds	r0, #1
 800278a:	d10e      	bne.n	80027aa <_printf_float+0x42a>
 800278c:	e659      	b.n	8002442 <_printf_float+0xc2>
 800278e:	2301      	movs	r3, #1
 8002790:	4652      	mov	r2, sl
 8002792:	4631      	mov	r1, r6
 8002794:	4628      	mov	r0, r5
 8002796:	47b8      	blx	r7
 8002798:	3001      	adds	r0, #1
 800279a:	f43f ae52 	beq.w	8002442 <_printf_float+0xc2>
 800279e:	f108 0801 	add.w	r8, r8, #1
 80027a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	4543      	cmp	r3, r8
 80027a8:	dcf1      	bgt.n	800278e <_printf_float+0x40e>
 80027aa:	464b      	mov	r3, r9
 80027ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80027b0:	e6dc      	b.n	800256c <_printf_float+0x1ec>
 80027b2:	f04f 0800 	mov.w	r8, #0
 80027b6:	f104 0a1a 	add.w	sl, r4, #26
 80027ba:	e7f2      	b.n	80027a2 <_printf_float+0x422>
 80027bc:	2301      	movs	r3, #1
 80027be:	4642      	mov	r2, r8
 80027c0:	e7df      	b.n	8002782 <_printf_float+0x402>
 80027c2:	2301      	movs	r3, #1
 80027c4:	464a      	mov	r2, r9
 80027c6:	4631      	mov	r1, r6
 80027c8:	4628      	mov	r0, r5
 80027ca:	47b8      	blx	r7
 80027cc:	3001      	adds	r0, #1
 80027ce:	f43f ae38 	beq.w	8002442 <_printf_float+0xc2>
 80027d2:	f108 0801 	add.w	r8, r8, #1
 80027d6:	68e3      	ldr	r3, [r4, #12]
 80027d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027da:	1a5b      	subs	r3, r3, r1
 80027dc:	4543      	cmp	r3, r8
 80027de:	dcf0      	bgt.n	80027c2 <_printf_float+0x442>
 80027e0:	e6fa      	b.n	80025d8 <_printf_float+0x258>
 80027e2:	f04f 0800 	mov.w	r8, #0
 80027e6:	f104 0919 	add.w	r9, r4, #25
 80027ea:	e7f4      	b.n	80027d6 <_printf_float+0x456>

080027ec <_printf_common>:
 80027ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	4616      	mov	r6, r2
 80027f2:	4699      	mov	r9, r3
 80027f4:	688a      	ldr	r2, [r1, #8]
 80027f6:	690b      	ldr	r3, [r1, #16]
 80027f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bfb8      	it	lt
 8002800:	4613      	movlt	r3, r2
 8002802:	6033      	str	r3, [r6, #0]
 8002804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002808:	4607      	mov	r7, r0
 800280a:	460c      	mov	r4, r1
 800280c:	b10a      	cbz	r2, 8002812 <_printf_common+0x26>
 800280e:	3301      	adds	r3, #1
 8002810:	6033      	str	r3, [r6, #0]
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	0699      	lsls	r1, r3, #26
 8002816:	bf42      	ittt	mi
 8002818:	6833      	ldrmi	r3, [r6, #0]
 800281a:	3302      	addmi	r3, #2
 800281c:	6033      	strmi	r3, [r6, #0]
 800281e:	6825      	ldr	r5, [r4, #0]
 8002820:	f015 0506 	ands.w	r5, r5, #6
 8002824:	d106      	bne.n	8002834 <_printf_common+0x48>
 8002826:	f104 0a19 	add.w	sl, r4, #25
 800282a:	68e3      	ldr	r3, [r4, #12]
 800282c:	6832      	ldr	r2, [r6, #0]
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	42ab      	cmp	r3, r5
 8002832:	dc26      	bgt.n	8002882 <_printf_common+0x96>
 8002834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002838:	1e13      	subs	r3, r2, #0
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	bf18      	it	ne
 800283e:	2301      	movne	r3, #1
 8002840:	0692      	lsls	r2, r2, #26
 8002842:	d42b      	bmi.n	800289c <_printf_common+0xb0>
 8002844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002848:	4649      	mov	r1, r9
 800284a:	4638      	mov	r0, r7
 800284c:	47c0      	blx	r8
 800284e:	3001      	adds	r0, #1
 8002850:	d01e      	beq.n	8002890 <_printf_common+0xa4>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	68e5      	ldr	r5, [r4, #12]
 8002856:	6832      	ldr	r2, [r6, #0]
 8002858:	f003 0306 	and.w	r3, r3, #6
 800285c:	2b04      	cmp	r3, #4
 800285e:	bf08      	it	eq
 8002860:	1aad      	subeq	r5, r5, r2
 8002862:	68a3      	ldr	r3, [r4, #8]
 8002864:	6922      	ldr	r2, [r4, #16]
 8002866:	bf0c      	ite	eq
 8002868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800286c:	2500      	movne	r5, #0
 800286e:	4293      	cmp	r3, r2
 8002870:	bfc4      	itt	gt
 8002872:	1a9b      	subgt	r3, r3, r2
 8002874:	18ed      	addgt	r5, r5, r3
 8002876:	2600      	movs	r6, #0
 8002878:	341a      	adds	r4, #26
 800287a:	42b5      	cmp	r5, r6
 800287c:	d11a      	bne.n	80028b4 <_printf_common+0xc8>
 800287e:	2000      	movs	r0, #0
 8002880:	e008      	b.n	8002894 <_printf_common+0xa8>
 8002882:	2301      	movs	r3, #1
 8002884:	4652      	mov	r2, sl
 8002886:	4649      	mov	r1, r9
 8002888:	4638      	mov	r0, r7
 800288a:	47c0      	blx	r8
 800288c:	3001      	adds	r0, #1
 800288e:	d103      	bne.n	8002898 <_printf_common+0xac>
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002898:	3501      	adds	r5, #1
 800289a:	e7c6      	b.n	800282a <_printf_common+0x3e>
 800289c:	18e1      	adds	r1, r4, r3
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	2030      	movs	r0, #48	; 0x30
 80028a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a6:	4422      	add	r2, r4
 80028a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028b0:	3302      	adds	r3, #2
 80028b2:	e7c7      	b.n	8002844 <_printf_common+0x58>
 80028b4:	2301      	movs	r3, #1
 80028b6:	4622      	mov	r2, r4
 80028b8:	4649      	mov	r1, r9
 80028ba:	4638      	mov	r0, r7
 80028bc:	47c0      	blx	r8
 80028be:	3001      	adds	r0, #1
 80028c0:	d0e6      	beq.n	8002890 <_printf_common+0xa4>
 80028c2:	3601      	adds	r6, #1
 80028c4:	e7d9      	b.n	800287a <_printf_common+0x8e>
	...

080028c8 <_printf_i>:
 80028c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028cc:	7e0f      	ldrb	r7, [r1, #24]
 80028ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028d0:	2f78      	cmp	r7, #120	; 0x78
 80028d2:	4691      	mov	r9, r2
 80028d4:	4680      	mov	r8, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	469a      	mov	sl, r3
 80028da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028de:	d807      	bhi.n	80028f0 <_printf_i+0x28>
 80028e0:	2f62      	cmp	r7, #98	; 0x62
 80028e2:	d80a      	bhi.n	80028fa <_printf_i+0x32>
 80028e4:	2f00      	cmp	r7, #0
 80028e6:	f000 80d8 	beq.w	8002a9a <_printf_i+0x1d2>
 80028ea:	2f58      	cmp	r7, #88	; 0x58
 80028ec:	f000 80a3 	beq.w	8002a36 <_printf_i+0x16e>
 80028f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028f8:	e03a      	b.n	8002970 <_printf_i+0xa8>
 80028fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028fe:	2b15      	cmp	r3, #21
 8002900:	d8f6      	bhi.n	80028f0 <_printf_i+0x28>
 8002902:	a101      	add	r1, pc, #4	; (adr r1, 8002908 <_printf_i+0x40>)
 8002904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002908:	08002961 	.word	0x08002961
 800290c:	08002975 	.word	0x08002975
 8002910:	080028f1 	.word	0x080028f1
 8002914:	080028f1 	.word	0x080028f1
 8002918:	080028f1 	.word	0x080028f1
 800291c:	080028f1 	.word	0x080028f1
 8002920:	08002975 	.word	0x08002975
 8002924:	080028f1 	.word	0x080028f1
 8002928:	080028f1 	.word	0x080028f1
 800292c:	080028f1 	.word	0x080028f1
 8002930:	080028f1 	.word	0x080028f1
 8002934:	08002a81 	.word	0x08002a81
 8002938:	080029a5 	.word	0x080029a5
 800293c:	08002a63 	.word	0x08002a63
 8002940:	080028f1 	.word	0x080028f1
 8002944:	080028f1 	.word	0x080028f1
 8002948:	08002aa3 	.word	0x08002aa3
 800294c:	080028f1 	.word	0x080028f1
 8002950:	080029a5 	.word	0x080029a5
 8002954:	080028f1 	.word	0x080028f1
 8002958:	080028f1 	.word	0x080028f1
 800295c:	08002a6b 	.word	0x08002a6b
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	1d1a      	adds	r2, r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	602a      	str	r2, [r5, #0]
 8002968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800296c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002970:	2301      	movs	r3, #1
 8002972:	e0a3      	b.n	8002abc <_printf_i+0x1f4>
 8002974:	6820      	ldr	r0, [r4, #0]
 8002976:	6829      	ldr	r1, [r5, #0]
 8002978:	0606      	lsls	r6, r0, #24
 800297a:	f101 0304 	add.w	r3, r1, #4
 800297e:	d50a      	bpl.n	8002996 <_printf_i+0xce>
 8002980:	680e      	ldr	r6, [r1, #0]
 8002982:	602b      	str	r3, [r5, #0]
 8002984:	2e00      	cmp	r6, #0
 8002986:	da03      	bge.n	8002990 <_printf_i+0xc8>
 8002988:	232d      	movs	r3, #45	; 0x2d
 800298a:	4276      	negs	r6, r6
 800298c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002990:	485e      	ldr	r0, [pc, #376]	; (8002b0c <_printf_i+0x244>)
 8002992:	230a      	movs	r3, #10
 8002994:	e019      	b.n	80029ca <_printf_i+0x102>
 8002996:	680e      	ldr	r6, [r1, #0]
 8002998:	602b      	str	r3, [r5, #0]
 800299a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800299e:	bf18      	it	ne
 80029a0:	b236      	sxthne	r6, r6
 80029a2:	e7ef      	b.n	8002984 <_printf_i+0xbc>
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	1d19      	adds	r1, r3, #4
 80029aa:	6029      	str	r1, [r5, #0]
 80029ac:	0601      	lsls	r1, r0, #24
 80029ae:	d501      	bpl.n	80029b4 <_printf_i+0xec>
 80029b0:	681e      	ldr	r6, [r3, #0]
 80029b2:	e002      	b.n	80029ba <_printf_i+0xf2>
 80029b4:	0646      	lsls	r6, r0, #25
 80029b6:	d5fb      	bpl.n	80029b0 <_printf_i+0xe8>
 80029b8:	881e      	ldrh	r6, [r3, #0]
 80029ba:	4854      	ldr	r0, [pc, #336]	; (8002b0c <_printf_i+0x244>)
 80029bc:	2f6f      	cmp	r7, #111	; 0x6f
 80029be:	bf0c      	ite	eq
 80029c0:	2308      	moveq	r3, #8
 80029c2:	230a      	movne	r3, #10
 80029c4:	2100      	movs	r1, #0
 80029c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029ca:	6865      	ldr	r5, [r4, #4]
 80029cc:	60a5      	str	r5, [r4, #8]
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	bfa2      	ittt	ge
 80029d2:	6821      	ldrge	r1, [r4, #0]
 80029d4:	f021 0104 	bicge.w	r1, r1, #4
 80029d8:	6021      	strge	r1, [r4, #0]
 80029da:	b90e      	cbnz	r6, 80029e0 <_printf_i+0x118>
 80029dc:	2d00      	cmp	r5, #0
 80029de:	d04d      	beq.n	8002a7c <_printf_i+0x1b4>
 80029e0:	4615      	mov	r5, r2
 80029e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80029e6:	fb03 6711 	mls	r7, r3, r1, r6
 80029ea:	5dc7      	ldrb	r7, [r0, r7]
 80029ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029f0:	4637      	mov	r7, r6
 80029f2:	42bb      	cmp	r3, r7
 80029f4:	460e      	mov	r6, r1
 80029f6:	d9f4      	bls.n	80029e2 <_printf_i+0x11a>
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d10b      	bne.n	8002a14 <_printf_i+0x14c>
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	07de      	lsls	r6, r3, #31
 8002a00:	d508      	bpl.n	8002a14 <_printf_i+0x14c>
 8002a02:	6923      	ldr	r3, [r4, #16]
 8002a04:	6861      	ldr	r1, [r4, #4]
 8002a06:	4299      	cmp	r1, r3
 8002a08:	bfde      	ittt	le
 8002a0a:	2330      	movle	r3, #48	; 0x30
 8002a0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a14:	1b52      	subs	r2, r2, r5
 8002a16:	6122      	str	r2, [r4, #16]
 8002a18:	f8cd a000 	str.w	sl, [sp]
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	aa03      	add	r2, sp, #12
 8002a20:	4621      	mov	r1, r4
 8002a22:	4640      	mov	r0, r8
 8002a24:	f7ff fee2 	bl	80027ec <_printf_common>
 8002a28:	3001      	adds	r0, #1
 8002a2a:	d14c      	bne.n	8002ac6 <_printf_i+0x1fe>
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	b004      	add	sp, #16
 8002a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a36:	4835      	ldr	r0, [pc, #212]	; (8002b0c <_printf_i+0x244>)
 8002a38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a3c:	6829      	ldr	r1, [r5, #0]
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a44:	6029      	str	r1, [r5, #0]
 8002a46:	061d      	lsls	r5, r3, #24
 8002a48:	d514      	bpl.n	8002a74 <_printf_i+0x1ac>
 8002a4a:	07df      	lsls	r7, r3, #31
 8002a4c:	bf44      	itt	mi
 8002a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8002a52:	6023      	strmi	r3, [r4, #0]
 8002a54:	b91e      	cbnz	r6, 8002a5e <_printf_i+0x196>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	f023 0320 	bic.w	r3, r3, #32
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	2310      	movs	r3, #16
 8002a60:	e7b0      	b.n	80029c4 <_printf_i+0xfc>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f043 0320 	orr.w	r3, r3, #32
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	2378      	movs	r3, #120	; 0x78
 8002a6c:	4828      	ldr	r0, [pc, #160]	; (8002b10 <_printf_i+0x248>)
 8002a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a72:	e7e3      	b.n	8002a3c <_printf_i+0x174>
 8002a74:	0659      	lsls	r1, r3, #25
 8002a76:	bf48      	it	mi
 8002a78:	b2b6      	uxthmi	r6, r6
 8002a7a:	e7e6      	b.n	8002a4a <_printf_i+0x182>
 8002a7c:	4615      	mov	r5, r2
 8002a7e:	e7bb      	b.n	80029f8 <_printf_i+0x130>
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	6826      	ldr	r6, [r4, #0]
 8002a84:	6961      	ldr	r1, [r4, #20]
 8002a86:	1d18      	adds	r0, r3, #4
 8002a88:	6028      	str	r0, [r5, #0]
 8002a8a:	0635      	lsls	r5, r6, #24
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	d501      	bpl.n	8002a94 <_printf_i+0x1cc>
 8002a90:	6019      	str	r1, [r3, #0]
 8002a92:	e002      	b.n	8002a9a <_printf_i+0x1d2>
 8002a94:	0670      	lsls	r0, r6, #25
 8002a96:	d5fb      	bpl.n	8002a90 <_printf_i+0x1c8>
 8002a98:	8019      	strh	r1, [r3, #0]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	6123      	str	r3, [r4, #16]
 8002a9e:	4615      	mov	r5, r2
 8002aa0:	e7ba      	b.n	8002a18 <_printf_i+0x150>
 8002aa2:	682b      	ldr	r3, [r5, #0]
 8002aa4:	1d1a      	adds	r2, r3, #4
 8002aa6:	602a      	str	r2, [r5, #0]
 8002aa8:	681d      	ldr	r5, [r3, #0]
 8002aaa:	6862      	ldr	r2, [r4, #4]
 8002aac:	2100      	movs	r1, #0
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f7fd fbd6 	bl	8000260 <memchr>
 8002ab4:	b108      	cbz	r0, 8002aba <_printf_i+0x1f2>
 8002ab6:	1b40      	subs	r0, r0, r5
 8002ab8:	6060      	str	r0, [r4, #4]
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	6123      	str	r3, [r4, #16]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac4:	e7a8      	b.n	8002a18 <_printf_i+0x150>
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	462a      	mov	r2, r5
 8002aca:	4649      	mov	r1, r9
 8002acc:	4640      	mov	r0, r8
 8002ace:	47d0      	blx	sl
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	d0ab      	beq.n	8002a2c <_printf_i+0x164>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	079b      	lsls	r3, r3, #30
 8002ad8:	d413      	bmi.n	8002b02 <_printf_i+0x23a>
 8002ada:	68e0      	ldr	r0, [r4, #12]
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	4298      	cmp	r0, r3
 8002ae0:	bfb8      	it	lt
 8002ae2:	4618      	movlt	r0, r3
 8002ae4:	e7a4      	b.n	8002a30 <_printf_i+0x168>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4632      	mov	r2, r6
 8002aea:	4649      	mov	r1, r9
 8002aec:	4640      	mov	r0, r8
 8002aee:	47d0      	blx	sl
 8002af0:	3001      	adds	r0, #1
 8002af2:	d09b      	beq.n	8002a2c <_printf_i+0x164>
 8002af4:	3501      	adds	r5, #1
 8002af6:	68e3      	ldr	r3, [r4, #12]
 8002af8:	9903      	ldr	r1, [sp, #12]
 8002afa:	1a5b      	subs	r3, r3, r1
 8002afc:	42ab      	cmp	r3, r5
 8002afe:	dcf2      	bgt.n	8002ae6 <_printf_i+0x21e>
 8002b00:	e7eb      	b.n	8002ada <_printf_i+0x212>
 8002b02:	2500      	movs	r5, #0
 8002b04:	f104 0619 	add.w	r6, r4, #25
 8002b08:	e7f5      	b.n	8002af6 <_printf_i+0x22e>
 8002b0a:	bf00      	nop
 8002b0c:	08004d3a 	.word	0x08004d3a
 8002b10:	08004d4b 	.word	0x08004d4b

08002b14 <iprintf>:
 8002b14:	b40f      	push	{r0, r1, r2, r3}
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <iprintf+0x2c>)
 8002b18:	b513      	push	{r0, r1, r4, lr}
 8002b1a:	681c      	ldr	r4, [r3, #0]
 8002b1c:	b124      	cbz	r4, 8002b28 <iprintf+0x14>
 8002b1e:	69a3      	ldr	r3, [r4, #24]
 8002b20:	b913      	cbnz	r3, 8002b28 <iprintf+0x14>
 8002b22:	4620      	mov	r0, r4
 8002b24:	f000 fee2 	bl	80038ec <__sinit>
 8002b28:	ab05      	add	r3, sp, #20
 8002b2a:	9a04      	ldr	r2, [sp, #16]
 8002b2c:	68a1      	ldr	r1, [r4, #8]
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	4620      	mov	r0, r4
 8002b32:	f001 fc3b 	bl	80043ac <_vfiprintf_r>
 8002b36:	b002      	add	sp, #8
 8002b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b3c:	b004      	add	sp, #16
 8002b3e:	4770      	bx	lr
 8002b40:	2000000c 	.word	0x2000000c

08002b44 <quorem>:
 8002b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b48:	6903      	ldr	r3, [r0, #16]
 8002b4a:	690c      	ldr	r4, [r1, #16]
 8002b4c:	42a3      	cmp	r3, r4
 8002b4e:	4607      	mov	r7, r0
 8002b50:	f2c0 8081 	blt.w	8002c56 <quorem+0x112>
 8002b54:	3c01      	subs	r4, #1
 8002b56:	f101 0814 	add.w	r8, r1, #20
 8002b5a:	f100 0514 	add.w	r5, r0, #20
 8002b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002b74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002b78:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b7c:	d331      	bcc.n	8002be2 <quorem+0x9e>
 8002b7e:	f04f 0e00 	mov.w	lr, #0
 8002b82:	4640      	mov	r0, r8
 8002b84:	46ac      	mov	ip, r5
 8002b86:	46f2      	mov	sl, lr
 8002b88:	f850 2b04 	ldr.w	r2, [r0], #4
 8002b8c:	b293      	uxth	r3, r2
 8002b8e:	fb06 e303 	mla	r3, r6, r3, lr
 8002b92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	ebaa 0303 	sub.w	r3, sl, r3
 8002b9c:	f8dc a000 	ldr.w	sl, [ip]
 8002ba0:	0c12      	lsrs	r2, r2, #16
 8002ba2:	fa13 f38a 	uxtah	r3, r3, sl
 8002ba6:	fb06 e202 	mla	r2, r6, r2, lr
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	9b00      	ldr	r3, [sp, #0]
 8002bae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002bb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002bbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8002bc0:	4581      	cmp	r9, r0
 8002bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bc6:	f84c 3b04 	str.w	r3, [ip], #4
 8002bca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002bce:	d2db      	bcs.n	8002b88 <quorem+0x44>
 8002bd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8002bd4:	b92b      	cbnz	r3, 8002be2 <quorem+0x9e>
 8002bd6:	9b01      	ldr	r3, [sp, #4]
 8002bd8:	3b04      	subs	r3, #4
 8002bda:	429d      	cmp	r5, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	d32e      	bcc.n	8002c3e <quorem+0xfa>
 8002be0:	613c      	str	r4, [r7, #16]
 8002be2:	4638      	mov	r0, r7
 8002be4:	f001 f9c0 	bl	8003f68 <__mcmp>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	db24      	blt.n	8002c36 <quorem+0xf2>
 8002bec:	3601      	adds	r6, #1
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f04f 0c00 	mov.w	ip, #0
 8002bf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8002bf8:	f8d0 e000 	ldr.w	lr, [r0]
 8002bfc:	b293      	uxth	r3, r2
 8002bfe:	ebac 0303 	sub.w	r3, ip, r3
 8002c02:	0c12      	lsrs	r2, r2, #16
 8002c04:	fa13 f38e 	uxtah	r3, r3, lr
 8002c08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c16:	45c1      	cmp	r9, r8
 8002c18:	f840 3b04 	str.w	r3, [r0], #4
 8002c1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002c20:	d2e8      	bcs.n	8002bf4 <quorem+0xb0>
 8002c22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c2a:	b922      	cbnz	r2, 8002c36 <quorem+0xf2>
 8002c2c:	3b04      	subs	r3, #4
 8002c2e:	429d      	cmp	r5, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	d30a      	bcc.n	8002c4a <quorem+0x106>
 8002c34:	613c      	str	r4, [r7, #16]
 8002c36:	4630      	mov	r0, r6
 8002c38:	b003      	add	sp, #12
 8002c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	3b04      	subs	r3, #4
 8002c42:	2a00      	cmp	r2, #0
 8002c44:	d1cc      	bne.n	8002be0 <quorem+0x9c>
 8002c46:	3c01      	subs	r4, #1
 8002c48:	e7c7      	b.n	8002bda <quorem+0x96>
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	3b04      	subs	r3, #4
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d1f0      	bne.n	8002c34 <quorem+0xf0>
 8002c52:	3c01      	subs	r4, #1
 8002c54:	e7eb      	b.n	8002c2e <quorem+0xea>
 8002c56:	2000      	movs	r0, #0
 8002c58:	e7ee      	b.n	8002c38 <quorem+0xf4>
 8002c5a:	0000      	movs	r0, r0
 8002c5c:	0000      	movs	r0, r0
	...

08002c60 <_dtoa_r>:
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	ed2d 8b04 	vpush	{d8-d9}
 8002c68:	ec57 6b10 	vmov	r6, r7, d0
 8002c6c:	b093      	sub	sp, #76	; 0x4c
 8002c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002c70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002c74:	9106      	str	r1, [sp, #24]
 8002c76:	ee10 aa10 	vmov	sl, s0
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8002c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8002c80:	46bb      	mov	fp, r7
 8002c82:	b975      	cbnz	r5, 8002ca2 <_dtoa_r+0x42>
 8002c84:	2010      	movs	r0, #16
 8002c86:	f000 fed7 	bl	8003a38 <malloc>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6260      	str	r0, [r4, #36]	; 0x24
 8002c8e:	b920      	cbnz	r0, 8002c9a <_dtoa_r+0x3a>
 8002c90:	4ba7      	ldr	r3, [pc, #668]	; (8002f30 <_dtoa_r+0x2d0>)
 8002c92:	21ea      	movs	r1, #234	; 0xea
 8002c94:	48a7      	ldr	r0, [pc, #668]	; (8002f34 <_dtoa_r+0x2d4>)
 8002c96:	f001 fddf 	bl	8004858 <__assert_func>
 8002c9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002c9e:	6005      	str	r5, [r0, #0]
 8002ca0:	60c5      	str	r5, [r0, #12]
 8002ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	b151      	cbz	r1, 8002cbe <_dtoa_r+0x5e>
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	604a      	str	r2, [r1, #4]
 8002cac:	2301      	movs	r3, #1
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f000 ff16 	bl	8003ae4 <_Bfree>
 8002cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	1e3b      	subs	r3, r7, #0
 8002cc0:	bfaa      	itet	ge
 8002cc2:	2300      	movge	r3, #0
 8002cc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002cc8:	f8c8 3000 	strge.w	r3, [r8]
 8002ccc:	4b9a      	ldr	r3, [pc, #616]	; (8002f38 <_dtoa_r+0x2d8>)
 8002cce:	bfbc      	itt	lt
 8002cd0:	2201      	movlt	r2, #1
 8002cd2:	f8c8 2000 	strlt.w	r2, [r8]
 8002cd6:	ea33 030b 	bics.w	r3, r3, fp
 8002cda:	d11b      	bne.n	8002d14 <_dtoa_r+0xb4>
 8002cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cde:	f242 730f 	movw	r3, #9999	; 0x270f
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002ce8:	4333      	orrs	r3, r6
 8002cea:	f000 8592 	beq.w	8003812 <_dtoa_r+0xbb2>
 8002cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002cf0:	b963      	cbnz	r3, 8002d0c <_dtoa_r+0xac>
 8002cf2:	4b92      	ldr	r3, [pc, #584]	; (8002f3c <_dtoa_r+0x2dc>)
 8002cf4:	e022      	b.n	8002d3c <_dtoa_r+0xdc>
 8002cf6:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <_dtoa_r+0x2e0>)
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	9801      	ldr	r0, [sp, #4]
 8002d02:	b013      	add	sp, #76	; 0x4c
 8002d04:	ecbd 8b04 	vpop	{d8-d9}
 8002d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0c:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <_dtoa_r+0x2dc>)
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	3303      	adds	r3, #3
 8002d12:	e7f3      	b.n	8002cfc <_dtoa_r+0x9c>
 8002d14:	2200      	movs	r2, #0
 8002d16:	2300      	movs	r3, #0
 8002d18:	4650      	mov	r0, sl
 8002d1a:	4659      	mov	r1, fp
 8002d1c:	f7fd ff14 	bl	8000b48 <__aeabi_dcmpeq>
 8002d20:	ec4b ab19 	vmov	d9, sl, fp
 8002d24:	4680      	mov	r8, r0
 8002d26:	b158      	cbz	r0, 8002d40 <_dtoa_r+0xe0>
 8002d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 856b 	beq.w	800380c <_dtoa_r+0xbac>
 8002d36:	4883      	ldr	r0, [pc, #524]	; (8002f44 <_dtoa_r+0x2e4>)
 8002d38:	6018      	str	r0, [r3, #0]
 8002d3a:	1e43      	subs	r3, r0, #1
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	e7df      	b.n	8002d00 <_dtoa_r+0xa0>
 8002d40:	ec4b ab10 	vmov	d0, sl, fp
 8002d44:	aa10      	add	r2, sp, #64	; 0x40
 8002d46:	a911      	add	r1, sp, #68	; 0x44
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f001 f9b3 	bl	80040b4 <__d2b>
 8002d4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002d52:	ee08 0a10 	vmov	s16, r0
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	f000 8084 	beq.w	8002e64 <_dtoa_r+0x204>
 8002d5c:	ee19 3a90 	vmov	r3, s19
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002d68:	4656      	mov	r6, sl
 8002d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002d72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002d76:	4b74      	ldr	r3, [pc, #464]	; (8002f48 <_dtoa_r+0x2e8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	4639      	mov	r1, r7
 8002d7e:	f7fd fac3 	bl	8000308 <__aeabi_dsub>
 8002d82:	a365      	add	r3, pc, #404	; (adr r3, 8002f18 <_dtoa_r+0x2b8>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f7fd fc76 	bl	8000678 <__aeabi_dmul>
 8002d8c:	a364      	add	r3, pc, #400	; (adr r3, 8002f20 <_dtoa_r+0x2c0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fabb 	bl	800030c <__adddf3>
 8002d96:	4606      	mov	r6, r0
 8002d98:	4628      	mov	r0, r5
 8002d9a:	460f      	mov	r7, r1
 8002d9c:	f7fd fc02 	bl	80005a4 <__aeabi_i2d>
 8002da0:	a361      	add	r3, pc, #388	; (adr r3, 8002f28 <_dtoa_r+0x2c8>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fc67 	bl	8000678 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4630      	mov	r0, r6
 8002db0:	4639      	mov	r1, r7
 8002db2:	f7fd faab 	bl	800030c <__adddf3>
 8002db6:	4606      	mov	r6, r0
 8002db8:	460f      	mov	r7, r1
 8002dba:	f7fd ff0d 	bl	8000bd8 <__aeabi_d2iz>
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	9000      	str	r0, [sp, #0]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	4639      	mov	r1, r7
 8002dc8:	f7fd fec8 	bl	8000b5c <__aeabi_dcmplt>
 8002dcc:	b150      	cbz	r0, 8002de4 <_dtoa_r+0x184>
 8002dce:	9800      	ldr	r0, [sp, #0]
 8002dd0:	f7fd fbe8 	bl	80005a4 <__aeabi_i2d>
 8002dd4:	4632      	mov	r2, r6
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	f7fd feb6 	bl	8000b48 <__aeabi_dcmpeq>
 8002ddc:	b910      	cbnz	r0, 8002de4 <_dtoa_r+0x184>
 8002dde:	9b00      	ldr	r3, [sp, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	9b00      	ldr	r3, [sp, #0]
 8002de6:	2b16      	cmp	r3, #22
 8002de8:	d85a      	bhi.n	8002ea0 <_dtoa_r+0x240>
 8002dea:	9a00      	ldr	r2, [sp, #0]
 8002dec:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <_dtoa_r+0x2ec>)
 8002dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	ec51 0b19 	vmov	r0, r1, d9
 8002dfa:	f7fd feaf 	bl	8000b5c <__aeabi_dcmplt>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d050      	beq.n	8002ea4 <_dtoa_r+0x244>
 8002e02:	9b00      	ldr	r3, [sp, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e0e:	1b5d      	subs	r5, r3, r5
 8002e10:	1e6b      	subs	r3, r5, #1
 8002e12:	9305      	str	r3, [sp, #20]
 8002e14:	bf45      	ittet	mi
 8002e16:	f1c5 0301 	rsbmi	r3, r5, #1
 8002e1a:	9304      	strmi	r3, [sp, #16]
 8002e1c:	2300      	movpl	r3, #0
 8002e1e:	2300      	movmi	r3, #0
 8002e20:	bf4c      	ite	mi
 8002e22:	9305      	strmi	r3, [sp, #20]
 8002e24:	9304      	strpl	r3, [sp, #16]
 8002e26:	9b00      	ldr	r3, [sp, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db3d      	blt.n	8002ea8 <_dtoa_r+0x248>
 8002e2c:	9b05      	ldr	r3, [sp, #20]
 8002e2e:	9a00      	ldr	r2, [sp, #0]
 8002e30:	920a      	str	r2, [sp, #40]	; 0x28
 8002e32:	4413      	add	r3, r2
 8002e34:	9305      	str	r3, [sp, #20]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9307      	str	r3, [sp, #28]
 8002e3a:	9b06      	ldr	r3, [sp, #24]
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	f200 8089 	bhi.w	8002f54 <_dtoa_r+0x2f4>
 8002e42:	2b05      	cmp	r3, #5
 8002e44:	bfc4      	itt	gt
 8002e46:	3b04      	subgt	r3, #4
 8002e48:	9306      	strgt	r3, [sp, #24]
 8002e4a:	9b06      	ldr	r3, [sp, #24]
 8002e4c:	f1a3 0302 	sub.w	r3, r3, #2
 8002e50:	bfcc      	ite	gt
 8002e52:	2500      	movgt	r5, #0
 8002e54:	2501      	movle	r5, #1
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	f200 8087 	bhi.w	8002f6a <_dtoa_r+0x30a>
 8002e5c:	e8df f003 	tbb	[pc, r3]
 8002e60:	59383a2d 	.word	0x59383a2d
 8002e64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002e68:	441d      	add	r5, r3
 8002e6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	bfc1      	itttt	gt
 8002e72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002e76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002e7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8002e7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002e82:	bfda      	itte	le
 8002e84:	f1c3 0320 	rsble	r3, r3, #32
 8002e88:	fa06 f003 	lslle.w	r0, r6, r3
 8002e8c:	4318      	orrgt	r0, r3
 8002e8e:	f7fd fb79 	bl	8000584 <__aeabi_ui2d>
 8002e92:	2301      	movs	r3, #1
 8002e94:	4606      	mov	r6, r0
 8002e96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002e9a:	3d01      	subs	r5, #1
 8002e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8002e9e:	e76a      	b.n	8002d76 <_dtoa_r+0x116>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e7b2      	b.n	8002e0a <_dtoa_r+0x1aa>
 8002ea4:	900b      	str	r0, [sp, #44]	; 0x2c
 8002ea6:	e7b1      	b.n	8002e0c <_dtoa_r+0x1ac>
 8002ea8:	9b04      	ldr	r3, [sp, #16]
 8002eaa:	9a00      	ldr	r2, [sp, #0]
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	9304      	str	r3, [sp, #16]
 8002eb0:	4253      	negs	r3, r2
 8002eb2:	9307      	str	r3, [sp, #28]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8002eb8:	e7bf      	b.n	8002e3a <_dtoa_r+0x1da>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9308      	str	r3, [sp, #32]
 8002ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dc55      	bgt.n	8002f70 <_dtoa_r+0x310>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8002ece:	e00c      	b.n	8002eea <_dtoa_r+0x28a>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e7f3      	b.n	8002ebc <_dtoa_r+0x25c>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ed8:	9308      	str	r3, [sp, #32]
 8002eda:	9b00      	ldr	r3, [sp, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	9302      	str	r3, [sp, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	9303      	str	r3, [sp, #12]
 8002ee6:	bfb8      	it	lt
 8002ee8:	2301      	movlt	r3, #1
 8002eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002eec:	2200      	movs	r2, #0
 8002eee:	6042      	str	r2, [r0, #4]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	f102 0614 	add.w	r6, r2, #20
 8002ef6:	429e      	cmp	r6, r3
 8002ef8:	6841      	ldr	r1, [r0, #4]
 8002efa:	d93d      	bls.n	8002f78 <_dtoa_r+0x318>
 8002efc:	4620      	mov	r0, r4
 8002efe:	f000 fdb1 	bl	8003a64 <_Balloc>
 8002f02:	9001      	str	r0, [sp, #4]
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d13b      	bne.n	8002f80 <_dtoa_r+0x320>
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <_dtoa_r+0x2f0>)
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002f10:	e6c0      	b.n	8002c94 <_dtoa_r+0x34>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e7df      	b.n	8002ed6 <_dtoa_r+0x276>
 8002f16:	bf00      	nop
 8002f18:	636f4361 	.word	0x636f4361
 8002f1c:	3fd287a7 	.word	0x3fd287a7
 8002f20:	8b60c8b3 	.word	0x8b60c8b3
 8002f24:	3fc68a28 	.word	0x3fc68a28
 8002f28:	509f79fb 	.word	0x509f79fb
 8002f2c:	3fd34413 	.word	0x3fd34413
 8002f30:	08004d69 	.word	0x08004d69
 8002f34:	08004d80 	.word	0x08004d80
 8002f38:	7ff00000 	.word	0x7ff00000
 8002f3c:	08004d65 	.word	0x08004d65
 8002f40:	08004d5c 	.word	0x08004d5c
 8002f44:	08004d39 	.word	0x08004d39
 8002f48:	3ff80000 	.word	0x3ff80000
 8002f4c:	08004ed0 	.word	0x08004ed0
 8002f50:	08004ddb 	.word	0x08004ddb
 8002f54:	2501      	movs	r5, #1
 8002f56:	2300      	movs	r3, #0
 8002f58:	9306      	str	r3, [sp, #24]
 8002f5a:	9508      	str	r5, [sp, #32]
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2312      	movs	r3, #18
 8002f68:	e7b0      	b.n	8002ecc <_dtoa_r+0x26c>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	9308      	str	r3, [sp, #32]
 8002f6e:	e7f5      	b.n	8002f5c <_dtoa_r+0x2fc>
 8002f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002f76:	e7b8      	b.n	8002eea <_dtoa_r+0x28a>
 8002f78:	3101      	adds	r1, #1
 8002f7a:	6041      	str	r1, [r0, #4]
 8002f7c:	0052      	lsls	r2, r2, #1
 8002f7e:	e7b8      	b.n	8002ef2 <_dtoa_r+0x292>
 8002f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f82:	9a01      	ldr	r2, [sp, #4]
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	9b03      	ldr	r3, [sp, #12]
 8002f88:	2b0e      	cmp	r3, #14
 8002f8a:	f200 809d 	bhi.w	80030c8 <_dtoa_r+0x468>
 8002f8e:	2d00      	cmp	r5, #0
 8002f90:	f000 809a 	beq.w	80030c8 <_dtoa_r+0x468>
 8002f94:	9b00      	ldr	r3, [sp, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dd32      	ble.n	8003000 <_dtoa_r+0x3a0>
 8002f9a:	4ab7      	ldr	r2, [pc, #732]	; (8003278 <_dtoa_r+0x618>)
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002fa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fa8:	9b00      	ldr	r3, [sp, #0]
 8002faa:	05d8      	lsls	r0, r3, #23
 8002fac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8002fb0:	d516      	bpl.n	8002fe0 <_dtoa_r+0x380>
 8002fb2:	4bb2      	ldr	r3, [pc, #712]	; (800327c <_dtoa_r+0x61c>)
 8002fb4:	ec51 0b19 	vmov	r0, r1, d9
 8002fb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002fbc:	f7fd fc86 	bl	80008cc <__aeabi_ddiv>
 8002fc0:	f007 070f 	and.w	r7, r7, #15
 8002fc4:	4682      	mov	sl, r0
 8002fc6:	468b      	mov	fp, r1
 8002fc8:	2503      	movs	r5, #3
 8002fca:	4eac      	ldr	r6, [pc, #688]	; (800327c <_dtoa_r+0x61c>)
 8002fcc:	b957      	cbnz	r7, 8002fe4 <_dtoa_r+0x384>
 8002fce:	4642      	mov	r2, r8
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	4650      	mov	r0, sl
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	f7fd fc79 	bl	80008cc <__aeabi_ddiv>
 8002fda:	4682      	mov	sl, r0
 8002fdc:	468b      	mov	fp, r1
 8002fde:	e028      	b.n	8003032 <_dtoa_r+0x3d2>
 8002fe0:	2502      	movs	r5, #2
 8002fe2:	e7f2      	b.n	8002fca <_dtoa_r+0x36a>
 8002fe4:	07f9      	lsls	r1, r7, #31
 8002fe6:	d508      	bpl.n	8002ffa <_dtoa_r+0x39a>
 8002fe8:	4640      	mov	r0, r8
 8002fea:	4649      	mov	r1, r9
 8002fec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002ff0:	f7fd fb42 	bl	8000678 <__aeabi_dmul>
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	4680      	mov	r8, r0
 8002ff8:	4689      	mov	r9, r1
 8002ffa:	107f      	asrs	r7, r7, #1
 8002ffc:	3608      	adds	r6, #8
 8002ffe:	e7e5      	b.n	8002fcc <_dtoa_r+0x36c>
 8003000:	f000 809b 	beq.w	800313a <_dtoa_r+0x4da>
 8003004:	9b00      	ldr	r3, [sp, #0]
 8003006:	4f9d      	ldr	r7, [pc, #628]	; (800327c <_dtoa_r+0x61c>)
 8003008:	425e      	negs	r6, r3
 800300a:	4b9b      	ldr	r3, [pc, #620]	; (8003278 <_dtoa_r+0x618>)
 800300c:	f006 020f 	and.w	r2, r6, #15
 8003010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	ec51 0b19 	vmov	r0, r1, d9
 800301c:	f7fd fb2c 	bl	8000678 <__aeabi_dmul>
 8003020:	1136      	asrs	r6, r6, #4
 8003022:	4682      	mov	sl, r0
 8003024:	468b      	mov	fp, r1
 8003026:	2300      	movs	r3, #0
 8003028:	2502      	movs	r5, #2
 800302a:	2e00      	cmp	r6, #0
 800302c:	d17a      	bne.n	8003124 <_dtoa_r+0x4c4>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1d3      	bne.n	8002fda <_dtoa_r+0x37a>
 8003032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8082 	beq.w	800313e <_dtoa_r+0x4de>
 800303a:	4b91      	ldr	r3, [pc, #580]	; (8003280 <_dtoa_r+0x620>)
 800303c:	2200      	movs	r2, #0
 800303e:	4650      	mov	r0, sl
 8003040:	4659      	mov	r1, fp
 8003042:	f7fd fd8b 	bl	8000b5c <__aeabi_dcmplt>
 8003046:	2800      	cmp	r0, #0
 8003048:	d079      	beq.n	800313e <_dtoa_r+0x4de>
 800304a:	9b03      	ldr	r3, [sp, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d076      	beq.n	800313e <_dtoa_r+0x4de>
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	dd36      	ble.n	80030c4 <_dtoa_r+0x464>
 8003056:	9b00      	ldr	r3, [sp, #0]
 8003058:	4650      	mov	r0, sl
 800305a:	4659      	mov	r1, fp
 800305c:	1e5f      	subs	r7, r3, #1
 800305e:	2200      	movs	r2, #0
 8003060:	4b88      	ldr	r3, [pc, #544]	; (8003284 <_dtoa_r+0x624>)
 8003062:	f7fd fb09 	bl	8000678 <__aeabi_dmul>
 8003066:	9e02      	ldr	r6, [sp, #8]
 8003068:	4682      	mov	sl, r0
 800306a:	468b      	mov	fp, r1
 800306c:	3501      	adds	r5, #1
 800306e:	4628      	mov	r0, r5
 8003070:	f7fd fa98 	bl	80005a4 <__aeabi_i2d>
 8003074:	4652      	mov	r2, sl
 8003076:	465b      	mov	r3, fp
 8003078:	f7fd fafe 	bl	8000678 <__aeabi_dmul>
 800307c:	4b82      	ldr	r3, [pc, #520]	; (8003288 <_dtoa_r+0x628>)
 800307e:	2200      	movs	r2, #0
 8003080:	f7fd f944 	bl	800030c <__adddf3>
 8003084:	46d0      	mov	r8, sl
 8003086:	46d9      	mov	r9, fp
 8003088:	4682      	mov	sl, r0
 800308a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800308e:	2e00      	cmp	r6, #0
 8003090:	d158      	bne.n	8003144 <_dtoa_r+0x4e4>
 8003092:	4b7e      	ldr	r3, [pc, #504]	; (800328c <_dtoa_r+0x62c>)
 8003094:	2200      	movs	r2, #0
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f7fd f935 	bl	8000308 <__aeabi_dsub>
 800309e:	4652      	mov	r2, sl
 80030a0:	465b      	mov	r3, fp
 80030a2:	4680      	mov	r8, r0
 80030a4:	4689      	mov	r9, r1
 80030a6:	f7fd fd77 	bl	8000b98 <__aeabi_dcmpgt>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	f040 8295 	bne.w	80035da <_dtoa_r+0x97a>
 80030b0:	4652      	mov	r2, sl
 80030b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80030b6:	4640      	mov	r0, r8
 80030b8:	4649      	mov	r1, r9
 80030ba:	f7fd fd4f 	bl	8000b5c <__aeabi_dcmplt>
 80030be:	2800      	cmp	r0, #0
 80030c0:	f040 8289 	bne.w	80035d6 <_dtoa_r+0x976>
 80030c4:	ec5b ab19 	vmov	sl, fp, d9
 80030c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f2c0 8148 	blt.w	8003360 <_dtoa_r+0x700>
 80030d0:	9a00      	ldr	r2, [sp, #0]
 80030d2:	2a0e      	cmp	r2, #14
 80030d4:	f300 8144 	bgt.w	8003360 <_dtoa_r+0x700>
 80030d8:	4b67      	ldr	r3, [pc, #412]	; (8003278 <_dtoa_r+0x618>)
 80030da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f280 80d5 	bge.w	8003294 <_dtoa_r+0x634>
 80030ea:	9b03      	ldr	r3, [sp, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f300 80d1 	bgt.w	8003294 <_dtoa_r+0x634>
 80030f2:	f040 826f 	bne.w	80035d4 <_dtoa_r+0x974>
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <_dtoa_r+0x62c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	4640      	mov	r0, r8
 80030fc:	4649      	mov	r1, r9
 80030fe:	f7fd fabb 	bl	8000678 <__aeabi_dmul>
 8003102:	4652      	mov	r2, sl
 8003104:	465b      	mov	r3, fp
 8003106:	f7fd fd3d 	bl	8000b84 <__aeabi_dcmpge>
 800310a:	9e03      	ldr	r6, [sp, #12]
 800310c:	4637      	mov	r7, r6
 800310e:	2800      	cmp	r0, #0
 8003110:	f040 8245 	bne.w	800359e <_dtoa_r+0x93e>
 8003114:	9d01      	ldr	r5, [sp, #4]
 8003116:	2331      	movs	r3, #49	; 0x31
 8003118:	f805 3b01 	strb.w	r3, [r5], #1
 800311c:	9b00      	ldr	r3, [sp, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	e240      	b.n	80035a6 <_dtoa_r+0x946>
 8003124:	07f2      	lsls	r2, r6, #31
 8003126:	d505      	bpl.n	8003134 <_dtoa_r+0x4d4>
 8003128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800312c:	f7fd faa4 	bl	8000678 <__aeabi_dmul>
 8003130:	3501      	adds	r5, #1
 8003132:	2301      	movs	r3, #1
 8003134:	1076      	asrs	r6, r6, #1
 8003136:	3708      	adds	r7, #8
 8003138:	e777      	b.n	800302a <_dtoa_r+0x3ca>
 800313a:	2502      	movs	r5, #2
 800313c:	e779      	b.n	8003032 <_dtoa_r+0x3d2>
 800313e:	9f00      	ldr	r7, [sp, #0]
 8003140:	9e03      	ldr	r6, [sp, #12]
 8003142:	e794      	b.n	800306e <_dtoa_r+0x40e>
 8003144:	9901      	ldr	r1, [sp, #4]
 8003146:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <_dtoa_r+0x618>)
 8003148:	4431      	add	r1, r6
 800314a:	910d      	str	r1, [sp, #52]	; 0x34
 800314c:	9908      	ldr	r1, [sp, #32]
 800314e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003156:	2900      	cmp	r1, #0
 8003158:	d043      	beq.n	80031e2 <_dtoa_r+0x582>
 800315a:	494d      	ldr	r1, [pc, #308]	; (8003290 <_dtoa_r+0x630>)
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fbb5 	bl	80008cc <__aeabi_ddiv>
 8003162:	4652      	mov	r2, sl
 8003164:	465b      	mov	r3, fp
 8003166:	f7fd f8cf 	bl	8000308 <__aeabi_dsub>
 800316a:	9d01      	ldr	r5, [sp, #4]
 800316c:	4682      	mov	sl, r0
 800316e:	468b      	mov	fp, r1
 8003170:	4649      	mov	r1, r9
 8003172:	4640      	mov	r0, r8
 8003174:	f7fd fd30 	bl	8000bd8 <__aeabi_d2iz>
 8003178:	4606      	mov	r6, r0
 800317a:	f7fd fa13 	bl	80005a4 <__aeabi_i2d>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4640      	mov	r0, r8
 8003184:	4649      	mov	r1, r9
 8003186:	f7fd f8bf 	bl	8000308 <__aeabi_dsub>
 800318a:	3630      	adds	r6, #48	; 0x30
 800318c:	f805 6b01 	strb.w	r6, [r5], #1
 8003190:	4652      	mov	r2, sl
 8003192:	465b      	mov	r3, fp
 8003194:	4680      	mov	r8, r0
 8003196:	4689      	mov	r9, r1
 8003198:	f7fd fce0 	bl	8000b5c <__aeabi_dcmplt>
 800319c:	2800      	cmp	r0, #0
 800319e:	d163      	bne.n	8003268 <_dtoa_r+0x608>
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	4936      	ldr	r1, [pc, #216]	; (8003280 <_dtoa_r+0x620>)
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fd f8ae 	bl	8000308 <__aeabi_dsub>
 80031ac:	4652      	mov	r2, sl
 80031ae:	465b      	mov	r3, fp
 80031b0:	f7fd fcd4 	bl	8000b5c <__aeabi_dcmplt>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	f040 80b5 	bne.w	8003324 <_dtoa_r+0x6c4>
 80031ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031bc:	429d      	cmp	r5, r3
 80031be:	d081      	beq.n	80030c4 <_dtoa_r+0x464>
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <_dtoa_r+0x624>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	4650      	mov	r0, sl
 80031c6:	4659      	mov	r1, fp
 80031c8:	f7fd fa56 	bl	8000678 <__aeabi_dmul>
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <_dtoa_r+0x624>)
 80031ce:	4682      	mov	sl, r0
 80031d0:	468b      	mov	fp, r1
 80031d2:	4640      	mov	r0, r8
 80031d4:	4649      	mov	r1, r9
 80031d6:	2200      	movs	r2, #0
 80031d8:	f7fd fa4e 	bl	8000678 <__aeabi_dmul>
 80031dc:	4680      	mov	r8, r0
 80031de:	4689      	mov	r9, r1
 80031e0:	e7c6      	b.n	8003170 <_dtoa_r+0x510>
 80031e2:	4650      	mov	r0, sl
 80031e4:	4659      	mov	r1, fp
 80031e6:	f7fd fa47 	bl	8000678 <__aeabi_dmul>
 80031ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031ec:	9d01      	ldr	r5, [sp, #4]
 80031ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80031f0:	4682      	mov	sl, r0
 80031f2:	468b      	mov	fp, r1
 80031f4:	4649      	mov	r1, r9
 80031f6:	4640      	mov	r0, r8
 80031f8:	f7fd fcee 	bl	8000bd8 <__aeabi_d2iz>
 80031fc:	4606      	mov	r6, r0
 80031fe:	f7fd f9d1 	bl	80005a4 <__aeabi_i2d>
 8003202:	3630      	adds	r6, #48	; 0x30
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4640      	mov	r0, r8
 800320a:	4649      	mov	r1, r9
 800320c:	f7fd f87c 	bl	8000308 <__aeabi_dsub>
 8003210:	f805 6b01 	strb.w	r6, [r5], #1
 8003214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003216:	429d      	cmp	r5, r3
 8003218:	4680      	mov	r8, r0
 800321a:	4689      	mov	r9, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	d124      	bne.n	800326c <_dtoa_r+0x60c>
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <_dtoa_r+0x630>)
 8003224:	4650      	mov	r0, sl
 8003226:	4659      	mov	r1, fp
 8003228:	f7fd f870 	bl	800030c <__adddf3>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4640      	mov	r0, r8
 8003232:	4649      	mov	r1, r9
 8003234:	f7fd fcb0 	bl	8000b98 <__aeabi_dcmpgt>
 8003238:	2800      	cmp	r0, #0
 800323a:	d173      	bne.n	8003324 <_dtoa_r+0x6c4>
 800323c:	4652      	mov	r2, sl
 800323e:	465b      	mov	r3, fp
 8003240:	4913      	ldr	r1, [pc, #76]	; (8003290 <_dtoa_r+0x630>)
 8003242:	2000      	movs	r0, #0
 8003244:	f7fd f860 	bl	8000308 <__aeabi_dsub>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4640      	mov	r0, r8
 800324e:	4649      	mov	r1, r9
 8003250:	f7fd fc84 	bl	8000b5c <__aeabi_dcmplt>
 8003254:	2800      	cmp	r0, #0
 8003256:	f43f af35 	beq.w	80030c4 <_dtoa_r+0x464>
 800325a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800325c:	1e6b      	subs	r3, r5, #1
 800325e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003260:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003264:	2b30      	cmp	r3, #48	; 0x30
 8003266:	d0f8      	beq.n	800325a <_dtoa_r+0x5fa>
 8003268:	9700      	str	r7, [sp, #0]
 800326a:	e049      	b.n	8003300 <_dtoa_r+0x6a0>
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <_dtoa_r+0x624>)
 800326e:	f7fd fa03 	bl	8000678 <__aeabi_dmul>
 8003272:	4680      	mov	r8, r0
 8003274:	4689      	mov	r9, r1
 8003276:	e7bd      	b.n	80031f4 <_dtoa_r+0x594>
 8003278:	08004ed0 	.word	0x08004ed0
 800327c:	08004ea8 	.word	0x08004ea8
 8003280:	3ff00000 	.word	0x3ff00000
 8003284:	40240000 	.word	0x40240000
 8003288:	401c0000 	.word	0x401c0000
 800328c:	40140000 	.word	0x40140000
 8003290:	3fe00000 	.word	0x3fe00000
 8003294:	9d01      	ldr	r5, [sp, #4]
 8003296:	4656      	mov	r6, sl
 8003298:	465f      	mov	r7, fp
 800329a:	4642      	mov	r2, r8
 800329c:	464b      	mov	r3, r9
 800329e:	4630      	mov	r0, r6
 80032a0:	4639      	mov	r1, r7
 80032a2:	f7fd fb13 	bl	80008cc <__aeabi_ddiv>
 80032a6:	f7fd fc97 	bl	8000bd8 <__aeabi_d2iz>
 80032aa:	4682      	mov	sl, r0
 80032ac:	f7fd f97a 	bl	80005a4 <__aeabi_i2d>
 80032b0:	4642      	mov	r2, r8
 80032b2:	464b      	mov	r3, r9
 80032b4:	f7fd f9e0 	bl	8000678 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4630      	mov	r0, r6
 80032be:	4639      	mov	r1, r7
 80032c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80032c4:	f7fd f820 	bl	8000308 <__aeabi_dsub>
 80032c8:	f805 6b01 	strb.w	r6, [r5], #1
 80032cc:	9e01      	ldr	r6, [sp, #4]
 80032ce:	9f03      	ldr	r7, [sp, #12]
 80032d0:	1bae      	subs	r6, r5, r6
 80032d2:	42b7      	cmp	r7, r6
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	d135      	bne.n	8003346 <_dtoa_r+0x6e6>
 80032da:	f7fd f817 	bl	800030c <__adddf3>
 80032de:	4642      	mov	r2, r8
 80032e0:	464b      	mov	r3, r9
 80032e2:	4606      	mov	r6, r0
 80032e4:	460f      	mov	r7, r1
 80032e6:	f7fd fc57 	bl	8000b98 <__aeabi_dcmpgt>
 80032ea:	b9d0      	cbnz	r0, 8003322 <_dtoa_r+0x6c2>
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	4630      	mov	r0, r6
 80032f2:	4639      	mov	r1, r7
 80032f4:	f7fd fc28 	bl	8000b48 <__aeabi_dcmpeq>
 80032f8:	b110      	cbz	r0, 8003300 <_dtoa_r+0x6a0>
 80032fa:	f01a 0f01 	tst.w	sl, #1
 80032fe:	d110      	bne.n	8003322 <_dtoa_r+0x6c2>
 8003300:	4620      	mov	r0, r4
 8003302:	ee18 1a10 	vmov	r1, s16
 8003306:	f000 fbed 	bl	8003ae4 <_Bfree>
 800330a:	2300      	movs	r3, #0
 800330c:	9800      	ldr	r0, [sp, #0]
 800330e:	702b      	strb	r3, [r5, #0]
 8003310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003312:	3001      	adds	r0, #1
 8003314:	6018      	str	r0, [r3, #0]
 8003316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003318:	2b00      	cmp	r3, #0
 800331a:	f43f acf1 	beq.w	8002d00 <_dtoa_r+0xa0>
 800331e:	601d      	str	r5, [r3, #0]
 8003320:	e4ee      	b.n	8002d00 <_dtoa_r+0xa0>
 8003322:	9f00      	ldr	r7, [sp, #0]
 8003324:	462b      	mov	r3, r5
 8003326:	461d      	mov	r5, r3
 8003328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800332c:	2a39      	cmp	r2, #57	; 0x39
 800332e:	d106      	bne.n	800333e <_dtoa_r+0x6de>
 8003330:	9a01      	ldr	r2, [sp, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d1f7      	bne.n	8003326 <_dtoa_r+0x6c6>
 8003336:	9901      	ldr	r1, [sp, #4]
 8003338:	2230      	movs	r2, #48	; 0x30
 800333a:	3701      	adds	r7, #1
 800333c:	700a      	strb	r2, [r1, #0]
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	3201      	adds	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e790      	b.n	8003268 <_dtoa_r+0x608>
 8003346:	4ba6      	ldr	r3, [pc, #664]	; (80035e0 <_dtoa_r+0x980>)
 8003348:	2200      	movs	r2, #0
 800334a:	f7fd f995 	bl	8000678 <__aeabi_dmul>
 800334e:	2200      	movs	r2, #0
 8003350:	2300      	movs	r3, #0
 8003352:	4606      	mov	r6, r0
 8003354:	460f      	mov	r7, r1
 8003356:	f7fd fbf7 	bl	8000b48 <__aeabi_dcmpeq>
 800335a:	2800      	cmp	r0, #0
 800335c:	d09d      	beq.n	800329a <_dtoa_r+0x63a>
 800335e:	e7cf      	b.n	8003300 <_dtoa_r+0x6a0>
 8003360:	9a08      	ldr	r2, [sp, #32]
 8003362:	2a00      	cmp	r2, #0
 8003364:	f000 80d7 	beq.w	8003516 <_dtoa_r+0x8b6>
 8003368:	9a06      	ldr	r2, [sp, #24]
 800336a:	2a01      	cmp	r2, #1
 800336c:	f300 80ba 	bgt.w	80034e4 <_dtoa_r+0x884>
 8003370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003372:	2a00      	cmp	r2, #0
 8003374:	f000 80b2 	beq.w	80034dc <_dtoa_r+0x87c>
 8003378:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800337c:	9e07      	ldr	r6, [sp, #28]
 800337e:	9d04      	ldr	r5, [sp, #16]
 8003380:	9a04      	ldr	r2, [sp, #16]
 8003382:	441a      	add	r2, r3
 8003384:	9204      	str	r2, [sp, #16]
 8003386:	9a05      	ldr	r2, [sp, #20]
 8003388:	2101      	movs	r1, #1
 800338a:	441a      	add	r2, r3
 800338c:	4620      	mov	r0, r4
 800338e:	9205      	str	r2, [sp, #20]
 8003390:	f000 fc60 	bl	8003c54 <__i2b>
 8003394:	4607      	mov	r7, r0
 8003396:	2d00      	cmp	r5, #0
 8003398:	dd0c      	ble.n	80033b4 <_dtoa_r+0x754>
 800339a:	9b05      	ldr	r3, [sp, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	dd09      	ble.n	80033b4 <_dtoa_r+0x754>
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	9a04      	ldr	r2, [sp, #16]
 80033a4:	bfa8      	it	ge
 80033a6:	462b      	movge	r3, r5
 80033a8:	1ad2      	subs	r2, r2, r3
 80033aa:	9204      	str	r2, [sp, #16]
 80033ac:	9a05      	ldr	r2, [sp, #20]
 80033ae:	1aed      	subs	r5, r5, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	9305      	str	r3, [sp, #20]
 80033b4:	9b07      	ldr	r3, [sp, #28]
 80033b6:	b31b      	cbz	r3, 8003400 <_dtoa_r+0x7a0>
 80033b8:	9b08      	ldr	r3, [sp, #32]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80af 	beq.w	800351e <_dtoa_r+0x8be>
 80033c0:	2e00      	cmp	r6, #0
 80033c2:	dd13      	ble.n	80033ec <_dtoa_r+0x78c>
 80033c4:	4639      	mov	r1, r7
 80033c6:	4632      	mov	r2, r6
 80033c8:	4620      	mov	r0, r4
 80033ca:	f000 fd03 	bl	8003dd4 <__pow5mult>
 80033ce:	ee18 2a10 	vmov	r2, s16
 80033d2:	4601      	mov	r1, r0
 80033d4:	4607      	mov	r7, r0
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 fc52 	bl	8003c80 <__multiply>
 80033dc:	ee18 1a10 	vmov	r1, s16
 80033e0:	4680      	mov	r8, r0
 80033e2:	4620      	mov	r0, r4
 80033e4:	f000 fb7e 	bl	8003ae4 <_Bfree>
 80033e8:	ee08 8a10 	vmov	s16, r8
 80033ec:	9b07      	ldr	r3, [sp, #28]
 80033ee:	1b9a      	subs	r2, r3, r6
 80033f0:	d006      	beq.n	8003400 <_dtoa_r+0x7a0>
 80033f2:	ee18 1a10 	vmov	r1, s16
 80033f6:	4620      	mov	r0, r4
 80033f8:	f000 fcec 	bl	8003dd4 <__pow5mult>
 80033fc:	ee08 0a10 	vmov	s16, r0
 8003400:	2101      	movs	r1, #1
 8003402:	4620      	mov	r0, r4
 8003404:	f000 fc26 	bl	8003c54 <__i2b>
 8003408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	4606      	mov	r6, r0
 800340e:	f340 8088 	ble.w	8003522 <_dtoa_r+0x8c2>
 8003412:	461a      	mov	r2, r3
 8003414:	4601      	mov	r1, r0
 8003416:	4620      	mov	r0, r4
 8003418:	f000 fcdc 	bl	8003dd4 <__pow5mult>
 800341c:	9b06      	ldr	r3, [sp, #24]
 800341e:	2b01      	cmp	r3, #1
 8003420:	4606      	mov	r6, r0
 8003422:	f340 8081 	ble.w	8003528 <_dtoa_r+0x8c8>
 8003426:	f04f 0800 	mov.w	r8, #0
 800342a:	6933      	ldr	r3, [r6, #16]
 800342c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003430:	6918      	ldr	r0, [r3, #16]
 8003432:	f000 fbbf 	bl	8003bb4 <__hi0bits>
 8003436:	f1c0 0020 	rsb	r0, r0, #32
 800343a:	9b05      	ldr	r3, [sp, #20]
 800343c:	4418      	add	r0, r3
 800343e:	f010 001f 	ands.w	r0, r0, #31
 8003442:	f000 8092 	beq.w	800356a <_dtoa_r+0x90a>
 8003446:	f1c0 0320 	rsb	r3, r0, #32
 800344a:	2b04      	cmp	r3, #4
 800344c:	f340 808a 	ble.w	8003564 <_dtoa_r+0x904>
 8003450:	f1c0 001c 	rsb	r0, r0, #28
 8003454:	9b04      	ldr	r3, [sp, #16]
 8003456:	4403      	add	r3, r0
 8003458:	9304      	str	r3, [sp, #16]
 800345a:	9b05      	ldr	r3, [sp, #20]
 800345c:	4403      	add	r3, r0
 800345e:	4405      	add	r5, r0
 8003460:	9305      	str	r3, [sp, #20]
 8003462:	9b04      	ldr	r3, [sp, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	dd07      	ble.n	8003478 <_dtoa_r+0x818>
 8003468:	ee18 1a10 	vmov	r1, s16
 800346c:	461a      	mov	r2, r3
 800346e:	4620      	mov	r0, r4
 8003470:	f000 fd0a 	bl	8003e88 <__lshift>
 8003474:	ee08 0a10 	vmov	s16, r0
 8003478:	9b05      	ldr	r3, [sp, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	dd05      	ble.n	800348a <_dtoa_r+0x82a>
 800347e:	4631      	mov	r1, r6
 8003480:	461a      	mov	r2, r3
 8003482:	4620      	mov	r0, r4
 8003484:	f000 fd00 	bl	8003e88 <__lshift>
 8003488:	4606      	mov	r6, r0
 800348a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d06e      	beq.n	800356e <_dtoa_r+0x90e>
 8003490:	ee18 0a10 	vmov	r0, s16
 8003494:	4631      	mov	r1, r6
 8003496:	f000 fd67 	bl	8003f68 <__mcmp>
 800349a:	2800      	cmp	r0, #0
 800349c:	da67      	bge.n	800356e <_dtoa_r+0x90e>
 800349e:	9b00      	ldr	r3, [sp, #0]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	ee18 1a10 	vmov	r1, s16
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	220a      	movs	r2, #10
 80034aa:	2300      	movs	r3, #0
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 fb3b 	bl	8003b28 <__multadd>
 80034b2:	9b08      	ldr	r3, [sp, #32]
 80034b4:	ee08 0a10 	vmov	s16, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 81b1 	beq.w	8003820 <_dtoa_r+0xbc0>
 80034be:	2300      	movs	r3, #0
 80034c0:	4639      	mov	r1, r7
 80034c2:	220a      	movs	r2, #10
 80034c4:	4620      	mov	r0, r4
 80034c6:	f000 fb2f 	bl	8003b28 <__multadd>
 80034ca:	9b02      	ldr	r3, [sp, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	4607      	mov	r7, r0
 80034d0:	f300 808e 	bgt.w	80035f0 <_dtoa_r+0x990>
 80034d4:	9b06      	ldr	r3, [sp, #24]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	dc51      	bgt.n	800357e <_dtoa_r+0x91e>
 80034da:	e089      	b.n	80035f0 <_dtoa_r+0x990>
 80034dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80034e2:	e74b      	b.n	800337c <_dtoa_r+0x71c>
 80034e4:	9b03      	ldr	r3, [sp, #12]
 80034e6:	1e5e      	subs	r6, r3, #1
 80034e8:	9b07      	ldr	r3, [sp, #28]
 80034ea:	42b3      	cmp	r3, r6
 80034ec:	bfbf      	itttt	lt
 80034ee:	9b07      	ldrlt	r3, [sp, #28]
 80034f0:	9607      	strlt	r6, [sp, #28]
 80034f2:	1af2      	sublt	r2, r6, r3
 80034f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80034f6:	bfb6      	itet	lt
 80034f8:	189b      	addlt	r3, r3, r2
 80034fa:	1b9e      	subge	r6, r3, r6
 80034fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	bfb8      	it	lt
 8003502:	2600      	movlt	r6, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	bfb7      	itett	lt
 8003508:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800350c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003510:	1a9d      	sublt	r5, r3, r2
 8003512:	2300      	movlt	r3, #0
 8003514:	e734      	b.n	8003380 <_dtoa_r+0x720>
 8003516:	9e07      	ldr	r6, [sp, #28]
 8003518:	9d04      	ldr	r5, [sp, #16]
 800351a:	9f08      	ldr	r7, [sp, #32]
 800351c:	e73b      	b.n	8003396 <_dtoa_r+0x736>
 800351e:	9a07      	ldr	r2, [sp, #28]
 8003520:	e767      	b.n	80033f2 <_dtoa_r+0x792>
 8003522:	9b06      	ldr	r3, [sp, #24]
 8003524:	2b01      	cmp	r3, #1
 8003526:	dc18      	bgt.n	800355a <_dtoa_r+0x8fa>
 8003528:	f1ba 0f00 	cmp.w	sl, #0
 800352c:	d115      	bne.n	800355a <_dtoa_r+0x8fa>
 800352e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003532:	b993      	cbnz	r3, 800355a <_dtoa_r+0x8fa>
 8003534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003538:	0d1b      	lsrs	r3, r3, #20
 800353a:	051b      	lsls	r3, r3, #20
 800353c:	b183      	cbz	r3, 8003560 <_dtoa_r+0x900>
 800353e:	9b04      	ldr	r3, [sp, #16]
 8003540:	3301      	adds	r3, #1
 8003542:	9304      	str	r3, [sp, #16]
 8003544:	9b05      	ldr	r3, [sp, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	9305      	str	r3, [sp, #20]
 800354a:	f04f 0801 	mov.w	r8, #1
 800354e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af6a 	bne.w	800342a <_dtoa_r+0x7ca>
 8003556:	2001      	movs	r0, #1
 8003558:	e76f      	b.n	800343a <_dtoa_r+0x7da>
 800355a:	f04f 0800 	mov.w	r8, #0
 800355e:	e7f6      	b.n	800354e <_dtoa_r+0x8ee>
 8003560:	4698      	mov	r8, r3
 8003562:	e7f4      	b.n	800354e <_dtoa_r+0x8ee>
 8003564:	f43f af7d 	beq.w	8003462 <_dtoa_r+0x802>
 8003568:	4618      	mov	r0, r3
 800356a:	301c      	adds	r0, #28
 800356c:	e772      	b.n	8003454 <_dtoa_r+0x7f4>
 800356e:	9b03      	ldr	r3, [sp, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	dc37      	bgt.n	80035e4 <_dtoa_r+0x984>
 8003574:	9b06      	ldr	r3, [sp, #24]
 8003576:	2b02      	cmp	r3, #2
 8003578:	dd34      	ble.n	80035e4 <_dtoa_r+0x984>
 800357a:	9b03      	ldr	r3, [sp, #12]
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	9b02      	ldr	r3, [sp, #8]
 8003580:	b96b      	cbnz	r3, 800359e <_dtoa_r+0x93e>
 8003582:	4631      	mov	r1, r6
 8003584:	2205      	movs	r2, #5
 8003586:	4620      	mov	r0, r4
 8003588:	f000 face 	bl	8003b28 <__multadd>
 800358c:	4601      	mov	r1, r0
 800358e:	4606      	mov	r6, r0
 8003590:	ee18 0a10 	vmov	r0, s16
 8003594:	f000 fce8 	bl	8003f68 <__mcmp>
 8003598:	2800      	cmp	r0, #0
 800359a:	f73f adbb 	bgt.w	8003114 <_dtoa_r+0x4b4>
 800359e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a0:	9d01      	ldr	r5, [sp, #4]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f04f 0800 	mov.w	r8, #0
 80035aa:	4631      	mov	r1, r6
 80035ac:	4620      	mov	r0, r4
 80035ae:	f000 fa99 	bl	8003ae4 <_Bfree>
 80035b2:	2f00      	cmp	r7, #0
 80035b4:	f43f aea4 	beq.w	8003300 <_dtoa_r+0x6a0>
 80035b8:	f1b8 0f00 	cmp.w	r8, #0
 80035bc:	d005      	beq.n	80035ca <_dtoa_r+0x96a>
 80035be:	45b8      	cmp	r8, r7
 80035c0:	d003      	beq.n	80035ca <_dtoa_r+0x96a>
 80035c2:	4641      	mov	r1, r8
 80035c4:	4620      	mov	r0, r4
 80035c6:	f000 fa8d 	bl	8003ae4 <_Bfree>
 80035ca:	4639      	mov	r1, r7
 80035cc:	4620      	mov	r0, r4
 80035ce:	f000 fa89 	bl	8003ae4 <_Bfree>
 80035d2:	e695      	b.n	8003300 <_dtoa_r+0x6a0>
 80035d4:	2600      	movs	r6, #0
 80035d6:	4637      	mov	r7, r6
 80035d8:	e7e1      	b.n	800359e <_dtoa_r+0x93e>
 80035da:	9700      	str	r7, [sp, #0]
 80035dc:	4637      	mov	r7, r6
 80035de:	e599      	b.n	8003114 <_dtoa_r+0x4b4>
 80035e0:	40240000 	.word	0x40240000
 80035e4:	9b08      	ldr	r3, [sp, #32]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80ca 	beq.w	8003780 <_dtoa_r+0xb20>
 80035ec:	9b03      	ldr	r3, [sp, #12]
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	dd05      	ble.n	8003600 <_dtoa_r+0x9a0>
 80035f4:	4639      	mov	r1, r7
 80035f6:	462a      	mov	r2, r5
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 fc45 	bl	8003e88 <__lshift>
 80035fe:	4607      	mov	r7, r0
 8003600:	f1b8 0f00 	cmp.w	r8, #0
 8003604:	d05b      	beq.n	80036be <_dtoa_r+0xa5e>
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4620      	mov	r0, r4
 800360a:	f000 fa2b 	bl	8003a64 <_Balloc>
 800360e:	4605      	mov	r5, r0
 8003610:	b928      	cbnz	r0, 800361e <_dtoa_r+0x9be>
 8003612:	4b87      	ldr	r3, [pc, #540]	; (8003830 <_dtoa_r+0xbd0>)
 8003614:	4602      	mov	r2, r0
 8003616:	f240 21ea 	movw	r1, #746	; 0x2ea
 800361a:	f7ff bb3b 	b.w	8002c94 <_dtoa_r+0x34>
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	3202      	adds	r2, #2
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	f107 010c 	add.w	r1, r7, #12
 8003628:	300c      	adds	r0, #12
 800362a:	f000 fa0d 	bl	8003a48 <memcpy>
 800362e:	2201      	movs	r2, #1
 8003630:	4629      	mov	r1, r5
 8003632:	4620      	mov	r0, r4
 8003634:	f000 fc28 	bl	8003e88 <__lshift>
 8003638:	9b01      	ldr	r3, [sp, #4]
 800363a:	f103 0901 	add.w	r9, r3, #1
 800363e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003642:	4413      	add	r3, r2
 8003644:	9305      	str	r3, [sp, #20]
 8003646:	f00a 0301 	and.w	r3, sl, #1
 800364a:	46b8      	mov	r8, r7
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	4607      	mov	r7, r0
 8003650:	4631      	mov	r1, r6
 8003652:	ee18 0a10 	vmov	r0, s16
 8003656:	f7ff fa75 	bl	8002b44 <quorem>
 800365a:	4641      	mov	r1, r8
 800365c:	9002      	str	r0, [sp, #8]
 800365e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003662:	ee18 0a10 	vmov	r0, s16
 8003666:	f000 fc7f 	bl	8003f68 <__mcmp>
 800366a:	463a      	mov	r2, r7
 800366c:	9003      	str	r0, [sp, #12]
 800366e:	4631      	mov	r1, r6
 8003670:	4620      	mov	r0, r4
 8003672:	f000 fc95 	bl	8003fa0 <__mdiff>
 8003676:	68c2      	ldr	r2, [r0, #12]
 8003678:	f109 3bff 	add.w	fp, r9, #4294967295
 800367c:	4605      	mov	r5, r0
 800367e:	bb02      	cbnz	r2, 80036c2 <_dtoa_r+0xa62>
 8003680:	4601      	mov	r1, r0
 8003682:	ee18 0a10 	vmov	r0, s16
 8003686:	f000 fc6f 	bl	8003f68 <__mcmp>
 800368a:	4602      	mov	r2, r0
 800368c:	4629      	mov	r1, r5
 800368e:	4620      	mov	r0, r4
 8003690:	9207      	str	r2, [sp, #28]
 8003692:	f000 fa27 	bl	8003ae4 <_Bfree>
 8003696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800369a:	ea43 0102 	orr.w	r1, r3, r2
 800369e:	9b04      	ldr	r3, [sp, #16]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	464d      	mov	r5, r9
 80036a4:	d10f      	bne.n	80036c6 <_dtoa_r+0xa66>
 80036a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80036aa:	d02a      	beq.n	8003702 <_dtoa_r+0xaa2>
 80036ac:	9b03      	ldr	r3, [sp, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	dd02      	ble.n	80036b8 <_dtoa_r+0xa58>
 80036b2:	9b02      	ldr	r3, [sp, #8]
 80036b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80036b8:	f88b a000 	strb.w	sl, [fp]
 80036bc:	e775      	b.n	80035aa <_dtoa_r+0x94a>
 80036be:	4638      	mov	r0, r7
 80036c0:	e7ba      	b.n	8003638 <_dtoa_r+0x9d8>
 80036c2:	2201      	movs	r2, #1
 80036c4:	e7e2      	b.n	800368c <_dtoa_r+0xa2c>
 80036c6:	9b03      	ldr	r3, [sp, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db04      	blt.n	80036d6 <_dtoa_r+0xa76>
 80036cc:	9906      	ldr	r1, [sp, #24]
 80036ce:	430b      	orrs	r3, r1
 80036d0:	9904      	ldr	r1, [sp, #16]
 80036d2:	430b      	orrs	r3, r1
 80036d4:	d122      	bne.n	800371c <_dtoa_r+0xabc>
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	ddee      	ble.n	80036b8 <_dtoa_r+0xa58>
 80036da:	ee18 1a10 	vmov	r1, s16
 80036de:	2201      	movs	r2, #1
 80036e0:	4620      	mov	r0, r4
 80036e2:	f000 fbd1 	bl	8003e88 <__lshift>
 80036e6:	4631      	mov	r1, r6
 80036e8:	ee08 0a10 	vmov	s16, r0
 80036ec:	f000 fc3c 	bl	8003f68 <__mcmp>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	dc03      	bgt.n	80036fc <_dtoa_r+0xa9c>
 80036f4:	d1e0      	bne.n	80036b8 <_dtoa_r+0xa58>
 80036f6:	f01a 0f01 	tst.w	sl, #1
 80036fa:	d0dd      	beq.n	80036b8 <_dtoa_r+0xa58>
 80036fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003700:	d1d7      	bne.n	80036b2 <_dtoa_r+0xa52>
 8003702:	2339      	movs	r3, #57	; 0x39
 8003704:	f88b 3000 	strb.w	r3, [fp]
 8003708:	462b      	mov	r3, r5
 800370a:	461d      	mov	r5, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003712:	2a39      	cmp	r2, #57	; 0x39
 8003714:	d071      	beq.n	80037fa <_dtoa_r+0xb9a>
 8003716:	3201      	adds	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e746      	b.n	80035aa <_dtoa_r+0x94a>
 800371c:	2a00      	cmp	r2, #0
 800371e:	dd07      	ble.n	8003730 <_dtoa_r+0xad0>
 8003720:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003724:	d0ed      	beq.n	8003702 <_dtoa_r+0xaa2>
 8003726:	f10a 0301 	add.w	r3, sl, #1
 800372a:	f88b 3000 	strb.w	r3, [fp]
 800372e:	e73c      	b.n	80035aa <_dtoa_r+0x94a>
 8003730:	9b05      	ldr	r3, [sp, #20]
 8003732:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003736:	4599      	cmp	r9, r3
 8003738:	d047      	beq.n	80037ca <_dtoa_r+0xb6a>
 800373a:	ee18 1a10 	vmov	r1, s16
 800373e:	2300      	movs	r3, #0
 8003740:	220a      	movs	r2, #10
 8003742:	4620      	mov	r0, r4
 8003744:	f000 f9f0 	bl	8003b28 <__multadd>
 8003748:	45b8      	cmp	r8, r7
 800374a:	ee08 0a10 	vmov	s16, r0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	f04f 020a 	mov.w	r2, #10
 8003756:	4641      	mov	r1, r8
 8003758:	4620      	mov	r0, r4
 800375a:	d106      	bne.n	800376a <_dtoa_r+0xb0a>
 800375c:	f000 f9e4 	bl	8003b28 <__multadd>
 8003760:	4680      	mov	r8, r0
 8003762:	4607      	mov	r7, r0
 8003764:	f109 0901 	add.w	r9, r9, #1
 8003768:	e772      	b.n	8003650 <_dtoa_r+0x9f0>
 800376a:	f000 f9dd 	bl	8003b28 <__multadd>
 800376e:	4639      	mov	r1, r7
 8003770:	4680      	mov	r8, r0
 8003772:	2300      	movs	r3, #0
 8003774:	220a      	movs	r2, #10
 8003776:	4620      	mov	r0, r4
 8003778:	f000 f9d6 	bl	8003b28 <__multadd>
 800377c:	4607      	mov	r7, r0
 800377e:	e7f1      	b.n	8003764 <_dtoa_r+0xb04>
 8003780:	9b03      	ldr	r3, [sp, #12]
 8003782:	9302      	str	r3, [sp, #8]
 8003784:	9d01      	ldr	r5, [sp, #4]
 8003786:	ee18 0a10 	vmov	r0, s16
 800378a:	4631      	mov	r1, r6
 800378c:	f7ff f9da 	bl	8002b44 <quorem>
 8003790:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003794:	9b01      	ldr	r3, [sp, #4]
 8003796:	f805 ab01 	strb.w	sl, [r5], #1
 800379a:	1aea      	subs	r2, r5, r3
 800379c:	9b02      	ldr	r3, [sp, #8]
 800379e:	4293      	cmp	r3, r2
 80037a0:	dd09      	ble.n	80037b6 <_dtoa_r+0xb56>
 80037a2:	ee18 1a10 	vmov	r1, s16
 80037a6:	2300      	movs	r3, #0
 80037a8:	220a      	movs	r2, #10
 80037aa:	4620      	mov	r0, r4
 80037ac:	f000 f9bc 	bl	8003b28 <__multadd>
 80037b0:	ee08 0a10 	vmov	s16, r0
 80037b4:	e7e7      	b.n	8003786 <_dtoa_r+0xb26>
 80037b6:	9b02      	ldr	r3, [sp, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bfc8      	it	gt
 80037bc:	461d      	movgt	r5, r3
 80037be:	9b01      	ldr	r3, [sp, #4]
 80037c0:	bfd8      	it	le
 80037c2:	2501      	movle	r5, #1
 80037c4:	441d      	add	r5, r3
 80037c6:	f04f 0800 	mov.w	r8, #0
 80037ca:	ee18 1a10 	vmov	r1, s16
 80037ce:	2201      	movs	r2, #1
 80037d0:	4620      	mov	r0, r4
 80037d2:	f000 fb59 	bl	8003e88 <__lshift>
 80037d6:	4631      	mov	r1, r6
 80037d8:	ee08 0a10 	vmov	s16, r0
 80037dc:	f000 fbc4 	bl	8003f68 <__mcmp>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	dc91      	bgt.n	8003708 <_dtoa_r+0xaa8>
 80037e4:	d102      	bne.n	80037ec <_dtoa_r+0xb8c>
 80037e6:	f01a 0f01 	tst.w	sl, #1
 80037ea:	d18d      	bne.n	8003708 <_dtoa_r+0xaa8>
 80037ec:	462b      	mov	r3, r5
 80037ee:	461d      	mov	r5, r3
 80037f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80037f4:	2a30      	cmp	r2, #48	; 0x30
 80037f6:	d0fa      	beq.n	80037ee <_dtoa_r+0xb8e>
 80037f8:	e6d7      	b.n	80035aa <_dtoa_r+0x94a>
 80037fa:	9a01      	ldr	r2, [sp, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d184      	bne.n	800370a <_dtoa_r+0xaaa>
 8003800:	9b00      	ldr	r3, [sp, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2331      	movs	r3, #49	; 0x31
 8003808:	7013      	strb	r3, [r2, #0]
 800380a:	e6ce      	b.n	80035aa <_dtoa_r+0x94a>
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <_dtoa_r+0xbd4>)
 800380e:	f7ff ba95 	b.w	8002d3c <_dtoa_r+0xdc>
 8003812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003814:	2b00      	cmp	r3, #0
 8003816:	f47f aa6e 	bne.w	8002cf6 <_dtoa_r+0x96>
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <_dtoa_r+0xbd8>)
 800381c:	f7ff ba8e 	b.w	8002d3c <_dtoa_r+0xdc>
 8003820:	9b02      	ldr	r3, [sp, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	dcae      	bgt.n	8003784 <_dtoa_r+0xb24>
 8003826:	9b06      	ldr	r3, [sp, #24]
 8003828:	2b02      	cmp	r3, #2
 800382a:	f73f aea8 	bgt.w	800357e <_dtoa_r+0x91e>
 800382e:	e7a9      	b.n	8003784 <_dtoa_r+0xb24>
 8003830:	08004ddb 	.word	0x08004ddb
 8003834:	08004d38 	.word	0x08004d38
 8003838:	08004d5c 	.word	0x08004d5c

0800383c <std>:
 800383c:	2300      	movs	r3, #0
 800383e:	b510      	push	{r4, lr}
 8003840:	4604      	mov	r4, r0
 8003842:	e9c0 3300 	strd	r3, r3, [r0]
 8003846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800384a:	6083      	str	r3, [r0, #8]
 800384c:	8181      	strh	r1, [r0, #12]
 800384e:	6643      	str	r3, [r0, #100]	; 0x64
 8003850:	81c2      	strh	r2, [r0, #14]
 8003852:	6183      	str	r3, [r0, #24]
 8003854:	4619      	mov	r1, r3
 8003856:	2208      	movs	r2, #8
 8003858:	305c      	adds	r0, #92	; 0x5c
 800385a:	f7fe fce9 	bl	8002230 <memset>
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <std+0x38>)
 8003860:	6263      	str	r3, [r4, #36]	; 0x24
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <std+0x3c>)
 8003864:	62a3      	str	r3, [r4, #40]	; 0x28
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <std+0x40>)
 8003868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <std+0x44>)
 800386c:	6224      	str	r4, [r4, #32]
 800386e:	6323      	str	r3, [r4, #48]	; 0x30
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop
 8003874:	0800462d 	.word	0x0800462d
 8003878:	0800464f 	.word	0x0800464f
 800387c:	08004687 	.word	0x08004687
 8003880:	080046ab 	.word	0x080046ab

08003884 <_cleanup_r>:
 8003884:	4901      	ldr	r1, [pc, #4]	; (800388c <_cleanup_r+0x8>)
 8003886:	f000 b8af 	b.w	80039e8 <_fwalk_reent>
 800388a:	bf00      	nop
 800388c:	080049c1 	.word	0x080049c1

08003890 <__sfmoreglue>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	2268      	movs	r2, #104	; 0x68
 8003894:	1e4d      	subs	r5, r1, #1
 8003896:	4355      	muls	r5, r2
 8003898:	460e      	mov	r6, r1
 800389a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800389e:	f000 fce7 	bl	8004270 <_malloc_r>
 80038a2:	4604      	mov	r4, r0
 80038a4:	b140      	cbz	r0, 80038b8 <__sfmoreglue+0x28>
 80038a6:	2100      	movs	r1, #0
 80038a8:	e9c0 1600 	strd	r1, r6, [r0]
 80038ac:	300c      	adds	r0, #12
 80038ae:	60a0      	str	r0, [r4, #8]
 80038b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038b4:	f7fe fcbc 	bl	8002230 <memset>
 80038b8:	4620      	mov	r0, r4
 80038ba:	bd70      	pop	{r4, r5, r6, pc}

080038bc <__sfp_lock_acquire>:
 80038bc:	4801      	ldr	r0, [pc, #4]	; (80038c4 <__sfp_lock_acquire+0x8>)
 80038be:	f000 b8b8 	b.w	8003a32 <__retarget_lock_acquire_recursive>
 80038c2:	bf00      	nop
 80038c4:	20000201 	.word	0x20000201

080038c8 <__sfp_lock_release>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__sfp_lock_release+0x8>)
 80038ca:	f000 b8b3 	b.w	8003a34 <__retarget_lock_release_recursive>
 80038ce:	bf00      	nop
 80038d0:	20000201 	.word	0x20000201

080038d4 <__sinit_lock_acquire>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__sinit_lock_acquire+0x8>)
 80038d6:	f000 b8ac 	b.w	8003a32 <__retarget_lock_acquire_recursive>
 80038da:	bf00      	nop
 80038dc:	20000202 	.word	0x20000202

080038e0 <__sinit_lock_release>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__sinit_lock_release+0x8>)
 80038e2:	f000 b8a7 	b.w	8003a34 <__retarget_lock_release_recursive>
 80038e6:	bf00      	nop
 80038e8:	20000202 	.word	0x20000202

080038ec <__sinit>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	f7ff fff0 	bl	80038d4 <__sinit_lock_acquire>
 80038f4:	69a3      	ldr	r3, [r4, #24]
 80038f6:	b11b      	cbz	r3, 8003900 <__sinit+0x14>
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fc:	f7ff bff0 	b.w	80038e0 <__sinit_lock_release>
 8003900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003904:	6523      	str	r3, [r4, #80]	; 0x50
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <__sinit+0x68>)
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <__sinit+0x6c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	62a2      	str	r2, [r4, #40]	; 0x28
 800390e:	42a3      	cmp	r3, r4
 8003910:	bf04      	itt	eq
 8003912:	2301      	moveq	r3, #1
 8003914:	61a3      	streq	r3, [r4, #24]
 8003916:	4620      	mov	r0, r4
 8003918:	f000 f820 	bl	800395c <__sfp>
 800391c:	6060      	str	r0, [r4, #4]
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f81c 	bl	800395c <__sfp>
 8003924:	60a0      	str	r0, [r4, #8]
 8003926:	4620      	mov	r0, r4
 8003928:	f000 f818 	bl	800395c <__sfp>
 800392c:	2200      	movs	r2, #0
 800392e:	60e0      	str	r0, [r4, #12]
 8003930:	2104      	movs	r1, #4
 8003932:	6860      	ldr	r0, [r4, #4]
 8003934:	f7ff ff82 	bl	800383c <std>
 8003938:	68a0      	ldr	r0, [r4, #8]
 800393a:	2201      	movs	r2, #1
 800393c:	2109      	movs	r1, #9
 800393e:	f7ff ff7d 	bl	800383c <std>
 8003942:	68e0      	ldr	r0, [r4, #12]
 8003944:	2202      	movs	r2, #2
 8003946:	2112      	movs	r1, #18
 8003948:	f7ff ff78 	bl	800383c <std>
 800394c:	2301      	movs	r3, #1
 800394e:	61a3      	str	r3, [r4, #24]
 8003950:	e7d2      	b.n	80038f8 <__sinit+0xc>
 8003952:	bf00      	nop
 8003954:	08004d24 	.word	0x08004d24
 8003958:	08003885 	.word	0x08003885

0800395c <__sfp>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	4607      	mov	r7, r0
 8003960:	f7ff ffac 	bl	80038bc <__sfp_lock_acquire>
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <__sfp+0x84>)
 8003966:	681e      	ldr	r6, [r3, #0]
 8003968:	69b3      	ldr	r3, [r6, #24]
 800396a:	b913      	cbnz	r3, 8003972 <__sfp+0x16>
 800396c:	4630      	mov	r0, r6
 800396e:	f7ff ffbd 	bl	80038ec <__sinit>
 8003972:	3648      	adds	r6, #72	; 0x48
 8003974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003978:	3b01      	subs	r3, #1
 800397a:	d503      	bpl.n	8003984 <__sfp+0x28>
 800397c:	6833      	ldr	r3, [r6, #0]
 800397e:	b30b      	cbz	r3, 80039c4 <__sfp+0x68>
 8003980:	6836      	ldr	r6, [r6, #0]
 8003982:	e7f7      	b.n	8003974 <__sfp+0x18>
 8003984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003988:	b9d5      	cbnz	r5, 80039c0 <__sfp+0x64>
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <__sfp+0x88>)
 800398c:	60e3      	str	r3, [r4, #12]
 800398e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003992:	6665      	str	r5, [r4, #100]	; 0x64
 8003994:	f000 f84c 	bl	8003a30 <__retarget_lock_init_recursive>
 8003998:	f7ff ff96 	bl	80038c8 <__sfp_lock_release>
 800399c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039a4:	6025      	str	r5, [r4, #0]
 80039a6:	61a5      	str	r5, [r4, #24]
 80039a8:	2208      	movs	r2, #8
 80039aa:	4629      	mov	r1, r5
 80039ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039b0:	f7fe fc3e 	bl	8002230 <memset>
 80039b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039bc:	4620      	mov	r0, r4
 80039be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c0:	3468      	adds	r4, #104	; 0x68
 80039c2:	e7d9      	b.n	8003978 <__sfp+0x1c>
 80039c4:	2104      	movs	r1, #4
 80039c6:	4638      	mov	r0, r7
 80039c8:	f7ff ff62 	bl	8003890 <__sfmoreglue>
 80039cc:	4604      	mov	r4, r0
 80039ce:	6030      	str	r0, [r6, #0]
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d1d5      	bne.n	8003980 <__sfp+0x24>
 80039d4:	f7ff ff78 	bl	80038c8 <__sfp_lock_release>
 80039d8:	230c      	movs	r3, #12
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	e7ee      	b.n	80039bc <__sfp+0x60>
 80039de:	bf00      	nop
 80039e0:	08004d24 	.word	0x08004d24
 80039e4:	ffff0001 	.word	0xffff0001

080039e8 <_fwalk_reent>:
 80039e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ec:	4606      	mov	r6, r0
 80039ee:	4688      	mov	r8, r1
 80039f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039f4:	2700      	movs	r7, #0
 80039f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039fa:	f1b9 0901 	subs.w	r9, r9, #1
 80039fe:	d505      	bpl.n	8003a0c <_fwalk_reent+0x24>
 8003a00:	6824      	ldr	r4, [r4, #0]
 8003a02:	2c00      	cmp	r4, #0
 8003a04:	d1f7      	bne.n	80039f6 <_fwalk_reent+0xe>
 8003a06:	4638      	mov	r0, r7
 8003a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a0c:	89ab      	ldrh	r3, [r5, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d907      	bls.n	8003a22 <_fwalk_reent+0x3a>
 8003a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d003      	beq.n	8003a22 <_fwalk_reent+0x3a>
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	47c0      	blx	r8
 8003a20:	4307      	orrs	r7, r0
 8003a22:	3568      	adds	r5, #104	; 0x68
 8003a24:	e7e9      	b.n	80039fa <_fwalk_reent+0x12>
	...

08003a28 <_localeconv_r>:
 8003a28:	4800      	ldr	r0, [pc, #0]	; (8003a2c <_localeconv_r+0x4>)
 8003a2a:	4770      	bx	lr
 8003a2c:	20000160 	.word	0x20000160

08003a30 <__retarget_lock_init_recursive>:
 8003a30:	4770      	bx	lr

08003a32 <__retarget_lock_acquire_recursive>:
 8003a32:	4770      	bx	lr

08003a34 <__retarget_lock_release_recursive>:
 8003a34:	4770      	bx	lr
	...

08003a38 <malloc>:
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <malloc+0xc>)
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f000 bc17 	b.w	8004270 <_malloc_r>
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <memcpy>:
 8003a48:	440a      	add	r2, r1
 8003a4a:	4291      	cmp	r1, r2
 8003a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a50:	d100      	bne.n	8003a54 <memcpy+0xc>
 8003a52:	4770      	bx	lr
 8003a54:	b510      	push	{r4, lr}
 8003a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a5e:	4291      	cmp	r1, r2
 8003a60:	d1f9      	bne.n	8003a56 <memcpy+0xe>
 8003a62:	bd10      	pop	{r4, pc}

08003a64 <_Balloc>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a68:	4604      	mov	r4, r0
 8003a6a:	460d      	mov	r5, r1
 8003a6c:	b976      	cbnz	r6, 8003a8c <_Balloc+0x28>
 8003a6e:	2010      	movs	r0, #16
 8003a70:	f7ff ffe2 	bl	8003a38 <malloc>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6260      	str	r0, [r4, #36]	; 0x24
 8003a78:	b920      	cbnz	r0, 8003a84 <_Balloc+0x20>
 8003a7a:	4b18      	ldr	r3, [pc, #96]	; (8003adc <_Balloc+0x78>)
 8003a7c:	4818      	ldr	r0, [pc, #96]	; (8003ae0 <_Balloc+0x7c>)
 8003a7e:	2166      	movs	r1, #102	; 0x66
 8003a80:	f000 feea 	bl	8004858 <__assert_func>
 8003a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a88:	6006      	str	r6, [r0, #0]
 8003a8a:	60c6      	str	r6, [r0, #12]
 8003a8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a8e:	68f3      	ldr	r3, [r6, #12]
 8003a90:	b183      	cbz	r3, 8003ab4 <_Balloc+0x50>
 8003a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003a9a:	b9b8      	cbnz	r0, 8003acc <_Balloc+0x68>
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8003aa2:	1d72      	adds	r2, r6, #5
 8003aa4:	0092      	lsls	r2, r2, #2
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f000 fb60 	bl	800416c <_calloc_r>
 8003aac:	b160      	cbz	r0, 8003ac8 <_Balloc+0x64>
 8003aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ab2:	e00e      	b.n	8003ad2 <_Balloc+0x6e>
 8003ab4:	2221      	movs	r2, #33	; 0x21
 8003ab6:	2104      	movs	r1, #4
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f000 fb57 	bl	800416c <_calloc_r>
 8003abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac0:	60f0      	str	r0, [r6, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e4      	bne.n	8003a92 <_Balloc+0x2e>
 8003ac8:	2000      	movs	r0, #0
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	6802      	ldr	r2, [r0, #0]
 8003ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003ad8:	e7f7      	b.n	8003aca <_Balloc+0x66>
 8003ada:	bf00      	nop
 8003adc:	08004d69 	.word	0x08004d69
 8003ae0:	08004e4c 	.word	0x08004e4c

08003ae4 <_Bfree>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003ae8:	4605      	mov	r5, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	b976      	cbnz	r6, 8003b0c <_Bfree+0x28>
 8003aee:	2010      	movs	r0, #16
 8003af0:	f7ff ffa2 	bl	8003a38 <malloc>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6268      	str	r0, [r5, #36]	; 0x24
 8003af8:	b920      	cbnz	r0, 8003b04 <_Bfree+0x20>
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <_Bfree+0x3c>)
 8003afc:	4809      	ldr	r0, [pc, #36]	; (8003b24 <_Bfree+0x40>)
 8003afe:	218a      	movs	r1, #138	; 0x8a
 8003b00:	f000 feaa 	bl	8004858 <__assert_func>
 8003b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b08:	6006      	str	r6, [r0, #0]
 8003b0a:	60c6      	str	r6, [r0, #12]
 8003b0c:	b13c      	cbz	r4, 8003b1e <_Bfree+0x3a>
 8003b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b10:	6862      	ldr	r2, [r4, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b18:	6021      	str	r1, [r4, #0]
 8003b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	08004d69 	.word	0x08004d69
 8003b24:	08004e4c 	.word	0x08004e4c

08003b28 <__multadd>:
 8003b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2c:	690d      	ldr	r5, [r1, #16]
 8003b2e:	4607      	mov	r7, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	461e      	mov	r6, r3
 8003b34:	f101 0c14 	add.w	ip, r1, #20
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8003b3e:	b299      	uxth	r1, r3
 8003b40:	fb02 6101 	mla	r1, r2, r1, r6
 8003b44:	0c1e      	lsrs	r6, r3, #16
 8003b46:	0c0b      	lsrs	r3, r1, #16
 8003b48:	fb02 3306 	mla	r3, r2, r6, r3
 8003b4c:	b289      	uxth	r1, r1
 8003b4e:	3001      	adds	r0, #1
 8003b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003b54:	4285      	cmp	r5, r0
 8003b56:	f84c 1b04 	str.w	r1, [ip], #4
 8003b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003b5e:	dcec      	bgt.n	8003b3a <__multadd+0x12>
 8003b60:	b30e      	cbz	r6, 8003ba6 <__multadd+0x7e>
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	42ab      	cmp	r3, r5
 8003b66:	dc19      	bgt.n	8003b9c <__multadd+0x74>
 8003b68:	6861      	ldr	r1, [r4, #4]
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	3101      	adds	r1, #1
 8003b6e:	f7ff ff79 	bl	8003a64 <_Balloc>
 8003b72:	4680      	mov	r8, r0
 8003b74:	b928      	cbnz	r0, 8003b82 <__multadd+0x5a>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <__multadd+0x84>)
 8003b7a:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <__multadd+0x88>)
 8003b7c:	21b5      	movs	r1, #181	; 0xb5
 8003b7e:	f000 fe6b 	bl	8004858 <__assert_func>
 8003b82:	6922      	ldr	r2, [r4, #16]
 8003b84:	3202      	adds	r2, #2
 8003b86:	f104 010c 	add.w	r1, r4, #12
 8003b8a:	0092      	lsls	r2, r2, #2
 8003b8c:	300c      	adds	r0, #12
 8003b8e:	f7ff ff5b 	bl	8003a48 <memcpy>
 8003b92:	4621      	mov	r1, r4
 8003b94:	4638      	mov	r0, r7
 8003b96:	f7ff ffa5 	bl	8003ae4 <_Bfree>
 8003b9a:	4644      	mov	r4, r8
 8003b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	615e      	str	r6, [r3, #20]
 8003ba4:	6125      	str	r5, [r4, #16]
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bac:	08004ddb 	.word	0x08004ddb
 8003bb0:	08004e4c 	.word	0x08004e4c

08003bb4 <__hi0bits>:
 8003bb4:	0c03      	lsrs	r3, r0, #16
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	b9d3      	cbnz	r3, 8003bf0 <__hi0bits+0x3c>
 8003bba:	0400      	lsls	r0, r0, #16
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003bc2:	bf04      	itt	eq
 8003bc4:	0200      	lsleq	r0, r0, #8
 8003bc6:	3308      	addeq	r3, #8
 8003bc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003bcc:	bf04      	itt	eq
 8003bce:	0100      	lsleq	r0, r0, #4
 8003bd0:	3304      	addeq	r3, #4
 8003bd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003bd6:	bf04      	itt	eq
 8003bd8:	0080      	lsleq	r0, r0, #2
 8003bda:	3302      	addeq	r3, #2
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	db05      	blt.n	8003bec <__hi0bits+0x38>
 8003be0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003be4:	f103 0301 	add.w	r3, r3, #1
 8003be8:	bf08      	it	eq
 8003bea:	2320      	moveq	r3, #32
 8003bec:	4618      	mov	r0, r3
 8003bee:	4770      	bx	lr
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e7e4      	b.n	8003bbe <__hi0bits+0xa>

08003bf4 <__lo0bits>:
 8003bf4:	6803      	ldr	r3, [r0, #0]
 8003bf6:	f013 0207 	ands.w	r2, r3, #7
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	d00b      	beq.n	8003c16 <__lo0bits+0x22>
 8003bfe:	07da      	lsls	r2, r3, #31
 8003c00:	d423      	bmi.n	8003c4a <__lo0bits+0x56>
 8003c02:	0798      	lsls	r0, r3, #30
 8003c04:	bf49      	itett	mi
 8003c06:	085b      	lsrmi	r3, r3, #1
 8003c08:	089b      	lsrpl	r3, r3, #2
 8003c0a:	2001      	movmi	r0, #1
 8003c0c:	600b      	strmi	r3, [r1, #0]
 8003c0e:	bf5c      	itt	pl
 8003c10:	600b      	strpl	r3, [r1, #0]
 8003c12:	2002      	movpl	r0, #2
 8003c14:	4770      	bx	lr
 8003c16:	b298      	uxth	r0, r3
 8003c18:	b9a8      	cbnz	r0, 8003c46 <__lo0bits+0x52>
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	2010      	movs	r0, #16
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	b90a      	cbnz	r2, 8003c26 <__lo0bits+0x32>
 8003c22:	3008      	adds	r0, #8
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	071a      	lsls	r2, r3, #28
 8003c28:	bf04      	itt	eq
 8003c2a:	091b      	lsreq	r3, r3, #4
 8003c2c:	3004      	addeq	r0, #4
 8003c2e:	079a      	lsls	r2, r3, #30
 8003c30:	bf04      	itt	eq
 8003c32:	089b      	lsreq	r3, r3, #2
 8003c34:	3002      	addeq	r0, #2
 8003c36:	07da      	lsls	r2, r3, #31
 8003c38:	d403      	bmi.n	8003c42 <__lo0bits+0x4e>
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	f100 0001 	add.w	r0, r0, #1
 8003c40:	d005      	beq.n	8003c4e <__lo0bits+0x5a>
 8003c42:	600b      	str	r3, [r1, #0]
 8003c44:	4770      	bx	lr
 8003c46:	4610      	mov	r0, r2
 8003c48:	e7e9      	b.n	8003c1e <__lo0bits+0x2a>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	4770      	bx	lr
 8003c4e:	2020      	movs	r0, #32
 8003c50:	4770      	bx	lr
	...

08003c54 <__i2b>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	460c      	mov	r4, r1
 8003c58:	2101      	movs	r1, #1
 8003c5a:	f7ff ff03 	bl	8003a64 <_Balloc>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	b928      	cbnz	r0, 8003c6e <__i2b+0x1a>
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <__i2b+0x24>)
 8003c64:	4805      	ldr	r0, [pc, #20]	; (8003c7c <__i2b+0x28>)
 8003c66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c6a:	f000 fdf5 	bl	8004858 <__assert_func>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	6144      	str	r4, [r0, #20]
 8003c72:	6103      	str	r3, [r0, #16]
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	08004ddb 	.word	0x08004ddb
 8003c7c:	08004e4c 	.word	0x08004e4c

08003c80 <__multiply>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	4691      	mov	r9, r2
 8003c86:	690a      	ldr	r2, [r1, #16]
 8003c88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	bfb8      	it	lt
 8003c90:	460b      	movlt	r3, r1
 8003c92:	460c      	mov	r4, r1
 8003c94:	bfbc      	itt	lt
 8003c96:	464c      	movlt	r4, r9
 8003c98:	4699      	movlt	r9, r3
 8003c9a:	6927      	ldr	r7, [r4, #16]
 8003c9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003ca0:	68a3      	ldr	r3, [r4, #8]
 8003ca2:	6861      	ldr	r1, [r4, #4]
 8003ca4:	eb07 060a 	add.w	r6, r7, sl
 8003ca8:	42b3      	cmp	r3, r6
 8003caa:	b085      	sub	sp, #20
 8003cac:	bfb8      	it	lt
 8003cae:	3101      	addlt	r1, #1
 8003cb0:	f7ff fed8 	bl	8003a64 <_Balloc>
 8003cb4:	b930      	cbnz	r0, 8003cc4 <__multiply+0x44>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <__multiply+0x14c>)
 8003cba:	4845      	ldr	r0, [pc, #276]	; (8003dd0 <__multiply+0x150>)
 8003cbc:	f240 115d 	movw	r1, #349	; 0x15d
 8003cc0:	f000 fdca 	bl	8004858 <__assert_func>
 8003cc4:	f100 0514 	add.w	r5, r0, #20
 8003cc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003ccc:	462b      	mov	r3, r5
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4543      	cmp	r3, r8
 8003cd2:	d321      	bcc.n	8003d18 <__multiply+0x98>
 8003cd4:	f104 0314 	add.w	r3, r4, #20
 8003cd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003cdc:	f109 0314 	add.w	r3, r9, #20
 8003ce0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003ce4:	9202      	str	r2, [sp, #8]
 8003ce6:	1b3a      	subs	r2, r7, r4
 8003ce8:	3a15      	subs	r2, #21
 8003cea:	f022 0203 	bic.w	r2, r2, #3
 8003cee:	3204      	adds	r2, #4
 8003cf0:	f104 0115 	add.w	r1, r4, #21
 8003cf4:	428f      	cmp	r7, r1
 8003cf6:	bf38      	it	cc
 8003cf8:	2204      	movcc	r2, #4
 8003cfa:	9201      	str	r2, [sp, #4]
 8003cfc:	9a02      	ldr	r2, [sp, #8]
 8003cfe:	9303      	str	r3, [sp, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d80c      	bhi.n	8003d1e <__multiply+0x9e>
 8003d04:	2e00      	cmp	r6, #0
 8003d06:	dd03      	ble.n	8003d10 <__multiply+0x90>
 8003d08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05a      	beq.n	8003dc6 <__multiply+0x146>
 8003d10:	6106      	str	r6, [r0, #16]
 8003d12:	b005      	add	sp, #20
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d18:	f843 2b04 	str.w	r2, [r3], #4
 8003d1c:	e7d8      	b.n	8003cd0 <__multiply+0x50>
 8003d1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8003d22:	f1ba 0f00 	cmp.w	sl, #0
 8003d26:	d024      	beq.n	8003d72 <__multiply+0xf2>
 8003d28:	f104 0e14 	add.w	lr, r4, #20
 8003d2c:	46a9      	mov	r9, r5
 8003d2e:	f04f 0c00 	mov.w	ip, #0
 8003d32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003d36:	f8d9 1000 	ldr.w	r1, [r9]
 8003d3a:	fa1f fb82 	uxth.w	fp, r2
 8003d3e:	b289      	uxth	r1, r1
 8003d40:	fb0a 110b 	mla	r1, sl, fp, r1
 8003d44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003d48:	f8d9 2000 	ldr.w	r2, [r9]
 8003d4c:	4461      	add	r1, ip
 8003d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003d52:	fb0a c20b 	mla	r2, sl, fp, ip
 8003d56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003d5a:	b289      	uxth	r1, r1
 8003d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003d60:	4577      	cmp	r7, lr
 8003d62:	f849 1b04 	str.w	r1, [r9], #4
 8003d66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003d6a:	d8e2      	bhi.n	8003d32 <__multiply+0xb2>
 8003d6c:	9a01      	ldr	r2, [sp, #4]
 8003d6e:	f845 c002 	str.w	ip, [r5, r2]
 8003d72:	9a03      	ldr	r2, [sp, #12]
 8003d74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	f1b9 0f00 	cmp.w	r9, #0
 8003d7e:	d020      	beq.n	8003dc2 <__multiply+0x142>
 8003d80:	6829      	ldr	r1, [r5, #0]
 8003d82:	f104 0c14 	add.w	ip, r4, #20
 8003d86:	46ae      	mov	lr, r5
 8003d88:	f04f 0a00 	mov.w	sl, #0
 8003d8c:	f8bc b000 	ldrh.w	fp, [ip]
 8003d90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003d94:	fb09 220b 	mla	r2, r9, fp, r2
 8003d98:	4492      	add	sl, r2
 8003d9a:	b289      	uxth	r1, r1
 8003d9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003da0:	f84e 1b04 	str.w	r1, [lr], #4
 8003da4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003da8:	f8be 1000 	ldrh.w	r1, [lr]
 8003dac:	0c12      	lsrs	r2, r2, #16
 8003dae:	fb09 1102 	mla	r1, r9, r2, r1
 8003db2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003db6:	4567      	cmp	r7, ip
 8003db8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003dbc:	d8e6      	bhi.n	8003d8c <__multiply+0x10c>
 8003dbe:	9a01      	ldr	r2, [sp, #4]
 8003dc0:	50a9      	str	r1, [r5, r2]
 8003dc2:	3504      	adds	r5, #4
 8003dc4:	e79a      	b.n	8003cfc <__multiply+0x7c>
 8003dc6:	3e01      	subs	r6, #1
 8003dc8:	e79c      	b.n	8003d04 <__multiply+0x84>
 8003dca:	bf00      	nop
 8003dcc:	08004ddb 	.word	0x08004ddb
 8003dd0:	08004e4c 	.word	0x08004e4c

08003dd4 <__pow5mult>:
 8003dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd8:	4615      	mov	r5, r2
 8003dda:	f012 0203 	ands.w	r2, r2, #3
 8003dde:	4606      	mov	r6, r0
 8003de0:	460f      	mov	r7, r1
 8003de2:	d007      	beq.n	8003df4 <__pow5mult+0x20>
 8003de4:	4c25      	ldr	r4, [pc, #148]	; (8003e7c <__pow5mult+0xa8>)
 8003de6:	3a01      	subs	r2, #1
 8003de8:	2300      	movs	r3, #0
 8003dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003dee:	f7ff fe9b 	bl	8003b28 <__multadd>
 8003df2:	4607      	mov	r7, r0
 8003df4:	10ad      	asrs	r5, r5, #2
 8003df6:	d03d      	beq.n	8003e74 <__pow5mult+0xa0>
 8003df8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003dfa:	b97c      	cbnz	r4, 8003e1c <__pow5mult+0x48>
 8003dfc:	2010      	movs	r0, #16
 8003dfe:	f7ff fe1b 	bl	8003a38 <malloc>
 8003e02:	4602      	mov	r2, r0
 8003e04:	6270      	str	r0, [r6, #36]	; 0x24
 8003e06:	b928      	cbnz	r0, 8003e14 <__pow5mult+0x40>
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <__pow5mult+0xac>)
 8003e0a:	481e      	ldr	r0, [pc, #120]	; (8003e84 <__pow5mult+0xb0>)
 8003e0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003e10:	f000 fd22 	bl	8004858 <__assert_func>
 8003e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e18:	6004      	str	r4, [r0, #0]
 8003e1a:	60c4      	str	r4, [r0, #12]
 8003e1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e24:	b94c      	cbnz	r4, 8003e3a <__pow5mult+0x66>
 8003e26:	f240 2171 	movw	r1, #625	; 0x271
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f7ff ff12 	bl	8003c54 <__i2b>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e36:	4604      	mov	r4, r0
 8003e38:	6003      	str	r3, [r0, #0]
 8003e3a:	f04f 0900 	mov.w	r9, #0
 8003e3e:	07eb      	lsls	r3, r5, #31
 8003e40:	d50a      	bpl.n	8003e58 <__pow5mult+0x84>
 8003e42:	4639      	mov	r1, r7
 8003e44:	4622      	mov	r2, r4
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff ff1a 	bl	8003c80 <__multiply>
 8003e4c:	4639      	mov	r1, r7
 8003e4e:	4680      	mov	r8, r0
 8003e50:	4630      	mov	r0, r6
 8003e52:	f7ff fe47 	bl	8003ae4 <_Bfree>
 8003e56:	4647      	mov	r7, r8
 8003e58:	106d      	asrs	r5, r5, #1
 8003e5a:	d00b      	beq.n	8003e74 <__pow5mult+0xa0>
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	b938      	cbnz	r0, 8003e70 <__pow5mult+0x9c>
 8003e60:	4622      	mov	r2, r4
 8003e62:	4621      	mov	r1, r4
 8003e64:	4630      	mov	r0, r6
 8003e66:	f7ff ff0b 	bl	8003c80 <__multiply>
 8003e6a:	6020      	str	r0, [r4, #0]
 8003e6c:	f8c0 9000 	str.w	r9, [r0]
 8003e70:	4604      	mov	r4, r0
 8003e72:	e7e4      	b.n	8003e3e <__pow5mult+0x6a>
 8003e74:	4638      	mov	r0, r7
 8003e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08004f98 	.word	0x08004f98
 8003e80:	08004d69 	.word	0x08004d69
 8003e84:	08004e4c 	.word	0x08004e4c

08003e88 <__lshift>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	6849      	ldr	r1, [r1, #4]
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003e96:	68a3      	ldr	r3, [r4, #8]
 8003e98:	4607      	mov	r7, r0
 8003e9a:	4691      	mov	r9, r2
 8003e9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003ea0:	f108 0601 	add.w	r6, r8, #1
 8003ea4:	42b3      	cmp	r3, r6
 8003ea6:	db0b      	blt.n	8003ec0 <__lshift+0x38>
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f7ff fddb 	bl	8003a64 <_Balloc>
 8003eae:	4605      	mov	r5, r0
 8003eb0:	b948      	cbnz	r0, 8003ec6 <__lshift+0x3e>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b2a      	ldr	r3, [pc, #168]	; (8003f60 <__lshift+0xd8>)
 8003eb6:	482b      	ldr	r0, [pc, #172]	; (8003f64 <__lshift+0xdc>)
 8003eb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003ebc:	f000 fccc 	bl	8004858 <__assert_func>
 8003ec0:	3101      	adds	r1, #1
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	e7ee      	b.n	8003ea4 <__lshift+0x1c>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f100 0114 	add.w	r1, r0, #20
 8003ecc:	f100 0210 	add.w	r2, r0, #16
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	4553      	cmp	r3, sl
 8003ed4:	db37      	blt.n	8003f46 <__lshift+0xbe>
 8003ed6:	6920      	ldr	r0, [r4, #16]
 8003ed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003edc:	f104 0314 	add.w	r3, r4, #20
 8003ee0:	f019 091f 	ands.w	r9, r9, #31
 8003ee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003eec:	d02f      	beq.n	8003f4e <__lshift+0xc6>
 8003eee:	f1c9 0e20 	rsb	lr, r9, #32
 8003ef2:	468a      	mov	sl, r1
 8003ef4:	f04f 0c00 	mov.w	ip, #0
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	fa02 f209 	lsl.w	r2, r2, r9
 8003efe:	ea42 020c 	orr.w	r2, r2, ip
 8003f02:	f84a 2b04 	str.w	r2, [sl], #4
 8003f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f0a:	4298      	cmp	r0, r3
 8003f0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003f10:	d8f2      	bhi.n	8003ef8 <__lshift+0x70>
 8003f12:	1b03      	subs	r3, r0, r4
 8003f14:	3b15      	subs	r3, #21
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	f104 0215 	add.w	r2, r4, #21
 8003f20:	4290      	cmp	r0, r2
 8003f22:	bf38      	it	cc
 8003f24:	2304      	movcc	r3, #4
 8003f26:	f841 c003 	str.w	ip, [r1, r3]
 8003f2a:	f1bc 0f00 	cmp.w	ip, #0
 8003f2e:	d001      	beq.n	8003f34 <__lshift+0xac>
 8003f30:	f108 0602 	add.w	r6, r8, #2
 8003f34:	3e01      	subs	r6, #1
 8003f36:	4638      	mov	r0, r7
 8003f38:	612e      	str	r6, [r5, #16]
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	f7ff fdd2 	bl	8003ae4 <_Bfree>
 8003f40:	4628      	mov	r0, r5
 8003f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	e7c1      	b.n	8003ed2 <__lshift+0x4a>
 8003f4e:	3904      	subs	r1, #4
 8003f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f58:	4298      	cmp	r0, r3
 8003f5a:	d8f9      	bhi.n	8003f50 <__lshift+0xc8>
 8003f5c:	e7ea      	b.n	8003f34 <__lshift+0xac>
 8003f5e:	bf00      	nop
 8003f60:	08004ddb 	.word	0x08004ddb
 8003f64:	08004e4c 	.word	0x08004e4c

08003f68 <__mcmp>:
 8003f68:	b530      	push	{r4, r5, lr}
 8003f6a:	6902      	ldr	r2, [r0, #16]
 8003f6c:	690c      	ldr	r4, [r1, #16]
 8003f6e:	1b12      	subs	r2, r2, r4
 8003f70:	d10e      	bne.n	8003f90 <__mcmp+0x28>
 8003f72:	f100 0314 	add.w	r3, r0, #20
 8003f76:	3114      	adds	r1, #20
 8003f78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003f7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003f80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003f84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003f88:	42a5      	cmp	r5, r4
 8003f8a:	d003      	beq.n	8003f94 <__mcmp+0x2c>
 8003f8c:	d305      	bcc.n	8003f9a <__mcmp+0x32>
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4610      	mov	r0, r2
 8003f92:	bd30      	pop	{r4, r5, pc}
 8003f94:	4283      	cmp	r3, r0
 8003f96:	d3f3      	bcc.n	8003f80 <__mcmp+0x18>
 8003f98:	e7fa      	b.n	8003f90 <__mcmp+0x28>
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9e:	e7f7      	b.n	8003f90 <__mcmp+0x28>

08003fa0 <__mdiff>:
 8003fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4620      	mov	r0, r4
 8003fac:	4690      	mov	r8, r2
 8003fae:	f7ff ffdb 	bl	8003f68 <__mcmp>
 8003fb2:	1e05      	subs	r5, r0, #0
 8003fb4:	d110      	bne.n	8003fd8 <__mdiff+0x38>
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f7ff fd53 	bl	8003a64 <_Balloc>
 8003fbe:	b930      	cbnz	r0, 8003fce <__mdiff+0x2e>
 8003fc0:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <__mdiff+0x10c>)
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	f240 2132 	movw	r1, #562	; 0x232
 8003fc8:	4839      	ldr	r0, [pc, #228]	; (80040b0 <__mdiff+0x110>)
 8003fca:	f000 fc45 	bl	8004858 <__assert_func>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd8:	bfa4      	itt	ge
 8003fda:	4643      	movge	r3, r8
 8003fdc:	46a0      	movge	r8, r4
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003fe4:	bfa6      	itte	ge
 8003fe6:	461c      	movge	r4, r3
 8003fe8:	2500      	movge	r5, #0
 8003fea:	2501      	movlt	r5, #1
 8003fec:	f7ff fd3a 	bl	8003a64 <_Balloc>
 8003ff0:	b920      	cbnz	r0, 8003ffc <__mdiff+0x5c>
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <__mdiff+0x10c>)
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003ffa:	e7e5      	b.n	8003fc8 <__mdiff+0x28>
 8003ffc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004000:	6926      	ldr	r6, [r4, #16]
 8004002:	60c5      	str	r5, [r0, #12]
 8004004:	f104 0914 	add.w	r9, r4, #20
 8004008:	f108 0514 	add.w	r5, r8, #20
 800400c:	f100 0e14 	add.w	lr, r0, #20
 8004010:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004018:	f108 0210 	add.w	r2, r8, #16
 800401c:	46f2      	mov	sl, lr
 800401e:	2100      	movs	r1, #0
 8004020:	f859 3b04 	ldr.w	r3, [r9], #4
 8004024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004028:	fa1f f883 	uxth.w	r8, r3
 800402c:	fa11 f18b 	uxtah	r1, r1, fp
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	eba1 0808 	sub.w	r8, r1, r8
 8004036:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800403a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800403e:	fa1f f888 	uxth.w	r8, r8
 8004042:	1419      	asrs	r1, r3, #16
 8004044:	454e      	cmp	r6, r9
 8004046:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800404a:	f84a 3b04 	str.w	r3, [sl], #4
 800404e:	d8e7      	bhi.n	8004020 <__mdiff+0x80>
 8004050:	1b33      	subs	r3, r6, r4
 8004052:	3b15      	subs	r3, #21
 8004054:	f023 0303 	bic.w	r3, r3, #3
 8004058:	3304      	adds	r3, #4
 800405a:	3415      	adds	r4, #21
 800405c:	42a6      	cmp	r6, r4
 800405e:	bf38      	it	cc
 8004060:	2304      	movcc	r3, #4
 8004062:	441d      	add	r5, r3
 8004064:	4473      	add	r3, lr
 8004066:	469e      	mov	lr, r3
 8004068:	462e      	mov	r6, r5
 800406a:	4566      	cmp	r6, ip
 800406c:	d30e      	bcc.n	800408c <__mdiff+0xec>
 800406e:	f10c 0203 	add.w	r2, ip, #3
 8004072:	1b52      	subs	r2, r2, r5
 8004074:	f022 0203 	bic.w	r2, r2, #3
 8004078:	3d03      	subs	r5, #3
 800407a:	45ac      	cmp	ip, r5
 800407c:	bf38      	it	cc
 800407e:	2200      	movcc	r2, #0
 8004080:	441a      	add	r2, r3
 8004082:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004086:	b17b      	cbz	r3, 80040a8 <__mdiff+0x108>
 8004088:	6107      	str	r7, [r0, #16]
 800408a:	e7a3      	b.n	8003fd4 <__mdiff+0x34>
 800408c:	f856 8b04 	ldr.w	r8, [r6], #4
 8004090:	fa11 f288 	uxtah	r2, r1, r8
 8004094:	1414      	asrs	r4, r2, #16
 8004096:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800409a:	b292      	uxth	r2, r2
 800409c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80040a0:	f84e 2b04 	str.w	r2, [lr], #4
 80040a4:	1421      	asrs	r1, r4, #16
 80040a6:	e7e0      	b.n	800406a <__mdiff+0xca>
 80040a8:	3f01      	subs	r7, #1
 80040aa:	e7ea      	b.n	8004082 <__mdiff+0xe2>
 80040ac:	08004ddb 	.word	0x08004ddb
 80040b0:	08004e4c 	.word	0x08004e4c

080040b4 <__d2b>:
 80040b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040b8:	4689      	mov	r9, r1
 80040ba:	2101      	movs	r1, #1
 80040bc:	ec57 6b10 	vmov	r6, r7, d0
 80040c0:	4690      	mov	r8, r2
 80040c2:	f7ff fccf 	bl	8003a64 <_Balloc>
 80040c6:	4604      	mov	r4, r0
 80040c8:	b930      	cbnz	r0, 80040d8 <__d2b+0x24>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <__d2b+0xb0>)
 80040ce:	4826      	ldr	r0, [pc, #152]	; (8004168 <__d2b+0xb4>)
 80040d0:	f240 310a 	movw	r1, #778	; 0x30a
 80040d4:	f000 fbc0 	bl	8004858 <__assert_func>
 80040d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80040dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80040e0:	bb35      	cbnz	r5, 8004130 <__d2b+0x7c>
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	d028      	beq.n	800413a <__d2b+0x86>
 80040e8:	4668      	mov	r0, sp
 80040ea:	9600      	str	r6, [sp, #0]
 80040ec:	f7ff fd82 	bl	8003bf4 <__lo0bits>
 80040f0:	9900      	ldr	r1, [sp, #0]
 80040f2:	b300      	cbz	r0, 8004136 <__d2b+0x82>
 80040f4:	9a01      	ldr	r2, [sp, #4]
 80040f6:	f1c0 0320 	rsb	r3, r0, #32
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	430b      	orrs	r3, r1
 8004100:	40c2      	lsrs	r2, r0
 8004102:	6163      	str	r3, [r4, #20]
 8004104:	9201      	str	r2, [sp, #4]
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	61a3      	str	r3, [r4, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2202      	movne	r2, #2
 8004110:	2201      	moveq	r2, #1
 8004112:	6122      	str	r2, [r4, #16]
 8004114:	b1d5      	cbz	r5, 800414c <__d2b+0x98>
 8004116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800411a:	4405      	add	r5, r0
 800411c:	f8c9 5000 	str.w	r5, [r9]
 8004120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004124:	f8c8 0000 	str.w	r0, [r8]
 8004128:	4620      	mov	r0, r4
 800412a:	b003      	add	sp, #12
 800412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004134:	e7d5      	b.n	80040e2 <__d2b+0x2e>
 8004136:	6161      	str	r1, [r4, #20]
 8004138:	e7e5      	b.n	8004106 <__d2b+0x52>
 800413a:	a801      	add	r0, sp, #4
 800413c:	f7ff fd5a 	bl	8003bf4 <__lo0bits>
 8004140:	9b01      	ldr	r3, [sp, #4]
 8004142:	6163      	str	r3, [r4, #20]
 8004144:	2201      	movs	r2, #1
 8004146:	6122      	str	r2, [r4, #16]
 8004148:	3020      	adds	r0, #32
 800414a:	e7e3      	b.n	8004114 <__d2b+0x60>
 800414c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004154:	f8c9 0000 	str.w	r0, [r9]
 8004158:	6918      	ldr	r0, [r3, #16]
 800415a:	f7ff fd2b 	bl	8003bb4 <__hi0bits>
 800415e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004162:	e7df      	b.n	8004124 <__d2b+0x70>
 8004164:	08004ddb 	.word	0x08004ddb
 8004168:	08004e4c 	.word	0x08004e4c

0800416c <_calloc_r>:
 800416c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800416e:	fba1 2402 	umull	r2, r4, r1, r2
 8004172:	b94c      	cbnz	r4, 8004188 <_calloc_r+0x1c>
 8004174:	4611      	mov	r1, r2
 8004176:	9201      	str	r2, [sp, #4]
 8004178:	f000 f87a 	bl	8004270 <_malloc_r>
 800417c:	9a01      	ldr	r2, [sp, #4]
 800417e:	4605      	mov	r5, r0
 8004180:	b930      	cbnz	r0, 8004190 <_calloc_r+0x24>
 8004182:	4628      	mov	r0, r5
 8004184:	b003      	add	sp, #12
 8004186:	bd30      	pop	{r4, r5, pc}
 8004188:	220c      	movs	r2, #12
 800418a:	6002      	str	r2, [r0, #0]
 800418c:	2500      	movs	r5, #0
 800418e:	e7f8      	b.n	8004182 <_calloc_r+0x16>
 8004190:	4621      	mov	r1, r4
 8004192:	f7fe f84d 	bl	8002230 <memset>
 8004196:	e7f4      	b.n	8004182 <_calloc_r+0x16>

08004198 <_free_r>:
 8004198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800419a:	2900      	cmp	r1, #0
 800419c:	d044      	beq.n	8004228 <_free_r+0x90>
 800419e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a2:	9001      	str	r0, [sp, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f1a1 0404 	sub.w	r4, r1, #4
 80041aa:	bfb8      	it	lt
 80041ac:	18e4      	addlt	r4, r4, r3
 80041ae:	f000 fcdf 	bl	8004b70 <__malloc_lock>
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <_free_r+0x94>)
 80041b4:	9801      	ldr	r0, [sp, #4]
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	b933      	cbnz	r3, 80041c8 <_free_r+0x30>
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6014      	str	r4, [r2, #0]
 80041be:	b003      	add	sp, #12
 80041c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041c4:	f000 bcda 	b.w	8004b7c <__malloc_unlock>
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d908      	bls.n	80041de <_free_r+0x46>
 80041cc:	6825      	ldr	r5, [r4, #0]
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1949      	addeq	r1, r1, r5
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	e7ed      	b.n	80041ba <_free_r+0x22>
 80041de:	461a      	mov	r2, r3
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b10b      	cbz	r3, 80041e8 <_free_r+0x50>
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d9fa      	bls.n	80041de <_free_r+0x46>
 80041e8:	6811      	ldr	r1, [r2, #0]
 80041ea:	1855      	adds	r5, r2, r1
 80041ec:	42a5      	cmp	r5, r4
 80041ee:	d10b      	bne.n	8004208 <_free_r+0x70>
 80041f0:	6824      	ldr	r4, [r4, #0]
 80041f2:	4421      	add	r1, r4
 80041f4:	1854      	adds	r4, r2, r1
 80041f6:	42a3      	cmp	r3, r4
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	d1e0      	bne.n	80041be <_free_r+0x26>
 80041fc:	681c      	ldr	r4, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	6053      	str	r3, [r2, #4]
 8004202:	4421      	add	r1, r4
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	e7da      	b.n	80041be <_free_r+0x26>
 8004208:	d902      	bls.n	8004210 <_free_r+0x78>
 800420a:	230c      	movs	r3, #12
 800420c:	6003      	str	r3, [r0, #0]
 800420e:	e7d6      	b.n	80041be <_free_r+0x26>
 8004210:	6825      	ldr	r5, [r4, #0]
 8004212:	1961      	adds	r1, r4, r5
 8004214:	428b      	cmp	r3, r1
 8004216:	bf04      	itt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	bf04      	itt	eq
 8004220:	1949      	addeq	r1, r1, r5
 8004222:	6021      	streq	r1, [r4, #0]
 8004224:	6054      	str	r4, [r2, #4]
 8004226:	e7ca      	b.n	80041be <_free_r+0x26>
 8004228:	b003      	add	sp, #12
 800422a:	bd30      	pop	{r4, r5, pc}
 800422c:	20000204 	.word	0x20000204

08004230 <sbrk_aligned>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4e0e      	ldr	r6, [pc, #56]	; (800426c <sbrk_aligned+0x3c>)
 8004234:	460c      	mov	r4, r1
 8004236:	6831      	ldr	r1, [r6, #0]
 8004238:	4605      	mov	r5, r0
 800423a:	b911      	cbnz	r1, 8004242 <sbrk_aligned+0x12>
 800423c:	f000 f9e6 	bl	800460c <_sbrk_r>
 8004240:	6030      	str	r0, [r6, #0]
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f9e1 	bl	800460c <_sbrk_r>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	d00a      	beq.n	8004264 <sbrk_aligned+0x34>
 800424e:	1cc4      	adds	r4, r0, #3
 8004250:	f024 0403 	bic.w	r4, r4, #3
 8004254:	42a0      	cmp	r0, r4
 8004256:	d007      	beq.n	8004268 <sbrk_aligned+0x38>
 8004258:	1a21      	subs	r1, r4, r0
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f9d6 	bl	800460c <_sbrk_r>
 8004260:	3001      	adds	r0, #1
 8004262:	d101      	bne.n	8004268 <sbrk_aligned+0x38>
 8004264:	f04f 34ff 	mov.w	r4, #4294967295
 8004268:	4620      	mov	r0, r4
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	20000208 	.word	0x20000208

08004270 <_malloc_r>:
 8004270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004274:	1ccd      	adds	r5, r1, #3
 8004276:	f025 0503 	bic.w	r5, r5, #3
 800427a:	3508      	adds	r5, #8
 800427c:	2d0c      	cmp	r5, #12
 800427e:	bf38      	it	cc
 8004280:	250c      	movcc	r5, #12
 8004282:	2d00      	cmp	r5, #0
 8004284:	4607      	mov	r7, r0
 8004286:	db01      	blt.n	800428c <_malloc_r+0x1c>
 8004288:	42a9      	cmp	r1, r5
 800428a:	d905      	bls.n	8004298 <_malloc_r+0x28>
 800428c:	230c      	movs	r3, #12
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	2600      	movs	r6, #0
 8004292:	4630      	mov	r0, r6
 8004294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004298:	4e2e      	ldr	r6, [pc, #184]	; (8004354 <_malloc_r+0xe4>)
 800429a:	f000 fc69 	bl	8004b70 <__malloc_lock>
 800429e:	6833      	ldr	r3, [r6, #0]
 80042a0:	461c      	mov	r4, r3
 80042a2:	bb34      	cbnz	r4, 80042f2 <_malloc_r+0x82>
 80042a4:	4629      	mov	r1, r5
 80042a6:	4638      	mov	r0, r7
 80042a8:	f7ff ffc2 	bl	8004230 <sbrk_aligned>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	4604      	mov	r4, r0
 80042b0:	d14d      	bne.n	800434e <_malloc_r+0xde>
 80042b2:	6834      	ldr	r4, [r6, #0]
 80042b4:	4626      	mov	r6, r4
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d140      	bne.n	800433c <_malloc_r+0xcc>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4631      	mov	r1, r6
 80042be:	4638      	mov	r0, r7
 80042c0:	eb04 0803 	add.w	r8, r4, r3
 80042c4:	f000 f9a2 	bl	800460c <_sbrk_r>
 80042c8:	4580      	cmp	r8, r0
 80042ca:	d13a      	bne.n	8004342 <_malloc_r+0xd2>
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	3503      	adds	r5, #3
 80042d0:	1a6d      	subs	r5, r5, r1
 80042d2:	f025 0503 	bic.w	r5, r5, #3
 80042d6:	3508      	adds	r5, #8
 80042d8:	2d0c      	cmp	r5, #12
 80042da:	bf38      	it	cc
 80042dc:	250c      	movcc	r5, #12
 80042de:	4629      	mov	r1, r5
 80042e0:	4638      	mov	r0, r7
 80042e2:	f7ff ffa5 	bl	8004230 <sbrk_aligned>
 80042e6:	3001      	adds	r0, #1
 80042e8:	d02b      	beq.n	8004342 <_malloc_r+0xd2>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	442b      	add	r3, r5
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	e00e      	b.n	8004310 <_malloc_r+0xa0>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	1b52      	subs	r2, r2, r5
 80042f6:	d41e      	bmi.n	8004336 <_malloc_r+0xc6>
 80042f8:	2a0b      	cmp	r2, #11
 80042fa:	d916      	bls.n	800432a <_malloc_r+0xba>
 80042fc:	1961      	adds	r1, r4, r5
 80042fe:	42a3      	cmp	r3, r4
 8004300:	6025      	str	r5, [r4, #0]
 8004302:	bf18      	it	ne
 8004304:	6059      	strne	r1, [r3, #4]
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	bf08      	it	eq
 800430a:	6031      	streq	r1, [r6, #0]
 800430c:	5162      	str	r2, [r4, r5]
 800430e:	604b      	str	r3, [r1, #4]
 8004310:	4638      	mov	r0, r7
 8004312:	f104 060b 	add.w	r6, r4, #11
 8004316:	f000 fc31 	bl	8004b7c <__malloc_unlock>
 800431a:	f026 0607 	bic.w	r6, r6, #7
 800431e:	1d23      	adds	r3, r4, #4
 8004320:	1af2      	subs	r2, r6, r3
 8004322:	d0b6      	beq.n	8004292 <_malloc_r+0x22>
 8004324:	1b9b      	subs	r3, r3, r6
 8004326:	50a3      	str	r3, [r4, r2]
 8004328:	e7b3      	b.n	8004292 <_malloc_r+0x22>
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	bf0c      	ite	eq
 8004330:	6032      	streq	r2, [r6, #0]
 8004332:	605a      	strne	r2, [r3, #4]
 8004334:	e7ec      	b.n	8004310 <_malloc_r+0xa0>
 8004336:	4623      	mov	r3, r4
 8004338:	6864      	ldr	r4, [r4, #4]
 800433a:	e7b2      	b.n	80042a2 <_malloc_r+0x32>
 800433c:	4634      	mov	r4, r6
 800433e:	6876      	ldr	r6, [r6, #4]
 8004340:	e7b9      	b.n	80042b6 <_malloc_r+0x46>
 8004342:	230c      	movs	r3, #12
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4638      	mov	r0, r7
 8004348:	f000 fc18 	bl	8004b7c <__malloc_unlock>
 800434c:	e7a1      	b.n	8004292 <_malloc_r+0x22>
 800434e:	6025      	str	r5, [r4, #0]
 8004350:	e7de      	b.n	8004310 <_malloc_r+0xa0>
 8004352:	bf00      	nop
 8004354:	20000204 	.word	0x20000204

08004358 <__sfputc_r>:
 8004358:	6893      	ldr	r3, [r2, #8]
 800435a:	3b01      	subs	r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	b410      	push	{r4}
 8004360:	6093      	str	r3, [r2, #8]
 8004362:	da08      	bge.n	8004376 <__sfputc_r+0x1e>
 8004364:	6994      	ldr	r4, [r2, #24]
 8004366:	42a3      	cmp	r3, r4
 8004368:	db01      	blt.n	800436e <__sfputc_r+0x16>
 800436a:	290a      	cmp	r1, #10
 800436c:	d103      	bne.n	8004376 <__sfputc_r+0x1e>
 800436e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004372:	f000 b99f 	b.w	80046b4 <__swbuf_r>
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	1c58      	adds	r0, r3, #1
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	7019      	strb	r1, [r3, #0]
 800437e:	4608      	mov	r0, r1
 8004380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004384:	4770      	bx	lr

08004386 <__sfputs_r>:
 8004386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004388:	4606      	mov	r6, r0
 800438a:	460f      	mov	r7, r1
 800438c:	4614      	mov	r4, r2
 800438e:	18d5      	adds	r5, r2, r3
 8004390:	42ac      	cmp	r4, r5
 8004392:	d101      	bne.n	8004398 <__sfputs_r+0x12>
 8004394:	2000      	movs	r0, #0
 8004396:	e007      	b.n	80043a8 <__sfputs_r+0x22>
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	463a      	mov	r2, r7
 800439e:	4630      	mov	r0, r6
 80043a0:	f7ff ffda 	bl	8004358 <__sfputc_r>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d1f3      	bne.n	8004390 <__sfputs_r+0xa>
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043ac <_vfiprintf_r>:
 80043ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	460d      	mov	r5, r1
 80043b2:	b09d      	sub	sp, #116	; 0x74
 80043b4:	4614      	mov	r4, r2
 80043b6:	4698      	mov	r8, r3
 80043b8:	4606      	mov	r6, r0
 80043ba:	b118      	cbz	r0, 80043c4 <_vfiprintf_r+0x18>
 80043bc:	6983      	ldr	r3, [r0, #24]
 80043be:	b90b      	cbnz	r3, 80043c4 <_vfiprintf_r+0x18>
 80043c0:	f7ff fa94 	bl	80038ec <__sinit>
 80043c4:	4b89      	ldr	r3, [pc, #548]	; (80045ec <_vfiprintf_r+0x240>)
 80043c6:	429d      	cmp	r5, r3
 80043c8:	d11b      	bne.n	8004402 <_vfiprintf_r+0x56>
 80043ca:	6875      	ldr	r5, [r6, #4]
 80043cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ce:	07d9      	lsls	r1, r3, #31
 80043d0:	d405      	bmi.n	80043de <_vfiprintf_r+0x32>
 80043d2:	89ab      	ldrh	r3, [r5, #12]
 80043d4:	059a      	lsls	r2, r3, #22
 80043d6:	d402      	bmi.n	80043de <_vfiprintf_r+0x32>
 80043d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043da:	f7ff fb2a 	bl	8003a32 <__retarget_lock_acquire_recursive>
 80043de:	89ab      	ldrh	r3, [r5, #12]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	d501      	bpl.n	80043e8 <_vfiprintf_r+0x3c>
 80043e4:	692b      	ldr	r3, [r5, #16]
 80043e6:	b9eb      	cbnz	r3, 8004424 <_vfiprintf_r+0x78>
 80043e8:	4629      	mov	r1, r5
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 f9c6 	bl	800477c <__swsetup_r>
 80043f0:	b1c0      	cbz	r0, 8004424 <_vfiprintf_r+0x78>
 80043f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f4:	07dc      	lsls	r4, r3, #31
 80043f6:	d50e      	bpl.n	8004416 <_vfiprintf_r+0x6a>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	b01d      	add	sp, #116	; 0x74
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004402:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <_vfiprintf_r+0x244>)
 8004404:	429d      	cmp	r5, r3
 8004406:	d101      	bne.n	800440c <_vfiprintf_r+0x60>
 8004408:	68b5      	ldr	r5, [r6, #8]
 800440a:	e7df      	b.n	80043cc <_vfiprintf_r+0x20>
 800440c:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <_vfiprintf_r+0x248>)
 800440e:	429d      	cmp	r5, r3
 8004410:	bf08      	it	eq
 8004412:	68f5      	ldreq	r5, [r6, #12]
 8004414:	e7da      	b.n	80043cc <_vfiprintf_r+0x20>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d4ed      	bmi.n	80043f8 <_vfiprintf_r+0x4c>
 800441c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800441e:	f7ff fb09 	bl	8003a34 <__retarget_lock_release_recursive>
 8004422:	e7e9      	b.n	80043f8 <_vfiprintf_r+0x4c>
 8004424:	2300      	movs	r3, #0
 8004426:	9309      	str	r3, [sp, #36]	; 0x24
 8004428:	2320      	movs	r3, #32
 800442a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004432:	2330      	movs	r3, #48	; 0x30
 8004434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045f8 <_vfiprintf_r+0x24c>
 8004438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800443c:	f04f 0901 	mov.w	r9, #1
 8004440:	4623      	mov	r3, r4
 8004442:	469a      	mov	sl, r3
 8004444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004448:	b10a      	cbz	r2, 800444e <_vfiprintf_r+0xa2>
 800444a:	2a25      	cmp	r2, #37	; 0x25
 800444c:	d1f9      	bne.n	8004442 <_vfiprintf_r+0x96>
 800444e:	ebba 0b04 	subs.w	fp, sl, r4
 8004452:	d00b      	beq.n	800446c <_vfiprintf_r+0xc0>
 8004454:	465b      	mov	r3, fp
 8004456:	4622      	mov	r2, r4
 8004458:	4629      	mov	r1, r5
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff ff93 	bl	8004386 <__sfputs_r>
 8004460:	3001      	adds	r0, #1
 8004462:	f000 80aa 	beq.w	80045ba <_vfiprintf_r+0x20e>
 8004466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004468:	445a      	add	r2, fp
 800446a:	9209      	str	r2, [sp, #36]	; 0x24
 800446c:	f89a 3000 	ldrb.w	r3, [sl]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a2 	beq.w	80045ba <_vfiprintf_r+0x20e>
 8004476:	2300      	movs	r3, #0
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004480:	f10a 0a01 	add.w	sl, sl, #1
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448c:	931a      	str	r3, [sp, #104]	; 0x68
 800448e:	4654      	mov	r4, sl
 8004490:	2205      	movs	r2, #5
 8004492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004496:	4858      	ldr	r0, [pc, #352]	; (80045f8 <_vfiprintf_r+0x24c>)
 8004498:	f7fb fee2 	bl	8000260 <memchr>
 800449c:	9a04      	ldr	r2, [sp, #16]
 800449e:	b9d8      	cbnz	r0, 80044d8 <_vfiprintf_r+0x12c>
 80044a0:	06d1      	lsls	r1, r2, #27
 80044a2:	bf44      	itt	mi
 80044a4:	2320      	movmi	r3, #32
 80044a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044aa:	0713      	lsls	r3, r2, #28
 80044ac:	bf44      	itt	mi
 80044ae:	232b      	movmi	r3, #43	; 0x2b
 80044b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b4:	f89a 3000 	ldrb.w	r3, [sl]
 80044b8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ba:	d015      	beq.n	80044e8 <_vfiprintf_r+0x13c>
 80044bc:	9a07      	ldr	r2, [sp, #28]
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	4621      	mov	r1, r4
 80044c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044cc:	3b30      	subs	r3, #48	; 0x30
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d94e      	bls.n	8004570 <_vfiprintf_r+0x1c4>
 80044d2:	b1b0      	cbz	r0, 8004502 <_vfiprintf_r+0x156>
 80044d4:	9207      	str	r2, [sp, #28]
 80044d6:	e014      	b.n	8004502 <_vfiprintf_r+0x156>
 80044d8:	eba0 0308 	sub.w	r3, r0, r8
 80044dc:	fa09 f303 	lsl.w	r3, r9, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	46a2      	mov	sl, r4
 80044e6:	e7d2      	b.n	800448e <_vfiprintf_r+0xe2>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	1d19      	adds	r1, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	9103      	str	r1, [sp, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bfbb      	ittet	lt
 80044f4:	425b      	neglt	r3, r3
 80044f6:	f042 0202 	orrlt.w	r2, r2, #2
 80044fa:	9307      	strge	r3, [sp, #28]
 80044fc:	9307      	strlt	r3, [sp, #28]
 80044fe:	bfb8      	it	lt
 8004500:	9204      	strlt	r2, [sp, #16]
 8004502:	7823      	ldrb	r3, [r4, #0]
 8004504:	2b2e      	cmp	r3, #46	; 0x2e
 8004506:	d10c      	bne.n	8004522 <_vfiprintf_r+0x176>
 8004508:	7863      	ldrb	r3, [r4, #1]
 800450a:	2b2a      	cmp	r3, #42	; 0x2a
 800450c:	d135      	bne.n	800457a <_vfiprintf_r+0x1ce>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9203      	str	r2, [sp, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfb8      	it	lt
 800451a:	f04f 33ff 	movlt.w	r3, #4294967295
 800451e:	3402      	adds	r4, #2
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004608 <_vfiprintf_r+0x25c>
 8004526:	7821      	ldrb	r1, [r4, #0]
 8004528:	2203      	movs	r2, #3
 800452a:	4650      	mov	r0, sl
 800452c:	f7fb fe98 	bl	8000260 <memchr>
 8004530:	b140      	cbz	r0, 8004544 <_vfiprintf_r+0x198>
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	eba0 000a 	sub.w	r0, r0, sl
 8004538:	fa03 f000 	lsl.w	r0, r3, r0
 800453c:	9b04      	ldr	r3, [sp, #16]
 800453e:	4303      	orrs	r3, r0
 8004540:	3401      	adds	r4, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004548:	482c      	ldr	r0, [pc, #176]	; (80045fc <_vfiprintf_r+0x250>)
 800454a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800454e:	2206      	movs	r2, #6
 8004550:	f7fb fe86 	bl	8000260 <memchr>
 8004554:	2800      	cmp	r0, #0
 8004556:	d03f      	beq.n	80045d8 <_vfiprintf_r+0x22c>
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <_vfiprintf_r+0x254>)
 800455a:	bb1b      	cbnz	r3, 80045a4 <_vfiprintf_r+0x1f8>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	3307      	adds	r3, #7
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	3308      	adds	r3, #8
 8004566:	9303      	str	r3, [sp, #12]
 8004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456a:	443b      	add	r3, r7
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
 800456e:	e767      	b.n	8004440 <_vfiprintf_r+0x94>
 8004570:	fb0c 3202 	mla	r2, ip, r2, r3
 8004574:	460c      	mov	r4, r1
 8004576:	2001      	movs	r0, #1
 8004578:	e7a5      	b.n	80044c6 <_vfiprintf_r+0x11a>
 800457a:	2300      	movs	r3, #0
 800457c:	3401      	adds	r4, #1
 800457e:	9305      	str	r3, [sp, #20]
 8004580:	4619      	mov	r1, r3
 8004582:	f04f 0c0a 	mov.w	ip, #10
 8004586:	4620      	mov	r0, r4
 8004588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458c:	3a30      	subs	r2, #48	; 0x30
 800458e:	2a09      	cmp	r2, #9
 8004590:	d903      	bls.n	800459a <_vfiprintf_r+0x1ee>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0c5      	beq.n	8004522 <_vfiprintf_r+0x176>
 8004596:	9105      	str	r1, [sp, #20]
 8004598:	e7c3      	b.n	8004522 <_vfiprintf_r+0x176>
 800459a:	fb0c 2101 	mla	r1, ip, r1, r2
 800459e:	4604      	mov	r4, r0
 80045a0:	2301      	movs	r3, #1
 80045a2:	e7f0      	b.n	8004586 <_vfiprintf_r+0x1da>
 80045a4:	ab03      	add	r3, sp, #12
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	462a      	mov	r2, r5
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <_vfiprintf_r+0x258>)
 80045ac:	a904      	add	r1, sp, #16
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7fd fee6 	bl	8002380 <_printf_float>
 80045b4:	4607      	mov	r7, r0
 80045b6:	1c78      	adds	r0, r7, #1
 80045b8:	d1d6      	bne.n	8004568 <_vfiprintf_r+0x1bc>
 80045ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045bc:	07d9      	lsls	r1, r3, #31
 80045be:	d405      	bmi.n	80045cc <_vfiprintf_r+0x220>
 80045c0:	89ab      	ldrh	r3, [r5, #12]
 80045c2:	059a      	lsls	r2, r3, #22
 80045c4:	d402      	bmi.n	80045cc <_vfiprintf_r+0x220>
 80045c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045c8:	f7ff fa34 	bl	8003a34 <__retarget_lock_release_recursive>
 80045cc:	89ab      	ldrh	r3, [r5, #12]
 80045ce:	065b      	lsls	r3, r3, #25
 80045d0:	f53f af12 	bmi.w	80043f8 <_vfiprintf_r+0x4c>
 80045d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045d6:	e711      	b.n	80043fc <_vfiprintf_r+0x50>
 80045d8:	ab03      	add	r3, sp, #12
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	462a      	mov	r2, r5
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <_vfiprintf_r+0x258>)
 80045e0:	a904      	add	r1, sp, #16
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7fe f970 	bl	80028c8 <_printf_i>
 80045e8:	e7e4      	b.n	80045b4 <_vfiprintf_r+0x208>
 80045ea:	bf00      	nop
 80045ec:	08004e0c 	.word	0x08004e0c
 80045f0:	08004e2c 	.word	0x08004e2c
 80045f4:	08004dec 	.word	0x08004dec
 80045f8:	08004fa4 	.word	0x08004fa4
 80045fc:	08004fae 	.word	0x08004fae
 8004600:	08002381 	.word	0x08002381
 8004604:	08004387 	.word	0x08004387
 8004608:	08004faa 	.word	0x08004faa

0800460c <_sbrk_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d06      	ldr	r5, [pc, #24]	; (8004628 <_sbrk_r+0x1c>)
 8004610:	2300      	movs	r3, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fc fc8c 	bl	8000f34 <_sbrk>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_sbrk_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_sbrk_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	2000020c 	.word	0x2000020c

0800462c <__sread>:
 800462c:	b510      	push	{r4, lr}
 800462e:	460c      	mov	r4, r1
 8004630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004634:	f000 faa8 	bl	8004b88 <_read_r>
 8004638:	2800      	cmp	r0, #0
 800463a:	bfab      	itete	ge
 800463c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800463e:	89a3      	ldrhlt	r3, [r4, #12]
 8004640:	181b      	addge	r3, r3, r0
 8004642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004646:	bfac      	ite	ge
 8004648:	6563      	strge	r3, [r4, #84]	; 0x54
 800464a:	81a3      	strhlt	r3, [r4, #12]
 800464c:	bd10      	pop	{r4, pc}

0800464e <__swrite>:
 800464e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004652:	461f      	mov	r7, r3
 8004654:	898b      	ldrh	r3, [r1, #12]
 8004656:	05db      	lsls	r3, r3, #23
 8004658:	4605      	mov	r5, r0
 800465a:	460c      	mov	r4, r1
 800465c:	4616      	mov	r6, r2
 800465e:	d505      	bpl.n	800466c <__swrite+0x1e>
 8004660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004664:	2302      	movs	r3, #2
 8004666:	2200      	movs	r2, #0
 8004668:	f000 f9f8 	bl	8004a5c <_lseek_r>
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	4632      	mov	r2, r6
 800467a:	463b      	mov	r3, r7
 800467c:	4628      	mov	r0, r5
 800467e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004682:	f000 b869 	b.w	8004758 <_write_r>

08004686 <__sseek>:
 8004686:	b510      	push	{r4, lr}
 8004688:	460c      	mov	r4, r1
 800468a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468e:	f000 f9e5 	bl	8004a5c <_lseek_r>
 8004692:	1c43      	adds	r3, r0, #1
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	bf15      	itete	ne
 8004698:	6560      	strne	r0, [r4, #84]	; 0x54
 800469a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800469e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046a2:	81a3      	strheq	r3, [r4, #12]
 80046a4:	bf18      	it	ne
 80046a6:	81a3      	strhne	r3, [r4, #12]
 80046a8:	bd10      	pop	{r4, pc}

080046aa <__sclose>:
 80046aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ae:	f000 b8f1 	b.w	8004894 <_close_r>
	...

080046b4 <__swbuf_r>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	460e      	mov	r6, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	4605      	mov	r5, r0
 80046bc:	b118      	cbz	r0, 80046c6 <__swbuf_r+0x12>
 80046be:	6983      	ldr	r3, [r0, #24]
 80046c0:	b90b      	cbnz	r3, 80046c6 <__swbuf_r+0x12>
 80046c2:	f7ff f913 	bl	80038ec <__sinit>
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <__swbuf_r+0x98>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	d12b      	bne.n	8004724 <__swbuf_r+0x70>
 80046cc:	686c      	ldr	r4, [r5, #4]
 80046ce:	69a3      	ldr	r3, [r4, #24]
 80046d0:	60a3      	str	r3, [r4, #8]
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	071a      	lsls	r2, r3, #28
 80046d6:	d52f      	bpl.n	8004738 <__swbuf_r+0x84>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	b36b      	cbz	r3, 8004738 <__swbuf_r+0x84>
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	6820      	ldr	r0, [r4, #0]
 80046e0:	1ac0      	subs	r0, r0, r3
 80046e2:	6963      	ldr	r3, [r4, #20]
 80046e4:	b2f6      	uxtb	r6, r6
 80046e6:	4283      	cmp	r3, r0
 80046e8:	4637      	mov	r7, r6
 80046ea:	dc04      	bgt.n	80046f6 <__swbuf_r+0x42>
 80046ec:	4621      	mov	r1, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f966 	bl	80049c0 <_fflush_r>
 80046f4:	bb30      	cbnz	r0, 8004744 <__swbuf_r+0x90>
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	60a3      	str	r3, [r4, #8]
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	6022      	str	r2, [r4, #0]
 8004702:	701e      	strb	r6, [r3, #0]
 8004704:	6963      	ldr	r3, [r4, #20]
 8004706:	3001      	adds	r0, #1
 8004708:	4283      	cmp	r3, r0
 800470a:	d004      	beq.n	8004716 <__swbuf_r+0x62>
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	07db      	lsls	r3, r3, #31
 8004710:	d506      	bpl.n	8004720 <__swbuf_r+0x6c>
 8004712:	2e0a      	cmp	r6, #10
 8004714:	d104      	bne.n	8004720 <__swbuf_r+0x6c>
 8004716:	4621      	mov	r1, r4
 8004718:	4628      	mov	r0, r5
 800471a:	f000 f951 	bl	80049c0 <_fflush_r>
 800471e:	b988      	cbnz	r0, 8004744 <__swbuf_r+0x90>
 8004720:	4638      	mov	r0, r7
 8004722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <__swbuf_r+0x9c>)
 8004726:	429c      	cmp	r4, r3
 8004728:	d101      	bne.n	800472e <__swbuf_r+0x7a>
 800472a:	68ac      	ldr	r4, [r5, #8]
 800472c:	e7cf      	b.n	80046ce <__swbuf_r+0x1a>
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <__swbuf_r+0xa0>)
 8004730:	429c      	cmp	r4, r3
 8004732:	bf08      	it	eq
 8004734:	68ec      	ldreq	r4, [r5, #12]
 8004736:	e7ca      	b.n	80046ce <__swbuf_r+0x1a>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f81e 	bl	800477c <__swsetup_r>
 8004740:	2800      	cmp	r0, #0
 8004742:	d0cb      	beq.n	80046dc <__swbuf_r+0x28>
 8004744:	f04f 37ff 	mov.w	r7, #4294967295
 8004748:	e7ea      	b.n	8004720 <__swbuf_r+0x6c>
 800474a:	bf00      	nop
 800474c:	08004e0c 	.word	0x08004e0c
 8004750:	08004e2c 	.word	0x08004e2c
 8004754:	08004dec 	.word	0x08004dec

08004758 <_write_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	; (8004778 <_write_r+0x20>)
 800475c:	4604      	mov	r4, r0
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	2200      	movs	r2, #0
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fc fb93 	bl	8000e92 <_write>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_write_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_write_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	2000020c 	.word	0x2000020c

0800477c <__swsetup_r>:
 800477c:	4b32      	ldr	r3, [pc, #200]	; (8004848 <__swsetup_r+0xcc>)
 800477e:	b570      	push	{r4, r5, r6, lr}
 8004780:	681d      	ldr	r5, [r3, #0]
 8004782:	4606      	mov	r6, r0
 8004784:	460c      	mov	r4, r1
 8004786:	b125      	cbz	r5, 8004792 <__swsetup_r+0x16>
 8004788:	69ab      	ldr	r3, [r5, #24]
 800478a:	b913      	cbnz	r3, 8004792 <__swsetup_r+0x16>
 800478c:	4628      	mov	r0, r5
 800478e:	f7ff f8ad 	bl	80038ec <__sinit>
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <__swsetup_r+0xd0>)
 8004794:	429c      	cmp	r4, r3
 8004796:	d10f      	bne.n	80047b8 <__swsetup_r+0x3c>
 8004798:	686c      	ldr	r4, [r5, #4]
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047a0:	0719      	lsls	r1, r3, #28
 80047a2:	d42c      	bmi.n	80047fe <__swsetup_r+0x82>
 80047a4:	06dd      	lsls	r5, r3, #27
 80047a6:	d411      	bmi.n	80047cc <__swsetup_r+0x50>
 80047a8:	2309      	movs	r3, #9
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047b0:	81a3      	strh	r3, [r4, #12]
 80047b2:	f04f 30ff 	mov.w	r0, #4294967295
 80047b6:	e03e      	b.n	8004836 <__swsetup_r+0xba>
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <__swsetup_r+0xd4>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d101      	bne.n	80047c2 <__swsetup_r+0x46>
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	e7eb      	b.n	800479a <__swsetup_r+0x1e>
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <__swsetup_r+0xd8>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	bf08      	it	eq
 80047c8:	68ec      	ldreq	r4, [r5, #12]
 80047ca:	e7e6      	b.n	800479a <__swsetup_r+0x1e>
 80047cc:	0758      	lsls	r0, r3, #29
 80047ce:	d512      	bpl.n	80047f6 <__swsetup_r+0x7a>
 80047d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047d2:	b141      	cbz	r1, 80047e6 <__swsetup_r+0x6a>
 80047d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d8:	4299      	cmp	r1, r3
 80047da:	d002      	beq.n	80047e2 <__swsetup_r+0x66>
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff fcdb 	bl	8004198 <_free_r>
 80047e2:	2300      	movs	r3, #0
 80047e4:	6363      	str	r3, [r4, #52]	; 0x34
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	2300      	movs	r3, #0
 80047f0:	6063      	str	r3, [r4, #4]
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f043 0308 	orr.w	r3, r3, #8
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	b94b      	cbnz	r3, 8004816 <__swsetup_r+0x9a>
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480c:	d003      	beq.n	8004816 <__swsetup_r+0x9a>
 800480e:	4621      	mov	r1, r4
 8004810:	4630      	mov	r0, r6
 8004812:	f000 f95b 	bl	8004acc <__smakebuf_r>
 8004816:	89a0      	ldrh	r0, [r4, #12]
 8004818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800481c:	f010 0301 	ands.w	r3, r0, #1
 8004820:	d00a      	beq.n	8004838 <__swsetup_r+0xbc>
 8004822:	2300      	movs	r3, #0
 8004824:	60a3      	str	r3, [r4, #8]
 8004826:	6963      	ldr	r3, [r4, #20]
 8004828:	425b      	negs	r3, r3
 800482a:	61a3      	str	r3, [r4, #24]
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	b943      	cbnz	r3, 8004842 <__swsetup_r+0xc6>
 8004830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004834:	d1ba      	bne.n	80047ac <__swsetup_r+0x30>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	0781      	lsls	r1, r0, #30
 800483a:	bf58      	it	pl
 800483c:	6963      	ldrpl	r3, [r4, #20]
 800483e:	60a3      	str	r3, [r4, #8]
 8004840:	e7f4      	b.n	800482c <__swsetup_r+0xb0>
 8004842:	2000      	movs	r0, #0
 8004844:	e7f7      	b.n	8004836 <__swsetup_r+0xba>
 8004846:	bf00      	nop
 8004848:	2000000c 	.word	0x2000000c
 800484c:	08004e0c 	.word	0x08004e0c
 8004850:	08004e2c 	.word	0x08004e2c
 8004854:	08004dec 	.word	0x08004dec

08004858 <__assert_func>:
 8004858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800485a:	4614      	mov	r4, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <__assert_func+0x2c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4605      	mov	r5, r0
 8004864:	68d8      	ldr	r0, [r3, #12]
 8004866:	b14c      	cbz	r4, 800487c <__assert_func+0x24>
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <__assert_func+0x30>)
 800486a:	9100      	str	r1, [sp, #0]
 800486c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004870:	4906      	ldr	r1, [pc, #24]	; (800488c <__assert_func+0x34>)
 8004872:	462b      	mov	r3, r5
 8004874:	f000 f8e0 	bl	8004a38 <fiprintf>
 8004878:	f000 f9a5 	bl	8004bc6 <abort>
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <__assert_func+0x38>)
 800487e:	461c      	mov	r4, r3
 8004880:	e7f3      	b.n	800486a <__assert_func+0x12>
 8004882:	bf00      	nop
 8004884:	2000000c 	.word	0x2000000c
 8004888:	08004fb5 	.word	0x08004fb5
 800488c:	08004fc2 	.word	0x08004fc2
 8004890:	08004ff0 	.word	0x08004ff0

08004894 <_close_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d06      	ldr	r5, [pc, #24]	; (80048b0 <_close_r+0x1c>)
 8004898:	2300      	movs	r3, #0
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc fb13 	bl	8000eca <_close>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_close_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_close_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	2000020c 	.word	0x2000020c

080048b4 <__sflush_r>:
 80048b4:	898a      	ldrh	r2, [r1, #12]
 80048b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	0710      	lsls	r0, r2, #28
 80048be:	460c      	mov	r4, r1
 80048c0:	d458      	bmi.n	8004974 <__sflush_r+0xc0>
 80048c2:	684b      	ldr	r3, [r1, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dc05      	bgt.n	80048d4 <__sflush_r+0x20>
 80048c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	dc02      	bgt.n	80048d4 <__sflush_r+0x20>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	d0f9      	beq.n	80048ce <__sflush_r+0x1a>
 80048da:	2300      	movs	r3, #0
 80048dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048e0:	682f      	ldr	r7, [r5, #0]
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	d032      	beq.n	800494c <__sflush_r+0x98>
 80048e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	075a      	lsls	r2, r3, #29
 80048ec:	d505      	bpl.n	80048fa <__sflush_r+0x46>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	1ac0      	subs	r0, r0, r3
 80048f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f4:	b10b      	cbz	r3, 80048fa <__sflush_r+0x46>
 80048f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f8:	1ac0      	subs	r0, r0, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	4602      	mov	r2, r0
 80048fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004900:	6a21      	ldr	r1, [r4, #32]
 8004902:	4628      	mov	r0, r5
 8004904:	47b0      	blx	r6
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	d106      	bne.n	800491a <__sflush_r+0x66>
 800490c:	6829      	ldr	r1, [r5, #0]
 800490e:	291d      	cmp	r1, #29
 8004910:	d82c      	bhi.n	800496c <__sflush_r+0xb8>
 8004912:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <__sflush_r+0x108>)
 8004914:	40ca      	lsrs	r2, r1
 8004916:	07d6      	lsls	r6, r2, #31
 8004918:	d528      	bpl.n	800496c <__sflush_r+0xb8>
 800491a:	2200      	movs	r2, #0
 800491c:	6062      	str	r2, [r4, #4]
 800491e:	04d9      	lsls	r1, r3, #19
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	d504      	bpl.n	8004930 <__sflush_r+0x7c>
 8004926:	1c42      	adds	r2, r0, #1
 8004928:	d101      	bne.n	800492e <__sflush_r+0x7a>
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	b903      	cbnz	r3, 8004930 <__sflush_r+0x7c>
 800492e:	6560      	str	r0, [r4, #84]	; 0x54
 8004930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004932:	602f      	str	r7, [r5, #0]
 8004934:	2900      	cmp	r1, #0
 8004936:	d0ca      	beq.n	80048ce <__sflush_r+0x1a>
 8004938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800493c:	4299      	cmp	r1, r3
 800493e:	d002      	beq.n	8004946 <__sflush_r+0x92>
 8004940:	4628      	mov	r0, r5
 8004942:	f7ff fc29 	bl	8004198 <_free_r>
 8004946:	2000      	movs	r0, #0
 8004948:	6360      	str	r0, [r4, #52]	; 0x34
 800494a:	e7c1      	b.n	80048d0 <__sflush_r+0x1c>
 800494c:	6a21      	ldr	r1, [r4, #32]
 800494e:	2301      	movs	r3, #1
 8004950:	4628      	mov	r0, r5
 8004952:	47b0      	blx	r6
 8004954:	1c41      	adds	r1, r0, #1
 8004956:	d1c7      	bne.n	80048e8 <__sflush_r+0x34>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0c4      	beq.n	80048e8 <__sflush_r+0x34>
 800495e:	2b1d      	cmp	r3, #29
 8004960:	d001      	beq.n	8004966 <__sflush_r+0xb2>
 8004962:	2b16      	cmp	r3, #22
 8004964:	d101      	bne.n	800496a <__sflush_r+0xb6>
 8004966:	602f      	str	r7, [r5, #0]
 8004968:	e7b1      	b.n	80048ce <__sflush_r+0x1a>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	e7ad      	b.n	80048d0 <__sflush_r+0x1c>
 8004974:	690f      	ldr	r7, [r1, #16]
 8004976:	2f00      	cmp	r7, #0
 8004978:	d0a9      	beq.n	80048ce <__sflush_r+0x1a>
 800497a:	0793      	lsls	r3, r2, #30
 800497c:	680e      	ldr	r6, [r1, #0]
 800497e:	bf08      	it	eq
 8004980:	694b      	ldreq	r3, [r1, #20]
 8004982:	600f      	str	r7, [r1, #0]
 8004984:	bf18      	it	ne
 8004986:	2300      	movne	r3, #0
 8004988:	eba6 0807 	sub.w	r8, r6, r7
 800498c:	608b      	str	r3, [r1, #8]
 800498e:	f1b8 0f00 	cmp.w	r8, #0
 8004992:	dd9c      	ble.n	80048ce <__sflush_r+0x1a>
 8004994:	6a21      	ldr	r1, [r4, #32]
 8004996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004998:	4643      	mov	r3, r8
 800499a:	463a      	mov	r2, r7
 800499c:	4628      	mov	r0, r5
 800499e:	47b0      	blx	r6
 80049a0:	2800      	cmp	r0, #0
 80049a2:	dc06      	bgt.n	80049b2 <__sflush_r+0xfe>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e78e      	b.n	80048d0 <__sflush_r+0x1c>
 80049b2:	4407      	add	r7, r0
 80049b4:	eba8 0800 	sub.w	r8, r8, r0
 80049b8:	e7e9      	b.n	800498e <__sflush_r+0xda>
 80049ba:	bf00      	nop
 80049bc:	20400001 	.word	0x20400001

080049c0 <_fflush_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	690b      	ldr	r3, [r1, #16]
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	b913      	cbnz	r3, 80049d0 <_fflush_r+0x10>
 80049ca:	2500      	movs	r5, #0
 80049cc:	4628      	mov	r0, r5
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	b118      	cbz	r0, 80049da <_fflush_r+0x1a>
 80049d2:	6983      	ldr	r3, [r0, #24]
 80049d4:	b90b      	cbnz	r3, 80049da <_fflush_r+0x1a>
 80049d6:	f7fe ff89 	bl	80038ec <__sinit>
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <_fflush_r+0x6c>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d11b      	bne.n	8004a18 <_fflush_r+0x58>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <_fflush_r+0xa>
 80049ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049ec:	07d0      	lsls	r0, r2, #31
 80049ee:	d404      	bmi.n	80049fa <_fflush_r+0x3a>
 80049f0:	0599      	lsls	r1, r3, #22
 80049f2:	d402      	bmi.n	80049fa <_fflush_r+0x3a>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f7ff f81c 	bl	8003a32 <__retarget_lock_acquire_recursive>
 80049fa:	4628      	mov	r0, r5
 80049fc:	4621      	mov	r1, r4
 80049fe:	f7ff ff59 	bl	80048b4 <__sflush_r>
 8004a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a04:	07da      	lsls	r2, r3, #31
 8004a06:	4605      	mov	r5, r0
 8004a08:	d4e0      	bmi.n	80049cc <_fflush_r+0xc>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	059b      	lsls	r3, r3, #22
 8004a0e:	d4dd      	bmi.n	80049cc <_fflush_r+0xc>
 8004a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a12:	f7ff f80f 	bl	8003a34 <__retarget_lock_release_recursive>
 8004a16:	e7d9      	b.n	80049cc <_fflush_r+0xc>
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <_fflush_r+0x70>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d101      	bne.n	8004a22 <_fflush_r+0x62>
 8004a1e:	68ac      	ldr	r4, [r5, #8]
 8004a20:	e7df      	b.n	80049e2 <_fflush_r+0x22>
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <_fflush_r+0x74>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	bf08      	it	eq
 8004a28:	68ec      	ldreq	r4, [r5, #12]
 8004a2a:	e7da      	b.n	80049e2 <_fflush_r+0x22>
 8004a2c:	08004e0c 	.word	0x08004e0c
 8004a30:	08004e2c 	.word	0x08004e2c
 8004a34:	08004dec 	.word	0x08004dec

08004a38 <fiprintf>:
 8004a38:	b40e      	push	{r1, r2, r3}
 8004a3a:	b503      	push	{r0, r1, lr}
 8004a3c:	4601      	mov	r1, r0
 8004a3e:	ab03      	add	r3, sp, #12
 8004a40:	4805      	ldr	r0, [pc, #20]	; (8004a58 <fiprintf+0x20>)
 8004a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a46:	6800      	ldr	r0, [r0, #0]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	f7ff fcaf 	bl	80043ac <_vfiprintf_r>
 8004a4e:	b002      	add	sp, #8
 8004a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a54:	b003      	add	sp, #12
 8004a56:	4770      	bx	lr
 8004a58:	2000000c 	.word	0x2000000c

08004a5c <_lseek_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4d07      	ldr	r5, [pc, #28]	; (8004a7c <_lseek_r+0x20>)
 8004a60:	4604      	mov	r4, r0
 8004a62:	4608      	mov	r0, r1
 8004a64:	4611      	mov	r1, r2
 8004a66:	2200      	movs	r2, #0
 8004a68:	602a      	str	r2, [r5, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f7fc fa54 	bl	8000f18 <_lseek>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_lseek_r+0x1e>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_lseek_r+0x1e>
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	2000020c 	.word	0x2000020c

08004a80 <__swhatbuf_r>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	460e      	mov	r6, r1
 8004a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	b096      	sub	sp, #88	; 0x58
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	461d      	mov	r5, r3
 8004a90:	da08      	bge.n	8004aa4 <__swhatbuf_r+0x24>
 8004a92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	061a      	lsls	r2, r3, #24
 8004a9c:	d410      	bmi.n	8004ac0 <__swhatbuf_r+0x40>
 8004a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa2:	e00e      	b.n	8004ac2 <__swhatbuf_r+0x42>
 8004aa4:	466a      	mov	r2, sp
 8004aa6:	f000 f895 	bl	8004bd4 <_fstat_r>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	dbf1      	blt.n	8004a92 <__swhatbuf_r+0x12>
 8004aae:	9a01      	ldr	r2, [sp, #4]
 8004ab0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ab4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ab8:	425a      	negs	r2, r3
 8004aba:	415a      	adcs	r2, r3
 8004abc:	602a      	str	r2, [r5, #0]
 8004abe:	e7ee      	b.n	8004a9e <__swhatbuf_r+0x1e>
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	b016      	add	sp, #88	; 0x58
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004acc <__smakebuf_r>:
 8004acc:	898b      	ldrh	r3, [r1, #12]
 8004ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ad0:	079d      	lsls	r5, r3, #30
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	d507      	bpl.n	8004ae8 <__smakebuf_r+0x1c>
 8004ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	6163      	str	r3, [r4, #20]
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd70      	pop	{r4, r5, r6, pc}
 8004ae8:	ab01      	add	r3, sp, #4
 8004aea:	466a      	mov	r2, sp
 8004aec:	f7ff ffc8 	bl	8004a80 <__swhatbuf_r>
 8004af0:	9900      	ldr	r1, [sp, #0]
 8004af2:	4605      	mov	r5, r0
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7ff fbbb 	bl	8004270 <_malloc_r>
 8004afa:	b948      	cbnz	r0, 8004b10 <__smakebuf_r+0x44>
 8004afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b00:	059a      	lsls	r2, r3, #22
 8004b02:	d4ef      	bmi.n	8004ae4 <__smakebuf_r+0x18>
 8004b04:	f023 0303 	bic.w	r3, r3, #3
 8004b08:	f043 0302 	orr.w	r3, r3, #2
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	e7e3      	b.n	8004ad8 <__smakebuf_r+0xc>
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <__smakebuf_r+0x7c>)
 8004b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	6020      	str	r0, [r4, #0]
 8004b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	9b00      	ldr	r3, [sp, #0]
 8004b20:	6163      	str	r3, [r4, #20]
 8004b22:	9b01      	ldr	r3, [sp, #4]
 8004b24:	6120      	str	r0, [r4, #16]
 8004b26:	b15b      	cbz	r3, 8004b40 <__smakebuf_r+0x74>
 8004b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 f863 	bl	8004bf8 <_isatty_r>
 8004b32:	b128      	cbz	r0, 8004b40 <__smakebuf_r+0x74>
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	89a0      	ldrh	r0, [r4, #12]
 8004b42:	4305      	orrs	r5, r0
 8004b44:	81a5      	strh	r5, [r4, #12]
 8004b46:	e7cd      	b.n	8004ae4 <__smakebuf_r+0x18>
 8004b48:	08003885 	.word	0x08003885

08004b4c <__ascii_mbtowc>:
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	b901      	cbnz	r1, 8004b52 <__ascii_mbtowc+0x6>
 8004b50:	a901      	add	r1, sp, #4
 8004b52:	b142      	cbz	r2, 8004b66 <__ascii_mbtowc+0x1a>
 8004b54:	b14b      	cbz	r3, 8004b6a <__ascii_mbtowc+0x1e>
 8004b56:	7813      	ldrb	r3, [r2, #0]
 8004b58:	600b      	str	r3, [r1, #0]
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	1e10      	subs	r0, r2, #0
 8004b5e:	bf18      	it	ne
 8004b60:	2001      	movne	r0, #1
 8004b62:	b002      	add	sp, #8
 8004b64:	4770      	bx	lr
 8004b66:	4610      	mov	r0, r2
 8004b68:	e7fb      	b.n	8004b62 <__ascii_mbtowc+0x16>
 8004b6a:	f06f 0001 	mvn.w	r0, #1
 8004b6e:	e7f8      	b.n	8004b62 <__ascii_mbtowc+0x16>

08004b70 <__malloc_lock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	; (8004b78 <__malloc_lock+0x8>)
 8004b72:	f7fe bf5e 	b.w	8003a32 <__retarget_lock_acquire_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000200 	.word	0x20000200

08004b7c <__malloc_unlock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <__malloc_unlock+0x8>)
 8004b7e:	f7fe bf59 	b.w	8003a34 <__retarget_lock_release_recursive>
 8004b82:	bf00      	nop
 8004b84:	20000200 	.word	0x20000200

08004b88 <_read_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d07      	ldr	r5, [pc, #28]	; (8004ba8 <_read_r+0x20>)
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4611      	mov	r1, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	602a      	str	r2, [r5, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f7fc f95e 	bl	8000e58 <_read>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_read_r+0x1e>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_read_r+0x1e>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	2000020c 	.word	0x2000020c

08004bac <__ascii_wctomb>:
 8004bac:	b149      	cbz	r1, 8004bc2 <__ascii_wctomb+0x16>
 8004bae:	2aff      	cmp	r2, #255	; 0xff
 8004bb0:	bf85      	ittet	hi
 8004bb2:	238a      	movhi	r3, #138	; 0x8a
 8004bb4:	6003      	strhi	r3, [r0, #0]
 8004bb6:	700a      	strbls	r2, [r1, #0]
 8004bb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8004bbc:	bf98      	it	ls
 8004bbe:	2001      	movls	r0, #1
 8004bc0:	4770      	bx	lr
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	4770      	bx	lr

08004bc6 <abort>:
 8004bc6:	b508      	push	{r3, lr}
 8004bc8:	2006      	movs	r0, #6
 8004bca:	f000 f84d 	bl	8004c68 <raise>
 8004bce:	2001      	movs	r0, #1
 8004bd0:	f7fc f938 	bl	8000e44 <_exit>

08004bd4 <_fstat_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d07      	ldr	r5, [pc, #28]	; (8004bf4 <_fstat_r+0x20>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	602b      	str	r3, [r5, #0]
 8004be2:	f7fc f97e 	bl	8000ee2 <_fstat>
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	d102      	bne.n	8004bf0 <_fstat_r+0x1c>
 8004bea:	682b      	ldr	r3, [r5, #0]
 8004bec:	b103      	cbz	r3, 8004bf0 <_fstat_r+0x1c>
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
 8004bf2:	bf00      	nop
 8004bf4:	2000020c 	.word	0x2000020c

08004bf8 <_isatty_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d06      	ldr	r5, [pc, #24]	; (8004c14 <_isatty_r+0x1c>)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	f7fc f97d 	bl	8000f02 <_isatty>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_isatty_r+0x1a>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_isatty_r+0x1a>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	2000020c 	.word	0x2000020c

08004c18 <_raise_r>:
 8004c18:	291f      	cmp	r1, #31
 8004c1a:	b538      	push	{r3, r4, r5, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	d904      	bls.n	8004c2c <_raise_r+0x14>
 8004c22:	2316      	movs	r3, #22
 8004c24:	6003      	str	r3, [r0, #0]
 8004c26:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004c2e:	b112      	cbz	r2, 8004c36 <_raise_r+0x1e>
 8004c30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c34:	b94b      	cbnz	r3, 8004c4a <_raise_r+0x32>
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 f830 	bl	8004c9c <_getpid_r>
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	4601      	mov	r1, r0
 8004c40:	4620      	mov	r0, r4
 8004c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c46:	f000 b817 	b.w	8004c78 <_kill_r>
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d00a      	beq.n	8004c64 <_raise_r+0x4c>
 8004c4e:	1c59      	adds	r1, r3, #1
 8004c50:	d103      	bne.n	8004c5a <_raise_r+0x42>
 8004c52:	2316      	movs	r3, #22
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	2001      	movs	r0, #1
 8004c58:	e7e7      	b.n	8004c2a <_raise_r+0x12>
 8004c5a:	2400      	movs	r4, #0
 8004c5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c60:	4628      	mov	r0, r5
 8004c62:	4798      	blx	r3
 8004c64:	2000      	movs	r0, #0
 8004c66:	e7e0      	b.n	8004c2a <_raise_r+0x12>

08004c68 <raise>:
 8004c68:	4b02      	ldr	r3, [pc, #8]	; (8004c74 <raise+0xc>)
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	f7ff bfd3 	b.w	8004c18 <_raise_r>
 8004c72:	bf00      	nop
 8004c74:	2000000c 	.word	0x2000000c

08004c78 <_kill_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d07      	ldr	r5, [pc, #28]	; (8004c98 <_kill_r+0x20>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	f7fc f8cd 	bl	8000e24 <_kill>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d102      	bne.n	8004c94 <_kill_r+0x1c>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	b103      	cbz	r3, 8004c94 <_kill_r+0x1c>
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	2000020c 	.word	0x2000020c

08004c9c <_getpid_r>:
 8004c9c:	f7fc b8ba 	b.w	8000e14 <_getpid>

08004ca0 <_init>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr

08004cac <_fini>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr
