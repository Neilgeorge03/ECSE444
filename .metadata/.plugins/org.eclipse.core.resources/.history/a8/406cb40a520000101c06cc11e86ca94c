/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_DAC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For timer-interrupt DAC, set to 1
int isTimerMode = 0;
// For DMA driven DAC, set to 1
int isDMA = 0;

int currIdx = 0;
int led_state = 0;


uint16_t triangleVal, sawtoothVal, sinVal;

// Arrays for Part 1
uint16_t triangleArray[16] = {0,1,2,3,4,5,6,7,8,7,6,5,4,3,2,1};
uint16_t sawtoothArray[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
float sinArray[16] ={0.0,0.39269875,0.7853975,1.1780962499999998,1.570795,1.96349375,2.3561924999999997,2.74889125,3.14159,3.53428875,3.9269875,4.31968625,4.712384999999999,5.1050837499999995,5.4977825,5.89048125};
uint16_t sinArrayDAC[16];


// Part 2:
// 22 elements at 44.1KHz ~= 2000 periods repeated in 1 second == 2KHz tone
float C7ArrayRad[22] = {0.0,0.28559933214452665,0.5711986642890533,0.8567979964335799,1.1423973285781066,1.4279966607226333,1.7135959928671598,1.9991953250116865,2.284794657156213,2.5703939893007397,2.8559933214452666,3.141592653589793,3.4271919857343196,3.7127913178788465,3.998390650023373,4.2839899821679,4.569589314312426,4.855188646456953,5.140787978601479,5.426387310746007,5.711986642890533,5.99758597503506};
float G7ArrayRad[15] = {0.0,0.41887902047863906,0.8377580409572781,1.2566370614359172,1.6755160819145563,2.0943951023931953,2.5132741228718345,2.9321531433504733,3.3510321638291125,3.7699111843077517,4.1887902047863905,4.607669225265029,5.026548245743669,5.445427266222308,5.864306286700947};
float E7ArrayRad[17] ={0.0,0.36959913571644626,0.7391982714328925,1.1087974071493387,1.478396542865785,1.8479956785822313,2.2175948142986774,2.587193950015124,2.95679308573157,3.326392221448016,3.6959913571644627,4.065590492880909,4.435189628597355,4.804788764313801,5.174387900030248,5.543987035746694,5.91358617146314};

uint16_t C7DAC[22];
uint16_t G7DAC[15];
uint16_t E7DAC[17];



// For DMA Driven DAC, need dynamic pointer to arrays
uint16_t* currData = C7DAC;
uint16_t currDataLen = 22;
int noteIndex = 0;
uint16_t* allNotes[3] = {C7DAC, G7DAC, E7DAC};
int allNoteLens[3] = {22,15,17};
int soundPlaying = 0;


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
	if (!isDMA && htim == &htim2){
		currIdx = (currIdx + 1) % 22;
		sinVal = C7DAC[currIdx];
		int currIndex = currIdx;
		uint16_t currValue = sinVal;
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sinVal);
	}
}


// Pushbutton interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(isDMA){
		if(soundPlaying){
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			noteIndex = (noteIndex + 1) % 3;
			currData = allNotes[noteIndex];
			currDataLen = allNoteLens[noteIndex];
		}else{
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, currData, currDataLen, DAC_ALIGN_12B_R);
		}
		soundPlaying = !soundPlaying;
	}
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, led_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
	led_state = (led_state + 1) % 2;

}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	triangleVal = triangleArray[currIdx];
	sawtoothVal = sawtoothArray[currIdx];

	for(int i=0; i<16; i++){
		triangleArray[i] = 4095 * triangleArray[i] / 8;
		sawtoothArray[i] = 4095 * sawtoothArray[i] / 15;
		sinArrayDAC[i] = (uint16_t) (4095 * sin(sinArray[i])+4095)/3 + 4095/3;
	}
	for(int i=0; i<22; i++){
		C7DAC[i] = (uint16_t) (4095 * sin(C7ArrayRad[i])+4095)/3 + 4095/3;
		if(i<15){
			G7DAC[i] = (uint16_t) (4095 * sin(G7ArrayRad[i]+4095))/3 + 4095/3;
		}
		if(i < 17){
			E7DAC[i] = (uint16_t) (4095 * sin(E7ArrayRad[i]+4095))/3 + 4095/3;
		}
	}




  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_DAC1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  if(isTimerMode){
  	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK){
  		Error_Handler();
  	}
  }

  if(!isDMA){
	  if(HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK){
		  Error_Handler();
	  }
  }

  if(HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK){
	  Error_Handler();
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (!isTimerMode)
  {
	  // convert current value to voltage
	  if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, triangleVal) != HAL_OK){
		  Error_Handler();
	  }
	  if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sinVal) != HAL_OK){
		  Error_Handler();
	  }

	  uint32_t lastVal = HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1);
	  int currentIdx = currIdx;
	  // increment index + modulo
	  currIdx = (currIdx + 1) % 16;

	  // get next value
	  triangleVal = triangleArray[currIdx];
	  sawtoothVal = sawtoothArray[currIdx];
	  sinVal = sinArrayDAC[currIdx];

	  // 1 ms delay
	  HAL_Delay(1);
  }
  while(isTimerMode)
  {
	  uint32_t lastVal = HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1);
	  int currentIndex = currIdx;
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
  {
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 2720;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
